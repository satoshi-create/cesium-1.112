globalThis.CESIUM_WORKERS = atob("dmFyIENlc2l1bVdvcmtlcnMgPSAoKCkgPT4gewogIHZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7CiAgdmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTsKICB2YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CiAgdmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7CiAgdmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjsKICB2YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKICB2YXIgX19yZXF1aXJlID0gLyogQF9fUFVSRV9fICovICgoeCkgPT4gdHlwZW9mIHJlcXVpcmUgIT09ICJ1bmRlZmluZWQiID8gcmVxdWlyZSA6IHR5cGVvZiBQcm94eSAhPT0gInVuZGVmaW5lZCIgPyBuZXcgUHJveHkoeCwgewogICAgZ2V0OiAoYTMsIGIpID0+ICh0eXBlb2YgcmVxdWlyZSAhPT0gInVuZGVmaW5lZCIgPyByZXF1aXJlIDogYTMpW2JdCiAgfSkgOiB4KShmdW5jdGlvbih4KSB7CiAgICBpZiAodHlwZW9mIHJlcXVpcmUgIT09ICJ1bmRlZmluZWQiKQogICAgICByZXR1cm4gcmVxdWlyZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgdGhyb3cgRXJyb3IoJ0R5bmFtaWMgcmVxdWlyZSBvZiAiJyArIHggKyAnIiBpcyBub3Qgc3VwcG9ydGVkJyk7CiAgfSk7CiAgdmFyIF9fZ2xvYiA9IChtYXApID0+IChwYXRoKSA9PiB7CiAgICB2YXIgZm4gPSBtYXBbcGF0aF07CiAgICBpZiAoZm4pCiAgICAgIHJldHVybiBmbigpOwogICAgdGhyb3cgbmV3IEVycm9yKCJNb2R1bGUgbm90IGZvdW5kIGluIGJ1bmRsZTogIiArIHBhdGgpOwogIH07CiAgdmFyIF9fZXNtID0gKGZuLCByZXMpID0+IGZ1bmN0aW9uIF9faW5pdCgpIHsKICAgIHJldHVybiBmbiAmJiAocmVzID0gKDAsIGZuW19fZ2V0T3duUHJvcE5hbWVzKGZuKVswXV0pKGZuID0gMCkpLCByZXM7CiAgfTsKICB2YXIgX19jb21tb25KUyA9IChjYiwgbW9kKSA9PiBmdW5jdGlvbiBfX3JlcXVpcmUyKCkgewogICAgcmV0dXJuIG1vZCB8fCAoMCwgY2JbX19nZXRPd25Qcm9wTmFtZXMoY2IpWzBdXSkoKG1vZCA9IHsgZXhwb3J0czoge30gfSkuZXhwb3J0cywgbW9kKSwgbW9kLmV4cG9ydHM7CiAgfTsKICB2YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHsKICAgIGZvciAodmFyIG5hbWUgaW4gYWxsKQogICAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pOwogIH07CiAgdmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHsKICAgIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSAib2JqZWN0IiB8fCB0eXBlb2YgZnJvbSA9PT0gImZ1bmN0aW9uIikgewogICAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpCiAgICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdCkKICAgICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTsKICAgIH0KICAgIHJldHVybiB0bzsKICB9OwogIHZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoCiAgICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNCiAgICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLQogICAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gIl9fZXNNb2R1bGUiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldAogICAgLy8gImRlZmF1bHQiIHRvIHRoZSBDb21tb25KUyAibW9kdWxlLmV4cG9ydHMiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuCiAgICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgImRlZmF1bHQiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsCiAgICBtb2QKICApKTsKICB2YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9kZWZpbmVkLmpzCiAgZnVuY3Rpb24gZGVmaW5lZCh2YWx1ZSkgewogICAgcmV0dXJuIHZhbHVlICE9PSB2b2lkIDAgJiYgdmFsdWUgIT09IG51bGw7CiAgfQogIHZhciBkZWZpbmVkX2RlZmF1bHQ7CiAgdmFyIGluaXRfZGVmaW5lZCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvZGVmaW5lZC5qcyIoKSB7CiAgICAgIGRlZmluZWRfZGVmYXVsdCA9IGRlZmluZWQ7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9EZXZlbG9wZXJFcnJvci5qcwogIGZ1bmN0aW9uIERldmVsb3BlckVycm9yKG1lc3NhZ2UpIHsKICAgIHRoaXMubmFtZSA9ICJEZXZlbG9wZXJFcnJvciI7CiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlOwogICAgbGV0IHN0YWNrOwogICAgdHJ5IHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHN0YWNrID0gZS5zdGFjazsKICAgIH0KICAgIHRoaXMuc3RhY2sgPSBzdGFjazsKICB9CiAgdmFyIERldmVsb3BlckVycm9yX2RlZmF1bHQ7CiAgdmFyIGluaXRfRGV2ZWxvcGVyRXJyb3IgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0RldmVsb3BlckVycm9yLmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoT2JqZWN0LmNyZWF0ZSkpIHsKICAgICAgICBEZXZlbG9wZXJFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7CiAgICAgICAgRGV2ZWxvcGVyRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRGV2ZWxvcGVyRXJyb3I7CiAgICAgIH0KICAgICAgRGV2ZWxvcGVyRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7CiAgICAgICAgbGV0IHN0ciA9IGAke3RoaXMubmFtZX06ICR7dGhpcy5tZXNzYWdlfWA7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh0aGlzLnN0YWNrKSkgewogICAgICAgICAgc3RyICs9IGAKJHt0aGlzLnN0YWNrLnRvU3RyaW5nKCl9YDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN0cjsKICAgICAgfTsKICAgICAgRGV2ZWxvcGVyRXJyb3IudGhyb3dJbnN0YW50aWF0aW9uRXJyb3IgPSBmdW5jdGlvbigpIHsKICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoCiAgICAgICAgICAiVGhpcyBmdW5jdGlvbiBkZWZpbmVzIGFuIGludGVyZmFjZSBhbmQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgZGlyZWN0bHkuIgogICAgICAgICk7CiAgICAgIH07CiAgICAgIERldmVsb3BlckVycm9yX2RlZmF1bHQgPSBEZXZlbG9wZXJFcnJvcjsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NoZWNrLmpzCiAgZnVuY3Rpb24gZ2V0VW5kZWZpbmVkRXJyb3JNZXNzYWdlKG5hbWUpIHsKICAgIHJldHVybiBgJHtuYW1lfSBpcyByZXF1aXJlZCwgYWN0dWFsIHZhbHVlIHdhcyB1bmRlZmluZWRgOwogIH0KICBmdW5jdGlvbiBnZXRGYWlsZWRUeXBlRXJyb3JNZXNzYWdlKGFjdHVhbCwgZXhwZWN0ZWQsIG5hbWUpIHsKICAgIHJldHVybiBgRXhwZWN0ZWQgJHtuYW1lfSB0byBiZSB0eXBlb2YgJHtleHBlY3RlZH0sIGFjdHVhbCB0eXBlb2Ygd2FzICR7YWN0dWFsfWA7CiAgfQogIHZhciBDaGVjaywgQ2hlY2tfZGVmYXVsdDsKICB2YXIgaW5pdF9DaGVjayA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ2hlY2suanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBDaGVjayA9IHt9OwogICAgICBDaGVjay50eXBlT2YgPSB7fTsKICAgICAgQ2hlY2suZGVmaW5lZCA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh0ZXN0KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoZ2V0VW5kZWZpbmVkRXJyb3JNZXNzYWdlKG5hbWUpKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIENoZWNrLnR5cGVPZi5mdW5jID0gZnVuY3Rpb24obmFtZSwgdGVzdCkgewogICAgICAgIGlmICh0eXBlb2YgdGVzdCAhPT0gImZ1bmN0aW9uIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgIGdldEZhaWxlZFR5cGVFcnJvck1lc3NhZ2UodHlwZW9mIHRlc3QsICJmdW5jdGlvbiIsIG5hbWUpCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ2hlY2sudHlwZU9mLnN0cmluZyA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QpIHsKICAgICAgICBpZiAodHlwZW9mIHRlc3QgIT09ICJzdHJpbmciKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgZ2V0RmFpbGVkVHlwZUVycm9yTWVzc2FnZSh0eXBlb2YgdGVzdCwgInN0cmluZyIsIG5hbWUpCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ2hlY2sudHlwZU9mLm51bWJlciA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QpIHsKICAgICAgICBpZiAodHlwZW9mIHRlc3QgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgZ2V0RmFpbGVkVHlwZUVycm9yTWVzc2FnZSh0eXBlb2YgdGVzdCwgIm51bWJlciIsIG5hbWUpCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ2hlY2sudHlwZU9mLm51bWJlci5sZXNzVGhhbiA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QsIGxpbWl0KSB7CiAgICAgICAgQ2hlY2sudHlwZU9mLm51bWJlcihuYW1lLCB0ZXN0KTsKICAgICAgICBpZiAodGVzdCA+PSBsaW1pdCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgIGBFeHBlY3RlZCAke25hbWV9IHRvIGJlIGxlc3MgdGhhbiAke2xpbWl0fSwgYWN0dWFsIHZhbHVlIHdhcyAke3Rlc3R9YAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIENoZWNrLnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscyA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QsIGxpbWl0KSB7CiAgICAgICAgQ2hlY2sudHlwZU9mLm51bWJlcihuYW1lLCB0ZXN0KTsKICAgICAgICBpZiAodGVzdCA+IGxpbWl0KSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgYEV4cGVjdGVkICR7bmFtZX0gdG8gYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICR7bGltaXR9LCBhY3R1YWwgdmFsdWUgd2FzICR7dGVzdH1gCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ2hlY2sudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbiA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QsIGxpbWl0KSB7CiAgICAgICAgQ2hlY2sudHlwZU9mLm51bWJlcihuYW1lLCB0ZXN0KTsKICAgICAgICBpZiAodGVzdCA8PSBsaW1pdCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgIGBFeHBlY3RlZCAke25hbWV9IHRvIGJlIGdyZWF0ZXIgdGhhbiAke2xpbWl0fSwgYWN0dWFsIHZhbHVlIHdhcyAke3Rlc3R9YAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIENoZWNrLnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscyA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QsIGxpbWl0KSB7CiAgICAgICAgQ2hlY2sudHlwZU9mLm51bWJlcihuYW1lLCB0ZXN0KTsKICAgICAgICBpZiAodGVzdCA8IGxpbWl0KSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgYEV4cGVjdGVkICR7bmFtZX0gdG8gYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICR7bGltaXR9LCBhY3R1YWwgdmFsdWUgd2FzICR7dGVzdH1gCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ2hlY2sudHlwZU9mLm9iamVjdCA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QpIHsKICAgICAgICBpZiAodHlwZW9mIHRlc3QgIT09ICJvYmplY3QiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgZ2V0RmFpbGVkVHlwZUVycm9yTWVzc2FnZSh0eXBlb2YgdGVzdCwgIm9iamVjdCIsIG5hbWUpCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ2hlY2sudHlwZU9mLmJvb2wgPSBmdW5jdGlvbihuYW1lLCB0ZXN0KSB7CiAgICAgICAgaWYgKHR5cGVvZiB0ZXN0ICE9PSAiYm9vbGVhbiIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICBnZXRGYWlsZWRUeXBlRXJyb3JNZXNzYWdlKHR5cGVvZiB0ZXN0LCAiYm9vbGVhbiIsIG5hbWUpCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ2hlY2sudHlwZU9mLmJpZ2ludCA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QpIHsKICAgICAgICBpZiAodHlwZW9mIHRlc3QgIT09ICJiaWdpbnQiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgZ2V0RmFpbGVkVHlwZUVycm9yTWVzc2FnZSh0eXBlb2YgdGVzdCwgImJpZ2ludCIsIG5hbWUpCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ2hlY2sudHlwZU9mLm51bWJlci5lcXVhbHMgPSBmdW5jdGlvbihuYW1lMSwgbmFtZTIsIHRlc3QxLCB0ZXN0MikgewogICAgICAgIENoZWNrLnR5cGVPZi5udW1iZXIobmFtZTEsIHRlc3QxKTsKICAgICAgICBDaGVjay50eXBlT2YubnVtYmVyKG5hbWUyLCB0ZXN0Mik7CiAgICAgICAgaWYgKHRlc3QxICE9PSB0ZXN0MikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgIGAke25hbWUxfSBtdXN0IGJlIGVxdWFsIHRvICR7bmFtZTJ9LCB0aGUgYWN0dWFsIHZhbHVlcyBhcmUgJHt0ZXN0MX0gYW5kICR7dGVzdDJ9YAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIENoZWNrX2RlZmF1bHQgPSBDaGVjazsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2RlZmF1bHRWYWx1ZS5qcwogIGZ1bmN0aW9uIGRlZmF1bHRWYWx1ZShhMywgYikgewogICAgaWYgKGEzICE9PSB2b2lkIDAgJiYgYTMgIT09IG51bGwpIHsKICAgICAgcmV0dXJuIGEzOwogICAgfQogICAgcmV0dXJuIGI7CiAgfQogIHZhciBkZWZhdWx0VmFsdWVfZGVmYXVsdDsKICB2YXIgaW5pdF9kZWZhdWx0VmFsdWUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2RlZmF1bHRWYWx1ZS5qcyIoKSB7CiAgICAgIGRlZmF1bHRWYWx1ZS5FTVBUWV9PQkpFQ1QgPSBPYmplY3QuZnJlZXplKHt9KTsKICAgICAgZGVmYXVsdFZhbHVlX2RlZmF1bHQgPSBkZWZhdWx0VmFsdWU7CiAgICB9CiAgfSk7CgogIC8vIG5vZGVfbW9kdWxlcy9tZXJzZW5uZS10d2lzdGVyL3NyYy9tZXJzZW5uZS10d2lzdGVyLmpzCiAgdmFyIHJlcXVpcmVfbWVyc2VubmVfdHdpc3RlciA9IF9fY29tbW9uSlMoewogICAgIm5vZGVfbW9kdWxlcy9tZXJzZW5uZS10d2lzdGVyL3NyYy9tZXJzZW5uZS10d2lzdGVyLmpzIihleHBvcnRzMiwgbW9kdWxlKSB7CiAgICAgIHZhciBNZXJzZW5uZVR3aXN0ZXIyID0gZnVuY3Rpb24oc2VlZCkgewogICAgICAgIGlmIChzZWVkID09IHZvaWQgMCkgewogICAgICAgICAgc2VlZCA9ICgvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSkuZ2V0VGltZSgpOwogICAgICAgIH0KICAgICAgICB0aGlzLk4gPSA2MjQ7CiAgICAgICAgdGhpcy5NID0gMzk3OwogICAgICAgIHRoaXMuTUFUUklYX0EgPSAyNTY3NDgzNjE1OwogICAgICAgIHRoaXMuVVBQRVJfTUFTSyA9IDIxNDc0ODM2NDg7CiAgICAgICAgdGhpcy5MT1dFUl9NQVNLID0gMjE0NzQ4MzY0NzsKICAgICAgICB0aGlzLm10ID0gbmV3IEFycmF5KHRoaXMuTik7CiAgICAgICAgdGhpcy5tdGkgPSB0aGlzLk4gKyAxOwogICAgICAgIGlmIChzZWVkLmNvbnN0cnVjdG9yID09IEFycmF5KSB7CiAgICAgICAgICB0aGlzLmluaXRfYnlfYXJyYXkoc2VlZCwgc2VlZC5sZW5ndGgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmluaXRfc2VlZChzZWVkKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIE1lcnNlbm5lVHdpc3RlcjIucHJvdG90eXBlLmluaXRfc2VlZCA9IGZ1bmN0aW9uKHMpIHsKICAgICAgICB0aGlzLm10WzBdID0gcyA+Pj4gMDsKICAgICAgICBmb3IgKHRoaXMubXRpID0gMTsgdGhpcy5tdGkgPCB0aGlzLk47IHRoaXMubXRpKyspIHsKICAgICAgICAgIHZhciBzID0gdGhpcy5tdFt0aGlzLm10aSAtIDFdIF4gdGhpcy5tdFt0aGlzLm10aSAtIDFdID4+PiAzMDsKICAgICAgICAgIHRoaXMubXRbdGhpcy5tdGldID0gKCgocyAmIDQyOTQ5MDE3NjApID4+PiAxNikgKiAxODEyNDMzMjUzIDw8IDE2KSArIChzICYgNjU1MzUpICogMTgxMjQzMzI1MyArIHRoaXMubXRpOwogICAgICAgICAgdGhpcy5tdFt0aGlzLm10aV0gPj4+PSAwOwogICAgICAgIH0KICAgICAgfTsKICAgICAgTWVyc2VubmVUd2lzdGVyMi5wcm90b3R5cGUuaW5pdF9ieV9hcnJheSA9IGZ1bmN0aW9uKGluaXRfa2V5LCBrZXlfbGVuZ3RoKSB7CiAgICAgICAgdmFyIGksIGosIGs7CiAgICAgICAgdGhpcy5pbml0X3NlZWQoMTk2NTAyMTgpOwogICAgICAgIGkgPSAxOwogICAgICAgIGogPSAwOwogICAgICAgIGsgPSB0aGlzLk4gPiBrZXlfbGVuZ3RoID8gdGhpcy5OIDoga2V5X2xlbmd0aDsKICAgICAgICBmb3IgKDsgazsgay0tKSB7CiAgICAgICAgICB2YXIgcyA9IHRoaXMubXRbaSAtIDFdIF4gdGhpcy5tdFtpIC0gMV0gPj4+IDMwOwogICAgICAgICAgdGhpcy5tdFtpXSA9ICh0aGlzLm10W2ldIF4gKCgocyAmIDQyOTQ5MDE3NjApID4+PiAxNikgKiAxNjY0NTI1IDw8IDE2KSArIChzICYgNjU1MzUpICogMTY2NDUyNSkgKyBpbml0X2tleVtqXSArIGo7CiAgICAgICAgICB0aGlzLm10W2ldID4+Pj0gMDsKICAgICAgICAgIGkrKzsKICAgICAgICAgIGorKzsKICAgICAgICAgIGlmIChpID49IHRoaXMuTikgewogICAgICAgICAgICB0aGlzLm10WzBdID0gdGhpcy5tdFt0aGlzLk4gLSAxXTsKICAgICAgICAgICAgaSA9IDE7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoaiA+PSBrZXlfbGVuZ3RoKQogICAgICAgICAgICBqID0gMDsKICAgICAgICB9CiAgICAgICAgZm9yIChrID0gdGhpcy5OIC0gMTsgazsgay0tKSB7CiAgICAgICAgICB2YXIgcyA9IHRoaXMubXRbaSAtIDFdIF4gdGhpcy5tdFtpIC0gMV0gPj4+IDMwOwogICAgICAgICAgdGhpcy5tdFtpXSA9ICh0aGlzLm10W2ldIF4gKCgocyAmIDQyOTQ5MDE3NjApID4+PiAxNikgKiAxNTY2MDgzOTQxIDw8IDE2KSArIChzICYgNjU1MzUpICogMTU2NjA4Mzk0MSkgLSBpOwogICAgICAgICAgdGhpcy5tdFtpXSA+Pj49IDA7CiAgICAgICAgICBpKys7CiAgICAgICAgICBpZiAoaSA+PSB0aGlzLk4pIHsKICAgICAgICAgICAgdGhpcy5tdFswXSA9IHRoaXMubXRbdGhpcy5OIC0gMV07CiAgICAgICAgICAgIGkgPSAxOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLm10WzBdID0gMjE0NzQ4MzY0ODsKICAgICAgfTsKICAgICAgTWVyc2VubmVUd2lzdGVyMi5wcm90b3R5cGUucmFuZG9tX2ludCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciB5OwogICAgICAgIHZhciBtYWcwMSA9IG5ldyBBcnJheSgwLCB0aGlzLk1BVFJJWF9BKTsKICAgICAgICBpZiAodGhpcy5tdGkgPj0gdGhpcy5OKSB7CiAgICAgICAgICB2YXIga2s7CiAgICAgICAgICBpZiAodGhpcy5tdGkgPT0gdGhpcy5OICsgMSkKICAgICAgICAgICAgdGhpcy5pbml0X3NlZWQoNTQ4OSk7CiAgICAgICAgICBmb3IgKGtrID0gMDsga2sgPCB0aGlzLk4gLSB0aGlzLk07IGtrKyspIHsKICAgICAgICAgICAgeSA9IHRoaXMubXRba2tdICYgdGhpcy5VUFBFUl9NQVNLIHwgdGhpcy5tdFtrayArIDFdICYgdGhpcy5MT1dFUl9NQVNLOwogICAgICAgICAgICB0aGlzLm10W2trXSA9IHRoaXMubXRba2sgKyB0aGlzLk1dIF4geSA+Pj4gMSBeIG1hZzAxW3kgJiAxXTsKICAgICAgICAgIH0KICAgICAgICAgIGZvciAoOyBrayA8IHRoaXMuTiAtIDE7IGtrKyspIHsKICAgICAgICAgICAgeSA9IHRoaXMubXRba2tdICYgdGhpcy5VUFBFUl9NQVNLIHwgdGhpcy5tdFtrayArIDFdICYgdGhpcy5MT1dFUl9NQVNLOwogICAgICAgICAgICB0aGlzLm10W2trXSA9IHRoaXMubXRba2sgKyAodGhpcy5NIC0gdGhpcy5OKV0gXiB5ID4+PiAxIF4gbWFnMDFbeSAmIDFdOwogICAgICAgICAgfQogICAgICAgICAgeSA9IHRoaXMubXRbdGhpcy5OIC0gMV0gJiB0aGlzLlVQUEVSX01BU0sgfCB0aGlzLm10WzBdICYgdGhpcy5MT1dFUl9NQVNLOwogICAgICAgICAgdGhpcy5tdFt0aGlzLk4gLSAxXSA9IHRoaXMubXRbdGhpcy5NIC0gMV0gXiB5ID4+PiAxIF4gbWFnMDFbeSAmIDFdOwogICAgICAgICAgdGhpcy5tdGkgPSAwOwogICAgICAgIH0KICAgICAgICB5ID0gdGhpcy5tdFt0aGlzLm10aSsrXTsKICAgICAgICB5IF49IHkgPj4+IDExOwogICAgICAgIHkgXj0geSA8PCA3ICYgMjYzNjkyODY0MDsKICAgICAgICB5IF49IHkgPDwgMTUgJiA0MDIyNzMwNzUyOwogICAgICAgIHkgXj0geSA+Pj4gMTg7CiAgICAgICAgcmV0dXJuIHkgPj4+IDA7CiAgICAgIH07CiAgICAgIE1lcnNlbm5lVHdpc3RlcjIucHJvdG90eXBlLnJhbmRvbV9pbnQzMSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0aGlzLnJhbmRvbV9pbnQoKSA+Pj4gMTsKICAgICAgfTsKICAgICAgTWVyc2VubmVUd2lzdGVyMi5wcm90b3R5cGUucmFuZG9tX2luY2wgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy5yYW5kb21faW50KCkgKiAoMSAvIDQyOTQ5NjcyOTUpOwogICAgICB9OwogICAgICBNZXJzZW5uZVR3aXN0ZXIyLnByb3RvdHlwZS5yYW5kb20gPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy5yYW5kb21faW50KCkgKiAoMSAvIDQyOTQ5NjcyOTYpOwogICAgICB9OwogICAgICBNZXJzZW5uZVR3aXN0ZXIyLnByb3RvdHlwZS5yYW5kb21fZXhjbCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiAodGhpcy5yYW5kb21faW50KCkgKyAwLjUpICogKDEgLyA0Mjk0OTY3Mjk2KTsKICAgICAgfTsKICAgICAgTWVyc2VubmVUd2lzdGVyMi5wcm90b3R5cGUucmFuZG9tX2xvbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgYTMgPSB0aGlzLnJhbmRvbV9pbnQoKSA+Pj4gNSwgYiA9IHRoaXMucmFuZG9tX2ludCgpID4+PiA2OwogICAgICAgIHJldHVybiAoYTMgKiA2NzEwODg2NCArIGIpICogKDEgLyA5MDA3MTk5MjU0NzQwOTkyKTsKICAgICAgfTsKICAgICAgbW9kdWxlLmV4cG9ydHMgPSBNZXJzZW5uZVR3aXN0ZXIyOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvTWF0aC5qcwogIHZhciBpbXBvcnRfbWVyc2VubmVfdHdpc3RlciwgQ2VzaXVtTWF0aCwgZmFjdG9yaWFscywgcmFuZG9tTnVtYmVyR2VuZXJhdG9yLCBNYXRoX2RlZmF1bHQ7CiAgdmFyIGluaXRfTWF0aCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvTWF0aC5qcyIoKSB7CiAgICAgIGltcG9ydF9tZXJzZW5uZV90d2lzdGVyID0gX190b0VTTShyZXF1aXJlX21lcnNlbm5lX3R3aXN0ZXIoKSwgMSk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgQ2VzaXVtTWF0aCA9IHt9OwogICAgICBDZXNpdW1NYXRoLkVQU0lMT04xID0gMC4xOwogICAgICBDZXNpdW1NYXRoLkVQU0lMT04yID0gMC4wMTsKICAgICAgQ2VzaXVtTWF0aC5FUFNJTE9OMyA9IDFlLTM7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjQgPSAxZS00OwogICAgICBDZXNpdW1NYXRoLkVQU0lMT041ID0gMWUtNTsKICAgICAgQ2VzaXVtTWF0aC5FUFNJTE9ONiA9IDFlLTY7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjcgPSAxZS03OwogICAgICBDZXNpdW1NYXRoLkVQU0lMT044ID0gMWUtODsKICAgICAgQ2VzaXVtTWF0aC5FUFNJTE9OOSA9IDFlLTk7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjEwID0gMWUtMTA7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjExID0gMWUtMTE7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjEyID0gMWUtMTI7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjEzID0gMWUtMTM7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjE0ID0gMWUtMTQ7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjE1ID0gMWUtMTU7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjE2ID0gMWUtMTY7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjE3ID0gMWUtMTc7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjE4ID0gMWUtMTg7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjE5ID0gMWUtMTk7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjIwID0gMWUtMjA7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjIxID0gMWUtMjE7CiAgICAgIENlc2l1bU1hdGguR1JBVklUQVRJT05BTFBBUkFNRVRFUiA9IDM5ODYwMDQ0MThlNTsKICAgICAgQ2VzaXVtTWF0aC5TT0xBUl9SQURJVVMgPSA2OTU1ZTU7CiAgICAgIENlc2l1bU1hdGguTFVOQVJfUkFESVVTID0gMTczNzQwMDsKICAgICAgQ2VzaXVtTWF0aC5TSVhUWV9GT1VSX0tJTE9CWVRFUyA9IDY0ICogMTAyNDsKICAgICAgQ2VzaXVtTWF0aC5GT1VSX0dJR0FCWVRFUyA9IDQgKiAxMDI0ICogMTAyNCAqIDEwMjQ7CiAgICAgIENlc2l1bU1hdGguc2lnbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KE1hdGguc2lnbiwgZnVuY3Rpb24gc2lnbih2YWx1ZSkgewogICAgICAgIHZhbHVlID0gK3ZhbHVlOwogICAgICAgIGlmICh2YWx1ZSA9PT0gMCB8fCB2YWx1ZSAhPT0gdmFsdWUpIHsKICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZhbHVlID4gMCA/IDEgOiAtMTsKICAgICAgfSk7CiAgICAgIENlc2l1bU1hdGguc2lnbk5vdFplcm8gPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIHJldHVybiB2YWx1ZSA8IDAgPyAtMSA6IDE7CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGgudG9TTm9ybSA9IGZ1bmN0aW9uKHZhbHVlLCByYW5nZU1heGltdW0pIHsKICAgICAgICByYW5nZU1heGltdW0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChyYW5nZU1heGltdW0sIDI1NSk7CiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoCiAgICAgICAgICAoQ2VzaXVtTWF0aC5jbGFtcCh2YWx1ZSwgLTEsIDEpICogMC41ICsgMC41KSAqIHJhbmdlTWF4aW11bQogICAgICAgICk7CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGguZnJvbVNOb3JtID0gZnVuY3Rpb24odmFsdWUsIHJhbmdlTWF4aW11bSkgewogICAgICAgIHJhbmdlTWF4aW11bSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHJhbmdlTWF4aW11bSwgMjU1KTsKICAgICAgICByZXR1cm4gQ2VzaXVtTWF0aC5jbGFtcCh2YWx1ZSwgMCwgcmFuZ2VNYXhpbXVtKSAvIHJhbmdlTWF4aW11bSAqIDIgLSAxOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHZhbHVlLCByYW5nZU1pbmltdW0sIHJhbmdlTWF4aW11bSkgewogICAgICAgIHJhbmdlTWF4aW11bSA9IE1hdGgubWF4KHJhbmdlTWF4aW11bSAtIHJhbmdlTWluaW11bSwgMCk7CiAgICAgICAgcmV0dXJuIHJhbmdlTWF4aW11bSA9PT0gMCA/IDAgOiBDZXNpdW1NYXRoLmNsYW1wKCh2YWx1ZSAtIHJhbmdlTWluaW11bSkgLyByYW5nZU1heGltdW0sIDAsIDEpOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLnNpbmggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChNYXRoLnNpbmgsIGZ1bmN0aW9uIHNpbmgodmFsdWUpIHsKICAgICAgICByZXR1cm4gKE1hdGguZXhwKHZhbHVlKSAtIE1hdGguZXhwKC12YWx1ZSkpIC8gMjsKICAgICAgfSk7CiAgICAgIENlc2l1bU1hdGguY29zaCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KE1hdGguY29zaCwgZnVuY3Rpb24gY29zaCh2YWx1ZSkgewogICAgICAgIHJldHVybiAoTWF0aC5leHAodmFsdWUpICsgTWF0aC5leHAoLXZhbHVlKSkgLyAyOwogICAgICB9KTsKICAgICAgQ2VzaXVtTWF0aC5sZXJwID0gZnVuY3Rpb24ocCwgcSwgdGltZSkgewogICAgICAgIHJldHVybiAoMSAtIHRpbWUpICogcCArIHRpbWUgKiBxOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLlBJID0gTWF0aC5QSTsKICAgICAgQ2VzaXVtTWF0aC5PTkVfT1ZFUl9QSSA9IDEgLyBNYXRoLlBJOwogICAgICBDZXNpdW1NYXRoLlBJX09WRVJfVFdPID0gTWF0aC5QSSAvIDI7CiAgICAgIENlc2l1bU1hdGguUElfT1ZFUl9USFJFRSA9IE1hdGguUEkgLyAzOwogICAgICBDZXNpdW1NYXRoLlBJX09WRVJfRk9VUiA9IE1hdGguUEkgLyA0OwogICAgICBDZXNpdW1NYXRoLlBJX09WRVJfU0lYID0gTWF0aC5QSSAvIDY7CiAgICAgIENlc2l1bU1hdGguVEhSRUVfUElfT1ZFUl9UV08gPSAzICogTWF0aC5QSSAvIDI7CiAgICAgIENlc2l1bU1hdGguVFdPX1BJID0gMiAqIE1hdGguUEk7CiAgICAgIENlc2l1bU1hdGguT05FX09WRVJfVFdPX1BJID0gMSAvICgyICogTWF0aC5QSSk7CiAgICAgIENlc2l1bU1hdGguUkFESUFOU19QRVJfREVHUkVFID0gTWF0aC5QSSAvIDE4MDsKICAgICAgQ2VzaXVtTWF0aC5ERUdSRUVTX1BFUl9SQURJQU4gPSAxODAgLyBNYXRoLlBJOwogICAgICBDZXNpdW1NYXRoLlJBRElBTlNfUEVSX0FSQ1NFQ09ORCA9IENlc2l1bU1hdGguUkFESUFOU19QRVJfREVHUkVFIC8gMzYwMDsKICAgICAgQ2VzaXVtTWF0aC50b1JhZGlhbnMgPSBmdW5jdGlvbihkZWdyZWVzKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZGVncmVlcykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJkZWdyZWVzIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZGVncmVlcyAqIENlc2l1bU1hdGguUkFESUFOU19QRVJfREVHUkVFOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLnRvRGVncmVlcyA9IGZ1bmN0aW9uKHJhZGlhbnMpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyYWRpYW5zKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInJhZGlhbnMgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiByYWRpYW5zICogQ2VzaXVtTWF0aC5ERUdSRUVTX1BFUl9SQURJQU47CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGguY29udmVydExvbmdpdHVkZVJhbmdlID0gZnVuY3Rpb24oYW5nbGUpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhbmdsZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhbmdsZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgdHdvUGkgPSBDZXNpdW1NYXRoLlRXT19QSTsKICAgICAgICBjb25zdCBzaW1wbGlmaWVkID0gYW5nbGUgLSBNYXRoLmZsb29yKGFuZ2xlIC8gdHdvUGkpICogdHdvUGk7CiAgICAgICAgaWYgKHNpbXBsaWZpZWQgPCAtTWF0aC5QSSkgewogICAgICAgICAgcmV0dXJuIHNpbXBsaWZpZWQgKyB0d29QaTsKICAgICAgICB9CiAgICAgICAgaWYgKHNpbXBsaWZpZWQgPj0gTWF0aC5QSSkgewogICAgICAgICAgcmV0dXJuIHNpbXBsaWZpZWQgLSB0d29QaTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNpbXBsaWZpZWQ7CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGguY2xhbXBUb0xhdGl0dWRlUmFuZ2UgPSBmdW5jdGlvbihhbmdsZSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFuZ2xlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFuZ2xlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gQ2VzaXVtTWF0aC5jbGFtcCgKICAgICAgICAgIGFuZ2xlLAogICAgICAgICAgLTEgKiBDZXNpdW1NYXRoLlBJX09WRVJfVFdPLAogICAgICAgICAgQ2VzaXVtTWF0aC5QSV9PVkVSX1RXTwogICAgICAgICk7CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGgubmVnYXRpdmVQaVRvUGkgPSBmdW5jdGlvbihhbmdsZSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFuZ2xlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFuZ2xlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoYW5nbGUgPj0gLUNlc2l1bU1hdGguUEkgJiYgYW5nbGUgPD0gQ2VzaXVtTWF0aC5QSSkgewogICAgICAgICAgcmV0dXJuIGFuZ2xlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gQ2VzaXVtTWF0aC56ZXJvVG9Ud29QaShhbmdsZSArIENlc2l1bU1hdGguUEkpIC0gQ2VzaXVtTWF0aC5QSTsKICAgICAgfTsKICAgICAgQ2VzaXVtTWF0aC56ZXJvVG9Ud29QaSA9IGZ1bmN0aW9uKGFuZ2xlKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYW5nbGUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYW5nbGUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmIChhbmdsZSA+PSAwICYmIGFuZ2xlIDw9IENlc2l1bU1hdGguVFdPX1BJKSB7CiAgICAgICAgICByZXR1cm4gYW5nbGU7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG1vZCA9IENlc2l1bU1hdGgubW9kKGFuZ2xlLCBDZXNpdW1NYXRoLlRXT19QSSk7CiAgICAgICAgaWYgKE1hdGguYWJzKG1vZCkgPCBDZXNpdW1NYXRoLkVQU0lMT04xNCAmJiBNYXRoLmFicyhhbmdsZSkgPiBDZXNpdW1NYXRoLkVQU0lMT04xNCkgewogICAgICAgICAgcmV0dXJuIENlc2l1bU1hdGguVFdPX1BJOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbW9kOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLm1vZCA9IGZ1bmN0aW9uKG0sIG4pIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChtKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm0gaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG4pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibiBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKG4gPT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJkaXZpc29yIGNhbm5vdCBiZSAwLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoQ2VzaXVtTWF0aC5zaWduKG0pID09PSBDZXNpdW1NYXRoLnNpZ24obikgJiYgTWF0aC5hYnMobSkgPCBNYXRoLmFicyhuKSkgewogICAgICAgICAgcmV0dXJuIG07CiAgICAgICAgfQogICAgICAgIHJldHVybiAobSAlIG4gKyBuKSAlIG47CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGguZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGxlZnQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibGVmdCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmlnaHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmlnaHQgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIHJlbGF0aXZlRXBzaWxvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHJlbGF0aXZlRXBzaWxvbiwgMCk7CiAgICAgICAgYWJzb2x1dGVFcHNpbG9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoYWJzb2x1dGVFcHNpbG9uLCByZWxhdGl2ZUVwc2lsb24pOwogICAgICAgIGNvbnN0IGFic0RpZmYgPSBNYXRoLmFicyhsZWZ0IC0gcmlnaHQpOwogICAgICAgIHJldHVybiBhYnNEaWZmIDw9IGFic29sdXRlRXBzaWxvbiB8fCBhYnNEaWZmIDw9IHJlbGF0aXZlRXBzaWxvbiAqIE1hdGgubWF4KE1hdGguYWJzKGxlZnQpLCBNYXRoLmFicyhyaWdodCkpOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLmxlc3NUaGFuID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGxlZnQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZmlyc3QgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInNlY29uZCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYWJzb2x1dGVFcHNpbG9uKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFic29sdXRlRXBzaWxvbiBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGxlZnQgLSByaWdodCA8IC1hYnNvbHV0ZUVwc2lsb247CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGgubGVzc1RoYW5PckVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBhYnNvbHV0ZUVwc2lsb24pIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChsZWZ0KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImZpcnN0IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyaWdodCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJzZWNvbmQgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFic29sdXRlRXBzaWxvbikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhYnNvbHV0ZUVwc2lsb24gaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBsZWZ0IC0gcmlnaHQgPCBhYnNvbHV0ZUVwc2lsb247CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGguZ3JlYXRlclRoYW4gPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgYWJzb2x1dGVFcHNpbG9uKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQobGVmdCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJmaXJzdCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmlnaHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgic2Vjb25kIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhYnNvbHV0ZUVwc2lsb24pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYWJzb2x1dGVFcHNpbG9uIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbGVmdCAtIHJpZ2h0ID4gYWJzb2x1dGVFcHNpbG9uOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLmdyZWF0ZXJUaGFuT3JFcXVhbHMgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgYWJzb2x1dGVFcHNpbG9uKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQobGVmdCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJmaXJzdCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmlnaHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgic2Vjb25kIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhYnNvbHV0ZUVwc2lsb24pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYWJzb2x1dGVFcHNpbG9uIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbGVmdCAtIHJpZ2h0ID4gLWFic29sdXRlRXBzaWxvbjsKICAgICAgfTsKICAgICAgZmFjdG9yaWFscyA9IFsxXTsKICAgICAgQ2VzaXVtTWF0aC5mYWN0b3JpYWwgPSBmdW5jdGlvbihuKSB7CiAgICAgICAgaWYgKHR5cGVvZiBuICE9PSAibnVtYmVyIiB8fCBuIDwgMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJBIG51bWJlciBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMCBpcyByZXF1aXJlZC4iCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCBsZW5ndGggPSBmYWN0b3JpYWxzLmxlbmd0aDsKICAgICAgICBpZiAobiA+PSBsZW5ndGgpIHsKICAgICAgICAgIGxldCBzdW0gPSBmYWN0b3JpYWxzW2xlbmd0aCAtIDFdOwogICAgICAgICAgZm9yIChsZXQgaSA9IGxlbmd0aDsgaSA8PSBuOyBpKyspIHsKICAgICAgICAgICAgY29uc3QgbmV4dCA9IHN1bSAqIGk7CiAgICAgICAgICAgIGZhY3RvcmlhbHMucHVzaChuZXh0KTsKICAgICAgICAgICAgc3VtID0gbmV4dDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhY3RvcmlhbHNbbl07CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGguaW5jcmVtZW50V3JhcCA9IGZ1bmN0aW9uKG4sIG1heGltdW1WYWx1ZSwgbWluaW11bVZhbHVlKSB7CiAgICAgICAgbWluaW11bVZhbHVlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQobWluaW11bVZhbHVlLCAwKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChuKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm4gaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmIChtYXhpbXVtVmFsdWUgPD0gbWluaW11bVZhbHVlKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibWF4aW11bVZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG1pbmltdW1WYWx1ZS4iKTsKICAgICAgICB9CiAgICAgICAgKytuOwogICAgICAgIGlmIChuID4gbWF4aW11bVZhbHVlKSB7CiAgICAgICAgICBuID0gbWluaW11bVZhbHVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbjsKICAgICAgfTsKICAgICAgQ2VzaXVtTWF0aC5pc1Bvd2VyT2ZUd28gPSBmdW5jdGlvbihuKSB7CiAgICAgICAgaWYgKHR5cGVvZiBuICE9PSAibnVtYmVyIiB8fCBuIDwgMCB8fCBuID4gNDI5NDk2NzI5NSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIkEgbnVtYmVyIGJldHdlZW4gMCBhbmQgKDJeMzIpLTEgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuICE9PSAwICYmIChuICYgbiAtIDEpID09PSAwOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLm5leHRQb3dlck9mVHdvID0gZnVuY3Rpb24obikgewogICAgICAgIGlmICh0eXBlb2YgbiAhPT0gIm51bWJlciIgfHwgbiA8IDAgfHwgbiA+IDIxNDc0ODM2NDgpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJBIG51bWJlciBiZXR3ZWVuIDAgYW5kIDJeMzEgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIC0tbjsKICAgICAgICBuIHw9IG4gPj4gMTsKICAgICAgICBuIHw9IG4gPj4gMjsKICAgICAgICBuIHw9IG4gPj4gNDsKICAgICAgICBuIHw9IG4gPj4gODsKICAgICAgICBuIHw9IG4gPj4gMTY7CiAgICAgICAgKytuOwogICAgICAgIHJldHVybiBuOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLnByZXZpb3VzUG93ZXJPZlR3byA9IGZ1bmN0aW9uKG4pIHsKICAgICAgICBpZiAodHlwZW9mIG4gIT09ICJudW1iZXIiIHx8IG4gPCAwIHx8IG4gPiA0Mjk0OTY3Mjk1KSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiQSBudW1iZXIgYmV0d2VlbiAwIGFuZCAoMl4zMiktMSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgbiB8PSBuID4+IDE7CiAgICAgICAgbiB8PSBuID4+IDI7CiAgICAgICAgbiB8PSBuID4+IDQ7CiAgICAgICAgbiB8PSBuID4+IDg7CiAgICAgICAgbiB8PSBuID4+IDE2OwogICAgICAgIG4gfD0gbiA+PiAzMjsKICAgICAgICBuID0gKG4gPj4+IDApIC0gKG4gPj4+IDEpOwogICAgICAgIHJldHVybiBuOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLmNsYW1wID0gZnVuY3Rpb24odmFsdWUsIG1pbjMsIG1heDMpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigibWluIiwgbWluMyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJtYXgiLCBtYXgzKTsKICAgICAgICByZXR1cm4gdmFsdWUgPCBtaW4zID8gbWluMyA6IHZhbHVlID4gbWF4MyA/IG1heDMgOiB2YWx1ZTsKICAgICAgfTsKICAgICAgcmFuZG9tTnVtYmVyR2VuZXJhdG9yID0gbmV3IGltcG9ydF9tZXJzZW5uZV90d2lzdGVyLmRlZmF1bHQoKTsKICAgICAgQ2VzaXVtTWF0aC5zZXRSYW5kb21OdW1iZXJTZWVkID0gZnVuY3Rpb24oc2VlZCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHNlZWQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgic2VlZCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgcmFuZG9tTnVtYmVyR2VuZXJhdG9yID0gbmV3IGltcG9ydF9tZXJzZW5uZV90d2lzdGVyLmRlZmF1bHQoc2VlZCk7CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGgubmV4dFJhbmRvbU51bWJlciA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiByYW5kb21OdW1iZXJHZW5lcmF0b3IucmFuZG9tKCk7CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGgucmFuZG9tQmV0d2VlbiA9IGZ1bmN0aW9uKG1pbjMsIG1heDMpIHsKICAgICAgICByZXR1cm4gQ2VzaXVtTWF0aC5uZXh0UmFuZG9tTnVtYmVyKCkgKiAobWF4MyAtIG1pbjMpICsgbWluMzsKICAgICAgfTsKICAgICAgQ2VzaXVtTWF0aC5hY29zQ2xhbXBlZCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodmFsdWUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgidmFsdWUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBNYXRoLmFjb3MoQ2VzaXVtTWF0aC5jbGFtcCh2YWx1ZSwgLTEsIDEpKTsKICAgICAgfTsKICAgICAgQ2VzaXVtTWF0aC5hc2luQ2xhbXBlZCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodmFsdWUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgidmFsdWUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBNYXRoLmFzaW4oQ2VzaXVtTWF0aC5jbGFtcCh2YWx1ZSwgLTEsIDEpKTsKICAgICAgfTsKICAgICAgQ2VzaXVtTWF0aC5jaG9yZExlbmd0aCA9IGZ1bmN0aW9uKGFuZ2xlLCByYWRpdXMpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhbmdsZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhbmdsZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmFkaXVzKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInJhZGl1cyBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIDIgKiByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSAqIDAuNSk7CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGgubG9nQmFzZSA9IGZ1bmN0aW9uKG51bWJlciwgYmFzZSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG51bWJlcikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJudW1iZXIgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGJhc2UpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYmFzZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIE1hdGgubG9nKG51bWJlcikgLyBNYXRoLmxvZyhiYXNlKTsKICAgICAgfTsKICAgICAgQ2VzaXVtTWF0aC5jYnJ0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoTWF0aC5jYnJ0LCBmdW5jdGlvbiBjYnJ0KG51bWJlcikgewogICAgICAgIGNvbnN0IHJlc3VsdCA9IE1hdGgucG93KE1hdGguYWJzKG51bWJlciksIDEgLyAzKTsKICAgICAgICByZXR1cm4gbnVtYmVyIDwgMCA/IC1yZXN1bHQgOiByZXN1bHQ7CiAgICAgIH0pOwogICAgICBDZXNpdW1NYXRoLmxvZzIgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChNYXRoLmxvZzIsIGZ1bmN0aW9uIGxvZzIobnVtYmVyKSB7CiAgICAgICAgcmV0dXJuIE1hdGgubG9nKG51bWJlcikgKiBNYXRoLkxPRzJFOwogICAgICB9KTsKICAgICAgQ2VzaXVtTWF0aC5mb2cgPSBmdW5jdGlvbihkaXN0YW5jZVRvQ2FtZXJhLCBkZW5zaXR5KSB7CiAgICAgICAgY29uc3Qgc2NhbGFyID0gZGlzdGFuY2VUb0NhbWVyYSAqIGRlbnNpdHk7CiAgICAgICAgcmV0dXJuIDEgLSBNYXRoLmV4cCgtKHNjYWxhciAqIHNjYWxhcikpOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLmZhc3RBcHByb3hpbWF0ZUF0YW4gPSBmdW5jdGlvbih4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJ4IiwgeCk7CiAgICAgICAgcmV0dXJuIHggKiAoLTAuMTc4NCAqIE1hdGguYWJzKHgpIC0gMC4wNjYzICogeCAqIHggKyAxLjAzMDEpOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLmZhc3RBcHByb3hpbWF0ZUF0YW4yID0gZnVuY3Rpb24oeCwgeSkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigieCIsIHgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigieSIsIHkpOwogICAgICAgIGxldCBvcHBvc2l0ZTsKICAgICAgICBsZXQgdCA9IE1hdGguYWJzKHgpOwogICAgICAgIG9wcG9zaXRlID0gTWF0aC5hYnMoeSk7CiAgICAgICAgY29uc3QgYWRqYWNlbnQgPSBNYXRoLm1heCh0LCBvcHBvc2l0ZSk7CiAgICAgICAgb3Bwb3NpdGUgPSBNYXRoLm1pbih0LCBvcHBvc2l0ZSk7CiAgICAgICAgY29uc3Qgb3Bwb3NpdGVPdmVyQWRqYWNlbnQgPSBvcHBvc2l0ZSAvIGFkamFjZW50OwogICAgICAgIGlmIChpc05hTihvcHBvc2l0ZU92ZXJBZGphY2VudCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJlaXRoZXIgeCBvciB5IG11c3QgYmUgbm9uemVybyIpOwogICAgICAgIH0KICAgICAgICB0ID0gQ2VzaXVtTWF0aC5mYXN0QXBwcm94aW1hdGVBdGFuKG9wcG9zaXRlT3ZlckFkamFjZW50KTsKICAgICAgICB0ID0gTWF0aC5hYnMoeSkgPiBNYXRoLmFicyh4KSA/IENlc2l1bU1hdGguUElfT1ZFUl9UV08gLSB0IDogdDsKICAgICAgICB0ID0geCA8IDAgPyBDZXNpdW1NYXRoLlBJIC0gdCA6IHQ7CiAgICAgICAgdCA9IHkgPCAwID8gLXQgOiB0OwogICAgICAgIHJldHVybiB0OwogICAgICB9OwogICAgICBNYXRoX2RlZmF1bHQgPSBDZXNpdW1NYXRoOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ2FydGVzaWFuMy5qcwogIGZ1bmN0aW9uIENhcnRlc2lhbjMoeCwgeSwgeikgewogICAgdGhpcy54ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoeCwgMCk7CiAgICB0aGlzLnkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh5LCAwKTsKICAgIHRoaXMueiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHosIDApOwogIH0KICB2YXIgZGlzdGFuY2VTY3JhdGNoLCBsZXJwU2NyYXRjaCwgYW5nbGVCZXR3ZWVuU2NyYXRjaCwgYW5nbGVCZXR3ZWVuU2NyYXRjaDIsIG1vc3RPcnRob2dvbmFsQXhpc1NjcmF0Y2gsIHNjcmF0Y2hOLCBzY3JhdGNoSywgd2dzODRSYWRpaVNxdWFyZWQsIENhcnRlc2lhbjNfZGVmYXVsdDsKICB2YXIgaW5pdF9DYXJ0ZXNpYW4zID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9DYXJ0ZXNpYW4zLmpzIigpIHsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgQ2FydGVzaWFuMy5mcm9tU3BoZXJpY2FsID0gZnVuY3Rpb24oc3BoZXJpY2FsLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNwaGVyaWNhbCIsIHNwaGVyaWNhbCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjMoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgY2xvY2sgPSBzcGhlcmljYWwuY2xvY2s7CiAgICAgICAgY29uc3QgY29uZSA9IHNwaGVyaWNhbC5jb25lOwogICAgICAgIGNvbnN0IG1hZ25pdHVkZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHNwaGVyaWNhbC5tYWduaXR1ZGUsIDEpOwogICAgICAgIGNvbnN0IHJhZGlhbCA9IG1hZ25pdHVkZSAqIE1hdGguc2luKGNvbmUpOwogICAgICAgIHJlc3VsdC54ID0gcmFkaWFsICogTWF0aC5jb3MoY2xvY2spOwogICAgICAgIHJlc3VsdC55ID0gcmFkaWFsICogTWF0aC5zaW4oY2xvY2spOwogICAgICAgIHJlc3VsdC56ID0gbWFnbml0dWRlICogTWF0aC5jb3MoY29uZSk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5mcm9tRWxlbWVudHMgPSBmdW5jdGlvbih4LCB5LCB6LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENhcnRlc2lhbjMoeCwgeSwgeik7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmVzdWx0LnogPSB6OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMuY2xvbmUgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoY2FydGVzaWFuMTEpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENhcnRlc2lhbjMoY2FydGVzaWFuMTEueCwgY2FydGVzaWFuMTEueSwgY2FydGVzaWFuMTEueik7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC54ID0gY2FydGVzaWFuMTEueDsKICAgICAgICByZXN1bHQueSA9IGNhcnRlc2lhbjExLnk7CiAgICAgICAgcmVzdWx0LnogPSBjYXJ0ZXNpYW4xMS56OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMuZnJvbUNhcnRlc2lhbjQgPSBDYXJ0ZXNpYW4zLmNsb25lOwogICAgICBDYXJ0ZXNpYW4zLnBhY2tlZExlbmd0aCA9IDM7CiAgICAgIENhcnRlc2lhbjMucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLng7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLnk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSB2YWx1ZS56OwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjMoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC55ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHQueiA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMucGFja0FycmF5ID0gZnVuY3Rpb24oYXJyYXksIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOwogICAgICAgIGNvbnN0IHJlc3VsdExlbmd0aCA9IGxlbmd0aCAqIDM7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEFycmF5KHJlc3VsdExlbmd0aCk7CiAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShyZXN1bHQpICYmIHJlc3VsdC5sZW5ndGggIT09IHJlc3VsdExlbmd0aCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJJZiByZXN1bHQgaXMgYSB0eXBlZCBhcnJheSwgaXQgbXVzdCBoYXZlIGV4YWN0bHkgYXJyYXkubGVuZ3RoICogMyBlbGVtZW50cyIKICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQubGVuZ3RoICE9PSByZXN1bHRMZW5ndGgpIHsKICAgICAgICAgIHJlc3VsdC5sZW5ndGggPSByZXN1bHRMZW5ndGg7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgIENhcnRlc2lhbjMucGFjayhhcnJheVtpXSwgcmVzdWx0LCBpICogMyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMudW5wYWNrQXJyYXkgPSBmdW5jdGlvbihhcnJheSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiYXJyYXkubGVuZ3RoIiwgYXJyYXkubGVuZ3RoLCAzKTsKICAgICAgICBpZiAoYXJyYXkubGVuZ3RoICUgMyAhPT0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGxlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMy4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGggLyAzKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IGxlbmd0aCAvIDM7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDMpIHsKICAgICAgICAgIGNvbnN0IGluZGV4ID0gaSAvIDM7CiAgICAgICAgICByZXN1bHRbaW5kZXhdID0gQ2FydGVzaWFuMy51bnBhY2soYXJyYXksIGksIHJlc3VsdFtpbmRleF0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLmZyb21BcnJheSA9IENhcnRlc2lhbjMudW5wYWNrOwogICAgICBDYXJ0ZXNpYW4zLm1heGltdW1Db21wb25lbnQgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIHJldHVybiBNYXRoLm1heChjYXJ0ZXNpYW4xMS54LCBjYXJ0ZXNpYW4xMS55LCBjYXJ0ZXNpYW4xMS56KTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5taW5pbXVtQ29tcG9uZW50ID0gZnVuY3Rpb24oY2FydGVzaWFuMTEpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICByZXR1cm4gTWF0aC5taW4oY2FydGVzaWFuMTEueCwgY2FydGVzaWFuMTEueSwgY2FydGVzaWFuMTEueik7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMubWluaW11bUJ5Q29tcG9uZW50ID0gZnVuY3Rpb24oZmlyc3QsIHNlY29uZCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJmaXJzdCIsIGZpcnN0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNlY29uZCIsIHNlY29uZCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gTWF0aC5taW4oZmlyc3QueCwgc2Vjb25kLngpOwogICAgICAgIHJlc3VsdC55ID0gTWF0aC5taW4oZmlyc3QueSwgc2Vjb25kLnkpOwogICAgICAgIHJlc3VsdC56ID0gTWF0aC5taW4oZmlyc3Queiwgc2Vjb25kLnopOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMubWF4aW11bUJ5Q29tcG9uZW50ID0gZnVuY3Rpb24oZmlyc3QsIHNlY29uZCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJmaXJzdCIsIGZpcnN0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNlY29uZCIsIHNlY29uZCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gTWF0aC5tYXgoZmlyc3QueCwgc2Vjb25kLngpOwogICAgICAgIHJlc3VsdC55ID0gTWF0aC5tYXgoZmlyc3QueSwgc2Vjb25kLnkpOwogICAgICAgIHJlc3VsdC56ID0gTWF0aC5tYXgoZmlyc3Queiwgc2Vjb25kLnopOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMuY2xhbXAgPSBmdW5jdGlvbih2YWx1ZSwgbWluMywgbWF4MywgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1pbiIsIG1pbjMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF4IiwgbWF4Myk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHggPSBNYXRoX2RlZmF1bHQuY2xhbXAodmFsdWUueCwgbWluMy54LCBtYXgzLngpOwogICAgICAgIGNvbnN0IHkgPSBNYXRoX2RlZmF1bHQuY2xhbXAodmFsdWUueSwgbWluMy55LCBtYXgzLnkpOwogICAgICAgIGNvbnN0IHogPSBNYXRoX2RlZmF1bHQuY2xhbXAodmFsdWUueiwgbWluMy56LCBtYXgzLnopOwogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmVzdWx0LnogPSB6OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMubWFnbml0dWRlU3F1YXJlZCA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgcmV0dXJuIGNhcnRlc2lhbjExLnggKiBjYXJ0ZXNpYW4xMS54ICsgY2FydGVzaWFuMTEueSAqIGNhcnRlc2lhbjExLnkgKyBjYXJ0ZXNpYW4xMS56ICogY2FydGVzaWFuMTEuejsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5tYWduaXR1ZGUgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSkgewogICAgICAgIHJldHVybiBNYXRoLnNxcnQoQ2FydGVzaWFuMy5tYWduaXR1ZGVTcXVhcmVkKGNhcnRlc2lhbjExKSk7CiAgICAgIH07CiAgICAgIGRpc3RhbmNlU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zKCk7CiAgICAgIENhcnRlc2lhbjMuZGlzdGFuY2UgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2FydGVzaWFuMy5zdWJ0cmFjdChsZWZ0LCByaWdodCwgZGlzdGFuY2VTY3JhdGNoKTsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuMy5tYWduaXR1ZGUoZGlzdGFuY2VTY3JhdGNoKTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5kaXN0YW5jZVNxdWFyZWQgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2FydGVzaWFuMy5zdWJ0cmFjdChsZWZ0LCByaWdodCwgZGlzdGFuY2VTY3JhdGNoKTsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuMy5tYWduaXR1ZGVTcXVhcmVkKGRpc3RhbmNlU2NyYXRjaCk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMubm9ybWFsaXplID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBtYWduaXR1ZGUgPSBDYXJ0ZXNpYW4zLm1hZ25pdHVkZShjYXJ0ZXNpYW4xMSk7CiAgICAgICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4xMS54IC8gbWFnbml0dWRlOwogICAgICAgIHJlc3VsdC55ID0gY2FydGVzaWFuMTEueSAvIG1hZ25pdHVkZTsKICAgICAgICByZXN1bHQueiA9IGNhcnRlc2lhbjExLnogLyBtYWduaXR1ZGU7CiAgICAgICAgaWYgKGlzTmFOKHJlc3VsdC54KSB8fCBpc05hTihyZXN1bHQueSkgfHwgaXNOYU4ocmVzdWx0LnopKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibm9ybWFsaXplZCByZXN1bHQgaXMgbm90IGEgbnVtYmVyIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMuZG90ID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIHJldHVybiBsZWZ0LnggKiByaWdodC54ICsgbGVmdC55ICogcmlnaHQueSArIGxlZnQueiAqIHJpZ2h0Lno7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMubXVsdGlwbHlDb21wb25lbnRzID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gbGVmdC54ICogcmlnaHQueDsKICAgICAgICByZXN1bHQueSA9IGxlZnQueSAqIHJpZ2h0Lnk7CiAgICAgICAgcmVzdWx0LnogPSBsZWZ0LnogKiByaWdodC56OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMuZGl2aWRlQ29tcG9uZW50cyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IGxlZnQueCAvIHJpZ2h0Lng7CiAgICAgICAgcmVzdWx0LnkgPSBsZWZ0LnkgLyByaWdodC55OwogICAgICAgIHJlc3VsdC56ID0gbGVmdC56IC8gcmlnaHQuejsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLmFkZCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IGxlZnQueCArIHJpZ2h0Lng7CiAgICAgICAgcmVzdWx0LnkgPSBsZWZ0LnkgKyByaWdodC55OwogICAgICAgIHJlc3VsdC56ID0gbGVmdC56ICsgcmlnaHQuejsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLnN1YnRyYWN0ID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gbGVmdC54IC0gcmlnaHQueDsKICAgICAgICByZXN1bHQueSA9IGxlZnQueSAtIHJpZ2h0Lnk7CiAgICAgICAgcmVzdWx0LnogPSBsZWZ0LnogLSByaWdodC56OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMubXVsdGlwbHlCeVNjYWxhciA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCBzY2FsYXIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGFyIiwgc2NhbGFyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4xMS54ICogc2NhbGFyOwogICAgICAgIHJlc3VsdC55ID0gY2FydGVzaWFuMTEueSAqIHNjYWxhcjsKICAgICAgICByZXN1bHQueiA9IGNhcnRlc2lhbjExLnogKiBzY2FsYXI7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5kaXZpZGVCeVNjYWxhciA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCBzY2FsYXIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGFyIiwgc2NhbGFyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4xMS54IC8gc2NhbGFyOwogICAgICAgIHJlc3VsdC55ID0gY2FydGVzaWFuMTEueSAvIHNjYWxhcjsKICAgICAgICByZXN1bHQueiA9IGNhcnRlc2lhbjExLnogLyBzY2FsYXI7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5uZWdhdGUgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gLWNhcnRlc2lhbjExLng7CiAgICAgICAgcmVzdWx0LnkgPSAtY2FydGVzaWFuMTEueTsKICAgICAgICByZXN1bHQueiA9IC1jYXJ0ZXNpYW4xMS56OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMuYWJzID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IE1hdGguYWJzKGNhcnRlc2lhbjExLngpOwogICAgICAgIHJlc3VsdC55ID0gTWF0aC5hYnMoY2FydGVzaWFuMTEueSk7CiAgICAgICAgcmVzdWx0LnogPSBNYXRoLmFicyhjYXJ0ZXNpYW4xMS56KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBsZXJwU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zKCk7CiAgICAgIENhcnRlc2lhbjMubGVycCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic3RhcnQiLCBzdGFydCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJlbmQiLCBlbmQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigidCIsIHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBDYXJ0ZXNpYW4zLm11bHRpcGx5QnlTY2FsYXIoZW5kLCB0LCBsZXJwU2NyYXRjaCk7CiAgICAgICAgcmVzdWx0ID0gQ2FydGVzaWFuMy5tdWx0aXBseUJ5U2NhbGFyKHN0YXJ0LCAxIC0gdCwgcmVzdWx0KTsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuMy5hZGQobGVycFNjcmF0Y2gsIHJlc3VsdCwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgYW5nbGVCZXR3ZWVuU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zKCk7CiAgICAgIGFuZ2xlQmV0d2VlblNjcmF0Y2gyID0gbmV3IENhcnRlc2lhbjMoKTsKICAgICAgQ2FydGVzaWFuMy5hbmdsZUJldHdlZW4gPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2FydGVzaWFuMy5ub3JtYWxpemUobGVmdCwgYW5nbGVCZXR3ZWVuU2NyYXRjaCk7CiAgICAgICAgQ2FydGVzaWFuMy5ub3JtYWxpemUocmlnaHQsIGFuZ2xlQmV0d2VlblNjcmF0Y2gyKTsKICAgICAgICBjb25zdCBjb3NpbmUgPSBDYXJ0ZXNpYW4zLmRvdChhbmdsZUJldHdlZW5TY3JhdGNoLCBhbmdsZUJldHdlZW5TY3JhdGNoMik7CiAgICAgICAgY29uc3Qgc2luZSA9IENhcnRlc2lhbjMubWFnbml0dWRlKAogICAgICAgICAgQ2FydGVzaWFuMy5jcm9zcygKICAgICAgICAgICAgYW5nbGVCZXR3ZWVuU2NyYXRjaCwKICAgICAgICAgICAgYW5nbGVCZXR3ZWVuU2NyYXRjaDIsCiAgICAgICAgICAgIGFuZ2xlQmV0d2VlblNjcmF0Y2gKICAgICAgICAgICkKICAgICAgICApOwogICAgICAgIHJldHVybiBNYXRoLmF0YW4yKHNpbmUsIGNvc2luZSk7CiAgICAgIH07CiAgICAgIG1vc3RPcnRob2dvbmFsQXhpc1NjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuMygpOwogICAgICBDYXJ0ZXNpYW4zLm1vc3RPcnRob2dvbmFsQXhpcyA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgZiA9IENhcnRlc2lhbjMubm9ybWFsaXplKGNhcnRlc2lhbjExLCBtb3N0T3J0aG9nb25hbEF4aXNTY3JhdGNoKTsKICAgICAgICBDYXJ0ZXNpYW4zLmFicyhmLCBmKTsKICAgICAgICBpZiAoZi54IDw9IGYueSkgewogICAgICAgICAgaWYgKGYueCA8PSBmLnopIHsKICAgICAgICAgICAgcmVzdWx0ID0gQ2FydGVzaWFuMy5jbG9uZShDYXJ0ZXNpYW4zLlVOSVRfWCwgcmVzdWx0KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlc3VsdCA9IENhcnRlc2lhbjMuY2xvbmUoQ2FydGVzaWFuMy5VTklUX1osIHJlc3VsdCk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChmLnkgPD0gZi56KSB7CiAgICAgICAgICByZXN1bHQgPSBDYXJ0ZXNpYW4zLmNsb25lKENhcnRlc2lhbjMuVU5JVF9ZLCByZXN1bHQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQgPSBDYXJ0ZXNpYW4zLmNsb25lKENhcnRlc2lhbjMuVU5JVF9aLCByZXN1bHQpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLnByb2plY3RWZWN0b3IgPSBmdW5jdGlvbihhMywgYiwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhIiwgYTMpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYiIsIGIpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBzY2FsYXIgPSBDYXJ0ZXNpYW4zLmRvdChhMywgYikgLyBDYXJ0ZXNpYW4zLmRvdChiLCBiKTsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuMy5tdWx0aXBseUJ5U2NhbGFyKGIsIHNjYWxhciwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5lcXVhbHMgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBsZWZ0LnggPT09IHJpZ2h0LnggJiYgbGVmdC55ID09PSByaWdodC55ICYmIGxlZnQueiA9PT0gcmlnaHQuejsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5lcXVhbHNBcnJheSA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCBhcnJheSwgb2Zmc2V0KSB7CiAgICAgICAgcmV0dXJuIGNhcnRlc2lhbjExLnggPT09IGFycmF5W29mZnNldF0gJiYgY2FydGVzaWFuMTEueSA9PT0gYXJyYXlbb2Zmc2V0ICsgMV0gJiYgY2FydGVzaWFuMTEueiA9PT0gYXJyYXlbb2Zmc2V0ICsgMl07CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIGxlZnQueCwKICAgICAgICAgIHJpZ2h0LngsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgbGVmdC55LAogICAgICAgICAgcmlnaHQueSwKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICkgJiYgTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICBsZWZ0LnosCiAgICAgICAgICByaWdodC56LAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5jcm9zcyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBsZWZ0WCA9IGxlZnQueDsKICAgICAgICBjb25zdCBsZWZ0WSA9IGxlZnQueTsKICAgICAgICBjb25zdCBsZWZ0WiA9IGxlZnQuejsKICAgICAgICBjb25zdCByaWdodFggPSByaWdodC54OwogICAgICAgIGNvbnN0IHJpZ2h0WSA9IHJpZ2h0Lnk7CiAgICAgICAgY29uc3QgcmlnaHRaID0gcmlnaHQuejsKICAgICAgICBjb25zdCB4ID0gbGVmdFkgKiByaWdodFogLSBsZWZ0WiAqIHJpZ2h0WTsKICAgICAgICBjb25zdCB5ID0gbGVmdFogKiByaWdodFggLSBsZWZ0WCAqIHJpZ2h0WjsKICAgICAgICBjb25zdCB6ID0gbGVmdFggKiByaWdodFkgLSBsZWZ0WSAqIHJpZ2h0WDsKICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJlc3VsdC56ID0gejsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLm1pZHBvaW50ID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gKGxlZnQueCArIHJpZ2h0LngpICogMC41OwogICAgICAgIHJlc3VsdC55ID0gKGxlZnQueSArIHJpZ2h0LnkpICogMC41OwogICAgICAgIHJlc3VsdC56ID0gKGxlZnQueiArIHJpZ2h0LnopICogMC41OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMuZnJvbURlZ3JlZXMgPSBmdW5jdGlvbihsb25naXR1ZGUsIGxhdGl0dWRlLCBoZWlnaHQsIGVsbGlwc29pZCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJsb25naXR1ZGUiLCBsb25naXR1ZGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigibGF0aXR1ZGUiLCBsYXRpdHVkZSk7CiAgICAgICAgbG9uZ2l0dWRlID0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucyhsb25naXR1ZGUpOwogICAgICAgIGxhdGl0dWRlID0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucyhsYXRpdHVkZSk7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjMuZnJvbVJhZGlhbnMobG9uZ2l0dWRlLCBsYXRpdHVkZSwgaGVpZ2h0LCBlbGxpcHNvaWQsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hOID0gbmV3IENhcnRlc2lhbjMoKTsKICAgICAgc2NyYXRjaEsgPSBuZXcgQ2FydGVzaWFuMygpOwogICAgICB3Z3M4NFJhZGlpU3F1YXJlZCA9IG5ldyBDYXJ0ZXNpYW4zKAogICAgICAgIDYzNzgxMzcgKiA2Mzc4MTM3LAogICAgICAgIDYzNzgxMzcgKiA2Mzc4MTM3LAogICAgICAgIDYzNTY3NTIzMTQyNDUxNzllLTkgKiA2MzU2NzUyMzE0MjQ1MTc5ZS05CiAgICAgICk7CiAgICAgIENhcnRlc2lhbjMuZnJvbVJhZGlhbnMgPSBmdW5jdGlvbihsb25naXR1ZGUsIGxhdGl0dWRlLCBoZWlnaHQsIGVsbGlwc29pZCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJsb25naXR1ZGUiLCBsb25naXR1ZGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigibGF0aXR1ZGUiLCBsYXRpdHVkZSk7CiAgICAgICAgaGVpZ2h0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoaGVpZ2h0LCAwKTsKICAgICAgICBjb25zdCByYWRpaVNxdWFyZWQgPSBkZWZpbmVkX2RlZmF1bHQoZWxsaXBzb2lkKSA/IGVsbGlwc29pZC5yYWRpaVNxdWFyZWQgOiB3Z3M4NFJhZGlpU3F1YXJlZDsKICAgICAgICBjb25zdCBjb3NMYXRpdHVkZSA9IE1hdGguY29zKGxhdGl0dWRlKTsKICAgICAgICBzY3JhdGNoTi54ID0gY29zTGF0aXR1ZGUgKiBNYXRoLmNvcyhsb25naXR1ZGUpOwogICAgICAgIHNjcmF0Y2hOLnkgPSBjb3NMYXRpdHVkZSAqIE1hdGguc2luKGxvbmdpdHVkZSk7CiAgICAgICAgc2NyYXRjaE4ueiA9IE1hdGguc2luKGxhdGl0dWRlKTsKICAgICAgICBzY3JhdGNoTiA9IENhcnRlc2lhbjMubm9ybWFsaXplKHNjcmF0Y2hOLCBzY3JhdGNoTik7CiAgICAgICAgQ2FydGVzaWFuMy5tdWx0aXBseUNvbXBvbmVudHMocmFkaWlTcXVhcmVkLCBzY3JhdGNoTiwgc2NyYXRjaEspOwogICAgICAgIGNvbnN0IGdhbW1hID0gTWF0aC5zcXJ0KENhcnRlc2lhbjMuZG90KHNjcmF0Y2hOLCBzY3JhdGNoSykpOwogICAgICAgIHNjcmF0Y2hLID0gQ2FydGVzaWFuMy5kaXZpZGVCeVNjYWxhcihzY3JhdGNoSywgZ2FtbWEsIHNjcmF0Y2hLKTsKICAgICAgICBzY3JhdGNoTiA9IENhcnRlc2lhbjMubXVsdGlwbHlCeVNjYWxhcihzY3JhdGNoTiwgaGVpZ2h0LCBzY3JhdGNoTik7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjMoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjMuYWRkKHNjcmF0Y2hLLCBzY3JhdGNoTiwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5mcm9tRGVncmVlc0FycmF5ID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMsIGVsbGlwc29pZCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJjb29yZGluYXRlcyIsIGNvb3JkaW5hdGVzKTsKICAgICAgICBpZiAoY29vcmRpbmF0ZXMubGVuZ3RoIDwgMiB8fCBjb29yZGluYXRlcy5sZW5ndGggJSAyICE9PSAwKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgInRoZSBudW1iZXIgb2YgY29vcmRpbmF0ZXMgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDIgYW5kIGF0IGxlYXN0IDIiCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCBsZW5ndGggPSBjb29yZGluYXRlcy5sZW5ndGg7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEFycmF5KGxlbmd0aCAvIDIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQubGVuZ3RoID0gbGVuZ3RoIC8gMjsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMikgewogICAgICAgICAgY29uc3QgbG9uZ2l0dWRlID0gY29vcmRpbmF0ZXNbaV07CiAgICAgICAgICBjb25zdCBsYXRpdHVkZSA9IGNvb3JkaW5hdGVzW2kgKyAxXTsKICAgICAgICAgIGNvbnN0IGluZGV4ID0gaSAvIDI7CiAgICAgICAgICByZXN1bHRbaW5kZXhdID0gQ2FydGVzaWFuMy5mcm9tRGVncmVlcygKICAgICAgICAgICAgbG9uZ2l0dWRlLAogICAgICAgICAgICBsYXRpdHVkZSwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICByZXN1bHRbaW5kZXhdCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLmZyb21SYWRpYW5zQXJyYXkgPSBmdW5jdGlvbihjb29yZGluYXRlcywgZWxsaXBzb2lkLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImNvb3JkaW5hdGVzIiwgY29vcmRpbmF0ZXMpOwogICAgICAgIGlmIChjb29yZGluYXRlcy5sZW5ndGggPCAyIHx8IGNvb3JkaW5hdGVzLmxlbmd0aCAlIDIgIT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAidGhlIG51bWJlciBvZiBjb29yZGluYXRlcyBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMiBhbmQgYXQgbGVhc3QgMiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxlbmd0aCA9IGNvb3JkaW5hdGVzLmxlbmd0aDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoIC8gMik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdC5sZW5ndGggPSBsZW5ndGggLyAyOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAyKSB7CiAgICAgICAgICBjb25zdCBsb25naXR1ZGUgPSBjb29yZGluYXRlc1tpXTsKICAgICAgICAgIGNvbnN0IGxhdGl0dWRlID0gY29vcmRpbmF0ZXNbaSArIDFdOwogICAgICAgICAgY29uc3QgaW5kZXggPSBpIC8gMjsKICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBDYXJ0ZXNpYW4zLmZyb21SYWRpYW5zKAogICAgICAgICAgICBsb25naXR1ZGUsCiAgICAgICAgICAgIGxhdGl0dWRlLAogICAgICAgICAgICAwLAogICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0KICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMuZnJvbURlZ3JlZXNBcnJheUhlaWdodHMgPSBmdW5jdGlvbihjb29yZGluYXRlcywgZWxsaXBzb2lkLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImNvb3JkaW5hdGVzIiwgY29vcmRpbmF0ZXMpOwogICAgICAgIGlmIChjb29yZGluYXRlcy5sZW5ndGggPCAzIHx8IGNvb3JkaW5hdGVzLmxlbmd0aCAlIDMgIT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAidGhlIG51bWJlciBvZiBjb29yZGluYXRlcyBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMyBhbmQgYXQgbGVhc3QgMyIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxlbmd0aCA9IGNvb3JkaW5hdGVzLmxlbmd0aDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoIC8gMyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdC5sZW5ndGggPSBsZW5ndGggLyAzOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAzKSB7CiAgICAgICAgICBjb25zdCBsb25naXR1ZGUgPSBjb29yZGluYXRlc1tpXTsKICAgICAgICAgIGNvbnN0IGxhdGl0dWRlID0gY29vcmRpbmF0ZXNbaSArIDFdOwogICAgICAgICAgY29uc3QgaGVpZ2h0ID0gY29vcmRpbmF0ZXNbaSArIDJdOwogICAgICAgICAgY29uc3QgaW5kZXggPSBpIC8gMzsKICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBDYXJ0ZXNpYW4zLmZyb21EZWdyZWVzKAogICAgICAgICAgICBsb25naXR1ZGUsCiAgICAgICAgICAgIGxhdGl0dWRlLAogICAgICAgICAgICBoZWlnaHQsCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgcmVzdWx0W2luZGV4XQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5mcm9tUmFkaWFuc0FycmF5SGVpZ2h0cyA9IGZ1bmN0aW9uKGNvb3JkaW5hdGVzLCBlbGxpcHNvaWQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY29vcmRpbmF0ZXMiLCBjb29yZGluYXRlcyk7CiAgICAgICAgaWYgKGNvb3JkaW5hdGVzLmxlbmd0aCA8IDMgfHwgY29vcmRpbmF0ZXMubGVuZ3RoICUgMyAhPT0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJ0aGUgbnVtYmVyIG9mIGNvb3JkaW5hdGVzIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzIGFuZCBhdCBsZWFzdCAzIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbGVuZ3RoID0gY29vcmRpbmF0ZXMubGVuZ3RoOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGggLyAzKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IGxlbmd0aCAvIDM7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDMpIHsKICAgICAgICAgIGNvbnN0IGxvbmdpdHVkZSA9IGNvb3JkaW5hdGVzW2ldOwogICAgICAgICAgY29uc3QgbGF0aXR1ZGUgPSBjb29yZGluYXRlc1tpICsgMV07CiAgICAgICAgICBjb25zdCBoZWlnaHQgPSBjb29yZGluYXRlc1tpICsgMl07CiAgICAgICAgICBjb25zdCBpbmRleCA9IGkgLyAzOwogICAgICAgICAgcmVzdWx0W2luZGV4XSA9IENhcnRlc2lhbjMuZnJvbVJhZGlhbnMoCiAgICAgICAgICAgIGxvbmdpdHVkZSwKICAgICAgICAgICAgbGF0aXR1ZGUsCiAgICAgICAgICAgIGhlaWdodCwKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICByZXN1bHRbaW5kZXhdCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLlpFUk8gPSBPYmplY3QuZnJlZXplKG5ldyBDYXJ0ZXNpYW4zKDAsIDAsIDApKTsKICAgICAgQ2FydGVzaWFuMy5PTkUgPSBPYmplY3QuZnJlZXplKG5ldyBDYXJ0ZXNpYW4zKDEsIDEsIDEpKTsKICAgICAgQ2FydGVzaWFuMy5VTklUX1ggPSBPYmplY3QuZnJlZXplKG5ldyBDYXJ0ZXNpYW4zKDEsIDAsIDApKTsKICAgICAgQ2FydGVzaWFuMy5VTklUX1kgPSBPYmplY3QuZnJlZXplKG5ldyBDYXJ0ZXNpYW4zKDAsIDEsIDApKTsKICAgICAgQ2FydGVzaWFuMy5VTklUX1ogPSBPYmplY3QuZnJlZXplKG5ldyBDYXJ0ZXNpYW4zKDAsIDAsIDEpKTsKICAgICAgQ2FydGVzaWFuMy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuMy5jbG9uZSh0aGlzLCByZXN1bHQpOwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihyaWdodCkgewogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zLmVxdWFscyh0aGlzLCByaWdodCk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMucHJvdG90eXBlLmVxdWFsc0Vwc2lsb24gPSBmdW5jdGlvbihyaWdodCwgcmVsYXRpdmVFcHNpbG9uLCBhYnNvbHV0ZUVwc2lsb24pIHsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuMy5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgdGhpcywKICAgICAgICAgIHJpZ2h0LAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gYCgke3RoaXMueH0sICR7dGhpcy55fSwgJHt0aGlzLnp9KWA7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdCA9IENhcnRlc2lhbjM7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9zY2FsZVRvR2VvZGV0aWNTdXJmYWNlLmpzCiAgZnVuY3Rpb24gc2NhbGVUb0dlb2RldGljU3VyZmFjZShjYXJ0ZXNpYW4xMSwgb25lT3ZlclJhZGlpLCBvbmVPdmVyUmFkaWlTcXVhcmVkLCBjZW50ZXJUb2xlcmFuY2VTcXVhcmVkLCByZXN1bHQpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNhcnRlc2lhbjExKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiY2FydGVzaWFuIGlzIHJlcXVpcmVkLiIpOwogICAgfQogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQob25lT3ZlclJhZGlpKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib25lT3ZlclJhZGlpIGlzIHJlcXVpcmVkLiIpOwogICAgfQogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQob25lT3ZlclJhZGlpU3F1YXJlZCkpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm9uZU92ZXJSYWRpaVNxdWFyZWQgaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChjZW50ZXJUb2xlcmFuY2VTcXVhcmVkKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiY2VudGVyVG9sZXJhbmNlU3F1YXJlZCBpcyByZXF1aXJlZC4iKTsKICAgIH0KICAgIGNvbnN0IHBvc2l0aW9uWCA9IGNhcnRlc2lhbjExLng7CiAgICBjb25zdCBwb3NpdGlvblkgPSBjYXJ0ZXNpYW4xMS55OwogICAgY29uc3QgcG9zaXRpb25aID0gY2FydGVzaWFuMTEuejsKICAgIGNvbnN0IG9uZU92ZXJSYWRpaVggPSBvbmVPdmVyUmFkaWkueDsKICAgIGNvbnN0IG9uZU92ZXJSYWRpaVkgPSBvbmVPdmVyUmFkaWkueTsKICAgIGNvbnN0IG9uZU92ZXJSYWRpaVogPSBvbmVPdmVyUmFkaWkuejsKICAgIGNvbnN0IHgyID0gcG9zaXRpb25YICogcG9zaXRpb25YICogb25lT3ZlclJhZGlpWCAqIG9uZU92ZXJSYWRpaVg7CiAgICBjb25zdCB5MiA9IHBvc2l0aW9uWSAqIHBvc2l0aW9uWSAqIG9uZU92ZXJSYWRpaVkgKiBvbmVPdmVyUmFkaWlZOwogICAgY29uc3QgejIgPSBwb3NpdGlvblogKiBwb3NpdGlvblogKiBvbmVPdmVyUmFkaWlaICogb25lT3ZlclJhZGlpWjsKICAgIGNvbnN0IHNxdWFyZWROb3JtID0geDIgKyB5MiArIHoyOwogICAgY29uc3QgcmF0aW8gPSBNYXRoLnNxcnQoMSAvIHNxdWFyZWROb3JtKTsKICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICBjYXJ0ZXNpYW4xMSwKICAgICAgcmF0aW8sCiAgICAgIHNjYWxlVG9HZW9kZXRpY1N1cmZhY2VJbnRlcnNlY3Rpb24KICAgICk7CiAgICBpZiAoc3F1YXJlZE5vcm0gPCBjZW50ZXJUb2xlcmFuY2VTcXVhcmVkKSB7CiAgICAgIHJldHVybiAhaXNGaW5pdGUocmF0aW8pID8gdm9pZCAwIDogQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGludGVyc2VjdGlvbiwgcmVzdWx0KTsKICAgIH0KICAgIGNvbnN0IG9uZU92ZXJSYWRpaVNxdWFyZWRYID0gb25lT3ZlclJhZGlpU3F1YXJlZC54OwogICAgY29uc3Qgb25lT3ZlclJhZGlpU3F1YXJlZFkgPSBvbmVPdmVyUmFkaWlTcXVhcmVkLnk7CiAgICBjb25zdCBvbmVPdmVyUmFkaWlTcXVhcmVkWiA9IG9uZU92ZXJSYWRpaVNxdWFyZWQuejsKICAgIGNvbnN0IGdyYWRpZW50ID0gc2NhbGVUb0dlb2RldGljU3VyZmFjZUdyYWRpZW50OwogICAgZ3JhZGllbnQueCA9IGludGVyc2VjdGlvbi54ICogb25lT3ZlclJhZGlpU3F1YXJlZFggKiAyOwogICAgZ3JhZGllbnQueSA9IGludGVyc2VjdGlvbi55ICogb25lT3ZlclJhZGlpU3F1YXJlZFkgKiAyOwogICAgZ3JhZGllbnQueiA9IGludGVyc2VjdGlvbi56ICogb25lT3ZlclJhZGlpU3F1YXJlZFogKiAyOwogICAgbGV0IGxhbWJkYSA9ICgxIC0gcmF0aW8pICogQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZShjYXJ0ZXNpYW4xMSkgLyAoMC41ICogQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZShncmFkaWVudCkpOwogICAgbGV0IGNvcnJlY3Rpb24gPSAwOwogICAgbGV0IGZ1bmM7CiAgICBsZXQgZGVub21pbmF0b3I7CiAgICBsZXQgeE11bHRpcGxpZXI7CiAgICBsZXQgeU11bHRpcGxpZXI7CiAgICBsZXQgek11bHRpcGxpZXI7CiAgICBsZXQgeE11bHRpcGxpZXIyOwogICAgbGV0IHlNdWx0aXBsaWVyMjsKICAgIGxldCB6TXVsdGlwbGllcjI7CiAgICBsZXQgeE11bHRpcGxpZXIzOwogICAgbGV0IHlNdWx0aXBsaWVyMzsKICAgIGxldCB6TXVsdGlwbGllcjM7CiAgICBkbyB7CiAgICAgIGxhbWJkYSAtPSBjb3JyZWN0aW9uOwogICAgICB4TXVsdGlwbGllciA9IDEgLyAoMSArIGxhbWJkYSAqIG9uZU92ZXJSYWRpaVNxdWFyZWRYKTsKICAgICAgeU11bHRpcGxpZXIgPSAxIC8gKDEgKyBsYW1iZGEgKiBvbmVPdmVyUmFkaWlTcXVhcmVkWSk7CiAgICAgIHpNdWx0aXBsaWVyID0gMSAvICgxICsgbGFtYmRhICogb25lT3ZlclJhZGlpU3F1YXJlZFopOwogICAgICB4TXVsdGlwbGllcjIgPSB4TXVsdGlwbGllciAqIHhNdWx0aXBsaWVyOwogICAgICB5TXVsdGlwbGllcjIgPSB5TXVsdGlwbGllciAqIHlNdWx0aXBsaWVyOwogICAgICB6TXVsdGlwbGllcjIgPSB6TXVsdGlwbGllciAqIHpNdWx0aXBsaWVyOwogICAgICB4TXVsdGlwbGllcjMgPSB4TXVsdGlwbGllcjIgKiB4TXVsdGlwbGllcjsKICAgICAgeU11bHRpcGxpZXIzID0geU11bHRpcGxpZXIyICogeU11bHRpcGxpZXI7CiAgICAgIHpNdWx0aXBsaWVyMyA9IHpNdWx0aXBsaWVyMiAqIHpNdWx0aXBsaWVyOwogICAgICBmdW5jID0geDIgKiB4TXVsdGlwbGllcjIgKyB5MiAqIHlNdWx0aXBsaWVyMiArIHoyICogek11bHRpcGxpZXIyIC0gMTsKICAgICAgZGVub21pbmF0b3IgPSB4MiAqIHhNdWx0aXBsaWVyMyAqIG9uZU92ZXJSYWRpaVNxdWFyZWRYICsgeTIgKiB5TXVsdGlwbGllcjMgKiBvbmVPdmVyUmFkaWlTcXVhcmVkWSArIHoyICogek11bHRpcGxpZXIzICogb25lT3ZlclJhZGlpU3F1YXJlZFo7CiAgICAgIGNvbnN0IGRlcml2YXRpdmUgPSAtMiAqIGRlbm9taW5hdG9yOwogICAgICBjb3JyZWN0aW9uID0gZnVuYyAvIGRlcml2YXRpdmU7CiAgICB9IHdoaWxlIChNYXRoLmFicyhmdW5jKSA+IE1hdGhfZGVmYXVsdC5FUFNJTE9OMTIpOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICByZXR1cm4gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgKICAgICAgICBwb3NpdGlvblggKiB4TXVsdGlwbGllciwKICAgICAgICBwb3NpdGlvblkgKiB5TXVsdGlwbGllciwKICAgICAgICBwb3NpdGlvblogKiB6TXVsdGlwbGllcgogICAgICApOwogICAgfQogICAgcmVzdWx0LnggPSBwb3NpdGlvblggKiB4TXVsdGlwbGllcjsKICAgIHJlc3VsdC55ID0gcG9zaXRpb25ZICogeU11bHRpcGxpZXI7CiAgICByZXN1bHQueiA9IHBvc2l0aW9uWiAqIHpNdWx0aXBsaWVyOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgdmFyIHNjYWxlVG9HZW9kZXRpY1N1cmZhY2VJbnRlcnNlY3Rpb24sIHNjYWxlVG9HZW9kZXRpY1N1cmZhY2VHcmFkaWVudCwgc2NhbGVUb0dlb2RldGljU3VyZmFjZV9kZWZhdWx0OwogIHZhciBpbml0X3NjYWxlVG9HZW9kZXRpY1N1cmZhY2UgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL3NjYWxlVG9HZW9kZXRpY1N1cmZhY2UuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIHNjYWxlVG9HZW9kZXRpY1N1cmZhY2VJbnRlcnNlY3Rpb24gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjYWxlVG9HZW9kZXRpY1N1cmZhY2VHcmFkaWVudCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NhbGVUb0dlb2RldGljU3VyZmFjZV9kZWZhdWx0ID0gc2NhbGVUb0dlb2RldGljU3VyZmFjZTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NhcnRvZ3JhcGhpYy5qcwogIGZ1bmN0aW9uIENhcnRvZ3JhcGhpYyhsb25naXR1ZGUsIGxhdGl0dWRlLCBoZWlnaHQpIHsKICAgIHRoaXMubG9uZ2l0dWRlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQobG9uZ2l0dWRlLCAwKTsKICAgIHRoaXMubGF0aXR1ZGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChsYXRpdHVkZSwgMCk7CiAgICB0aGlzLmhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGhlaWdodCwgMCk7CiAgfQogIHZhciBjYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpY04sIGNhcnRlc2lhblRvQ2FydG9ncmFwaGljUCwgY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWNILCB3Z3M4NE9uZU92ZXJSYWRpaSwgd2dzODRPbmVPdmVyUmFkaWlTcXVhcmVkLCB3Z3M4NENlbnRlclRvbGVyYW5jZVNxdWFyZWQsIENhcnRvZ3JhcGhpY19kZWZhdWx0OwogIHZhciBpbml0X0NhcnRvZ3JhcGhpYyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ2FydG9ncmFwaGljLmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X3NjYWxlVG9HZW9kZXRpY1N1cmZhY2UoKTsKICAgICAgQ2FydG9ncmFwaGljLmZyb21SYWRpYW5zID0gZnVuY3Rpb24obG9uZ2l0dWRlLCBsYXRpdHVkZSwgaGVpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImxvbmdpdHVkZSIsIGxvbmdpdHVkZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJsYXRpdHVkZSIsIGxhdGl0dWRlKTsKICAgICAgICBoZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChoZWlnaHQsIDApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydG9ncmFwaGljKGxvbmdpdHVkZSwgbGF0aXR1ZGUsIGhlaWdodCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5sb25naXR1ZGUgPSBsb25naXR1ZGU7CiAgICAgICAgcmVzdWx0LmxhdGl0dWRlID0gbGF0aXR1ZGU7CiAgICAgICAgcmVzdWx0LmhlaWdodCA9IGhlaWdodDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0b2dyYXBoaWMuZnJvbURlZ3JlZXMgPSBmdW5jdGlvbihsb25naXR1ZGUsIGxhdGl0dWRlLCBoZWlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigibG9uZ2l0dWRlIiwgbG9uZ2l0dWRlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImxhdGl0dWRlIiwgbGF0aXR1ZGUpOwogICAgICAgIGxvbmdpdHVkZSA9IE1hdGhfZGVmYXVsdC50b1JhZGlhbnMobG9uZ2l0dWRlKTsKICAgICAgICBsYXRpdHVkZSA9IE1hdGhfZGVmYXVsdC50b1JhZGlhbnMobGF0aXR1ZGUpOwogICAgICAgIHJldHVybiBDYXJ0b2dyYXBoaWMuZnJvbVJhZGlhbnMobG9uZ2l0dWRlLCBsYXRpdHVkZSwgaGVpZ2h0LCByZXN1bHQpOwogICAgICB9OwogICAgICBjYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpY04gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhblRvQ2FydG9ncmFwaGljUCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWNIID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB3Z3M4NE9uZU92ZXJSYWRpaSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoCiAgICAgICAgMSAvIDYzNzgxMzcsCiAgICAgICAgMSAvIDYzNzgxMzcsCiAgICAgICAgMSAvIDYzNTY3NTIzMTQyNDUxNzllLTkKICAgICAgKTsKICAgICAgd2dzODRPbmVPdmVyUmFkaWlTcXVhcmVkID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgKICAgICAgICAxIC8gKDYzNzgxMzcgKiA2Mzc4MTM3KSwKICAgICAgICAxIC8gKDYzNzgxMzcgKiA2Mzc4MTM3KSwKICAgICAgICAxIC8gKDYzNTY3NTIzMTQyNDUxNzllLTkgKiA2MzU2NzUyMzE0MjQ1MTc5ZS05KQogICAgICApOwogICAgICB3Z3M4NENlbnRlclRvbGVyYW5jZVNxdWFyZWQgPSBNYXRoX2RlZmF1bHQuRVBTSUxPTjE7CiAgICAgIENhcnRvZ3JhcGhpYy5mcm9tQ2FydGVzaWFuID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIGVsbGlwc29pZCwgcmVzdWx0KSB7CiAgICAgICAgY29uc3Qgb25lT3ZlclJhZGlpID0gZGVmaW5lZF9kZWZhdWx0KGVsbGlwc29pZCkgPyBlbGxpcHNvaWQub25lT3ZlclJhZGlpIDogd2dzODRPbmVPdmVyUmFkaWk7CiAgICAgICAgY29uc3Qgb25lT3ZlclJhZGlpU3F1YXJlZCA9IGRlZmluZWRfZGVmYXVsdChlbGxpcHNvaWQpID8gZWxsaXBzb2lkLm9uZU92ZXJSYWRpaVNxdWFyZWQgOiB3Z3M4NE9uZU92ZXJSYWRpaVNxdWFyZWQ7CiAgICAgICAgY29uc3QgY2VudGVyVG9sZXJhbmNlU3F1YXJlZCA9IGRlZmluZWRfZGVmYXVsdChlbGxpcHNvaWQpID8gZWxsaXBzb2lkLl9jZW50ZXJUb2xlcmFuY2VTcXVhcmVkIDogd2dzODRDZW50ZXJUb2xlcmFuY2VTcXVhcmVkOwogICAgICAgIGNvbnN0IHAgPSBzY2FsZVRvR2VvZGV0aWNTdXJmYWNlX2RlZmF1bHQoCiAgICAgICAgICBjYXJ0ZXNpYW4xMSwKICAgICAgICAgIG9uZU92ZXJSYWRpaSwKICAgICAgICAgIG9uZU92ZXJSYWRpaVNxdWFyZWQsCiAgICAgICAgICBjZW50ZXJUb2xlcmFuY2VTcXVhcmVkLAogICAgICAgICAgY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWNQCiAgICAgICAgKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwKSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgbGV0IG4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlDb21wb25lbnRzKAogICAgICAgICAgcCwKICAgICAgICAgIG9uZU92ZXJSYWRpaVNxdWFyZWQsCiAgICAgICAgICBjYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpY04KICAgICAgICApOwogICAgICAgIG4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKG4sIG4pOwogICAgICAgIGNvbnN0IGggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoY2FydGVzaWFuMTEsIHAsIGNhcnRlc2lhblRvQ2FydG9ncmFwaGljSCk7CiAgICAgICAgY29uc3QgbG9uZ2l0dWRlID0gTWF0aC5hdGFuMihuLnksIG4ueCk7CiAgICAgICAgY29uc3QgbGF0aXR1ZGUgPSBNYXRoLmFzaW4obi56KTsKICAgICAgICBjb25zdCBoZWlnaHQgPSBNYXRoX2RlZmF1bHQuc2lnbihDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGgsIGNhcnRlc2lhbjExKSkgKiBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKGgpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydG9ncmFwaGljKGxvbmdpdHVkZSwgbGF0aXR1ZGUsIGhlaWdodCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5sb25naXR1ZGUgPSBsb25naXR1ZGU7CiAgICAgICAgcmVzdWx0LmxhdGl0dWRlID0gbGF0aXR1ZGU7CiAgICAgICAgcmVzdWx0LmhlaWdodCA9IGhlaWdodDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0b2dyYXBoaWMudG9DYXJ0ZXNpYW4gPSBmdW5jdGlvbihjYXJ0b2dyYXBoaWMyLCBlbGxpcHNvaWQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY2FydG9ncmFwaGljIiwgY2FydG9ncmFwaGljMik7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tUmFkaWFucygKICAgICAgICAgIGNhcnRvZ3JhcGhpYzIubG9uZ2l0dWRlLAogICAgICAgICAgY2FydG9ncmFwaGljMi5sYXRpdHVkZSwKICAgICAgICAgIGNhcnRvZ3JhcGhpYzIuaGVpZ2h0LAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgQ2FydG9ncmFwaGljLmNsb25lID0gZnVuY3Rpb24oY2FydG9ncmFwaGljMiwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoY2FydG9ncmFwaGljMikpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydG9ncmFwaGljKAogICAgICAgICAgICBjYXJ0b2dyYXBoaWMyLmxvbmdpdHVkZSwKICAgICAgICAgICAgY2FydG9ncmFwaGljMi5sYXRpdHVkZSwKICAgICAgICAgICAgY2FydG9ncmFwaGljMi5oZWlnaHQKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5sb25naXR1ZGUgPSBjYXJ0b2dyYXBoaWMyLmxvbmdpdHVkZTsKICAgICAgICByZXN1bHQubGF0aXR1ZGUgPSBjYXJ0b2dyYXBoaWMyLmxhdGl0dWRlOwogICAgICAgIHJlc3VsdC5oZWlnaHQgPSBjYXJ0b2dyYXBoaWMyLmhlaWdodDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0b2dyYXBoaWMuZXF1YWxzID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICByZXR1cm4gbGVmdCA9PT0gcmlnaHQgfHwgZGVmaW5lZF9kZWZhdWx0KGxlZnQpICYmIGRlZmluZWRfZGVmYXVsdChyaWdodCkgJiYgbGVmdC5sb25naXR1ZGUgPT09IHJpZ2h0LmxvbmdpdHVkZSAmJiBsZWZ0LmxhdGl0dWRlID09PSByaWdodC5sYXRpdHVkZSAmJiBsZWZ0LmhlaWdodCA9PT0gcmlnaHQuaGVpZ2h0OwogICAgICB9OwogICAgICBDYXJ0b2dyYXBoaWMuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBlcHNpbG9uKSB7CiAgICAgICAgZXBzaWxvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVwc2lsb24sIDApOwogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBNYXRoLmFicyhsZWZ0LmxvbmdpdHVkZSAtIHJpZ2h0LmxvbmdpdHVkZSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0LmxhdGl0dWRlIC0gcmlnaHQubGF0aXR1ZGUpIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdC5oZWlnaHQgLSByaWdodC5oZWlnaHQpIDw9IGVwc2lsb247CiAgICAgIH07CiAgICAgIENhcnRvZ3JhcGhpYy5aRVJPID0gT2JqZWN0LmZyZWV6ZShuZXcgQ2FydG9ncmFwaGljKDAsIDAsIDApKTsKICAgICAgQ2FydG9ncmFwaGljLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIHJldHVybiBDYXJ0b2dyYXBoaWMuY2xvbmUodGhpcywgcmVzdWx0KTsKICAgICAgfTsKICAgICAgQ2FydG9ncmFwaGljLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihyaWdodCkgewogICAgICAgIHJldHVybiBDYXJ0b2dyYXBoaWMuZXF1YWxzKHRoaXMsIHJpZ2h0KTsKICAgICAgfTsKICAgICAgQ2FydG9ncmFwaGljLnByb3RvdHlwZS5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24ocmlnaHQsIGVwc2lsb24pIHsKICAgICAgICByZXR1cm4gQ2FydG9ncmFwaGljLmVxdWFsc0Vwc2lsb24odGhpcywgcmlnaHQsIGVwc2lsb24pOwogICAgICB9OwogICAgICBDYXJ0b2dyYXBoaWMucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGAoJHt0aGlzLmxvbmdpdHVkZX0sICR7dGhpcy5sYXRpdHVkZX0sICR7dGhpcy5oZWlnaHR9KWA7CiAgICAgIH07CiAgICAgIENhcnRvZ3JhcGhpY19kZWZhdWx0ID0gQ2FydG9ncmFwaGljOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRWxsaXBzb2lkLmpzCiAgZnVuY3Rpb24gaW5pdGlhbGl6ZShlbGxpcHNvaWQsIHgsIHksIHopIHsKICAgIHggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh4LCAwKTsKICAgIHkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh5LCAwKTsKICAgIHogPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh6LCAwKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJ4IiwgeCwgMCk7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygieSIsIHksIDApOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoInoiLCB6LCAwKTsKICAgIGVsbGlwc29pZC5fcmFkaWkgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KHgsIHksIHopOwogICAgZWxsaXBzb2lkLl9yYWRpaVNxdWFyZWQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KHggKiB4LCB5ICogeSwgeiAqIHopOwogICAgZWxsaXBzb2lkLl9yYWRpaVRvVGhlRm91cnRoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgKICAgICAgeCAqIHggKiB4ICogeCwKICAgICAgeSAqIHkgKiB5ICogeSwKICAgICAgeiAqIHogKiB6ICogegogICAgKTsKICAgIGVsbGlwc29pZC5fb25lT3ZlclJhZGlpID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgKICAgICAgeCA9PT0gMCA/IDAgOiAxIC8geCwKICAgICAgeSA9PT0gMCA/IDAgOiAxIC8geSwKICAgICAgeiA9PT0gMCA/IDAgOiAxIC8gegogICAgKTsKICAgIGVsbGlwc29pZC5fb25lT3ZlclJhZGlpU3F1YXJlZCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoCiAgICAgIHggPT09IDAgPyAwIDogMSAvICh4ICogeCksCiAgICAgIHkgPT09IDAgPyAwIDogMSAvICh5ICogeSksCiAgICAgIHogPT09IDAgPyAwIDogMSAvICh6ICogeikKICAgICk7CiAgICBlbGxpcHNvaWQuX21pbmltdW1SYWRpdXMgPSBNYXRoLm1pbih4LCB5LCB6KTsKICAgIGVsbGlwc29pZC5fbWF4aW11bVJhZGl1cyA9IE1hdGgubWF4KHgsIHksIHopOwogICAgZWxsaXBzb2lkLl9jZW50ZXJUb2xlcmFuY2VTcXVhcmVkID0gTWF0aF9kZWZhdWx0LkVQU0lMT04xOwogICAgaWYgKGVsbGlwc29pZC5fcmFkaWlTcXVhcmVkLnogIT09IDApIHsKICAgICAgZWxsaXBzb2lkLl9zcXVhcmVkWE92ZXJTcXVhcmVkWiA9IGVsbGlwc29pZC5fcmFkaWlTcXVhcmVkLnggLyBlbGxpcHNvaWQuX3JhZGlpU3F1YXJlZC56OwogICAgfQogIH0KICBmdW5jdGlvbiBFbGxpcHNvaWQoeCwgeSwgeikgewogICAgdGhpcy5fcmFkaWkgPSB2b2lkIDA7CiAgICB0aGlzLl9yYWRpaVNxdWFyZWQgPSB2b2lkIDA7CiAgICB0aGlzLl9yYWRpaVRvVGhlRm91cnRoID0gdm9pZCAwOwogICAgdGhpcy5fb25lT3ZlclJhZGlpID0gdm9pZCAwOwogICAgdGhpcy5fb25lT3ZlclJhZGlpU3F1YXJlZCA9IHZvaWQgMDsKICAgIHRoaXMuX21pbmltdW1SYWRpdXMgPSB2b2lkIDA7CiAgICB0aGlzLl9tYXhpbXVtUmFkaXVzID0gdm9pZCAwOwogICAgdGhpcy5fY2VudGVyVG9sZXJhbmNlU3F1YXJlZCA9IHZvaWQgMDsKICAgIHRoaXMuX3NxdWFyZWRYT3ZlclNxdWFyZWRaID0gdm9pZCAwOwogICAgaW5pdGlhbGl6ZSh0aGlzLCB4LCB5LCB6KTsKICB9CiAgZnVuY3Rpb24gZ2F1c3NMZWdlbmRyZVF1YWRyYXR1cmUoYTMsIGIsIGZ1bmMpIHsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigiYSIsIGEzKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigiYiIsIGIpOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YuZnVuYygiZnVuYyIsIGZ1bmMpOwogICAgY29uc3QgeE1lYW4gPSAwLjUgKiAoYiArIGEzKTsKICAgIGNvbnN0IHhSYW5nZSA9IDAuNSAqIChiIC0gYTMpOwogICAgbGV0IHN1bSA9IDA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDU7IGkrKykgewogICAgICBjb25zdCBkeCA9IHhSYW5nZSAqIGFic2Npc3Nhc1tpXTsKICAgICAgc3VtICs9IHdlaWdodHNbaV0gKiAoZnVuYyh4TWVhbiArIGR4KSArIGZ1bmMoeE1lYW4gLSBkeCkpOwogICAgfQogICAgc3VtICo9IHhSYW5nZTsKICAgIHJldHVybiBzdW07CiAgfQogIHZhciBjYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbk5vcm1hbCwgY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW5LLCBjYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpY04yLCBjYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpY1AyLCBjYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpY0gyLCBhYnNjaXNzYXMsIHdlaWdodHMsIEVsbGlwc29pZF9kZWZhdWx0OwogIHZhciBpbml0X0VsbGlwc29pZCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRWxsaXBzb2lkLmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfc2NhbGVUb0dlb2RldGljU3VyZmFjZSgpOwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhFbGxpcHNvaWQucHJvdG90eXBlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgcmFkaWkgb2YgdGhlIGVsbGlwc29pZC4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIHJhZGlpOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fcmFkaWk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBzcXVhcmVkIHJhZGlpIG9mIHRoZSBlbGxpcHNvaWQuCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZC5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7Q2FydGVzaWFuM30KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICByYWRpaVNxdWFyZWQ6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yYWRpaVNxdWFyZWQ7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSByYWRpaSBvZiB0aGUgZWxsaXBzb2lkIHJhaXNlIHRvIHRoZSBmb3VydGggcG93ZXIuCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZC5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7Q2FydGVzaWFuM30KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICByYWRpaVRvVGhlRm91cnRoOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fcmFkaWlUb1RoZUZvdXJ0aDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgb25lIG92ZXIgdGhlIHJhZGlpIG9mIHRoZSBlbGxpcHNvaWQuCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZC5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7Q2FydGVzaWFuM30KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBvbmVPdmVyUmFkaWk6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vbmVPdmVyUmFkaWk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIG9uZSBvdmVyIHRoZSBzcXVhcmVkIHJhZGlpIG9mIHRoZSBlbGxpcHNvaWQuCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZC5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7Q2FydGVzaWFuM30KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBvbmVPdmVyUmFkaWlTcXVhcmVkOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fb25lT3ZlclJhZGlpU3F1YXJlZDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIG1pbmltdW0gcmFkaXVzIG9mIHRoZSBlbGxpcHNvaWQuCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZC5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIG1pbmltdW1SYWRpdXM6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9taW5pbXVtUmFkaXVzOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgbWF4aW11bSByYWRpdXMgb2YgdGhlIGVsbGlwc29pZC4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgbWF4aW11bVJhZGl1czogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21heGltdW1SYWRpdXM7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgRWxsaXBzb2lkLmNsb25lID0gZnVuY3Rpb24oZWxsaXBzb2lkLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChlbGxpcHNvaWQpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBjb25zdCByYWRpaSA9IGVsbGlwc29pZC5fcmFkaWk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBFbGxpcHNvaWQocmFkaWkueCwgcmFkaWkueSwgcmFkaWkueik7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShyYWRpaSwgcmVzdWx0Ll9yYWRpaSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGVsbGlwc29pZC5fcmFkaWlTcXVhcmVkLCByZXN1bHQuX3JhZGlpU3F1YXJlZCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGVsbGlwc29pZC5fcmFkaWlUb1RoZUZvdXJ0aCwgcmVzdWx0Ll9yYWRpaVRvVGhlRm91cnRoKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLl9vbmVPdmVyUmFkaWksIHJlc3VsdC5fb25lT3ZlclJhZGlpKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLl9vbmVPdmVyUmFkaWlTcXVhcmVkLCByZXN1bHQuX29uZU92ZXJSYWRpaVNxdWFyZWQpOwogICAgICAgIHJlc3VsdC5fbWluaW11bVJhZGl1cyA9IGVsbGlwc29pZC5fbWluaW11bVJhZGl1czsKICAgICAgICByZXN1bHQuX21heGltdW1SYWRpdXMgPSBlbGxpcHNvaWQuX21heGltdW1SYWRpdXM7CiAgICAgICAgcmVzdWx0Ll9jZW50ZXJUb2xlcmFuY2VTcXVhcmVkID0gZWxsaXBzb2lkLl9jZW50ZXJUb2xlcmFuY2VTcXVhcmVkOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZC5mcm9tQ2FydGVzaWFuMyA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgRWxsaXBzb2lkKCk7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNhcnRlc2lhbjExKSkgewogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgaW5pdGlhbGl6ZShyZXN1bHQsIGNhcnRlc2lhbjExLngsIGNhcnRlc2lhbjExLnksIGNhcnRlc2lhbjExLnopOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZC5XR1M4NCA9IE9iamVjdC5mcmVlemUoCiAgICAgICAgbmV3IEVsbGlwc29pZCg2Mzc4MTM3LCA2Mzc4MTM3LCA2MzU2NzUyMzE0MjQ1MTc5ZS05KQogICAgICApOwogICAgICBFbGxpcHNvaWQuVU5JVF9TUEhFUkUgPSBPYmplY3QuZnJlZXplKG5ldyBFbGxpcHNvaWQoMSwgMSwgMSkpOwogICAgICBFbGxpcHNvaWQuTU9PTiA9IE9iamVjdC5mcmVlemUoCiAgICAgICAgbmV3IEVsbGlwc29pZCgKICAgICAgICAgIE1hdGhfZGVmYXVsdC5MVU5BUl9SQURJVVMsCiAgICAgICAgICBNYXRoX2RlZmF1bHQuTFVOQVJfUkFESVVTLAogICAgICAgICAgTWF0aF9kZWZhdWx0LkxVTkFSX1JBRElVUwogICAgICAgICkKICAgICAgKTsKICAgICAgRWxsaXBzb2lkLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIHJldHVybiBFbGxpcHNvaWQuY2xvbmUodGhpcywgcmVzdWx0KTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkLnBhY2tlZExlbmd0aCA9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgIEVsbGlwc29pZC5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayh2YWx1ZS5fcmFkaWksIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZC51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgcmFkaWkgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICByZXR1cm4gRWxsaXBzb2lkLmZyb21DYXJ0ZXNpYW4zKHJhZGlpLCByZXN1bHQpOwogICAgICB9OwogICAgICBFbGxpcHNvaWQucHJvdG90eXBlLmdlb2NlbnRyaWNTdXJmYWNlTm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZTsKICAgICAgRWxsaXBzb2lkLnByb3RvdHlwZS5nZW9kZXRpY1N1cmZhY2VOb3JtYWxDYXJ0b2dyYXBoaWMgPSBmdW5jdGlvbihjYXJ0b2dyYXBoaWMyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRvZ3JhcGhpYyIsIGNhcnRvZ3JhcGhpYzIpOwogICAgICAgIGNvbnN0IGxvbmdpdHVkZSA9IGNhcnRvZ3JhcGhpYzIubG9uZ2l0dWRlOwogICAgICAgIGNvbnN0IGxhdGl0dWRlID0gY2FydG9ncmFwaGljMi5sYXRpdHVkZTsKICAgICAgICBjb25zdCBjb3NMYXRpdHVkZSA9IE1hdGguY29zKGxhdGl0dWRlKTsKICAgICAgICBjb25zdCB4ID0gY29zTGF0aXR1ZGUgKiBNYXRoLmNvcyhsb25naXR1ZGUpOwogICAgICAgIGNvbnN0IHkgPSBjb3NMYXRpdHVkZSAqIE1hdGguc2luKGxvbmdpdHVkZSk7CiAgICAgICAgY29uc3QgeiA9IE1hdGguc2luKGxhdGl0dWRlKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmVzdWx0LnogPSB6OwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHJlc3VsdCwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkLnByb3RvdHlwZS5nZW9kZXRpY1N1cmZhY2VOb3JtYWwgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKGNhcnRlc2lhbjExLCBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgTWF0aF9kZWZhdWx0LkVQU0lMT04xNCkpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5Q29tcG9uZW50cygKICAgICAgICAgIGNhcnRlc2lhbjExLAogICAgICAgICAgdGhpcy5fb25lT3ZlclJhZGlpU3F1YXJlZCwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUocmVzdWx0LCByZXN1bHQpOwogICAgICB9OwogICAgICBjYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbk5vcm1hbCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW5LID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBFbGxpcHNvaWQucHJvdG90eXBlLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuID0gZnVuY3Rpb24oY2FydG9ncmFwaGljMiwgcmVzdWx0KSB7CiAgICAgICAgY29uc3QgbiA9IGNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuTm9ybWFsOwogICAgICAgIGNvbnN0IGsgPSBjYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbks7CiAgICAgICAgdGhpcy5nZW9kZXRpY1N1cmZhY2VOb3JtYWxDYXJ0b2dyYXBoaWMoY2FydG9ncmFwaGljMiwgbik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5Q29tcG9uZW50cyh0aGlzLl9yYWRpaVNxdWFyZWQsIG4sIGspOwogICAgICAgIGNvbnN0IGdhbW1hID0gTWF0aC5zcXJ0KENhcnRlc2lhbjNfZGVmYXVsdC5kb3QobiwgaykpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5kaXZpZGVCeVNjYWxhcihrLCBnYW1tYSwgayk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobiwgY2FydG9ncmFwaGljMi5oZWlnaHQsIG4pOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoaywgbiwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkLnByb3RvdHlwZS5jYXJ0b2dyYXBoaWNBcnJheVRvQ2FydGVzaWFuQXJyYXkgPSBmdW5jdGlvbihjYXJ0b2dyYXBoaWNzLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImNhcnRvZ3JhcGhpY3MiLCBjYXJ0b2dyYXBoaWNzKTsKICAgICAgICBjb25zdCBsZW5ndGggPSBjYXJ0b2dyYXBoaWNzLmxlbmd0aDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IGxlbmd0aDsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgcmVzdWx0W2ldID0gdGhpcy5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihjYXJ0b2dyYXBoaWNzW2ldLCByZXN1bHRbaV0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBjYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpY04yID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpY1AyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpY0gyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBFbGxpcHNvaWQucHJvdG90eXBlLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIGNvbnN0IHAgPSB0aGlzLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2UoY2FydGVzaWFuMTEsIGNhcnRlc2lhblRvQ2FydG9ncmFwaGljUDIpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHApKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBjb25zdCBuID0gdGhpcy5nZW9kZXRpY1N1cmZhY2VOb3JtYWwocCwgY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWNOMik7CiAgICAgICAgY29uc3QgaCA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjYXJ0ZXNpYW4xMSwgcCwgY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWNIMik7CiAgICAgICAgY29uc3QgbG9uZ2l0dWRlID0gTWF0aC5hdGFuMihuLnksIG4ueCk7CiAgICAgICAgY29uc3QgbGF0aXR1ZGUgPSBNYXRoLmFzaW4obi56KTsKICAgICAgICBjb25zdCBoZWlnaHQgPSBNYXRoX2RlZmF1bHQuc2lnbihDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGgsIGNhcnRlc2lhbjExKSkgKiBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKGgpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQobG9uZ2l0dWRlLCBsYXRpdHVkZSwgaGVpZ2h0KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LmxvbmdpdHVkZSA9IGxvbmdpdHVkZTsKICAgICAgICByZXN1bHQubGF0aXR1ZGUgPSBsYXRpdHVkZTsKICAgICAgICByZXN1bHQuaGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZC5wcm90b3R5cGUuY2FydGVzaWFuQXJyYXlUb0NhcnRvZ3JhcGhpY0FycmF5ID0gZnVuY3Rpb24oY2FydGVzaWFucywgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJjYXJ0ZXNpYW5zIiwgY2FydGVzaWFucyk7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gY2FydGVzaWFucy5sZW5ndGg7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdC5sZW5ndGggPSBsZW5ndGg7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgIHJlc3VsdFtpXSA9IHRoaXMuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoY2FydGVzaWFuc1tpXSwgcmVzdWx0W2ldKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkLnByb3RvdHlwZS5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIHJldHVybiBzY2FsZVRvR2VvZGV0aWNTdXJmYWNlX2RlZmF1bHQoCiAgICAgICAgICBjYXJ0ZXNpYW4xMSwKICAgICAgICAgIHRoaXMuX29uZU92ZXJSYWRpaSwKICAgICAgICAgIHRoaXMuX29uZU92ZXJSYWRpaVNxdWFyZWQsCiAgICAgICAgICB0aGlzLl9jZW50ZXJUb2xlcmFuY2VTcXVhcmVkLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkLnByb3RvdHlwZS5zY2FsZVRvR2VvY2VudHJpY1N1cmZhY2UgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBwb3NpdGlvblggPSBjYXJ0ZXNpYW4xMS54OwogICAgICAgIGNvbnN0IHBvc2l0aW9uWSA9IGNhcnRlc2lhbjExLnk7CiAgICAgICAgY29uc3QgcG9zaXRpb25aID0gY2FydGVzaWFuMTEuejsKICAgICAgICBjb25zdCBvbmVPdmVyUmFkaWlTcXVhcmVkID0gdGhpcy5fb25lT3ZlclJhZGlpU3F1YXJlZDsKICAgICAgICBjb25zdCBiZXRhID0gMSAvIE1hdGguc3FydCgKICAgICAgICAgIHBvc2l0aW9uWCAqIHBvc2l0aW9uWCAqIG9uZU92ZXJSYWRpaVNxdWFyZWQueCArIHBvc2l0aW9uWSAqIHBvc2l0aW9uWSAqIG9uZU92ZXJSYWRpaVNxdWFyZWQueSArIHBvc2l0aW9uWiAqIHBvc2l0aW9uWiAqIG9uZU92ZXJSYWRpaVNxdWFyZWQuegogICAgICAgICk7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGNhcnRlc2lhbjExLCBiZXRhLCByZXN1bHQpOwogICAgICB9OwogICAgICBFbGxpcHNvaWQucHJvdG90eXBlLnRyYW5zZm9ybVBvc2l0aW9uVG9TY2FsZWRTcGFjZSA9IGZ1bmN0aW9uKHBvc2l0aW9uLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlDb21wb25lbnRzKHBvc2l0aW9uLCB0aGlzLl9vbmVPdmVyUmFkaWksIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZC5wcm90b3R5cGUudHJhbnNmb3JtUG9zaXRpb25Gcm9tU2NhbGVkU3BhY2UgPSBmdW5jdGlvbihwb3NpdGlvbiwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5Q29tcG9uZW50cyhwb3NpdGlvbiwgdGhpcy5fcmFkaWksIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ocmlnaHQpIHsKICAgICAgICByZXR1cm4gdGhpcyA9PT0gcmlnaHQgfHwgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzKHRoaXMuX3JhZGlpLCByaWdodC5fcmFkaWkpOwogICAgICB9OwogICAgICBFbGxpcHNvaWQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3JhZGlpLnRvU3RyaW5nKCk7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZC5wcm90b3R5cGUuZ2V0U3VyZmFjZU5vcm1hbEludGVyc2VjdGlvbldpdGhaQXhpcyA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBidWZmZXIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicG9zaXRpb24iLCBwb3NpdGlvbik7CiAgICAgICAgaWYgKCFNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHRoaXMuX3JhZGlpLngsCiAgICAgICAgICB0aGlzLl9yYWRpaS55LAogICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT04xNQogICAgICAgICkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiRWxsaXBzb2lkIG11c3QgYmUgYW4gZWxsaXBzb2lkIG9mIHJldm9sdXRpb24gKHJhZGlpLnggPT0gcmFkaWkueSkiCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW4oIkVsbGlwc29pZC5yYWRpaS56IiwgdGhpcy5fcmFkaWkueiwgMCk7CiAgICAgICAgYnVmZmVyID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoYnVmZmVyLCAwKTsKICAgICAgICBjb25zdCBzcXVhcmVkWE92ZXJTcXVhcmVkWiA9IHRoaXMuX3NxdWFyZWRYT3ZlclNxdWFyZWRaOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSAwOwogICAgICAgIHJlc3VsdC55ID0gMDsKICAgICAgICByZXN1bHQueiA9IHBvc2l0aW9uLnogKiAoMSAtIHNxdWFyZWRYT3ZlclNxdWFyZWRaKTsKICAgICAgICBpZiAoTWF0aC5hYnMocmVzdWx0LnopID49IHRoaXMuX3JhZGlpLnogLSBidWZmZXIpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIGFic2Npc3NhcyA9IFsKICAgICAgICAwLjE0ODg3NDMzODk4MTYzLAogICAgICAgIDAuNDMzMzk1Mzk0MTI5MjUsCiAgICAgICAgMC42Nzk0MDk1NjgyOTkwMiwKICAgICAgICAwLjg2NTA2MzM2NjY4ODk4LAogICAgICAgIDAuOTczOTA2NTI4NTE3MTcsCiAgICAgICAgMAogICAgICBdOwogICAgICB3ZWlnaHRzID0gWwogICAgICAgIDAuMjk1NTI0MjI0NzE0NzUsCiAgICAgICAgMC4yNjkyNjY3MTkzMDk5OSwKICAgICAgICAwLjIxOTA4NjM2MjUxNTk4LAogICAgICAgIDAuMTQ5NDUxMzQ5MTUwNTgsCiAgICAgICAgMC4wNjY2NzEzNDQzMDg2ODQsCiAgICAgICAgMAogICAgICBdOwogICAgICBFbGxpcHNvaWQucHJvdG90eXBlLnN1cmZhY2VBcmVhID0gZnVuY3Rpb24ocmVjdGFuZ2xlKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZWN0YW5nbGUiLCByZWN0YW5nbGUpOwogICAgICAgIGNvbnN0IG1pbkxvbmdpdHVkZSA9IHJlY3RhbmdsZS53ZXN0OwogICAgICAgIGxldCBtYXhMb25naXR1ZGUgPSByZWN0YW5nbGUuZWFzdDsKICAgICAgICBjb25zdCBtaW5MYXRpdHVkZSA9IHJlY3RhbmdsZS5zb3V0aDsKICAgICAgICBjb25zdCBtYXhMYXRpdHVkZSA9IHJlY3RhbmdsZS5ub3J0aDsKICAgICAgICB3aGlsZSAobWF4TG9uZ2l0dWRlIDwgbWluTG9uZ2l0dWRlKSB7CiAgICAgICAgICBtYXhMb25naXR1ZGUgKz0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICB9CiAgICAgICAgY29uc3QgcmFkaWlTcXVhcmVkID0gdGhpcy5fcmFkaWlTcXVhcmVkOwogICAgICAgIGNvbnN0IGEyMiA9IHJhZGlpU3F1YXJlZC54OwogICAgICAgIGNvbnN0IGIyID0gcmFkaWlTcXVhcmVkLnk7CiAgICAgICAgY29uc3QgYzIgPSByYWRpaVNxdWFyZWQuejsKICAgICAgICBjb25zdCBhMmIyID0gYTIyICogYjI7CiAgICAgICAgcmV0dXJuIGdhdXNzTGVnZW5kcmVRdWFkcmF0dXJlKG1pbkxhdGl0dWRlLCBtYXhMYXRpdHVkZSwgZnVuY3Rpb24obGF0KSB7CiAgICAgICAgICBjb25zdCBzaW5QaGkgPSBNYXRoLmNvcyhsYXQpOwogICAgICAgICAgY29uc3QgY29zUGhpID0gTWF0aC5zaW4obGF0KTsKICAgICAgICAgIHJldHVybiBNYXRoLmNvcyhsYXQpICogZ2F1c3NMZWdlbmRyZVF1YWRyYXR1cmUobWluTG9uZ2l0dWRlLCBtYXhMb25naXR1ZGUsIGZ1bmN0aW9uKGxvbikgewogICAgICAgICAgICBjb25zdCBjb3NUaGV0YSA9IE1hdGguY29zKGxvbik7CiAgICAgICAgICAgIGNvbnN0IHNpblRoZXRhID0gTWF0aC5zaW4obG9uKTsKICAgICAgICAgICAgcmV0dXJuIE1hdGguc3FydCgKICAgICAgICAgICAgICBhMmIyICogY29zUGhpICogY29zUGhpICsgYzIgKiAoYjIgKiBjb3NUaGV0YSAqIGNvc1RoZXRhICsgYTIyICogc2luVGhldGEgKiBzaW5UaGV0YSkgKiBzaW5QaGkgKiBzaW5QaGkKICAgICAgICAgICAgKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9OwogICAgICBFbGxpcHNvaWRfZGVmYXVsdCA9IEVsbGlwc29pZDsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dlb2dyYXBoaWNQcm9qZWN0aW9uLmpzCiAgZnVuY3Rpb24gR2VvZ3JhcGhpY1Byb2plY3Rpb24oZWxsaXBzb2lkKSB7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChlbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LldHUzg0KTsKICAgIHRoaXMuX3NlbWltYWpvckF4aXMgPSB0aGlzLl9lbGxpcHNvaWQubWF4aW11bVJhZGl1czsKICAgIHRoaXMuX29uZU92ZXJTZW1pbWFqb3JBeGlzID0gMSAvIHRoaXMuX3NlbWltYWpvckF4aXM7CiAgfQogIHZhciBHZW9ncmFwaGljUHJvamVjdGlvbl9kZWZhdWx0OwogIHZhciBpbml0X0dlb2dyYXBoaWNQcm9qZWN0aW9uID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9HZW9ncmFwaGljUHJvamVjdGlvbi5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhHZW9ncmFwaGljUHJvamVjdGlvbi5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSB7QGxpbmsgRWxsaXBzb2lkfS4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJvZiBHZW9ncmFwaGljUHJvamVjdGlvbi5wcm90b3R5cGUKICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtFbGxpcHNvaWR9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgZWxsaXBzb2lkOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fZWxsaXBzb2lkOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIEdlb2dyYXBoaWNQcm9qZWN0aW9uLnByb3RvdHlwZS5wcm9qZWN0ID0gZnVuY3Rpb24oY2FydG9ncmFwaGljMiwgcmVzdWx0KSB7CiAgICAgICAgY29uc3Qgc2VtaW1ham9yQXhpcyA9IHRoaXMuX3NlbWltYWpvckF4aXM7CiAgICAgICAgY29uc3QgeCA9IGNhcnRvZ3JhcGhpYzIubG9uZ2l0dWRlICogc2VtaW1ham9yQXhpczsKICAgICAgICBjb25zdCB5ID0gY2FydG9ncmFwaGljMi5sYXRpdHVkZSAqIHNlbWltYWpvckF4aXM7CiAgICAgICAgY29uc3QgeiA9IGNhcnRvZ3JhcGhpYzIuaGVpZ2h0OwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KHgsIHksIHopOwogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJlc3VsdC56ID0gejsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBHZW9ncmFwaGljUHJvamVjdGlvbi5wcm90b3R5cGUudW5wcm9qZWN0ID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNhcnRlc2lhbjExKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImNhcnRlc2lhbiBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBvbmVPdmVyRWFydGhTZW1pbWFqb3JBeGlzID0gdGhpcy5fb25lT3ZlclNlbWltYWpvckF4aXM7CiAgICAgICAgY29uc3QgbG9uZ2l0dWRlID0gY2FydGVzaWFuMTEueCAqIG9uZU92ZXJFYXJ0aFNlbWltYWpvckF4aXM7CiAgICAgICAgY29uc3QgbGF0aXR1ZGUgPSBjYXJ0ZXNpYW4xMS55ICogb25lT3ZlckVhcnRoU2VtaW1ham9yQXhpczsKICAgICAgICBjb25zdCBoZWlnaHQgPSBjYXJ0ZXNpYW4xMS56OwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQobG9uZ2l0dWRlLCBsYXRpdHVkZSwgaGVpZ2h0KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LmxvbmdpdHVkZSA9IGxvbmdpdHVkZTsKICAgICAgICByZXN1bHQubGF0aXR1ZGUgPSBsYXRpdHVkZTsKICAgICAgICByZXN1bHQuaGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEdlb2dyYXBoaWNQcm9qZWN0aW9uX2RlZmF1bHQgPSBHZW9ncmFwaGljUHJvamVjdGlvbjsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0ludGVyc2VjdC5qcwogIHZhciBJbnRlcnNlY3QsIEludGVyc2VjdF9kZWZhdWx0OwogIHZhciBpbml0X0ludGVyc2VjdCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSW50ZXJzZWN0LmpzIigpIHsKICAgICAgSW50ZXJzZWN0ID0gewogICAgICAgIC8qKgogICAgICAgICAqIFJlcHJlc2VudHMgdGhhdCBhbiBvYmplY3QgaXMgbm90IGNvbnRhaW5lZCB3aXRoaW4gdGhlIGZydXN0dW0uCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIE9VVFNJREU6IC0xLAogICAgICAgIC8qKgogICAgICAgICAqIFJlcHJlc2VudHMgdGhhdCBhbiBvYmplY3QgaW50ZXJzZWN0cyBvbmUgb2YgdGhlIGZydXN0dW0ncyBwbGFuZXMuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIElOVEVSU0VDVElORzogMCwKICAgICAgICAvKioKICAgICAgICAgKiBSZXByZXNlbnRzIHRoYXQgYW4gb2JqZWN0IGlzIGZ1bGx5IHdpdGhpbiB0aGUgZnJ1c3R1bS4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgSU5TSURFOiAxCiAgICAgIH07CiAgICAgIEludGVyc2VjdF9kZWZhdWx0ID0gT2JqZWN0LmZyZWV6ZShJbnRlcnNlY3QpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSW50ZXJ2YWwuanMKICBmdW5jdGlvbiBJbnRlcnZhbChzdGFydCwgc3RvcCkgewogICAgdGhpcy5zdGFydCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0LCAwKTsKICAgIHRoaXMuc3RvcCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0b3AsIDApOwogIH0KICB2YXIgSW50ZXJ2YWxfZGVmYXVsdDsKICB2YXIgaW5pdF9JbnRlcnZhbCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSW50ZXJ2YWwuanMiKCkgewogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBJbnRlcnZhbF9kZWZhdWx0ID0gSW50ZXJ2YWw7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9NYXRyaXgzLmpzCiAgZnVuY3Rpb24gTWF0cml4Myhjb2x1bW4wUm93MCwgY29sdW1uMVJvdzAsIGNvbHVtbjJSb3cwLCBjb2x1bW4wUm93MSwgY29sdW1uMVJvdzEsIGNvbHVtbjJSb3cxLCBjb2x1bW4wUm93MiwgY29sdW1uMVJvdzIsIGNvbHVtbjJSb3cyKSB7CiAgICB0aGlzWzBdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uMFJvdzAsIDApOwogICAgdGhpc1sxXSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjBSb3cxLCAwKTsKICAgIHRoaXNbMl0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4wUm93MiwgMCk7CiAgICB0aGlzWzNdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uMVJvdzAsIDApOwogICAgdGhpc1s0XSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjFSb3cxLCAwKTsKICAgIHRoaXNbNV0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4xUm93MiwgMCk7CiAgICB0aGlzWzZdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uMlJvdzAsIDApOwogICAgdGhpc1s3XSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjJSb3cxLCAwKTsKICAgIHRoaXNbOF0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4yUm93MiwgMCk7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVGcm9iZW5pdXNOb3JtKG1hdHJpeCkgewogICAgbGV0IG5vcm0gPSAwOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCA5OyArK2kpIHsKICAgICAgY29uc3QgdGVtcCA9IG1hdHJpeFtpXTsKICAgICAgbm9ybSArPSB0ZW1wICogdGVtcDsKICAgIH0KICAgIHJldHVybiBNYXRoLnNxcnQobm9ybSk7CiAgfQogIGZ1bmN0aW9uIG9mZkRpYWdvbmFsRnJvYmVuaXVzTm9ybShtYXRyaXgpIHsKICAgIGxldCBub3JtID0gMDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgKytpKSB7CiAgICAgIGNvbnN0IHRlbXAgPSBtYXRyaXhbTWF0cml4My5nZXRFbGVtZW50SW5kZXgoY29sVmFsW2ldLCByb3dWYWxbaV0pXTsKICAgICAgbm9ybSArPSAyICogdGVtcCAqIHRlbXA7CiAgICB9CiAgICByZXR1cm4gTWF0aC5zcXJ0KG5vcm0pOwogIH0KICBmdW5jdGlvbiBzaHVyRGVjb21wb3NpdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgY29uc3QgdG9sZXJhbmNlID0gTWF0aF9kZWZhdWx0LkVQU0lMT04xNTsKICAgIGxldCBtYXhEaWFnb25hbCA9IDA7CiAgICBsZXQgcm90QXhpczIgPSAxOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyArK2kpIHsKICAgICAgY29uc3QgdGVtcCA9IE1hdGguYWJzKAogICAgICAgIG1hdHJpeFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChjb2xWYWxbaV0sIHJvd1ZhbFtpXSldCiAgICAgICk7CiAgICAgIGlmICh0ZW1wID4gbWF4RGlhZ29uYWwpIHsKICAgICAgICByb3RBeGlzMiA9IGk7CiAgICAgICAgbWF4RGlhZ29uYWwgPSB0ZW1wOwogICAgICB9CiAgICB9CiAgICBsZXQgYyA9IDE7CiAgICBsZXQgcyA9IDA7CiAgICBjb25zdCBwID0gcm93VmFsW3JvdEF4aXMyXTsKICAgIGNvbnN0IHEgPSBjb2xWYWxbcm90QXhpczJdOwogICAgaWYgKE1hdGguYWJzKG1hdHJpeFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChxLCBwKV0pID4gdG9sZXJhbmNlKSB7CiAgICAgIGNvbnN0IHFxID0gbWF0cml4W01hdHJpeDMuZ2V0RWxlbWVudEluZGV4KHEsIHEpXTsKICAgICAgY29uc3QgcHAgPSBtYXRyaXhbTWF0cml4My5nZXRFbGVtZW50SW5kZXgocCwgcCldOwogICAgICBjb25zdCBxcCA9IG1hdHJpeFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChxLCBwKV07CiAgICAgIGNvbnN0IHRhdSA9IChxcSAtIHBwKSAvIDIgLyBxcDsKICAgICAgbGV0IHQ7CiAgICAgIGlmICh0YXUgPCAwKSB7CiAgICAgICAgdCA9IC0xIC8gKC10YXUgKyBNYXRoLnNxcnQoMSArIHRhdSAqIHRhdSkpOwogICAgICB9IGVsc2UgewogICAgICAgIHQgPSAxIC8gKHRhdSArIE1hdGguc3FydCgxICsgdGF1ICogdGF1KSk7CiAgICAgIH0KICAgICAgYyA9IDEgLyBNYXRoLnNxcnQoMSArIHQgKiB0KTsKICAgICAgcyA9IHQgKiBjOwogICAgfQogICAgcmVzdWx0ID0gTWF0cml4My5jbG9uZShNYXRyaXgzLklERU5USVRZLCByZXN1bHQpOwogICAgcmVzdWx0W01hdHJpeDMuZ2V0RWxlbWVudEluZGV4KHAsIHApXSA9IHJlc3VsdFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChxLCBxKV0gPSBjOwogICAgcmVzdWx0W01hdHJpeDMuZ2V0RWxlbWVudEluZGV4KHEsIHApXSA9IHM7CiAgICByZXN1bHRbTWF0cml4My5nZXRFbGVtZW50SW5kZXgocCwgcSldID0gLXM7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICB2YXIgc2NhbGVTY3JhdGNoMSwgc2NhbGVTY3JhdGNoMiwgc2NyYXRjaENvbHVtbiwgc2NhbGVTY3JhdGNoMywgc2NhbGVTY3JhdGNoNCwgc2NhbGVTY3JhdGNoNSwgcm93VmFsLCBjb2xWYWwsIGpNYXRyaXgsIGpNYXRyaXhUcmFuc3Bvc2UsIHNjcmF0Y2hUcmFuc3Bvc2VNYXRyaXgsIE1hdHJpeDNfZGVmYXVsdDsKICB2YXIgaW5pdF9NYXRyaXgzID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9NYXRyaXgzLmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIE1hdHJpeDMucGFja2VkTGVuZ3RoID0gOTsKICAgICAgTWF0cml4My5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbMF07CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzFdOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVsyXTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbM107CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzRdOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVs1XTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbNl07CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzddOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVs4XTsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIE1hdHJpeDMudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBNYXRyaXgzKCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzFdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbMl0gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdFszXSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzRdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbNV0gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdFs2XSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzddID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbOF0gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMucGFja0FycmF5ID0gZnVuY3Rpb24oYXJyYXksIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOwogICAgICAgIGNvbnN0IHJlc3VsdExlbmd0aCA9IGxlbmd0aCAqIDk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEFycmF5KHJlc3VsdExlbmd0aCk7CiAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShyZXN1bHQpICYmIHJlc3VsdC5sZW5ndGggIT09IHJlc3VsdExlbmd0aCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJJZiByZXN1bHQgaXMgYSB0eXBlZCBhcnJheSwgaXQgbXVzdCBoYXZlIGV4YWN0bHkgYXJyYXkubGVuZ3RoICogOSBlbGVtZW50cyIKICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQubGVuZ3RoICE9PSByZXN1bHRMZW5ndGgpIHsKICAgICAgICAgIHJlc3VsdC5sZW5ndGggPSByZXN1bHRMZW5ndGg7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgIE1hdHJpeDMucGFjayhhcnJheVtpXSwgcmVzdWx0LCBpICogOSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMudW5wYWNrQXJyYXkgPSBmdW5jdGlvbihhcnJheSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiYXJyYXkubGVuZ3RoIiwgYXJyYXkubGVuZ3RoLCA5KTsKICAgICAgICBpZiAoYXJyYXkubGVuZ3RoICUgOSAhPT0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGxlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgOS4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGggLyA5KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IGxlbmd0aCAvIDk7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDkpIHsKICAgICAgICAgIGNvbnN0IGluZGV4ID0gaSAvIDk7CiAgICAgICAgICByZXN1bHRbaW5kZXhdID0gTWF0cml4My51bnBhY2soYXJyYXksIGksIHJlc3VsdFtpbmRleF0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgzLmNsb25lID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChtYXRyaXgpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IE1hdHJpeDMoCiAgICAgICAgICAgIG1hdHJpeFswXSwKICAgICAgICAgICAgbWF0cml4WzNdLAogICAgICAgICAgICBtYXRyaXhbNl0sCiAgICAgICAgICAgIG1hdHJpeFsxXSwKICAgICAgICAgICAgbWF0cml4WzRdLAogICAgICAgICAgICBtYXRyaXhbN10sCiAgICAgICAgICAgIG1hdHJpeFsyXSwKICAgICAgICAgICAgbWF0cml4WzVdLAogICAgICAgICAgICBtYXRyaXhbOF0KICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXTsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV07CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdOwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXTsKICAgICAgICByZXN1bHRbNF0gPSBtYXRyaXhbNF07CiAgICAgICAgcmVzdWx0WzVdID0gbWF0cml4WzVdOwogICAgICAgIHJlc3VsdFs2XSA9IG1hdHJpeFs2XTsKICAgICAgICByZXN1bHRbN10gPSBtYXRyaXhbN107CiAgICAgICAgcmVzdWx0WzhdID0gbWF0cml4WzhdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMuZnJvbUFycmF5ID0gTWF0cml4My51bnBhY2s7CiAgICAgIE1hdHJpeDMuZnJvbUNvbHVtbk1ham9yQXJyYXkgPSBmdW5jdGlvbih2YWx1ZXMsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidmFsdWVzIiwgdmFsdWVzKTsKICAgICAgICByZXR1cm4gTWF0cml4My5jbG9uZSh2YWx1ZXMsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIE1hdHJpeDMuZnJvbVJvd01ham9yQXJyYXkgPSBmdW5jdGlvbih2YWx1ZXMsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidmFsdWVzIiwgdmFsdWVzKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IE1hdHJpeDMoCiAgICAgICAgICAgIHZhbHVlc1swXSwKICAgICAgICAgICAgdmFsdWVzWzFdLAogICAgICAgICAgICB2YWx1ZXNbMl0sCiAgICAgICAgICAgIHZhbHVlc1szXSwKICAgICAgICAgICAgdmFsdWVzWzRdLAogICAgICAgICAgICB2YWx1ZXNbNV0sCiAgICAgICAgICAgIHZhbHVlc1s2XSwKICAgICAgICAgICAgdmFsdWVzWzddLAogICAgICAgICAgICB2YWx1ZXNbOF0KICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IHZhbHVlc1swXTsKICAgICAgICByZXN1bHRbMV0gPSB2YWx1ZXNbM107CiAgICAgICAgcmVzdWx0WzJdID0gdmFsdWVzWzZdOwogICAgICAgIHJlc3VsdFszXSA9IHZhbHVlc1sxXTsKICAgICAgICByZXN1bHRbNF0gPSB2YWx1ZXNbNF07CiAgICAgICAgcmVzdWx0WzVdID0gdmFsdWVzWzddOwogICAgICAgIHJlc3VsdFs2XSA9IHZhbHVlc1syXTsKICAgICAgICByZXN1bHRbN10gPSB2YWx1ZXNbNV07CiAgICAgICAgcmVzdWx0WzhdID0gdmFsdWVzWzhdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMuZnJvbVF1YXRlcm5pb24gPSBmdW5jdGlvbihxdWF0ZXJuaW9uLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInF1YXRlcm5pb24iLCBxdWF0ZXJuaW9uKTsKICAgICAgICBjb25zdCB4MiA9IHF1YXRlcm5pb24ueCAqIHF1YXRlcm5pb24ueDsKICAgICAgICBjb25zdCB4eSA9IHF1YXRlcm5pb24ueCAqIHF1YXRlcm5pb24ueTsKICAgICAgICBjb25zdCB4eiA9IHF1YXRlcm5pb24ueCAqIHF1YXRlcm5pb24uejsKICAgICAgICBjb25zdCB4dyA9IHF1YXRlcm5pb24ueCAqIHF1YXRlcm5pb24udzsKICAgICAgICBjb25zdCB5MiA9IHF1YXRlcm5pb24ueSAqIHF1YXRlcm5pb24ueTsKICAgICAgICBjb25zdCB5eiA9IHF1YXRlcm5pb24ueSAqIHF1YXRlcm5pb24uejsKICAgICAgICBjb25zdCB5dyA9IHF1YXRlcm5pb24ueSAqIHF1YXRlcm5pb24udzsKICAgICAgICBjb25zdCB6MiA9IHF1YXRlcm5pb24ueiAqIHF1YXRlcm5pb24uejsKICAgICAgICBjb25zdCB6dyA9IHF1YXRlcm5pb24ueiAqIHF1YXRlcm5pb24udzsKICAgICAgICBjb25zdCB3MiA9IHF1YXRlcm5pb24udyAqIHF1YXRlcm5pb24udzsKICAgICAgICBjb25zdCBtMDAgPSB4MiAtIHkyIC0gejIgKyB3MjsKICAgICAgICBjb25zdCBtMDEgPSAyICogKHh5IC0gencpOwogICAgICAgIGNvbnN0IG0wMiA9IDIgKiAoeHogKyB5dyk7CiAgICAgICAgY29uc3QgbTEwID0gMiAqICh4eSArIHp3KTsKICAgICAgICBjb25zdCBtMTEgPSAteDIgKyB5MiAtIHoyICsgdzI7CiAgICAgICAgY29uc3QgbTEyID0gMiAqICh5eiAtIHh3KTsKICAgICAgICBjb25zdCBtMjAgPSAyICogKHh6IC0geXcpOwogICAgICAgIGNvbnN0IG0yMSA9IDIgKiAoeXogKyB4dyk7CiAgICAgICAgY29uc3QgbTIyID0gLXgyIC0geTIgKyB6MiArIHcyOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgTWF0cml4MyhtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gbTAwOwogICAgICAgIHJlc3VsdFsxXSA9IG0xMDsKICAgICAgICByZXN1bHRbMl0gPSBtMjA7CiAgICAgICAgcmVzdWx0WzNdID0gbTAxOwogICAgICAgIHJlc3VsdFs0XSA9IG0xMTsKICAgICAgICByZXN1bHRbNV0gPSBtMjE7CiAgICAgICAgcmVzdWx0WzZdID0gbTAyOwogICAgICAgIHJlc3VsdFs3XSA9IG0xMjsKICAgICAgICByZXN1bHRbOF0gPSBtMjI7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My5mcm9tSGVhZGluZ1BpdGNoUm9sbCA9IGZ1bmN0aW9uKGhlYWRpbmdQaXRjaFJvbGwsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiaGVhZGluZ1BpdGNoUm9sbCIsIGhlYWRpbmdQaXRjaFJvbGwpOwogICAgICAgIGNvbnN0IGNvc1RoZXRhID0gTWF0aC5jb3MoLWhlYWRpbmdQaXRjaFJvbGwucGl0Y2gpOwogICAgICAgIGNvbnN0IGNvc1BzaSA9IE1hdGguY29zKC1oZWFkaW5nUGl0Y2hSb2xsLmhlYWRpbmcpOwogICAgICAgIGNvbnN0IGNvc1BoaSA9IE1hdGguY29zKGhlYWRpbmdQaXRjaFJvbGwucm9sbCk7CiAgICAgICAgY29uc3Qgc2luVGhldGEgPSBNYXRoLnNpbigtaGVhZGluZ1BpdGNoUm9sbC5waXRjaCk7CiAgICAgICAgY29uc3Qgc2luUHNpID0gTWF0aC5zaW4oLWhlYWRpbmdQaXRjaFJvbGwuaGVhZGluZyk7CiAgICAgICAgY29uc3Qgc2luUGhpID0gTWF0aC5zaW4oaGVhZGluZ1BpdGNoUm9sbC5yb2xsKTsKICAgICAgICBjb25zdCBtMDAgPSBjb3NUaGV0YSAqIGNvc1BzaTsKICAgICAgICBjb25zdCBtMDEgPSAtY29zUGhpICogc2luUHNpICsgc2luUGhpICogc2luVGhldGEgKiBjb3NQc2k7CiAgICAgICAgY29uc3QgbTAyID0gc2luUGhpICogc2luUHNpICsgY29zUGhpICogc2luVGhldGEgKiBjb3NQc2k7CiAgICAgICAgY29uc3QgbTEwID0gY29zVGhldGEgKiBzaW5Qc2k7CiAgICAgICAgY29uc3QgbTExID0gY29zUGhpICogY29zUHNpICsgc2luUGhpICogc2luVGhldGEgKiBzaW5Qc2k7CiAgICAgICAgY29uc3QgbTEyID0gLXNpblBoaSAqIGNvc1BzaSArIGNvc1BoaSAqIHNpblRoZXRhICogc2luUHNpOwogICAgICAgIGNvbnN0IG0yMCA9IC1zaW5UaGV0YTsKICAgICAgICBjb25zdCBtMjEgPSBzaW5QaGkgKiBjb3NUaGV0YTsKICAgICAgICBjb25zdCBtMjIgPSBjb3NQaGkgKiBjb3NUaGV0YTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IE1hdHJpeDMobTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMik7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IG0wMDsKICAgICAgICByZXN1bHRbMV0gPSBtMTA7CiAgICAgICAgcmVzdWx0WzJdID0gbTIwOwogICAgICAgIHJlc3VsdFszXSA9IG0wMTsKICAgICAgICByZXN1bHRbNF0gPSBtMTE7CiAgICAgICAgcmVzdWx0WzVdID0gbTIxOwogICAgICAgIHJlc3VsdFs2XSA9IG0wMjsKICAgICAgICByZXN1bHRbN10gPSBtMTI7CiAgICAgICAgcmVzdWx0WzhdID0gbTIyOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMuZnJvbVNjYWxlID0gZnVuY3Rpb24oc2NhbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic2NhbGUiLCBzY2FsZSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgzKHNjYWxlLngsIDAsIDAsIDAsIHNjYWxlLnksIDAsIDAsIDAsIHNjYWxlLnopOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBzY2FsZS54OwogICAgICAgIHJlc3VsdFsxXSA9IDA7CiAgICAgICAgcmVzdWx0WzJdID0gMDsKICAgICAgICByZXN1bHRbM10gPSAwOwogICAgICAgIHJlc3VsdFs0XSA9IHNjYWxlLnk7CiAgICAgICAgcmVzdWx0WzVdID0gMDsKICAgICAgICByZXN1bHRbNl0gPSAwOwogICAgICAgIHJlc3VsdFs3XSA9IDA7CiAgICAgICAgcmVzdWx0WzhdID0gc2NhbGUuejsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgzLmZyb21Vbmlmb3JtU2NhbGUgPSBmdW5jdGlvbihzY2FsZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJzY2FsZSIsIHNjYWxlKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IE1hdHJpeDMoc2NhbGUsIDAsIDAsIDAsIHNjYWxlLCAwLCAwLCAwLCBzY2FsZSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IHNjYWxlOwogICAgICAgIHJlc3VsdFsxXSA9IDA7CiAgICAgICAgcmVzdWx0WzJdID0gMDsKICAgICAgICByZXN1bHRbM10gPSAwOwogICAgICAgIHJlc3VsdFs0XSA9IHNjYWxlOwogICAgICAgIHJlc3VsdFs1XSA9IDA7CiAgICAgICAgcmVzdWx0WzZdID0gMDsKICAgICAgICByZXN1bHRbN10gPSAwOwogICAgICAgIHJlc3VsdFs4XSA9IHNjYWxlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMuZnJvbUNyb3NzUHJvZHVjdCA9IGZ1bmN0aW9uKHZlY3RvciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2ZWN0b3IiLCB2ZWN0b3IpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgTWF0cml4MygKICAgICAgICAgICAgMCwKICAgICAgICAgICAgLXZlY3Rvci56LAogICAgICAgICAgICB2ZWN0b3IueSwKICAgICAgICAgICAgdmVjdG9yLnosCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIC12ZWN0b3IueCwKICAgICAgICAgICAgLXZlY3Rvci55LAogICAgICAgICAgICB2ZWN0b3IueCwKICAgICAgICAgICAgMAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gMDsKICAgICAgICByZXN1bHRbMV0gPSB2ZWN0b3IuejsKICAgICAgICByZXN1bHRbMl0gPSAtdmVjdG9yLnk7CiAgICAgICAgcmVzdWx0WzNdID0gLXZlY3Rvci56OwogICAgICAgIHJlc3VsdFs0XSA9IDA7CiAgICAgICAgcmVzdWx0WzVdID0gdmVjdG9yLng7CiAgICAgICAgcmVzdWx0WzZdID0gdmVjdG9yLnk7CiAgICAgICAgcmVzdWx0WzddID0gLXZlY3Rvci54OwogICAgICAgIHJlc3VsdFs4XSA9IDA7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My5mcm9tUm90YXRpb25YID0gZnVuY3Rpb24oYW5nbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigiYW5nbGUiLCBhbmdsZSk7CiAgICAgICAgY29uc3QgY29zQW5nbGUgPSBNYXRoLmNvcyhhbmdsZSk7CiAgICAgICAgY29uc3Qgc2luQW5nbGUgPSBNYXRoLnNpbihhbmdsZSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgzKAogICAgICAgICAgICAxLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICBjb3NBbmdsZSwKICAgICAgICAgICAgLXNpbkFuZ2xlLAogICAgICAgICAgICAwLAogICAgICAgICAgICBzaW5BbmdsZSwKICAgICAgICAgICAgY29zQW5nbGUKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IDE7CiAgICAgICAgcmVzdWx0WzFdID0gMDsKICAgICAgICByZXN1bHRbMl0gPSAwOwogICAgICAgIHJlc3VsdFszXSA9IDA7CiAgICAgICAgcmVzdWx0WzRdID0gY29zQW5nbGU7CiAgICAgICAgcmVzdWx0WzVdID0gc2luQW5nbGU7CiAgICAgICAgcmVzdWx0WzZdID0gMDsKICAgICAgICByZXN1bHRbN10gPSAtc2luQW5nbGU7CiAgICAgICAgcmVzdWx0WzhdID0gY29zQW5nbGU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My5mcm9tUm90YXRpb25ZID0gZnVuY3Rpb24oYW5nbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigiYW5nbGUiLCBhbmdsZSk7CiAgICAgICAgY29uc3QgY29zQW5nbGUgPSBNYXRoLmNvcyhhbmdsZSk7CiAgICAgICAgY29uc3Qgc2luQW5nbGUgPSBNYXRoLnNpbihhbmdsZSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgzKAogICAgICAgICAgICBjb3NBbmdsZSwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgc2luQW5nbGUsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDEsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIC1zaW5BbmdsZSwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgY29zQW5nbGUKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IGNvc0FuZ2xlOwogICAgICAgIHJlc3VsdFsxXSA9IDA7CiAgICAgICAgcmVzdWx0WzJdID0gLXNpbkFuZ2xlOwogICAgICAgIHJlc3VsdFszXSA9IDA7CiAgICAgICAgcmVzdWx0WzRdID0gMTsKICAgICAgICByZXN1bHRbNV0gPSAwOwogICAgICAgIHJlc3VsdFs2XSA9IHNpbkFuZ2xlOwogICAgICAgIHJlc3VsdFs3XSA9IDA7CiAgICAgICAgcmVzdWx0WzhdID0gY29zQW5nbGU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My5mcm9tUm90YXRpb25aID0gZnVuY3Rpb24oYW5nbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigiYW5nbGUiLCBhbmdsZSk7CiAgICAgICAgY29uc3QgY29zQW5nbGUgPSBNYXRoLmNvcyhhbmdsZSk7CiAgICAgICAgY29uc3Qgc2luQW5nbGUgPSBNYXRoLnNpbihhbmdsZSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgzKAogICAgICAgICAgICBjb3NBbmdsZSwKICAgICAgICAgICAgLXNpbkFuZ2xlLAogICAgICAgICAgICAwLAogICAgICAgICAgICBzaW5BbmdsZSwKICAgICAgICAgICAgY29zQW5nbGUsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDEKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IGNvc0FuZ2xlOwogICAgICAgIHJlc3VsdFsxXSA9IHNpbkFuZ2xlOwogICAgICAgIHJlc3VsdFsyXSA9IDA7CiAgICAgICAgcmVzdWx0WzNdID0gLXNpbkFuZ2xlOwogICAgICAgIHJlc3VsdFs0XSA9IGNvc0FuZ2xlOwogICAgICAgIHJlc3VsdFs1XSA9IDA7CiAgICAgICAgcmVzdWx0WzZdID0gMDsKICAgICAgICByZXN1bHRbN10gPSAwOwogICAgICAgIHJlc3VsdFs4XSA9IDE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My50b0FycmF5ID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgbWF0cml4WzBdLAogICAgICAgICAgICBtYXRyaXhbMV0sCiAgICAgICAgICAgIG1hdHJpeFsyXSwKICAgICAgICAgICAgbWF0cml4WzNdLAogICAgICAgICAgICBtYXRyaXhbNF0sCiAgICAgICAgICAgIG1hdHJpeFs1XSwKICAgICAgICAgICAgbWF0cml4WzZdLAogICAgICAgICAgICBtYXRyaXhbN10sCiAgICAgICAgICAgIG1hdHJpeFs4XQogICAgICAgICAgXTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gbWF0cml4WzBdOwogICAgICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXTsKICAgICAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl07CiAgICAgICAgcmVzdWx0WzNdID0gbWF0cml4WzNdOwogICAgICAgIHJlc3VsdFs0XSA9IG1hdHJpeFs0XTsKICAgICAgICByZXN1bHRbNV0gPSBtYXRyaXhbNV07CiAgICAgICAgcmVzdWx0WzZdID0gbWF0cml4WzZdOwogICAgICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs3XTsKICAgICAgICByZXN1bHRbOF0gPSBtYXRyaXhbOF07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My5nZXRFbGVtZW50SW5kZXggPSBmdW5jdGlvbihjb2x1bW4sIHJvdykgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJyb3ciLCByb3csIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJyb3ciLCByb3csIDIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJjb2x1bW4iLCBjb2x1bW4sIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJjb2x1bW4iLCBjb2x1bW4sIDIpOwogICAgICAgIHJldHVybiBjb2x1bW4gKiAzICsgcm93OwogICAgICB9OwogICAgICBNYXRyaXgzLmdldENvbHVtbiA9IGZ1bmN0aW9uKG1hdHJpeCwgaW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBzdGFydEluZGV4ID0gaW5kZXggKiAzOwogICAgICAgIGNvbnN0IHggPSBtYXRyaXhbc3RhcnRJbmRleF07CiAgICAgICAgY29uc3QgeSA9IG1hdHJpeFtzdGFydEluZGV4ICsgMV07CiAgICAgICAgY29uc3QgeiA9IG1hdHJpeFtzdGFydEluZGV4ICsgMl07CiAgICAgICAgcmVzdWx0LnggPSB4OwogICAgICAgIHJlc3VsdC55ID0geTsKICAgICAgICByZXN1bHQueiA9IHo7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My5zZXRDb2x1bW4gPSBmdW5jdGlvbihtYXRyaXgsIGluZGV4LCBjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJpbmRleCIsIGluZGV4LCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdCA9IE1hdHJpeDMuY2xvbmUobWF0cml4LCByZXN1bHQpOwogICAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBpbmRleCAqIDM7CiAgICAgICAgcmVzdWx0W3N0YXJ0SW5kZXhdID0gY2FydGVzaWFuMTEueDsKICAgICAgICByZXN1bHRbc3RhcnRJbmRleCArIDFdID0gY2FydGVzaWFuMTEueTsKICAgICAgICByZXN1bHRbc3RhcnRJbmRleCArIDJdID0gY2FydGVzaWFuMTEuejsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgzLmdldFJvdyA9IGZ1bmN0aW9uKG1hdHJpeCwgaW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCB4ID0gbWF0cml4W2luZGV4XTsKICAgICAgICBjb25zdCB5ID0gbWF0cml4W2luZGV4ICsgM107CiAgICAgICAgY29uc3QgeiA9IG1hdHJpeFtpbmRleCArIDZdOwogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmVzdWx0LnogPSB6OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMuc2V0Um93ID0gZnVuY3Rpb24obWF0cml4LCBpbmRleCwgY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQgPSBNYXRyaXgzLmNsb25lKG1hdHJpeCwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbaW5kZXhdID0gY2FydGVzaWFuMTEueDsKICAgICAgICByZXN1bHRbaW5kZXggKyAzXSA9IGNhcnRlc2lhbjExLnk7CiAgICAgICAgcmVzdWx0W2luZGV4ICsgNl0gPSBjYXJ0ZXNpYW4xMS56OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjYWxlU2NyYXRjaDEgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIE1hdHJpeDMuc2V0U2NhbGUgPSBmdW5jdGlvbihtYXRyaXgsIHNjYWxlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzY2FsZSIsIHNjYWxlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgZXhpc3RpbmdTY2FsZSA9IE1hdHJpeDMuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2gxKTsKICAgICAgICBjb25zdCBzY2FsZVJhdGlvWCA9IHNjYWxlLnggLyBleGlzdGluZ1NjYWxlLng7CiAgICAgICAgY29uc3Qgc2NhbGVSYXRpb1kgPSBzY2FsZS55IC8gZXhpc3RpbmdTY2FsZS55OwogICAgICAgIGNvbnN0IHNjYWxlUmF0aW9aID0gc2NhbGUueiAvIGV4aXN0aW5nU2NhbGUuejsKICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF0gKiBzY2FsZVJhdGlvWDsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV0gKiBzY2FsZVJhdGlvWDsKICAgICAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl0gKiBzY2FsZVJhdGlvWDsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM10gKiBzY2FsZVJhdGlvWTsKICAgICAgICByZXN1bHRbNF0gPSBtYXRyaXhbNF0gKiBzY2FsZVJhdGlvWTsKICAgICAgICByZXN1bHRbNV0gPSBtYXRyaXhbNV0gKiBzY2FsZVJhdGlvWTsKICAgICAgICByZXN1bHRbNl0gPSBtYXRyaXhbNl0gKiBzY2FsZVJhdGlvWjsKICAgICAgICByZXN1bHRbN10gPSBtYXRyaXhbN10gKiBzY2FsZVJhdGlvWjsKICAgICAgICByZXN1bHRbOF0gPSBtYXRyaXhbOF0gKiBzY2FsZVJhdGlvWjsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY2FsZVNjcmF0Y2gyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBNYXRyaXgzLnNldFVuaWZvcm1TY2FsZSA9IGZ1bmN0aW9uKG1hdHJpeCwgc2NhbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInNjYWxlIiwgc2NhbGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBleGlzdGluZ1NjYWxlID0gTWF0cml4My5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDIpOwogICAgICAgIGNvbnN0IHNjYWxlUmF0aW9YID0gc2NhbGUgLyBleGlzdGluZ1NjYWxlLng7CiAgICAgICAgY29uc3Qgc2NhbGVSYXRpb1kgPSBzY2FsZSAvIGV4aXN0aW5nU2NhbGUueTsKICAgICAgICBjb25zdCBzY2FsZVJhdGlvWiA9IHNjYWxlIC8gZXhpc3RpbmdTY2FsZS56OwogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXSAqIHNjYWxlUmF0aW9YOwogICAgICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAqIHNjYWxlUmF0aW9YOwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAqIHNjYWxlUmF0aW9YOwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXSAqIHNjYWxlUmF0aW9ZOwogICAgICAgIHJlc3VsdFs0XSA9IG1hdHJpeFs0XSAqIHNjYWxlUmF0aW9ZOwogICAgICAgIHJlc3VsdFs1XSA9IG1hdHJpeFs1XSAqIHNjYWxlUmF0aW9ZOwogICAgICAgIHJlc3VsdFs2XSA9IG1hdHJpeFs2XSAqIHNjYWxlUmF0aW9aOwogICAgICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs3XSAqIHNjYWxlUmF0aW9aOwogICAgICAgIHJlc3VsdFs4XSA9IG1hdHJpeFs4XSAqIHNjYWxlUmF0aW9aOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hDb2x1bW4gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIE1hdHJpeDMuZ2V0U2NhbGUgPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21FbGVtZW50cyhtYXRyaXhbMF0sIG1hdHJpeFsxXSwgbWF0cml4WzJdLCBzY3JhdGNoQ29sdW1uKQogICAgICAgICk7CiAgICAgICAgcmVzdWx0LnkgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21FbGVtZW50cyhtYXRyaXhbM10sIG1hdHJpeFs0XSwgbWF0cml4WzVdLCBzY3JhdGNoQ29sdW1uKQogICAgICAgICk7CiAgICAgICAgcmVzdWx0LnogPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21FbGVtZW50cyhtYXRyaXhbNl0sIG1hdHJpeFs3XSwgbWF0cml4WzhdLCBzY3JhdGNoQ29sdW1uKQogICAgICAgICk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NhbGVTY3JhdGNoMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgTWF0cml4My5nZXRNYXhpbXVtU2NhbGUgPSBmdW5jdGlvbihtYXRyaXgpIHsKICAgICAgICBNYXRyaXgzLmdldFNjYWxlKG1hdHJpeCwgc2NhbGVTY3JhdGNoMyk7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5tYXhpbXVtQ29tcG9uZW50KHNjYWxlU2NyYXRjaDMpOwogICAgICB9OwogICAgICBzY2FsZVNjcmF0Y2g0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBNYXRyaXgzLnNldFJvdGF0aW9uID0gZnVuY3Rpb24obWF0cml4LCByb3RhdGlvbiwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBzY2FsZSA9IE1hdHJpeDMuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2g0KTsKICAgICAgICByZXN1bHRbMF0gPSByb3RhdGlvblswXSAqIHNjYWxlLng7CiAgICAgICAgcmVzdWx0WzFdID0gcm90YXRpb25bMV0gKiBzY2FsZS54OwogICAgICAgIHJlc3VsdFsyXSA9IHJvdGF0aW9uWzJdICogc2NhbGUueDsKICAgICAgICByZXN1bHRbM10gPSByb3RhdGlvblszXSAqIHNjYWxlLnk7CiAgICAgICAgcmVzdWx0WzRdID0gcm90YXRpb25bNF0gKiBzY2FsZS55OwogICAgICAgIHJlc3VsdFs1XSA9IHJvdGF0aW9uWzVdICogc2NhbGUueTsKICAgICAgICByZXN1bHRbNl0gPSByb3RhdGlvbls2XSAqIHNjYWxlLno7CiAgICAgICAgcmVzdWx0WzddID0gcm90YXRpb25bN10gKiBzY2FsZS56OwogICAgICAgIHJlc3VsdFs4XSA9IHJvdGF0aW9uWzhdICogc2NhbGUuejsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY2FsZVNjcmF0Y2g1ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBNYXRyaXgzLmdldFJvdGF0aW9uID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHNjYWxlID0gTWF0cml4My5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDUpOwogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXSAvIHNjYWxlLng7CiAgICAgICAgcmVzdWx0WzFdID0gbWF0cml4WzFdIC8gc2NhbGUueDsKICAgICAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl0gLyBzY2FsZS54OwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXSAvIHNjYWxlLnk7CiAgICAgICAgcmVzdWx0WzRdID0gbWF0cml4WzRdIC8gc2NhbGUueTsKICAgICAgICByZXN1bHRbNV0gPSBtYXRyaXhbNV0gLyBzY2FsZS55OwogICAgICAgIHJlc3VsdFs2XSA9IG1hdHJpeFs2XSAvIHNjYWxlLno7CiAgICAgICAgcmVzdWx0WzddID0gbWF0cml4WzddIC8gc2NhbGUuejsKICAgICAgICByZXN1bHRbOF0gPSBtYXRyaXhbOF0gLyBzY2FsZS56OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMubXVsdGlwbHkgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgY29sdW1uMFJvdzAgPSBsZWZ0WzBdICogcmlnaHRbMF0gKyBsZWZ0WzNdICogcmlnaHRbMV0gKyBsZWZ0WzZdICogcmlnaHRbMl07CiAgICAgICAgY29uc3QgY29sdW1uMFJvdzEgPSBsZWZ0WzFdICogcmlnaHRbMF0gKyBsZWZ0WzRdICogcmlnaHRbMV0gKyBsZWZ0WzddICogcmlnaHRbMl07CiAgICAgICAgY29uc3QgY29sdW1uMFJvdzIgPSBsZWZ0WzJdICogcmlnaHRbMF0gKyBsZWZ0WzVdICogcmlnaHRbMV0gKyBsZWZ0WzhdICogcmlnaHRbMl07CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzAgPSBsZWZ0WzBdICogcmlnaHRbM10gKyBsZWZ0WzNdICogcmlnaHRbNF0gKyBsZWZ0WzZdICogcmlnaHRbNV07CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzEgPSBsZWZ0WzFdICogcmlnaHRbM10gKyBsZWZ0WzRdICogcmlnaHRbNF0gKyBsZWZ0WzddICogcmlnaHRbNV07CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzIgPSBsZWZ0WzJdICogcmlnaHRbM10gKyBsZWZ0WzVdICogcmlnaHRbNF0gKyBsZWZ0WzhdICogcmlnaHRbNV07CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzAgPSBsZWZ0WzBdICogcmlnaHRbNl0gKyBsZWZ0WzNdICogcmlnaHRbN10gKyBsZWZ0WzZdICogcmlnaHRbOF07CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzEgPSBsZWZ0WzFdICogcmlnaHRbNl0gKyBsZWZ0WzRdICogcmlnaHRbN10gKyBsZWZ0WzddICogcmlnaHRbOF07CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzIgPSBsZWZ0WzJdICogcmlnaHRbNl0gKyBsZWZ0WzVdICogcmlnaHRbN10gKyBsZWZ0WzhdICogcmlnaHRbOF07CiAgICAgICAgcmVzdWx0WzBdID0gY29sdW1uMFJvdzA7CiAgICAgICAgcmVzdWx0WzFdID0gY29sdW1uMFJvdzE7CiAgICAgICAgcmVzdWx0WzJdID0gY29sdW1uMFJvdzI7CiAgICAgICAgcmVzdWx0WzNdID0gY29sdW1uMVJvdzA7CiAgICAgICAgcmVzdWx0WzRdID0gY29sdW1uMVJvdzE7CiAgICAgICAgcmVzdWx0WzVdID0gY29sdW1uMVJvdzI7CiAgICAgICAgcmVzdWx0WzZdID0gY29sdW1uMlJvdzA7CiAgICAgICAgcmVzdWx0WzddID0gY29sdW1uMlJvdzE7CiAgICAgICAgcmVzdWx0WzhdID0gY29sdW1uMlJvdzI7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My5hZGQgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gbGVmdFswXSArIHJpZ2h0WzBdOwogICAgICAgIHJlc3VsdFsxXSA9IGxlZnRbMV0gKyByaWdodFsxXTsKICAgICAgICByZXN1bHRbMl0gPSBsZWZ0WzJdICsgcmlnaHRbMl07CiAgICAgICAgcmVzdWx0WzNdID0gbGVmdFszXSArIHJpZ2h0WzNdOwogICAgICAgIHJlc3VsdFs0XSA9IGxlZnRbNF0gKyByaWdodFs0XTsKICAgICAgICByZXN1bHRbNV0gPSBsZWZ0WzVdICsgcmlnaHRbNV07CiAgICAgICAgcmVzdWx0WzZdID0gbGVmdFs2XSArIHJpZ2h0WzZdOwogICAgICAgIHJlc3VsdFs3XSA9IGxlZnRbN10gKyByaWdodFs3XTsKICAgICAgICByZXN1bHRbOF0gPSBsZWZ0WzhdICsgcmlnaHRbOF07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My5zdWJ0cmFjdCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSBsZWZ0WzBdIC0gcmlnaHRbMF07CiAgICAgICAgcmVzdWx0WzFdID0gbGVmdFsxXSAtIHJpZ2h0WzFdOwogICAgICAgIHJlc3VsdFsyXSA9IGxlZnRbMl0gLSByaWdodFsyXTsKICAgICAgICByZXN1bHRbM10gPSBsZWZ0WzNdIC0gcmlnaHRbM107CiAgICAgICAgcmVzdWx0WzRdID0gbGVmdFs0XSAtIHJpZ2h0WzRdOwogICAgICAgIHJlc3VsdFs1XSA9IGxlZnRbNV0gLSByaWdodFs1XTsKICAgICAgICByZXN1bHRbNl0gPSBsZWZ0WzZdIC0gcmlnaHRbNl07CiAgICAgICAgcmVzdWx0WzddID0gbGVmdFs3XSAtIHJpZ2h0WzddOwogICAgICAgIHJlc3VsdFs4XSA9IGxlZnRbOF0gLSByaWdodFs4XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgzLm11bHRpcGx5QnlWZWN0b3IgPSBmdW5jdGlvbihtYXRyaXgsIGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHZYID0gY2FydGVzaWFuMTEueDsKICAgICAgICBjb25zdCB2WSA9IGNhcnRlc2lhbjExLnk7CiAgICAgICAgY29uc3QgdlogPSBjYXJ0ZXNpYW4xMS56OwogICAgICAgIGNvbnN0IHggPSBtYXRyaXhbMF0gKiB2WCArIG1hdHJpeFszXSAqIHZZICsgbWF0cml4WzZdICogdlo7CiAgICAgICAgY29uc3QgeSA9IG1hdHJpeFsxXSAqIHZYICsgbWF0cml4WzRdICogdlkgKyBtYXRyaXhbN10gKiB2WjsKICAgICAgICBjb25zdCB6ID0gbWF0cml4WzJdICogdlggKyBtYXRyaXhbNV0gKiB2WSArIG1hdHJpeFs4XSAqIHZaOwogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmVzdWx0LnogPSB6OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMubXVsdGlwbHlCeVNjYWxhciA9IGZ1bmN0aW9uKG1hdHJpeCwgc2NhbGFyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJzY2FsYXIiLCBzY2FsYXIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF0gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzFdID0gbWF0cml4WzFdICogc2NhbGFyOwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAqIHNjYWxhcjsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM10gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzRdID0gbWF0cml4WzRdICogc2NhbGFyOwogICAgICAgIHJlc3VsdFs1XSA9IG1hdHJpeFs1XSAqIHNjYWxhcjsKICAgICAgICByZXN1bHRbNl0gPSBtYXRyaXhbNl0gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzddID0gbWF0cml4WzddICogc2NhbGFyOwogICAgICAgIHJlc3VsdFs4XSA9IG1hdHJpeFs4XSAqIHNjYWxhcjsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgzLm11bHRpcGx5QnlTY2FsZSA9IGZ1bmN0aW9uKG1hdHJpeCwgc2NhbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNjYWxlIiwgc2NhbGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF0gKiBzY2FsZS54OwogICAgICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAqIHNjYWxlLng7CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdICogc2NhbGUueDsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM10gKiBzY2FsZS55OwogICAgICAgIHJlc3VsdFs0XSA9IG1hdHJpeFs0XSAqIHNjYWxlLnk7CiAgICAgICAgcmVzdWx0WzVdID0gbWF0cml4WzVdICogc2NhbGUueTsKICAgICAgICByZXN1bHRbNl0gPSBtYXRyaXhbNl0gKiBzY2FsZS56OwogICAgICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs3XSAqIHNjYWxlLno7CiAgICAgICAgcmVzdWx0WzhdID0gbWF0cml4WzhdICogc2NhbGUuejsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgzLm11bHRpcGx5QnlVbmlmb3JtU2NhbGUgPSBmdW5jdGlvbihtYXRyaXgsIHNjYWxlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJzY2FsZSIsIHNjYWxlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gbWF0cml4WzBdICogc2NhbGU7CiAgICAgICAgcmVzdWx0WzFdID0gbWF0cml4WzFdICogc2NhbGU7CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdICogc2NhbGU7CiAgICAgICAgcmVzdWx0WzNdID0gbWF0cml4WzNdICogc2NhbGU7CiAgICAgICAgcmVzdWx0WzRdID0gbWF0cml4WzRdICogc2NhbGU7CiAgICAgICAgcmVzdWx0WzVdID0gbWF0cml4WzVdICogc2NhbGU7CiAgICAgICAgcmVzdWx0WzZdID0gbWF0cml4WzZdICogc2NhbGU7CiAgICAgICAgcmVzdWx0WzddID0gbWF0cml4WzddICogc2NhbGU7CiAgICAgICAgcmVzdWx0WzhdID0gbWF0cml4WzhdICogc2NhbGU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My5uZWdhdGUgPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gLW1hdHJpeFswXTsKICAgICAgICByZXN1bHRbMV0gPSAtbWF0cml4WzFdOwogICAgICAgIHJlc3VsdFsyXSA9IC1tYXRyaXhbMl07CiAgICAgICAgcmVzdWx0WzNdID0gLW1hdHJpeFszXTsKICAgICAgICByZXN1bHRbNF0gPSAtbWF0cml4WzRdOwogICAgICAgIHJlc3VsdFs1XSA9IC1tYXRyaXhbNV07CiAgICAgICAgcmVzdWx0WzZdID0gLW1hdHJpeFs2XTsKICAgICAgICByZXN1bHRbN10gPSAtbWF0cml4WzddOwogICAgICAgIHJlc3VsdFs4XSA9IC1tYXRyaXhbOF07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My50cmFuc3Bvc2UgPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgY29sdW1uMFJvdzAgPSBtYXRyaXhbMF07CiAgICAgICAgY29uc3QgY29sdW1uMFJvdzEgPSBtYXRyaXhbM107CiAgICAgICAgY29uc3QgY29sdW1uMFJvdzIgPSBtYXRyaXhbNl07CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzAgPSBtYXRyaXhbMV07CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzEgPSBtYXRyaXhbNF07CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzIgPSBtYXRyaXhbN107CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzAgPSBtYXRyaXhbMl07CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzEgPSBtYXRyaXhbNV07CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzIgPSBtYXRyaXhbOF07CiAgICAgICAgcmVzdWx0WzBdID0gY29sdW1uMFJvdzA7CiAgICAgICAgcmVzdWx0WzFdID0gY29sdW1uMFJvdzE7CiAgICAgICAgcmVzdWx0WzJdID0gY29sdW1uMFJvdzI7CiAgICAgICAgcmVzdWx0WzNdID0gY29sdW1uMVJvdzA7CiAgICAgICAgcmVzdWx0WzRdID0gY29sdW1uMVJvdzE7CiAgICAgICAgcmVzdWx0WzVdID0gY29sdW1uMVJvdzI7CiAgICAgICAgcmVzdWx0WzZdID0gY29sdW1uMlJvdzA7CiAgICAgICAgcmVzdWx0WzddID0gY29sdW1uMlJvdzE7CiAgICAgICAgcmVzdWx0WzhdID0gY29sdW1uMlJvdzI7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgcm93VmFsID0gWzEsIDAsIDBdOwogICAgICBjb2xWYWwgPSBbMiwgMiwgMV07CiAgICAgIGpNYXRyaXggPSBuZXcgTWF0cml4MygpOwogICAgICBqTWF0cml4VHJhbnNwb3NlID0gbmV3IE1hdHJpeDMoKTsKICAgICAgTWF0cml4My5jb21wdXRlRWlnZW5EZWNvbXBvc2l0aW9uID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgY29uc3QgdG9sZXJhbmNlID0gTWF0aF9kZWZhdWx0LkVQU0lMT04yMDsKICAgICAgICBjb25zdCBtYXhTd2VlcHMgPSAxMDsKICAgICAgICBsZXQgY291bnQgPSAwOwogICAgICAgIGxldCBzd2VlcCA9IDA7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0ge307CiAgICAgICAgfQogICAgICAgIGNvbnN0IHVuaXRhcnlNYXRyaXggPSByZXN1bHQudW5pdGFyeSA9IE1hdHJpeDMuY2xvbmUoCiAgICAgICAgICBNYXRyaXgzLklERU5USVRZLAogICAgICAgICAgcmVzdWx0LnVuaXRhcnkKICAgICAgICApOwogICAgICAgIGNvbnN0IGRpYWdNYXRyaXggPSByZXN1bHQuZGlhZ29uYWwgPSBNYXRyaXgzLmNsb25lKG1hdHJpeCwgcmVzdWx0LmRpYWdvbmFsKTsKICAgICAgICBjb25zdCBlcHNpbG9uID0gdG9sZXJhbmNlICogY29tcHV0ZUZyb2Jlbml1c05vcm0oZGlhZ01hdHJpeCk7CiAgICAgICAgd2hpbGUgKHN3ZWVwIDwgbWF4U3dlZXBzICYmIG9mZkRpYWdvbmFsRnJvYmVuaXVzTm9ybShkaWFnTWF0cml4KSA+IGVwc2lsb24pIHsKICAgICAgICAgIHNodXJEZWNvbXBvc2l0aW9uKGRpYWdNYXRyaXgsIGpNYXRyaXgpOwogICAgICAgICAgTWF0cml4My50cmFuc3Bvc2Uoak1hdHJpeCwgak1hdHJpeFRyYW5zcG9zZSk7CiAgICAgICAgICBNYXRyaXgzLm11bHRpcGx5KGRpYWdNYXRyaXgsIGpNYXRyaXgsIGRpYWdNYXRyaXgpOwogICAgICAgICAgTWF0cml4My5tdWx0aXBseShqTWF0cml4VHJhbnNwb3NlLCBkaWFnTWF0cml4LCBkaWFnTWF0cml4KTsKICAgICAgICAgIE1hdHJpeDMubXVsdGlwbHkodW5pdGFyeU1hdHJpeCwgak1hdHJpeCwgdW5pdGFyeU1hdHJpeCk7CiAgICAgICAgICBpZiAoKytjb3VudCA+IDIpIHsKICAgICAgICAgICAgKytzd2VlcDsKICAgICAgICAgICAgY291bnQgPSAwOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgzLmFicyA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSBNYXRoLmFicyhtYXRyaXhbMF0pOwogICAgICAgIHJlc3VsdFsxXSA9IE1hdGguYWJzKG1hdHJpeFsxXSk7CiAgICAgICAgcmVzdWx0WzJdID0gTWF0aC5hYnMobWF0cml4WzJdKTsKICAgICAgICByZXN1bHRbM10gPSBNYXRoLmFicyhtYXRyaXhbM10pOwogICAgICAgIHJlc3VsdFs0XSA9IE1hdGguYWJzKG1hdHJpeFs0XSk7CiAgICAgICAgcmVzdWx0WzVdID0gTWF0aC5hYnMobWF0cml4WzVdKTsKICAgICAgICByZXN1bHRbNl0gPSBNYXRoLmFicyhtYXRyaXhbNl0pOwogICAgICAgIHJlc3VsdFs3XSA9IE1hdGguYWJzKG1hdHJpeFs3XSk7CiAgICAgICAgcmVzdWx0WzhdID0gTWF0aC5hYnMobWF0cml4WzhdKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgzLmRldGVybWluYW50ID0gZnVuY3Rpb24obWF0cml4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIGNvbnN0IG0xMSA9IG1hdHJpeFswXTsKICAgICAgICBjb25zdCBtMjEgPSBtYXRyaXhbM107CiAgICAgICAgY29uc3QgbTMxID0gbWF0cml4WzZdOwogICAgICAgIGNvbnN0IG0xMiA9IG1hdHJpeFsxXTsKICAgICAgICBjb25zdCBtMjIgPSBtYXRyaXhbNF07CiAgICAgICAgY29uc3QgbTMyID0gbWF0cml4WzddOwogICAgICAgIGNvbnN0IG0xMyA9IG1hdHJpeFsyXTsKICAgICAgICBjb25zdCBtMjMgPSBtYXRyaXhbNV07CiAgICAgICAgY29uc3QgbTMzID0gbWF0cml4WzhdOwogICAgICAgIHJldHVybiBtMTEgKiAobTIyICogbTMzIC0gbTIzICogbTMyKSArIG0xMiAqIChtMjMgKiBtMzEgLSBtMjEgKiBtMzMpICsgbTEzICogKG0yMSAqIG0zMiAtIG0yMiAqIG0zMSk7CiAgICAgIH07CiAgICAgIE1hdHJpeDMuaW52ZXJzZSA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBtMTEgPSBtYXRyaXhbMF07CiAgICAgICAgY29uc3QgbTIxID0gbWF0cml4WzFdOwogICAgICAgIGNvbnN0IG0zMSA9IG1hdHJpeFsyXTsKICAgICAgICBjb25zdCBtMTIgPSBtYXRyaXhbM107CiAgICAgICAgY29uc3QgbTIyID0gbWF0cml4WzRdOwogICAgICAgIGNvbnN0IG0zMiA9IG1hdHJpeFs1XTsKICAgICAgICBjb25zdCBtMTMgPSBtYXRyaXhbNl07CiAgICAgICAgY29uc3QgbTIzID0gbWF0cml4WzddOwogICAgICAgIGNvbnN0IG0zMyA9IG1hdHJpeFs4XTsKICAgICAgICBjb25zdCBkZXRlcm1pbmFudCA9IE1hdHJpeDMuZGV0ZXJtaW5hbnQobWF0cml4KTsKICAgICAgICBpZiAoTWF0aC5hYnMoZGV0ZXJtaW5hbnQpIDw9IE1hdGhfZGVmYXVsdC5FUFNJTE9OMTUpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJtYXRyaXggaXMgbm90IGludmVydGlibGUiKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gbTIyICogbTMzIC0gbTIzICogbTMyOwogICAgICAgIHJlc3VsdFsxXSA9IG0yMyAqIG0zMSAtIG0yMSAqIG0zMzsKICAgICAgICByZXN1bHRbMl0gPSBtMjEgKiBtMzIgLSBtMjIgKiBtMzE7CiAgICAgICAgcmVzdWx0WzNdID0gbTEzICogbTMyIC0gbTEyICogbTMzOwogICAgICAgIHJlc3VsdFs0XSA9IG0xMSAqIG0zMyAtIG0xMyAqIG0zMTsKICAgICAgICByZXN1bHRbNV0gPSBtMTIgKiBtMzEgLSBtMTEgKiBtMzI7CiAgICAgICAgcmVzdWx0WzZdID0gbTEyICogbTIzIC0gbTEzICogbTIyOwogICAgICAgIHJlc3VsdFs3XSA9IG0xMyAqIG0yMSAtIG0xMSAqIG0yMzsKICAgICAgICByZXN1bHRbOF0gPSBtMTEgKiBtMjIgLSBtMTIgKiBtMjE7CiAgICAgICAgY29uc3Qgc2NhbGUgPSAxIC8gZGV0ZXJtaW5hbnQ7CiAgICAgICAgcmV0dXJuIE1hdHJpeDMubXVsdGlwbHlCeVNjYWxhcihyZXN1bHQsIHNjYWxlLCByZXN1bHQpOwogICAgICB9OwogICAgICBzY3JhdGNoVHJhbnNwb3NlTWF0cml4ID0gbmV3IE1hdHJpeDMoKTsKICAgICAgTWF0cml4My5pbnZlcnNlVHJhbnNwb3NlID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJldHVybiBNYXRyaXgzLmludmVyc2UoCiAgICAgICAgICBNYXRyaXgzLnRyYW5zcG9zZShtYXRyaXgsIHNjcmF0Y2hUcmFuc3Bvc2VNYXRyaXgpLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgTWF0cml4My5lcXVhbHMgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBsZWZ0WzBdID09PSByaWdodFswXSAmJiBsZWZ0WzFdID09PSByaWdodFsxXSAmJiBsZWZ0WzJdID09PSByaWdodFsyXSAmJiBsZWZ0WzNdID09PSByaWdodFszXSAmJiBsZWZ0WzRdID09PSByaWdodFs0XSAmJiBsZWZ0WzVdID09PSByaWdodFs1XSAmJiBsZWZ0WzZdID09PSByaWdodFs2XSAmJiBsZWZ0WzddID09PSByaWdodFs3XSAmJiBsZWZ0WzhdID09PSByaWdodFs4XTsKICAgICAgfTsKICAgICAgTWF0cml4My5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIGVwc2lsb24pIHsKICAgICAgICBlcHNpbG9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZXBzaWxvbiwgMCk7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIE1hdGguYWJzKGxlZnRbMF0gLSByaWdodFswXSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzFdIC0gcmlnaHRbMV0pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFsyXSAtIHJpZ2h0WzJdKSA8PSBlcHNpbG9uICYmIE1hdGguYWJzKGxlZnRbM10gLSByaWdodFszXSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzRdIC0gcmlnaHRbNF0pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFs1XSAtIHJpZ2h0WzVdKSA8PSBlcHNpbG9uICYmIE1hdGguYWJzKGxlZnRbNl0gLSByaWdodFs2XSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzddIC0gcmlnaHRbN10pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFs4XSAtIHJpZ2h0WzhdKSA8PSBlcHNpbG9uOwogICAgICB9OwogICAgICBNYXRyaXgzLklERU5USVRZID0gT2JqZWN0LmZyZWV6ZSgKICAgICAgICBuZXcgTWF0cml4MygxLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAxKQogICAgICApOwogICAgICBNYXRyaXgzLlpFUk8gPSBPYmplY3QuZnJlZXplKAogICAgICAgIG5ldyBNYXRyaXgzKDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDApCiAgICAgICk7CiAgICAgIE1hdHJpeDMuQ09MVU1OMFJPVzAgPSAwOwogICAgICBNYXRyaXgzLkNPTFVNTjBST1cxID0gMTsKICAgICAgTWF0cml4My5DT0xVTU4wUk9XMiA9IDI7CiAgICAgIE1hdHJpeDMuQ09MVU1OMVJPVzAgPSAzOwogICAgICBNYXRyaXgzLkNPTFVNTjFST1cxID0gNDsKICAgICAgTWF0cml4My5DT0xVTU4xUk9XMiA9IDU7CiAgICAgIE1hdHJpeDMuQ09MVU1OMlJPVzAgPSA2OwogICAgICBNYXRyaXgzLkNPTFVNTjJST1cxID0gNzsKICAgICAgTWF0cml4My5DT0xVTU4yUk9XMiA9IDg7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE1hdHJpeDMucHJvdG90eXBlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgbnVtYmVyIG9mIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uLgogICAgICAgICAqIEBtZW1iZXJvZiBNYXRyaXgzLnByb3RvdHlwZQogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKi8KICAgICAgICBsZW5ndGg6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBNYXRyaXgzLnBhY2tlZExlbmd0aDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBNYXRyaXgzLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIHJldHVybiBNYXRyaXgzLmNsb25lKHRoaXMsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIE1hdHJpeDMucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIE1hdHJpeDMuZXF1YWxzKHRoaXMsIHJpZ2h0KTsKICAgICAgfTsKICAgICAgTWF0cml4My5lcXVhbHNBcnJheSA9IGZ1bmN0aW9uKG1hdHJpeCwgYXJyYXksIG9mZnNldCkgewogICAgICAgIHJldHVybiBtYXRyaXhbMF0gPT09IGFycmF5W29mZnNldF0gJiYgbWF0cml4WzFdID09PSBhcnJheVtvZmZzZXQgKyAxXSAmJiBtYXRyaXhbMl0gPT09IGFycmF5W29mZnNldCArIDJdICYmIG1hdHJpeFszXSA9PT0gYXJyYXlbb2Zmc2V0ICsgM10gJiYgbWF0cml4WzRdID09PSBhcnJheVtvZmZzZXQgKyA0XSAmJiBtYXRyaXhbNV0gPT09IGFycmF5W29mZnNldCArIDVdICYmIG1hdHJpeFs2XSA9PT0gYXJyYXlbb2Zmc2V0ICsgNl0gJiYgbWF0cml4WzddID09PSBhcnJheVtvZmZzZXQgKyA3XSAmJiBtYXRyaXhbOF0gPT09IGFycmF5W29mZnNldCArIDhdOwogICAgICB9OwogICAgICBNYXRyaXgzLnByb3RvdHlwZS5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24ocmlnaHQsIGVwc2lsb24pIHsKICAgICAgICByZXR1cm4gTWF0cml4My5lcXVhbHNFcHNpbG9uKHRoaXMsIHJpZ2h0LCBlcHNpbG9uKTsKICAgICAgfTsKICAgICAgTWF0cml4My5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gYCgke3RoaXNbMF19LCAke3RoaXNbM119LCAke3RoaXNbNl19KQooJHt0aGlzWzFdfSwgJHt0aGlzWzRdfSwgJHt0aGlzWzddfSkKKCR7dGhpc1syXX0sICR7dGhpc1s1XX0sICR7dGhpc1s4XX0pYDsKICAgICAgfTsKICAgICAgTWF0cml4M19kZWZhdWx0ID0gTWF0cml4MzsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NhcnRlc2lhbjQuanMKICBmdW5jdGlvbiBDYXJ0ZXNpYW40KHgsIHksIHosIHcpIHsKICAgIHRoaXMueCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHgsIDApOwogICAgdGhpcy55ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoeSwgMCk7CiAgICB0aGlzLnogPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh6LCAwKTsKICAgIHRoaXMudyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHcsIDApOwogIH0KICB2YXIgZGlzdGFuY2VTY3JhdGNoMiwgbGVycFNjcmF0Y2gyLCBtb3N0T3J0aG9nb25hbEF4aXNTY3JhdGNoMiwgc2NyYXRjaEYzMkFycmF5LCBzY3JhdGNoVThBcnJheSwgdGVzdFUzMiwgdGVzdFU4LCBsaXR0bGVFbmRpYW4sIENhcnRlc2lhbjRfZGVmYXVsdDsKICB2YXIgaW5pdF9DYXJ0ZXNpYW40ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9DYXJ0ZXNpYW40LmpzIigpIHsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgQ2FydGVzaWFuNC5mcm9tRWxlbWVudHMgPSBmdW5jdGlvbih4LCB5LCB6LCB3LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENhcnRlc2lhbjQoeCwgeSwgeiwgdyk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmVzdWx0LnogPSB6OwogICAgICAgIHJlc3VsdC53ID0gdzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LmZyb21Db2xvciA9IGZ1bmN0aW9uKGNvbG9yLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNvbG9yIiwgY29sb3IpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydGVzaWFuNChjb2xvci5yZWQsIGNvbG9yLmdyZWVuLCBjb2xvci5ibHVlLCBjb2xvci5hbHBoYSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC54ID0gY29sb3IucmVkOwogICAgICAgIHJlc3VsdC55ID0gY29sb3IuZ3JlZW47CiAgICAgICAgcmVzdWx0LnogPSBjb2xvci5ibHVlOwogICAgICAgIHJlc3VsdC53ID0gY29sb3IuYWxwaGE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC5jbG9uZSA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChjYXJ0ZXNpYW4xMSkpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydGVzaWFuNChjYXJ0ZXNpYW4xMS54LCBjYXJ0ZXNpYW4xMS55LCBjYXJ0ZXNpYW4xMS56LCBjYXJ0ZXNpYW4xMS53KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4xMS54OwogICAgICAgIHJlc3VsdC55ID0gY2FydGVzaWFuMTEueTsKICAgICAgICByZXN1bHQueiA9IGNhcnRlc2lhbjExLno7CiAgICAgICAgcmVzdWx0LncgPSBjYXJ0ZXNpYW4xMS53OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQucGFja2VkTGVuZ3RoID0gNDsKICAgICAgQ2FydGVzaWFuNC5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUueDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUueTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuejsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlLnc7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuNCgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0LnkgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC56ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHQudyA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQucGFja0FycmF5ID0gZnVuY3Rpb24oYXJyYXksIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOwogICAgICAgIGNvbnN0IHJlc3VsdExlbmd0aCA9IGxlbmd0aCAqIDQ7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEFycmF5KHJlc3VsdExlbmd0aCk7CiAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShyZXN1bHQpICYmIHJlc3VsdC5sZW5ndGggIT09IHJlc3VsdExlbmd0aCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJJZiByZXN1bHQgaXMgYSB0eXBlZCBhcnJheSwgaXQgbXVzdCBoYXZlIGV4YWN0bHkgYXJyYXkubGVuZ3RoICogNCBlbGVtZW50cyIKICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQubGVuZ3RoICE9PSByZXN1bHRMZW5ndGgpIHsKICAgICAgICAgIHJlc3VsdC5sZW5ndGggPSByZXN1bHRMZW5ndGg7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgIENhcnRlc2lhbjQucGFjayhhcnJheVtpXSwgcmVzdWx0LCBpICogNCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQudW5wYWNrQXJyYXkgPSBmdW5jdGlvbihhcnJheSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiYXJyYXkubGVuZ3RoIiwgYXJyYXkubGVuZ3RoLCA0KTsKICAgICAgICBpZiAoYXJyYXkubGVuZ3RoICUgNCAhPT0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGxlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGggLyA0KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IGxlbmd0aCAvIDQ7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDQpIHsKICAgICAgICAgIGNvbnN0IGluZGV4ID0gaSAvIDQ7CiAgICAgICAgICByZXN1bHRbaW5kZXhdID0gQ2FydGVzaWFuNC51bnBhY2soYXJyYXksIGksIHJlc3VsdFtpbmRleF0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LmZyb21BcnJheSA9IENhcnRlc2lhbjQudW5wYWNrOwogICAgICBDYXJ0ZXNpYW40Lm1heGltdW1Db21wb25lbnQgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIHJldHVybiBNYXRoLm1heChjYXJ0ZXNpYW4xMS54LCBjYXJ0ZXNpYW4xMS55LCBjYXJ0ZXNpYW4xMS56LCBjYXJ0ZXNpYW4xMS53KTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC5taW5pbXVtQ29tcG9uZW50ID0gZnVuY3Rpb24oY2FydGVzaWFuMTEpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICByZXR1cm4gTWF0aC5taW4oY2FydGVzaWFuMTEueCwgY2FydGVzaWFuMTEueSwgY2FydGVzaWFuMTEueiwgY2FydGVzaWFuMTEudyk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQubWluaW11bUJ5Q29tcG9uZW50ID0gZnVuY3Rpb24oZmlyc3QsIHNlY29uZCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJmaXJzdCIsIGZpcnN0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNlY29uZCIsIHNlY29uZCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gTWF0aC5taW4oZmlyc3QueCwgc2Vjb25kLngpOwogICAgICAgIHJlc3VsdC55ID0gTWF0aC5taW4oZmlyc3QueSwgc2Vjb25kLnkpOwogICAgICAgIHJlc3VsdC56ID0gTWF0aC5taW4oZmlyc3Queiwgc2Vjb25kLnopOwogICAgICAgIHJlc3VsdC53ID0gTWF0aC5taW4oZmlyc3Qudywgc2Vjb25kLncpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQubWF4aW11bUJ5Q29tcG9uZW50ID0gZnVuY3Rpb24oZmlyc3QsIHNlY29uZCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJmaXJzdCIsIGZpcnN0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNlY29uZCIsIHNlY29uZCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gTWF0aC5tYXgoZmlyc3QueCwgc2Vjb25kLngpOwogICAgICAgIHJlc3VsdC55ID0gTWF0aC5tYXgoZmlyc3QueSwgc2Vjb25kLnkpOwogICAgICAgIHJlc3VsdC56ID0gTWF0aC5tYXgoZmlyc3Queiwgc2Vjb25kLnopOwogICAgICAgIHJlc3VsdC53ID0gTWF0aC5tYXgoZmlyc3Qudywgc2Vjb25kLncpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQuY2xhbXAgPSBmdW5jdGlvbih2YWx1ZSwgbWluMywgbWF4MywgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1pbiIsIG1pbjMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF4IiwgbWF4Myk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHggPSBNYXRoX2RlZmF1bHQuY2xhbXAodmFsdWUueCwgbWluMy54LCBtYXgzLngpOwogICAgICAgIGNvbnN0IHkgPSBNYXRoX2RlZmF1bHQuY2xhbXAodmFsdWUueSwgbWluMy55LCBtYXgzLnkpOwogICAgICAgIGNvbnN0IHogPSBNYXRoX2RlZmF1bHQuY2xhbXAodmFsdWUueiwgbWluMy56LCBtYXgzLnopOwogICAgICAgIGNvbnN0IHcgPSBNYXRoX2RlZmF1bHQuY2xhbXAodmFsdWUudywgbWluMy53LCBtYXgzLncpOwogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmVzdWx0LnogPSB6OwogICAgICAgIHJlc3VsdC53ID0gdzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40Lm1hZ25pdHVkZVNxdWFyZWQgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIHJldHVybiBjYXJ0ZXNpYW4xMS54ICogY2FydGVzaWFuMTEueCArIGNhcnRlc2lhbjExLnkgKiBjYXJ0ZXNpYW4xMS55ICsgY2FydGVzaWFuMTEueiAqIGNhcnRlc2lhbjExLnogKyBjYXJ0ZXNpYW4xMS53ICogY2FydGVzaWFuMTEudzsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC5tYWduaXR1ZGUgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSkgewogICAgICAgIHJldHVybiBNYXRoLnNxcnQoQ2FydGVzaWFuNC5tYWduaXR1ZGVTcXVhcmVkKGNhcnRlc2lhbjExKSk7CiAgICAgIH07CiAgICAgIGRpc3RhbmNlU2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuNCgpOwogICAgICBDYXJ0ZXNpYW40LmRpc3RhbmNlID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENhcnRlc2lhbjQuc3VidHJhY3QobGVmdCwgcmlnaHQsIGRpc3RhbmNlU2NyYXRjaDIpOwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW40Lm1hZ25pdHVkZShkaXN0YW5jZVNjcmF0Y2gyKTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC5kaXN0YW5jZVNxdWFyZWQgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2FydGVzaWFuNC5zdWJ0cmFjdChsZWZ0LCByaWdodCwgZGlzdGFuY2VTY3JhdGNoMik7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjQubWFnbml0dWRlU3F1YXJlZChkaXN0YW5jZVNjcmF0Y2gyKTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC5ub3JtYWxpemUgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IG1hZ25pdHVkZSA9IENhcnRlc2lhbjQubWFnbml0dWRlKGNhcnRlc2lhbjExKTsKICAgICAgICByZXN1bHQueCA9IGNhcnRlc2lhbjExLnggLyBtYWduaXR1ZGU7CiAgICAgICAgcmVzdWx0LnkgPSBjYXJ0ZXNpYW4xMS55IC8gbWFnbml0dWRlOwogICAgICAgIHJlc3VsdC56ID0gY2FydGVzaWFuMTEueiAvIG1hZ25pdHVkZTsKICAgICAgICByZXN1bHQudyA9IGNhcnRlc2lhbjExLncgLyBtYWduaXR1ZGU7CiAgICAgICAgaWYgKGlzTmFOKHJlc3VsdC54KSB8fCBpc05hTihyZXN1bHQueSkgfHwgaXNOYU4ocmVzdWx0LnopIHx8IGlzTmFOKHJlc3VsdC53KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm5vcm1hbGl6ZWQgcmVzdWx0IGlzIG5vdCBhIG51bWJlciIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LmRvdCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICByZXR1cm4gbGVmdC54ICogcmlnaHQueCArIGxlZnQueSAqIHJpZ2h0LnkgKyBsZWZ0LnogKiByaWdodC56ICsgbGVmdC53ICogcmlnaHQudzsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC5tdWx0aXBseUNvbXBvbmVudHMgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBsZWZ0LnggKiByaWdodC54OwogICAgICAgIHJlc3VsdC55ID0gbGVmdC55ICogcmlnaHQueTsKICAgICAgICByZXN1bHQueiA9IGxlZnQueiAqIHJpZ2h0Lno7CiAgICAgICAgcmVzdWx0LncgPSBsZWZ0LncgKiByaWdodC53OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQuZGl2aWRlQ29tcG9uZW50cyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IGxlZnQueCAvIHJpZ2h0Lng7CiAgICAgICAgcmVzdWx0LnkgPSBsZWZ0LnkgLyByaWdodC55OwogICAgICAgIHJlc3VsdC56ID0gbGVmdC56IC8gcmlnaHQuejsKICAgICAgICByZXN1bHQudyA9IGxlZnQudyAvIHJpZ2h0Lnc7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC5hZGQgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBsZWZ0LnggKyByaWdodC54OwogICAgICAgIHJlc3VsdC55ID0gbGVmdC55ICsgcmlnaHQueTsKICAgICAgICByZXN1bHQueiA9IGxlZnQueiArIHJpZ2h0Lno7CiAgICAgICAgcmVzdWx0LncgPSBsZWZ0LncgKyByaWdodC53OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQuc3VidHJhY3QgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBsZWZ0LnggLSByaWdodC54OwogICAgICAgIHJlc3VsdC55ID0gbGVmdC55IC0gcmlnaHQueTsKICAgICAgICByZXN1bHQueiA9IGxlZnQueiAtIHJpZ2h0Lno7CiAgICAgICAgcmVzdWx0LncgPSBsZWZ0LncgLSByaWdodC53OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQubXVsdGlwbHlCeVNjYWxhciA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCBzY2FsYXIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGFyIiwgc2NhbGFyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4xMS54ICogc2NhbGFyOwogICAgICAgIHJlc3VsdC55ID0gY2FydGVzaWFuMTEueSAqIHNjYWxhcjsKICAgICAgICByZXN1bHQueiA9IGNhcnRlc2lhbjExLnogKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0LncgPSBjYXJ0ZXNpYW4xMS53ICogc2NhbGFyOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQuZGl2aWRlQnlTY2FsYXIgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgc2NhbGFyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInNjYWxhciIsIHNjYWxhcik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gY2FydGVzaWFuMTEueCAvIHNjYWxhcjsKICAgICAgICByZXN1bHQueSA9IGNhcnRlc2lhbjExLnkgLyBzY2FsYXI7CiAgICAgICAgcmVzdWx0LnogPSBjYXJ0ZXNpYW4xMS56IC8gc2NhbGFyOwogICAgICAgIHJlc3VsdC53ID0gY2FydGVzaWFuMTEudyAvIHNjYWxhcjsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40Lm5lZ2F0ZSA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSAtY2FydGVzaWFuMTEueDsKICAgICAgICByZXN1bHQueSA9IC1jYXJ0ZXNpYW4xMS55OwogICAgICAgIHJlc3VsdC56ID0gLWNhcnRlc2lhbjExLno7CiAgICAgICAgcmVzdWx0LncgPSAtY2FydGVzaWFuMTEudzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LmFicyA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBNYXRoLmFicyhjYXJ0ZXNpYW4xMS54KTsKICAgICAgICByZXN1bHQueSA9IE1hdGguYWJzKGNhcnRlc2lhbjExLnkpOwogICAgICAgIHJlc3VsdC56ID0gTWF0aC5hYnMoY2FydGVzaWFuMTEueik7CiAgICAgICAgcmVzdWx0LncgPSBNYXRoLmFicyhjYXJ0ZXNpYW4xMS53KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBsZXJwU2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuNCgpOwogICAgICBDYXJ0ZXNpYW40LmxlcnAgPSBmdW5jdGlvbihzdGFydCwgZW5kLCB0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInN0YXJ0Iiwgc3RhcnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZW5kIiwgZW5kKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInQiLCB0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgQ2FydGVzaWFuNC5tdWx0aXBseUJ5U2NhbGFyKGVuZCwgdCwgbGVycFNjcmF0Y2gyKTsKICAgICAgICByZXN1bHQgPSBDYXJ0ZXNpYW40Lm11bHRpcGx5QnlTY2FsYXIoc3RhcnQsIDEgLSB0LCByZXN1bHQpOwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW40LmFkZChsZXJwU2NyYXRjaDIsIHJlc3VsdCwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgbW9zdE9ydGhvZ29uYWxBeGlzU2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuNCgpOwogICAgICBDYXJ0ZXNpYW40Lm1vc3RPcnRob2dvbmFsQXhpcyA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgZiA9IENhcnRlc2lhbjQubm9ybWFsaXplKGNhcnRlc2lhbjExLCBtb3N0T3J0aG9nb25hbEF4aXNTY3JhdGNoMik7CiAgICAgICAgQ2FydGVzaWFuNC5hYnMoZiwgZik7CiAgICAgICAgaWYgKGYueCA8PSBmLnkpIHsKICAgICAgICAgIGlmIChmLnggPD0gZi56KSB7CiAgICAgICAgICAgIGlmIChmLnggPD0gZi53KSB7CiAgICAgICAgICAgICAgcmVzdWx0ID0gQ2FydGVzaWFuNC5jbG9uZShDYXJ0ZXNpYW40LlVOSVRfWCwgcmVzdWx0KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXN1bHQgPSBDYXJ0ZXNpYW40LmNsb25lKENhcnRlc2lhbjQuVU5JVF9XLCByZXN1bHQpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKGYueiA8PSBmLncpIHsKICAgICAgICAgICAgcmVzdWx0ID0gQ2FydGVzaWFuNC5jbG9uZShDYXJ0ZXNpYW40LlVOSVRfWiwgcmVzdWx0KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlc3VsdCA9IENhcnRlc2lhbjQuY2xvbmUoQ2FydGVzaWFuNC5VTklUX1csIHJlc3VsdCk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChmLnkgPD0gZi56KSB7CiAgICAgICAgICBpZiAoZi55IDw9IGYudykgewogICAgICAgICAgICByZXN1bHQgPSBDYXJ0ZXNpYW40LmNsb25lKENhcnRlc2lhbjQuVU5JVF9ZLCByZXN1bHQpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVzdWx0ID0gQ2FydGVzaWFuNC5jbG9uZShDYXJ0ZXNpYW40LlVOSVRfVywgcmVzdWx0KTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGYueiA8PSBmLncpIHsKICAgICAgICAgIHJlc3VsdCA9IENhcnRlc2lhbjQuY2xvbmUoQ2FydGVzaWFuNC5VTklUX1osIHJlc3VsdCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdCA9IENhcnRlc2lhbjQuY2xvbmUoQ2FydGVzaWFuNC5VTklUX1csIHJlc3VsdCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQuZXF1YWxzID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICByZXR1cm4gbGVmdCA9PT0gcmlnaHQgfHwgZGVmaW5lZF9kZWZhdWx0KGxlZnQpICYmIGRlZmluZWRfZGVmYXVsdChyaWdodCkgJiYgbGVmdC54ID09PSByaWdodC54ICYmIGxlZnQueSA9PT0gcmlnaHQueSAmJiBsZWZ0LnogPT09IHJpZ2h0LnogJiYgbGVmdC53ID09PSByaWdodC53OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LmVxdWFsc0FycmF5ID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIGFycmF5LCBvZmZzZXQpIHsKICAgICAgICByZXR1cm4gY2FydGVzaWFuMTEueCA9PT0gYXJyYXlbb2Zmc2V0XSAmJiBjYXJ0ZXNpYW4xMS55ID09PSBhcnJheVtvZmZzZXQgKyAxXSAmJiBjYXJ0ZXNpYW4xMS56ID09PSBhcnJheVtvZmZzZXQgKyAyXSAmJiBjYXJ0ZXNpYW4xMS53ID09PSBhcnJheVtvZmZzZXQgKyAzXTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlbGF0aXZlRXBzaWxvbiwgYWJzb2x1dGVFcHNpbG9uKSB7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgbGVmdC54LAogICAgICAgICAgcmlnaHQueCwKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICkgJiYgTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICBsZWZ0LnksCiAgICAgICAgICByaWdodC55LAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIGxlZnQueiwKICAgICAgICAgIHJpZ2h0LnosCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgbGVmdC53LAogICAgICAgICAgcmlnaHQudywKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQuWkVSTyA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjQoMCwgMCwgMCwgMCkpOwogICAgICBDYXJ0ZXNpYW40Lk9ORSA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjQoMSwgMSwgMSwgMSkpOwogICAgICBDYXJ0ZXNpYW40LlVOSVRfWCA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjQoMSwgMCwgMCwgMCkpOwogICAgICBDYXJ0ZXNpYW40LlVOSVRfWSA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjQoMCwgMSwgMCwgMCkpOwogICAgICBDYXJ0ZXNpYW40LlVOSVRfWiA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjQoMCwgMCwgMSwgMCkpOwogICAgICBDYXJ0ZXNpYW40LlVOSVRfVyA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjQoMCwgMCwgMCwgMSkpOwogICAgICBDYXJ0ZXNpYW40LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIHJldHVybiBDYXJ0ZXNpYW40LmNsb25lKHRoaXMsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjQuZXF1YWxzKHRoaXMsIHJpZ2h0KTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC5wcm90b3R5cGUuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKHJpZ2h0LCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIHJldHVybiBDYXJ0ZXNpYW40LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICB0aGlzLAogICAgICAgICAgcmlnaHQsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApOwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBgKCR7dGhpcy54fSwgJHt0aGlzLnl9LCAke3RoaXMuen0sICR7dGhpcy53fSlgOwogICAgICB9OwogICAgICBzY3JhdGNoRjMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KDEpOwogICAgICBzY3JhdGNoVThBcnJheSA9IG5ldyBVaW50OEFycmF5KHNjcmF0Y2hGMzJBcnJheS5idWZmZXIpOwogICAgICB0ZXN0VTMyID0gbmV3IFVpbnQzMkFycmF5KFsyODc0NTQwMjBdKTsKICAgICAgdGVzdFU4ID0gbmV3IFVpbnQ4QXJyYXkodGVzdFUzMi5idWZmZXIpOwogICAgICBsaXR0bGVFbmRpYW4gPSB0ZXN0VThbMF0gPT09IDY4OwogICAgICBDYXJ0ZXNpYW40LnBhY2tGbG9hdCA9IGZ1bmN0aW9uKHZhbHVlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBDYXJ0ZXNpYW40KCk7CiAgICAgICAgfQogICAgICAgIHNjcmF0Y2hGMzJBcnJheVswXSA9IHZhbHVlOwogICAgICAgIGlmIChsaXR0bGVFbmRpYW4pIHsKICAgICAgICAgIHJlc3VsdC54ID0gc2NyYXRjaFU4QXJyYXlbMF07CiAgICAgICAgICByZXN1bHQueSA9IHNjcmF0Y2hVOEFycmF5WzFdOwogICAgICAgICAgcmVzdWx0LnogPSBzY3JhdGNoVThBcnJheVsyXTsKICAgICAgICAgIHJlc3VsdC53ID0gc2NyYXRjaFU4QXJyYXlbM107CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdC54ID0gc2NyYXRjaFU4QXJyYXlbM107CiAgICAgICAgICByZXN1bHQueSA9IHNjcmF0Y2hVOEFycmF5WzJdOwogICAgICAgICAgcmVzdWx0LnogPSBzY3JhdGNoVThBcnJheVsxXTsKICAgICAgICAgIHJlc3VsdC53ID0gc2NyYXRjaFU4QXJyYXlbMF07CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQudW5wYWNrRmxvYXQgPSBmdW5jdGlvbihwYWNrZWRGbG9hdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicGFja2VkRmxvYXQiLCBwYWNrZWRGbG9hdCk7CiAgICAgICAgaWYgKGxpdHRsZUVuZGlhbikgewogICAgICAgICAgc2NyYXRjaFU4QXJyYXlbMF0gPSBwYWNrZWRGbG9hdC54OwogICAgICAgICAgc2NyYXRjaFU4QXJyYXlbMV0gPSBwYWNrZWRGbG9hdC55OwogICAgICAgICAgc2NyYXRjaFU4QXJyYXlbMl0gPSBwYWNrZWRGbG9hdC56OwogICAgICAgICAgc2NyYXRjaFU4QXJyYXlbM10gPSBwYWNrZWRGbG9hdC53OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzY3JhdGNoVThBcnJheVswXSA9IHBhY2tlZEZsb2F0Lnc7CiAgICAgICAgICBzY3JhdGNoVThBcnJheVsxXSA9IHBhY2tlZEZsb2F0Lno7CiAgICAgICAgICBzY3JhdGNoVThBcnJheVsyXSA9IHBhY2tlZEZsb2F0Lnk7CiAgICAgICAgICBzY3JhdGNoVThBcnJheVszXSA9IHBhY2tlZEZsb2F0Lng7CiAgICAgICAgfQogICAgICAgIHJldHVybiBzY3JhdGNoRjMyQXJyYXlbMF07CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjRfZGVmYXVsdCA9IENhcnRlc2lhbjQ7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9SdW50aW1lRXJyb3IuanMKICBmdW5jdGlvbiBSdW50aW1lRXJyb3IobWVzc2FnZSkgewogICAgdGhpcy5uYW1lID0gIlJ1bnRpbWVFcnJvciI7CiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlOwogICAgbGV0IHN0YWNrOwogICAgdHJ5IHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHN0YWNrID0gZS5zdGFjazsKICAgIH0KICAgIHRoaXMuc3RhY2sgPSBzdGFjazsKICB9CiAgdmFyIFJ1bnRpbWVFcnJvcl9kZWZhdWx0OwogIHZhciBpbml0X1J1bnRpbWVFcnJvciA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUnVudGltZUVycm9yLmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoT2JqZWN0LmNyZWF0ZSkpIHsKICAgICAgICBSdW50aW1lRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpOwogICAgICAgIFJ1bnRpbWVFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBSdW50aW1lRXJyb3I7CiAgICAgIH0KICAgICAgUnVudGltZUVycm9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgIGxldCBzdHIgPSBgJHt0aGlzLm5hbWV9OiAke3RoaXMubWVzc2FnZX1gOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQodGhpcy5zdGFjaykpIHsKICAgICAgICAgIHN0ciArPSBgCiR7dGhpcy5zdGFjay50b1N0cmluZygpfWA7CiAgICAgICAgfQogICAgICAgIHJldHVybiBzdHI7CiAgICAgIH07CiAgICAgIFJ1bnRpbWVFcnJvcl9kZWZhdWx0ID0gUnVudGltZUVycm9yOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvTWF0cml4NC5qcwogIGZ1bmN0aW9uIE1hdHJpeDQoY29sdW1uMFJvdzAsIGNvbHVtbjFSb3cwLCBjb2x1bW4yUm93MCwgY29sdW1uM1JvdzAsIGNvbHVtbjBSb3cxLCBjb2x1bW4xUm93MSwgY29sdW1uMlJvdzEsIGNvbHVtbjNSb3cxLCBjb2x1bW4wUm93MiwgY29sdW1uMVJvdzIsIGNvbHVtbjJSb3cyLCBjb2x1bW4zUm93MiwgY29sdW1uMFJvdzMsIGNvbHVtbjFSb3czLCBjb2x1bW4yUm93MywgY29sdW1uM1JvdzMpIHsKICAgIHRoaXNbMF0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4wUm93MCwgMCk7CiAgICB0aGlzWzFdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uMFJvdzEsIDApOwogICAgdGhpc1syXSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjBSb3cyLCAwKTsKICAgIHRoaXNbM10gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4wUm93MywgMCk7CiAgICB0aGlzWzRdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uMVJvdzAsIDApOwogICAgdGhpc1s1XSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjFSb3cxLCAwKTsKICAgIHRoaXNbNl0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4xUm93MiwgMCk7CiAgICB0aGlzWzddID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uMVJvdzMsIDApOwogICAgdGhpc1s4XSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjJSb3cwLCAwKTsKICAgIHRoaXNbOV0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4yUm93MSwgMCk7CiAgICB0aGlzWzEwXSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjJSb3cyLCAwKTsKICAgIHRoaXNbMTFdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uMlJvdzMsIDApOwogICAgdGhpc1sxMl0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4zUm93MCwgMCk7CiAgICB0aGlzWzEzXSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjNSb3cxLCAwKTsKICAgIHRoaXNbMTRdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uM1JvdzIsIDApOwogICAgdGhpc1sxNV0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4zUm93MywgMCk7CiAgfQogIHZhciBmcm9tQ2FtZXJhRiwgZnJvbUNhbWVyYVIsIGZyb21DYW1lcmFVLCBzY2FsZVNjcmF0Y2gxMiwgc2NhbGVTY3JhdGNoMjIsIHNjcmF0Y2hDb2x1bW4yLCBzY2FsZVNjcmF0Y2gzMiwgc2NhbGVTY3JhdGNoNDIsIHNjYWxlU2NyYXRjaDUyLCBzY3JhdGNoSW52ZXJzZVJvdGF0aW9uLCBzY3JhdGNoTWF0cml4M1plcm8sIHNjcmF0Y2hCb3R0b21Sb3csIHNjcmF0Y2hFeHBlY3RlZEJvdHRvbVJvdywgc2NyYXRjaFRyYW5zcG9zZU1hdHJpeDIsIE1hdHJpeDRfZGVmYXVsdDsKICB2YXIgaW5pdF9NYXRyaXg0ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9NYXRyaXg0LmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuNCgpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDMoKTsKICAgICAgaW5pdF9SdW50aW1lRXJyb3IoKTsKICAgICAgTWF0cml4NC5wYWNrZWRMZW5ndGggPSAxNjsKICAgICAgTWF0cml4NC5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbMF07CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzFdOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVsyXTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbM107CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzRdOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVs1XTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbNl07CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzddOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVs4XTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbOV07CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzEwXTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbMTFdOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVsxMl07CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzEzXTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbMTRdOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gdmFsdWVbMTVdOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgTWF0cml4NC51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IE1hdHJpeDQoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbMV0gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdFsyXSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzNdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbNF0gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdFs1XSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzZdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbN10gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdFs4XSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzldID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbMTBdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbMTFdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbMTJdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbMTNdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbMTRdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbMTVdID0gYXJyYXlbc3RhcnRpbmdJbmRleF07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5wYWNrQXJyYXkgPSBmdW5jdGlvbihhcnJheSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGg7CiAgICAgICAgY29uc3QgcmVzdWx0TGVuZ3RoID0gbGVuZ3RoICogMTY7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEFycmF5KHJlc3VsdExlbmd0aCk7CiAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShyZXN1bHQpICYmIHJlc3VsdC5sZW5ndGggIT09IHJlc3VsdExlbmd0aCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJJZiByZXN1bHQgaXMgYSB0eXBlZCBhcnJheSwgaXQgbXVzdCBoYXZlIGV4YWN0bHkgYXJyYXkubGVuZ3RoICogMTYgZWxlbWVudHMiCiAgICAgICAgICApOwogICAgICAgIH0gZWxzZSBpZiAocmVzdWx0Lmxlbmd0aCAhPT0gcmVzdWx0TGVuZ3RoKSB7CiAgICAgICAgICByZXN1bHQubGVuZ3RoID0gcmVzdWx0TGVuZ3RoOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICBNYXRyaXg0LnBhY2soYXJyYXlbaV0sIHJlc3VsdCwgaSAqIDE2KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC51bnBhY2tBcnJheSA9IGZ1bmN0aW9uKGFycmF5LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJhcnJheS5sZW5ndGgiLCBhcnJheS5sZW5ndGgsIDE2KTsKICAgICAgICBpZiAoYXJyYXkubGVuZ3RoICUgMTYgIT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBsZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGg7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEFycmF5KGxlbmd0aCAvIDE2KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IGxlbmd0aCAvIDE2OwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxNikgewogICAgICAgICAgY29uc3QgaW5kZXggPSBpIC8gMTY7CiAgICAgICAgICByZXN1bHRbaW5kZXhdID0gTWF0cml4NC51bnBhY2soYXJyYXksIGksIHJlc3VsdFtpbmRleF0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LmNsb25lID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChtYXRyaXgpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IE1hdHJpeDQoCiAgICAgICAgICAgIG1hdHJpeFswXSwKICAgICAgICAgICAgbWF0cml4WzRdLAogICAgICAgICAgICBtYXRyaXhbOF0sCiAgICAgICAgICAgIG1hdHJpeFsxMl0sCiAgICAgICAgICAgIG1hdHJpeFsxXSwKICAgICAgICAgICAgbWF0cml4WzVdLAogICAgICAgICAgICBtYXRyaXhbOV0sCiAgICAgICAgICAgIG1hdHJpeFsxM10sCiAgICAgICAgICAgIG1hdHJpeFsyXSwKICAgICAgICAgICAgbWF0cml4WzZdLAogICAgICAgICAgICBtYXRyaXhbMTBdLAogICAgICAgICAgICBtYXRyaXhbMTRdLAogICAgICAgICAgICBtYXRyaXhbM10sCiAgICAgICAgICAgIG1hdHJpeFs3XSwKICAgICAgICAgICAgbWF0cml4WzExXSwKICAgICAgICAgICAgbWF0cml4WzE1XQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gbWF0cml4WzBdOwogICAgICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXTsKICAgICAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl07CiAgICAgICAgcmVzdWx0WzNdID0gbWF0cml4WzNdOwogICAgICAgIHJlc3VsdFs0XSA9IG1hdHJpeFs0XTsKICAgICAgICByZXN1bHRbNV0gPSBtYXRyaXhbNV07CiAgICAgICAgcmVzdWx0WzZdID0gbWF0cml4WzZdOwogICAgICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs3XTsKICAgICAgICByZXN1bHRbOF0gPSBtYXRyaXhbOF07CiAgICAgICAgcmVzdWx0WzldID0gbWF0cml4WzldOwogICAgICAgIHJlc3VsdFsxMF0gPSBtYXRyaXhbMTBdOwogICAgICAgIHJlc3VsdFsxMV0gPSBtYXRyaXhbMTFdOwogICAgICAgIHJlc3VsdFsxMl0gPSBtYXRyaXhbMTJdOwogICAgICAgIHJlc3VsdFsxM10gPSBtYXRyaXhbMTNdOwogICAgICAgIHJlc3VsdFsxNF0gPSBtYXRyaXhbMTRdOwogICAgICAgIHJlc3VsdFsxNV0gPSBtYXRyaXhbMTVdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuZnJvbUFycmF5ID0gTWF0cml4NC51bnBhY2s7CiAgICAgIE1hdHJpeDQuZnJvbUNvbHVtbk1ham9yQXJyYXkgPSBmdW5jdGlvbih2YWx1ZXMsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidmFsdWVzIiwgdmFsdWVzKTsKICAgICAgICByZXR1cm4gTWF0cml4NC5jbG9uZSh2YWx1ZXMsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuZnJvbVJvd01ham9yQXJyYXkgPSBmdW5jdGlvbih2YWx1ZXMsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidmFsdWVzIiwgdmFsdWVzKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IE1hdHJpeDQoCiAgICAgICAgICAgIHZhbHVlc1swXSwKICAgICAgICAgICAgdmFsdWVzWzFdLAogICAgICAgICAgICB2YWx1ZXNbMl0sCiAgICAgICAgICAgIHZhbHVlc1szXSwKICAgICAgICAgICAgdmFsdWVzWzRdLAogICAgICAgICAgICB2YWx1ZXNbNV0sCiAgICAgICAgICAgIHZhbHVlc1s2XSwKICAgICAgICAgICAgdmFsdWVzWzddLAogICAgICAgICAgICB2YWx1ZXNbOF0sCiAgICAgICAgICAgIHZhbHVlc1s5XSwKICAgICAgICAgICAgdmFsdWVzWzEwXSwKICAgICAgICAgICAgdmFsdWVzWzExXSwKICAgICAgICAgICAgdmFsdWVzWzEyXSwKICAgICAgICAgICAgdmFsdWVzWzEzXSwKICAgICAgICAgICAgdmFsdWVzWzE0XSwKICAgICAgICAgICAgdmFsdWVzWzE1XQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gdmFsdWVzWzBdOwogICAgICAgIHJlc3VsdFsxXSA9IHZhbHVlc1s0XTsKICAgICAgICByZXN1bHRbMl0gPSB2YWx1ZXNbOF07CiAgICAgICAgcmVzdWx0WzNdID0gdmFsdWVzWzEyXTsKICAgICAgICByZXN1bHRbNF0gPSB2YWx1ZXNbMV07CiAgICAgICAgcmVzdWx0WzVdID0gdmFsdWVzWzVdOwogICAgICAgIHJlc3VsdFs2XSA9IHZhbHVlc1s5XTsKICAgICAgICByZXN1bHRbN10gPSB2YWx1ZXNbMTNdOwogICAgICAgIHJlc3VsdFs4XSA9IHZhbHVlc1syXTsKICAgICAgICByZXN1bHRbOV0gPSB2YWx1ZXNbNl07CiAgICAgICAgcmVzdWx0WzEwXSA9IHZhbHVlc1sxMF07CiAgICAgICAgcmVzdWx0WzExXSA9IHZhbHVlc1sxNF07CiAgICAgICAgcmVzdWx0WzEyXSA9IHZhbHVlc1szXTsKICAgICAgICByZXN1bHRbMTNdID0gdmFsdWVzWzddOwogICAgICAgIHJlc3VsdFsxNF0gPSB2YWx1ZXNbMTFdOwogICAgICAgIHJlc3VsdFsxNV0gPSB2YWx1ZXNbMTVdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24gPSBmdW5jdGlvbihyb3RhdGlvbiwgdHJhbnNsYXRpb24yLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJvdGF0aW9uIiwgcm90YXRpb24pOwogICAgICAgIHRyYW5zbGF0aW9uMiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHRyYW5zbGF0aW9uMiwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgTWF0cml4NCgKICAgICAgICAgICAgcm90YXRpb25bMF0sCiAgICAgICAgICAgIHJvdGF0aW9uWzNdLAogICAgICAgICAgICByb3RhdGlvbls2XSwKICAgICAgICAgICAgdHJhbnNsYXRpb24yLngsCiAgICAgICAgICAgIHJvdGF0aW9uWzFdLAogICAgICAgICAgICByb3RhdGlvbls0XSwKICAgICAgICAgICAgcm90YXRpb25bN10sCiAgICAgICAgICAgIHRyYW5zbGF0aW9uMi55LAogICAgICAgICAgICByb3RhdGlvblsyXSwKICAgICAgICAgICAgcm90YXRpb25bNV0sCiAgICAgICAgICAgIHJvdGF0aW9uWzhdLAogICAgICAgICAgICB0cmFuc2xhdGlvbjIueiwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgMQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gcm90YXRpb25bMF07CiAgICAgICAgcmVzdWx0WzFdID0gcm90YXRpb25bMV07CiAgICAgICAgcmVzdWx0WzJdID0gcm90YXRpb25bMl07CiAgICAgICAgcmVzdWx0WzNdID0gMDsKICAgICAgICByZXN1bHRbNF0gPSByb3RhdGlvblszXTsKICAgICAgICByZXN1bHRbNV0gPSByb3RhdGlvbls0XTsKICAgICAgICByZXN1bHRbNl0gPSByb3RhdGlvbls1XTsKICAgICAgICByZXN1bHRbN10gPSAwOwogICAgICAgIHJlc3VsdFs4XSA9IHJvdGF0aW9uWzZdOwogICAgICAgIHJlc3VsdFs5XSA9IHJvdGF0aW9uWzddOwogICAgICAgIHJlc3VsdFsxMF0gPSByb3RhdGlvbls4XTsKICAgICAgICByZXN1bHRbMTFdID0gMDsKICAgICAgICByZXN1bHRbMTJdID0gdHJhbnNsYXRpb24yLng7CiAgICAgICAgcmVzdWx0WzEzXSA9IHRyYW5zbGF0aW9uMi55OwogICAgICAgIHJlc3VsdFsxNF0gPSB0cmFuc2xhdGlvbjIuejsKICAgICAgICByZXN1bHRbMTVdID0gMTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LmZyb21UcmFuc2xhdGlvblF1YXRlcm5pb25Sb3RhdGlvblNjYWxlID0gZnVuY3Rpb24odHJhbnNsYXRpb24yLCByb3RhdGlvbiwgc2NhbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidHJhbnNsYXRpb24iLCB0cmFuc2xhdGlvbjIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicm90YXRpb24iLCByb3RhdGlvbik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzY2FsZSIsIHNjYWxlKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgTWF0cml4NCgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBzY2FsZVggPSBzY2FsZS54OwogICAgICAgIGNvbnN0IHNjYWxlWSA9IHNjYWxlLnk7CiAgICAgICAgY29uc3Qgc2NhbGVaID0gc2NhbGUuejsKICAgICAgICBjb25zdCB4MiA9IHJvdGF0aW9uLnggKiByb3RhdGlvbi54OwogICAgICAgIGNvbnN0IHh5ID0gcm90YXRpb24ueCAqIHJvdGF0aW9uLnk7CiAgICAgICAgY29uc3QgeHogPSByb3RhdGlvbi54ICogcm90YXRpb24uejsKICAgICAgICBjb25zdCB4dyA9IHJvdGF0aW9uLnggKiByb3RhdGlvbi53OwogICAgICAgIGNvbnN0IHkyID0gcm90YXRpb24ueSAqIHJvdGF0aW9uLnk7CiAgICAgICAgY29uc3QgeXogPSByb3RhdGlvbi55ICogcm90YXRpb24uejsKICAgICAgICBjb25zdCB5dyA9IHJvdGF0aW9uLnkgKiByb3RhdGlvbi53OwogICAgICAgIGNvbnN0IHoyID0gcm90YXRpb24ueiAqIHJvdGF0aW9uLno7CiAgICAgICAgY29uc3QgencgPSByb3RhdGlvbi56ICogcm90YXRpb24udzsKICAgICAgICBjb25zdCB3MiA9IHJvdGF0aW9uLncgKiByb3RhdGlvbi53OwogICAgICAgIGNvbnN0IG0wMCA9IHgyIC0geTIgLSB6MiArIHcyOwogICAgICAgIGNvbnN0IG0wMSA9IDIgKiAoeHkgLSB6dyk7CiAgICAgICAgY29uc3QgbTAyID0gMiAqICh4eiArIHl3KTsKICAgICAgICBjb25zdCBtMTAgPSAyICogKHh5ICsgencpOwogICAgICAgIGNvbnN0IG0xMSA9IC14MiArIHkyIC0gejIgKyB3MjsKICAgICAgICBjb25zdCBtMTIgPSAyICogKHl6IC0geHcpOwogICAgICAgIGNvbnN0IG0yMCA9IDIgKiAoeHogLSB5dyk7CiAgICAgICAgY29uc3QgbTIxID0gMiAqICh5eiArIHh3KTsKICAgICAgICBjb25zdCBtMjIgPSAteDIgLSB5MiArIHoyICsgdzI7CiAgICAgICAgcmVzdWx0WzBdID0gbTAwICogc2NhbGVYOwogICAgICAgIHJlc3VsdFsxXSA9IG0xMCAqIHNjYWxlWDsKICAgICAgICByZXN1bHRbMl0gPSBtMjAgKiBzY2FsZVg7CiAgICAgICAgcmVzdWx0WzNdID0gMDsKICAgICAgICByZXN1bHRbNF0gPSBtMDEgKiBzY2FsZVk7CiAgICAgICAgcmVzdWx0WzVdID0gbTExICogc2NhbGVZOwogICAgICAgIHJlc3VsdFs2XSA9IG0yMSAqIHNjYWxlWTsKICAgICAgICByZXN1bHRbN10gPSAwOwogICAgICAgIHJlc3VsdFs4XSA9IG0wMiAqIHNjYWxlWjsKICAgICAgICByZXN1bHRbOV0gPSBtMTIgKiBzY2FsZVo7CiAgICAgICAgcmVzdWx0WzEwXSA9IG0yMiAqIHNjYWxlWjsKICAgICAgICByZXN1bHRbMTFdID0gMDsKICAgICAgICByZXN1bHRbMTJdID0gdHJhbnNsYXRpb24yLng7CiAgICAgICAgcmVzdWx0WzEzXSA9IHRyYW5zbGF0aW9uMi55OwogICAgICAgIHJlc3VsdFsxNF0gPSB0cmFuc2xhdGlvbjIuejsKICAgICAgICByZXN1bHRbMTVdID0gMTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LmZyb21UcmFuc2xhdGlvblJvdGF0aW9uU2NhbGUgPSBmdW5jdGlvbih0cmFuc2xhdGlvblJvdGF0aW9uU2NhbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidHJhbnNsYXRpb25Sb3RhdGlvblNjYWxlIiwgdHJhbnNsYXRpb25Sb3RhdGlvblNjYWxlKTsKICAgICAgICByZXR1cm4gTWF0cml4NC5mcm9tVHJhbnNsYXRpb25RdWF0ZXJuaW9uUm90YXRpb25TY2FsZSgKICAgICAgICAgIHRyYW5zbGF0aW9uUm90YXRpb25TY2FsZS50cmFuc2xhdGlvbiwKICAgICAgICAgIHRyYW5zbGF0aW9uUm90YXRpb25TY2FsZS5yb3RhdGlvbiwKICAgICAgICAgIHRyYW5zbGF0aW9uUm90YXRpb25TY2FsZS5zY2FsZSwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuZnJvbVRyYW5zbGF0aW9uID0gZnVuY3Rpb24odHJhbnNsYXRpb24yLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInRyYW5zbGF0aW9uIiwgdHJhbnNsYXRpb24yKTsKICAgICAgICByZXR1cm4gTWF0cml4NC5mcm9tUm90YXRpb25UcmFuc2xhdGlvbihNYXRyaXgzX2RlZmF1bHQuSURFTlRJVFksIHRyYW5zbGF0aW9uMiwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgTWF0cml4NC5mcm9tU2NhbGUgPSBmdW5jdGlvbihzY2FsZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzY2FsZSIsIHNjYWxlKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IE1hdHJpeDQoCiAgICAgICAgICAgIHNjYWxlLngsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIHNjYWxlLnksCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIHNjYWxlLnosCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDEKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IHNjYWxlLng7CiAgICAgICAgcmVzdWx0WzFdID0gMDsKICAgICAgICByZXN1bHRbMl0gPSAwOwogICAgICAgIHJlc3VsdFszXSA9IDA7CiAgICAgICAgcmVzdWx0WzRdID0gMDsKICAgICAgICByZXN1bHRbNV0gPSBzY2FsZS55OwogICAgICAgIHJlc3VsdFs2XSA9IDA7CiAgICAgICAgcmVzdWx0WzddID0gMDsKICAgICAgICByZXN1bHRbOF0gPSAwOwogICAgICAgIHJlc3VsdFs5XSA9IDA7CiAgICAgICAgcmVzdWx0WzEwXSA9IHNjYWxlLno7CiAgICAgICAgcmVzdWx0WzExXSA9IDA7CiAgICAgICAgcmVzdWx0WzEyXSA9IDA7CiAgICAgICAgcmVzdWx0WzEzXSA9IDA7CiAgICAgICAgcmVzdWx0WzE0XSA9IDA7CiAgICAgICAgcmVzdWx0WzE1XSA9IDE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5mcm9tVW5pZm9ybVNjYWxlID0gZnVuY3Rpb24oc2NhbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGUiLCBzY2FsZSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXg0KAogICAgICAgICAgICBzY2FsZSwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgc2NhbGUsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIHNjYWxlLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAxCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBzY2FsZTsKICAgICAgICByZXN1bHRbMV0gPSAwOwogICAgICAgIHJlc3VsdFsyXSA9IDA7CiAgICAgICAgcmVzdWx0WzNdID0gMDsKICAgICAgICByZXN1bHRbNF0gPSAwOwogICAgICAgIHJlc3VsdFs1XSA9IHNjYWxlOwogICAgICAgIHJlc3VsdFs2XSA9IDA7CiAgICAgICAgcmVzdWx0WzddID0gMDsKICAgICAgICByZXN1bHRbOF0gPSAwOwogICAgICAgIHJlc3VsdFs5XSA9IDA7CiAgICAgICAgcmVzdWx0WzEwXSA9IHNjYWxlOwogICAgICAgIHJlc3VsdFsxMV0gPSAwOwogICAgICAgIHJlc3VsdFsxMl0gPSAwOwogICAgICAgIHJlc3VsdFsxM10gPSAwOwogICAgICAgIHJlc3VsdFsxNF0gPSAwOwogICAgICAgIHJlc3VsdFsxNV0gPSAxOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuZnJvbVJvdGF0aW9uID0gZnVuY3Rpb24ocm90YXRpb24sIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicm90YXRpb24iLCByb3RhdGlvbik7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IE1hdHJpeDQoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gcm90YXRpb25bMF07CiAgICAgICAgcmVzdWx0WzFdID0gcm90YXRpb25bMV07CiAgICAgICAgcmVzdWx0WzJdID0gcm90YXRpb25bMl07CiAgICAgICAgcmVzdWx0WzNdID0gMDsKICAgICAgICByZXN1bHRbNF0gPSByb3RhdGlvblszXTsKICAgICAgICByZXN1bHRbNV0gPSByb3RhdGlvbls0XTsKICAgICAgICByZXN1bHRbNl0gPSByb3RhdGlvbls1XTsKICAgICAgICByZXN1bHRbN10gPSAwOwogICAgICAgIHJlc3VsdFs4XSA9IHJvdGF0aW9uWzZdOwogICAgICAgIHJlc3VsdFs5XSA9IHJvdGF0aW9uWzddOwogICAgICAgIHJlc3VsdFsxMF0gPSByb3RhdGlvbls4XTsKICAgICAgICByZXN1bHRbMTFdID0gMDsKICAgICAgICByZXN1bHRbMTJdID0gMDsKICAgICAgICByZXN1bHRbMTNdID0gMDsKICAgICAgICByZXN1bHRbMTRdID0gMDsKICAgICAgICByZXN1bHRbMTVdID0gMTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBmcm9tQ2FtZXJhRiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZnJvbUNhbWVyYVIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZyb21DYW1lcmFVID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBNYXRyaXg0LmZyb21DYW1lcmEgPSBmdW5jdGlvbihjYW1lcmEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FtZXJhIiwgY2FtZXJhKTsKICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGNhbWVyYS5wb3NpdGlvbjsKICAgICAgICBjb25zdCBkaXJlY3Rpb24yID0gY2FtZXJhLmRpcmVjdGlvbjsKICAgICAgICBjb25zdCB1cCA9IGNhbWVyYS51cDsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhbWVyYS5wb3NpdGlvbiIsIHBvc2l0aW9uKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhbWVyYS5kaXJlY3Rpb24iLCBkaXJlY3Rpb24yKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhbWVyYS51cCIsIHVwKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGRpcmVjdGlvbjIsIGZyb21DYW1lcmFGKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKGZyb21DYW1lcmFGLCB1cCwgZnJvbUNhbWVyYVIpLAogICAgICAgICAgZnJvbUNhbWVyYVIKICAgICAgICApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoZnJvbUNhbWVyYVIsIGZyb21DYW1lcmFGLCBmcm9tQ2FtZXJhVSksCiAgICAgICAgICBmcm9tQ2FtZXJhVQogICAgICAgICk7CiAgICAgICAgY29uc3Qgc1ggPSBmcm9tQ2FtZXJhUi54OwogICAgICAgIGNvbnN0IHNZID0gZnJvbUNhbWVyYVIueTsKICAgICAgICBjb25zdCBzWiA9IGZyb21DYW1lcmFSLno7CiAgICAgICAgY29uc3QgZlggPSBmcm9tQ2FtZXJhRi54OwogICAgICAgIGNvbnN0IGZZID0gZnJvbUNhbWVyYUYueTsKICAgICAgICBjb25zdCBmWiA9IGZyb21DYW1lcmFGLno7CiAgICAgICAgY29uc3QgdVggPSBmcm9tQ2FtZXJhVS54OwogICAgICAgIGNvbnN0IHVZID0gZnJvbUNhbWVyYVUueTsKICAgICAgICBjb25zdCB1WiA9IGZyb21DYW1lcmFVLno7CiAgICAgICAgY29uc3QgcG9zaXRpb25YID0gcG9zaXRpb24ueDsKICAgICAgICBjb25zdCBwb3NpdGlvblkgPSBwb3NpdGlvbi55OwogICAgICAgIGNvbnN0IHBvc2l0aW9uWiA9IHBvc2l0aW9uLno7CiAgICAgICAgY29uc3QgdDAgPSBzWCAqIC1wb3NpdGlvblggKyBzWSAqIC1wb3NpdGlvblkgKyBzWiAqIC1wb3NpdGlvblo7CiAgICAgICAgY29uc3QgdDEgPSB1WCAqIC1wb3NpdGlvblggKyB1WSAqIC1wb3NpdGlvblkgKyB1WiAqIC1wb3NpdGlvblo7CiAgICAgICAgY29uc3QgdDIgPSBmWCAqIHBvc2l0aW9uWCArIGZZICogcG9zaXRpb25ZICsgZlogKiBwb3NpdGlvblo7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXg0KAogICAgICAgICAgICBzWCwKICAgICAgICAgICAgc1ksCiAgICAgICAgICAgIHNaLAogICAgICAgICAgICB0MCwKICAgICAgICAgICAgdVgsCiAgICAgICAgICAgIHVZLAogICAgICAgICAgICB1WiwKICAgICAgICAgICAgdDEsCiAgICAgICAgICAgIC1mWCwKICAgICAgICAgICAgLWZZLAogICAgICAgICAgICAtZlosCiAgICAgICAgICAgIHQyLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAxCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBzWDsKICAgICAgICByZXN1bHRbMV0gPSB1WDsKICAgICAgICByZXN1bHRbMl0gPSAtZlg7CiAgICAgICAgcmVzdWx0WzNdID0gMDsKICAgICAgICByZXN1bHRbNF0gPSBzWTsKICAgICAgICByZXN1bHRbNV0gPSB1WTsKICAgICAgICByZXN1bHRbNl0gPSAtZlk7CiAgICAgICAgcmVzdWx0WzddID0gMDsKICAgICAgICByZXN1bHRbOF0gPSBzWjsKICAgICAgICByZXN1bHRbOV0gPSB1WjsKICAgICAgICByZXN1bHRbMTBdID0gLWZaOwogICAgICAgIHJlc3VsdFsxMV0gPSAwOwogICAgICAgIHJlc3VsdFsxMl0gPSB0MDsKICAgICAgICByZXN1bHRbMTNdID0gdDE7CiAgICAgICAgcmVzdWx0WzE0XSA9IHQyOwogICAgICAgIHJlc3VsdFsxNV0gPSAxOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuY29tcHV0ZVBlcnNwZWN0aXZlRmllbGRPZlZpZXcgPSBmdW5jdGlvbihmb3ZZLCBhc3BlY3RSYXRpbywgbmVhciwgZmFyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW4oImZvdlkiLCBmb3ZZLCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW4oImZvdlkiLCBmb3ZZLCBNYXRoLlBJKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW4oIm5lYXIiLCBuZWFyLCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW4oImZhciIsIGZhciwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IGJvdHRvbSA9IE1hdGgudGFuKGZvdlkgKiAwLjUpOwogICAgICAgIGNvbnN0IGNvbHVtbjFSb3cxID0gMSAvIGJvdHRvbTsKICAgICAgICBjb25zdCBjb2x1bW4wUm93MCA9IGNvbHVtbjFSb3cxIC8gYXNwZWN0UmF0aW87CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzIgPSAoZmFyICsgbmVhcikgLyAobmVhciAtIGZhcik7CiAgICAgICAgY29uc3QgY29sdW1uM1JvdzIgPSAyICogZmFyICogbmVhciAvIChuZWFyIC0gZmFyKTsKICAgICAgICByZXN1bHRbMF0gPSBjb2x1bW4wUm93MDsKICAgICAgICByZXN1bHRbMV0gPSAwOwogICAgICAgIHJlc3VsdFsyXSA9IDA7CiAgICAgICAgcmVzdWx0WzNdID0gMDsKICAgICAgICByZXN1bHRbNF0gPSAwOwogICAgICAgIHJlc3VsdFs1XSA9IGNvbHVtbjFSb3cxOwogICAgICAgIHJlc3VsdFs2XSA9IDA7CiAgICAgICAgcmVzdWx0WzddID0gMDsKICAgICAgICByZXN1bHRbOF0gPSAwOwogICAgICAgIHJlc3VsdFs5XSA9IDA7CiAgICAgICAgcmVzdWx0WzEwXSA9IGNvbHVtbjJSb3cyOwogICAgICAgIHJlc3VsdFsxMV0gPSAtMTsKICAgICAgICByZXN1bHRbMTJdID0gMDsKICAgICAgICByZXN1bHRbMTNdID0gMDsKICAgICAgICByZXN1bHRbMTRdID0gY29sdW1uM1JvdzI7CiAgICAgICAgcmVzdWx0WzE1XSA9IDA7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5jb21wdXRlT3J0aG9ncmFwaGljT2ZmQ2VudGVyID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJib3R0b20iLCBib3R0b20pOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigidG9wIiwgdG9wKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoIm5lYXIiLCBuZWFyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImZhciIsIGZhcik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGxldCBhMyA9IDEgLyAocmlnaHQgLSBsZWZ0KTsKICAgICAgICBsZXQgYiA9IDEgLyAodG9wIC0gYm90dG9tKTsKICAgICAgICBsZXQgYyA9IDEgLyAoZmFyIC0gbmVhcik7CiAgICAgICAgY29uc3QgdHggPSAtKHJpZ2h0ICsgbGVmdCkgKiBhMzsKICAgICAgICBjb25zdCB0eSA9IC0odG9wICsgYm90dG9tKSAqIGI7CiAgICAgICAgY29uc3QgdHogPSAtKGZhciArIG5lYXIpICogYzsKICAgICAgICBhMyAqPSAyOwogICAgICAgIGIgKj0gMjsKICAgICAgICBjICo9IC0yOwogICAgICAgIHJlc3VsdFswXSA9IGEzOwogICAgICAgIHJlc3VsdFsxXSA9IDA7CiAgICAgICAgcmVzdWx0WzJdID0gMDsKICAgICAgICByZXN1bHRbM10gPSAwOwogICAgICAgIHJlc3VsdFs0XSA9IDA7CiAgICAgICAgcmVzdWx0WzVdID0gYjsKICAgICAgICByZXN1bHRbNl0gPSAwOwogICAgICAgIHJlc3VsdFs3XSA9IDA7CiAgICAgICAgcmVzdWx0WzhdID0gMDsKICAgICAgICByZXN1bHRbOV0gPSAwOwogICAgICAgIHJlc3VsdFsxMF0gPSBjOwogICAgICAgIHJlc3VsdFsxMV0gPSAwOwogICAgICAgIHJlc3VsdFsxMl0gPSB0eDsKICAgICAgICByZXN1bHRbMTNdID0gdHk7CiAgICAgICAgcmVzdWx0WzE0XSA9IHR6OwogICAgICAgIHJlc3VsdFsxNV0gPSAxOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuY29tcHV0ZVBlcnNwZWN0aXZlT2ZmQ2VudGVyID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJib3R0b20iLCBib3R0b20pOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigidG9wIiwgdG9wKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoIm5lYXIiLCBuZWFyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImZhciIsIGZhcik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3cwID0gMiAqIG5lYXIgLyAocmlnaHQgLSBsZWZ0KTsKICAgICAgICBjb25zdCBjb2x1bW4xUm93MSA9IDIgKiBuZWFyIC8gKHRvcCAtIGJvdHRvbSk7CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzAgPSAocmlnaHQgKyBsZWZ0KSAvIChyaWdodCAtIGxlZnQpOwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cxID0gKHRvcCArIGJvdHRvbSkgLyAodG9wIC0gYm90dG9tKTsKICAgICAgICBjb25zdCBjb2x1bW4yUm93MiA9IC0oZmFyICsgbmVhcikgLyAoZmFyIC0gbmVhcik7CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzMgPSAtMTsKICAgICAgICBjb25zdCBjb2x1bW4zUm93MiA9IC0yICogZmFyICogbmVhciAvIChmYXIgLSBuZWFyKTsKICAgICAgICByZXN1bHRbMF0gPSBjb2x1bW4wUm93MDsKICAgICAgICByZXN1bHRbMV0gPSAwOwogICAgICAgIHJlc3VsdFsyXSA9IDA7CiAgICAgICAgcmVzdWx0WzNdID0gMDsKICAgICAgICByZXN1bHRbNF0gPSAwOwogICAgICAgIHJlc3VsdFs1XSA9IGNvbHVtbjFSb3cxOwogICAgICAgIHJlc3VsdFs2XSA9IDA7CiAgICAgICAgcmVzdWx0WzddID0gMDsKICAgICAgICByZXN1bHRbOF0gPSBjb2x1bW4yUm93MDsKICAgICAgICByZXN1bHRbOV0gPSBjb2x1bW4yUm93MTsKICAgICAgICByZXN1bHRbMTBdID0gY29sdW1uMlJvdzI7CiAgICAgICAgcmVzdWx0WzExXSA9IGNvbHVtbjJSb3czOwogICAgICAgIHJlc3VsdFsxMl0gPSAwOwogICAgICAgIHJlc3VsdFsxM10gPSAwOwogICAgICAgIHJlc3VsdFsxNF0gPSBjb2x1bW4zUm93MjsKICAgICAgICByZXN1bHRbMTVdID0gMDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LmNvbXB1dGVJbmZpbml0ZVBlcnNwZWN0aXZlT2ZmQ2VudGVyID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigiYm90dG9tIiwgYm90dG9tKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInRvcCIsIHRvcCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJuZWFyIiwgbmVhcik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3cwID0gMiAqIG5lYXIgLyAocmlnaHQgLSBsZWZ0KTsKICAgICAgICBjb25zdCBjb2x1bW4xUm93MSA9IDIgKiBuZWFyIC8gKHRvcCAtIGJvdHRvbSk7CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzAgPSAocmlnaHQgKyBsZWZ0KSAvIChyaWdodCAtIGxlZnQpOwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cxID0gKHRvcCArIGJvdHRvbSkgLyAodG9wIC0gYm90dG9tKTsKICAgICAgICBjb25zdCBjb2x1bW4yUm93MiA9IC0xOwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3czID0gLTE7CiAgICAgICAgY29uc3QgY29sdW1uM1JvdzIgPSAtMiAqIG5lYXI7CiAgICAgICAgcmVzdWx0WzBdID0gY29sdW1uMFJvdzA7CiAgICAgICAgcmVzdWx0WzFdID0gMDsKICAgICAgICByZXN1bHRbMl0gPSAwOwogICAgICAgIHJlc3VsdFszXSA9IDA7CiAgICAgICAgcmVzdWx0WzRdID0gMDsKICAgICAgICByZXN1bHRbNV0gPSBjb2x1bW4xUm93MTsKICAgICAgICByZXN1bHRbNl0gPSAwOwogICAgICAgIHJlc3VsdFs3XSA9IDA7CiAgICAgICAgcmVzdWx0WzhdID0gY29sdW1uMlJvdzA7CiAgICAgICAgcmVzdWx0WzldID0gY29sdW1uMlJvdzE7CiAgICAgICAgcmVzdWx0WzEwXSA9IGNvbHVtbjJSb3cyOwogICAgICAgIHJlc3VsdFsxMV0gPSBjb2x1bW4yUm93MzsKICAgICAgICByZXN1bHRbMTJdID0gMDsKICAgICAgICByZXN1bHRbMTNdID0gMDsKICAgICAgICByZXN1bHRbMTRdID0gY29sdW1uM1JvdzI7CiAgICAgICAgcmVzdWx0WzE1XSA9IDA7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5jb21wdXRlVmlld3BvcnRUcmFuc2Zvcm1hdGlvbiA9IGZ1bmN0aW9uKHZpZXdwb3J0LCBuZWFyRGVwdGhSYW5nZSwgZmFyRGVwdGhSYW5nZSwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IE1hdHJpeDQoKTsKICAgICAgICB9CiAgICAgICAgdmlld3BvcnQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh2aWV3cG9ydCwgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgICAgICBjb25zdCB4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQodmlld3BvcnQueCwgMCk7CiAgICAgICAgY29uc3QgeSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHZpZXdwb3J0LnksIDApOwogICAgICAgIGNvbnN0IHdpZHRoID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQodmlld3BvcnQud2lkdGgsIDApOwogICAgICAgIGNvbnN0IGhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHZpZXdwb3J0LmhlaWdodCwgMCk7CiAgICAgICAgbmVhckRlcHRoUmFuZ2UgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChuZWFyRGVwdGhSYW5nZSwgMCk7CiAgICAgICAgZmFyRGVwdGhSYW5nZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGZhckRlcHRoUmFuZ2UsIDEpOwogICAgICAgIGNvbnN0IGhhbGZXaWR0aCA9IHdpZHRoICogMC41OwogICAgICAgIGNvbnN0IGhhbGZIZWlnaHQgPSBoZWlnaHQgKiAwLjU7CiAgICAgICAgY29uc3QgaGFsZkRlcHRoID0gKGZhckRlcHRoUmFuZ2UgLSBuZWFyRGVwdGhSYW5nZSkgKiAwLjU7CiAgICAgICAgY29uc3QgY29sdW1uMFJvdzAgPSBoYWxmV2lkdGg7CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzEgPSBoYWxmSGVpZ2h0OwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cyID0gaGFsZkRlcHRoOwogICAgICAgIGNvbnN0IGNvbHVtbjNSb3cwID0geCArIGhhbGZXaWR0aDsKICAgICAgICBjb25zdCBjb2x1bW4zUm93MSA9IHkgKyBoYWxmSGVpZ2h0OwogICAgICAgIGNvbnN0IGNvbHVtbjNSb3cyID0gbmVhckRlcHRoUmFuZ2UgKyBoYWxmRGVwdGg7CiAgICAgICAgY29uc3QgY29sdW1uM1JvdzMgPSAxOwogICAgICAgIHJlc3VsdFswXSA9IGNvbHVtbjBSb3cwOwogICAgICAgIHJlc3VsdFsxXSA9IDA7CiAgICAgICAgcmVzdWx0WzJdID0gMDsKICAgICAgICByZXN1bHRbM10gPSAwOwogICAgICAgIHJlc3VsdFs0XSA9IDA7CiAgICAgICAgcmVzdWx0WzVdID0gY29sdW1uMVJvdzE7CiAgICAgICAgcmVzdWx0WzZdID0gMDsKICAgICAgICByZXN1bHRbN10gPSAwOwogICAgICAgIHJlc3VsdFs4XSA9IDA7CiAgICAgICAgcmVzdWx0WzldID0gMDsKICAgICAgICByZXN1bHRbMTBdID0gY29sdW1uMlJvdzI7CiAgICAgICAgcmVzdWx0WzExXSA9IDA7CiAgICAgICAgcmVzdWx0WzEyXSA9IGNvbHVtbjNSb3cwOwogICAgICAgIHJlc3VsdFsxM10gPSBjb2x1bW4zUm93MTsKICAgICAgICByZXN1bHRbMTRdID0gY29sdW1uM1JvdzI7CiAgICAgICAgcmVzdWx0WzE1XSA9IGNvbHVtbjNSb3czOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuY29tcHV0ZVZpZXcgPSBmdW5jdGlvbihwb3NpdGlvbiwgZGlyZWN0aW9uMiwgdXAsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInBvc2l0aW9uIiwgcG9zaXRpb24pOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZGlyZWN0aW9uIiwgZGlyZWN0aW9uMik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ1cCIsIHVwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSByaWdodC54OwogICAgICAgIHJlc3VsdFsxXSA9IHVwLng7CiAgICAgICAgcmVzdWx0WzJdID0gLWRpcmVjdGlvbjIueDsKICAgICAgICByZXN1bHRbM10gPSAwOwogICAgICAgIHJlc3VsdFs0XSA9IHJpZ2h0Lnk7CiAgICAgICAgcmVzdWx0WzVdID0gdXAueTsKICAgICAgICByZXN1bHRbNl0gPSAtZGlyZWN0aW9uMi55OwogICAgICAgIHJlc3VsdFs3XSA9IDA7CiAgICAgICAgcmVzdWx0WzhdID0gcmlnaHQuejsKICAgICAgICByZXN1bHRbOV0gPSB1cC56OwogICAgICAgIHJlc3VsdFsxMF0gPSAtZGlyZWN0aW9uMi56OwogICAgICAgIHJlc3VsdFsxMV0gPSAwOwogICAgICAgIHJlc3VsdFsxMl0gPSAtQ2FydGVzaWFuM19kZWZhdWx0LmRvdChyaWdodCwgcG9zaXRpb24pOwogICAgICAgIHJlc3VsdFsxM10gPSAtQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh1cCwgcG9zaXRpb24pOwogICAgICAgIHJlc3VsdFsxNF0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGRpcmVjdGlvbjIsIHBvc2l0aW9uKTsKICAgICAgICByZXN1bHRbMTVdID0gMTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LnRvQXJyYXkgPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICBtYXRyaXhbMF0sCiAgICAgICAgICAgIG1hdHJpeFsxXSwKICAgICAgICAgICAgbWF0cml4WzJdLAogICAgICAgICAgICBtYXRyaXhbM10sCiAgICAgICAgICAgIG1hdHJpeFs0XSwKICAgICAgICAgICAgbWF0cml4WzVdLAogICAgICAgICAgICBtYXRyaXhbNl0sCiAgICAgICAgICAgIG1hdHJpeFs3XSwKICAgICAgICAgICAgbWF0cml4WzhdLAogICAgICAgICAgICBtYXRyaXhbOV0sCiAgICAgICAgICAgIG1hdHJpeFsxMF0sCiAgICAgICAgICAgIG1hdHJpeFsxMV0sCiAgICAgICAgICAgIG1hdHJpeFsxMl0sCiAgICAgICAgICAgIG1hdHJpeFsxM10sCiAgICAgICAgICAgIG1hdHJpeFsxNF0sCiAgICAgICAgICAgIG1hdHJpeFsxNV0KICAgICAgICAgIF07CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXTsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV07CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdOwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXTsKICAgICAgICByZXN1bHRbNF0gPSBtYXRyaXhbNF07CiAgICAgICAgcmVzdWx0WzVdID0gbWF0cml4WzVdOwogICAgICAgIHJlc3VsdFs2XSA9IG1hdHJpeFs2XTsKICAgICAgICByZXN1bHRbN10gPSBtYXRyaXhbN107CiAgICAgICAgcmVzdWx0WzhdID0gbWF0cml4WzhdOwogICAgICAgIHJlc3VsdFs5XSA9IG1hdHJpeFs5XTsKICAgICAgICByZXN1bHRbMTBdID0gbWF0cml4WzEwXTsKICAgICAgICByZXN1bHRbMTFdID0gbWF0cml4WzExXTsKICAgICAgICByZXN1bHRbMTJdID0gbWF0cml4WzEyXTsKICAgICAgICByZXN1bHRbMTNdID0gbWF0cml4WzEzXTsKICAgICAgICByZXN1bHRbMTRdID0gbWF0cml4WzE0XTsKICAgICAgICByZXN1bHRbMTVdID0gbWF0cml4WzE1XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LmdldEVsZW1lbnRJbmRleCA9IGZ1bmN0aW9uKGNvbHVtbiwgcm93KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoInJvdyIsIHJvdywgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoInJvdyIsIHJvdywgMyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoImNvbHVtbiIsIGNvbHVtbiwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoImNvbHVtbiIsIGNvbHVtbiwgMyk7CiAgICAgICAgcmV0dXJuIGNvbHVtbiAqIDQgKyByb3c7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuZ2V0Q29sdW1uID0gZnVuY3Rpb24obWF0cml4LCBpbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJpbmRleCIsIGluZGV4LCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBpbmRleCAqIDQ7CiAgICAgICAgY29uc3QgeCA9IG1hdHJpeFtzdGFydEluZGV4XTsKICAgICAgICBjb25zdCB5ID0gbWF0cml4W3N0YXJ0SW5kZXggKyAxXTsKICAgICAgICBjb25zdCB6ID0gbWF0cml4W3N0YXJ0SW5kZXggKyAyXTsKICAgICAgICBjb25zdCB3ID0gbWF0cml4W3N0YXJ0SW5kZXggKyAzXTsKICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJlc3VsdC56ID0gejsKICAgICAgICByZXN1bHQudyA9IHc7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5zZXRDb2x1bW4gPSBmdW5jdGlvbihtYXRyaXgsIGluZGV4LCBjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJpbmRleCIsIGluZGV4LCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdCA9IE1hdHJpeDQuY2xvbmUobWF0cml4LCByZXN1bHQpOwogICAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBpbmRleCAqIDQ7CiAgICAgICAgcmVzdWx0W3N0YXJ0SW5kZXhdID0gY2FydGVzaWFuMTEueDsKICAgICAgICByZXN1bHRbc3RhcnRJbmRleCArIDFdID0gY2FydGVzaWFuMTEueTsKICAgICAgICByZXN1bHRbc3RhcnRJbmRleCArIDJdID0gY2FydGVzaWFuMTEuejsKICAgICAgICByZXN1bHRbc3RhcnRJbmRleCArIDNdID0gY2FydGVzaWFuMTEudzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LmdldFJvdyA9IGZ1bmN0aW9uKG1hdHJpeCwgaW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCB4ID0gbWF0cml4W2luZGV4XTsKICAgICAgICBjb25zdCB5ID0gbWF0cml4W2luZGV4ICsgNF07CiAgICAgICAgY29uc3QgeiA9IG1hdHJpeFtpbmRleCArIDhdOwogICAgICAgIGNvbnN0IHcgPSBtYXRyaXhbaW5kZXggKyAxMl07CiAgICAgICAgcmVzdWx0LnggPSB4OwogICAgICAgIHJlc3VsdC55ID0geTsKICAgICAgICByZXN1bHQueiA9IHo7CiAgICAgICAgcmVzdWx0LncgPSB3OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuc2V0Um93ID0gZnVuY3Rpb24obWF0cml4LCBpbmRleCwgY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQgPSBNYXRyaXg0LmNsb25lKG1hdHJpeCwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbaW5kZXhdID0gY2FydGVzaWFuMTEueDsKICAgICAgICByZXN1bHRbaW5kZXggKyA0XSA9IGNhcnRlc2lhbjExLnk7CiAgICAgICAgcmVzdWx0W2luZGV4ICsgOF0gPSBjYXJ0ZXNpYW4xMS56OwogICAgICAgIHJlc3VsdFtpbmRleCArIDEyXSA9IGNhcnRlc2lhbjExLnc7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5zZXRUcmFuc2xhdGlvbiA9IGZ1bmN0aW9uKG1hdHJpeCwgdHJhbnNsYXRpb24yLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ0cmFuc2xhdGlvbiIsIHRyYW5zbGF0aW9uMik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXTsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV07CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdOwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXTsKICAgICAgICByZXN1bHRbNF0gPSBtYXRyaXhbNF07CiAgICAgICAgcmVzdWx0WzVdID0gbWF0cml4WzVdOwogICAgICAgIHJlc3VsdFs2XSA9IG1hdHJpeFs2XTsKICAgICAgICByZXN1bHRbN10gPSBtYXRyaXhbN107CiAgICAgICAgcmVzdWx0WzhdID0gbWF0cml4WzhdOwogICAgICAgIHJlc3VsdFs5XSA9IG1hdHJpeFs5XTsKICAgICAgICByZXN1bHRbMTBdID0gbWF0cml4WzEwXTsKICAgICAgICByZXN1bHRbMTFdID0gbWF0cml4WzExXTsKICAgICAgICByZXN1bHRbMTJdID0gdHJhbnNsYXRpb24yLng7CiAgICAgICAgcmVzdWx0WzEzXSA9IHRyYW5zbGF0aW9uMi55OwogICAgICAgIHJlc3VsdFsxNF0gPSB0cmFuc2xhdGlvbjIuejsKICAgICAgICByZXN1bHRbMTVdID0gbWF0cml4WzE1XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY2FsZVNjcmF0Y2gxMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgTWF0cml4NC5zZXRTY2FsZSA9IGZ1bmN0aW9uKG1hdHJpeCwgc2NhbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNjYWxlIiwgc2NhbGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBleGlzdGluZ1NjYWxlID0gTWF0cml4NC5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDEyKTsKICAgICAgICBjb25zdCBzY2FsZVJhdGlvWCA9IHNjYWxlLnggLyBleGlzdGluZ1NjYWxlLng7CiAgICAgICAgY29uc3Qgc2NhbGVSYXRpb1kgPSBzY2FsZS55IC8gZXhpc3RpbmdTY2FsZS55OwogICAgICAgIGNvbnN0IHNjYWxlUmF0aW9aID0gc2NhbGUueiAvIGV4aXN0aW5nU2NhbGUuejsKICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF0gKiBzY2FsZVJhdGlvWDsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV0gKiBzY2FsZVJhdGlvWDsKICAgICAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl0gKiBzY2FsZVJhdGlvWDsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM107CiAgICAgICAgcmVzdWx0WzRdID0gbWF0cml4WzRdICogc2NhbGVSYXRpb1k7CiAgICAgICAgcmVzdWx0WzVdID0gbWF0cml4WzVdICogc2NhbGVSYXRpb1k7CiAgICAgICAgcmVzdWx0WzZdID0gbWF0cml4WzZdICogc2NhbGVSYXRpb1k7CiAgICAgICAgcmVzdWx0WzddID0gbWF0cml4WzddOwogICAgICAgIHJlc3VsdFs4XSA9IG1hdHJpeFs4XSAqIHNjYWxlUmF0aW9aOwogICAgICAgIHJlc3VsdFs5XSA9IG1hdHJpeFs5XSAqIHNjYWxlUmF0aW9aOwogICAgICAgIHJlc3VsdFsxMF0gPSBtYXRyaXhbMTBdICogc2NhbGVSYXRpb1o7CiAgICAgICAgcmVzdWx0WzExXSA9IG1hdHJpeFsxMV07CiAgICAgICAgcmVzdWx0WzEyXSA9IG1hdHJpeFsxMl07CiAgICAgICAgcmVzdWx0WzEzXSA9IG1hdHJpeFsxM107CiAgICAgICAgcmVzdWx0WzE0XSA9IG1hdHJpeFsxNF07CiAgICAgICAgcmVzdWx0WzE1XSA9IG1hdHJpeFsxNV07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NhbGVTY3JhdGNoMjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIE1hdHJpeDQuc2V0VW5pZm9ybVNjYWxlID0gZnVuY3Rpb24obWF0cml4LCBzY2FsZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGUiLCBzY2FsZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IGV4aXN0aW5nU2NhbGUgPSBNYXRyaXg0LmdldFNjYWxlKG1hdHJpeCwgc2NhbGVTY3JhdGNoMjIpOwogICAgICAgIGNvbnN0IHNjYWxlUmF0aW9YID0gc2NhbGUgLyBleGlzdGluZ1NjYWxlLng7CiAgICAgICAgY29uc3Qgc2NhbGVSYXRpb1kgPSBzY2FsZSAvIGV4aXN0aW5nU2NhbGUueTsKICAgICAgICBjb25zdCBzY2FsZVJhdGlvWiA9IHNjYWxlIC8gZXhpc3RpbmdTY2FsZS56OwogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXSAqIHNjYWxlUmF0aW9YOwogICAgICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAqIHNjYWxlUmF0aW9YOwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAqIHNjYWxlUmF0aW9YOwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXTsKICAgICAgICByZXN1bHRbNF0gPSBtYXRyaXhbNF0gKiBzY2FsZVJhdGlvWTsKICAgICAgICByZXN1bHRbNV0gPSBtYXRyaXhbNV0gKiBzY2FsZVJhdGlvWTsKICAgICAgICByZXN1bHRbNl0gPSBtYXRyaXhbNl0gKiBzY2FsZVJhdGlvWTsKICAgICAgICByZXN1bHRbN10gPSBtYXRyaXhbN107CiAgICAgICAgcmVzdWx0WzhdID0gbWF0cml4WzhdICogc2NhbGVSYXRpb1o7CiAgICAgICAgcmVzdWx0WzldID0gbWF0cml4WzldICogc2NhbGVSYXRpb1o7CiAgICAgICAgcmVzdWx0WzEwXSA9IG1hdHJpeFsxMF0gKiBzY2FsZVJhdGlvWjsKICAgICAgICByZXN1bHRbMTFdID0gbWF0cml4WzExXTsKICAgICAgICByZXN1bHRbMTJdID0gbWF0cml4WzEyXTsKICAgICAgICByZXN1bHRbMTNdID0gbWF0cml4WzEzXTsKICAgICAgICByZXN1bHRbMTRdID0gbWF0cml4WzE0XTsKICAgICAgICByZXN1bHRbMTVdID0gbWF0cml4WzE1XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY3JhdGNoQ29sdW1uMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgTWF0cml4NC5nZXRTY2FsZSA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUVsZW1lbnRzKG1hdHJpeFswXSwgbWF0cml4WzFdLCBtYXRyaXhbMl0sIHNjcmF0Y2hDb2x1bW4yKQogICAgICAgICk7CiAgICAgICAgcmVzdWx0LnkgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21FbGVtZW50cyhtYXRyaXhbNF0sIG1hdHJpeFs1XSwgbWF0cml4WzZdLCBzY3JhdGNoQ29sdW1uMikKICAgICAgICApOwogICAgICAgIHJlc3VsdC56ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tRWxlbWVudHMobWF0cml4WzhdLCBtYXRyaXhbOV0sIG1hdHJpeFsxMF0sIHNjcmF0Y2hDb2x1bW4yKQogICAgICAgICk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NhbGVTY3JhdGNoMzIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIE1hdHJpeDQuZ2V0TWF4aW11bVNjYWxlID0gZnVuY3Rpb24obWF0cml4KSB7CiAgICAgICAgTWF0cml4NC5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDMyKTsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuM19kZWZhdWx0Lm1heGltdW1Db21wb25lbnQoc2NhbGVTY3JhdGNoMzIpOwogICAgICB9OwogICAgICBzY2FsZVNjcmF0Y2g0MiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgTWF0cml4NC5zZXRSb3RhdGlvbiA9IGZ1bmN0aW9uKG1hdHJpeCwgcm90YXRpb24sIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3Qgc2NhbGUgPSBNYXRyaXg0LmdldFNjYWxlKG1hdHJpeCwgc2NhbGVTY3JhdGNoNDIpOwogICAgICAgIHJlc3VsdFswXSA9IHJvdGF0aW9uWzBdICogc2NhbGUueDsKICAgICAgICByZXN1bHRbMV0gPSByb3RhdGlvblsxXSAqIHNjYWxlLng7CiAgICAgICAgcmVzdWx0WzJdID0gcm90YXRpb25bMl0gKiBzY2FsZS54OwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXTsKICAgICAgICByZXN1bHRbNF0gPSByb3RhdGlvblszXSAqIHNjYWxlLnk7CiAgICAgICAgcmVzdWx0WzVdID0gcm90YXRpb25bNF0gKiBzY2FsZS55OwogICAgICAgIHJlc3VsdFs2XSA9IHJvdGF0aW9uWzVdICogc2NhbGUueTsKICAgICAgICByZXN1bHRbN10gPSBtYXRyaXhbN107CiAgICAgICAgcmVzdWx0WzhdID0gcm90YXRpb25bNl0gKiBzY2FsZS56OwogICAgICAgIHJlc3VsdFs5XSA9IHJvdGF0aW9uWzddICogc2NhbGUuejsKICAgICAgICByZXN1bHRbMTBdID0gcm90YXRpb25bOF0gKiBzY2FsZS56OwogICAgICAgIHJlc3VsdFsxMV0gPSBtYXRyaXhbMTFdOwogICAgICAgIHJlc3VsdFsxMl0gPSBtYXRyaXhbMTJdOwogICAgICAgIHJlc3VsdFsxM10gPSBtYXRyaXhbMTNdOwogICAgICAgIHJlc3VsdFsxNF0gPSBtYXRyaXhbMTRdOwogICAgICAgIHJlc3VsdFsxNV0gPSBtYXRyaXhbMTVdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjYWxlU2NyYXRjaDUyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBNYXRyaXg0LmdldFJvdGF0aW9uID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHNjYWxlID0gTWF0cml4NC5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDUyKTsKICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF0gLyBzY2FsZS54OwogICAgICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAvIHNjYWxlLng7CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdIC8gc2NhbGUueDsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbNF0gLyBzY2FsZS55OwogICAgICAgIHJlc3VsdFs0XSA9IG1hdHJpeFs1XSAvIHNjYWxlLnk7CiAgICAgICAgcmVzdWx0WzVdID0gbWF0cml4WzZdIC8gc2NhbGUueTsKICAgICAgICByZXN1bHRbNl0gPSBtYXRyaXhbOF0gLyBzY2FsZS56OwogICAgICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs5XSAvIHNjYWxlLno7CiAgICAgICAgcmVzdWx0WzhdID0gbWF0cml4WzEwXSAvIHNjYWxlLno7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5tdWx0aXBseSA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBsZWZ0MCA9IGxlZnRbMF07CiAgICAgICAgY29uc3QgbGVmdDEgPSBsZWZ0WzFdOwogICAgICAgIGNvbnN0IGxlZnQyID0gbGVmdFsyXTsKICAgICAgICBjb25zdCBsZWZ0MyA9IGxlZnRbM107CiAgICAgICAgY29uc3QgbGVmdDQgPSBsZWZ0WzRdOwogICAgICAgIGNvbnN0IGxlZnQ1ID0gbGVmdFs1XTsKICAgICAgICBjb25zdCBsZWZ0NiA9IGxlZnRbNl07CiAgICAgICAgY29uc3QgbGVmdDcgPSBsZWZ0WzddOwogICAgICAgIGNvbnN0IGxlZnQ4ID0gbGVmdFs4XTsKICAgICAgICBjb25zdCBsZWZ0OSA9IGxlZnRbOV07CiAgICAgICAgY29uc3QgbGVmdDEwID0gbGVmdFsxMF07CiAgICAgICAgY29uc3QgbGVmdDExID0gbGVmdFsxMV07CiAgICAgICAgY29uc3QgbGVmdDEyID0gbGVmdFsxMl07CiAgICAgICAgY29uc3QgbGVmdDEzID0gbGVmdFsxM107CiAgICAgICAgY29uc3QgbGVmdDE0ID0gbGVmdFsxNF07CiAgICAgICAgY29uc3QgbGVmdDE1ID0gbGVmdFsxNV07CiAgICAgICAgY29uc3QgcmlnaHQwID0gcmlnaHRbMF07CiAgICAgICAgY29uc3QgcmlnaHQxID0gcmlnaHRbMV07CiAgICAgICAgY29uc3QgcmlnaHQyID0gcmlnaHRbMl07CiAgICAgICAgY29uc3QgcmlnaHQzID0gcmlnaHRbM107CiAgICAgICAgY29uc3QgcmlnaHQ0ID0gcmlnaHRbNF07CiAgICAgICAgY29uc3QgcmlnaHQ1ID0gcmlnaHRbNV07CiAgICAgICAgY29uc3QgcmlnaHQ2ID0gcmlnaHRbNl07CiAgICAgICAgY29uc3QgcmlnaHQ3ID0gcmlnaHRbN107CiAgICAgICAgY29uc3QgcmlnaHQ4ID0gcmlnaHRbOF07CiAgICAgICAgY29uc3QgcmlnaHQ5ID0gcmlnaHRbOV07CiAgICAgICAgY29uc3QgcmlnaHQxMCA9IHJpZ2h0WzEwXTsKICAgICAgICBjb25zdCByaWdodDExID0gcmlnaHRbMTFdOwogICAgICAgIGNvbnN0IHJpZ2h0MTIgPSByaWdodFsxMl07CiAgICAgICAgY29uc3QgcmlnaHQxMyA9IHJpZ2h0WzEzXTsKICAgICAgICBjb25zdCByaWdodDE0ID0gcmlnaHRbMTRdOwogICAgICAgIGNvbnN0IHJpZ2h0MTUgPSByaWdodFsxNV07CiAgICAgICAgY29uc3QgY29sdW1uMFJvdzAgPSBsZWZ0MCAqIHJpZ2h0MCArIGxlZnQ0ICogcmlnaHQxICsgbGVmdDggKiByaWdodDIgKyBsZWZ0MTIgKiByaWdodDM7CiAgICAgICAgY29uc3QgY29sdW1uMFJvdzEgPSBsZWZ0MSAqIHJpZ2h0MCArIGxlZnQ1ICogcmlnaHQxICsgbGVmdDkgKiByaWdodDIgKyBsZWZ0MTMgKiByaWdodDM7CiAgICAgICAgY29uc3QgY29sdW1uMFJvdzIgPSBsZWZ0MiAqIHJpZ2h0MCArIGxlZnQ2ICogcmlnaHQxICsgbGVmdDEwICogcmlnaHQyICsgbGVmdDE0ICogcmlnaHQzOwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3czID0gbGVmdDMgKiByaWdodDAgKyBsZWZ0NyAqIHJpZ2h0MSArIGxlZnQxMSAqIHJpZ2h0MiArIGxlZnQxNSAqIHJpZ2h0MzsKICAgICAgICBjb25zdCBjb2x1bW4xUm93MCA9IGxlZnQwICogcmlnaHQ0ICsgbGVmdDQgKiByaWdodDUgKyBsZWZ0OCAqIHJpZ2h0NiArIGxlZnQxMiAqIHJpZ2h0NzsKICAgICAgICBjb25zdCBjb2x1bW4xUm93MSA9IGxlZnQxICogcmlnaHQ0ICsgbGVmdDUgKiByaWdodDUgKyBsZWZ0OSAqIHJpZ2h0NiArIGxlZnQxMyAqIHJpZ2h0NzsKICAgICAgICBjb25zdCBjb2x1bW4xUm93MiA9IGxlZnQyICogcmlnaHQ0ICsgbGVmdDYgKiByaWdodDUgKyBsZWZ0MTAgKiByaWdodDYgKyBsZWZ0MTQgKiByaWdodDc7CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzMgPSBsZWZ0MyAqIHJpZ2h0NCArIGxlZnQ3ICogcmlnaHQ1ICsgbGVmdDExICogcmlnaHQ2ICsgbGVmdDE1ICogcmlnaHQ3OwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cwID0gbGVmdDAgKiByaWdodDggKyBsZWZ0NCAqIHJpZ2h0OSArIGxlZnQ4ICogcmlnaHQxMCArIGxlZnQxMiAqIHJpZ2h0MTE7CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzEgPSBsZWZ0MSAqIHJpZ2h0OCArIGxlZnQ1ICogcmlnaHQ5ICsgbGVmdDkgKiByaWdodDEwICsgbGVmdDEzICogcmlnaHQxMTsKICAgICAgICBjb25zdCBjb2x1bW4yUm93MiA9IGxlZnQyICogcmlnaHQ4ICsgbGVmdDYgKiByaWdodDkgKyBsZWZ0MTAgKiByaWdodDEwICsgbGVmdDE0ICogcmlnaHQxMTsKICAgICAgICBjb25zdCBjb2x1bW4yUm93MyA9IGxlZnQzICogcmlnaHQ4ICsgbGVmdDcgKiByaWdodDkgKyBsZWZ0MTEgKiByaWdodDEwICsgbGVmdDE1ICogcmlnaHQxMTsKICAgICAgICBjb25zdCBjb2x1bW4zUm93MCA9IGxlZnQwICogcmlnaHQxMiArIGxlZnQ0ICogcmlnaHQxMyArIGxlZnQ4ICogcmlnaHQxNCArIGxlZnQxMiAqIHJpZ2h0MTU7CiAgICAgICAgY29uc3QgY29sdW1uM1JvdzEgPSBsZWZ0MSAqIHJpZ2h0MTIgKyBsZWZ0NSAqIHJpZ2h0MTMgKyBsZWZ0OSAqIHJpZ2h0MTQgKyBsZWZ0MTMgKiByaWdodDE1OwogICAgICAgIGNvbnN0IGNvbHVtbjNSb3cyID0gbGVmdDIgKiByaWdodDEyICsgbGVmdDYgKiByaWdodDEzICsgbGVmdDEwICogcmlnaHQxNCArIGxlZnQxNCAqIHJpZ2h0MTU7CiAgICAgICAgY29uc3QgY29sdW1uM1JvdzMgPSBsZWZ0MyAqIHJpZ2h0MTIgKyBsZWZ0NyAqIHJpZ2h0MTMgKyBsZWZ0MTEgKiByaWdodDE0ICsgbGVmdDE1ICogcmlnaHQxNTsKICAgICAgICByZXN1bHRbMF0gPSBjb2x1bW4wUm93MDsKICAgICAgICByZXN1bHRbMV0gPSBjb2x1bW4wUm93MTsKICAgICAgICByZXN1bHRbMl0gPSBjb2x1bW4wUm93MjsKICAgICAgICByZXN1bHRbM10gPSBjb2x1bW4wUm93MzsKICAgICAgICByZXN1bHRbNF0gPSBjb2x1bW4xUm93MDsKICAgICAgICByZXN1bHRbNV0gPSBjb2x1bW4xUm93MTsKICAgICAgICByZXN1bHRbNl0gPSBjb2x1bW4xUm93MjsKICAgICAgICByZXN1bHRbN10gPSBjb2x1bW4xUm93MzsKICAgICAgICByZXN1bHRbOF0gPSBjb2x1bW4yUm93MDsKICAgICAgICByZXN1bHRbOV0gPSBjb2x1bW4yUm93MTsKICAgICAgICByZXN1bHRbMTBdID0gY29sdW1uMlJvdzI7CiAgICAgICAgcmVzdWx0WzExXSA9IGNvbHVtbjJSb3czOwogICAgICAgIHJlc3VsdFsxMl0gPSBjb2x1bW4zUm93MDsKICAgICAgICByZXN1bHRbMTNdID0gY29sdW1uM1JvdzE7CiAgICAgICAgcmVzdWx0WzE0XSA9IGNvbHVtbjNSb3cyOwogICAgICAgIHJlc3VsdFsxNV0gPSBjb2x1bW4zUm93MzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LmFkZCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSBsZWZ0WzBdICsgcmlnaHRbMF07CiAgICAgICAgcmVzdWx0WzFdID0gbGVmdFsxXSArIHJpZ2h0WzFdOwogICAgICAgIHJlc3VsdFsyXSA9IGxlZnRbMl0gKyByaWdodFsyXTsKICAgICAgICByZXN1bHRbM10gPSBsZWZ0WzNdICsgcmlnaHRbM107CiAgICAgICAgcmVzdWx0WzRdID0gbGVmdFs0XSArIHJpZ2h0WzRdOwogICAgICAgIHJlc3VsdFs1XSA9IGxlZnRbNV0gKyByaWdodFs1XTsKICAgICAgICByZXN1bHRbNl0gPSBsZWZ0WzZdICsgcmlnaHRbNl07CiAgICAgICAgcmVzdWx0WzddID0gbGVmdFs3XSArIHJpZ2h0WzddOwogICAgICAgIHJlc3VsdFs4XSA9IGxlZnRbOF0gKyByaWdodFs4XTsKICAgICAgICByZXN1bHRbOV0gPSBsZWZ0WzldICsgcmlnaHRbOV07CiAgICAgICAgcmVzdWx0WzEwXSA9IGxlZnRbMTBdICsgcmlnaHRbMTBdOwogICAgICAgIHJlc3VsdFsxMV0gPSBsZWZ0WzExXSArIHJpZ2h0WzExXTsKICAgICAgICByZXN1bHRbMTJdID0gbGVmdFsxMl0gKyByaWdodFsxMl07CiAgICAgICAgcmVzdWx0WzEzXSA9IGxlZnRbMTNdICsgcmlnaHRbMTNdOwogICAgICAgIHJlc3VsdFsxNF0gPSBsZWZ0WzE0XSArIHJpZ2h0WzE0XTsKICAgICAgICByZXN1bHRbMTVdID0gbGVmdFsxNV0gKyByaWdodFsxNV07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5zdWJ0cmFjdCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSBsZWZ0WzBdIC0gcmlnaHRbMF07CiAgICAgICAgcmVzdWx0WzFdID0gbGVmdFsxXSAtIHJpZ2h0WzFdOwogICAgICAgIHJlc3VsdFsyXSA9IGxlZnRbMl0gLSByaWdodFsyXTsKICAgICAgICByZXN1bHRbM10gPSBsZWZ0WzNdIC0gcmlnaHRbM107CiAgICAgICAgcmVzdWx0WzRdID0gbGVmdFs0XSAtIHJpZ2h0WzRdOwogICAgICAgIHJlc3VsdFs1XSA9IGxlZnRbNV0gLSByaWdodFs1XTsKICAgICAgICByZXN1bHRbNl0gPSBsZWZ0WzZdIC0gcmlnaHRbNl07CiAgICAgICAgcmVzdWx0WzddID0gbGVmdFs3XSAtIHJpZ2h0WzddOwogICAgICAgIHJlc3VsdFs4XSA9IGxlZnRbOF0gLSByaWdodFs4XTsKICAgICAgICByZXN1bHRbOV0gPSBsZWZ0WzldIC0gcmlnaHRbOV07CiAgICAgICAgcmVzdWx0WzEwXSA9IGxlZnRbMTBdIC0gcmlnaHRbMTBdOwogICAgICAgIHJlc3VsdFsxMV0gPSBsZWZ0WzExXSAtIHJpZ2h0WzExXTsKICAgICAgICByZXN1bHRbMTJdID0gbGVmdFsxMl0gLSByaWdodFsxMl07CiAgICAgICAgcmVzdWx0WzEzXSA9IGxlZnRbMTNdIC0gcmlnaHRbMTNdOwogICAgICAgIHJlc3VsdFsxNF0gPSBsZWZ0WzE0XSAtIHJpZ2h0WzE0XTsKICAgICAgICByZXN1bHRbMTVdID0gbGVmdFsxNV0gLSByaWdodFsxNV07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5tdWx0aXBseVRyYW5zZm9ybWF0aW9uID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IGxlZnQwID0gbGVmdFswXTsKICAgICAgICBjb25zdCBsZWZ0MSA9IGxlZnRbMV07CiAgICAgICAgY29uc3QgbGVmdDIgPSBsZWZ0WzJdOwogICAgICAgIGNvbnN0IGxlZnQ0ID0gbGVmdFs0XTsKICAgICAgICBjb25zdCBsZWZ0NSA9IGxlZnRbNV07CiAgICAgICAgY29uc3QgbGVmdDYgPSBsZWZ0WzZdOwogICAgICAgIGNvbnN0IGxlZnQ4ID0gbGVmdFs4XTsKICAgICAgICBjb25zdCBsZWZ0OSA9IGxlZnRbOV07CiAgICAgICAgY29uc3QgbGVmdDEwID0gbGVmdFsxMF07CiAgICAgICAgY29uc3QgbGVmdDEyID0gbGVmdFsxMl07CiAgICAgICAgY29uc3QgbGVmdDEzID0gbGVmdFsxM107CiAgICAgICAgY29uc3QgbGVmdDE0ID0gbGVmdFsxNF07CiAgICAgICAgY29uc3QgcmlnaHQwID0gcmlnaHRbMF07CiAgICAgICAgY29uc3QgcmlnaHQxID0gcmlnaHRbMV07CiAgICAgICAgY29uc3QgcmlnaHQyID0gcmlnaHRbMl07CiAgICAgICAgY29uc3QgcmlnaHQ0ID0gcmlnaHRbNF07CiAgICAgICAgY29uc3QgcmlnaHQ1ID0gcmlnaHRbNV07CiAgICAgICAgY29uc3QgcmlnaHQ2ID0gcmlnaHRbNl07CiAgICAgICAgY29uc3QgcmlnaHQ4ID0gcmlnaHRbOF07CiAgICAgICAgY29uc3QgcmlnaHQ5ID0gcmlnaHRbOV07CiAgICAgICAgY29uc3QgcmlnaHQxMCA9IHJpZ2h0WzEwXTsKICAgICAgICBjb25zdCByaWdodDEyID0gcmlnaHRbMTJdOwogICAgICAgIGNvbnN0IHJpZ2h0MTMgPSByaWdodFsxM107CiAgICAgICAgY29uc3QgcmlnaHQxNCA9IHJpZ2h0WzE0XTsKICAgICAgICBjb25zdCBjb2x1bW4wUm93MCA9IGxlZnQwICogcmlnaHQwICsgbGVmdDQgKiByaWdodDEgKyBsZWZ0OCAqIHJpZ2h0MjsKICAgICAgICBjb25zdCBjb2x1bW4wUm93MSA9IGxlZnQxICogcmlnaHQwICsgbGVmdDUgKiByaWdodDEgKyBsZWZ0OSAqIHJpZ2h0MjsKICAgICAgICBjb25zdCBjb2x1bW4wUm93MiA9IGxlZnQyICogcmlnaHQwICsgbGVmdDYgKiByaWdodDEgKyBsZWZ0MTAgKiByaWdodDI7CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzAgPSBsZWZ0MCAqIHJpZ2h0NCArIGxlZnQ0ICogcmlnaHQ1ICsgbGVmdDggKiByaWdodDY7CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzEgPSBsZWZ0MSAqIHJpZ2h0NCArIGxlZnQ1ICogcmlnaHQ1ICsgbGVmdDkgKiByaWdodDY7CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzIgPSBsZWZ0MiAqIHJpZ2h0NCArIGxlZnQ2ICogcmlnaHQ1ICsgbGVmdDEwICogcmlnaHQ2OwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cwID0gbGVmdDAgKiByaWdodDggKyBsZWZ0NCAqIHJpZ2h0OSArIGxlZnQ4ICogcmlnaHQxMDsKICAgICAgICBjb25zdCBjb2x1bW4yUm93MSA9IGxlZnQxICogcmlnaHQ4ICsgbGVmdDUgKiByaWdodDkgKyBsZWZ0OSAqIHJpZ2h0MTA7CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzIgPSBsZWZ0MiAqIHJpZ2h0OCArIGxlZnQ2ICogcmlnaHQ5ICsgbGVmdDEwICogcmlnaHQxMDsKICAgICAgICBjb25zdCBjb2x1bW4zUm93MCA9IGxlZnQwICogcmlnaHQxMiArIGxlZnQ0ICogcmlnaHQxMyArIGxlZnQ4ICogcmlnaHQxNCArIGxlZnQxMjsKICAgICAgICBjb25zdCBjb2x1bW4zUm93MSA9IGxlZnQxICogcmlnaHQxMiArIGxlZnQ1ICogcmlnaHQxMyArIGxlZnQ5ICogcmlnaHQxNCArIGxlZnQxMzsKICAgICAgICBjb25zdCBjb2x1bW4zUm93MiA9IGxlZnQyICogcmlnaHQxMiArIGxlZnQ2ICogcmlnaHQxMyArIGxlZnQxMCAqIHJpZ2h0MTQgKyBsZWZ0MTQ7CiAgICAgICAgcmVzdWx0WzBdID0gY29sdW1uMFJvdzA7CiAgICAgICAgcmVzdWx0WzFdID0gY29sdW1uMFJvdzE7CiAgICAgICAgcmVzdWx0WzJdID0gY29sdW1uMFJvdzI7CiAgICAgICAgcmVzdWx0WzNdID0gMDsKICAgICAgICByZXN1bHRbNF0gPSBjb2x1bW4xUm93MDsKICAgICAgICByZXN1bHRbNV0gPSBjb2x1bW4xUm93MTsKICAgICAgICByZXN1bHRbNl0gPSBjb2x1bW4xUm93MjsKICAgICAgICByZXN1bHRbN10gPSAwOwogICAgICAgIHJlc3VsdFs4XSA9IGNvbHVtbjJSb3cwOwogICAgICAgIHJlc3VsdFs5XSA9IGNvbHVtbjJSb3cxOwogICAgICAgIHJlc3VsdFsxMF0gPSBjb2x1bW4yUm93MjsKICAgICAgICByZXN1bHRbMTFdID0gMDsKICAgICAgICByZXN1bHRbMTJdID0gY29sdW1uM1JvdzA7CiAgICAgICAgcmVzdWx0WzEzXSA9IGNvbHVtbjNSb3cxOwogICAgICAgIHJlc3VsdFsxNF0gPSBjb2x1bW4zUm93MjsKICAgICAgICByZXN1bHRbMTVdID0gMTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0Lm11bHRpcGx5QnlNYXRyaXgzID0gZnVuY3Rpb24obWF0cml4LCByb3RhdGlvbiwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicm90YXRpb24iLCByb3RhdGlvbik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IGxlZnQwID0gbWF0cml4WzBdOwogICAgICAgIGNvbnN0IGxlZnQxID0gbWF0cml4WzFdOwogICAgICAgIGNvbnN0IGxlZnQyID0gbWF0cml4WzJdOwogICAgICAgIGNvbnN0IGxlZnQ0ID0gbWF0cml4WzRdOwogICAgICAgIGNvbnN0IGxlZnQ1ID0gbWF0cml4WzVdOwogICAgICAgIGNvbnN0IGxlZnQ2ID0gbWF0cml4WzZdOwogICAgICAgIGNvbnN0IGxlZnQ4ID0gbWF0cml4WzhdOwogICAgICAgIGNvbnN0IGxlZnQ5ID0gbWF0cml4WzldOwogICAgICAgIGNvbnN0IGxlZnQxMCA9IG1hdHJpeFsxMF07CiAgICAgICAgY29uc3QgcmlnaHQwID0gcm90YXRpb25bMF07CiAgICAgICAgY29uc3QgcmlnaHQxID0gcm90YXRpb25bMV07CiAgICAgICAgY29uc3QgcmlnaHQyID0gcm90YXRpb25bMl07CiAgICAgICAgY29uc3QgcmlnaHQ0ID0gcm90YXRpb25bM107CiAgICAgICAgY29uc3QgcmlnaHQ1ID0gcm90YXRpb25bNF07CiAgICAgICAgY29uc3QgcmlnaHQ2ID0gcm90YXRpb25bNV07CiAgICAgICAgY29uc3QgcmlnaHQ4ID0gcm90YXRpb25bNl07CiAgICAgICAgY29uc3QgcmlnaHQ5ID0gcm90YXRpb25bN107CiAgICAgICAgY29uc3QgcmlnaHQxMCA9IHJvdGF0aW9uWzhdOwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3cwID0gbGVmdDAgKiByaWdodDAgKyBsZWZ0NCAqIHJpZ2h0MSArIGxlZnQ4ICogcmlnaHQyOwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3cxID0gbGVmdDEgKiByaWdodDAgKyBsZWZ0NSAqIHJpZ2h0MSArIGxlZnQ5ICogcmlnaHQyOwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3cyID0gbGVmdDIgKiByaWdodDAgKyBsZWZ0NiAqIHJpZ2h0MSArIGxlZnQxMCAqIHJpZ2h0MjsKICAgICAgICBjb25zdCBjb2x1bW4xUm93MCA9IGxlZnQwICogcmlnaHQ0ICsgbGVmdDQgKiByaWdodDUgKyBsZWZ0OCAqIHJpZ2h0NjsKICAgICAgICBjb25zdCBjb2x1bW4xUm93MSA9IGxlZnQxICogcmlnaHQ0ICsgbGVmdDUgKiByaWdodDUgKyBsZWZ0OSAqIHJpZ2h0NjsKICAgICAgICBjb25zdCBjb2x1bW4xUm93MiA9IGxlZnQyICogcmlnaHQ0ICsgbGVmdDYgKiByaWdodDUgKyBsZWZ0MTAgKiByaWdodDY7CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzAgPSBsZWZ0MCAqIHJpZ2h0OCArIGxlZnQ0ICogcmlnaHQ5ICsgbGVmdDggKiByaWdodDEwOwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cxID0gbGVmdDEgKiByaWdodDggKyBsZWZ0NSAqIHJpZ2h0OSArIGxlZnQ5ICogcmlnaHQxMDsKICAgICAgICBjb25zdCBjb2x1bW4yUm93MiA9IGxlZnQyICogcmlnaHQ4ICsgbGVmdDYgKiByaWdodDkgKyBsZWZ0MTAgKiByaWdodDEwOwogICAgICAgIHJlc3VsdFswXSA9IGNvbHVtbjBSb3cwOwogICAgICAgIHJlc3VsdFsxXSA9IGNvbHVtbjBSb3cxOwogICAgICAgIHJlc3VsdFsyXSA9IGNvbHVtbjBSb3cyOwogICAgICAgIHJlc3VsdFszXSA9IDA7CiAgICAgICAgcmVzdWx0WzRdID0gY29sdW1uMVJvdzA7CiAgICAgICAgcmVzdWx0WzVdID0gY29sdW1uMVJvdzE7CiAgICAgICAgcmVzdWx0WzZdID0gY29sdW1uMVJvdzI7CiAgICAgICAgcmVzdWx0WzddID0gMDsKICAgICAgICByZXN1bHRbOF0gPSBjb2x1bW4yUm93MDsKICAgICAgICByZXN1bHRbOV0gPSBjb2x1bW4yUm93MTsKICAgICAgICByZXN1bHRbMTBdID0gY29sdW1uMlJvdzI7CiAgICAgICAgcmVzdWx0WzExXSA9IDA7CiAgICAgICAgcmVzdWx0WzEyXSA9IG1hdHJpeFsxMl07CiAgICAgICAgcmVzdWx0WzEzXSA9IG1hdHJpeFsxM107CiAgICAgICAgcmVzdWx0WzE0XSA9IG1hdHJpeFsxNF07CiAgICAgICAgcmVzdWx0WzE1XSA9IG1hdHJpeFsxNV07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5tdWx0aXBseUJ5VHJhbnNsYXRpb24gPSBmdW5jdGlvbihtYXRyaXgsIHRyYW5zbGF0aW9uMiwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidHJhbnNsYXRpb24iLCB0cmFuc2xhdGlvbjIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCB4ID0gdHJhbnNsYXRpb24yLng7CiAgICAgICAgY29uc3QgeSA9IHRyYW5zbGF0aW9uMi55OwogICAgICAgIGNvbnN0IHogPSB0cmFuc2xhdGlvbjIuejsKICAgICAgICBjb25zdCB0eCA9IHggKiBtYXRyaXhbMF0gKyB5ICogbWF0cml4WzRdICsgeiAqIG1hdHJpeFs4XSArIG1hdHJpeFsxMl07CiAgICAgICAgY29uc3QgdHkgPSB4ICogbWF0cml4WzFdICsgeSAqIG1hdHJpeFs1XSArIHogKiBtYXRyaXhbOV0gKyBtYXRyaXhbMTNdOwogICAgICAgIGNvbnN0IHR6ID0geCAqIG1hdHJpeFsyXSArIHkgKiBtYXRyaXhbNl0gKyB6ICogbWF0cml4WzEwXSArIG1hdHJpeFsxNF07CiAgICAgICAgcmVzdWx0WzBdID0gbWF0cml4WzBdOwogICAgICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXTsKICAgICAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl07CiAgICAgICAgcmVzdWx0WzNdID0gbWF0cml4WzNdOwogICAgICAgIHJlc3VsdFs0XSA9IG1hdHJpeFs0XTsKICAgICAgICByZXN1bHRbNV0gPSBtYXRyaXhbNV07CiAgICAgICAgcmVzdWx0WzZdID0gbWF0cml4WzZdOwogICAgICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs3XTsKICAgICAgICByZXN1bHRbOF0gPSBtYXRyaXhbOF07CiAgICAgICAgcmVzdWx0WzldID0gbWF0cml4WzldOwogICAgICAgIHJlc3VsdFsxMF0gPSBtYXRyaXhbMTBdOwogICAgICAgIHJlc3VsdFsxMV0gPSBtYXRyaXhbMTFdOwogICAgICAgIHJlc3VsdFsxMl0gPSB0eDsKICAgICAgICByZXN1bHRbMTNdID0gdHk7CiAgICAgICAgcmVzdWx0WzE0XSA9IHR6OwogICAgICAgIHJlc3VsdFsxNV0gPSBtYXRyaXhbMTVdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQubXVsdGlwbHlCeVNjYWxlID0gZnVuY3Rpb24obWF0cml4LCBzY2FsZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic2NhbGUiLCBzY2FsZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHNjYWxlWCA9IHNjYWxlLng7CiAgICAgICAgY29uc3Qgc2NhbGVZID0gc2NhbGUueTsKICAgICAgICBjb25zdCBzY2FsZVogPSBzY2FsZS56OwogICAgICAgIGlmIChzY2FsZVggPT09IDEgJiYgc2NhbGVZID09PSAxICYmIHNjYWxlWiA9PT0gMSkgewogICAgICAgICAgcmV0dXJuIE1hdHJpeDQuY2xvbmUobWF0cml4LCByZXN1bHQpOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBzY2FsZVggKiBtYXRyaXhbMF07CiAgICAgICAgcmVzdWx0WzFdID0gc2NhbGVYICogbWF0cml4WzFdOwogICAgICAgIHJlc3VsdFsyXSA9IHNjYWxlWCAqIG1hdHJpeFsyXTsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM107CiAgICAgICAgcmVzdWx0WzRdID0gc2NhbGVZICogbWF0cml4WzRdOwogICAgICAgIHJlc3VsdFs1XSA9IHNjYWxlWSAqIG1hdHJpeFs1XTsKICAgICAgICByZXN1bHRbNl0gPSBzY2FsZVkgKiBtYXRyaXhbNl07CiAgICAgICAgcmVzdWx0WzddID0gbWF0cml4WzddOwogICAgICAgIHJlc3VsdFs4XSA9IHNjYWxlWiAqIG1hdHJpeFs4XTsKICAgICAgICByZXN1bHRbOV0gPSBzY2FsZVogKiBtYXRyaXhbOV07CiAgICAgICAgcmVzdWx0WzEwXSA9IHNjYWxlWiAqIG1hdHJpeFsxMF07CiAgICAgICAgcmVzdWx0WzExXSA9IG1hdHJpeFsxMV07CiAgICAgICAgcmVzdWx0WzEyXSA9IG1hdHJpeFsxMl07CiAgICAgICAgcmVzdWx0WzEzXSA9IG1hdHJpeFsxM107CiAgICAgICAgcmVzdWx0WzE0XSA9IG1hdHJpeFsxNF07CiAgICAgICAgcmVzdWx0WzE1XSA9IG1hdHJpeFsxNV07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5tdWx0aXBseUJ5VW5pZm9ybVNjYWxlID0gZnVuY3Rpb24obWF0cml4LCBzY2FsZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGUiLCBzY2FsZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXSAqIHNjYWxlOwogICAgICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAqIHNjYWxlOwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAqIHNjYWxlOwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXTsKICAgICAgICByZXN1bHRbNF0gPSBtYXRyaXhbNF0gKiBzY2FsZTsKICAgICAgICByZXN1bHRbNV0gPSBtYXRyaXhbNV0gKiBzY2FsZTsKICAgICAgICByZXN1bHRbNl0gPSBtYXRyaXhbNl0gKiBzY2FsZTsKICAgICAgICByZXN1bHRbN10gPSBtYXRyaXhbN107CiAgICAgICAgcmVzdWx0WzhdID0gbWF0cml4WzhdICogc2NhbGU7CiAgICAgICAgcmVzdWx0WzldID0gbWF0cml4WzldICogc2NhbGU7CiAgICAgICAgcmVzdWx0WzEwXSA9IG1hdHJpeFsxMF0gKiBzY2FsZTsKICAgICAgICByZXN1bHRbMTFdID0gbWF0cml4WzExXTsKICAgICAgICByZXN1bHRbMTJdID0gbWF0cml4WzEyXTsKICAgICAgICByZXN1bHRbMTNdID0gbWF0cml4WzEzXTsKICAgICAgICByZXN1bHRbMTRdID0gbWF0cml4WzE0XTsKICAgICAgICByZXN1bHRbMTVdID0gbWF0cml4WzE1XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0Lm11bHRpcGx5QnlWZWN0b3IgPSBmdW5jdGlvbihtYXRyaXgsIGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHZYID0gY2FydGVzaWFuMTEueDsKICAgICAgICBjb25zdCB2WSA9IGNhcnRlc2lhbjExLnk7CiAgICAgICAgY29uc3QgdlogPSBjYXJ0ZXNpYW4xMS56OwogICAgICAgIGNvbnN0IHZXID0gY2FydGVzaWFuMTEudzsKICAgICAgICBjb25zdCB4ID0gbWF0cml4WzBdICogdlggKyBtYXRyaXhbNF0gKiB2WSArIG1hdHJpeFs4XSAqIHZaICsgbWF0cml4WzEyXSAqIHZXOwogICAgICAgIGNvbnN0IHkgPSBtYXRyaXhbMV0gKiB2WCArIG1hdHJpeFs1XSAqIHZZICsgbWF0cml4WzldICogdlogKyBtYXRyaXhbMTNdICogdlc7CiAgICAgICAgY29uc3QgeiA9IG1hdHJpeFsyXSAqIHZYICsgbWF0cml4WzZdICogdlkgKyBtYXRyaXhbMTBdICogdlogKyBtYXRyaXhbMTRdICogdlc7CiAgICAgICAgY29uc3QgdyA9IG1hdHJpeFszXSAqIHZYICsgbWF0cml4WzddICogdlkgKyBtYXRyaXhbMTFdICogdlogKyBtYXRyaXhbMTVdICogdlc7CiAgICAgICAgcmVzdWx0LnggPSB4OwogICAgICAgIHJlc3VsdC55ID0geTsKICAgICAgICByZXN1bHQueiA9IHo7CiAgICAgICAgcmVzdWx0LncgPSB3OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQubXVsdGlwbHlCeVBvaW50QXNWZWN0b3IgPSBmdW5jdGlvbihtYXRyaXgsIGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHZYID0gY2FydGVzaWFuMTEueDsKICAgICAgICBjb25zdCB2WSA9IGNhcnRlc2lhbjExLnk7CiAgICAgICAgY29uc3QgdlogPSBjYXJ0ZXNpYW4xMS56OwogICAgICAgIGNvbnN0IHggPSBtYXRyaXhbMF0gKiB2WCArIG1hdHJpeFs0XSAqIHZZICsgbWF0cml4WzhdICogdlo7CiAgICAgICAgY29uc3QgeSA9IG1hdHJpeFsxXSAqIHZYICsgbWF0cml4WzVdICogdlkgKyBtYXRyaXhbOV0gKiB2WjsKICAgICAgICBjb25zdCB6ID0gbWF0cml4WzJdICogdlggKyBtYXRyaXhbNl0gKiB2WSArIG1hdHJpeFsxMF0gKiB2WjsKICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJlc3VsdC56ID0gejsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0Lm11bHRpcGx5QnlQb2ludCA9IGZ1bmN0aW9uKG1hdHJpeCwgY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgdlggPSBjYXJ0ZXNpYW4xMS54OwogICAgICAgIGNvbnN0IHZZID0gY2FydGVzaWFuMTEueTsKICAgICAgICBjb25zdCB2WiA9IGNhcnRlc2lhbjExLno7CiAgICAgICAgY29uc3QgeCA9IG1hdHJpeFswXSAqIHZYICsgbWF0cml4WzRdICogdlkgKyBtYXRyaXhbOF0gKiB2WiArIG1hdHJpeFsxMl07CiAgICAgICAgY29uc3QgeSA9IG1hdHJpeFsxXSAqIHZYICsgbWF0cml4WzVdICogdlkgKyBtYXRyaXhbOV0gKiB2WiArIG1hdHJpeFsxM107CiAgICAgICAgY29uc3QgeiA9IG1hdHJpeFsyXSAqIHZYICsgbWF0cml4WzZdICogdlkgKyBtYXRyaXhbMTBdICogdlogKyBtYXRyaXhbMTRdOwogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmVzdWx0LnogPSB6OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQubXVsdGlwbHlCeVNjYWxhciA9IGZ1bmN0aW9uKG1hdHJpeCwgc2NhbGFyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJzY2FsYXIiLCBzY2FsYXIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF0gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzFdID0gbWF0cml4WzFdICogc2NhbGFyOwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAqIHNjYWxhcjsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM10gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzRdID0gbWF0cml4WzRdICogc2NhbGFyOwogICAgICAgIHJlc3VsdFs1XSA9IG1hdHJpeFs1XSAqIHNjYWxhcjsKICAgICAgICByZXN1bHRbNl0gPSBtYXRyaXhbNl0gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzddID0gbWF0cml4WzddICogc2NhbGFyOwogICAgICAgIHJlc3VsdFs4XSA9IG1hdHJpeFs4XSAqIHNjYWxhcjsKICAgICAgICByZXN1bHRbOV0gPSBtYXRyaXhbOV0gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzEwXSA9IG1hdHJpeFsxMF0gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzExXSA9IG1hdHJpeFsxMV0gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzEyXSA9IG1hdHJpeFsxMl0gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzEzXSA9IG1hdHJpeFsxM10gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzE0XSA9IG1hdHJpeFsxNF0gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzE1XSA9IG1hdHJpeFsxNV0gKiBzY2FsYXI7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5uZWdhdGUgPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gLW1hdHJpeFswXTsKICAgICAgICByZXN1bHRbMV0gPSAtbWF0cml4WzFdOwogICAgICAgIHJlc3VsdFsyXSA9IC1tYXRyaXhbMl07CiAgICAgICAgcmVzdWx0WzNdID0gLW1hdHJpeFszXTsKICAgICAgICByZXN1bHRbNF0gPSAtbWF0cml4WzRdOwogICAgICAgIHJlc3VsdFs1XSA9IC1tYXRyaXhbNV07CiAgICAgICAgcmVzdWx0WzZdID0gLW1hdHJpeFs2XTsKICAgICAgICByZXN1bHRbN10gPSAtbWF0cml4WzddOwogICAgICAgIHJlc3VsdFs4XSA9IC1tYXRyaXhbOF07CiAgICAgICAgcmVzdWx0WzldID0gLW1hdHJpeFs5XTsKICAgICAgICByZXN1bHRbMTBdID0gLW1hdHJpeFsxMF07CiAgICAgICAgcmVzdWx0WzExXSA9IC1tYXRyaXhbMTFdOwogICAgICAgIHJlc3VsdFsxMl0gPSAtbWF0cml4WzEyXTsKICAgICAgICByZXN1bHRbMTNdID0gLW1hdHJpeFsxM107CiAgICAgICAgcmVzdWx0WzE0XSA9IC1tYXRyaXhbMTRdOwogICAgICAgIHJlc3VsdFsxNV0gPSAtbWF0cml4WzE1XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LnRyYW5zcG9zZSA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBtYXRyaXgxID0gbWF0cml4WzFdOwogICAgICAgIGNvbnN0IG1hdHJpeDIgPSBtYXRyaXhbMl07CiAgICAgICAgY29uc3QgbWF0cml4MyA9IG1hdHJpeFszXTsKICAgICAgICBjb25zdCBtYXRyaXg2ID0gbWF0cml4WzZdOwogICAgICAgIGNvbnN0IG1hdHJpeDcgPSBtYXRyaXhbN107CiAgICAgICAgY29uc3QgbWF0cml4MTEgPSBtYXRyaXhbMTFdOwogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXTsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbNF07CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzhdOwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFsxMl07CiAgICAgICAgcmVzdWx0WzRdID0gbWF0cml4MTsKICAgICAgICByZXN1bHRbNV0gPSBtYXRyaXhbNV07CiAgICAgICAgcmVzdWx0WzZdID0gbWF0cml4WzldOwogICAgICAgIHJlc3VsdFs3XSA9IG1hdHJpeFsxM107CiAgICAgICAgcmVzdWx0WzhdID0gbWF0cml4MjsKICAgICAgICByZXN1bHRbOV0gPSBtYXRyaXg2OwogICAgICAgIHJlc3VsdFsxMF0gPSBtYXRyaXhbMTBdOwogICAgICAgIHJlc3VsdFsxMV0gPSBtYXRyaXhbMTRdOwogICAgICAgIHJlc3VsdFsxMl0gPSBtYXRyaXgzOwogICAgICAgIHJlc3VsdFsxM10gPSBtYXRyaXg3OwogICAgICAgIHJlc3VsdFsxNF0gPSBtYXRyaXgxMTsKICAgICAgICByZXN1bHRbMTVdID0gbWF0cml4WzE1XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LmFicyA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSBNYXRoLmFicyhtYXRyaXhbMF0pOwogICAgICAgIHJlc3VsdFsxXSA9IE1hdGguYWJzKG1hdHJpeFsxXSk7CiAgICAgICAgcmVzdWx0WzJdID0gTWF0aC5hYnMobWF0cml4WzJdKTsKICAgICAgICByZXN1bHRbM10gPSBNYXRoLmFicyhtYXRyaXhbM10pOwogICAgICAgIHJlc3VsdFs0XSA9IE1hdGguYWJzKG1hdHJpeFs0XSk7CiAgICAgICAgcmVzdWx0WzVdID0gTWF0aC5hYnMobWF0cml4WzVdKTsKICAgICAgICByZXN1bHRbNl0gPSBNYXRoLmFicyhtYXRyaXhbNl0pOwogICAgICAgIHJlc3VsdFs3XSA9IE1hdGguYWJzKG1hdHJpeFs3XSk7CiAgICAgICAgcmVzdWx0WzhdID0gTWF0aC5hYnMobWF0cml4WzhdKTsKICAgICAgICByZXN1bHRbOV0gPSBNYXRoLmFicyhtYXRyaXhbOV0pOwogICAgICAgIHJlc3VsdFsxMF0gPSBNYXRoLmFicyhtYXRyaXhbMTBdKTsKICAgICAgICByZXN1bHRbMTFdID0gTWF0aC5hYnMobWF0cml4WzExXSk7CiAgICAgICAgcmVzdWx0WzEyXSA9IE1hdGguYWJzKG1hdHJpeFsxMl0pOwogICAgICAgIHJlc3VsdFsxM10gPSBNYXRoLmFicyhtYXRyaXhbMTNdKTsKICAgICAgICByZXN1bHRbMTRdID0gTWF0aC5hYnMobWF0cml4WzE0XSk7CiAgICAgICAgcmVzdWx0WzE1XSA9IE1hdGguYWJzKG1hdHJpeFsxNV0pOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuZXF1YWxzID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICByZXR1cm4gbGVmdCA9PT0gcmlnaHQgfHwgZGVmaW5lZF9kZWZhdWx0KGxlZnQpICYmIGRlZmluZWRfZGVmYXVsdChyaWdodCkgJiYgLy8gVHJhbnNsYXRpb24KICAgICAgICBsZWZ0WzEyXSA9PT0gcmlnaHRbMTJdICYmIGxlZnRbMTNdID09PSByaWdodFsxM10gJiYgbGVmdFsxNF0gPT09IHJpZ2h0WzE0XSAmJiAvLyBSb3RhdGlvbi9zY2FsZQogICAgICAgIGxlZnRbMF0gPT09IHJpZ2h0WzBdICYmIGxlZnRbMV0gPT09IHJpZ2h0WzFdICYmIGxlZnRbMl0gPT09IHJpZ2h0WzJdICYmIGxlZnRbNF0gPT09IHJpZ2h0WzRdICYmIGxlZnRbNV0gPT09IHJpZ2h0WzVdICYmIGxlZnRbNl0gPT09IHJpZ2h0WzZdICYmIGxlZnRbOF0gPT09IHJpZ2h0WzhdICYmIGxlZnRbOV0gPT09IHJpZ2h0WzldICYmIGxlZnRbMTBdID09PSByaWdodFsxMF0gJiYgLy8gQm90dG9tIHJvdwogICAgICAgIGxlZnRbM10gPT09IHJpZ2h0WzNdICYmIGxlZnRbN10gPT09IHJpZ2h0WzddICYmIGxlZnRbMTFdID09PSByaWdodFsxMV0gJiYgbGVmdFsxNV0gPT09IHJpZ2h0WzE1XTsKICAgICAgfTsKICAgICAgTWF0cml4NC5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIGVwc2lsb24pIHsKICAgICAgICBlcHNpbG9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZXBzaWxvbiwgMCk7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIE1hdGguYWJzKGxlZnRbMF0gLSByaWdodFswXSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzFdIC0gcmlnaHRbMV0pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFsyXSAtIHJpZ2h0WzJdKSA8PSBlcHNpbG9uICYmIE1hdGguYWJzKGxlZnRbM10gLSByaWdodFszXSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzRdIC0gcmlnaHRbNF0pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFs1XSAtIHJpZ2h0WzVdKSA8PSBlcHNpbG9uICYmIE1hdGguYWJzKGxlZnRbNl0gLSByaWdodFs2XSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzddIC0gcmlnaHRbN10pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFs4XSAtIHJpZ2h0WzhdKSA8PSBlcHNpbG9uICYmIE1hdGguYWJzKGxlZnRbOV0gLSByaWdodFs5XSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzEwXSAtIHJpZ2h0WzEwXSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzExXSAtIHJpZ2h0WzExXSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzEyXSAtIHJpZ2h0WzEyXSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzEzXSAtIHJpZ2h0WzEzXSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzE0XSAtIHJpZ2h0WzE0XSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzE1XSAtIHJpZ2h0WzE1XSkgPD0gZXBzaWxvbjsKICAgICAgfTsKICAgICAgTWF0cml4NC5nZXRUcmFuc2xhdGlvbiA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IG1hdHJpeFsxMl07CiAgICAgICAgcmVzdWx0LnkgPSBtYXRyaXhbMTNdOwogICAgICAgIHJlc3VsdC56ID0gbWF0cml4WzE0XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LmdldE1hdHJpeDMgPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gbWF0cml4WzBdOwogICAgICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXTsKICAgICAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl07CiAgICAgICAgcmVzdWx0WzNdID0gbWF0cml4WzRdOwogICAgICAgIHJlc3VsdFs0XSA9IG1hdHJpeFs1XTsKICAgICAgICByZXN1bHRbNV0gPSBtYXRyaXhbNl07CiAgICAgICAgcmVzdWx0WzZdID0gbWF0cml4WzhdOwogICAgICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs5XTsKICAgICAgICByZXN1bHRbOF0gPSBtYXRyaXhbMTBdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hJbnZlcnNlUm90YXRpb24gPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hNYXRyaXgzWmVybyA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEJvdHRvbVJvdyA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEV4cGVjdGVkQm90dG9tUm93ID0gbmV3IENhcnRlc2lhbjRfZGVmYXVsdCgwLCAwLCAwLCAxKTsKICAgICAgTWF0cml4NC5pbnZlcnNlID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHNyYzAgPSBtYXRyaXhbMF07CiAgICAgICAgY29uc3Qgc3JjMSA9IG1hdHJpeFs0XTsKICAgICAgICBjb25zdCBzcmMyID0gbWF0cml4WzhdOwogICAgICAgIGNvbnN0IHNyYzMgPSBtYXRyaXhbMTJdOwogICAgICAgIGNvbnN0IHNyYzQgPSBtYXRyaXhbMV07CiAgICAgICAgY29uc3Qgc3JjNSA9IG1hdHJpeFs1XTsKICAgICAgICBjb25zdCBzcmM2ID0gbWF0cml4WzldOwogICAgICAgIGNvbnN0IHNyYzcgPSBtYXRyaXhbMTNdOwogICAgICAgIGNvbnN0IHNyYzggPSBtYXRyaXhbMl07CiAgICAgICAgY29uc3Qgc3JjOSA9IG1hdHJpeFs2XTsKICAgICAgICBjb25zdCBzcmMxMCA9IG1hdHJpeFsxMF07CiAgICAgICAgY29uc3Qgc3JjMTEgPSBtYXRyaXhbMTRdOwogICAgICAgIGNvbnN0IHNyYzEyID0gbWF0cml4WzNdOwogICAgICAgIGNvbnN0IHNyYzEzID0gbWF0cml4WzddOwogICAgICAgIGNvbnN0IHNyYzE0ID0gbWF0cml4WzExXTsKICAgICAgICBjb25zdCBzcmMxNSA9IG1hdHJpeFsxNV07CiAgICAgICAgbGV0IHRtcDAgPSBzcmMxMCAqIHNyYzE1OwogICAgICAgIGxldCB0bXAxID0gc3JjMTEgKiBzcmMxNDsKICAgICAgICBsZXQgdG1wMiA9IHNyYzkgKiBzcmMxNTsKICAgICAgICBsZXQgdG1wMyA9IHNyYzExICogc3JjMTM7CiAgICAgICAgbGV0IHRtcDQgPSBzcmM5ICogc3JjMTQ7CiAgICAgICAgbGV0IHRtcDUgPSBzcmMxMCAqIHNyYzEzOwogICAgICAgIGxldCB0bXA2ID0gc3JjOCAqIHNyYzE1OwogICAgICAgIGxldCB0bXA3ID0gc3JjMTEgKiBzcmMxMjsKICAgICAgICBsZXQgdG1wOCA9IHNyYzggKiBzcmMxNDsKICAgICAgICBsZXQgdG1wOSA9IHNyYzEwICogc3JjMTI7CiAgICAgICAgbGV0IHRtcDEwID0gc3JjOCAqIHNyYzEzOwogICAgICAgIGxldCB0bXAxMSA9IHNyYzkgKiBzcmMxMjsKICAgICAgICBjb25zdCBkc3QwID0gdG1wMCAqIHNyYzUgKyB0bXAzICogc3JjNiArIHRtcDQgKiBzcmM3IC0gKHRtcDEgKiBzcmM1ICsgdG1wMiAqIHNyYzYgKyB0bXA1ICogc3JjNyk7CiAgICAgICAgY29uc3QgZHN0MSA9IHRtcDEgKiBzcmM0ICsgdG1wNiAqIHNyYzYgKyB0bXA5ICogc3JjNyAtICh0bXAwICogc3JjNCArIHRtcDcgKiBzcmM2ICsgdG1wOCAqIHNyYzcpOwogICAgICAgIGNvbnN0IGRzdDIgPSB0bXAyICogc3JjNCArIHRtcDcgKiBzcmM1ICsgdG1wMTAgKiBzcmM3IC0gKHRtcDMgKiBzcmM0ICsgdG1wNiAqIHNyYzUgKyB0bXAxMSAqIHNyYzcpOwogICAgICAgIGNvbnN0IGRzdDMgPSB0bXA1ICogc3JjNCArIHRtcDggKiBzcmM1ICsgdG1wMTEgKiBzcmM2IC0gKHRtcDQgKiBzcmM0ICsgdG1wOSAqIHNyYzUgKyB0bXAxMCAqIHNyYzYpOwogICAgICAgIGNvbnN0IGRzdDQgPSB0bXAxICogc3JjMSArIHRtcDIgKiBzcmMyICsgdG1wNSAqIHNyYzMgLSAodG1wMCAqIHNyYzEgKyB0bXAzICogc3JjMiArIHRtcDQgKiBzcmMzKTsKICAgICAgICBjb25zdCBkc3Q1ID0gdG1wMCAqIHNyYzAgKyB0bXA3ICogc3JjMiArIHRtcDggKiBzcmMzIC0gKHRtcDEgKiBzcmMwICsgdG1wNiAqIHNyYzIgKyB0bXA5ICogc3JjMyk7CiAgICAgICAgY29uc3QgZHN0NiA9IHRtcDMgKiBzcmMwICsgdG1wNiAqIHNyYzEgKyB0bXAxMSAqIHNyYzMgLSAodG1wMiAqIHNyYzAgKyB0bXA3ICogc3JjMSArIHRtcDEwICogc3JjMyk7CiAgICAgICAgY29uc3QgZHN0NyA9IHRtcDQgKiBzcmMwICsgdG1wOSAqIHNyYzEgKyB0bXAxMCAqIHNyYzIgLSAodG1wNSAqIHNyYzAgKyB0bXA4ICogc3JjMSArIHRtcDExICogc3JjMik7CiAgICAgICAgdG1wMCA9IHNyYzIgKiBzcmM3OwogICAgICAgIHRtcDEgPSBzcmMzICogc3JjNjsKICAgICAgICB0bXAyID0gc3JjMSAqIHNyYzc7CiAgICAgICAgdG1wMyA9IHNyYzMgKiBzcmM1OwogICAgICAgIHRtcDQgPSBzcmMxICogc3JjNjsKICAgICAgICB0bXA1ID0gc3JjMiAqIHNyYzU7CiAgICAgICAgdG1wNiA9IHNyYzAgKiBzcmM3OwogICAgICAgIHRtcDcgPSBzcmMzICogc3JjNDsKICAgICAgICB0bXA4ID0gc3JjMCAqIHNyYzY7CiAgICAgICAgdG1wOSA9IHNyYzIgKiBzcmM0OwogICAgICAgIHRtcDEwID0gc3JjMCAqIHNyYzU7CiAgICAgICAgdG1wMTEgPSBzcmMxICogc3JjNDsKICAgICAgICBjb25zdCBkc3Q4ID0gdG1wMCAqIHNyYzEzICsgdG1wMyAqIHNyYzE0ICsgdG1wNCAqIHNyYzE1IC0gKHRtcDEgKiBzcmMxMyArIHRtcDIgKiBzcmMxNCArIHRtcDUgKiBzcmMxNSk7CiAgICAgICAgY29uc3QgZHN0OSA9IHRtcDEgKiBzcmMxMiArIHRtcDYgKiBzcmMxNCArIHRtcDkgKiBzcmMxNSAtICh0bXAwICogc3JjMTIgKyB0bXA3ICogc3JjMTQgKyB0bXA4ICogc3JjMTUpOwogICAgICAgIGNvbnN0IGRzdDEwID0gdG1wMiAqIHNyYzEyICsgdG1wNyAqIHNyYzEzICsgdG1wMTAgKiBzcmMxNSAtICh0bXAzICogc3JjMTIgKyB0bXA2ICogc3JjMTMgKyB0bXAxMSAqIHNyYzE1KTsKICAgICAgICBjb25zdCBkc3QxMSA9IHRtcDUgKiBzcmMxMiArIHRtcDggKiBzcmMxMyArIHRtcDExICogc3JjMTQgLSAodG1wNCAqIHNyYzEyICsgdG1wOSAqIHNyYzEzICsgdG1wMTAgKiBzcmMxNCk7CiAgICAgICAgY29uc3QgZHN0MTIgPSB0bXAyICogc3JjMTAgKyB0bXA1ICogc3JjMTEgKyB0bXAxICogc3JjOSAtICh0bXA0ICogc3JjMTEgKyB0bXAwICogc3JjOSArIHRtcDMgKiBzcmMxMCk7CiAgICAgICAgY29uc3QgZHN0MTMgPSB0bXA4ICogc3JjMTEgKyB0bXAwICogc3JjOCArIHRtcDcgKiBzcmMxMCAtICh0bXA2ICogc3JjMTAgKyB0bXA5ICogc3JjMTEgKyB0bXAxICogc3JjOCk7CiAgICAgICAgY29uc3QgZHN0MTQgPSB0bXA2ICogc3JjOSArIHRtcDExICogc3JjMTEgKyB0bXAzICogc3JjOCAtICh0bXAxMCAqIHNyYzExICsgdG1wMiAqIHNyYzggKyB0bXA3ICogc3JjOSk7CiAgICAgICAgY29uc3QgZHN0MTUgPSB0bXAxMCAqIHNyYzEwICsgdG1wNCAqIHNyYzggKyB0bXA5ICogc3JjOSAtICh0bXA4ICogc3JjOSArIHRtcDExICogc3JjMTAgKyB0bXA1ICogc3JjOCk7CiAgICAgICAgbGV0IGRldCA9IHNyYzAgKiBkc3QwICsgc3JjMSAqIGRzdDEgKyBzcmMyICogZHN0MiArIHNyYzMgKiBkc3QzOwogICAgICAgIGlmIChNYXRoLmFicyhkZXQpIDwgTWF0aF9kZWZhdWx0LkVQU0lMT04yMSkgewogICAgICAgICAgaWYgKE1hdHJpeDNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgICBNYXRyaXg0LmdldE1hdHJpeDMobWF0cml4LCBzY3JhdGNoSW52ZXJzZVJvdGF0aW9uKSwKICAgICAgICAgICAgc2NyYXRjaE1hdHJpeDNaZXJvLAogICAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjcKICAgICAgICAgICkgJiYgQ2FydGVzaWFuNF9kZWZhdWx0LmVxdWFscygKICAgICAgICAgICAgTWF0cml4NC5nZXRSb3cobWF0cml4LCAzLCBzY3JhdGNoQm90dG9tUm93KSwKICAgICAgICAgICAgc2NyYXRjaEV4cGVjdGVkQm90dG9tUm93CiAgICAgICAgICApKSB7CiAgICAgICAgICAgIHJlc3VsdFswXSA9IDA7CiAgICAgICAgICAgIHJlc3VsdFsxXSA9IDA7CiAgICAgICAgICAgIHJlc3VsdFsyXSA9IDA7CiAgICAgICAgICAgIHJlc3VsdFszXSA9IDA7CiAgICAgICAgICAgIHJlc3VsdFs0XSA9IDA7CiAgICAgICAgICAgIHJlc3VsdFs1XSA9IDA7CiAgICAgICAgICAgIHJlc3VsdFs2XSA9IDA7CiAgICAgICAgICAgIHJlc3VsdFs3XSA9IDA7CiAgICAgICAgICAgIHJlc3VsdFs4XSA9IDA7CiAgICAgICAgICAgIHJlc3VsdFs5XSA9IDA7CiAgICAgICAgICAgIHJlc3VsdFsxMF0gPSAwOwogICAgICAgICAgICByZXN1bHRbMTFdID0gMDsKICAgICAgICAgICAgcmVzdWx0WzEyXSA9IC1tYXRyaXhbMTJdOwogICAgICAgICAgICByZXN1bHRbMTNdID0gLW1hdHJpeFsxM107CiAgICAgICAgICAgIHJlc3VsdFsxNF0gPSAtbWF0cml4WzE0XTsKICAgICAgICAgICAgcmVzdWx0WzE1XSA9IDE7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICB9CiAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJtYXRyaXggaXMgbm90IGludmVydGlibGUgYmVjYXVzZSBpdHMgZGV0ZXJtaW5hdGUgaXMgemVyby4iCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBkZXQgPSAxIC8gZGV0OwogICAgICAgIHJlc3VsdFswXSA9IGRzdDAgKiBkZXQ7CiAgICAgICAgcmVzdWx0WzFdID0gZHN0MSAqIGRldDsKICAgICAgICByZXN1bHRbMl0gPSBkc3QyICogZGV0OwogICAgICAgIHJlc3VsdFszXSA9IGRzdDMgKiBkZXQ7CiAgICAgICAgcmVzdWx0WzRdID0gZHN0NCAqIGRldDsKICAgICAgICByZXN1bHRbNV0gPSBkc3Q1ICogZGV0OwogICAgICAgIHJlc3VsdFs2XSA9IGRzdDYgKiBkZXQ7CiAgICAgICAgcmVzdWx0WzddID0gZHN0NyAqIGRldDsKICAgICAgICByZXN1bHRbOF0gPSBkc3Q4ICogZGV0OwogICAgICAgIHJlc3VsdFs5XSA9IGRzdDkgKiBkZXQ7CiAgICAgICAgcmVzdWx0WzEwXSA9IGRzdDEwICogZGV0OwogICAgICAgIHJlc3VsdFsxMV0gPSBkc3QxMSAqIGRldDsKICAgICAgICByZXN1bHRbMTJdID0gZHN0MTIgKiBkZXQ7CiAgICAgICAgcmVzdWx0WzEzXSA9IGRzdDEzICogZGV0OwogICAgICAgIHJlc3VsdFsxNF0gPSBkc3QxNCAqIGRldDsKICAgICAgICByZXN1bHRbMTVdID0gZHN0MTUgKiBkZXQ7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5pbnZlcnNlVHJhbnNmb3JtYXRpb24gPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgbWF0cml4MCA9IG1hdHJpeFswXTsKICAgICAgICBjb25zdCBtYXRyaXgxID0gbWF0cml4WzFdOwogICAgICAgIGNvbnN0IG1hdHJpeDIgPSBtYXRyaXhbMl07CiAgICAgICAgY29uc3QgbWF0cml4NCA9IG1hdHJpeFs0XTsKICAgICAgICBjb25zdCBtYXRyaXg1ID0gbWF0cml4WzVdOwogICAgICAgIGNvbnN0IG1hdHJpeDYgPSBtYXRyaXhbNl07CiAgICAgICAgY29uc3QgbWF0cml4OCA9IG1hdHJpeFs4XTsKICAgICAgICBjb25zdCBtYXRyaXg5ID0gbWF0cml4WzldOwogICAgICAgIGNvbnN0IG1hdHJpeDEwID0gbWF0cml4WzEwXTsKICAgICAgICBjb25zdCB2WCA9IG1hdHJpeFsxMl07CiAgICAgICAgY29uc3QgdlkgPSBtYXRyaXhbMTNdOwogICAgICAgIGNvbnN0IHZaID0gbWF0cml4WzE0XTsKICAgICAgICBjb25zdCB4ID0gLW1hdHJpeDAgKiB2WCAtIG1hdHJpeDEgKiB2WSAtIG1hdHJpeDIgKiB2WjsKICAgICAgICBjb25zdCB5ID0gLW1hdHJpeDQgKiB2WCAtIG1hdHJpeDUgKiB2WSAtIG1hdHJpeDYgKiB2WjsKICAgICAgICBjb25zdCB6ID0gLW1hdHJpeDggKiB2WCAtIG1hdHJpeDkgKiB2WSAtIG1hdHJpeDEwICogdlo7CiAgICAgICAgcmVzdWx0WzBdID0gbWF0cml4MDsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXg0OwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeDg7CiAgICAgICAgcmVzdWx0WzNdID0gMDsKICAgICAgICByZXN1bHRbNF0gPSBtYXRyaXgxOwogICAgICAgIHJlc3VsdFs1XSA9IG1hdHJpeDU7CiAgICAgICAgcmVzdWx0WzZdID0gbWF0cml4OTsKICAgICAgICByZXN1bHRbN10gPSAwOwogICAgICAgIHJlc3VsdFs4XSA9IG1hdHJpeDI7CiAgICAgICAgcmVzdWx0WzldID0gbWF0cml4NjsKICAgICAgICByZXN1bHRbMTBdID0gbWF0cml4MTA7CiAgICAgICAgcmVzdWx0WzExXSA9IDA7CiAgICAgICAgcmVzdWx0WzEyXSA9IHg7CiAgICAgICAgcmVzdWx0WzEzXSA9IHk7CiAgICAgICAgcmVzdWx0WzE0XSA9IHo7CiAgICAgICAgcmVzdWx0WzE1XSA9IDE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NyYXRjaFRyYW5zcG9zZU1hdHJpeDIgPSBuZXcgTWF0cml4NCgpOwogICAgICBNYXRyaXg0LmludmVyc2VUcmFuc3Bvc2UgPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIE1hdHJpeDQuaW52ZXJzZSgKICAgICAgICAgIE1hdHJpeDQudHJhbnNwb3NlKG1hdHJpeCwgc2NyYXRjaFRyYW5zcG9zZU1hdHJpeDIpLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgTWF0cml4NC5JREVOVElUWSA9IE9iamVjdC5mcmVlemUoCiAgICAgICAgbmV3IE1hdHJpeDQoCiAgICAgICAgICAxLAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICAwLAogICAgICAgICAgMCwKICAgICAgICAgIDEsCiAgICAgICAgICAwLAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICAwLAogICAgICAgICAgMSwKICAgICAgICAgIDAsCiAgICAgICAgICAwLAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICApOwogICAgICBNYXRyaXg0LlpFUk8gPSBPYmplY3QuZnJlZXplKAogICAgICAgIG5ldyBNYXRyaXg0KAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICAwLAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICAwLAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICAwLAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICAwLAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICAwLAogICAgICAgICAgMAogICAgICAgICkKICAgICAgKTsKICAgICAgTWF0cml4NC5DT0xVTU4wUk9XMCA9IDA7CiAgICAgIE1hdHJpeDQuQ09MVU1OMFJPVzEgPSAxOwogICAgICBNYXRyaXg0LkNPTFVNTjBST1cyID0gMjsKICAgICAgTWF0cml4NC5DT0xVTU4wUk9XMyA9IDM7CiAgICAgIE1hdHJpeDQuQ09MVU1OMVJPVzAgPSA0OwogICAgICBNYXRyaXg0LkNPTFVNTjFST1cxID0gNTsKICAgICAgTWF0cml4NC5DT0xVTU4xUk9XMiA9IDY7CiAgICAgIE1hdHJpeDQuQ09MVU1OMVJPVzMgPSA3OwogICAgICBNYXRyaXg0LkNPTFVNTjJST1cwID0gODsKICAgICAgTWF0cml4NC5DT0xVTU4yUk9XMSA9IDk7CiAgICAgIE1hdHJpeDQuQ09MVU1OMlJPVzIgPSAxMDsKICAgICAgTWF0cml4NC5DT0xVTU4yUk9XMyA9IDExOwogICAgICBNYXRyaXg0LkNPTFVNTjNST1cwID0gMTI7CiAgICAgIE1hdHJpeDQuQ09MVU1OM1JPVzEgPSAxMzsKICAgICAgTWF0cml4NC5DT0xVTU4zUk9XMiA9IDE0OwogICAgICBNYXRyaXg0LkNPTFVNTjNST1czID0gMTU7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE1hdHJpeDQucHJvdG90eXBlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgbnVtYmVyIG9mIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uLgogICAgICAgICAqIEBtZW1iZXJvZiBNYXRyaXg0LnByb3RvdHlwZQogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKi8KICAgICAgICBsZW5ndGg6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBNYXRyaXg0LnBhY2tlZExlbmd0aDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBNYXRyaXg0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIHJldHVybiBNYXRyaXg0LmNsb25lKHRoaXMsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIE1hdHJpeDQucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIE1hdHJpeDQuZXF1YWxzKHRoaXMsIHJpZ2h0KTsKICAgICAgfTsKICAgICAgTWF0cml4NC5lcXVhbHNBcnJheSA9IGZ1bmN0aW9uKG1hdHJpeCwgYXJyYXksIG9mZnNldCkgewogICAgICAgIHJldHVybiBtYXRyaXhbMF0gPT09IGFycmF5W29mZnNldF0gJiYgbWF0cml4WzFdID09PSBhcnJheVtvZmZzZXQgKyAxXSAmJiBtYXRyaXhbMl0gPT09IGFycmF5W29mZnNldCArIDJdICYmIG1hdHJpeFszXSA9PT0gYXJyYXlbb2Zmc2V0ICsgM10gJiYgbWF0cml4WzRdID09PSBhcnJheVtvZmZzZXQgKyA0XSAmJiBtYXRyaXhbNV0gPT09IGFycmF5W29mZnNldCArIDVdICYmIG1hdHJpeFs2XSA9PT0gYXJyYXlbb2Zmc2V0ICsgNl0gJiYgbWF0cml4WzddID09PSBhcnJheVtvZmZzZXQgKyA3XSAmJiBtYXRyaXhbOF0gPT09IGFycmF5W29mZnNldCArIDhdICYmIG1hdHJpeFs5XSA9PT0gYXJyYXlbb2Zmc2V0ICsgOV0gJiYgbWF0cml4WzEwXSA9PT0gYXJyYXlbb2Zmc2V0ICsgMTBdICYmIG1hdHJpeFsxMV0gPT09IGFycmF5W29mZnNldCArIDExXSAmJiBtYXRyaXhbMTJdID09PSBhcnJheVtvZmZzZXQgKyAxMl0gJiYgbWF0cml4WzEzXSA9PT0gYXJyYXlbb2Zmc2V0ICsgMTNdICYmIG1hdHJpeFsxNF0gPT09IGFycmF5W29mZnNldCArIDE0XSAmJiBtYXRyaXhbMTVdID09PSBhcnJheVtvZmZzZXQgKyAxNV07CiAgICAgIH07CiAgICAgIE1hdHJpeDQucHJvdG90eXBlLmVxdWFsc0Vwc2lsb24gPSBmdW5jdGlvbihyaWdodCwgZXBzaWxvbikgewogICAgICAgIHJldHVybiBNYXRyaXg0LmVxdWFsc0Vwc2lsb24odGhpcywgcmlnaHQsIGVwc2lsb24pOwogICAgICB9OwogICAgICBNYXRyaXg0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBgKCR7dGhpc1swXX0sICR7dGhpc1s0XX0sICR7dGhpc1s4XX0sICR7dGhpc1sxMl19KQooJHt0aGlzWzFdfSwgJHt0aGlzWzVdfSwgJHt0aGlzWzldfSwgJHt0aGlzWzEzXX0pCigke3RoaXNbMl19LCAke3RoaXNbNl19LCAke3RoaXNbMTBdfSwgJHt0aGlzWzE0XX0pCigke3RoaXNbM119LCAke3RoaXNbN119LCAke3RoaXNbMTFdfSwgJHt0aGlzWzE1XX0pYDsKICAgICAgfTsKICAgICAgTWF0cml4NF9kZWZhdWx0ID0gTWF0cml4NDsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1JlY3RhbmdsZS5qcwogIGZ1bmN0aW9uIFJlY3RhbmdsZSh3ZXN0LCBzb3V0aCwgZWFzdCwgbm9ydGgpIHsKICAgIHRoaXMud2VzdCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHdlc3QsIDApOwogICAgdGhpcy5zb3V0aCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHNvdXRoLCAwKTsKICAgIHRoaXMuZWFzdCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVhc3QsIDApOwogICAgdGhpcy5ub3J0aCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG5vcnRoLCAwKTsKICB9CiAgdmFyIHN1YnNhbXBsZUxsYVNjcmF0Y2gsIFJlY3RhbmdsZV9kZWZhdWx0OwogIHZhciBpbml0X1JlY3RhbmdsZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUmVjdGFuZ2xlLmpzIigpIHsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFJlY3RhbmdsZS5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSB3aWR0aCBvZiB0aGUgcmVjdGFuZ2xlIGluIHJhZGlhbnMuCiAgICAgICAgICogQG1lbWJlcm9mIFJlY3RhbmdsZS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIHdpZHRoOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gUmVjdGFuZ2xlLmNvbXB1dGVXaWR0aCh0aGlzKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIGhlaWdodCBvZiB0aGUgcmVjdGFuZ2xlIGluIHJhZGlhbnMuCiAgICAgICAgICogQG1lbWJlcm9mIFJlY3RhbmdsZS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIGhlaWdodDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIFJlY3RhbmdsZS5jb21wdXRlSGVpZ2h0KHRoaXMpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIFJlY3RhbmdsZS5wYWNrZWRMZW5ndGggPSA0OwogICAgICBSZWN0YW5nbGUucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLndlc3Q7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLnNvdXRoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5lYXN0OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gdmFsdWUubm9ydGg7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBSZWN0YW5nbGUudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBSZWN0YW5nbGUoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Lndlc3QgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC5zb3V0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0LmVhc3QgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC5ub3J0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFJlY3RhbmdsZS5jb21wdXRlV2lkdGggPSBmdW5jdGlvbihyZWN0YW5nbGUpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgbGV0IGVhc3QgPSByZWN0YW5nbGUuZWFzdDsKICAgICAgICBjb25zdCB3ZXN0ID0gcmVjdGFuZ2xlLndlc3Q7CiAgICAgICAgaWYgKGVhc3QgPCB3ZXN0KSB7CiAgICAgICAgICBlYXN0ICs9IE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBlYXN0IC0gd2VzdDsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLmNvbXB1dGVIZWlnaHQgPSBmdW5jdGlvbihyZWN0YW5nbGUpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgcmV0dXJuIHJlY3RhbmdsZS5ub3J0aCAtIHJlY3RhbmdsZS5zb3V0aDsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLmZyb21EZWdyZWVzID0gZnVuY3Rpb24od2VzdCwgc291dGgsIGVhc3QsIG5vcnRoLCByZXN1bHQpIHsKICAgICAgICB3ZXN0ID0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucyhkZWZhdWx0VmFsdWVfZGVmYXVsdCh3ZXN0LCAwKSk7CiAgICAgICAgc291dGggPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHNvdXRoLCAwKSk7CiAgICAgICAgZWFzdCA9IE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoZGVmYXVsdFZhbHVlX2RlZmF1bHQoZWFzdCwgMCkpOwogICAgICAgIG5vcnRoID0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucyhkZWZhdWx0VmFsdWVfZGVmYXVsdChub3J0aCwgMCkpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKHdlc3QsIHNvdXRoLCBlYXN0LCBub3J0aCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC53ZXN0ID0gd2VzdDsKICAgICAgICByZXN1bHQuc291dGggPSBzb3V0aDsKICAgICAgICByZXN1bHQuZWFzdCA9IGVhc3Q7CiAgICAgICAgcmVzdWx0Lm5vcnRoID0gbm9ydGg7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLmZyb21SYWRpYW5zID0gZnVuY3Rpb24od2VzdCwgc291dGgsIGVhc3QsIG5vcnRoLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFJlY3RhbmdsZSh3ZXN0LCBzb3V0aCwgZWFzdCwgbm9ydGgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQud2VzdCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHdlc3QsIDApOwogICAgICAgIHJlc3VsdC5zb3V0aCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHNvdXRoLCAwKTsKICAgICAgICByZXN1bHQuZWFzdCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVhc3QsIDApOwogICAgICAgIHJlc3VsdC5ub3J0aCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG5vcnRoLCAwKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBSZWN0YW5nbGUuZnJvbUNhcnRvZ3JhcGhpY0FycmF5ID0gZnVuY3Rpb24oY2FydG9ncmFwaGljcywgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJjYXJ0b2dyYXBoaWNzIiwgY2FydG9ncmFwaGljcyk7CiAgICAgICAgbGV0IHdlc3QgPSBOdW1iZXIuTUFYX1ZBTFVFOwogICAgICAgIGxldCBlYXN0ID0gLU51bWJlci5NQVhfVkFMVUU7CiAgICAgICAgbGV0IHdlc3RPdmVySURMID0gTnVtYmVyLk1BWF9WQUxVRTsKICAgICAgICBsZXQgZWFzdE92ZXJJREwgPSAtTnVtYmVyLk1BWF9WQUxVRTsKICAgICAgICBsZXQgc291dGggPSBOdW1iZXIuTUFYX1ZBTFVFOwogICAgICAgIGxldCBub3J0aCA9IC1OdW1iZXIuTUFYX1ZBTFVFOwogICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjYXJ0b2dyYXBoaWNzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGNhcnRvZ3JhcGhpY3NbaV07CiAgICAgICAgICB3ZXN0ID0gTWF0aC5taW4od2VzdCwgcG9zaXRpb24ubG9uZ2l0dWRlKTsKICAgICAgICAgIGVhc3QgPSBNYXRoLm1heChlYXN0LCBwb3NpdGlvbi5sb25naXR1ZGUpOwogICAgICAgICAgc291dGggPSBNYXRoLm1pbihzb3V0aCwgcG9zaXRpb24ubGF0aXR1ZGUpOwogICAgICAgICAgbm9ydGggPSBNYXRoLm1heChub3J0aCwgcG9zaXRpb24ubGF0aXR1ZGUpOwogICAgICAgICAgY29uc3QgbG9uQWRqdXN0ZWQgPSBwb3NpdGlvbi5sb25naXR1ZGUgPj0gMCA/IHBvc2l0aW9uLmxvbmdpdHVkZSA6IHBvc2l0aW9uLmxvbmdpdHVkZSArIE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgICB3ZXN0T3ZlcklETCA9IE1hdGgubWluKHdlc3RPdmVySURMLCBsb25BZGp1c3RlZCk7CiAgICAgICAgICBlYXN0T3ZlcklETCA9IE1hdGgubWF4KGVhc3RPdmVySURMLCBsb25BZGp1c3RlZCk7CiAgICAgICAgfQogICAgICAgIGlmIChlYXN0IC0gd2VzdCA+IGVhc3RPdmVySURMIC0gd2VzdE92ZXJJREwpIHsKICAgICAgICAgIHdlc3QgPSB3ZXN0T3ZlcklETDsKICAgICAgICAgIGVhc3QgPSBlYXN0T3ZlcklETDsKICAgICAgICAgIGlmIChlYXN0ID4gTWF0aF9kZWZhdWx0LlBJKSB7CiAgICAgICAgICAgIGVhc3QgPSBlYXN0IC0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh3ZXN0ID4gTWF0aF9kZWZhdWx0LlBJKSB7CiAgICAgICAgICAgIHdlc3QgPSB3ZXN0IC0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBSZWN0YW5nbGUod2VzdCwgc291dGgsIGVhc3QsIG5vcnRoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Lndlc3QgPSB3ZXN0OwogICAgICAgIHJlc3VsdC5zb3V0aCA9IHNvdXRoOwogICAgICAgIHJlc3VsdC5lYXN0ID0gZWFzdDsKICAgICAgICByZXN1bHQubm9ydGggPSBub3J0aDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBSZWN0YW5nbGUuZnJvbUNhcnRlc2lhbkFycmF5ID0gZnVuY3Rpb24oY2FydGVzaWFucywgZWxsaXBzb2lkLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImNhcnRlc2lhbnMiLCBjYXJ0ZXNpYW5zKTsKICAgICAgICBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChlbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LldHUzg0KTsKICAgICAgICBsZXQgd2VzdCA9IE51bWJlci5NQVhfVkFMVUU7CiAgICAgICAgbGV0IGVhc3QgPSAtTnVtYmVyLk1BWF9WQUxVRTsKICAgICAgICBsZXQgd2VzdE92ZXJJREwgPSBOdW1iZXIuTUFYX1ZBTFVFOwogICAgICAgIGxldCBlYXN0T3ZlcklETCA9IC1OdW1iZXIuTUFYX1ZBTFVFOwogICAgICAgIGxldCBzb3V0aCA9IE51bWJlci5NQVhfVkFMVUU7CiAgICAgICAgbGV0IG5vcnRoID0gLU51bWJlci5NQVhfVkFMVUU7CiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNhcnRlc2lhbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKGNhcnRlc2lhbnNbaV0pOwogICAgICAgICAgd2VzdCA9IE1hdGgubWluKHdlc3QsIHBvc2l0aW9uLmxvbmdpdHVkZSk7CiAgICAgICAgICBlYXN0ID0gTWF0aC5tYXgoZWFzdCwgcG9zaXRpb24ubG9uZ2l0dWRlKTsKICAgICAgICAgIHNvdXRoID0gTWF0aC5taW4oc291dGgsIHBvc2l0aW9uLmxhdGl0dWRlKTsKICAgICAgICAgIG5vcnRoID0gTWF0aC5tYXgobm9ydGgsIHBvc2l0aW9uLmxhdGl0dWRlKTsKICAgICAgICAgIGNvbnN0IGxvbkFkanVzdGVkID0gcG9zaXRpb24ubG9uZ2l0dWRlID49IDAgPyBwb3NpdGlvbi5sb25naXR1ZGUgOiBwb3NpdGlvbi5sb25naXR1ZGUgKyBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgICAgd2VzdE92ZXJJREwgPSBNYXRoLm1pbih3ZXN0T3ZlcklETCwgbG9uQWRqdXN0ZWQpOwogICAgICAgICAgZWFzdE92ZXJJREwgPSBNYXRoLm1heChlYXN0T3ZlcklETCwgbG9uQWRqdXN0ZWQpOwogICAgICAgIH0KICAgICAgICBpZiAoZWFzdCAtIHdlc3QgPiBlYXN0T3ZlcklETCAtIHdlc3RPdmVySURMKSB7CiAgICAgICAgICB3ZXN0ID0gd2VzdE92ZXJJREw7CiAgICAgICAgICBlYXN0ID0gZWFzdE92ZXJJREw7CiAgICAgICAgICBpZiAoZWFzdCA+IE1hdGhfZGVmYXVsdC5QSSkgewogICAgICAgICAgICBlYXN0ID0gZWFzdCAtIE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAod2VzdCA+IE1hdGhfZGVmYXVsdC5QSSkgewogICAgICAgICAgICB3ZXN0ID0gd2VzdCAtIE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKHdlc3QsIHNvdXRoLCBlYXN0LCBub3J0aCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC53ZXN0ID0gd2VzdDsKICAgICAgICByZXN1bHQuc291dGggPSBzb3V0aDsKICAgICAgICByZXN1bHQuZWFzdCA9IGVhc3Q7CiAgICAgICAgcmVzdWx0Lm5vcnRoID0gbm9ydGg7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLmNsb25lID0gZnVuY3Rpb24ocmVjdGFuZ2xlLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZWN0YW5nbGUpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFJlY3RhbmdsZSgKICAgICAgICAgICAgcmVjdGFuZ2xlLndlc3QsCiAgICAgICAgICAgIHJlY3RhbmdsZS5zb3V0aCwKICAgICAgICAgICAgcmVjdGFuZ2xlLmVhc3QsCiAgICAgICAgICAgIHJlY3RhbmdsZS5ub3J0aAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Lndlc3QgPSByZWN0YW5nbGUud2VzdDsKICAgICAgICByZXN1bHQuc291dGggPSByZWN0YW5nbGUuc291dGg7CiAgICAgICAgcmVzdWx0LmVhc3QgPSByZWN0YW5nbGUuZWFzdDsKICAgICAgICByZXN1bHQubm9ydGggPSByZWN0YW5nbGUubm9ydGg7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLmVxdWFsc0Vwc2lsb24gPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgYWJzb2x1dGVFcHNpbG9uKSB7CiAgICAgICAgYWJzb2x1dGVFcHNpbG9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoYWJzb2x1dGVFcHNpbG9uLCAwKTsKICAgICAgICByZXR1cm4gbGVmdCA9PT0gcmlnaHQgfHwgZGVmaW5lZF9kZWZhdWx0KGxlZnQpICYmIGRlZmluZWRfZGVmYXVsdChyaWdodCkgJiYgTWF0aC5hYnMobGVmdC53ZXN0IC0gcmlnaHQud2VzdCkgPD0gYWJzb2x1dGVFcHNpbG9uICYmIE1hdGguYWJzKGxlZnQuc291dGggLSByaWdodC5zb3V0aCkgPD0gYWJzb2x1dGVFcHNpbG9uICYmIE1hdGguYWJzKGxlZnQuZWFzdCAtIHJpZ2h0LmVhc3QpIDw9IGFic29sdXRlRXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0Lm5vcnRoIC0gcmlnaHQubm9ydGgpIDw9IGFic29sdXRlRXBzaWxvbjsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIHJldHVybiBSZWN0YW5nbGUuY2xvbmUodGhpcywgcmVzdWx0KTsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihvdGhlcikgewogICAgICAgIHJldHVybiBSZWN0YW5nbGUuZXF1YWxzKHRoaXMsIG90aGVyKTsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIGxlZnQud2VzdCA9PT0gcmlnaHQud2VzdCAmJiBsZWZ0LnNvdXRoID09PSByaWdodC5zb3V0aCAmJiBsZWZ0LmVhc3QgPT09IHJpZ2h0LmVhc3QgJiYgbGVmdC5ub3J0aCA9PT0gcmlnaHQubm9ydGg7CiAgICAgIH07CiAgICAgIFJlY3RhbmdsZS5wcm90b3R5cGUuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKG90aGVyLCBlcHNpbG9uKSB7CiAgICAgICAgcmV0dXJuIFJlY3RhbmdsZS5lcXVhbHNFcHNpbG9uKHRoaXMsIG90aGVyLCBlcHNpbG9uKTsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLnZhbGlkYXRlID0gZnVuY3Rpb24ocmVjdGFuZ2xlKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZWN0YW5nbGUiLCByZWN0YW5nbGUpOwogICAgICAgIGNvbnN0IG5vcnRoID0gcmVjdGFuZ2xlLm5vcnRoOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKAogICAgICAgICAgIm5vcnRoIiwKICAgICAgICAgIG5vcnRoLAogICAgICAgICAgLU1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTwogICAgICAgICk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoIm5vcnRoIiwgbm9ydGgsIE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyk7CiAgICAgICAgY29uc3Qgc291dGggPSByZWN0YW5nbGUuc291dGg7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoCiAgICAgICAgICAic291dGgiLAogICAgICAgICAgc291dGgsCiAgICAgICAgICAtTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPCiAgICAgICAgKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygic291dGgiLCBzb3V0aCwgTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPKTsKICAgICAgICBjb25zdCB3ZXN0ID0gcmVjdGFuZ2xlLndlc3Q7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoIndlc3QiLCB3ZXN0LCAtTWF0aC5QSSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoIndlc3QiLCB3ZXN0LCBNYXRoLlBJKTsKICAgICAgICBjb25zdCBlYXN0ID0gcmVjdGFuZ2xlLmVhc3Q7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoImVhc3QiLCBlYXN0LCAtTWF0aC5QSSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoImVhc3QiLCBlYXN0LCBNYXRoLlBJKTsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLnNvdXRod2VzdCA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZWN0YW5nbGUiLCByZWN0YW5nbGUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQocmVjdGFuZ2xlLndlc3QsIHJlY3RhbmdsZS5zb3V0aCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5sb25naXR1ZGUgPSByZWN0YW5nbGUud2VzdDsKICAgICAgICByZXN1bHQubGF0aXR1ZGUgPSByZWN0YW5nbGUuc291dGg7CiAgICAgICAgcmVzdWx0LmhlaWdodCA9IDA7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLm5vcnRod2VzdCA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZWN0YW5nbGUiLCByZWN0YW5nbGUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQocmVjdGFuZ2xlLndlc3QsIHJlY3RhbmdsZS5ub3J0aCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5sb25naXR1ZGUgPSByZWN0YW5nbGUud2VzdDsKICAgICAgICByZXN1bHQubGF0aXR1ZGUgPSByZWN0YW5nbGUubm9ydGg7CiAgICAgICAgcmVzdWx0LmhlaWdodCA9IDA7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLm5vcnRoZWFzdCA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZWN0YW5nbGUiLCByZWN0YW5nbGUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQocmVjdGFuZ2xlLmVhc3QsIHJlY3RhbmdsZS5ub3J0aCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5sb25naXR1ZGUgPSByZWN0YW5nbGUuZWFzdDsKICAgICAgICByZXN1bHQubGF0aXR1ZGUgPSByZWN0YW5nbGUubm9ydGg7CiAgICAgICAgcmVzdWx0LmhlaWdodCA9IDA7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLnNvdXRoZWFzdCA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZWN0YW5nbGUiLCByZWN0YW5nbGUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQocmVjdGFuZ2xlLmVhc3QsIHJlY3RhbmdsZS5zb3V0aCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5sb25naXR1ZGUgPSByZWN0YW5nbGUuZWFzdDsKICAgICAgICByZXN1bHQubGF0aXR1ZGUgPSByZWN0YW5nbGUuc291dGg7CiAgICAgICAgcmVzdWx0LmhlaWdodCA9IDA7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLmNlbnRlciA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZWN0YW5nbGUiLCByZWN0YW5nbGUpOwogICAgICAgIGxldCBlYXN0ID0gcmVjdGFuZ2xlLmVhc3Q7CiAgICAgICAgY29uc3Qgd2VzdCA9IHJlY3RhbmdsZS53ZXN0OwogICAgICAgIGlmIChlYXN0IDwgd2VzdCkgewogICAgICAgICAgZWFzdCArPSBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgIH0KICAgICAgICBjb25zdCBsb25naXR1ZGUgPSBNYXRoX2RlZmF1bHQubmVnYXRpdmVQaVRvUGkoKHdlc3QgKyBlYXN0KSAqIDAuNSk7CiAgICAgICAgY29uc3QgbGF0aXR1ZGUgPSAocmVjdGFuZ2xlLnNvdXRoICsgcmVjdGFuZ2xlLm5vcnRoKSAqIDAuNTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KGxvbmdpdHVkZSwgbGF0aXR1ZGUpOwogICAgICAgIH0KICAgICAgICByZXN1bHQubG9uZ2l0dWRlID0gbG9uZ2l0dWRlOwogICAgICAgIHJlc3VsdC5sYXRpdHVkZSA9IGxhdGl0dWRlOwogICAgICAgIHJlc3VsdC5oZWlnaHQgPSAwOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFJlY3RhbmdsZS5pbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihyZWN0YW5nbGUsIG90aGVyUmVjdGFuZ2xlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJvdGhlclJlY3RhbmdsZSIsIG90aGVyUmVjdGFuZ2xlKTsKICAgICAgICBsZXQgcmVjdGFuZ2xlRWFzdCA9IHJlY3RhbmdsZS5lYXN0OwogICAgICAgIGxldCByZWN0YW5nbGVXZXN0ID0gcmVjdGFuZ2xlLndlc3Q7CiAgICAgICAgbGV0IG90aGVyUmVjdGFuZ2xlRWFzdCA9IG90aGVyUmVjdGFuZ2xlLmVhc3Q7CiAgICAgICAgbGV0IG90aGVyUmVjdGFuZ2xlV2VzdCA9IG90aGVyUmVjdGFuZ2xlLndlc3Q7CiAgICAgICAgaWYgKHJlY3RhbmdsZUVhc3QgPCByZWN0YW5nbGVXZXN0ICYmIG90aGVyUmVjdGFuZ2xlRWFzdCA+IDApIHsKICAgICAgICAgIHJlY3RhbmdsZUVhc3QgKz0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICB9IGVsc2UgaWYgKG90aGVyUmVjdGFuZ2xlRWFzdCA8IG90aGVyUmVjdGFuZ2xlV2VzdCAmJiByZWN0YW5nbGVFYXN0ID4gMCkgewogICAgICAgICAgb3RoZXJSZWN0YW5nbGVFYXN0ICs9IE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgfQogICAgICAgIGlmIChyZWN0YW5nbGVFYXN0IDwgcmVjdGFuZ2xlV2VzdCAmJiBvdGhlclJlY3RhbmdsZVdlc3QgPCAwKSB7CiAgICAgICAgICBvdGhlclJlY3RhbmdsZVdlc3QgKz0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICB9IGVsc2UgaWYgKG90aGVyUmVjdGFuZ2xlRWFzdCA8IG90aGVyUmVjdGFuZ2xlV2VzdCAmJiByZWN0YW5nbGVXZXN0IDwgMCkgewogICAgICAgICAgcmVjdGFuZ2xlV2VzdCArPSBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgIH0KICAgICAgICBjb25zdCB3ZXN0ID0gTWF0aF9kZWZhdWx0Lm5lZ2F0aXZlUGlUb1BpKAogICAgICAgICAgTWF0aC5tYXgocmVjdGFuZ2xlV2VzdCwgb3RoZXJSZWN0YW5nbGVXZXN0KQogICAgICAgICk7CiAgICAgICAgY29uc3QgZWFzdCA9IE1hdGhfZGVmYXVsdC5uZWdhdGl2ZVBpVG9QaSgKICAgICAgICAgIE1hdGgubWluKHJlY3RhbmdsZUVhc3QsIG90aGVyUmVjdGFuZ2xlRWFzdCkKICAgICAgICApOwogICAgICAgIGlmICgocmVjdGFuZ2xlLndlc3QgPCByZWN0YW5nbGUuZWFzdCB8fCBvdGhlclJlY3RhbmdsZS53ZXN0IDwgb3RoZXJSZWN0YW5nbGUuZWFzdCkgJiYgZWFzdCA8PSB3ZXN0KSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBjb25zdCBzb3V0aCA9IE1hdGgubWF4KHJlY3RhbmdsZS5zb3V0aCwgb3RoZXJSZWN0YW5nbGUuc291dGgpOwogICAgICAgIGNvbnN0IG5vcnRoID0gTWF0aC5taW4ocmVjdGFuZ2xlLm5vcnRoLCBvdGhlclJlY3RhbmdsZS5ub3J0aCk7CiAgICAgICAgaWYgKHNvdXRoID49IG5vcnRoKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFJlY3RhbmdsZSh3ZXN0LCBzb3V0aCwgZWFzdCwgbm9ydGgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQud2VzdCA9IHdlc3Q7CiAgICAgICAgcmVzdWx0LnNvdXRoID0gc291dGg7CiAgICAgICAgcmVzdWx0LmVhc3QgPSBlYXN0OwogICAgICAgIHJlc3VsdC5ub3J0aCA9IG5vcnRoOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFJlY3RhbmdsZS5zaW1wbGVJbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihyZWN0YW5nbGUsIG90aGVyUmVjdGFuZ2xlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJvdGhlclJlY3RhbmdsZSIsIG90aGVyUmVjdGFuZ2xlKTsKICAgICAgICBjb25zdCB3ZXN0ID0gTWF0aC5tYXgocmVjdGFuZ2xlLndlc3QsIG90aGVyUmVjdGFuZ2xlLndlc3QpOwogICAgICAgIGNvbnN0IHNvdXRoID0gTWF0aC5tYXgocmVjdGFuZ2xlLnNvdXRoLCBvdGhlclJlY3RhbmdsZS5zb3V0aCk7CiAgICAgICAgY29uc3QgZWFzdCA9IE1hdGgubWluKHJlY3RhbmdsZS5lYXN0LCBvdGhlclJlY3RhbmdsZS5lYXN0KTsKICAgICAgICBjb25zdCBub3J0aCA9IE1hdGgubWluKHJlY3RhbmdsZS5ub3J0aCwgb3RoZXJSZWN0YW5nbGUubm9ydGgpOwogICAgICAgIGlmIChzb3V0aCA+PSBub3J0aCB8fCB3ZXN0ID49IGVhc3QpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKHdlc3QsIHNvdXRoLCBlYXN0LCBub3J0aCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC53ZXN0ID0gd2VzdDsKICAgICAgICByZXN1bHQuc291dGggPSBzb3V0aDsKICAgICAgICByZXN1bHQuZWFzdCA9IGVhc3Q7CiAgICAgICAgcmVzdWx0Lm5vcnRoID0gbm9ydGg7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLnVuaW9uID0gZnVuY3Rpb24ocmVjdGFuZ2xlLCBvdGhlclJlY3RhbmdsZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZWN0YW5nbGUiLCByZWN0YW5nbGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgib3RoZXJSZWN0YW5nbGUiLCBvdGhlclJlY3RhbmdsZSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IFJlY3RhbmdsZSgpOwogICAgICAgIH0KICAgICAgICBsZXQgcmVjdGFuZ2xlRWFzdCA9IHJlY3RhbmdsZS5lYXN0OwogICAgICAgIGxldCByZWN0YW5nbGVXZXN0ID0gcmVjdGFuZ2xlLndlc3Q7CiAgICAgICAgbGV0IG90aGVyUmVjdGFuZ2xlRWFzdCA9IG90aGVyUmVjdGFuZ2xlLmVhc3Q7CiAgICAgICAgbGV0IG90aGVyUmVjdGFuZ2xlV2VzdCA9IG90aGVyUmVjdGFuZ2xlLndlc3Q7CiAgICAgICAgaWYgKHJlY3RhbmdsZUVhc3QgPCByZWN0YW5nbGVXZXN0ICYmIG90aGVyUmVjdGFuZ2xlRWFzdCA+IDApIHsKICAgICAgICAgIHJlY3RhbmdsZUVhc3QgKz0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICB9IGVsc2UgaWYgKG90aGVyUmVjdGFuZ2xlRWFzdCA8IG90aGVyUmVjdGFuZ2xlV2VzdCAmJiByZWN0YW5nbGVFYXN0ID4gMCkgewogICAgICAgICAgb3RoZXJSZWN0YW5nbGVFYXN0ICs9IE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgfQogICAgICAgIGlmIChyZWN0YW5nbGVFYXN0IDwgcmVjdGFuZ2xlV2VzdCAmJiBvdGhlclJlY3RhbmdsZVdlc3QgPCAwKSB7CiAgICAgICAgICBvdGhlclJlY3RhbmdsZVdlc3QgKz0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICB9IGVsc2UgaWYgKG90aGVyUmVjdGFuZ2xlRWFzdCA8IG90aGVyUmVjdGFuZ2xlV2VzdCAmJiByZWN0YW5nbGVXZXN0IDwgMCkgewogICAgICAgICAgcmVjdGFuZ2xlV2VzdCArPSBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgIH0KICAgICAgICBjb25zdCB3ZXN0ID0gTWF0aF9kZWZhdWx0Lm5lZ2F0aXZlUGlUb1BpKAogICAgICAgICAgTWF0aC5taW4ocmVjdGFuZ2xlV2VzdCwgb3RoZXJSZWN0YW5nbGVXZXN0KQogICAgICAgICk7CiAgICAgICAgY29uc3QgZWFzdCA9IE1hdGhfZGVmYXVsdC5uZWdhdGl2ZVBpVG9QaSgKICAgICAgICAgIE1hdGgubWF4KHJlY3RhbmdsZUVhc3QsIG90aGVyUmVjdGFuZ2xlRWFzdCkKICAgICAgICApOwogICAgICAgIHJlc3VsdC53ZXN0ID0gd2VzdDsKICAgICAgICByZXN1bHQuc291dGggPSBNYXRoLm1pbihyZWN0YW5nbGUuc291dGgsIG90aGVyUmVjdGFuZ2xlLnNvdXRoKTsKICAgICAgICByZXN1bHQuZWFzdCA9IGVhc3Q7CiAgICAgICAgcmVzdWx0Lm5vcnRoID0gTWF0aC5tYXgocmVjdGFuZ2xlLm5vcnRoLCBvdGhlclJlY3RhbmdsZS5ub3J0aCk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLmV4cGFuZCA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgY2FydG9ncmFwaGljMiwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZWN0YW5nbGUiLCByZWN0YW5nbGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydG9ncmFwaGljIiwgY2FydG9ncmFwaGljMik7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IFJlY3RhbmdsZSgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQud2VzdCA9IE1hdGgubWluKHJlY3RhbmdsZS53ZXN0LCBjYXJ0b2dyYXBoaWMyLmxvbmdpdHVkZSk7CiAgICAgICAgcmVzdWx0LnNvdXRoID0gTWF0aC5taW4ocmVjdGFuZ2xlLnNvdXRoLCBjYXJ0b2dyYXBoaWMyLmxhdGl0dWRlKTsKICAgICAgICByZXN1bHQuZWFzdCA9IE1hdGgubWF4KHJlY3RhbmdsZS5lYXN0LCBjYXJ0b2dyYXBoaWMyLmxvbmdpdHVkZSk7CiAgICAgICAgcmVzdWx0Lm5vcnRoID0gTWF0aC5tYXgocmVjdGFuZ2xlLm5vcnRoLCBjYXJ0b2dyYXBoaWMyLmxhdGl0dWRlKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBSZWN0YW5nbGUuY29udGFpbnMgPSBmdW5jdGlvbihyZWN0YW5nbGUsIGNhcnRvZ3JhcGhpYzIpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0b2dyYXBoaWMiLCBjYXJ0b2dyYXBoaWMyKTsKICAgICAgICBsZXQgbG9uZ2l0dWRlID0gY2FydG9ncmFwaGljMi5sb25naXR1ZGU7CiAgICAgICAgY29uc3QgbGF0aXR1ZGUgPSBjYXJ0b2dyYXBoaWMyLmxhdGl0dWRlOwogICAgICAgIGNvbnN0IHdlc3QgPSByZWN0YW5nbGUud2VzdDsKICAgICAgICBsZXQgZWFzdCA9IHJlY3RhbmdsZS5lYXN0OwogICAgICAgIGlmIChlYXN0IDwgd2VzdCkgewogICAgICAgICAgZWFzdCArPSBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgICAgaWYgKGxvbmdpdHVkZSA8IDApIHsKICAgICAgICAgICAgbG9uZ2l0dWRlICs9IE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiAobG9uZ2l0dWRlID4gd2VzdCB8fCBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihsb25naXR1ZGUsIHdlc3QsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTQpKSAmJiAobG9uZ2l0dWRlIDwgZWFzdCB8fCBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihsb25naXR1ZGUsIGVhc3QsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTQpKSAmJiBsYXRpdHVkZSA+PSByZWN0YW5nbGUuc291dGggJiYgbGF0aXR1ZGUgPD0gcmVjdGFuZ2xlLm5vcnRoOwogICAgICB9OwogICAgICBzdWJzYW1wbGVMbGFTY3JhdGNoID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIFJlY3RhbmdsZS5zdWJzYW1wbGUgPSBmdW5jdGlvbihyZWN0YW5nbGUsIGVsbGlwc29pZCwgc3VyZmFjZUhlaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZWN0YW5nbGUiLCByZWN0YW5nbGUpOwogICAgICAgIGVsbGlwc29pZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuV0dTODQpOwogICAgICAgIHN1cmZhY2VIZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdXJmYWNlSGVpZ2h0LCAwKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBbXTsKICAgICAgICB9CiAgICAgICAgbGV0IGxlbmd0aCA9IDA7CiAgICAgICAgY29uc3Qgbm9ydGggPSByZWN0YW5nbGUubm9ydGg7CiAgICAgICAgY29uc3Qgc291dGggPSByZWN0YW5nbGUuc291dGg7CiAgICAgICAgY29uc3QgZWFzdCA9IHJlY3RhbmdsZS5lYXN0OwogICAgICAgIGNvbnN0IHdlc3QgPSByZWN0YW5nbGUud2VzdDsKICAgICAgICBjb25zdCBsbGEgPSBzdWJzYW1wbGVMbGFTY3JhdGNoOwogICAgICAgIGxsYS5oZWlnaHQgPSBzdXJmYWNlSGVpZ2h0OwogICAgICAgIGxsYS5sb25naXR1ZGUgPSB3ZXN0OwogICAgICAgIGxsYS5sYXRpdHVkZSA9IG5vcnRoOwogICAgICAgIHJlc3VsdFtsZW5ndGhdID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGxsYSwgcmVzdWx0W2xlbmd0aF0pOwogICAgICAgIGxlbmd0aCsrOwogICAgICAgIGxsYS5sb25naXR1ZGUgPSBlYXN0OwogICAgICAgIHJlc3VsdFtsZW5ndGhdID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGxsYSwgcmVzdWx0W2xlbmd0aF0pOwogICAgICAgIGxlbmd0aCsrOwogICAgICAgIGxsYS5sYXRpdHVkZSA9IHNvdXRoOwogICAgICAgIHJlc3VsdFtsZW5ndGhdID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGxsYSwgcmVzdWx0W2xlbmd0aF0pOwogICAgICAgIGxlbmd0aCsrOwogICAgICAgIGxsYS5sb25naXR1ZGUgPSB3ZXN0OwogICAgICAgIHJlc3VsdFtsZW5ndGhdID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGxsYSwgcmVzdWx0W2xlbmd0aF0pOwogICAgICAgIGxlbmd0aCsrOwogICAgICAgIGlmIChub3J0aCA8IDApIHsKICAgICAgICAgIGxsYS5sYXRpdHVkZSA9IG5vcnRoOwogICAgICAgIH0gZWxzZSBpZiAoc291dGggPiAwKSB7CiAgICAgICAgICBsbGEubGF0aXR1ZGUgPSBzb3V0aDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgbGxhLmxhdGl0dWRlID0gMDsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCA4OyArK2kpIHsKICAgICAgICAgIGxsYS5sb25naXR1ZGUgPSAtTWF0aC5QSSArIGkgKiBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV087CiAgICAgICAgICBpZiAoUmVjdGFuZ2xlLmNvbnRhaW5zKHJlY3RhbmdsZSwgbGxhKSkgewogICAgICAgICAgICByZXN1bHRbbGVuZ3RoXSA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihsbGEsIHJlc3VsdFtsZW5ndGhdKTsKICAgICAgICAgICAgbGVuZ3RoKys7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChsbGEubGF0aXR1ZGUgPT09IDApIHsKICAgICAgICAgIGxsYS5sb25naXR1ZGUgPSB3ZXN0OwogICAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4obGxhLCByZXN1bHRbbGVuZ3RoXSk7CiAgICAgICAgICBsZW5ndGgrKzsKICAgICAgICAgIGxsYS5sb25naXR1ZGUgPSBlYXN0OwogICAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4obGxhLCByZXN1bHRbbGVuZ3RoXSk7CiAgICAgICAgICBsZW5ndGgrKzsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IGxlbmd0aDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBSZWN0YW5nbGUuc3Vic2VjdGlvbiA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgd2VzdExlcnAsIHNvdXRoTGVycCwgZWFzdExlcnAsIG5vcnRoTGVycCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZWN0YW5nbGUiLCByZWN0YW5nbGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJ3ZXN0TGVycCIsIHdlc3RMZXJwLCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygid2VzdExlcnAiLCB3ZXN0TGVycCwgMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoInNvdXRoTGVycCIsIHNvdXRoTGVycCwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoInNvdXRoTGVycCIsIHNvdXRoTGVycCwgMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoImVhc3RMZXJwIiwgZWFzdExlcnAsIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJlYXN0TGVycCIsIGVhc3RMZXJwLCAxKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygibm9ydGhMZXJwIiwgbm9ydGhMZXJwLCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygibm9ydGhMZXJwIiwgbm9ydGhMZXJwLCAxKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygid2VzdExlcnAiLCB3ZXN0TGVycCwgZWFzdExlcnApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJzb3V0aExlcnAiLCBzb3V0aExlcnAsIG5vcnRoTGVycCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IFJlY3RhbmdsZSgpOwogICAgICAgIH0KICAgICAgICBpZiAocmVjdGFuZ2xlLndlc3QgPD0gcmVjdGFuZ2xlLmVhc3QpIHsKICAgICAgICAgIGNvbnN0IHdpZHRoID0gcmVjdGFuZ2xlLmVhc3QgLSByZWN0YW5nbGUud2VzdDsKICAgICAgICAgIHJlc3VsdC53ZXN0ID0gcmVjdGFuZ2xlLndlc3QgKyB3ZXN0TGVycCAqIHdpZHRoOwogICAgICAgICAgcmVzdWx0LmVhc3QgPSByZWN0YW5nbGUud2VzdCArIGVhc3RMZXJwICogd2lkdGg7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnN0IHdpZHRoID0gTWF0aF9kZWZhdWx0LlRXT19QSSArIHJlY3RhbmdsZS5lYXN0IC0gcmVjdGFuZ2xlLndlc3Q7CiAgICAgICAgICByZXN1bHQud2VzdCA9IE1hdGhfZGVmYXVsdC5uZWdhdGl2ZVBpVG9QaShyZWN0YW5nbGUud2VzdCArIHdlc3RMZXJwICogd2lkdGgpOwogICAgICAgICAgcmVzdWx0LmVhc3QgPSBNYXRoX2RlZmF1bHQubmVnYXRpdmVQaVRvUGkocmVjdGFuZ2xlLndlc3QgKyBlYXN0TGVycCAqIHdpZHRoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgaGVpZ2h0ID0gcmVjdGFuZ2xlLm5vcnRoIC0gcmVjdGFuZ2xlLnNvdXRoOwogICAgICAgIHJlc3VsdC5zb3V0aCA9IHJlY3RhbmdsZS5zb3V0aCArIHNvdXRoTGVycCAqIGhlaWdodDsKICAgICAgICByZXN1bHQubm9ydGggPSByZWN0YW5nbGUuc291dGggKyBub3J0aExlcnAgKiBoZWlnaHQ7CiAgICAgICAgaWYgKHdlc3RMZXJwID09PSAxKSB7CiAgICAgICAgICByZXN1bHQud2VzdCA9IHJlY3RhbmdsZS5lYXN0OwogICAgICAgIH0KICAgICAgICBpZiAoZWFzdExlcnAgPT09IDEpIHsKICAgICAgICAgIHJlc3VsdC5lYXN0ID0gcmVjdGFuZ2xlLmVhc3Q7CiAgICAgICAgfQogICAgICAgIGlmIChzb3V0aExlcnAgPT09IDEpIHsKICAgICAgICAgIHJlc3VsdC5zb3V0aCA9IHJlY3RhbmdsZS5ub3J0aDsKICAgICAgICB9CiAgICAgICAgaWYgKG5vcnRoTGVycCA9PT0gMSkgewogICAgICAgICAgcmVzdWx0Lm5vcnRoID0gcmVjdGFuZ2xlLm5vcnRoOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBSZWN0YW5nbGUuTUFYX1ZBTFVFID0gT2JqZWN0LmZyZWV6ZSgKICAgICAgICBuZXcgUmVjdGFuZ2xlKAogICAgICAgICAgLU1hdGguUEksCiAgICAgICAgICAtTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPLAogICAgICAgICAgTWF0aC5QSSwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTwogICAgICAgICkKICAgICAgKTsKICAgICAgUmVjdGFuZ2xlX2RlZmF1bHQgPSBSZWN0YW5nbGU7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Cb3VuZGluZ1NwaGVyZS5qcwogIGZ1bmN0aW9uIEJvdW5kaW5nU3BoZXJlKGNlbnRlciwgcmFkaXVzKSB7CiAgICB0aGlzLmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShkZWZhdWx0VmFsdWVfZGVmYXVsdChjZW50ZXIsIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPKSk7CiAgICB0aGlzLnJhZGl1cyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHJhZGl1cywgMCk7CiAgfQogIHZhciBmcm9tUG9pbnRzWE1pbiwgZnJvbVBvaW50c1lNaW4sIGZyb21Qb2ludHNaTWluLCBmcm9tUG9pbnRzWE1heCwgZnJvbVBvaW50c1lNYXgsIGZyb21Qb2ludHNaTWF4LCBmcm9tUG9pbnRzQ3VycmVudFBvcywgZnJvbVBvaW50c1NjcmF0Y2gsIGZyb21Qb2ludHNSaXR0ZXJDZW50ZXIsIGZyb21Qb2ludHNNaW5Cb3hQdCwgZnJvbVBvaW50c01heEJveFB0LCBmcm9tUG9pbnRzTmFpdmVDZW50ZXJTY3JhdGNoLCB2b2x1bWVDb25zdGFudCwgZGVmYXVsdFByb2plY3Rpb24sIGZyb21SZWN0YW5nbGUyRExvd2VyTGVmdCwgZnJvbVJlY3RhbmdsZTJEVXBwZXJSaWdodCwgZnJvbVJlY3RhbmdsZTJEU291dGh3ZXN0LCBmcm9tUmVjdGFuZ2xlMkROb3J0aGVhc3QsIGZyb21SZWN0YW5nbGUzRFNjcmF0Y2gsIGZyb21Cb3VuZGluZ1NwaGVyZXNTY3JhdGNoLCBmcm9tT3JpZW50ZWRCb3VuZGluZ0JveFNjcmF0Y2hVLCBmcm9tT3JpZW50ZWRCb3VuZGluZ0JveFNjcmF0Y2hWLCBmcm9tT3JpZW50ZWRCb3VuZGluZ0JveFNjcmF0Y2hXLCBzY3JhdGNoRnJvbVRyYW5zZm9ybWF0aW9uQ2VudGVyLCBzY3JhdGNoRnJvbVRyYW5zZm9ybWF0aW9uU2NhbGUsIHVuaW9uU2NyYXRjaCwgdW5pb25TY3JhdGNoQ2VudGVyLCBleHBhbmRTY3JhdGNoLCBkaXN0YW5jZVNxdWFyZWRUb1NjcmF0Y2gsIHNjcmF0Y2hDYXJ0ZXNpYW4zLCBwcm9qZWN0VG8yRE5vcm1hbFNjcmF0Y2gsIHByb2plY3RUbzJERWFzdFNjcmF0Y2gsIHByb2plY3RUbzJETm9ydGhTY3JhdGNoLCBwcm9qZWN0VG8yRFdlc3RTY3JhdGNoLCBwcm9qZWN0VG8yRFNvdXRoU2NyYXRjaCwgcHJvamVjdFRvMkRDYXJ0b2dyYXBoaWNTY3JhdGNoLCBwcm9qZWN0VG8yRFBvc2l0aW9uc1NjcmF0Y2gsIHByb2plY3RUbzJEUHJvamVjdGlvbiwgQm91bmRpbmdTcGhlcmVfZGVmYXVsdDsKICB2YXIgaW5pdF9Cb3VuZGluZ1NwaGVyZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQm91bmRpbmdTcGhlcmUuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9HZW9ncmFwaGljUHJvamVjdGlvbigpOwogICAgICBpbml0X0ludGVyc2VjdCgpOwogICAgICBpbml0X0ludGVydmFsKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDMoKTsKICAgICAgaW5pdF9NYXRyaXg0KCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlKCk7CiAgICAgIGZyb21Qb2ludHNYTWluID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBmcm9tUG9pbnRzWU1pbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZnJvbVBvaW50c1pNaW4gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZyb21Qb2ludHNYTWF4ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBmcm9tUG9pbnRzWU1heCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZnJvbVBvaW50c1pNYXggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZyb21Qb2ludHNDdXJyZW50UG9zID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBmcm9tUG9pbnRzU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZnJvbVBvaW50c1JpdHRlckNlbnRlciA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZnJvbVBvaW50c01pbkJveFB0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBmcm9tUG9pbnRzTWF4Qm94UHQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZyb21Qb2ludHNOYWl2ZUNlbnRlclNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHZvbHVtZUNvbnN0YW50ID0gNCAvIDMgKiBNYXRoX2RlZmF1bHQuUEk7CiAgICAgIEJvdW5kaW5nU3BoZXJlLmZyb21Qb2ludHMgPSBmdW5jdGlvbihwb3NpdGlvbnMsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBCb3VuZGluZ1NwaGVyZSgpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwb3NpdGlvbnMpIHx8IHBvc2l0aW9ucy5sZW5ndGggPT09IDApIHsKICAgICAgICAgIHJlc3VsdC5jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIHJlc3VsdC5jZW50ZXIpOwogICAgICAgICAgcmVzdWx0LnJhZGl1cyA9IDA7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBjb25zdCBjdXJyZW50UG9zID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHBvc2l0aW9uc1swXSwgZnJvbVBvaW50c0N1cnJlbnRQb3MpOwogICAgICAgIGNvbnN0IHhNaW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1hNaW4pOwogICAgICAgIGNvbnN0IHlNaW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1lNaW4pOwogICAgICAgIGNvbnN0IHpNaW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1pNaW4pOwogICAgICAgIGNvbnN0IHhNYXggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1hNYXgpOwogICAgICAgIGNvbnN0IHlNYXggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1lNYXgpOwogICAgICAgIGNvbnN0IHpNYXggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1pNYXgpOwogICAgICAgIGNvbnN0IG51bVBvc2l0aW9ucyA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgbGV0IGk7CiAgICAgICAgZm9yIChpID0gMTsgaSA8IG51bVBvc2l0aW9uczsgaSsrKSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocG9zaXRpb25zW2ldLCBjdXJyZW50UG9zKTsKICAgICAgICAgIGNvbnN0IHggPSBjdXJyZW50UG9zLng7CiAgICAgICAgICBjb25zdCB5ID0gY3VycmVudFBvcy55OwogICAgICAgICAgY29uc3QgeiA9IGN1cnJlbnRQb3MuejsKICAgICAgICAgIGlmICh4IDwgeE1pbi54KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB4TWluKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh4ID4geE1heC54KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB4TWF4KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh5IDwgeU1pbi55KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB5TWluKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh5ID4geU1heC55KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB5TWF4KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh6IDwgek1pbi56KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB6TWluKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh6ID4gek1heC56KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB6TWF4KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgeFNwYW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCh4TWF4LCB4TWluLCBmcm9tUG9pbnRzU2NyYXRjaCkKICAgICAgICApOwogICAgICAgIGNvbnN0IHlTcGFuID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZVNxdWFyZWQoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoeU1heCwgeU1pbiwgZnJvbVBvaW50c1NjcmF0Y2gpCiAgICAgICAgKTsKICAgICAgICBjb25zdCB6U3BhbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGVTcXVhcmVkKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHpNYXgsIHpNaW4sIGZyb21Qb2ludHNTY3JhdGNoKQogICAgICAgICk7CiAgICAgICAgbGV0IGRpYW1ldGVyMSA9IHhNaW47CiAgICAgICAgbGV0IGRpYW1ldGVyMiA9IHhNYXg7CiAgICAgICAgbGV0IG1heFNwYW4gPSB4U3BhbjsKICAgICAgICBpZiAoeVNwYW4gPiBtYXhTcGFuKSB7CiAgICAgICAgICBtYXhTcGFuID0geVNwYW47CiAgICAgICAgICBkaWFtZXRlcjEgPSB5TWluOwogICAgICAgICAgZGlhbWV0ZXIyID0geU1heDsKICAgICAgICB9CiAgICAgICAgaWYgKHpTcGFuID4gbWF4U3BhbikgewogICAgICAgICAgbWF4U3BhbiA9IHpTcGFuOwogICAgICAgICAgZGlhbWV0ZXIxID0gek1pbjsKICAgICAgICAgIGRpYW1ldGVyMiA9IHpNYXg7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJpdHRlckNlbnRlciA9IGZyb21Qb2ludHNSaXR0ZXJDZW50ZXI7CiAgICAgICAgcml0dGVyQ2VudGVyLnggPSAoZGlhbWV0ZXIxLnggKyBkaWFtZXRlcjIueCkgKiAwLjU7CiAgICAgICAgcml0dGVyQ2VudGVyLnkgPSAoZGlhbWV0ZXIxLnkgKyBkaWFtZXRlcjIueSkgKiAwLjU7CiAgICAgICAgcml0dGVyQ2VudGVyLnogPSAoZGlhbWV0ZXIxLnogKyBkaWFtZXRlcjIueikgKiAwLjU7CiAgICAgICAgbGV0IHJhZGl1c1NxdWFyZWQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChkaWFtZXRlcjIsIHJpdHRlckNlbnRlciwgZnJvbVBvaW50c1NjcmF0Y2gpCiAgICAgICAgKTsKICAgICAgICBsZXQgcml0dGVyUmFkaXVzID0gTWF0aC5zcXJ0KHJhZGl1c1NxdWFyZWQpOwogICAgICAgIGNvbnN0IG1pbkJveFB0ID0gZnJvbVBvaW50c01pbkJveFB0OwogICAgICAgIG1pbkJveFB0LnggPSB4TWluLng7CiAgICAgICAgbWluQm94UHQueSA9IHlNaW4ueTsKICAgICAgICBtaW5Cb3hQdC56ID0gek1pbi56OwogICAgICAgIGNvbnN0IG1heEJveFB0ID0gZnJvbVBvaW50c01heEJveFB0OwogICAgICAgIG1heEJveFB0LnggPSB4TWF4Lng7CiAgICAgICAgbWF4Qm94UHQueSA9IHlNYXgueTsKICAgICAgICBtYXhCb3hQdC56ID0gek1heC56OwogICAgICAgIGNvbnN0IG5haXZlQ2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1pZHBvaW50KAogICAgICAgICAgbWluQm94UHQsCiAgICAgICAgICBtYXhCb3hQdCwKICAgICAgICAgIGZyb21Qb2ludHNOYWl2ZUNlbnRlclNjcmF0Y2gKICAgICAgICApOwogICAgICAgIGxldCBuYWl2ZVJhZGl1cyA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bVBvc2l0aW9uczsgaSsrKSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocG9zaXRpb25zW2ldLCBjdXJyZW50UG9zKTsKICAgICAgICAgIGNvbnN0IHIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoY3VycmVudFBvcywgbmFpdmVDZW50ZXIsIGZyb21Qb2ludHNTY3JhdGNoKQogICAgICAgICAgKTsKICAgICAgICAgIGlmIChyID4gbmFpdmVSYWRpdXMpIHsKICAgICAgICAgICAgbmFpdmVSYWRpdXMgPSByOwogICAgICAgICAgfQogICAgICAgICAgY29uc3Qgb2xkQ2VudGVyVG9Qb2ludFNxdWFyZWQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCgKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGN1cnJlbnRQb3MsIHJpdHRlckNlbnRlciwgZnJvbVBvaW50c1NjcmF0Y2gpCiAgICAgICAgICApOwogICAgICAgICAgaWYgKG9sZENlbnRlclRvUG9pbnRTcXVhcmVkID4gcmFkaXVzU3F1YXJlZCkgewogICAgICAgICAgICBjb25zdCBvbGRDZW50ZXJUb1BvaW50ID0gTWF0aC5zcXJ0KG9sZENlbnRlclRvUG9pbnRTcXVhcmVkKTsKICAgICAgICAgICAgcml0dGVyUmFkaXVzID0gKHJpdHRlclJhZGl1cyArIG9sZENlbnRlclRvUG9pbnQpICogMC41OwogICAgICAgICAgICByYWRpdXNTcXVhcmVkID0gcml0dGVyUmFkaXVzICogcml0dGVyUmFkaXVzOwogICAgICAgICAgICBjb25zdCBvbGRUb05ldyA9IG9sZENlbnRlclRvUG9pbnQgLSByaXR0ZXJSYWRpdXM7CiAgICAgICAgICAgIHJpdHRlckNlbnRlci54ID0gKHJpdHRlclJhZGl1cyAqIHJpdHRlckNlbnRlci54ICsgb2xkVG9OZXcgKiBjdXJyZW50UG9zLngpIC8gb2xkQ2VudGVyVG9Qb2ludDsKICAgICAgICAgICAgcml0dGVyQ2VudGVyLnkgPSAocml0dGVyUmFkaXVzICogcml0dGVyQ2VudGVyLnkgKyBvbGRUb05ldyAqIGN1cnJlbnRQb3MueSkgLyBvbGRDZW50ZXJUb1BvaW50OwogICAgICAgICAgICByaXR0ZXJDZW50ZXIueiA9IChyaXR0ZXJSYWRpdXMgKiByaXR0ZXJDZW50ZXIueiArIG9sZFRvTmV3ICogY3VycmVudFBvcy56KSAvIG9sZENlbnRlclRvUG9pbnQ7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChyaXR0ZXJSYWRpdXMgPCBuYWl2ZVJhZGl1cykgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHJpdHRlckNlbnRlciwgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgICByZXN1bHQucmFkaXVzID0gcml0dGVyUmFkaXVzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUobmFpdmVDZW50ZXIsIHJlc3VsdC5jZW50ZXIpOwogICAgICAgICAgcmVzdWx0LnJhZGl1cyA9IG5haXZlUmFkaXVzOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBkZWZhdWx0UHJvamVjdGlvbiA9IG5ldyBHZW9ncmFwaGljUHJvamVjdGlvbl9kZWZhdWx0KCk7CiAgICAgIGZyb21SZWN0YW5nbGUyRExvd2VyTGVmdCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZnJvbVJlY3RhbmdsZTJEVXBwZXJSaWdodCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZnJvbVJlY3RhbmdsZTJEU291dGh3ZXN0ID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIGZyb21SZWN0YW5nbGUyRE5vcnRoZWFzdCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBCb3VuZGluZ1NwaGVyZS5mcm9tUmVjdGFuZ2xlMkQgPSBmdW5jdGlvbihyZWN0YW5nbGUsIHByb2plY3Rpb24sIHJlc3VsdCkgewogICAgICAgIHJldHVybiBCb3VuZGluZ1NwaGVyZS5mcm9tUmVjdGFuZ2xlV2l0aEhlaWdodHMyRCgKICAgICAgICAgIHJlY3RhbmdsZSwKICAgICAgICAgIHByb2plY3Rpb24sCiAgICAgICAgICAwLAogICAgICAgICAgMCwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nU3BoZXJlLmZyb21SZWN0YW5nbGVXaXRoSGVpZ2h0czJEID0gZnVuY3Rpb24ocmVjdGFuZ2xlLCBwcm9qZWN0aW9uLCBtaW5pbXVtSGVpZ2h0LCBtYXhpbXVtSGVpZ2h0LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQm91bmRpbmdTcGhlcmUoKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVjdGFuZ2xlKSkgewogICAgICAgICAgcmVzdWx0LmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgICByZXN1bHQucmFkaXVzID0gMDsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIHByb2plY3Rpb24gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChwcm9qZWN0aW9uLCBkZWZhdWx0UHJvamVjdGlvbik7CiAgICAgICAgUmVjdGFuZ2xlX2RlZmF1bHQuc291dGh3ZXN0KHJlY3RhbmdsZSwgZnJvbVJlY3RhbmdsZTJEU291dGh3ZXN0KTsKICAgICAgICBmcm9tUmVjdGFuZ2xlMkRTb3V0aHdlc3QuaGVpZ2h0ID0gbWluaW11bUhlaWdodDsKICAgICAgICBSZWN0YW5nbGVfZGVmYXVsdC5ub3J0aGVhc3QocmVjdGFuZ2xlLCBmcm9tUmVjdGFuZ2xlMkROb3J0aGVhc3QpOwogICAgICAgIGZyb21SZWN0YW5nbGUyRE5vcnRoZWFzdC5oZWlnaHQgPSBtYXhpbXVtSGVpZ2h0OwogICAgICAgIGNvbnN0IGxvd2VyTGVmdCA9IHByb2plY3Rpb24ucHJvamVjdCgKICAgICAgICAgIGZyb21SZWN0YW5nbGUyRFNvdXRod2VzdCwKICAgICAgICAgIGZyb21SZWN0YW5nbGUyRExvd2VyTGVmdAogICAgICAgICk7CiAgICAgICAgY29uc3QgdXBwZXJSaWdodCA9IHByb2plY3Rpb24ucHJvamVjdCgKICAgICAgICAgIGZyb21SZWN0YW5nbGUyRE5vcnRoZWFzdCwKICAgICAgICAgIGZyb21SZWN0YW5nbGUyRFVwcGVyUmlnaHQKICAgICAgICApOwogICAgICAgIGNvbnN0IHdpZHRoID0gdXBwZXJSaWdodC54IC0gbG93ZXJMZWZ0Lng7CiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdXBwZXJSaWdodC55IC0gbG93ZXJMZWZ0Lnk7CiAgICAgICAgY29uc3QgZWxldmF0aW9uID0gdXBwZXJSaWdodC56IC0gbG93ZXJMZWZ0Lno7CiAgICAgICAgcmVzdWx0LnJhZGl1cyA9IE1hdGguc3FydCh3aWR0aCAqIHdpZHRoICsgaGVpZ2h0ICogaGVpZ2h0ICsgZWxldmF0aW9uICogZWxldmF0aW9uKSAqIDAuNTsKICAgICAgICBjb25zdCBjZW50ZXIgPSByZXN1bHQuY2VudGVyOwogICAgICAgIGNlbnRlci54ID0gbG93ZXJMZWZ0LnggKyB3aWR0aCAqIDAuNTsKICAgICAgICBjZW50ZXIueSA9IGxvd2VyTGVmdC55ICsgaGVpZ2h0ICogMC41OwogICAgICAgIGNlbnRlci56ID0gbG93ZXJMZWZ0LnogKyBlbGV2YXRpb24gKiAwLjU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgZnJvbVJlY3RhbmdsZTNEU2NyYXRjaCA9IFtdOwogICAgICBCb3VuZGluZ1NwaGVyZS5mcm9tUmVjdGFuZ2xlM0QgPSBmdW5jdGlvbihyZWN0YW5nbGUsIGVsbGlwc29pZCwgc3VyZmFjZUhlaWdodCwgcmVzdWx0KSB7CiAgICAgICAgZWxsaXBzb2lkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NCk7CiAgICAgICAgc3VyZmFjZUhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN1cmZhY2VIZWlnaHQsIDApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBCb3VuZGluZ1NwaGVyZSgpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZWN0YW5nbGUpKSB7CiAgICAgICAgICByZXN1bHQuY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLCByZXN1bHQuY2VudGVyKTsKICAgICAgICAgIHJlc3VsdC5yYWRpdXMgPSAwOwogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gUmVjdGFuZ2xlX2RlZmF1bHQuc3Vic2FtcGxlKAogICAgICAgICAgcmVjdGFuZ2xlLAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgc3VyZmFjZUhlaWdodCwKICAgICAgICAgIGZyb21SZWN0YW5nbGUzRFNjcmF0Y2gKICAgICAgICApOwogICAgICAgIHJldHVybiBCb3VuZGluZ1NwaGVyZS5mcm9tUG9pbnRzKHBvc2l0aW9ucywgcmVzdWx0KTsKICAgICAgfTsKICAgICAgQm91bmRpbmdTcGhlcmUuZnJvbVZlcnRpY2VzID0gZnVuY3Rpb24ocG9zaXRpb25zLCBjZW50ZXIsIHN0cmlkZSwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEJvdW5kaW5nU3BoZXJlKCk7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9ucykgfHwgcG9zaXRpb25zLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgcmVzdWx0LmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgICByZXN1bHQucmFkaXVzID0gMDsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIGNlbnRlciA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNlbnRlciwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pOwogICAgICAgIHN0cmlkZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0cmlkZSwgMyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoInN0cmlkZSIsIHN0cmlkZSwgMyk7CiAgICAgICAgY29uc3QgY3VycmVudFBvcyA9IGZyb21Qb2ludHNDdXJyZW50UG9zOwogICAgICAgIGN1cnJlbnRQb3MueCA9IHBvc2l0aW9uc1swXSArIGNlbnRlci54OwogICAgICAgIGN1cnJlbnRQb3MueSA9IHBvc2l0aW9uc1sxXSArIGNlbnRlci55OwogICAgICAgIGN1cnJlbnRQb3MueiA9IHBvc2l0aW9uc1syXSArIGNlbnRlci56OwogICAgICAgIGNvbnN0IHhNaW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1hNaW4pOwogICAgICAgIGNvbnN0IHlNaW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1lNaW4pOwogICAgICAgIGNvbnN0IHpNaW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1pNaW4pOwogICAgICAgIGNvbnN0IHhNYXggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1hNYXgpOwogICAgICAgIGNvbnN0IHlNYXggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1lNYXgpOwogICAgICAgIGNvbnN0IHpNYXggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1pNYXgpOwogICAgICAgIGNvbnN0IG51bUVsZW1lbnRzID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBsZXQgaTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtRWxlbWVudHM7IGkgKz0gc3RyaWRlKSB7CiAgICAgICAgICBjb25zdCB4ID0gcG9zaXRpb25zW2ldICsgY2VudGVyLng7CiAgICAgICAgICBjb25zdCB5ID0gcG9zaXRpb25zW2kgKyAxXSArIGNlbnRlci55OwogICAgICAgICAgY29uc3QgeiA9IHBvc2l0aW9uc1tpICsgMl0gKyBjZW50ZXIuejsKICAgICAgICAgIGN1cnJlbnRQb3MueCA9IHg7CiAgICAgICAgICBjdXJyZW50UG9zLnkgPSB5OwogICAgICAgICAgY3VycmVudFBvcy56ID0gejsKICAgICAgICAgIGlmICh4IDwgeE1pbi54KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB4TWluKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh4ID4geE1heC54KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB4TWF4KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh5IDwgeU1pbi55KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB5TWluKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh5ID4geU1heC55KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB5TWF4KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh6IDwgek1pbi56KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB6TWluKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh6ID4gek1heC56KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB6TWF4KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgeFNwYW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCh4TWF4LCB4TWluLCBmcm9tUG9pbnRzU2NyYXRjaCkKICAgICAgICApOwogICAgICAgIGNvbnN0IHlTcGFuID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZVNxdWFyZWQoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoeU1heCwgeU1pbiwgZnJvbVBvaW50c1NjcmF0Y2gpCiAgICAgICAgKTsKICAgICAgICBjb25zdCB6U3BhbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGVTcXVhcmVkKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHpNYXgsIHpNaW4sIGZyb21Qb2ludHNTY3JhdGNoKQogICAgICAgICk7CiAgICAgICAgbGV0IGRpYW1ldGVyMSA9IHhNaW47CiAgICAgICAgbGV0IGRpYW1ldGVyMiA9IHhNYXg7CiAgICAgICAgbGV0IG1heFNwYW4gPSB4U3BhbjsKICAgICAgICBpZiAoeVNwYW4gPiBtYXhTcGFuKSB7CiAgICAgICAgICBtYXhTcGFuID0geVNwYW47CiAgICAgICAgICBkaWFtZXRlcjEgPSB5TWluOwogICAgICAgICAgZGlhbWV0ZXIyID0geU1heDsKICAgICAgICB9CiAgICAgICAgaWYgKHpTcGFuID4gbWF4U3BhbikgewogICAgICAgICAgbWF4U3BhbiA9IHpTcGFuOwogICAgICAgICAgZGlhbWV0ZXIxID0gek1pbjsKICAgICAgICAgIGRpYW1ldGVyMiA9IHpNYXg7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJpdHRlckNlbnRlciA9IGZyb21Qb2ludHNSaXR0ZXJDZW50ZXI7CiAgICAgICAgcml0dGVyQ2VudGVyLnggPSAoZGlhbWV0ZXIxLnggKyBkaWFtZXRlcjIueCkgKiAwLjU7CiAgICAgICAgcml0dGVyQ2VudGVyLnkgPSAoZGlhbWV0ZXIxLnkgKyBkaWFtZXRlcjIueSkgKiAwLjU7CiAgICAgICAgcml0dGVyQ2VudGVyLnogPSAoZGlhbWV0ZXIxLnogKyBkaWFtZXRlcjIueikgKiAwLjU7CiAgICAgICAgbGV0IHJhZGl1c1NxdWFyZWQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChkaWFtZXRlcjIsIHJpdHRlckNlbnRlciwgZnJvbVBvaW50c1NjcmF0Y2gpCiAgICAgICAgKTsKICAgICAgICBsZXQgcml0dGVyUmFkaXVzID0gTWF0aC5zcXJ0KHJhZGl1c1NxdWFyZWQpOwogICAgICAgIGNvbnN0IG1pbkJveFB0ID0gZnJvbVBvaW50c01pbkJveFB0OwogICAgICAgIG1pbkJveFB0LnggPSB4TWluLng7CiAgICAgICAgbWluQm94UHQueSA9IHlNaW4ueTsKICAgICAgICBtaW5Cb3hQdC56ID0gek1pbi56OwogICAgICAgIGNvbnN0IG1heEJveFB0ID0gZnJvbVBvaW50c01heEJveFB0OwogICAgICAgIG1heEJveFB0LnggPSB4TWF4Lng7CiAgICAgICAgbWF4Qm94UHQueSA9IHlNYXgueTsKICAgICAgICBtYXhCb3hQdC56ID0gek1heC56OwogICAgICAgIGNvbnN0IG5haXZlQ2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1pZHBvaW50KAogICAgICAgICAgbWluQm94UHQsCiAgICAgICAgICBtYXhCb3hQdCwKICAgICAgICAgIGZyb21Qb2ludHNOYWl2ZUNlbnRlclNjcmF0Y2gKICAgICAgICApOwogICAgICAgIGxldCBuYWl2ZVJhZGl1cyA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bUVsZW1lbnRzOyBpICs9IHN0cmlkZSkgewogICAgICAgICAgY3VycmVudFBvcy54ID0gcG9zaXRpb25zW2ldICsgY2VudGVyLng7CiAgICAgICAgICBjdXJyZW50UG9zLnkgPSBwb3NpdGlvbnNbaSArIDFdICsgY2VudGVyLnk7CiAgICAgICAgICBjdXJyZW50UG9zLnogPSBwb3NpdGlvbnNbaSArIDJdICsgY2VudGVyLno7CiAgICAgICAgICBjb25zdCByID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSgKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGN1cnJlbnRQb3MsIG5haXZlQ2VudGVyLCBmcm9tUG9pbnRzU2NyYXRjaCkKICAgICAgICAgICk7CiAgICAgICAgICBpZiAociA+IG5haXZlUmFkaXVzKSB7CiAgICAgICAgICAgIG5haXZlUmFkaXVzID0gcjsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IG9sZENlbnRlclRvUG9pbnRTcXVhcmVkID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZVNxdWFyZWQoCiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjdXJyZW50UG9zLCByaXR0ZXJDZW50ZXIsIGZyb21Qb2ludHNTY3JhdGNoKQogICAgICAgICAgKTsKICAgICAgICAgIGlmIChvbGRDZW50ZXJUb1BvaW50U3F1YXJlZCA+IHJhZGl1c1NxdWFyZWQpIHsKICAgICAgICAgICAgY29uc3Qgb2xkQ2VudGVyVG9Qb2ludCA9IE1hdGguc3FydChvbGRDZW50ZXJUb1BvaW50U3F1YXJlZCk7CiAgICAgICAgICAgIHJpdHRlclJhZGl1cyA9IChyaXR0ZXJSYWRpdXMgKyBvbGRDZW50ZXJUb1BvaW50KSAqIDAuNTsKICAgICAgICAgICAgcmFkaXVzU3F1YXJlZCA9IHJpdHRlclJhZGl1cyAqIHJpdHRlclJhZGl1czsKICAgICAgICAgICAgY29uc3Qgb2xkVG9OZXcgPSBvbGRDZW50ZXJUb1BvaW50IC0gcml0dGVyUmFkaXVzOwogICAgICAgICAgICByaXR0ZXJDZW50ZXIueCA9IChyaXR0ZXJSYWRpdXMgKiByaXR0ZXJDZW50ZXIueCArIG9sZFRvTmV3ICogY3VycmVudFBvcy54KSAvIG9sZENlbnRlclRvUG9pbnQ7CiAgICAgICAgICAgIHJpdHRlckNlbnRlci55ID0gKHJpdHRlclJhZGl1cyAqIHJpdHRlckNlbnRlci55ICsgb2xkVG9OZXcgKiBjdXJyZW50UG9zLnkpIC8gb2xkQ2VudGVyVG9Qb2ludDsKICAgICAgICAgICAgcml0dGVyQ2VudGVyLnogPSAocml0dGVyUmFkaXVzICogcml0dGVyQ2VudGVyLnogKyBvbGRUb05ldyAqIGN1cnJlbnRQb3MueikgLyBvbGRDZW50ZXJUb1BvaW50OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAocml0dGVyUmFkaXVzIDwgbmFpdmVSYWRpdXMpIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShyaXR0ZXJDZW50ZXIsIHJlc3VsdC5jZW50ZXIpOwogICAgICAgICAgcmVzdWx0LnJhZGl1cyA9IHJpdHRlclJhZGl1czsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG5haXZlQ2VudGVyLCByZXN1bHQuY2VudGVyKTsKICAgICAgICAgIHJlc3VsdC5yYWRpdXMgPSBuYWl2ZVJhZGl1czsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQm91bmRpbmdTcGhlcmUuZnJvbUVuY29kZWRDYXJ0ZXNpYW5WZXJ0aWNlcyA9IGZ1bmN0aW9uKHBvc2l0aW9uc0hpZ2gsIHBvc2l0aW9uc0xvdywgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEJvdW5kaW5nU3BoZXJlKCk7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9uc0hpZ2gpIHx8ICFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zTG93KSB8fCBwb3NpdGlvbnNIaWdoLmxlbmd0aCAhPT0gcG9zaXRpb25zTG93Lmxlbmd0aCB8fCBwb3NpdGlvbnNIaWdoLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgcmVzdWx0LmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgICByZXN1bHQucmFkaXVzID0gMDsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGN1cnJlbnRQb3MgPSBmcm9tUG9pbnRzQ3VycmVudFBvczsKICAgICAgICBjdXJyZW50UG9zLnggPSBwb3NpdGlvbnNIaWdoWzBdICsgcG9zaXRpb25zTG93WzBdOwogICAgICAgIGN1cnJlbnRQb3MueSA9IHBvc2l0aW9uc0hpZ2hbMV0gKyBwb3NpdGlvbnNMb3dbMV07CiAgICAgICAgY3VycmVudFBvcy56ID0gcG9zaXRpb25zSGlnaFsyXSArIHBvc2l0aW9uc0xvd1syXTsKICAgICAgICBjb25zdCB4TWluID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNYTWluKTsKICAgICAgICBjb25zdCB5TWluID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNZTWluKTsKICAgICAgICBjb25zdCB6TWluID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNaTWluKTsKICAgICAgICBjb25zdCB4TWF4ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNYTWF4KTsKICAgICAgICBjb25zdCB5TWF4ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNZTWF4KTsKICAgICAgICBjb25zdCB6TWF4ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNaTWF4KTsKICAgICAgICBjb25zdCBudW1FbGVtZW50cyA9IHBvc2l0aW9uc0hpZ2gubGVuZ3RoOwogICAgICAgIGxldCBpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1FbGVtZW50czsgaSArPSAzKSB7CiAgICAgICAgICBjb25zdCB4ID0gcG9zaXRpb25zSGlnaFtpXSArIHBvc2l0aW9uc0xvd1tpXTsKICAgICAgICAgIGNvbnN0IHkgPSBwb3NpdGlvbnNIaWdoW2kgKyAxXSArIHBvc2l0aW9uc0xvd1tpICsgMV07CiAgICAgICAgICBjb25zdCB6ID0gcG9zaXRpb25zSGlnaFtpICsgMl0gKyBwb3NpdGlvbnNMb3dbaSArIDJdOwogICAgICAgICAgY3VycmVudFBvcy54ID0geDsKICAgICAgICAgIGN1cnJlbnRQb3MueSA9IHk7CiAgICAgICAgICBjdXJyZW50UG9zLnogPSB6OwogICAgICAgICAgaWYgKHggPCB4TWluLngpIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIHhNaW4pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHggPiB4TWF4LngpIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIHhNYXgpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHkgPCB5TWluLnkpIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIHlNaW4pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHkgPiB5TWF4LnkpIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIHlNYXgpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHogPCB6TWluLnopIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIHpNaW4pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHogPiB6TWF4LnopIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIHpNYXgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCB4U3BhbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGVTcXVhcmVkKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHhNYXgsIHhNaW4sIGZyb21Qb2ludHNTY3JhdGNoKQogICAgICAgICk7CiAgICAgICAgY29uc3QgeVNwYW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCh5TWF4LCB5TWluLCBmcm9tUG9pbnRzU2NyYXRjaCkKICAgICAgICApOwogICAgICAgIGNvbnN0IHpTcGFuID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZVNxdWFyZWQoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3Qoek1heCwgek1pbiwgZnJvbVBvaW50c1NjcmF0Y2gpCiAgICAgICAgKTsKICAgICAgICBsZXQgZGlhbWV0ZXIxID0geE1pbjsKICAgICAgICBsZXQgZGlhbWV0ZXIyID0geE1heDsKICAgICAgICBsZXQgbWF4U3BhbiA9IHhTcGFuOwogICAgICAgIGlmICh5U3BhbiA+IG1heFNwYW4pIHsKICAgICAgICAgIG1heFNwYW4gPSB5U3BhbjsKICAgICAgICAgIGRpYW1ldGVyMSA9IHlNaW47CiAgICAgICAgICBkaWFtZXRlcjIgPSB5TWF4OwogICAgICAgIH0KICAgICAgICBpZiAoelNwYW4gPiBtYXhTcGFuKSB7CiAgICAgICAgICBtYXhTcGFuID0gelNwYW47CiAgICAgICAgICBkaWFtZXRlcjEgPSB6TWluOwogICAgICAgICAgZGlhbWV0ZXIyID0gek1heDsKICAgICAgICB9CiAgICAgICAgY29uc3Qgcml0dGVyQ2VudGVyID0gZnJvbVBvaW50c1JpdHRlckNlbnRlcjsKICAgICAgICByaXR0ZXJDZW50ZXIueCA9IChkaWFtZXRlcjEueCArIGRpYW1ldGVyMi54KSAqIDAuNTsKICAgICAgICByaXR0ZXJDZW50ZXIueSA9IChkaWFtZXRlcjEueSArIGRpYW1ldGVyMi55KSAqIDAuNTsKICAgICAgICByaXR0ZXJDZW50ZXIueiA9IChkaWFtZXRlcjEueiArIGRpYW1ldGVyMi56KSAqIDAuNTsKICAgICAgICBsZXQgcmFkaXVzU3F1YXJlZCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGVTcXVhcmVkKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGRpYW1ldGVyMiwgcml0dGVyQ2VudGVyLCBmcm9tUG9pbnRzU2NyYXRjaCkKICAgICAgICApOwogICAgICAgIGxldCByaXR0ZXJSYWRpdXMgPSBNYXRoLnNxcnQocmFkaXVzU3F1YXJlZCk7CiAgICAgICAgY29uc3QgbWluQm94UHQgPSBmcm9tUG9pbnRzTWluQm94UHQ7CiAgICAgICAgbWluQm94UHQueCA9IHhNaW4ueDsKICAgICAgICBtaW5Cb3hQdC55ID0geU1pbi55OwogICAgICAgIG1pbkJveFB0LnogPSB6TWluLno7CiAgICAgICAgY29uc3QgbWF4Qm94UHQgPSBmcm9tUG9pbnRzTWF4Qm94UHQ7CiAgICAgICAgbWF4Qm94UHQueCA9IHhNYXgueDsKICAgICAgICBtYXhCb3hQdC55ID0geU1heC55OwogICAgICAgIG1heEJveFB0LnogPSB6TWF4Lno7CiAgICAgICAgY29uc3QgbmFpdmVDZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWlkcG9pbnQoCiAgICAgICAgICBtaW5Cb3hQdCwKICAgICAgICAgIG1heEJveFB0LAogICAgICAgICAgZnJvbVBvaW50c05haXZlQ2VudGVyU2NyYXRjaAogICAgICAgICk7CiAgICAgICAgbGV0IG5haXZlUmFkaXVzID0gMDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtRWxlbWVudHM7IGkgKz0gMykgewogICAgICAgICAgY3VycmVudFBvcy54ID0gcG9zaXRpb25zSGlnaFtpXSArIHBvc2l0aW9uc0xvd1tpXTsKICAgICAgICAgIGN1cnJlbnRQb3MueSA9IHBvc2l0aW9uc0hpZ2hbaSArIDFdICsgcG9zaXRpb25zTG93W2kgKyAxXTsKICAgICAgICAgIGN1cnJlbnRQb3MueiA9IHBvc2l0aW9uc0hpZ2hbaSArIDJdICsgcG9zaXRpb25zTG93W2kgKyAyXTsKICAgICAgICAgIGNvbnN0IHIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoY3VycmVudFBvcywgbmFpdmVDZW50ZXIsIGZyb21Qb2ludHNTY3JhdGNoKQogICAgICAgICAgKTsKICAgICAgICAgIGlmIChyID4gbmFpdmVSYWRpdXMpIHsKICAgICAgICAgICAgbmFpdmVSYWRpdXMgPSByOwogICAgICAgICAgfQogICAgICAgICAgY29uc3Qgb2xkQ2VudGVyVG9Qb2ludFNxdWFyZWQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCgKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGN1cnJlbnRQb3MsIHJpdHRlckNlbnRlciwgZnJvbVBvaW50c1NjcmF0Y2gpCiAgICAgICAgICApOwogICAgICAgICAgaWYgKG9sZENlbnRlclRvUG9pbnRTcXVhcmVkID4gcmFkaXVzU3F1YXJlZCkgewogICAgICAgICAgICBjb25zdCBvbGRDZW50ZXJUb1BvaW50ID0gTWF0aC5zcXJ0KG9sZENlbnRlclRvUG9pbnRTcXVhcmVkKTsKICAgICAgICAgICAgcml0dGVyUmFkaXVzID0gKHJpdHRlclJhZGl1cyArIG9sZENlbnRlclRvUG9pbnQpICogMC41OwogICAgICAgICAgICByYWRpdXNTcXVhcmVkID0gcml0dGVyUmFkaXVzICogcml0dGVyUmFkaXVzOwogICAgICAgICAgICBjb25zdCBvbGRUb05ldyA9IG9sZENlbnRlclRvUG9pbnQgLSByaXR0ZXJSYWRpdXM7CiAgICAgICAgICAgIHJpdHRlckNlbnRlci54ID0gKHJpdHRlclJhZGl1cyAqIHJpdHRlckNlbnRlci54ICsgb2xkVG9OZXcgKiBjdXJyZW50UG9zLngpIC8gb2xkQ2VudGVyVG9Qb2ludDsKICAgICAgICAgICAgcml0dGVyQ2VudGVyLnkgPSAocml0dGVyUmFkaXVzICogcml0dGVyQ2VudGVyLnkgKyBvbGRUb05ldyAqIGN1cnJlbnRQb3MueSkgLyBvbGRDZW50ZXJUb1BvaW50OwogICAgICAgICAgICByaXR0ZXJDZW50ZXIueiA9IChyaXR0ZXJSYWRpdXMgKiByaXR0ZXJDZW50ZXIueiArIG9sZFRvTmV3ICogY3VycmVudFBvcy56KSAvIG9sZENlbnRlclRvUG9pbnQ7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChyaXR0ZXJSYWRpdXMgPCBuYWl2ZVJhZGl1cykgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHJpdHRlckNlbnRlciwgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgICByZXN1bHQucmFkaXVzID0gcml0dGVyUmFkaXVzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUobmFpdmVDZW50ZXIsIHJlc3VsdC5jZW50ZXIpOwogICAgICAgICAgcmVzdWx0LnJhZGl1cyA9IG5haXZlUmFkaXVzOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBCb3VuZGluZ1NwaGVyZS5mcm9tQ29ybmVyUG9pbnRzID0gZnVuY3Rpb24oY29ybmVyLCBvcHBvc2l0ZUNvcm5lciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjb3JuZXIiLCBjb3JuZXIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgib3Bwb3NpdGVDb3JuZXIiLCBvcHBvc2l0ZUNvcm5lcik7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEJvdW5kaW5nU3BoZXJlKCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5taWRwb2ludChjb3JuZXIsIG9wcG9zaXRlQ29ybmVyLCByZXN1bHQuY2VudGVyKTsKICAgICAgICByZXN1bHQucmFkaXVzID0gQ2FydGVzaWFuM19kZWZhdWx0LmRpc3RhbmNlKGNlbnRlciwgb3Bwb3NpdGVDb3JuZXIpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nU3BoZXJlLmZyb21FbGxpcHNvaWQgPSBmdW5jdGlvbihlbGxpcHNvaWQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZWxsaXBzb2lkIiwgZWxsaXBzb2lkKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQm91bmRpbmdTcGhlcmUoKTsKICAgICAgICB9CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLCByZXN1bHQuY2VudGVyKTsKICAgICAgICByZXN1bHQucmFkaXVzID0gZWxsaXBzb2lkLm1heGltdW1SYWRpdXM7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgZnJvbUJvdW5kaW5nU3BoZXJlc1NjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEJvdW5kaW5nU3BoZXJlLmZyb21Cb3VuZGluZ1NwaGVyZXMgPSBmdW5jdGlvbihib3VuZGluZ1NwaGVyZXMsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBCb3VuZGluZ1NwaGVyZSgpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChib3VuZGluZ1NwaGVyZXMpIHx8IGJvdW5kaW5nU3BoZXJlcy5sZW5ndGggPT09IDApIHsKICAgICAgICAgIHJlc3VsdC5jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIHJlc3VsdC5jZW50ZXIpOwogICAgICAgICAgcmVzdWx0LnJhZGl1cyA9IDA7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBjb25zdCBsZW5ndGggPSBib3VuZGluZ1NwaGVyZXMubGVuZ3RoOwogICAgICAgIGlmIChsZW5ndGggPT09IDEpIHsKICAgICAgICAgIHJldHVybiBCb3VuZGluZ1NwaGVyZS5jbG9uZShib3VuZGluZ1NwaGVyZXNbMF0sIHJlc3VsdCk7CiAgICAgICAgfQogICAgICAgIGlmIChsZW5ndGggPT09IDIpIHsKICAgICAgICAgIHJldHVybiBCb3VuZGluZ1NwaGVyZS51bmlvbihib3VuZGluZ1NwaGVyZXNbMF0sIGJvdW5kaW5nU3BoZXJlc1sxXSwgcmVzdWx0KTsKICAgICAgICB9CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gW107CiAgICAgICAgbGV0IGk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBwb3NpdGlvbnMucHVzaChib3VuZGluZ1NwaGVyZXNbaV0uY2VudGVyKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0ID0gQm91bmRpbmdTcGhlcmUuZnJvbVBvaW50cyhwb3NpdGlvbnMsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgY2VudGVyID0gcmVzdWx0LmNlbnRlcjsKICAgICAgICBsZXQgcmFkaXVzID0gcmVzdWx0LnJhZGl1czsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGNvbnN0IHRtcDIgPSBib3VuZGluZ1NwaGVyZXNbaV07CiAgICAgICAgICByYWRpdXMgPSBNYXRoLm1heCgKICAgICAgICAgICAgcmFkaXVzLAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZGlzdGFuY2UoY2VudGVyLCB0bXAyLmNlbnRlciwgZnJvbUJvdW5kaW5nU3BoZXJlc1NjcmF0Y2gpICsgdG1wMi5yYWRpdXMKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5yYWRpdXMgPSByYWRpdXM7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgZnJvbU9yaWVudGVkQm91bmRpbmdCb3hTY3JhdGNoVSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZnJvbU9yaWVudGVkQm91bmRpbmdCb3hTY3JhdGNoViA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZnJvbU9yaWVudGVkQm91bmRpbmdCb3hTY3JhdGNoVyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgQm91bmRpbmdTcGhlcmUuZnJvbU9yaWVudGVkQm91bmRpbmdCb3ggPSBmdW5jdGlvbihvcmllbnRlZEJvdW5kaW5nQm94LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoIm9yaWVudGVkQm91bmRpbmdCb3giLCBvcmllbnRlZEJvdW5kaW5nQm94KTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQm91bmRpbmdTcGhlcmUoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgaGFsZkF4ZXMgPSBvcmllbnRlZEJvdW5kaW5nQm94LmhhbGZBeGVzOwogICAgICAgIGNvbnN0IHUzID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihoYWxmQXhlcywgMCwgZnJvbU9yaWVudGVkQm91bmRpbmdCb3hTY3JhdGNoVSk7CiAgICAgICAgY29uc3QgdjMgPSBNYXRyaXgzX2RlZmF1bHQuZ2V0Q29sdW1uKGhhbGZBeGVzLCAxLCBmcm9tT3JpZW50ZWRCb3VuZGluZ0JveFNjcmF0Y2hWKTsKICAgICAgICBjb25zdCB3ID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihoYWxmQXhlcywgMiwgZnJvbU9yaWVudGVkQm91bmRpbmdCb3hTY3JhdGNoVyk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZCh1MywgdjMsIHUzKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHUzLCB3LCB1Myk7CiAgICAgICAgcmVzdWx0LmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShvcmllbnRlZEJvdW5kaW5nQm94LmNlbnRlciwgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgcmVzdWx0LnJhZGl1cyA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUodTMpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hGcm9tVHJhbnNmb3JtYXRpb25DZW50ZXIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hGcm9tVHJhbnNmb3JtYXRpb25TY2FsZSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgQm91bmRpbmdTcGhlcmUuZnJvbVRyYW5zZm9ybWF0aW9uID0gZnVuY3Rpb24odHJhbnNmb3JtYXRpb24sIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidHJhbnNmb3JtYXRpb24iLCB0cmFuc2Zvcm1hdGlvbik7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEJvdW5kaW5nU3BoZXJlKCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGNlbnRlciA9IE1hdHJpeDRfZGVmYXVsdC5nZXRUcmFuc2xhdGlvbigKICAgICAgICAgIHRyYW5zZm9ybWF0aW9uLAogICAgICAgICAgc2NyYXRjaEZyb21UcmFuc2Zvcm1hdGlvbkNlbnRlcgogICAgICAgICk7CiAgICAgICAgY29uc3Qgc2NhbGUgPSBNYXRyaXg0X2RlZmF1bHQuZ2V0U2NhbGUoCiAgICAgICAgICB0cmFuc2Zvcm1hdGlvbiwKICAgICAgICAgIHNjcmF0Y2hGcm9tVHJhbnNmb3JtYXRpb25TY2FsZQogICAgICAgICk7CiAgICAgICAgY29uc3QgcmFkaXVzID0gMC41ICogQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZShzY2FsZSk7CiAgICAgICAgcmVzdWx0LmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjZW50ZXIsIHJlc3VsdC5jZW50ZXIpOwogICAgICAgIHJlc3VsdC5yYWRpdXMgPSByYWRpdXM7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQm91bmRpbmdTcGhlcmUuY2xvbmUgPSBmdW5jdGlvbihzcGhlcmUsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHNwaGVyZSkpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQm91bmRpbmdTcGhlcmUoc3BoZXJlLmNlbnRlciwgc3BoZXJlLnJhZGl1cyk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoc3BoZXJlLmNlbnRlciwgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgcmVzdWx0LnJhZGl1cyA9IHNwaGVyZS5yYWRpdXM7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQm91bmRpbmdTcGhlcmUucGFja2VkTGVuZ3RoID0gNDsKICAgICAgQm91bmRpbmdTcGhlcmUucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgY2VudGVyID0gdmFsdWUuY2VudGVyOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBjZW50ZXIueDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gY2VudGVyLnk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IGNlbnRlci56OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gdmFsdWUucmFkaXVzOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgQm91bmRpbmdTcGhlcmUudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBCb3VuZGluZ1NwaGVyZSgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBjZW50ZXIgPSByZXN1bHQuY2VudGVyOwogICAgICAgIGNlbnRlci54ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjZW50ZXIueSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY2VudGVyLnogPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC5yYWRpdXMgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICB1bmlvblNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHVuaW9uU2NyYXRjaENlbnRlciA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgQm91bmRpbmdTcGhlcmUudW5pb24gPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQm91bmRpbmdTcGhlcmUoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbGVmdENlbnRlciA9IGxlZnQuY2VudGVyOwogICAgICAgIGNvbnN0IGxlZnRSYWRpdXMgPSBsZWZ0LnJhZGl1czsKICAgICAgICBjb25zdCByaWdodENlbnRlciA9IHJpZ2h0LmNlbnRlcjsKICAgICAgICBjb25zdCByaWdodFJhZGl1cyA9IHJpZ2h0LnJhZGl1czsKICAgICAgICBjb25zdCB0b1JpZ2h0Q2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgICAgcmlnaHRDZW50ZXIsCiAgICAgICAgICBsZWZ0Q2VudGVyLAogICAgICAgICAgdW5pb25TY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBjb25zdCBjZW50ZXJTZXBhcmF0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSh0b1JpZ2h0Q2VudGVyKTsKICAgICAgICBpZiAobGVmdFJhZGl1cyA+PSBjZW50ZXJTZXBhcmF0aW9uICsgcmlnaHRSYWRpdXMpIHsKICAgICAgICAgIGxlZnQuY2xvbmUocmVzdWx0KTsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIGlmIChyaWdodFJhZGl1cyA+PSBjZW50ZXJTZXBhcmF0aW9uICsgbGVmdFJhZGl1cykgewogICAgICAgICAgcmlnaHQuY2xvbmUocmVzdWx0KTsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGhhbGZEaXN0YW5jZUJldHdlZW5UYW5nZW50UG9pbnRzID0gKGxlZnRSYWRpdXMgKyBjZW50ZXJTZXBhcmF0aW9uICsgcmlnaHRSYWRpdXMpICogMC41OwogICAgICAgIGNvbnN0IGNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgdG9SaWdodENlbnRlciwKICAgICAgICAgICgtbGVmdFJhZGl1cyArIGhhbGZEaXN0YW5jZUJldHdlZW5UYW5nZW50UG9pbnRzKSAvIGNlbnRlclNlcGFyYXRpb24sCiAgICAgICAgICB1bmlvblNjcmF0Y2hDZW50ZXIKICAgICAgICApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY2VudGVyLCBsZWZ0Q2VudGVyLCBjZW50ZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjZW50ZXIsIHJlc3VsdC5jZW50ZXIpOwogICAgICAgIHJlc3VsdC5yYWRpdXMgPSBoYWxmRGlzdGFuY2VCZXR3ZWVuVGFuZ2VudFBvaW50czsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBleHBhbmRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBCb3VuZGluZ1NwaGVyZS5leHBhbmQgPSBmdW5jdGlvbihzcGhlcmUsIHBvaW50LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNwaGVyZSIsIHNwaGVyZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJwb2ludCIsIHBvaW50KTsKICAgICAgICByZXN1bHQgPSBCb3VuZGluZ1NwaGVyZS5jbG9uZShzcGhlcmUsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgcmFkaXVzID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChwb2ludCwgcmVzdWx0LmNlbnRlciwgZXhwYW5kU2NyYXRjaCkKICAgICAgICApOwogICAgICAgIGlmIChyYWRpdXMgPiByZXN1bHQucmFkaXVzKSB7CiAgICAgICAgICByZXN1bHQucmFkaXVzID0gcmFkaXVzOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBCb3VuZGluZ1NwaGVyZS5pbnRlcnNlY3RQbGFuZSA9IGZ1bmN0aW9uKHNwaGVyZSwgcGxhbmUpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNwaGVyZSIsIHNwaGVyZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJwbGFuZSIsIHBsYW5lKTsKICAgICAgICBjb25zdCBjZW50ZXIgPSBzcGhlcmUuY2VudGVyOwogICAgICAgIGNvbnN0IHJhZGl1cyA9IHNwaGVyZS5yYWRpdXM7CiAgICAgICAgY29uc3Qgbm9ybWFsMiA9IHBsYW5lLm5vcm1hbDsKICAgICAgICBjb25zdCBkaXN0YW5jZVRvUGxhbmUgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KG5vcm1hbDIsIGNlbnRlcikgKyBwbGFuZS5kaXN0YW5jZTsKICAgICAgICBpZiAoZGlzdGFuY2VUb1BsYW5lIDwgLXJhZGl1cykgewogICAgICAgICAgcmV0dXJuIEludGVyc2VjdF9kZWZhdWx0Lk9VVFNJREU7CiAgICAgICAgfSBlbHNlIGlmIChkaXN0YW5jZVRvUGxhbmUgPCByYWRpdXMpIHsKICAgICAgICAgIHJldHVybiBJbnRlcnNlY3RfZGVmYXVsdC5JTlRFUlNFQ1RJTkc7CiAgICAgICAgfQogICAgICAgIHJldHVybiBJbnRlcnNlY3RfZGVmYXVsdC5JTlNJREU7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nU3BoZXJlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKHNwaGVyZSwgdHJhbnNmb3JtMiwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzcGhlcmUiLCBzcGhlcmUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidHJhbnNmb3JtIiwgdHJhbnNmb3JtMik7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEJvdW5kaW5nU3BoZXJlKCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5jZW50ZXIgPSBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVBvaW50KAogICAgICAgICAgdHJhbnNmb3JtMiwKICAgICAgICAgIHNwaGVyZS5jZW50ZXIsCiAgICAgICAgICByZXN1bHQuY2VudGVyCiAgICAgICAgKTsKICAgICAgICByZXN1bHQucmFkaXVzID0gTWF0cml4NF9kZWZhdWx0LmdldE1heGltdW1TY2FsZSh0cmFuc2Zvcm0yKSAqIHNwaGVyZS5yYWRpdXM7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgZGlzdGFuY2VTcXVhcmVkVG9TY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBCb3VuZGluZ1NwaGVyZS5kaXN0YW5jZVNxdWFyZWRUbyA9IGZ1bmN0aW9uKHNwaGVyZSwgY2FydGVzaWFuMTEpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNwaGVyZSIsIHNwaGVyZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgY29uc3QgZGlmZiA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgICAgIHNwaGVyZS5jZW50ZXIsCiAgICAgICAgICBjYXJ0ZXNpYW4xMSwKICAgICAgICAgIGRpc3RhbmNlU3F1YXJlZFRvU2NyYXRjaAogICAgICAgICk7CiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKGRpZmYpIC0gc3BoZXJlLnJhZGl1czsKICAgICAgICBpZiAoZGlzdGFuY2UgPD0gMCkgewogICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHJldHVybiBkaXN0YW5jZSAqIGRpc3RhbmNlOwogICAgICB9OwogICAgICBCb3VuZGluZ1NwaGVyZS50cmFuc2Zvcm1XaXRob3V0U2NhbGUgPSBmdW5jdGlvbihzcGhlcmUsIHRyYW5zZm9ybTIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic3BoZXJlIiwgc3BoZXJlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInRyYW5zZm9ybSIsIHRyYW5zZm9ybTIpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBCb3VuZGluZ1NwaGVyZSgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuY2VudGVyID0gTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlQb2ludCgKICAgICAgICAgIHRyYW5zZm9ybTIsCiAgICAgICAgICBzcGhlcmUuY2VudGVyLAogICAgICAgICAgcmVzdWx0LmNlbnRlcgogICAgICAgICk7CiAgICAgICAgcmVzdWx0LnJhZGl1cyA9IHNwaGVyZS5yYWRpdXM7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEJvdW5kaW5nU3BoZXJlLmNvbXB1dGVQbGFuZURpc3RhbmNlcyA9IGZ1bmN0aW9uKHNwaGVyZSwgcG9zaXRpb24sIGRpcmVjdGlvbjIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic3BoZXJlIiwgc3BoZXJlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInBvc2l0aW9uIiwgcG9zaXRpb24pOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZGlyZWN0aW9uIiwgZGlyZWN0aW9uMik7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEludGVydmFsX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgdG9DZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICBzcGhlcmUuY2VudGVyLAogICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuMwogICAgICAgICk7CiAgICAgICAgY29uc3QgbWFnID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChkaXJlY3Rpb24yLCB0b0NlbnRlcik7CiAgICAgICAgcmVzdWx0LnN0YXJ0ID0gbWFnIC0gc3BoZXJlLnJhZGl1czsKICAgICAgICByZXN1bHQuc3RvcCA9IG1hZyArIHNwaGVyZS5yYWRpdXM7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgcHJvamVjdFRvMkROb3JtYWxTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBwcm9qZWN0VG8yREVhc3RTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBwcm9qZWN0VG8yRE5vcnRoU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcHJvamVjdFRvMkRXZXN0U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcHJvamVjdFRvMkRTb3V0aFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHByb2plY3RUbzJEQ2FydG9ncmFwaGljU2NyYXRjaCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBwcm9qZWN0VG8yRFBvc2l0aW9uc1NjcmF0Y2ggPSBuZXcgQXJyYXkoOCk7CiAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgODsgKytuKSB7CiAgICAgICAgcHJvamVjdFRvMkRQb3NpdGlvbnNTY3JhdGNoW25dID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB9CiAgICAgIHByb2plY3RUbzJEUHJvamVjdGlvbiA9IG5ldyBHZW9ncmFwaGljUHJvamVjdGlvbl9kZWZhdWx0KCk7CiAgICAgIEJvdW5kaW5nU3BoZXJlLnByb2plY3RUbzJEID0gZnVuY3Rpb24oc3BoZXJlLCBwcm9qZWN0aW9uLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNwaGVyZSIsIHNwaGVyZSk7CiAgICAgICAgcHJvamVjdGlvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHByb2plY3Rpb24sIHByb2plY3RUbzJEUHJvamVjdGlvbik7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gcHJvamVjdGlvbi5lbGxpcHNvaWQ7CiAgICAgICAgbGV0IGNlbnRlciA9IHNwaGVyZS5jZW50ZXI7CiAgICAgICAgY29uc3QgcmFkaXVzID0gc3BoZXJlLnJhZGl1czsKICAgICAgICBsZXQgbm9ybWFsMjsKICAgICAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFscyhjZW50ZXIsIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPKSkgewogICAgICAgICAgbm9ybWFsMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9YLCBwcm9qZWN0VG8yRE5vcm1hbFNjcmF0Y2gpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBub3JtYWwyID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChjZW50ZXIsIHByb2plY3RUbzJETm9ybWFsU2NyYXRjaCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGVhc3QgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9aLAogICAgICAgICAgbm9ybWFsMiwKICAgICAgICAgIHByb2plY3RUbzJERWFzdFNjcmF0Y2gKICAgICAgICApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoZWFzdCwgZWFzdCk7CiAgICAgICAgY29uc3Qgbm9ydGggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3Mobm9ybWFsMiwgZWFzdCwgcHJvamVjdFRvMkROb3J0aFNjcmF0Y2gpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUobm9ydGgsIG5vcnRoKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihub3JtYWwyLCByYWRpdXMsIG5vcm1hbDIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKG5vcnRoLCByYWRpdXMsIG5vcnRoKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihlYXN0LCByYWRpdXMsIGVhc3QpOwogICAgICAgIGNvbnN0IHNvdXRoID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShub3J0aCwgcHJvamVjdFRvMkRTb3V0aFNjcmF0Y2gpOwogICAgICAgIGNvbnN0IHdlc3QgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGVhc3QsIHByb2plY3RUbzJEV2VzdFNjcmF0Y2gpOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IHByb2plY3RUbzJEUG9zaXRpb25zU2NyYXRjaDsKICAgICAgICBsZXQgY29ybmVyID0gcG9zaXRpb25zWzBdOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobm9ybWFsMiwgbm9ydGgsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjb3JuZXIsIGVhc3QsIGNvcm5lcik7CiAgICAgICAgY29ybmVyID0gcG9zaXRpb25zWzFdOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobm9ybWFsMiwgbm9ydGgsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjb3JuZXIsIHdlc3QsIGNvcm5lcik7CiAgICAgICAgY29ybmVyID0gcG9zaXRpb25zWzJdOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobm9ybWFsMiwgc291dGgsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjb3JuZXIsIHdlc3QsIGNvcm5lcik7CiAgICAgICAgY29ybmVyID0gcG9zaXRpb25zWzNdOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobm9ybWFsMiwgc291dGgsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjb3JuZXIsIGVhc3QsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShub3JtYWwyLCBub3JtYWwyKTsKICAgICAgICBjb3JuZXIgPSBwb3NpdGlvbnNbNF07CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChub3JtYWwyLCBub3J0aCwgY29ybmVyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGNvcm5lciwgZWFzdCwgY29ybmVyKTsKICAgICAgICBjb3JuZXIgPSBwb3NpdGlvbnNbNV07CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChub3JtYWwyLCBub3J0aCwgY29ybmVyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGNvcm5lciwgd2VzdCwgY29ybmVyKTsKICAgICAgICBjb3JuZXIgPSBwb3NpdGlvbnNbNl07CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChub3JtYWwyLCBzb3V0aCwgY29ybmVyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGNvcm5lciwgd2VzdCwgY29ybmVyKTsKICAgICAgICBjb3JuZXIgPSBwb3NpdGlvbnNbN107CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChub3JtYWwyLCBzb3V0aCwgY29ybmVyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGNvcm5lciwgZWFzdCwgY29ybmVyKTsKICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25zW2ldOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjZW50ZXIsIHBvc2l0aW9uLCBwb3NpdGlvbik7CiAgICAgICAgICBjb25zdCBjYXJ0b2dyYXBoaWMyID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKAogICAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgICAgcHJvamVjdFRvMkRDYXJ0b2dyYXBoaWNTY3JhdGNoCiAgICAgICAgICApOwogICAgICAgICAgcHJvamVjdGlvbi5wcm9qZWN0KGNhcnRvZ3JhcGhpYzIsIHBvc2l0aW9uKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0ID0gQm91bmRpbmdTcGhlcmUuZnJvbVBvaW50cyhwb3NpdGlvbnMsIHJlc3VsdCk7CiAgICAgICAgY2VudGVyID0gcmVzdWx0LmNlbnRlcjsKICAgICAgICBjb25zdCB4ID0gY2VudGVyLng7CiAgICAgICAgY29uc3QgeSA9IGNlbnRlci55OwogICAgICAgIGNvbnN0IHogPSBjZW50ZXIuejsKICAgICAgICBjZW50ZXIueCA9IHo7CiAgICAgICAgY2VudGVyLnkgPSB4OwogICAgICAgIGNlbnRlci56ID0geTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBCb3VuZGluZ1NwaGVyZS5pc09jY2x1ZGVkID0gZnVuY3Rpb24oc3BoZXJlLCBvY2NsdWRlcikgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic3BoZXJlIiwgc3BoZXJlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm9jY2x1ZGVyIiwgb2NjbHVkZXIpOwogICAgICAgIHJldHVybiAhb2NjbHVkZXIuaXNCb3VuZGluZ1NwaGVyZVZpc2libGUoc3BoZXJlKTsKICAgICAgfTsKICAgICAgQm91bmRpbmdTcGhlcmUuZXF1YWxzID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICByZXR1cm4gbGVmdCA9PT0gcmlnaHQgfHwgZGVmaW5lZF9kZWZhdWx0KGxlZnQpICYmIGRlZmluZWRfZGVmYXVsdChyaWdodCkgJiYgQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFscyhsZWZ0LmNlbnRlciwgcmlnaHQuY2VudGVyKSAmJiBsZWZ0LnJhZGl1cyA9PT0gcmlnaHQucmFkaXVzOwogICAgICB9OwogICAgICBCb3VuZGluZ1NwaGVyZS5wcm90b3R5cGUuaW50ZXJzZWN0UGxhbmUgPSBmdW5jdGlvbihwbGFuZSkgewogICAgICAgIHJldHVybiBCb3VuZGluZ1NwaGVyZS5pbnRlcnNlY3RQbGFuZSh0aGlzLCBwbGFuZSk7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nU3BoZXJlLnByb3RvdHlwZS5kaXN0YW5jZVNxdWFyZWRUbyA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExKSB7CiAgICAgICAgcmV0dXJuIEJvdW5kaW5nU3BoZXJlLmRpc3RhbmNlU3F1YXJlZFRvKHRoaXMsIGNhcnRlc2lhbjExKTsKICAgICAgfTsKICAgICAgQm91bmRpbmdTcGhlcmUucHJvdG90eXBlLmNvbXB1dGVQbGFuZURpc3RhbmNlcyA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBkaXJlY3Rpb24yLCByZXN1bHQpIHsKICAgICAgICByZXR1cm4gQm91bmRpbmdTcGhlcmUuY29tcHV0ZVBsYW5lRGlzdGFuY2VzKAogICAgICAgICAgdGhpcywKICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgZGlyZWN0aW9uMiwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nU3BoZXJlLnByb3RvdHlwZS5pc09jY2x1ZGVkID0gZnVuY3Rpb24ob2NjbHVkZXIpIHsKICAgICAgICByZXR1cm4gQm91bmRpbmdTcGhlcmUuaXNPY2NsdWRlZCh0aGlzLCBvY2NsdWRlcik7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nU3BoZXJlLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihyaWdodCkgewogICAgICAgIHJldHVybiBCb3VuZGluZ1NwaGVyZS5lcXVhbHModGhpcywgcmlnaHQpOwogICAgICB9OwogICAgICBCb3VuZGluZ1NwaGVyZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICByZXR1cm4gQm91bmRpbmdTcGhlcmUuY2xvbmUodGhpcywgcmVzdWx0KTsKICAgICAgfTsKICAgICAgQm91bmRpbmdTcGhlcmUucHJvdG90eXBlLnZvbHVtZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIGNvbnN0IHJhZGl1cyA9IHRoaXMucmFkaXVzOwogICAgICAgIHJldHVybiB2b2x1bWVDb25zdGFudCAqIHJhZGl1cyAqIHJhZGl1cyAqIHJhZGl1czsKICAgICAgfTsKICAgICAgQm91bmRpbmdTcGhlcmVfZGVmYXVsdCA9IEJvdW5kaW5nU3BoZXJlOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvV2ViR0xDb25zdGFudHMuanMKICB2YXIgV2ViR0xDb25zdGFudHMsIFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQ7CiAgdmFyIGluaXRfV2ViR0xDb25zdGFudHMgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1dlYkdMQ29uc3RhbnRzLmpzIigpIHsKICAgICAgV2ViR0xDb25zdGFudHMgPSB7CiAgICAgICAgREVQVEhfQlVGRkVSX0JJVDogMjU2LAogICAgICAgIFNURU5DSUxfQlVGRkVSX0JJVDogMTAyNCwKICAgICAgICBDT0xPUl9CVUZGRVJfQklUOiAxNjM4NCwKICAgICAgICBQT0lOVFM6IDAsCiAgICAgICAgTElORVM6IDEsCiAgICAgICAgTElORV9MT09QOiAyLAogICAgICAgIExJTkVfU1RSSVA6IDMsCiAgICAgICAgVFJJQU5HTEVTOiA0LAogICAgICAgIFRSSUFOR0xFX1NUUklQOiA1LAogICAgICAgIFRSSUFOR0xFX0ZBTjogNiwKICAgICAgICBaRVJPOiAwLAogICAgICAgIE9ORTogMSwKICAgICAgICBTUkNfQ09MT1I6IDc2OCwKICAgICAgICBPTkVfTUlOVVNfU1JDX0NPTE9SOiA3NjksCiAgICAgICAgU1JDX0FMUEhBOiA3NzAsCiAgICAgICAgT05FX01JTlVTX1NSQ19BTFBIQTogNzcxLAogICAgICAgIERTVF9BTFBIQTogNzcyLAogICAgICAgIE9ORV9NSU5VU19EU1RfQUxQSEE6IDc3MywKICAgICAgICBEU1RfQ09MT1I6IDc3NCwKICAgICAgICBPTkVfTUlOVVNfRFNUX0NPTE9SOiA3NzUsCiAgICAgICAgU1JDX0FMUEhBX1NBVFVSQVRFOiA3NzYsCiAgICAgICAgRlVOQ19BREQ6IDMyNzc0LAogICAgICAgIEJMRU5EX0VRVUFUSU9OOiAzMjc3NywKICAgICAgICBCTEVORF9FUVVBVElPTl9SR0I6IDMyNzc3LAogICAgICAgIC8vIHNhbWUgYXMgQkxFTkRfRVFVQVRJT04KICAgICAgICBCTEVORF9FUVVBVElPTl9BTFBIQTogMzQ4NzcsCiAgICAgICAgRlVOQ19TVUJUUkFDVDogMzI3NzgsCiAgICAgICAgRlVOQ19SRVZFUlNFX1NVQlRSQUNUOiAzMjc3OSwKICAgICAgICBCTEVORF9EU1RfUkdCOiAzMjk2OCwKICAgICAgICBCTEVORF9TUkNfUkdCOiAzMjk2OSwKICAgICAgICBCTEVORF9EU1RfQUxQSEE6IDMyOTcwLAogICAgICAgIEJMRU5EX1NSQ19BTFBIQTogMzI5NzEsCiAgICAgICAgQ09OU1RBTlRfQ09MT1I6IDMyNzY5LAogICAgICAgIE9ORV9NSU5VU19DT05TVEFOVF9DT0xPUjogMzI3NzAsCiAgICAgICAgQ09OU1RBTlRfQUxQSEE6IDMyNzcxLAogICAgICAgIE9ORV9NSU5VU19DT05TVEFOVF9BTFBIQTogMzI3NzIsCiAgICAgICAgQkxFTkRfQ09MT1I6IDMyNzczLAogICAgICAgIEFSUkFZX0JVRkZFUjogMzQ5NjIsCiAgICAgICAgRUxFTUVOVF9BUlJBWV9CVUZGRVI6IDM0OTYzLAogICAgICAgIEFSUkFZX0JVRkZFUl9CSU5ESU5HOiAzNDk2NCwKICAgICAgICBFTEVNRU5UX0FSUkFZX0JVRkZFUl9CSU5ESU5HOiAzNDk2NSwKICAgICAgICBTVFJFQU1fRFJBVzogMzUwNDAsCiAgICAgICAgU1RBVElDX0RSQVc6IDM1MDQ0LAogICAgICAgIERZTkFNSUNfRFJBVzogMzUwNDgsCiAgICAgICAgQlVGRkVSX1NJWkU6IDM0NjYwLAogICAgICAgIEJVRkZFUl9VU0FHRTogMzQ2NjEsCiAgICAgICAgQ1VSUkVOVF9WRVJURVhfQVRUUklCOiAzNDM0MiwKICAgICAgICBGUk9OVDogMTAyOCwKICAgICAgICBCQUNLOiAxMDI5LAogICAgICAgIEZST05UX0FORF9CQUNLOiAxMDMyLAogICAgICAgIENVTExfRkFDRTogMjg4NCwKICAgICAgICBCTEVORDogMzA0MiwKICAgICAgICBESVRIRVI6IDMwMjQsCiAgICAgICAgU1RFTkNJTF9URVNUOiAyOTYwLAogICAgICAgIERFUFRIX1RFU1Q6IDI5MjksCiAgICAgICAgU0NJU1NPUl9URVNUOiAzMDg5LAogICAgICAgIFBPTFlHT05fT0ZGU0VUX0ZJTEw6IDMyODIzLAogICAgICAgIFNBTVBMRV9BTFBIQV9UT19DT1ZFUkFHRTogMzI5MjYsCiAgICAgICAgU0FNUExFX0NPVkVSQUdFOiAzMjkyOCwKICAgICAgICBOT19FUlJPUjogMCwKICAgICAgICBJTlZBTElEX0VOVU06IDEyODAsCiAgICAgICAgSU5WQUxJRF9WQUxVRTogMTI4MSwKICAgICAgICBJTlZBTElEX09QRVJBVElPTjogMTI4MiwKICAgICAgICBPVVRfT0ZfTUVNT1JZOiAxMjg1LAogICAgICAgIENXOiAyMzA0LAogICAgICAgIENDVzogMjMwNSwKICAgICAgICBMSU5FX1dJRFRIOiAyODQ5LAogICAgICAgIEFMSUFTRURfUE9JTlRfU0laRV9SQU5HRTogMzM5MDEsCiAgICAgICAgQUxJQVNFRF9MSU5FX1dJRFRIX1JBTkdFOiAzMzkwMiwKICAgICAgICBDVUxMX0ZBQ0VfTU9ERTogMjg4NSwKICAgICAgICBGUk9OVF9GQUNFOiAyODg2LAogICAgICAgIERFUFRIX1JBTkdFOiAyOTI4LAogICAgICAgIERFUFRIX1dSSVRFTUFTSzogMjkzMCwKICAgICAgICBERVBUSF9DTEVBUl9WQUxVRTogMjkzMSwKICAgICAgICBERVBUSF9GVU5DOiAyOTMyLAogICAgICAgIFNURU5DSUxfQ0xFQVJfVkFMVUU6IDI5NjEsCiAgICAgICAgU1RFTkNJTF9GVU5DOiAyOTYyLAogICAgICAgIFNURU5DSUxfRkFJTDogMjk2NCwKICAgICAgICBTVEVOQ0lMX1BBU1NfREVQVEhfRkFJTDogMjk2NSwKICAgICAgICBTVEVOQ0lMX1BBU1NfREVQVEhfUEFTUzogMjk2NiwKICAgICAgICBTVEVOQ0lMX1JFRjogMjk2NywKICAgICAgICBTVEVOQ0lMX1ZBTFVFX01BU0s6IDI5NjMsCiAgICAgICAgU1RFTkNJTF9XUklURU1BU0s6IDI5NjgsCiAgICAgICAgU1RFTkNJTF9CQUNLX0ZVTkM6IDM0ODE2LAogICAgICAgIFNURU5DSUxfQkFDS19GQUlMOiAzNDgxNywKICAgICAgICBTVEVOQ0lMX0JBQ0tfUEFTU19ERVBUSF9GQUlMOiAzNDgxOCwKICAgICAgICBTVEVOQ0lMX0JBQ0tfUEFTU19ERVBUSF9QQVNTOiAzNDgxOSwKICAgICAgICBTVEVOQ0lMX0JBQ0tfUkVGOiAzNjAwMywKICAgICAgICBTVEVOQ0lMX0JBQ0tfVkFMVUVfTUFTSzogMzYwMDQsCiAgICAgICAgU1RFTkNJTF9CQUNLX1dSSVRFTUFTSzogMzYwMDUsCiAgICAgICAgVklFV1BPUlQ6IDI5NzgsCiAgICAgICAgU0NJU1NPUl9CT1g6IDMwODgsCiAgICAgICAgQ09MT1JfQ0xFQVJfVkFMVUU6IDMxMDYsCiAgICAgICAgQ09MT1JfV1JJVEVNQVNLOiAzMTA3LAogICAgICAgIFVOUEFDS19BTElHTk1FTlQ6IDMzMTcsCiAgICAgICAgUEFDS19BTElHTk1FTlQ6IDMzMzMsCiAgICAgICAgTUFYX1RFWFRVUkVfU0laRTogMzM3OSwKICAgICAgICBNQVhfVklFV1BPUlRfRElNUzogMzM4NiwKICAgICAgICBTVUJQSVhFTF9CSVRTOiAzNDA4LAogICAgICAgIFJFRF9CSVRTOiAzNDEwLAogICAgICAgIEdSRUVOX0JJVFM6IDM0MTEsCiAgICAgICAgQkxVRV9CSVRTOiAzNDEyLAogICAgICAgIEFMUEhBX0JJVFM6IDM0MTMsCiAgICAgICAgREVQVEhfQklUUzogMzQxNCwKICAgICAgICBTVEVOQ0lMX0JJVFM6IDM0MTUsCiAgICAgICAgUE9MWUdPTl9PRkZTRVRfVU5JVFM6IDEwNzUyLAogICAgICAgIFBPTFlHT05fT0ZGU0VUX0ZBQ1RPUjogMzI4MjQsCiAgICAgICAgVEVYVFVSRV9CSU5ESU5HXzJEOiAzMjg3MywKICAgICAgICBTQU1QTEVfQlVGRkVSUzogMzI5MzYsCiAgICAgICAgU0FNUExFUzogMzI5MzcsCiAgICAgICAgU0FNUExFX0NPVkVSQUdFX1ZBTFVFOiAzMjkzOCwKICAgICAgICBTQU1QTEVfQ09WRVJBR0VfSU5WRVJUOiAzMjkzOSwKICAgICAgICBDT01QUkVTU0VEX1RFWFRVUkVfRk9STUFUUzogMzQ0NjcsCiAgICAgICAgRE9OVF9DQVJFOiA0MzUyLAogICAgICAgIEZBU1RFU1Q6IDQzNTMsCiAgICAgICAgTklDRVNUOiA0MzU0LAogICAgICAgIEdFTkVSQVRFX01JUE1BUF9ISU5UOiAzMzE3MCwKICAgICAgICBCWVRFOiA1MTIwLAogICAgICAgIFVOU0lHTkVEX0JZVEU6IDUxMjEsCiAgICAgICAgU0hPUlQ6IDUxMjIsCiAgICAgICAgVU5TSUdORURfU0hPUlQ6IDUxMjMsCiAgICAgICAgSU5UOiA1MTI0LAogICAgICAgIFVOU0lHTkVEX0lOVDogNTEyNSwKICAgICAgICBGTE9BVDogNTEyNiwKICAgICAgICBERVBUSF9DT01QT05FTlQ6IDY0MDIsCiAgICAgICAgQUxQSEE6IDY0MDYsCiAgICAgICAgUkdCOiA2NDA3LAogICAgICAgIFJHQkE6IDY0MDgsCiAgICAgICAgTFVNSU5BTkNFOiA2NDA5LAogICAgICAgIExVTUlOQU5DRV9BTFBIQTogNjQxMCwKICAgICAgICBVTlNJR05FRF9TSE9SVF80XzRfNF80OiAzMjgxOSwKICAgICAgICBVTlNJR05FRF9TSE9SVF81XzVfNV8xOiAzMjgyMCwKICAgICAgICBVTlNJR05FRF9TSE9SVF81XzZfNTogMzM2MzUsCiAgICAgICAgRlJBR01FTlRfU0hBREVSOiAzNTYzMiwKICAgICAgICBWRVJURVhfU0hBREVSOiAzNTYzMywKICAgICAgICBNQVhfVkVSVEVYX0FUVFJJQlM6IDM0OTIxLAogICAgICAgIE1BWF9WRVJURVhfVU5JRk9STV9WRUNUT1JTOiAzNjM0NywKICAgICAgICBNQVhfVkFSWUlOR19WRUNUT1JTOiAzNjM0OCwKICAgICAgICBNQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUzogMzU2NjEsCiAgICAgICAgTUFYX1ZFUlRFWF9URVhUVVJFX0lNQUdFX1VOSVRTOiAzNTY2MCwKICAgICAgICBNQVhfVEVYVFVSRV9JTUFHRV9VTklUUzogMzQ5MzAsCiAgICAgICAgTUFYX0ZSQUdNRU5UX1VOSUZPUk1fVkVDVE9SUzogMzYzNDksCiAgICAgICAgU0hBREVSX1RZUEU6IDM1NjYzLAogICAgICAgIERFTEVURV9TVEFUVVM6IDM1NzEyLAogICAgICAgIExJTktfU1RBVFVTOiAzNTcxNCwKICAgICAgICBWQUxJREFURV9TVEFUVVM6IDM1NzE1LAogICAgICAgIEFUVEFDSEVEX1NIQURFUlM6IDM1NzE3LAogICAgICAgIEFDVElWRV9VTklGT1JNUzogMzU3MTgsCiAgICAgICAgQUNUSVZFX0FUVFJJQlVURVM6IDM1NzIxLAogICAgICAgIFNIQURJTkdfTEFOR1VBR0VfVkVSU0lPTjogMzU3MjQsCiAgICAgICAgQ1VSUkVOVF9QUk9HUkFNOiAzNTcyNSwKICAgICAgICBORVZFUjogNTEyLAogICAgICAgIExFU1M6IDUxMywKICAgICAgICBFUVVBTDogNTE0LAogICAgICAgIExFUVVBTDogNTE1LAogICAgICAgIEdSRUFURVI6IDUxNiwKICAgICAgICBOT1RFUVVBTDogNTE3LAogICAgICAgIEdFUVVBTDogNTE4LAogICAgICAgIEFMV0FZUzogNTE5LAogICAgICAgIEtFRVA6IDc2ODAsCiAgICAgICAgUkVQTEFDRTogNzY4MSwKICAgICAgICBJTkNSOiA3NjgyLAogICAgICAgIERFQ1I6IDc2ODMsCiAgICAgICAgSU5WRVJUOiA1Mzg2LAogICAgICAgIElOQ1JfV1JBUDogMzQwNTUsCiAgICAgICAgREVDUl9XUkFQOiAzNDA1NiwKICAgICAgICBWRU5ET1I6IDc5MzYsCiAgICAgICAgUkVOREVSRVI6IDc5MzcsCiAgICAgICAgVkVSU0lPTjogNzkzOCwKICAgICAgICBORUFSRVNUOiA5NzI4LAogICAgICAgIExJTkVBUjogOTcyOSwKICAgICAgICBORUFSRVNUX01JUE1BUF9ORUFSRVNUOiA5OTg0LAogICAgICAgIExJTkVBUl9NSVBNQVBfTkVBUkVTVDogOTk4NSwKICAgICAgICBORUFSRVNUX01JUE1BUF9MSU5FQVI6IDk5ODYsCiAgICAgICAgTElORUFSX01JUE1BUF9MSU5FQVI6IDk5ODcsCiAgICAgICAgVEVYVFVSRV9NQUdfRklMVEVSOiAxMDI0MCwKICAgICAgICBURVhUVVJFX01JTl9GSUxURVI6IDEwMjQxLAogICAgICAgIFRFWFRVUkVfV1JBUF9TOiAxMDI0MiwKICAgICAgICBURVhUVVJFX1dSQVBfVDogMTAyNDMsCiAgICAgICAgVEVYVFVSRV8yRDogMzU1MywKICAgICAgICBURVhUVVJFOiA1ODkwLAogICAgICAgIFRFWFRVUkVfQ1VCRV9NQVA6IDM0MDY3LAogICAgICAgIFRFWFRVUkVfQklORElOR19DVUJFX01BUDogMzQwNjgsCiAgICAgICAgVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YOiAzNDA2OSwKICAgICAgICBURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1g6IDM0MDcwLAogICAgICAgIFRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWTogMzQwNzEsCiAgICAgICAgVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9ZOiAzNDA3MiwKICAgICAgICBURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1o6IDM0MDczLAogICAgICAgIFRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWjogMzQwNzQsCiAgICAgICAgTUFYX0NVQkVfTUFQX1RFWFRVUkVfU0laRTogMzQwNzYsCiAgICAgICAgVEVYVFVSRTA6IDMzOTg0LAogICAgICAgIFRFWFRVUkUxOiAzMzk4NSwKICAgICAgICBURVhUVVJFMjogMzM5ODYsCiAgICAgICAgVEVYVFVSRTM6IDMzOTg3LAogICAgICAgIFRFWFRVUkU0OiAzMzk4OCwKICAgICAgICBURVhUVVJFNTogMzM5ODksCiAgICAgICAgVEVYVFVSRTY6IDMzOTkwLAogICAgICAgIFRFWFRVUkU3OiAzMzk5MSwKICAgICAgICBURVhUVVJFODogMzM5OTIsCiAgICAgICAgVEVYVFVSRTk6IDMzOTkzLAogICAgICAgIFRFWFRVUkUxMDogMzM5OTQsCiAgICAgICAgVEVYVFVSRTExOiAzMzk5NSwKICAgICAgICBURVhUVVJFMTI6IDMzOTk2LAogICAgICAgIFRFWFRVUkUxMzogMzM5OTcsCiAgICAgICAgVEVYVFVSRTE0OiAzMzk5OCwKICAgICAgICBURVhUVVJFMTU6IDMzOTk5LAogICAgICAgIFRFWFRVUkUxNjogMzRlMywKICAgICAgICBURVhUVVJFMTc6IDM0MDAxLAogICAgICAgIFRFWFRVUkUxODogMzQwMDIsCiAgICAgICAgVEVYVFVSRTE5OiAzNDAwMywKICAgICAgICBURVhUVVJFMjA6IDM0MDA0LAogICAgICAgIFRFWFRVUkUyMTogMzQwMDUsCiAgICAgICAgVEVYVFVSRTIyOiAzNDAwNiwKICAgICAgICBURVhUVVJFMjM6IDM0MDA3LAogICAgICAgIFRFWFRVUkUyNDogMzQwMDgsCiAgICAgICAgVEVYVFVSRTI1OiAzNDAwOSwKICAgICAgICBURVhUVVJFMjY6IDM0MDEwLAogICAgICAgIFRFWFRVUkUyNzogMzQwMTEsCiAgICAgICAgVEVYVFVSRTI4OiAzNDAxMiwKICAgICAgICBURVhUVVJFMjk6IDM0MDEzLAogICAgICAgIFRFWFRVUkUzMDogMzQwMTQsCiAgICAgICAgVEVYVFVSRTMxOiAzNDAxNSwKICAgICAgICBBQ1RJVkVfVEVYVFVSRTogMzQwMTYsCiAgICAgICAgUkVQRUFUOiAxMDQ5NywKICAgICAgICBDTEFNUF9UT19FREdFOiAzMzA3MSwKICAgICAgICBNSVJST1JFRF9SRVBFQVQ6IDMzNjQ4LAogICAgICAgIEZMT0FUX1ZFQzI6IDM1NjY0LAogICAgICAgIEZMT0FUX1ZFQzM6IDM1NjY1LAogICAgICAgIEZMT0FUX1ZFQzQ6IDM1NjY2LAogICAgICAgIElOVF9WRUMyOiAzNTY2NywKICAgICAgICBJTlRfVkVDMzogMzU2NjgsCiAgICAgICAgSU5UX1ZFQzQ6IDM1NjY5LAogICAgICAgIEJPT0w6IDM1NjcwLAogICAgICAgIEJPT0xfVkVDMjogMzU2NzEsCiAgICAgICAgQk9PTF9WRUMzOiAzNTY3MiwKICAgICAgICBCT09MX1ZFQzQ6IDM1NjczLAogICAgICAgIEZMT0FUX01BVDI6IDM1Njc0LAogICAgICAgIEZMT0FUX01BVDM6IDM1Njc1LAogICAgICAgIEZMT0FUX01BVDQ6IDM1Njc2LAogICAgICAgIFNBTVBMRVJfMkQ6IDM1Njc4LAogICAgICAgIFNBTVBMRVJfQ1VCRTogMzU2ODAsCiAgICAgICAgVkVSVEVYX0FUVFJJQl9BUlJBWV9FTkFCTEVEOiAzNDMzOCwKICAgICAgICBWRVJURVhfQVRUUklCX0FSUkFZX1NJWkU6IDM0MzM5LAogICAgICAgIFZFUlRFWF9BVFRSSUJfQVJSQVlfU1RSSURFOiAzNDM0MCwKICAgICAgICBWRVJURVhfQVRUUklCX0FSUkFZX1RZUEU6IDM0MzQxLAogICAgICAgIFZFUlRFWF9BVFRSSUJfQVJSQVlfTk9STUFMSVpFRDogMzQ5MjIsCiAgICAgICAgVkVSVEVYX0FUVFJJQl9BUlJBWV9QT0lOVEVSOiAzNDM3MywKICAgICAgICBWRVJURVhfQVRUUklCX0FSUkFZX0JVRkZFUl9CSU5ESU5HOiAzNDk3NSwKICAgICAgICBJTVBMRU1FTlRBVElPTl9DT0xPUl9SRUFEX1RZUEU6IDM1NzM4LAogICAgICAgIElNUExFTUVOVEFUSU9OX0NPTE9SX1JFQURfRk9STUFUOiAzNTczOSwKICAgICAgICBDT01QSUxFX1NUQVRVUzogMzU3MTMsCiAgICAgICAgTE9XX0ZMT0FUOiAzNjMzNiwKICAgICAgICBNRURJVU1fRkxPQVQ6IDM2MzM3LAogICAgICAgIEhJR0hfRkxPQVQ6IDM2MzM4LAogICAgICAgIExPV19JTlQ6IDM2MzM5LAogICAgICAgIE1FRElVTV9JTlQ6IDM2MzQwLAogICAgICAgIEhJR0hfSU5UOiAzNjM0MSwKICAgICAgICBGUkFNRUJVRkZFUjogMzYxNjAsCiAgICAgICAgUkVOREVSQlVGRkVSOiAzNjE2MSwKICAgICAgICBSR0JBNDogMzI4NTQsCiAgICAgICAgUkdCNV9BMTogMzI4NTUsCiAgICAgICAgUkdCNTY1OiAzNjE5NCwKICAgICAgICBERVBUSF9DT01QT05FTlQxNjogMzMxODksCiAgICAgICAgU1RFTkNJTF9JTkRFWDogNjQwMSwKICAgICAgICBTVEVOQ0lMX0lOREVYODogMzYxNjgsCiAgICAgICAgREVQVEhfU1RFTkNJTDogMzQwNDEsCiAgICAgICAgUkVOREVSQlVGRkVSX1dJRFRIOiAzNjE2MiwKICAgICAgICBSRU5ERVJCVUZGRVJfSEVJR0hUOiAzNjE2MywKICAgICAgICBSRU5ERVJCVUZGRVJfSU5URVJOQUxfRk9STUFUOiAzNjE2NCwKICAgICAgICBSRU5ERVJCVUZGRVJfUkVEX1NJWkU6IDM2MTc2LAogICAgICAgIFJFTkRFUkJVRkZFUl9HUkVFTl9TSVpFOiAzNjE3NywKICAgICAgICBSRU5ERVJCVUZGRVJfQkxVRV9TSVpFOiAzNjE3OCwKICAgICAgICBSRU5ERVJCVUZGRVJfQUxQSEFfU0laRTogMzYxNzksCiAgICAgICAgUkVOREVSQlVGRkVSX0RFUFRIX1NJWkU6IDM2MTgwLAogICAgICAgIFJFTkRFUkJVRkZFUl9TVEVOQ0lMX1NJWkU6IDM2MTgxLAogICAgICAgIEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfT0JKRUNUX1RZUEU6IDM2MDQ4LAogICAgICAgIEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfT0JKRUNUX05BTUU6IDM2MDQ5LAogICAgICAgIEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfVEVYVFVSRV9MRVZFTDogMzYwNTAsCiAgICAgICAgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9URVhUVVJFX0NVQkVfTUFQX0ZBQ0U6IDM2MDUxLAogICAgICAgIENPTE9SX0FUVEFDSE1FTlQwOiAzNjA2NCwKICAgICAgICBERVBUSF9BVFRBQ0hNRU5UOiAzNjA5NiwKICAgICAgICBTVEVOQ0lMX0FUVEFDSE1FTlQ6IDM2MTI4LAogICAgICAgIERFUFRIX1NURU5DSUxfQVRUQUNITUVOVDogMzMzMDYsCiAgICAgICAgTk9ORTogMCwKICAgICAgICBGUkFNRUJVRkZFUl9DT01QTEVURTogMzYwNTMsCiAgICAgICAgRlJBTUVCVUZGRVJfSU5DT01QTEVURV9BVFRBQ0hNRU5UOiAzNjA1NCwKICAgICAgICBGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX01JU1NJTkdfQVRUQUNITUVOVDogMzYwNTUsCiAgICAgICAgRlJBTUVCVUZGRVJfSU5DT01QTEVURV9ESU1FTlNJT05TOiAzNjA1NywKICAgICAgICBGUkFNRUJVRkZFUl9VTlNVUFBPUlRFRDogMzYwNjEsCiAgICAgICAgRlJBTUVCVUZGRVJfQklORElORzogMzYwMDYsCiAgICAgICAgUkVOREVSQlVGRkVSX0JJTkRJTkc6IDM2MDA3LAogICAgICAgIE1BWF9SRU5ERVJCVUZGRVJfU0laRTogMzQwMjQsCiAgICAgICAgSU5WQUxJRF9GUkFNRUJVRkZFUl9PUEVSQVRJT046IDEyODYsCiAgICAgICAgVU5QQUNLX0ZMSVBfWV9XRUJHTDogMzc0NDAsCiAgICAgICAgVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMOiAzNzQ0MSwKICAgICAgICBDT05URVhUX0xPU1RfV0VCR0w6IDM3NDQyLAogICAgICAgIFVOUEFDS19DT0xPUlNQQUNFX0NPTlZFUlNJT05fV0VCR0w6IDM3NDQzLAogICAgICAgIEJST1dTRVJfREVGQVVMVF9XRUJHTDogMzc0NDQsCiAgICAgICAgLy8gV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMKICAgICAgICBDT01QUkVTU0VEX1JHQl9TM1RDX0RYVDFfRVhUOiAzMzc3NiwKICAgICAgICBDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVDogMzM3NzcsCiAgICAgICAgQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQ6IDMzNzc4LAogICAgICAgIENPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUOiAzMzc3OSwKICAgICAgICAvLyBXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMKICAgICAgICBDT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HOiAzNTg0MCwKICAgICAgICBDT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HOiAzNTg0MSwKICAgICAgICBDT01QUkVTU0VEX1JHQkFfUFZSVENfNEJQUFYxX0lNRzogMzU4NDIsCiAgICAgICAgQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzJCUFBWMV9JTUc6IDM1ODQzLAogICAgICAgIC8vIFdFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9hc3RjCiAgICAgICAgQ09NUFJFU1NFRF9SR0JBX0FTVENfNHg0X1dFQkdMOiAzNzgwOCwKICAgICAgICAvLyBXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjMQogICAgICAgIENPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0w6IDM2MTk2LAogICAgICAgIC8vIEVYVF90ZXh0dXJlX2NvbXByZXNzaW9uX2JwdGMKICAgICAgICBDT01QUkVTU0VEX1JHQkFfQlBUQ19VTk9STTogMzY0OTIsCiAgICAgICAgLy8gRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0CiAgICAgICAgSEFMRl9GTE9BVF9PRVM6IDM2MTkzLAogICAgICAgIC8vIERlc2t0b3AgT3BlbkdMCiAgICAgICAgRE9VQkxFOiA1MTMwLAogICAgICAgIC8vIFdlYkdMIDIKICAgICAgICBSRUFEX0JVRkZFUjogMzA3NCwKICAgICAgICBVTlBBQ0tfUk9XX0xFTkdUSDogMzMxNCwKICAgICAgICBVTlBBQ0tfU0tJUF9ST1dTOiAzMzE1LAogICAgICAgIFVOUEFDS19TS0lQX1BJWEVMUzogMzMxNiwKICAgICAgICBQQUNLX1JPV19MRU5HVEg6IDMzMzAsCiAgICAgICAgUEFDS19TS0lQX1JPV1M6IDMzMzEsCiAgICAgICAgUEFDS19TS0lQX1BJWEVMUzogMzMzMiwKICAgICAgICBDT0xPUjogNjE0NCwKICAgICAgICBERVBUSDogNjE0NSwKICAgICAgICBTVEVOQ0lMOiA2MTQ2LAogICAgICAgIFJFRDogNjQwMywKICAgICAgICBSR0I4OiAzMjg0OSwKICAgICAgICBSR0JBODogMzI4NTYsCiAgICAgICAgUkdCMTBfQTI6IDMyODU3LAogICAgICAgIFRFWFRVUkVfQklORElOR18zRDogMzI4NzQsCiAgICAgICAgVU5QQUNLX1NLSVBfSU1BR0VTOiAzMjg3NywKICAgICAgICBVTlBBQ0tfSU1BR0VfSEVJR0hUOiAzMjg3OCwKICAgICAgICBURVhUVVJFXzNEOiAzMjg3OSwKICAgICAgICBURVhUVVJFX1dSQVBfUjogMzI4ODIsCiAgICAgICAgTUFYXzNEX1RFWFRVUkVfU0laRTogMzI4ODMsCiAgICAgICAgVU5TSUdORURfSU5UXzJfMTBfMTBfMTBfUkVWOiAzMzY0MCwKICAgICAgICBNQVhfRUxFTUVOVFNfVkVSVElDRVM6IDMzZTMsCiAgICAgICAgTUFYX0VMRU1FTlRTX0lORElDRVM6IDMzMDAxLAogICAgICAgIFRFWFRVUkVfTUlOX0xPRDogMzMwODIsCiAgICAgICAgVEVYVFVSRV9NQVhfTE9EOiAzMzA4MywKICAgICAgICBURVhUVVJFX0JBU0VfTEVWRUw6IDMzMDg0LAogICAgICAgIFRFWFRVUkVfTUFYX0xFVkVMOiAzMzA4NSwKICAgICAgICBNSU46IDMyNzc1LAogICAgICAgIE1BWDogMzI3NzYsCiAgICAgICAgREVQVEhfQ09NUE9ORU5UMjQ6IDMzMTkwLAogICAgICAgIE1BWF9URVhUVVJFX0xPRF9CSUFTOiAzNDA0NSwKICAgICAgICBURVhUVVJFX0NPTVBBUkVfTU9ERTogMzQ4OTIsCiAgICAgICAgVEVYVFVSRV9DT01QQVJFX0ZVTkM6IDM0ODkzLAogICAgICAgIENVUlJFTlRfUVVFUlk6IDM0OTE3LAogICAgICAgIFFVRVJZX1JFU1VMVDogMzQ5MTgsCiAgICAgICAgUVVFUllfUkVTVUxUX0FWQUlMQUJMRTogMzQ5MTksCiAgICAgICAgU1RSRUFNX1JFQUQ6IDM1MDQxLAogICAgICAgIFNUUkVBTV9DT1BZOiAzNTA0MiwKICAgICAgICBTVEFUSUNfUkVBRDogMzUwNDUsCiAgICAgICAgU1RBVElDX0NPUFk6IDM1MDQ2LAogICAgICAgIERZTkFNSUNfUkVBRDogMzUwNDksCiAgICAgICAgRFlOQU1JQ19DT1BZOiAzNTA1MCwKICAgICAgICBNQVhfRFJBV19CVUZGRVJTOiAzNDg1MiwKICAgICAgICBEUkFXX0JVRkZFUjA6IDM0ODUzLAogICAgICAgIERSQVdfQlVGRkVSMTogMzQ4NTQsCiAgICAgICAgRFJBV19CVUZGRVIyOiAzNDg1NSwKICAgICAgICBEUkFXX0JVRkZFUjM6IDM0ODU2LAogICAgICAgIERSQVdfQlVGRkVSNDogMzQ4NTcsCiAgICAgICAgRFJBV19CVUZGRVI1OiAzNDg1OCwKICAgICAgICBEUkFXX0JVRkZFUjY6IDM0ODU5LAogICAgICAgIERSQVdfQlVGRkVSNzogMzQ4NjAsCiAgICAgICAgRFJBV19CVUZGRVI4OiAzNDg2MSwKICAgICAgICBEUkFXX0JVRkZFUjk6IDM0ODYyLAogICAgICAgIERSQVdfQlVGRkVSMTA6IDM0ODYzLAogICAgICAgIERSQVdfQlVGRkVSMTE6IDM0ODY0LAogICAgICAgIERSQVdfQlVGRkVSMTI6IDM0ODY1LAogICAgICAgIERSQVdfQlVGRkVSMTM6IDM0ODY2LAogICAgICAgIERSQVdfQlVGRkVSMTQ6IDM0ODY3LAogICAgICAgIERSQVdfQlVGRkVSMTU6IDM0ODY4LAogICAgICAgIE1BWF9GUkFHTUVOVF9VTklGT1JNX0NPTVBPTkVOVFM6IDM1NjU3LAogICAgICAgIE1BWF9WRVJURVhfVU5JRk9STV9DT01QT05FTlRTOiAzNTY1OCwKICAgICAgICBTQU1QTEVSXzNEOiAzNTY3OSwKICAgICAgICBTQU1QTEVSXzJEX1NIQURPVzogMzU2ODIsCiAgICAgICAgRlJBR01FTlRfU0hBREVSX0RFUklWQVRJVkVfSElOVDogMzU3MjMsCiAgICAgICAgUElYRUxfUEFDS19CVUZGRVI6IDM1MDUxLAogICAgICAgIFBJWEVMX1VOUEFDS19CVUZGRVI6IDM1MDUyLAogICAgICAgIFBJWEVMX1BBQ0tfQlVGRkVSX0JJTkRJTkc6IDM1MDUzLAogICAgICAgIFBJWEVMX1VOUEFDS19CVUZGRVJfQklORElORzogMzUwNTUsCiAgICAgICAgRkxPQVRfTUFUMngzOiAzNTY4NSwKICAgICAgICBGTE9BVF9NQVQyeDQ6IDM1Njg2LAogICAgICAgIEZMT0FUX01BVDN4MjogMzU2ODcsCiAgICAgICAgRkxPQVRfTUFUM3g0OiAzNTY4OCwKICAgICAgICBGTE9BVF9NQVQ0eDI6IDM1Njg5LAogICAgICAgIEZMT0FUX01BVDR4MzogMzU2OTAsCiAgICAgICAgU1JHQjogMzU5MDQsCiAgICAgICAgU1JHQjg6IDM1OTA1LAogICAgICAgIFNSR0I4X0FMUEhBODogMzU5MDcsCiAgICAgICAgQ09NUEFSRV9SRUZfVE9fVEVYVFVSRTogMzQ4OTQsCiAgICAgICAgUkdCQTMyRjogMzQ4MzYsCiAgICAgICAgUkdCMzJGOiAzNDgzNywKICAgICAgICBSR0JBMTZGOiAzNDg0MiwKICAgICAgICBSR0IxNkY6IDM0ODQzLAogICAgICAgIFZFUlRFWF9BVFRSSUJfQVJSQVlfSU5URUdFUjogMzUwNjksCiAgICAgICAgTUFYX0FSUkFZX1RFWFRVUkVfTEFZRVJTOiAzNTA3MSwKICAgICAgICBNSU5fUFJPR1JBTV9URVhFTF9PRkZTRVQ6IDM1MDc2LAogICAgICAgIE1BWF9QUk9HUkFNX1RFWEVMX09GRlNFVDogMzUwNzcsCiAgICAgICAgTUFYX1ZBUllJTkdfQ09NUE9ORU5UUzogMzU2NTksCiAgICAgICAgVEVYVFVSRV8yRF9BUlJBWTogMzU4NjYsCiAgICAgICAgVEVYVFVSRV9CSU5ESU5HXzJEX0FSUkFZOiAzNTg2OSwKICAgICAgICBSMTFGX0cxMUZfQjEwRjogMzU4OTgsCiAgICAgICAgVU5TSUdORURfSU5UXzEwRl8xMUZfMTFGX1JFVjogMzU4OTksCiAgICAgICAgUkdCOV9FNTogMzU5MDEsCiAgICAgICAgVU5TSUdORURfSU5UXzVfOV85XzlfUkVWOiAzNTkwMiwKICAgICAgICBUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSX01PREU6IDM1OTY3LAogICAgICAgIE1BWF9UUkFOU0ZPUk1fRkVFREJBQ0tfU0VQQVJBVEVfQ09NUE9ORU5UUzogMzU5NjgsCiAgICAgICAgVFJBTlNGT1JNX0ZFRURCQUNLX1ZBUllJTkdTOiAzNTk3MSwKICAgICAgICBUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSX1NUQVJUOiAzNTk3MiwKICAgICAgICBUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSX1NJWkU6IDM1OTczLAogICAgICAgIFRSQU5TRk9STV9GRUVEQkFDS19QUklNSVRJVkVTX1dSSVRURU46IDM1OTc2LAogICAgICAgIFJBU1RFUklaRVJfRElTQ0FSRDogMzU5NzcsCiAgICAgICAgTUFYX1RSQU5TRk9STV9GRUVEQkFDS19JTlRFUkxFQVZFRF9DT01QT05FTlRTOiAzNTk3OCwKICAgICAgICBNQVhfVFJBTlNGT1JNX0ZFRURCQUNLX1NFUEFSQVRFX0FUVFJJQlM6IDM1OTc5LAogICAgICAgIElOVEVSTEVBVkVEX0FUVFJJQlM6IDM1OTgwLAogICAgICAgIFNFUEFSQVRFX0FUVFJJQlM6IDM1OTgxLAogICAgICAgIFRSQU5TRk9STV9GRUVEQkFDS19CVUZGRVI6IDM1OTgyLAogICAgICAgIFRSQU5TRk9STV9GRUVEQkFDS19CVUZGRVJfQklORElORzogMzU5ODMsCiAgICAgICAgUkdCQTMyVUk6IDM2MjA4LAogICAgICAgIFJHQjMyVUk6IDM2MjA5LAogICAgICAgIFJHQkExNlVJOiAzNjIxNCwKICAgICAgICBSR0IxNlVJOiAzNjIxNSwKICAgICAgICBSR0JBOFVJOiAzNjIyMCwKICAgICAgICBSR0I4VUk6IDM2MjIxLAogICAgICAgIFJHQkEzMkk6IDM2MjI2LAogICAgICAgIFJHQjMySTogMzYyMjcsCiAgICAgICAgUkdCQTE2STogMzYyMzIsCiAgICAgICAgUkdCMTZJOiAzNjIzMywKICAgICAgICBSR0JBOEk6IDM2MjM4LAogICAgICAgIFJHQjhJOiAzNjIzOSwKICAgICAgICBSRURfSU5URUdFUjogMzYyNDQsCiAgICAgICAgUkdCX0lOVEVHRVI6IDM2MjQ4LAogICAgICAgIFJHQkFfSU5URUdFUjogMzYyNDksCiAgICAgICAgU0FNUExFUl8yRF9BUlJBWTogMzYyODksCiAgICAgICAgU0FNUExFUl8yRF9BUlJBWV9TSEFET1c6IDM2MjkyLAogICAgICAgIFNBTVBMRVJfQ1VCRV9TSEFET1c6IDM2MjkzLAogICAgICAgIFVOU0lHTkVEX0lOVF9WRUMyOiAzNjI5NCwKICAgICAgICBVTlNJR05FRF9JTlRfVkVDMzogMzYyOTUsCiAgICAgICAgVU5TSUdORURfSU5UX1ZFQzQ6IDM2Mjk2LAogICAgICAgIElOVF9TQU1QTEVSXzJEOiAzNjI5OCwKICAgICAgICBJTlRfU0FNUExFUl8zRDogMzYyOTksCiAgICAgICAgSU5UX1NBTVBMRVJfQ1VCRTogMzYzMDAsCiAgICAgICAgSU5UX1NBTVBMRVJfMkRfQVJSQVk6IDM2MzAzLAogICAgICAgIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEOiAzNjMwNiwKICAgICAgICBVTlNJR05FRF9JTlRfU0FNUExFUl8zRDogMzYzMDcsCiAgICAgICAgVU5TSUdORURfSU5UX1NBTVBMRVJfQ1VCRTogMzYzMDgsCiAgICAgICAgVU5TSUdORURfSU5UX1NBTVBMRVJfMkRfQVJSQVk6IDM2MzExLAogICAgICAgIERFUFRIX0NPTVBPTkVOVDMyRjogMzYwMTIsCiAgICAgICAgREVQVEgzMkZfU1RFTkNJTDg6IDM2MDEzLAogICAgICAgIEZMT0FUXzMyX1VOU0lHTkVEX0lOVF8yNF84X1JFVjogMzYyNjksCiAgICAgICAgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9DT0xPUl9FTkNPRElORzogMzMyOTYsCiAgICAgICAgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9DT01QT05FTlRfVFlQRTogMzMyOTcsCiAgICAgICAgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9SRURfU0laRTogMzMyOTgsCiAgICAgICAgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9HUkVFTl9TSVpFOiAzMzI5OSwKICAgICAgICBGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX0JMVUVfU0laRTogMzMzMDAsCiAgICAgICAgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9BTFBIQV9TSVpFOiAzMzMwMSwKICAgICAgICBGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX0RFUFRIX1NJWkU6IDMzMzAyLAogICAgICAgIEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfU1RFTkNJTF9TSVpFOiAzMzMwMywKICAgICAgICBGUkFNRUJVRkZFUl9ERUZBVUxUOiAzMzMwNCwKICAgICAgICBVTlNJR05FRF9JTlRfMjRfODogMzQwNDIsCiAgICAgICAgREVQVEgyNF9TVEVOQ0lMODogMzUwNTYsCiAgICAgICAgVU5TSUdORURfTk9STUFMSVpFRDogMzU4NjMsCiAgICAgICAgRFJBV19GUkFNRUJVRkZFUl9CSU5ESU5HOiAzNjAwNiwKICAgICAgICAvLyBTYW1lIGFzIEZSQU1FQlVGRkVSX0JJTkRJTkcKICAgICAgICBSRUFEX0ZSQU1FQlVGRkVSOiAzNjAwOCwKICAgICAgICBEUkFXX0ZSQU1FQlVGRkVSOiAzNjAwOSwKICAgICAgICBSRUFEX0ZSQU1FQlVGRkVSX0JJTkRJTkc6IDM2MDEwLAogICAgICAgIFJFTkRFUkJVRkZFUl9TQU1QTEVTOiAzNjAxMSwKICAgICAgICBGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX1RFWFRVUkVfTEFZRVI6IDM2MDUyLAogICAgICAgIE1BWF9DT0xPUl9BVFRBQ0hNRU5UUzogMzYwNjMsCiAgICAgICAgQ09MT1JfQVRUQUNITUVOVDE6IDM2MDY1LAogICAgICAgIENPTE9SX0FUVEFDSE1FTlQyOiAzNjA2NiwKICAgICAgICBDT0xPUl9BVFRBQ0hNRU5UMzogMzYwNjcsCiAgICAgICAgQ09MT1JfQVRUQUNITUVOVDQ6IDM2MDY4LAogICAgICAgIENPTE9SX0FUVEFDSE1FTlQ1OiAzNjA2OSwKICAgICAgICBDT0xPUl9BVFRBQ0hNRU5UNjogMzYwNzAsCiAgICAgICAgQ09MT1JfQVRUQUNITUVOVDc6IDM2MDcxLAogICAgICAgIENPTE9SX0FUVEFDSE1FTlQ4OiAzNjA3MiwKICAgICAgICBDT0xPUl9BVFRBQ0hNRU5UOTogMzYwNzMsCiAgICAgICAgQ09MT1JfQVRUQUNITUVOVDEwOiAzNjA3NCwKICAgICAgICBDT0xPUl9BVFRBQ0hNRU5UMTE6IDM2MDc1LAogICAgICAgIENPTE9SX0FUVEFDSE1FTlQxMjogMzYwNzYsCiAgICAgICAgQ09MT1JfQVRUQUNITUVOVDEzOiAzNjA3NywKICAgICAgICBDT0xPUl9BVFRBQ0hNRU5UMTQ6IDM2MDc4LAogICAgICAgIENPTE9SX0FUVEFDSE1FTlQxNTogMzYwNzksCiAgICAgICAgRlJBTUVCVUZGRVJfSU5DT01QTEVURV9NVUxUSVNBTVBMRTogMzYxODIsCiAgICAgICAgTUFYX1NBTVBMRVM6IDM2MTgzLAogICAgICAgIEhBTEZfRkxPQVQ6IDUxMzEsCiAgICAgICAgUkc6IDMzMzE5LAogICAgICAgIFJHX0lOVEVHRVI6IDMzMzIwLAogICAgICAgIFI4OiAzMzMyMSwKICAgICAgICBSRzg6IDMzMzIzLAogICAgICAgIFIxNkY6IDMzMzI1LAogICAgICAgIFIzMkY6IDMzMzI2LAogICAgICAgIFJHMTZGOiAzMzMyNywKICAgICAgICBSRzMyRjogMzMzMjgsCiAgICAgICAgUjhJOiAzMzMyOSwKICAgICAgICBSOFVJOiAzMzMzMCwKICAgICAgICBSMTZJOiAzMzMzMSwKICAgICAgICBSMTZVSTogMzMzMzIsCiAgICAgICAgUjMySTogMzMzMzMsCiAgICAgICAgUjMyVUk6IDMzMzM0LAogICAgICAgIFJHOEk6IDMzMzM1LAogICAgICAgIFJHOFVJOiAzMzMzNiwKICAgICAgICBSRzE2STogMzMzMzcsCiAgICAgICAgUkcxNlVJOiAzMzMzOCwKICAgICAgICBSRzMySTogMzMzMzksCiAgICAgICAgUkczMlVJOiAzMzM0MCwKICAgICAgICBWRVJURVhfQVJSQVlfQklORElORzogMzQyMjksCiAgICAgICAgUjhfU05PUk06IDM2NzU2LAogICAgICAgIFJHOF9TTk9STTogMzY3NTcsCiAgICAgICAgUkdCOF9TTk9STTogMzY3NTgsCiAgICAgICAgUkdCQThfU05PUk06IDM2NzU5LAogICAgICAgIFNJR05FRF9OT1JNQUxJWkVEOiAzNjc2NCwKICAgICAgICBDT1BZX1JFQURfQlVGRkVSOiAzNjY2MiwKICAgICAgICBDT1BZX1dSSVRFX0JVRkZFUjogMzY2NjMsCiAgICAgICAgQ09QWV9SRUFEX0JVRkZFUl9CSU5ESU5HOiAzNjY2MiwKICAgICAgICAvLyBTYW1lIGFzIENPUFlfUkVBRF9CVUZGRVIKICAgICAgICBDT1BZX1dSSVRFX0JVRkZFUl9CSU5ESU5HOiAzNjY2MywKICAgICAgICAvLyBTYW1lIGFzIENPUFlfV1JJVEVfQlVGRkVSCiAgICAgICAgVU5JRk9STV9CVUZGRVI6IDM1MzQ1LAogICAgICAgIFVOSUZPUk1fQlVGRkVSX0JJTkRJTkc6IDM1MzY4LAogICAgICAgIFVOSUZPUk1fQlVGRkVSX1NUQVJUOiAzNTM2OSwKICAgICAgICBVTklGT1JNX0JVRkZFUl9TSVpFOiAzNTM3MCwKICAgICAgICBNQVhfVkVSVEVYX1VOSUZPUk1fQkxPQ0tTOiAzNTM3MSwKICAgICAgICBNQVhfRlJBR01FTlRfVU5JRk9STV9CTE9DS1M6IDM1MzczLAogICAgICAgIE1BWF9DT01CSU5FRF9VTklGT1JNX0JMT0NLUzogMzUzNzQsCiAgICAgICAgTUFYX1VOSUZPUk1fQlVGRkVSX0JJTkRJTkdTOiAzNTM3NSwKICAgICAgICBNQVhfVU5JRk9STV9CTE9DS19TSVpFOiAzNTM3NiwKICAgICAgICBNQVhfQ09NQklORURfVkVSVEVYX1VOSUZPUk1fQ09NUE9ORU5UUzogMzUzNzcsCiAgICAgICAgTUFYX0NPTUJJTkVEX0ZSQUdNRU5UX1VOSUZPUk1fQ09NUE9ORU5UUzogMzUzNzksCiAgICAgICAgVU5JRk9STV9CVUZGRVJfT0ZGU0VUX0FMSUdOTUVOVDogMzUzODAsCiAgICAgICAgQUNUSVZFX1VOSUZPUk1fQkxPQ0tTOiAzNTM4MiwKICAgICAgICBVTklGT1JNX1RZUEU6IDM1MzgzLAogICAgICAgIFVOSUZPUk1fU0laRTogMzUzODQsCiAgICAgICAgVU5JRk9STV9CTE9DS19JTkRFWDogMzUzODYsCiAgICAgICAgVU5JRk9STV9PRkZTRVQ6IDM1Mzg3LAogICAgICAgIFVOSUZPUk1fQVJSQVlfU1RSSURFOiAzNTM4OCwKICAgICAgICBVTklGT1JNX01BVFJJWF9TVFJJREU6IDM1Mzg5LAogICAgICAgIFVOSUZPUk1fSVNfUk9XX01BSk9SOiAzNTM5MCwKICAgICAgICBVTklGT1JNX0JMT0NLX0JJTkRJTkc6IDM1MzkxLAogICAgICAgIFVOSUZPUk1fQkxPQ0tfREFUQV9TSVpFOiAzNTM5MiwKICAgICAgICBVTklGT1JNX0JMT0NLX0FDVElWRV9VTklGT1JNUzogMzUzOTQsCiAgICAgICAgVU5JRk9STV9CTE9DS19BQ1RJVkVfVU5JRk9STV9JTkRJQ0VTOiAzNTM5NSwKICAgICAgICBVTklGT1JNX0JMT0NLX1JFRkVSRU5DRURfQllfVkVSVEVYX1NIQURFUjogMzUzOTYsCiAgICAgICAgVU5JRk9STV9CTE9DS19SRUZFUkVOQ0VEX0JZX0ZSQUdNRU5UX1NIQURFUjogMzUzOTgsCiAgICAgICAgSU5WQUxJRF9JTkRFWDogNDI5NDk2NzI5NSwKICAgICAgICBNQVhfVkVSVEVYX09VVFBVVF9DT01QT05FTlRTOiAzNzE1NCwKICAgICAgICBNQVhfRlJBR01FTlRfSU5QVVRfQ09NUE9ORU5UUzogMzcxNTcsCiAgICAgICAgTUFYX1NFUlZFUl9XQUlUX1RJTUVPVVQ6IDM3MTM3LAogICAgICAgIE9CSkVDVF9UWVBFOiAzNzEzOCwKICAgICAgICBTWU5DX0NPTkRJVElPTjogMzcxMzksCiAgICAgICAgU1lOQ19TVEFUVVM6IDM3MTQwLAogICAgICAgIFNZTkNfRkxBR1M6IDM3MTQxLAogICAgICAgIFNZTkNfRkVOQ0U6IDM3MTQyLAogICAgICAgIFNZTkNfR1BVX0NPTU1BTkRTX0NPTVBMRVRFOiAzNzE0MywKICAgICAgICBVTlNJR05BTEVEOiAzNzE0NCwKICAgICAgICBTSUdOQUxFRDogMzcxNDUsCiAgICAgICAgQUxSRUFEWV9TSUdOQUxFRDogMzcxNDYsCiAgICAgICAgVElNRU9VVF9FWFBJUkVEOiAzNzE0NywKICAgICAgICBDT05ESVRJT05fU0FUSVNGSUVEOiAzNzE0OCwKICAgICAgICBXQUlUX0ZBSUxFRDogMzcxNDksCiAgICAgICAgU1lOQ19GTFVTSF9DT01NQU5EU19CSVQ6IDEsCiAgICAgICAgVkVSVEVYX0FUVFJJQl9BUlJBWV9ESVZJU09SOiAzNTA3MCwKICAgICAgICBBTllfU0FNUExFU19QQVNTRUQ6IDM1ODg3LAogICAgICAgIEFOWV9TQU1QTEVTX1BBU1NFRF9DT05TRVJWQVRJVkU6IDM2MjAyLAogICAgICAgIFNBTVBMRVJfQklORElORzogMzUwOTcsCiAgICAgICAgUkdCMTBfQTJVSTogMzY5NzUsCiAgICAgICAgSU5UXzJfMTBfMTBfMTBfUkVWOiAzNjI1NSwKICAgICAgICBUUkFOU0ZPUk1fRkVFREJBQ0s6IDM2Mzg2LAogICAgICAgIFRSQU5TRk9STV9GRUVEQkFDS19QQVVTRUQ6IDM2Mzg3LAogICAgICAgIFRSQU5TRk9STV9GRUVEQkFDS19BQ1RJVkU6IDM2Mzg4LAogICAgICAgIFRSQU5TRk9STV9GRUVEQkFDS19CSU5ESU5HOiAzNjM4OSwKICAgICAgICBDT01QUkVTU0VEX1IxMV9FQUM6IDM3NDg4LAogICAgICAgIENPTVBSRVNTRURfU0lHTkVEX1IxMV9FQUM6IDM3NDg5LAogICAgICAgIENPTVBSRVNTRURfUkcxMV9FQUM6IDM3NDkwLAogICAgICAgIENPTVBSRVNTRURfU0lHTkVEX1JHMTFfRUFDOiAzNzQ5MSwKICAgICAgICBDT01QUkVTU0VEX1JHQjhfRVRDMjogMzc0OTIsCiAgICAgICAgQ09NUFJFU1NFRF9TUkdCOF9FVEMyOiAzNzQ5MywKICAgICAgICBDT01QUkVTU0VEX1JHQjhfUFVOQ0hUSFJPVUdIX0FMUEhBMV9FVEMyOiAzNzQ5NCwKICAgICAgICBDT01QUkVTU0VEX1NSR0I4X1BVTkNIVEhST1VHSF9BTFBIQTFfRVRDMjogMzc0OTUsCiAgICAgICAgQ09NUFJFU1NFRF9SR0JBOF9FVEMyX0VBQzogMzc0OTYsCiAgICAgICAgQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfRVRDMl9FQUM6IDM3NDk3LAogICAgICAgIFRFWFRVUkVfSU1NVVRBQkxFX0ZPUk1BVDogMzcxNjcsCiAgICAgICAgTUFYX0VMRU1FTlRfSU5ERVg6IDM2MjAzLAogICAgICAgIFRFWFRVUkVfSU1NVVRBQkxFX0xFVkVMUzogMzM1MDMsCiAgICAgICAgLy8gRXh0ZW5zaW9ucwogICAgICAgIE1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVDogMzQwNDcKICAgICAgfTsKICAgICAgV2ViR0xDb25zdGFudHNfZGVmYXVsdCA9IE9iamVjdC5mcmVlemUoV2ViR0xDb25zdGFudHMpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ29tcG9uZW50RGF0YXR5cGUuanMKICB2YXIgQ29tcG9uZW50RGF0YXR5cGUsIENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQ7CiAgdmFyIGluaXRfQ29tcG9uZW50RGF0YXR5cGUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NvbXBvbmVudERhdGF0eXBlLmpzIigpIHsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9XZWJHTENvbnN0YW50cygpOwogICAgICBDb21wb25lbnREYXRhdHlwZSA9IHsKICAgICAgICAvKioKICAgICAgICAgKiA4LWJpdCBzaWduZWQgYnl0ZSBjb3JyZXNwb25kaW5nIHRvIDxjb2RlPmdsLkJZVEU8L2NvZGU+IGFuZCB0aGUgdHlwZQogICAgICAgICAqIG9mIGFuIGVsZW1lbnQgaW4gPGNvZGU+SW50OEFycmF5PC9jb2RlPi4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgQllURTogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5CWVRFLAogICAgICAgIC8qKgogICAgICAgICAqIDgtYml0IHVuc2lnbmVkIGJ5dGUgY29ycmVzcG9uZGluZyB0byA8Y29kZT5VTlNJR05FRF9CWVRFPC9jb2RlPiBhbmQgdGhlIHR5cGUKICAgICAgICAgKiBvZiBhbiBlbGVtZW50IGluIDxjb2RlPlVpbnQ4QXJyYXk8L2NvZGU+LgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBVTlNJR05FRF9CWVRFOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgLyoqCiAgICAgICAgICogMTYtYml0IHNpZ25lZCBzaG9ydCBjb3JyZXNwb25kaW5nIHRvIDxjb2RlPlNIT1JUPC9jb2RlPiBhbmQgdGhlIHR5cGUKICAgICAgICAgKiBvZiBhbiBlbGVtZW50IGluIDxjb2RlPkludDE2QXJyYXk8L2NvZGU+LgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBTSE9SVDogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5TSE9SVCwKICAgICAgICAvKioKICAgICAgICAgKiAxNi1iaXQgdW5zaWduZWQgc2hvcnQgY29ycmVzcG9uZGluZyB0byA8Y29kZT5VTlNJR05FRF9TSE9SVDwvY29kZT4gYW5kIHRoZSB0eXBlCiAgICAgICAgICogb2YgYW4gZWxlbWVudCBpbiA8Y29kZT5VaW50MTZBcnJheTwvY29kZT4uCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFVOU0lHTkVEX1NIT1JUOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlVOU0lHTkVEX1NIT1JULAogICAgICAgIC8qKgogICAgICAgICAqIDMyLWJpdCBzaWduZWQgaW50IGNvcnJlc3BvbmRpbmcgdG8gPGNvZGU+SU5UPC9jb2RlPiBhbmQgdGhlIHR5cGUKICAgICAgICAgKiBvZiBhbiBlbGVtZW50IGluIDxjb2RlPkludDMyQXJyYXk8L2NvZGU+LgogICAgICAgICAqCiAgICAgICAgICogQG1lbWJlck9mIENvbXBvbmVudERhdGF0eXBlCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIElOVDogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5JTlQsCiAgICAgICAgLyoqCiAgICAgICAgICogMzItYml0IHVuc2lnbmVkIGludCBjb3JyZXNwb25kaW5nIHRvIDxjb2RlPlVOU0lHTkVEX0lOVDwvY29kZT4gYW5kIHRoZSB0eXBlCiAgICAgICAgICogb2YgYW4gZWxlbWVudCBpbiA8Y29kZT5VaW50MzJBcnJheTwvY29kZT4uCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyT2YgQ29tcG9uZW50RGF0YXR5cGUKICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgVU5TSUdORURfSU5UOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlVOU0lHTkVEX0lOVCwKICAgICAgICAvKioKICAgICAgICAgKiAzMi1iaXQgZmxvYXRpbmctcG9pbnQgY29ycmVzcG9uZGluZyB0byA8Y29kZT5GTE9BVDwvY29kZT4gYW5kIHRoZSB0eXBlCiAgICAgICAgICogb2YgYW4gZWxlbWVudCBpbiA8Y29kZT5GbG9hdDMyQXJyYXk8L2NvZGU+LgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBGTE9BVDogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5GTE9BVCwKICAgICAgICAvKioKICAgICAgICAgKiA2NC1iaXQgZmxvYXRpbmctcG9pbnQgY29ycmVzcG9uZGluZyB0byA8Y29kZT5nbC5ET1VCTEU8L2NvZGU+IChpbiBEZXNrdG9wIE9wZW5HTDsKICAgICAgICAgKiB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQgaW4gV2ViR0wsIGFuZCBpcyBlbXVsYXRlZCBpbiBDZXNpdW0gdmlhIHtAbGluayBHZW9tZXRyeVBpcGVsaW5lLmVuY29kZUF0dHJpYnV0ZX0pCiAgICAgICAgICogYW5kIHRoZSB0eXBlIG9mIGFuIGVsZW1lbnQgaW4gPGNvZGU+RmxvYXQ2NEFycmF5PC9jb2RlPi4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJPZiBDb21wb25lbnREYXRhdHlwZQogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKiBAZGVmYXVsdCAweDE0MEEKICAgICAgICAgKi8KICAgICAgICBET1VCTEU6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuRE9VQkxFCiAgICAgIH07CiAgICAgIENvbXBvbmVudERhdGF0eXBlLmdldFNpemVJbkJ5dGVzID0gZnVuY3Rpb24oY29tcG9uZW50RGF0YXR5cGUpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChjb21wb25lbnREYXRhdHlwZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ2YWx1ZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgc3dpdGNoIChjb21wb25lbnREYXRhdHlwZSkgewogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZS5CWVRFOgogICAgICAgICAgICByZXR1cm4gSW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZS5VTlNJR05FRF9CWVRFOgogICAgICAgICAgICByZXR1cm4gVWludDhBcnJheS5CWVRFU19QRVJfRUxFTUVOVDsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuU0hPUlQ6CiAgICAgICAgICAgIHJldHVybiBJbnQxNkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZS5VTlNJR05FRF9TSE9SVDoKICAgICAgICAgICAgcmV0dXJuIFVpbnQxNkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZS5JTlQ6CiAgICAgICAgICAgIHJldHVybiBJbnQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZS5VTlNJR05FRF9JTlQ6CiAgICAgICAgICAgIHJldHVybiBVaW50MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVDsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuRkxPQVQ6CiAgICAgICAgICAgIHJldHVybiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7CiAgICAgICAgICBjYXNlIENvbXBvbmVudERhdGF0eXBlLkRPVUJMRToKICAgICAgICAgICAgcmV0dXJuIEZsb2F0NjRBcnJheS5CWVRFU19QRVJfRUxFTUVOVDsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJjb21wb25lbnREYXRhdHlwZSBpcyBub3QgYSB2YWxpZCB2YWx1ZS4iKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIENvbXBvbmVudERhdGF0eXBlLmZyb21UeXBlZEFycmF5ID0gZnVuY3Rpb24oYXJyYXkpIHsKICAgICAgICBpZiAoYXJyYXkgaW5zdGFuY2VvZiBJbnQ4QXJyYXkpIHsKICAgICAgICAgIHJldHVybiBDb21wb25lbnREYXRhdHlwZS5CWVRFOwogICAgICAgIH0KICAgICAgICBpZiAoYXJyYXkgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7CiAgICAgICAgICByZXR1cm4gQ29tcG9uZW50RGF0YXR5cGUuVU5TSUdORURfQllURTsKICAgICAgICB9CiAgICAgICAgaWYgKGFycmF5IGluc3RhbmNlb2YgSW50MTZBcnJheSkgewogICAgICAgICAgcmV0dXJuIENvbXBvbmVudERhdGF0eXBlLlNIT1JUOwogICAgICAgIH0KICAgICAgICBpZiAoYXJyYXkgaW5zdGFuY2VvZiBVaW50MTZBcnJheSkgewogICAgICAgICAgcmV0dXJuIENvbXBvbmVudERhdGF0eXBlLlVOU0lHTkVEX1NIT1JUOwogICAgICAgIH0KICAgICAgICBpZiAoYXJyYXkgaW5zdGFuY2VvZiBJbnQzMkFycmF5KSB7CiAgICAgICAgICByZXR1cm4gQ29tcG9uZW50RGF0YXR5cGUuSU5UOwogICAgICAgIH0KICAgICAgICBpZiAoYXJyYXkgaW5zdGFuY2VvZiBVaW50MzJBcnJheSkgewogICAgICAgICAgcmV0dXJuIENvbXBvbmVudERhdGF0eXBlLlVOU0lHTkVEX0lOVDsKICAgICAgICB9CiAgICAgICAgaWYgKGFycmF5IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KSB7CiAgICAgICAgICByZXR1cm4gQ29tcG9uZW50RGF0YXR5cGUuRkxPQVQ7CiAgICAgICAgfQogICAgICAgIGlmIChhcnJheSBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheSkgewogICAgICAgICAgcmV0dXJuIENvbXBvbmVudERhdGF0eXBlLkRPVUJMRTsKICAgICAgICB9CiAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAiYXJyYXkgbXVzdCBiZSBhbiBJbnQ4QXJyYXksIFVpbnQ4QXJyYXksIEludDE2QXJyYXksIFVpbnQxNkFycmF5LCBJbnQzMkFycmF5LCBVaW50MzJBcnJheSwgRmxvYXQzMkFycmF5LCBvciBGbG9hdDY0QXJyYXkuIgogICAgICAgICk7CiAgICAgIH07CiAgICAgIENvbXBvbmVudERhdGF0eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24oY29tcG9uZW50RGF0YXR5cGUpIHsKICAgICAgICByZXR1cm4gZGVmaW5lZF9kZWZhdWx0KGNvbXBvbmVudERhdGF0eXBlKSAmJiAoY29tcG9uZW50RGF0YXR5cGUgPT09IENvbXBvbmVudERhdGF0eXBlLkJZVEUgfHwgY29tcG9uZW50RGF0YXR5cGUgPT09IENvbXBvbmVudERhdGF0eXBlLlVOU0lHTkVEX0JZVEUgfHwgY29tcG9uZW50RGF0YXR5cGUgPT09IENvbXBvbmVudERhdGF0eXBlLlNIT1JUIHx8IGNvbXBvbmVudERhdGF0eXBlID09PSBDb21wb25lbnREYXRhdHlwZS5VTlNJR05FRF9TSE9SVCB8fCBjb21wb25lbnREYXRhdHlwZSA9PT0gQ29tcG9uZW50RGF0YXR5cGUuSU5UIHx8IGNvbXBvbmVudERhdGF0eXBlID09PSBDb21wb25lbnREYXRhdHlwZS5VTlNJR05FRF9JTlQgfHwgY29tcG9uZW50RGF0YXR5cGUgPT09IENvbXBvbmVudERhdGF0eXBlLkZMT0FUIHx8IGNvbXBvbmVudERhdGF0eXBlID09PSBDb21wb25lbnREYXRhdHlwZS5ET1VCTEUpOwogICAgICB9OwogICAgICBDb21wb25lbnREYXRhdHlwZS5jcmVhdGVUeXBlZEFycmF5ID0gZnVuY3Rpb24oY29tcG9uZW50RGF0YXR5cGUsIHZhbHVlc09yTGVuZ3RoKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoY29tcG9uZW50RGF0YXR5cGUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiY29tcG9uZW50RGF0YXR5cGUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHZhbHVlc09yTGVuZ3RoKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInZhbHVlc09yTGVuZ3RoIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBzd2l0Y2ggKGNvbXBvbmVudERhdGF0eXBlKSB7CiAgICAgICAgICBjYXNlIENvbXBvbmVudERhdGF0eXBlLkJZVEU6CiAgICAgICAgICAgIHJldHVybiBuZXcgSW50OEFycmF5KHZhbHVlc09yTGVuZ3RoKTsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuVU5TSUdORURfQllURToKICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHZhbHVlc09yTGVuZ3RoKTsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuU0hPUlQ6CiAgICAgICAgICAgIHJldHVybiBuZXcgSW50MTZBcnJheSh2YWx1ZXNPckxlbmd0aCk7CiAgICAgICAgICBjYXNlIENvbXBvbmVudERhdGF0eXBlLlVOU0lHTkVEX1NIT1JUOgogICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQxNkFycmF5KHZhbHVlc09yTGVuZ3RoKTsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuSU5UOgogICAgICAgICAgICByZXR1cm4gbmV3IEludDMyQXJyYXkodmFsdWVzT3JMZW5ndGgpOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZS5VTlNJR05FRF9JTlQ6CiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDMyQXJyYXkodmFsdWVzT3JMZW5ndGgpOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZS5GTE9BVDoKICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkodmFsdWVzT3JMZW5ndGgpOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZS5ET1VCTEU6CiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQ2NEFycmF5KHZhbHVlc09yTGVuZ3RoKTsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJjb21wb25lbnREYXRhdHlwZSBpcyBub3QgYSB2YWxpZCB2YWx1ZS4iKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIENvbXBvbmVudERhdGF0eXBlLmNyZWF0ZUFycmF5QnVmZmVyVmlldyA9IGZ1bmN0aW9uKGNvbXBvbmVudERhdGF0eXBlLCBidWZmZXIsIGJ5dGVPZmZzZXQsIGxlbmd0aCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNvbXBvbmVudERhdGF0eXBlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImNvbXBvbmVudERhdGF0eXBlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChidWZmZXIpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYnVmZmVyIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBieXRlT2Zmc2V0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoYnl0ZU9mZnNldCwgMCk7CiAgICAgICAgbGVuZ3RoID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgICAgICBsZW5ndGgsCiAgICAgICAgICAoYnVmZmVyLmJ5dGVMZW5ndGggLSBieXRlT2Zmc2V0KSAvIENvbXBvbmVudERhdGF0eXBlLmdldFNpemVJbkJ5dGVzKGNvbXBvbmVudERhdGF0eXBlKQogICAgICAgICk7CiAgICAgICAgc3dpdGNoIChjb21wb25lbnREYXRhdHlwZSkgewogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZS5CWVRFOgogICAgICAgICAgICByZXR1cm4gbmV3IEludDhBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgICAgICAgICBjYXNlIENvbXBvbmVudERhdGF0eXBlLlVOU0lHTkVEX0JZVEU6CiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgICAgICAgICBjYXNlIENvbXBvbmVudERhdGF0eXBlLlNIT1JUOgogICAgICAgICAgICByZXR1cm4gbmV3IEludDE2QXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZS5VTlNJR05FRF9TSE9SVDoKICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50MTZBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgICAgICAgICBjYXNlIENvbXBvbmVudERhdGF0eXBlLklOVDoKICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuVU5TSUdORURfSU5UOgogICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQzMkFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuRkxPQVQ6CiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuRE9VQkxFOgogICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0NjRBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiY29tcG9uZW50RGF0YXR5cGUgaXMgbm90IGEgdmFsaWQgdmFsdWUuIik7CiAgICAgICAgfQogICAgICB9OwogICAgICBDb21wb25lbnREYXRhdHlwZS5mcm9tTmFtZSA9IGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgICBzd2l0Y2ggKG5hbWUpIHsKICAgICAgICAgIGNhc2UgIkJZVEUiOgogICAgICAgICAgICByZXR1cm4gQ29tcG9uZW50RGF0YXR5cGUuQllURTsKICAgICAgICAgIGNhc2UgIlVOU0lHTkVEX0JZVEUiOgogICAgICAgICAgICByZXR1cm4gQ29tcG9uZW50RGF0YXR5cGUuVU5TSUdORURfQllURTsKICAgICAgICAgIGNhc2UgIlNIT1JUIjoKICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudERhdGF0eXBlLlNIT1JUOwogICAgICAgICAgY2FzZSAiVU5TSUdORURfU0hPUlQiOgogICAgICAgICAgICByZXR1cm4gQ29tcG9uZW50RGF0YXR5cGUuVU5TSUdORURfU0hPUlQ7CiAgICAgICAgICBjYXNlICJJTlQiOgogICAgICAgICAgICByZXR1cm4gQ29tcG9uZW50RGF0YXR5cGUuSU5UOwogICAgICAgICAgY2FzZSAiVU5TSUdORURfSU5UIjoKICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudERhdGF0eXBlLlVOU0lHTkVEX0lOVDsKICAgICAgICAgIGNhc2UgIkZMT0FUIjoKICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudERhdGF0eXBlLkZMT0FUOwogICAgICAgICAgY2FzZSAiRE9VQkxFIjoKICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudERhdGF0eXBlLkRPVUJMRTsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJuYW1lIGlzIG5vdCBhIHZhbGlkIHZhbHVlLiIpOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdCA9IE9iamVjdC5mcmVlemUoQ29tcG9uZW50RGF0YXR5cGUpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ2FydGVzaWFuMi5qcwogIGZ1bmN0aW9uIENhcnRlc2lhbjIoeCwgeSkgewogICAgdGhpcy54ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoeCwgMCk7CiAgICB0aGlzLnkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh5LCAwKTsKICB9CiAgdmFyIGRpc3RhbmNlU2NyYXRjaDMsIGxlcnBTY3JhdGNoMywgYW5nbGVCZXR3ZWVuU2NyYXRjaDMsIGFuZ2xlQmV0d2VlblNjcmF0Y2gyMiwgbW9zdE9ydGhvZ29uYWxBeGlzU2NyYXRjaDMsIENhcnRlc2lhbjJfZGVmYXVsdDsKICB2YXIgaW5pdF9DYXJ0ZXNpYW4yID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9DYXJ0ZXNpYW4yLmpzIigpIHsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgQ2FydGVzaWFuMi5mcm9tRWxlbWVudHMgPSBmdW5jdGlvbih4LCB5LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENhcnRlc2lhbjIoeCwgeSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMi5jbG9uZSA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChjYXJ0ZXNpYW4xMSkpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydGVzaWFuMihjYXJ0ZXNpYW4xMS54LCBjYXJ0ZXNpYW4xMS55KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4xMS54OwogICAgICAgIHJlc3VsdC55ID0gY2FydGVzaWFuMTEueTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLmZyb21DYXJ0ZXNpYW4zID0gQ2FydGVzaWFuMi5jbG9uZTsKICAgICAgQ2FydGVzaWFuMi5mcm9tQ2FydGVzaWFuNCA9IENhcnRlc2lhbjIuY2xvbmU7CiAgICAgIENhcnRlc2lhbjIucGFja2VkTGVuZ3RoID0gMjsKICAgICAgQ2FydGVzaWFuMi5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUueDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlLnk7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuMigpOwogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0LnkgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLnBhY2tBcnJheSA9IGZ1bmN0aW9uKGFycmF5LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKICAgICAgICBjb25zdCByZXN1bHRMZW5ndGggPSBsZW5ndGggKiAyOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShyZXN1bHRMZW5ndGgpOwogICAgICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQubGVuZ3RoICE9PSByZXN1bHRMZW5ndGgpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiSWYgcmVzdWx0IGlzIGEgdHlwZWQgYXJyYXksIGl0IG11c3QgaGF2ZSBleGFjdGx5IGFycmF5Lmxlbmd0aCAqIDIgZWxlbWVudHMiCiAgICAgICAgICApOwogICAgICAgIH0gZWxzZSBpZiAocmVzdWx0Lmxlbmd0aCAhPT0gcmVzdWx0TGVuZ3RoKSB7CiAgICAgICAgICByZXN1bHQubGVuZ3RoID0gcmVzdWx0TGVuZ3RoOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICBDYXJ0ZXNpYW4yLnBhY2soYXJyYXlbaV0sIHJlc3VsdCwgaSAqIDIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLnVucGFja0FycmF5ID0gZnVuY3Rpb24oYXJyYXksIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoImFycmF5Lmxlbmd0aCIsIGFycmF5Lmxlbmd0aCwgMik7CiAgICAgICAgaWYgKGFycmF5Lmxlbmd0aCAlIDIgIT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBsZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDIuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoIC8gMik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdC5sZW5ndGggPSBsZW5ndGggLyAyOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAyKSB7CiAgICAgICAgICBjb25zdCBpbmRleCA9IGkgLyAyOwogICAgICAgICAgcmVzdWx0W2luZGV4XSA9IENhcnRlc2lhbjIudW5wYWNrKGFycmF5LCBpLCByZXN1bHRbaW5kZXhdKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMi5mcm9tQXJyYXkgPSBDYXJ0ZXNpYW4yLnVucGFjazsKICAgICAgQ2FydGVzaWFuMi5tYXhpbXVtQ29tcG9uZW50ID0gZnVuY3Rpb24oY2FydGVzaWFuMTEpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICByZXR1cm4gTWF0aC5tYXgoY2FydGVzaWFuMTEueCwgY2FydGVzaWFuMTEueSk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIubWluaW11bUNvbXBvbmVudCA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgcmV0dXJuIE1hdGgubWluKGNhcnRlc2lhbjExLngsIGNhcnRlc2lhbjExLnkpOwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLm1pbmltdW1CeUNvbXBvbmVudCA9IGZ1bmN0aW9uKGZpcnN0LCBzZWNvbmQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZmlyc3QiLCBmaXJzdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzZWNvbmQiLCBzZWNvbmQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IE1hdGgubWluKGZpcnN0LngsIHNlY29uZC54KTsKICAgICAgICByZXN1bHQueSA9IE1hdGgubWluKGZpcnN0LnksIHNlY29uZC55KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLm1heGltdW1CeUNvbXBvbmVudCA9IGZ1bmN0aW9uKGZpcnN0LCBzZWNvbmQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZmlyc3QiLCBmaXJzdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzZWNvbmQiLCBzZWNvbmQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IE1hdGgubWF4KGZpcnN0LngsIHNlY29uZC54KTsKICAgICAgICByZXN1bHQueSA9IE1hdGgubWF4KGZpcnN0LnksIHNlY29uZC55KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLmNsYW1wID0gZnVuY3Rpb24odmFsdWUsIG1pbjMsIG1heDMsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtaW4iLCBtaW4zKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1heCIsIG1heDMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCB4ID0gTWF0aF9kZWZhdWx0LmNsYW1wKHZhbHVlLngsIG1pbjMueCwgbWF4My54KTsKICAgICAgICBjb25zdCB5ID0gTWF0aF9kZWZhdWx0LmNsYW1wKHZhbHVlLnksIG1pbjMueSwgbWF4My55KTsKICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIubWFnbml0dWRlU3F1YXJlZCA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgcmV0dXJuIGNhcnRlc2lhbjExLnggKiBjYXJ0ZXNpYW4xMS54ICsgY2FydGVzaWFuMTEueSAqIGNhcnRlc2lhbjExLnk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIubWFnbml0dWRlID0gZnVuY3Rpb24oY2FydGVzaWFuMTEpIHsKICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KENhcnRlc2lhbjIubWFnbml0dWRlU3F1YXJlZChjYXJ0ZXNpYW4xMSkpOwogICAgICB9OwogICAgICBkaXN0YW5jZVNjcmF0Y2gzID0gbmV3IENhcnRlc2lhbjIoKTsKICAgICAgQ2FydGVzaWFuMi5kaXN0YW5jZSA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDYXJ0ZXNpYW4yLnN1YnRyYWN0KGxlZnQsIHJpZ2h0LCBkaXN0YW5jZVNjcmF0Y2gzKTsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuMi5tYWduaXR1ZGUoZGlzdGFuY2VTY3JhdGNoMyk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIuZGlzdGFuY2VTcXVhcmVkID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENhcnRlc2lhbjIuc3VidHJhY3QobGVmdCwgcmlnaHQsIGRpc3RhbmNlU2NyYXRjaDMpOwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4yLm1hZ25pdHVkZVNxdWFyZWQoZGlzdGFuY2VTY3JhdGNoMyk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIubm9ybWFsaXplID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBtYWduaXR1ZGUgPSBDYXJ0ZXNpYW4yLm1hZ25pdHVkZShjYXJ0ZXNpYW4xMSk7CiAgICAgICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4xMS54IC8gbWFnbml0dWRlOwogICAgICAgIHJlc3VsdC55ID0gY2FydGVzaWFuMTEueSAvIG1hZ25pdHVkZTsKICAgICAgICBpZiAoaXNOYU4ocmVzdWx0LngpIHx8IGlzTmFOKHJlc3VsdC55KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm5vcm1hbGl6ZWQgcmVzdWx0IGlzIG5vdCBhIG51bWJlciIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLmRvdCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICByZXR1cm4gbGVmdC54ICogcmlnaHQueCArIGxlZnQueSAqIHJpZ2h0Lnk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIuY3Jvc3MgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgcmV0dXJuIGxlZnQueCAqIHJpZ2h0LnkgLSBsZWZ0LnkgKiByaWdodC54OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLm11bHRpcGx5Q29tcG9uZW50cyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IGxlZnQueCAqIHJpZ2h0Lng7CiAgICAgICAgcmVzdWx0LnkgPSBsZWZ0LnkgKiByaWdodC55OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIuZGl2aWRlQ29tcG9uZW50cyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IGxlZnQueCAvIHJpZ2h0Lng7CiAgICAgICAgcmVzdWx0LnkgPSBsZWZ0LnkgLyByaWdodC55OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIuYWRkID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gbGVmdC54ICsgcmlnaHQueDsKICAgICAgICByZXN1bHQueSA9IGxlZnQueSArIHJpZ2h0Lnk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMi5zdWJ0cmFjdCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IGxlZnQueCAtIHJpZ2h0Lng7CiAgICAgICAgcmVzdWx0LnkgPSBsZWZ0LnkgLSByaWdodC55OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIubXVsdGlwbHlCeVNjYWxhciA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCBzY2FsYXIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGFyIiwgc2NhbGFyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4xMS54ICogc2NhbGFyOwogICAgICAgIHJlc3VsdC55ID0gY2FydGVzaWFuMTEueSAqIHNjYWxhcjsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLmRpdmlkZUJ5U2NhbGFyID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHNjYWxhciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJzY2FsYXIiLCBzY2FsYXIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IGNhcnRlc2lhbjExLnggLyBzY2FsYXI7CiAgICAgICAgcmVzdWx0LnkgPSBjYXJ0ZXNpYW4xMS55IC8gc2NhbGFyOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIubmVnYXRlID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IC1jYXJ0ZXNpYW4xMS54OwogICAgICAgIHJlc3VsdC55ID0gLWNhcnRlc2lhbjExLnk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMi5hYnMgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gTWF0aC5hYnMoY2FydGVzaWFuMTEueCk7CiAgICAgICAgcmVzdWx0LnkgPSBNYXRoLmFicyhjYXJ0ZXNpYW4xMS55KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBsZXJwU2NyYXRjaDMgPSBuZXcgQ2FydGVzaWFuMigpOwogICAgICBDYXJ0ZXNpYW4yLmxlcnAgPSBmdW5jdGlvbihzdGFydCwgZW5kLCB0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInN0YXJ0Iiwgc3RhcnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZW5kIiwgZW5kKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInQiLCB0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgQ2FydGVzaWFuMi5tdWx0aXBseUJ5U2NhbGFyKGVuZCwgdCwgbGVycFNjcmF0Y2gzKTsKICAgICAgICByZXN1bHQgPSBDYXJ0ZXNpYW4yLm11bHRpcGx5QnlTY2FsYXIoc3RhcnQsIDEgLSB0LCByZXN1bHQpOwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4yLmFkZChsZXJwU2NyYXRjaDMsIHJlc3VsdCwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgYW5nbGVCZXR3ZWVuU2NyYXRjaDMgPSBuZXcgQ2FydGVzaWFuMigpOwogICAgICBhbmdsZUJldHdlZW5TY3JhdGNoMjIgPSBuZXcgQ2FydGVzaWFuMigpOwogICAgICBDYXJ0ZXNpYW4yLmFuZ2xlQmV0d2VlbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDYXJ0ZXNpYW4yLm5vcm1hbGl6ZShsZWZ0LCBhbmdsZUJldHdlZW5TY3JhdGNoMyk7CiAgICAgICAgQ2FydGVzaWFuMi5ub3JtYWxpemUocmlnaHQsIGFuZ2xlQmV0d2VlblNjcmF0Y2gyMik7CiAgICAgICAgcmV0dXJuIE1hdGhfZGVmYXVsdC5hY29zQ2xhbXBlZCgKICAgICAgICAgIENhcnRlc2lhbjIuZG90KGFuZ2xlQmV0d2VlblNjcmF0Y2gzLCBhbmdsZUJldHdlZW5TY3JhdGNoMjIpCiAgICAgICAgKTsKICAgICAgfTsKICAgICAgbW9zdE9ydGhvZ29uYWxBeGlzU2NyYXRjaDMgPSBuZXcgQ2FydGVzaWFuMigpOwogICAgICBDYXJ0ZXNpYW4yLm1vc3RPcnRob2dvbmFsQXhpcyA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgZiA9IENhcnRlc2lhbjIubm9ybWFsaXplKGNhcnRlc2lhbjExLCBtb3N0T3J0aG9nb25hbEF4aXNTY3JhdGNoMyk7CiAgICAgICAgQ2FydGVzaWFuMi5hYnMoZiwgZik7CiAgICAgICAgaWYgKGYueCA8PSBmLnkpIHsKICAgICAgICAgIHJlc3VsdCA9IENhcnRlc2lhbjIuY2xvbmUoQ2FydGVzaWFuMi5VTklUX1gsIHJlc3VsdCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdCA9IENhcnRlc2lhbjIuY2xvbmUoQ2FydGVzaWFuMi5VTklUX1ksIHJlc3VsdCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIuZXF1YWxzID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICByZXR1cm4gbGVmdCA9PT0gcmlnaHQgfHwgZGVmaW5lZF9kZWZhdWx0KGxlZnQpICYmIGRlZmluZWRfZGVmYXVsdChyaWdodCkgJiYgbGVmdC54ID09PSByaWdodC54ICYmIGxlZnQueSA9PT0gcmlnaHQueTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMi5lcXVhbHNBcnJheSA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCBhcnJheSwgb2Zmc2V0KSB7CiAgICAgICAgcmV0dXJuIGNhcnRlc2lhbjExLnggPT09IGFycmF5W29mZnNldF0gJiYgY2FydGVzaWFuMTEueSA9PT0gYXJyYXlbb2Zmc2V0ICsgMV07CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIGxlZnQueCwKICAgICAgICAgIHJpZ2h0LngsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgbGVmdC55LAogICAgICAgICAgcmlnaHQueSwKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIuWkVSTyA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjIoMCwgMCkpOwogICAgICBDYXJ0ZXNpYW4yLk9ORSA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjIoMSwgMSkpOwogICAgICBDYXJ0ZXNpYW4yLlVOSVRfWCA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjIoMSwgMCkpOwogICAgICBDYXJ0ZXNpYW4yLlVOSVRfWSA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjIoMCwgMSkpOwogICAgICBDYXJ0ZXNpYW4yLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4yLmNsb25lKHRoaXMsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjIuZXF1YWxzKHRoaXMsIHJpZ2h0KTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMi5wcm90b3R5cGUuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKHJpZ2h0LCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4yLmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICB0aGlzLAogICAgICAgICAgcmlnaHQsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApOwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBgKCR7dGhpcy54fSwgJHt0aGlzLnl9KWA7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjJfZGVmYXVsdCA9IENhcnRlc2lhbjI7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9HZW9tZXRyeVR5cGUuanMKICB2YXIgR2VvbWV0cnlUeXBlLCBHZW9tZXRyeVR5cGVfZGVmYXVsdDsKICB2YXIgaW5pdF9HZW9tZXRyeVR5cGUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dlb21ldHJ5VHlwZS5qcyIoKSB7CiAgICAgIEdlb21ldHJ5VHlwZSA9IHsKICAgICAgICBOT05FOiAwLAogICAgICAgIFRSSUFOR0xFUzogMSwKICAgICAgICBMSU5FUzogMiwKICAgICAgICBQT0xZTElORVM6IDMKICAgICAgfTsKICAgICAgR2VvbWV0cnlUeXBlX2RlZmF1bHQgPSBPYmplY3QuZnJlZXplKEdlb21ldHJ5VHlwZSk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9NYXRyaXgyLmpzCiAgZnVuY3Rpb24gTWF0cml4Mihjb2x1bW4wUm93MCwgY29sdW1uMVJvdzAsIGNvbHVtbjBSb3cxLCBjb2x1bW4xUm93MSkgewogICAgdGhpc1swXSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjBSb3cwLCAwKTsKICAgIHRoaXNbMV0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4wUm93MSwgMCk7CiAgICB0aGlzWzJdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uMVJvdzAsIDApOwogICAgdGhpc1szXSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjFSb3cxLCAwKTsKICB9CiAgdmFyIHNjYWxlU2NyYXRjaDEzLCBzY2FsZVNjcmF0Y2gyMywgc2NyYXRjaENvbHVtbjMsIHNjYWxlU2NyYXRjaDMzLCBzY2FsZVNjcmF0Y2g0Mywgc2NhbGVTY3JhdGNoNTMsIE1hdHJpeDJfZGVmYXVsdDsKICB2YXIgaW5pdF9NYXRyaXgyID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9NYXRyaXgyLmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgTWF0cml4Mi5wYWNrZWRMZW5ndGggPSA0OwogICAgICBNYXRyaXgyLnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVswXTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbMV07CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzJdOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVszXTsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIE1hdHJpeDIudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBNYXRyaXgyKCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzFdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbMl0gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdFszXSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi5wYWNrQXJyYXkgPSBmdW5jdGlvbihhcnJheSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGg7CiAgICAgICAgY29uc3QgcmVzdWx0TGVuZ3RoID0gbGVuZ3RoICogNDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXJyYXkocmVzdWx0TGVuZ3RoKTsKICAgICAgICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHJlc3VsdCkgJiYgcmVzdWx0Lmxlbmd0aCAhPT0gcmVzdWx0TGVuZ3RoKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgIklmIHJlc3VsdCBpcyBhIHR5cGVkIGFycmF5LCBpdCBtdXN0IGhhdmUgZXhhY3RseSBhcnJheS5sZW5ndGggKiA0IGVsZW1lbnRzIgogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5sZW5ndGggIT09IHJlc3VsdExlbmd0aCkgewogICAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IHJlc3VsdExlbmd0aDsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgTWF0cml4Mi5wYWNrKGFycmF5W2ldLCByZXN1bHQsIGkgKiA0KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi51bnBhY2tBcnJheSA9IGZ1bmN0aW9uKGFycmF5LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJhcnJheS5sZW5ndGgiLCBhcnJheS5sZW5ndGgsIDQpOwogICAgICAgIGlmIChhcnJheS5sZW5ndGggJSA0ICE9PSAwKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXJyYXkgbGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0LiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGg7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEFycmF5KGxlbmd0aCAvIDQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQubGVuZ3RoID0gbGVuZ3RoIC8gNDsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gNCkgewogICAgICAgICAgY29uc3QgaW5kZXggPSBpIC8gNDsKICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBNYXRyaXgyLnVucGFjayhhcnJheSwgaSwgcmVzdWx0W2luZGV4XSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDIuY2xvbmUgPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG1hdHJpeCkpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgTWF0cml4MihtYXRyaXhbMF0sIG1hdHJpeFsyXSwgbWF0cml4WzFdLCBtYXRyaXhbM10pOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF07CiAgICAgICAgcmVzdWx0WzFdID0gbWF0cml4WzFdOwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXTsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM107CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi5mcm9tQXJyYXkgPSBNYXRyaXgyLnVucGFjazsKICAgICAgTWF0cml4Mi5mcm9tQ29sdW1uTWFqb3JBcnJheSA9IGZ1bmN0aW9uKHZhbHVlcywgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJ2YWx1ZXMiLCB2YWx1ZXMpOwogICAgICAgIHJldHVybiBNYXRyaXgyLmNsb25lKHZhbHVlcywgcmVzdWx0KTsKICAgICAgfTsKICAgICAgTWF0cml4Mi5mcm9tUm93TWFqb3JBcnJheSA9IGZ1bmN0aW9uKHZhbHVlcywgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJ2YWx1ZXMiLCB2YWx1ZXMpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgTWF0cml4Mih2YWx1ZXNbMF0sIHZhbHVlc1sxXSwgdmFsdWVzWzJdLCB2YWx1ZXNbM10pOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSB2YWx1ZXNbMF07CiAgICAgICAgcmVzdWx0WzFdID0gdmFsdWVzWzJdOwogICAgICAgIHJlc3VsdFsyXSA9IHZhbHVlc1sxXTsKICAgICAgICByZXN1bHRbM10gPSB2YWx1ZXNbM107CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi5mcm9tU2NhbGUgPSBmdW5jdGlvbihzY2FsZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzY2FsZSIsIHNjYWxlKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IE1hdHJpeDIoc2NhbGUueCwgMCwgMCwgc2NhbGUueSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IHNjYWxlLng7CiAgICAgICAgcmVzdWx0WzFdID0gMDsKICAgICAgICByZXN1bHRbMl0gPSAwOwogICAgICAgIHJlc3VsdFszXSA9IHNjYWxlLnk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi5mcm9tVW5pZm9ybVNjYWxlID0gZnVuY3Rpb24oc2NhbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGUiLCBzY2FsZSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgyKHNjYWxlLCAwLCAwLCBzY2FsZSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IHNjYWxlOwogICAgICAgIHJlc3VsdFsxXSA9IDA7CiAgICAgICAgcmVzdWx0WzJdID0gMDsKICAgICAgICByZXN1bHRbM10gPSBzY2FsZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgyLmZyb21Sb3RhdGlvbiA9IGZ1bmN0aW9uKGFuZ2xlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImFuZ2xlIiwgYW5nbGUpOwogICAgICAgIGNvbnN0IGNvc0FuZ2xlID0gTWF0aC5jb3MoYW5nbGUpOwogICAgICAgIGNvbnN0IHNpbkFuZ2xlID0gTWF0aC5zaW4oYW5nbGUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgTWF0cml4Mihjb3NBbmdsZSwgLXNpbkFuZ2xlLCBzaW5BbmdsZSwgY29zQW5nbGUpOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBjb3NBbmdsZTsKICAgICAgICByZXN1bHRbMV0gPSBzaW5BbmdsZTsKICAgICAgICByZXN1bHRbMl0gPSAtc2luQW5nbGU7CiAgICAgICAgcmVzdWx0WzNdID0gY29zQW5nbGU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi50b0FycmF5ID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIFttYXRyaXhbMF0sIG1hdHJpeFsxXSwgbWF0cml4WzJdLCBtYXRyaXhbM11dOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF07CiAgICAgICAgcmVzdWx0WzFdID0gbWF0cml4WzFdOwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXTsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM107CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi5nZXRFbGVtZW50SW5kZXggPSBmdW5jdGlvbihjb2x1bW4sIHJvdykgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJyb3ciLCByb3csIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJyb3ciLCByb3csIDEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJjb2x1bW4iLCBjb2x1bW4sIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJjb2x1bW4iLCBjb2x1bW4sIDEpOwogICAgICAgIHJldHVybiBjb2x1bW4gKiAyICsgcm93OwogICAgICB9OwogICAgICBNYXRyaXgyLmdldENvbHVtbiA9IGZ1bmN0aW9uKG1hdHJpeCwgaW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBzdGFydEluZGV4ID0gaW5kZXggKiAyOwogICAgICAgIGNvbnN0IHggPSBtYXRyaXhbc3RhcnRJbmRleF07CiAgICAgICAgY29uc3QgeSA9IG1hdHJpeFtzdGFydEluZGV4ICsgMV07CiAgICAgICAgcmVzdWx0LnggPSB4OwogICAgICAgIHJlc3VsdC55ID0geTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgyLnNldENvbHVtbiA9IGZ1bmN0aW9uKG1hdHJpeCwgaW5kZXgsIGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJpbmRleCIsIGluZGV4LCAxKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0ID0gTWF0cml4Mi5jbG9uZShtYXRyaXgsIHJlc3VsdCk7CiAgICAgICAgY29uc3Qgc3RhcnRJbmRleCA9IGluZGV4ICogMjsKICAgICAgICByZXN1bHRbc3RhcnRJbmRleF0gPSBjYXJ0ZXNpYW4xMS54OwogICAgICAgIHJlc3VsdFtzdGFydEluZGV4ICsgMV0gPSBjYXJ0ZXNpYW4xMS55OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDIuZ2V0Um93ID0gZnVuY3Rpb24obWF0cml4LCBpbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJpbmRleCIsIGluZGV4LCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHggPSBtYXRyaXhbaW5kZXhdOwogICAgICAgIGNvbnN0IHkgPSBtYXRyaXhbaW5kZXggKyAyXTsKICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDIuc2V0Um93ID0gZnVuY3Rpb24obWF0cml4LCBpbmRleCwgY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQgPSBNYXRyaXgyLmNsb25lKG1hdHJpeCwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbaW5kZXhdID0gY2FydGVzaWFuMTEueDsKICAgICAgICByZXN1bHRbaW5kZXggKyAyXSA9IGNhcnRlc2lhbjExLnk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NhbGVTY3JhdGNoMTMgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIE1hdHJpeDIuc2V0U2NhbGUgPSBmdW5jdGlvbihtYXRyaXgsIHNjYWxlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzY2FsZSIsIHNjYWxlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgZXhpc3RpbmdTY2FsZSA9IE1hdHJpeDIuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2gxMyk7CiAgICAgICAgY29uc3Qgc2NhbGVSYXRpb1ggPSBzY2FsZS54IC8gZXhpc3RpbmdTY2FsZS54OwogICAgICAgIGNvbnN0IHNjYWxlUmF0aW9ZID0gc2NhbGUueSAvIGV4aXN0aW5nU2NhbGUueTsKICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF0gKiBzY2FsZVJhdGlvWDsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV0gKiBzY2FsZVJhdGlvWDsKICAgICAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl0gKiBzY2FsZVJhdGlvWTsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM10gKiBzY2FsZVJhdGlvWTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY2FsZVNjcmF0Y2gyMyA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgTWF0cml4Mi5zZXRVbmlmb3JtU2NhbGUgPSBmdW5jdGlvbihtYXRyaXgsIHNjYWxlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJzY2FsZSIsIHNjYWxlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgZXhpc3RpbmdTY2FsZSA9IE1hdHJpeDIuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2gyMyk7CiAgICAgICAgY29uc3Qgc2NhbGVSYXRpb1ggPSBzY2FsZSAvIGV4aXN0aW5nU2NhbGUueDsKICAgICAgICBjb25zdCBzY2FsZVJhdGlvWSA9IHNjYWxlIC8gZXhpc3RpbmdTY2FsZS55OwogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXSAqIHNjYWxlUmF0aW9YOwogICAgICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAqIHNjYWxlUmF0aW9YOwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAqIHNjYWxlUmF0aW9ZOwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXSAqIHNjYWxlUmF0aW9ZOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hDb2x1bW4zID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBNYXRyaXgyLmdldFNjYWxlID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gQ2FydGVzaWFuMl9kZWZhdWx0Lm1hZ25pdHVkZSgKICAgICAgICAgIENhcnRlc2lhbjJfZGVmYXVsdC5mcm9tRWxlbWVudHMobWF0cml4WzBdLCBtYXRyaXhbMV0sIHNjcmF0Y2hDb2x1bW4zKQogICAgICAgICk7CiAgICAgICAgcmVzdWx0LnkgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQubWFnbml0dWRlKAogICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0LmZyb21FbGVtZW50cyhtYXRyaXhbMl0sIG1hdHJpeFszXSwgc2NyYXRjaENvbHVtbjMpCiAgICAgICAgKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY2FsZVNjcmF0Y2gzMyA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgTWF0cml4Mi5nZXRNYXhpbXVtU2NhbGUgPSBmdW5jdGlvbihtYXRyaXgpIHsKICAgICAgICBNYXRyaXgyLmdldFNjYWxlKG1hdHJpeCwgc2NhbGVTY3JhdGNoMzMpOwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4yX2RlZmF1bHQubWF4aW11bUNvbXBvbmVudChzY2FsZVNjcmF0Y2gzMyk7CiAgICAgIH07CiAgICAgIHNjYWxlU2NyYXRjaDQzID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBNYXRyaXgyLnNldFJvdGF0aW9uID0gZnVuY3Rpb24obWF0cml4LCByb3RhdGlvbiwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBzY2FsZSA9IE1hdHJpeDIuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2g0Myk7CiAgICAgICAgcmVzdWx0WzBdID0gcm90YXRpb25bMF0gKiBzY2FsZS54OwogICAgICAgIHJlc3VsdFsxXSA9IHJvdGF0aW9uWzFdICogc2NhbGUueDsKICAgICAgICByZXN1bHRbMl0gPSByb3RhdGlvblsyXSAqIHNjYWxlLnk7CiAgICAgICAgcmVzdWx0WzNdID0gcm90YXRpb25bM10gKiBzY2FsZS55OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjYWxlU2NyYXRjaDUzID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBNYXRyaXgyLmdldFJvdGF0aW9uID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHNjYWxlID0gTWF0cml4Mi5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDUzKTsKICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF0gLyBzY2FsZS54OwogICAgICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAvIHNjYWxlLng7CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdIC8gc2NhbGUueTsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM10gLyBzY2FsZS55OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDIubXVsdGlwbHkgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgY29sdW1uMFJvdzAgPSBsZWZ0WzBdICogcmlnaHRbMF0gKyBsZWZ0WzJdICogcmlnaHRbMV07CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzAgPSBsZWZ0WzBdICogcmlnaHRbMl0gKyBsZWZ0WzJdICogcmlnaHRbM107CiAgICAgICAgY29uc3QgY29sdW1uMFJvdzEgPSBsZWZ0WzFdICogcmlnaHRbMF0gKyBsZWZ0WzNdICogcmlnaHRbMV07CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzEgPSBsZWZ0WzFdICogcmlnaHRbMl0gKyBsZWZ0WzNdICogcmlnaHRbM107CiAgICAgICAgcmVzdWx0WzBdID0gY29sdW1uMFJvdzA7CiAgICAgICAgcmVzdWx0WzFdID0gY29sdW1uMFJvdzE7CiAgICAgICAgcmVzdWx0WzJdID0gY29sdW1uMVJvdzA7CiAgICAgICAgcmVzdWx0WzNdID0gY29sdW1uMVJvdzE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi5hZGQgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gbGVmdFswXSArIHJpZ2h0WzBdOwogICAgICAgIHJlc3VsdFsxXSA9IGxlZnRbMV0gKyByaWdodFsxXTsKICAgICAgICByZXN1bHRbMl0gPSBsZWZ0WzJdICsgcmlnaHRbMl07CiAgICAgICAgcmVzdWx0WzNdID0gbGVmdFszXSArIHJpZ2h0WzNdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDIuc3VidHJhY3QgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gbGVmdFswXSAtIHJpZ2h0WzBdOwogICAgICAgIHJlc3VsdFsxXSA9IGxlZnRbMV0gLSByaWdodFsxXTsKICAgICAgICByZXN1bHRbMl0gPSBsZWZ0WzJdIC0gcmlnaHRbMl07CiAgICAgICAgcmVzdWx0WzNdID0gbGVmdFszXSAtIHJpZ2h0WzNdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDIubXVsdGlwbHlCeVZlY3RvciA9IGZ1bmN0aW9uKG1hdHJpeCwgY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgeCA9IG1hdHJpeFswXSAqIGNhcnRlc2lhbjExLnggKyBtYXRyaXhbMl0gKiBjYXJ0ZXNpYW4xMS55OwogICAgICAgIGNvbnN0IHkgPSBtYXRyaXhbMV0gKiBjYXJ0ZXNpYW4xMS54ICsgbWF0cml4WzNdICogY2FydGVzaWFuMTEueTsKICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDIubXVsdGlwbHlCeVNjYWxhciA9IGZ1bmN0aW9uKG1hdHJpeCwgc2NhbGFyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJzY2FsYXIiLCBzY2FsYXIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF0gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzFdID0gbWF0cml4WzFdICogc2NhbGFyOwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAqIHNjYWxhcjsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM10gKiBzY2FsYXI7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi5tdWx0aXBseUJ5U2NhbGUgPSBmdW5jdGlvbihtYXRyaXgsIHNjYWxlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzY2FsZSIsIHNjYWxlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gbWF0cml4WzBdICogc2NhbGUueDsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV0gKiBzY2FsZS54OwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAqIHNjYWxlLnk7CiAgICAgICAgcmVzdWx0WzNdID0gbWF0cml4WzNdICogc2NhbGUueTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgyLm11bHRpcGx5QnlVbmlmb3JtU2NhbGUgPSBmdW5jdGlvbihtYXRyaXgsIHNjYWxlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJzY2FsZSIsIHNjYWxlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gbWF0cml4WzBdICogc2NhbGU7CiAgICAgICAgcmVzdWx0WzFdID0gbWF0cml4WzFdICogc2NhbGU7CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdICogc2NhbGU7CiAgICAgICAgcmVzdWx0WzNdID0gbWF0cml4WzNdICogc2NhbGU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi5uZWdhdGUgPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gLW1hdHJpeFswXTsKICAgICAgICByZXN1bHRbMV0gPSAtbWF0cml4WzFdOwogICAgICAgIHJlc3VsdFsyXSA9IC1tYXRyaXhbMl07CiAgICAgICAgcmVzdWx0WzNdID0gLW1hdHJpeFszXTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgyLnRyYW5zcG9zZSA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBjb2x1bW4wUm93MCA9IG1hdHJpeFswXTsKICAgICAgICBjb25zdCBjb2x1bW4wUm93MSA9IG1hdHJpeFsyXTsKICAgICAgICBjb25zdCBjb2x1bW4xUm93MCA9IG1hdHJpeFsxXTsKICAgICAgICBjb25zdCBjb2x1bW4xUm93MSA9IG1hdHJpeFszXTsKICAgICAgICByZXN1bHRbMF0gPSBjb2x1bW4wUm93MDsKICAgICAgICByZXN1bHRbMV0gPSBjb2x1bW4wUm93MTsKICAgICAgICByZXN1bHRbMl0gPSBjb2x1bW4xUm93MDsKICAgICAgICByZXN1bHRbM10gPSBjb2x1bW4xUm93MTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgyLmFicyA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSBNYXRoLmFicyhtYXRyaXhbMF0pOwogICAgICAgIHJlc3VsdFsxXSA9IE1hdGguYWJzKG1hdHJpeFsxXSk7CiAgICAgICAgcmVzdWx0WzJdID0gTWF0aC5hYnMobWF0cml4WzJdKTsKICAgICAgICByZXN1bHRbM10gPSBNYXRoLmFicyhtYXRyaXhbM10pOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDIuZXF1YWxzID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICByZXR1cm4gbGVmdCA9PT0gcmlnaHQgfHwgZGVmaW5lZF9kZWZhdWx0KGxlZnQpICYmIGRlZmluZWRfZGVmYXVsdChyaWdodCkgJiYgbGVmdFswXSA9PT0gcmlnaHRbMF0gJiYgbGVmdFsxXSA9PT0gcmlnaHRbMV0gJiYgbGVmdFsyXSA9PT0gcmlnaHRbMl0gJiYgbGVmdFszXSA9PT0gcmlnaHRbM107CiAgICAgIH07CiAgICAgIE1hdHJpeDIuZXF1YWxzQXJyYXkgPSBmdW5jdGlvbihtYXRyaXgsIGFycmF5LCBvZmZzZXQpIHsKICAgICAgICByZXR1cm4gbWF0cml4WzBdID09PSBhcnJheVtvZmZzZXRdICYmIG1hdHJpeFsxXSA9PT0gYXJyYXlbb2Zmc2V0ICsgMV0gJiYgbWF0cml4WzJdID09PSBhcnJheVtvZmZzZXQgKyAyXSAmJiBtYXRyaXhbM10gPT09IGFycmF5W29mZnNldCArIDNdOwogICAgICB9OwogICAgICBNYXRyaXgyLmVxdWFsc0Vwc2lsb24gPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgZXBzaWxvbikgewogICAgICAgIGVwc2lsb24gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChlcHNpbG9uLCAwKTsKICAgICAgICByZXR1cm4gbGVmdCA9PT0gcmlnaHQgfHwgZGVmaW5lZF9kZWZhdWx0KGxlZnQpICYmIGRlZmluZWRfZGVmYXVsdChyaWdodCkgJiYgTWF0aC5hYnMobGVmdFswXSAtIHJpZ2h0WzBdKSA8PSBlcHNpbG9uICYmIE1hdGguYWJzKGxlZnRbMV0gLSByaWdodFsxXSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzJdIC0gcmlnaHRbMl0pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFszXSAtIHJpZ2h0WzNdKSA8PSBlcHNpbG9uOwogICAgICB9OwogICAgICBNYXRyaXgyLklERU5USVRZID0gT2JqZWN0LmZyZWV6ZShuZXcgTWF0cml4MigxLCAwLCAwLCAxKSk7CiAgICAgIE1hdHJpeDIuWkVSTyA9IE9iamVjdC5mcmVlemUobmV3IE1hdHJpeDIoMCwgMCwgMCwgMCkpOwogICAgICBNYXRyaXgyLkNPTFVNTjBST1cwID0gMDsKICAgICAgTWF0cml4Mi5DT0xVTU4wUk9XMSA9IDE7CiAgICAgIE1hdHJpeDIuQ09MVU1OMVJPVzAgPSAyOwogICAgICBNYXRyaXgyLkNPTFVNTjFST1cxID0gMzsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTWF0cml4Mi5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgaXRlbXMgaW4gdGhlIGNvbGxlY3Rpb24uCiAgICAgICAgICogQG1lbWJlcm9mIE1hdHJpeDIucHJvdG90eXBlCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqLwogICAgICAgIGxlbmd0aDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIE1hdHJpeDIucGFja2VkTGVuZ3RoOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIE1hdHJpeDIucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIE1hdHJpeDIuY2xvbmUodGhpcywgcmVzdWx0KTsKICAgICAgfTsKICAgICAgTWF0cml4Mi5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ocmlnaHQpIHsKICAgICAgICByZXR1cm4gTWF0cml4Mi5lcXVhbHModGhpcywgcmlnaHQpOwogICAgICB9OwogICAgICBNYXRyaXgyLnByb3RvdHlwZS5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24ocmlnaHQsIGVwc2lsb24pIHsKICAgICAgICByZXR1cm4gTWF0cml4Mi5lcXVhbHNFcHNpbG9uKHRoaXMsIHJpZ2h0LCBlcHNpbG9uKTsKICAgICAgfTsKICAgICAgTWF0cml4Mi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gYCgke3RoaXNbMF19LCAke3RoaXNbMl19KQooJHt0aGlzWzFdfSwgJHt0aGlzWzNdfSlgOwogICAgICB9OwogICAgICBNYXRyaXgyX2RlZmF1bHQgPSBNYXRyaXgyOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUHJpbWl0aXZlVHlwZS5qcwogIHZhciBQcmltaXRpdmVUeXBlLCBQcmltaXRpdmVUeXBlX2RlZmF1bHQ7CiAgdmFyIGluaXRfUHJpbWl0aXZlVHlwZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUHJpbWl0aXZlVHlwZS5qcyIoKSB7CiAgICAgIGluaXRfV2ViR0xDb25zdGFudHMoKTsKICAgICAgUHJpbWl0aXZlVHlwZSA9IHsKICAgICAgICAvKioKICAgICAgICAgKiBQb2ludHMgcHJpbWl0aXZlIHdoZXJlIGVhY2ggdmVydGV4IChvciBpbmRleCkgaXMgYSBzZXBhcmF0ZSBwb2ludC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgUE9JTlRTOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlBPSU5UUywKICAgICAgICAvKioKICAgICAgICAgKiBMaW5lcyBwcmltaXRpdmUgd2hlcmUgZWFjaCB0d28gdmVydGljZXMgKG9yIGluZGljZXMpIGlzIGEgbGluZSBzZWdtZW50LiAgTGluZSBzZWdtZW50cyBhcmUgbm90IG5lY2Vzc2FyaWx5IGNvbm5lY3RlZC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgTElORVM6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuTElORVMsCiAgICAgICAgLyoqCiAgICAgICAgICogTGluZSBsb29wIHByaW1pdGl2ZSB3aGVyZSBlYWNoIHZlcnRleCAob3IgaW5kZXgpIGFmdGVyIHRoZSBmaXJzdCBjb25uZWN0cyBhIGxpbmUgdG8KICAgICAgICAgKiB0aGUgcHJldmlvdXMgdmVydGV4LCBhbmQgdGhlIGxhc3QgdmVydGV4IGltcGxpY2l0bHkgY29ubmVjdHMgdG8gdGhlIGZpcnN0LgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBMSU5FX0xPT1A6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuTElORV9MT09QLAogICAgICAgIC8qKgogICAgICAgICAqIExpbmUgc3RyaXAgcHJpbWl0aXZlIHdoZXJlIGVhY2ggdmVydGV4IChvciBpbmRleCkgYWZ0ZXIgdGhlIGZpcnN0IGNvbm5lY3RzIGEgbGluZSB0byB0aGUgcHJldmlvdXMgdmVydGV4LgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBMSU5FX1NUUklQOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkxJTkVfU1RSSVAsCiAgICAgICAgLyoqCiAgICAgICAgICogVHJpYW5nbGVzIHByaW1pdGl2ZSB3aGVyZSBlYWNoIHRocmVlIHZlcnRpY2VzIChvciBpbmRpY2VzKSBpcyBhIHRyaWFuZ2xlLiAgVHJpYW5nbGVzIGRvIG5vdCBuZWNlc3NhcmlseSBzaGFyZSBlZGdlcy4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgVFJJQU5HTEVTOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlRSSUFOR0xFUywKICAgICAgICAvKioKICAgICAgICAgKiBUcmlhbmdsZSBzdHJpcCBwcmltaXRpdmUgd2hlcmUgZWFjaCB2ZXJ0ZXggKG9yIGluZGV4KSBhZnRlciB0aGUgZmlyc3QgdHdvIGNvbm5lY3QgdG8KICAgICAgICAgKiB0aGUgcHJldmlvdXMgdHdvIHZlcnRpY2VzIGZvcm1pbmcgYSB0cmlhbmdsZS4gIEZvciBleGFtcGxlLCB0aGlzIGNhbiBiZSB1c2VkIHRvIG1vZGVsIGEgd2FsbC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgVFJJQU5HTEVfU1RSSVA6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuVFJJQU5HTEVfU1RSSVAsCiAgICAgICAgLyoqCiAgICAgICAgICogVHJpYW5nbGUgZmFuIHByaW1pdGl2ZSB3aGVyZSBlYWNoIHZlcnRleCAob3IgaW5kZXgpIGFmdGVyIHRoZSBmaXJzdCB0d28gY29ubmVjdCB0bwogICAgICAgICAqIHRoZSBwcmV2aW91cyB2ZXJ0ZXggYW5kIHRoZSBmaXJzdCB2ZXJ0ZXggZm9ybWluZyBhIHRyaWFuZ2xlLiAgRm9yIGV4YW1wbGUsIHRoaXMgY2FuIGJlIHVzZWQKICAgICAgICAgKiB0byBtb2RlbCBhIGNvbmUgb3IgY2lyY2xlLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBUUklBTkdMRV9GQU46IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuVFJJQU5HTEVfRkFOCiAgICAgIH07CiAgICAgIFByaW1pdGl2ZVR5cGUuaXNMaW5lcyA9IGZ1bmN0aW9uKHByaW1pdGl2ZVR5cGUpIHsKICAgICAgICByZXR1cm4gcHJpbWl0aXZlVHlwZSA9PT0gUHJpbWl0aXZlVHlwZS5MSU5FUyB8fCBwcmltaXRpdmVUeXBlID09PSBQcmltaXRpdmVUeXBlLkxJTkVfTE9PUCB8fCBwcmltaXRpdmVUeXBlID09PSBQcmltaXRpdmVUeXBlLkxJTkVfU1RSSVA7CiAgICAgIH07CiAgICAgIFByaW1pdGl2ZVR5cGUuaXNUcmlhbmdsZXMgPSBmdW5jdGlvbihwcmltaXRpdmVUeXBlKSB7CiAgICAgICAgcmV0dXJuIHByaW1pdGl2ZVR5cGUgPT09IFByaW1pdGl2ZVR5cGUuVFJJQU5HTEVTIHx8IHByaW1pdGl2ZVR5cGUgPT09IFByaW1pdGl2ZVR5cGUuVFJJQU5HTEVfU1RSSVAgfHwgcHJpbWl0aXZlVHlwZSA9PT0gUHJpbWl0aXZlVHlwZS5UUklBTkdMRV9GQU47CiAgICAgIH07CiAgICAgIFByaW1pdGl2ZVR5cGUudmFsaWRhdGUgPSBmdW5jdGlvbihwcmltaXRpdmVUeXBlKSB7CiAgICAgICAgcmV0dXJuIHByaW1pdGl2ZVR5cGUgPT09IFByaW1pdGl2ZVR5cGUuUE9JTlRTIHx8IHByaW1pdGl2ZVR5cGUgPT09IFByaW1pdGl2ZVR5cGUuTElORVMgfHwgcHJpbWl0aXZlVHlwZSA9PT0gUHJpbWl0aXZlVHlwZS5MSU5FX0xPT1AgfHwgcHJpbWl0aXZlVHlwZSA9PT0gUHJpbWl0aXZlVHlwZS5MSU5FX1NUUklQIHx8IHByaW1pdGl2ZVR5cGUgPT09IFByaW1pdGl2ZVR5cGUuVFJJQU5HTEVTIHx8IHByaW1pdGl2ZVR5cGUgPT09IFByaW1pdGl2ZVR5cGUuVFJJQU5HTEVfU1RSSVAgfHwgcHJpbWl0aXZlVHlwZSA9PT0gUHJpbWl0aXZlVHlwZS5UUklBTkdMRV9GQU47CiAgICAgIH07CiAgICAgIFByaW1pdGl2ZVR5cGVfZGVmYXVsdCA9IE9iamVjdC5mcmVlemUoUHJpbWl0aXZlVHlwZSk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9GdWxsc2NyZWVuLmpzCiAgdmFyIF9zdXBwb3J0c0Z1bGxzY3JlZW4sIF9uYW1lcywgRnVsbHNjcmVlbiwgRnVsbHNjcmVlbl9kZWZhdWx0OwogIHZhciBpbml0X0Z1bGxzY3JlZW4gPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0Z1bGxzY3JlZW4uanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgX25hbWVzID0gewogICAgICAgIHJlcXVlc3RGdWxsc2NyZWVuOiB2b2lkIDAsCiAgICAgICAgZXhpdEZ1bGxzY3JlZW46IHZvaWQgMCwKICAgICAgICBmdWxsc2NyZWVuRW5hYmxlZDogdm9pZCAwLAogICAgICAgIGZ1bGxzY3JlZW5FbGVtZW50OiB2b2lkIDAsCiAgICAgICAgZnVsbHNjcmVlbmNoYW5nZTogdm9pZCAwLAogICAgICAgIGZ1bGxzY3JlZW5lcnJvcjogdm9pZCAwCiAgICAgIH07CiAgICAgIEZ1bGxzY3JlZW4gPSB7fTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoRnVsbHNjcmVlbiwgewogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBlbGVtZW50IHRoYXQgaXMgY3VycmVudGx5IGZ1bGxzY3JlZW4sIGlmIGFueS4gIFRvIHNpbXBseSBjaGVjayBpZiB0aGUKICAgICAgICAgKiBicm93c2VyIGlzIGluIGZ1bGxzY3JlZW4gbW9kZSBvciBub3QsIHVzZSB7QGxpbmsgRnVsbHNjcmVlbiNmdWxsc2NyZWVufS4KICAgICAgICAgKiBAbWVtYmVyb2YgRnVsbHNjcmVlbgogICAgICAgICAqIEB0eXBlIHtvYmplY3R9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgZWxlbWVudDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKCFGdWxsc2NyZWVuLnN1cHBvcnRzRnVsbHNjcmVlbigpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZG9jdW1lbnRbX25hbWVzLmZ1bGxzY3JlZW5FbGVtZW50XTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBuYW1lIG9mIHRoZSBldmVudCBvbiB0aGUgZG9jdW1lbnQgdGhhdCBpcyBmaXJlZCB3aGVuIGZ1bGxzY3JlZW4gaXMKICAgICAgICAgKiBlbnRlcmVkIG9yIGV4aXRlZC4gIFRoaXMgZXZlbnQgbmFtZSBpcyBpbnRlbmRlZCBmb3IgdXNlIHdpdGggYWRkRXZlbnRMaXN0ZW5lci4KICAgICAgICAgKiBJbiB5b3VyIGV2ZW50IGhhbmRsZXIsIHRvIGRldGVybWluZSBpZiB0aGUgYnJvd3NlciBpcyBpbiBmdWxsc2NyZWVuIG1vZGUgb3Igbm90LAogICAgICAgICAqIHVzZSB7QGxpbmsgRnVsbHNjcmVlbiNmdWxsc2NyZWVufS4KICAgICAgICAgKiBAbWVtYmVyb2YgRnVsbHNjcmVlbgogICAgICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgY2hhbmdlRXZlbnROYW1lOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoIUZ1bGxzY3JlZW4uc3VwcG9ydHNGdWxsc2NyZWVuKCkpIHsKICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBfbmFtZXMuZnVsbHNjcmVlbmNoYW5nZTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gYSBmdWxsc2NyZWVuIGVycm9yCiAgICAgICAgICogb2NjdXJzLiAgVGhpcyBldmVudCBuYW1lIGlzIGludGVuZGVkIGZvciB1c2Ugd2l0aCBhZGRFdmVudExpc3RlbmVyLgogICAgICAgICAqIEBtZW1iZXJvZiBGdWxsc2NyZWVuCiAgICAgICAgICogQHR5cGUge3N0cmluZ30KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBlcnJvckV2ZW50TmFtZTogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKCFGdWxsc2NyZWVuLnN1cHBvcnRzRnVsbHNjcmVlbigpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gX25hbWVzLmZ1bGxzY3JlZW5lcnJvcjsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIERldGVybWluZSB3aGV0aGVyIHRoZSBicm93c2VyIHdpbGwgYWxsb3cgYW4gZWxlbWVudCB0byBiZSBtYWRlIGZ1bGxzY3JlZW4sIG9yIG5vdC4KICAgICAgICAgKiBGb3IgZXhhbXBsZSwgYnkgZGVmYXVsdCwgaWZyYW1lcyBjYW5ub3QgZ28gZnVsbHNjcmVlbiB1bmxlc3MgdGhlIGNvbnRhaW5pbmcgcGFnZQogICAgICAgICAqIGFkZHMgYW4gImFsbG93ZnVsbHNjcmVlbiIgYXR0cmlidXRlIChvciBwcmVmaXhlZCBlcXVpdmFsZW50KS4KICAgICAgICAgKiBAbWVtYmVyb2YgRnVsbHNjcmVlbgogICAgICAgICAqIEB0eXBlIHtib29sZWFufQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIGVuYWJsZWQ6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICghRnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxzY3JlZW4oKSkgewogICAgICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50W19uYW1lcy5mdWxsc2NyZWVuRW5hYmxlZF07CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBicm93c2VyIGlzIGN1cnJlbnRseSBpbiBmdWxsc2NyZWVuIG1vZGUuCiAgICAgICAgICogQG1lbWJlcm9mIEZ1bGxzY3JlZW4KICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBmdWxsc2NyZWVuOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoIUZ1bGxzY3JlZW4uc3VwcG9ydHNGdWxsc2NyZWVuKCkpIHsKICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBGdWxsc2NyZWVuLmVsZW1lbnQgIT09IG51bGw7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgRnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxzY3JlZW4gPSBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KF9zdXBwb3J0c0Z1bGxzY3JlZW4pKSB7CiAgICAgICAgICByZXR1cm4gX3N1cHBvcnRzRnVsbHNjcmVlbjsKICAgICAgICB9CiAgICAgICAgX3N1cHBvcnRzRnVsbHNjcmVlbiA9IGZhbHNlOwogICAgICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5OwogICAgICAgIGlmICh0eXBlb2YgYm9keS5yZXF1ZXN0RnVsbHNjcmVlbiA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgX25hbWVzLnJlcXVlc3RGdWxsc2NyZWVuID0gInJlcXVlc3RGdWxsc2NyZWVuIjsKICAgICAgICAgIF9uYW1lcy5leGl0RnVsbHNjcmVlbiA9ICJleGl0RnVsbHNjcmVlbiI7CiAgICAgICAgICBfbmFtZXMuZnVsbHNjcmVlbkVuYWJsZWQgPSAiZnVsbHNjcmVlbkVuYWJsZWQiOwogICAgICAgICAgX25hbWVzLmZ1bGxzY3JlZW5FbGVtZW50ID0gImZ1bGxzY3JlZW5FbGVtZW50IjsKICAgICAgICAgIF9uYW1lcy5mdWxsc2NyZWVuY2hhbmdlID0gImZ1bGxzY3JlZW5jaGFuZ2UiOwogICAgICAgICAgX25hbWVzLmZ1bGxzY3JlZW5lcnJvciA9ICJmdWxsc2NyZWVuZXJyb3IiOwogICAgICAgICAgX3N1cHBvcnRzRnVsbHNjcmVlbiA9IHRydWU7CiAgICAgICAgICByZXR1cm4gX3N1cHBvcnRzRnVsbHNjcmVlbjsKICAgICAgICB9CiAgICAgICAgY29uc3QgcHJlZml4ZXMgPSBbIndlYmtpdCIsICJtb3oiLCAibyIsICJtcyIsICJraHRtbCJdOwogICAgICAgIGxldCBuYW1lOwogICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwcmVmaXhlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkgewogICAgICAgICAgY29uc3QgcHJlZml4ID0gcHJlZml4ZXNbaV07CiAgICAgICAgICBuYW1lID0gYCR7cHJlZml4fVJlcXVlc3RGdWxsc2NyZWVuYDsKICAgICAgICAgIGlmICh0eXBlb2YgYm9keVtuYW1lXSA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICBfbmFtZXMucmVxdWVzdEZ1bGxzY3JlZW4gPSBuYW1lOwogICAgICAgICAgICBfc3VwcG9ydHNGdWxsc2NyZWVuID0gdHJ1ZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5hbWUgPSBgJHtwcmVmaXh9UmVxdWVzdEZ1bGxTY3JlZW5gOwogICAgICAgICAgICBpZiAodHlwZW9mIGJvZHlbbmFtZV0gPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICBfbmFtZXMucmVxdWVzdEZ1bGxzY3JlZW4gPSBuYW1lOwogICAgICAgICAgICAgIF9zdXBwb3J0c0Z1bGxzY3JlZW4gPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBuYW1lID0gYCR7cHJlZml4fUV4aXRGdWxsc2NyZWVuYDsKICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnRbbmFtZV0gPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgX25hbWVzLmV4aXRGdWxsc2NyZWVuID0gbmFtZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5hbWUgPSBgJHtwcmVmaXh9Q2FuY2VsRnVsbFNjcmVlbmA7CiAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnRbbmFtZV0gPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICBfbmFtZXMuZXhpdEZ1bGxzY3JlZW4gPSBuYW1lOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBuYW1lID0gYCR7cHJlZml4fUZ1bGxzY3JlZW5FbmFibGVkYDsKICAgICAgICAgIGlmIChkb2N1bWVudFtuYW1lXSAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgIF9uYW1lcy5mdWxsc2NyZWVuRW5hYmxlZCA9IG5hbWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuYW1lID0gYCR7cHJlZml4fUZ1bGxTY3JlZW5FbmFibGVkYDsKICAgICAgICAgICAgaWYgKGRvY3VtZW50W25hbWVdICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgICBfbmFtZXMuZnVsbHNjcmVlbkVuYWJsZWQgPSBuYW1lOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBuYW1lID0gYCR7cHJlZml4fUZ1bGxzY3JlZW5FbGVtZW50YDsKICAgICAgICAgIGlmIChkb2N1bWVudFtuYW1lXSAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgIF9uYW1lcy5mdWxsc2NyZWVuRWxlbWVudCA9IG5hbWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuYW1lID0gYCR7cHJlZml4fUZ1bGxTY3JlZW5FbGVtZW50YDsKICAgICAgICAgICAgaWYgKGRvY3VtZW50W25hbWVdICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgICBfbmFtZXMuZnVsbHNjcmVlbkVsZW1lbnQgPSBuYW1lOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBuYW1lID0gYCR7cHJlZml4fWZ1bGxzY3JlZW5jaGFuZ2VgOwogICAgICAgICAgaWYgKGRvY3VtZW50W2BvbiR7bmFtZX1gXSAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgIGlmIChwcmVmaXggPT09ICJtcyIpIHsKICAgICAgICAgICAgICBuYW1lID0gIk1TRnVsbHNjcmVlbkNoYW5nZSI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX25hbWVzLmZ1bGxzY3JlZW5jaGFuZ2UgPSBuYW1lOwogICAgICAgICAgfQogICAgICAgICAgbmFtZSA9IGAke3ByZWZpeH1mdWxsc2NyZWVuZXJyb3JgOwogICAgICAgICAgaWYgKGRvY3VtZW50W2BvbiR7bmFtZX1gXSAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgIGlmIChwcmVmaXggPT09ICJtcyIpIHsKICAgICAgICAgICAgICBuYW1lID0gIk1TRnVsbHNjcmVlbkVycm9yIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBfbmFtZXMuZnVsbHNjcmVlbmVycm9yID0gbmFtZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIF9zdXBwb3J0c0Z1bGxzY3JlZW47CiAgICAgIH07CiAgICAgIEZ1bGxzY3JlZW4ucmVxdWVzdEZ1bGxzY3JlZW4gPSBmdW5jdGlvbihlbGVtZW50LCB2ckRldmljZSkgewogICAgICAgIGlmICghRnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxzY3JlZW4oKSkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBlbGVtZW50W19uYW1lcy5yZXF1ZXN0RnVsbHNjcmVlbl0oeyB2ckRpc3BsYXk6IHZyRGV2aWNlIH0pOwogICAgICB9OwogICAgICBGdWxsc2NyZWVuLmV4aXRGdWxsc2NyZWVuID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKCFGdWxsc2NyZWVuLnN1cHBvcnRzRnVsbHNjcmVlbigpKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGRvY3VtZW50W19uYW1lcy5leGl0RnVsbHNjcmVlbl0oKTsKICAgICAgfTsKICAgICAgRnVsbHNjcmVlbi5fbmFtZXMgPSBfbmFtZXM7CiAgICAgIEZ1bGxzY3JlZW5fZGVmYXVsdCA9IEZ1bGxzY3JlZW47CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9GZWF0dXJlRGV0ZWN0aW9uLmpzCiAgZnVuY3Rpb24gZXh0cmFjdFZlcnNpb24odmVyc2lvblN0cmluZykgewogICAgY29uc3QgcGFydHMgPSB2ZXJzaW9uU3RyaW5nLnNwbGl0KCIuIik7CiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcGFydHMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICAgICAgcGFydHNbaV0gPSBwYXJzZUludChwYXJ0c1tpXSwgMTApOwogICAgfQogICAgcmV0dXJuIHBhcnRzOwogIH0KICBmdW5jdGlvbiBpc0Nocm9tZSgpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGlzQ2hyb21lUmVzdWx0KSkgewogICAgICBpc0Nocm9tZVJlc3VsdCA9IGZhbHNlOwogICAgICBpZiAoIWlzRWRnZSgpKSB7CiAgICAgICAgY29uc3QgZmllbGRzID0gLyBDaHJvbWVcLyhbXC4wLTldKykvLmV4ZWModGhlTmF2aWdhdG9yLnVzZXJBZ2VudCk7CiAgICAgICAgaWYgKGZpZWxkcyAhPT0gbnVsbCkgewogICAgICAgICAgaXNDaHJvbWVSZXN1bHQgPSB0cnVlOwogICAgICAgICAgY2hyb21lVmVyc2lvblJlc3VsdCA9IGV4dHJhY3RWZXJzaW9uKGZpZWxkc1sxXSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gaXNDaHJvbWVSZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIGNocm9tZVZlcnNpb24oKSB7CiAgICByZXR1cm4gaXNDaHJvbWUoKSAmJiBjaHJvbWVWZXJzaW9uUmVzdWx0OwogIH0KICBmdW5jdGlvbiBpc1NhZmFyaSgpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGlzU2FmYXJpUmVzdWx0KSkgewogICAgICBpc1NhZmFyaVJlc3VsdCA9IGZhbHNlOwogICAgICBpZiAoIWlzQ2hyb21lKCkgJiYgIWlzRWRnZSgpICYmIC8gU2FmYXJpXC9bXC4wLTldKy8udGVzdCh0aGVOYXZpZ2F0b3IudXNlckFnZW50KSkgewogICAgICAgIGNvbnN0IGZpZWxkcyA9IC8gVmVyc2lvblwvKFtcLjAtOV0rKS8uZXhlYyh0aGVOYXZpZ2F0b3IudXNlckFnZW50KTsKICAgICAgICBpZiAoZmllbGRzICE9PSBudWxsKSB7CiAgICAgICAgICBpc1NhZmFyaVJlc3VsdCA9IHRydWU7CiAgICAgICAgICBzYWZhcmlWZXJzaW9uUmVzdWx0ID0gZXh0cmFjdFZlcnNpb24oZmllbGRzWzFdKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBpc1NhZmFyaVJlc3VsdDsKICB9CiAgZnVuY3Rpb24gc2FmYXJpVmVyc2lvbigpIHsKICAgIHJldHVybiBpc1NhZmFyaSgpICYmIHNhZmFyaVZlcnNpb25SZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIGlzV2Via2l0KCkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaXNXZWJraXRSZXN1bHQpKSB7CiAgICAgIGlzV2Via2l0UmVzdWx0ID0gZmFsc2U7CiAgICAgIGNvbnN0IGZpZWxkcyA9IC8gQXBwbGVXZWJLaXRcLyhbXC4wLTldKykoXCs/KS8uZXhlYyh0aGVOYXZpZ2F0b3IudXNlckFnZW50KTsKICAgICAgaWYgKGZpZWxkcyAhPT0gbnVsbCkgewogICAgICAgIGlzV2Via2l0UmVzdWx0ID0gdHJ1ZTsKICAgICAgICB3ZWJraXRWZXJzaW9uUmVzdWx0ID0gZXh0cmFjdFZlcnNpb24oZmllbGRzWzFdKTsKICAgICAgICB3ZWJraXRWZXJzaW9uUmVzdWx0LmlzTmlnaHRseSA9ICEhZmllbGRzWzJdOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gaXNXZWJraXRSZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIHdlYmtpdFZlcnNpb24oKSB7CiAgICByZXR1cm4gaXNXZWJraXQoKSAmJiB3ZWJraXRWZXJzaW9uUmVzdWx0OwogIH0KICBmdW5jdGlvbiBpc0ludGVybmV0RXhwbG9yZXIoKSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpc0ludGVybmV0RXhwbG9yZXJSZXN1bHQpKSB7CiAgICAgIGlzSW50ZXJuZXRFeHBsb3JlclJlc3VsdCA9IGZhbHNlOwogICAgICBsZXQgZmllbGRzOwogICAgICBpZiAodGhlTmF2aWdhdG9yLmFwcE5hbWUgPT09ICJNaWNyb3NvZnQgSW50ZXJuZXQgRXhwbG9yZXIiKSB7CiAgICAgICAgZmllbGRzID0gL01TSUUgKFswLTldezEsfVtcLjAtOV17MCx9KS8uZXhlYyh0aGVOYXZpZ2F0b3IudXNlckFnZW50KTsKICAgICAgICBpZiAoZmllbGRzICE9PSBudWxsKSB7CiAgICAgICAgICBpc0ludGVybmV0RXhwbG9yZXJSZXN1bHQgPSB0cnVlOwogICAgICAgICAgaW50ZXJuZXRFeHBsb3JlclZlcnNpb25SZXN1bHQgPSBleHRyYWN0VmVyc2lvbihmaWVsZHNbMV0pOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmICh0aGVOYXZpZ2F0b3IuYXBwTmFtZSA9PT0gIk5ldHNjYXBlIikgewogICAgICAgIGZpZWxkcyA9IC9UcmlkZW50XC8uKnJ2OihbMC05XXsxLH1bXC4wLTldezAsfSkvLmV4ZWMoCiAgICAgICAgICB0aGVOYXZpZ2F0b3IudXNlckFnZW50CiAgICAgICAgKTsKICAgICAgICBpZiAoZmllbGRzICE9PSBudWxsKSB7CiAgICAgICAgICBpc0ludGVybmV0RXhwbG9yZXJSZXN1bHQgPSB0cnVlOwogICAgICAgICAgaW50ZXJuZXRFeHBsb3JlclZlcnNpb25SZXN1bHQgPSBleHRyYWN0VmVyc2lvbihmaWVsZHNbMV0pOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmV0dXJuIGlzSW50ZXJuZXRFeHBsb3JlclJlc3VsdDsKICB9CiAgZnVuY3Rpb24gaW50ZXJuZXRFeHBsb3JlclZlcnNpb24oKSB7CiAgICByZXR1cm4gaXNJbnRlcm5ldEV4cGxvcmVyKCkgJiYgaW50ZXJuZXRFeHBsb3JlclZlcnNpb25SZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIGlzRWRnZSgpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGlzRWRnZVJlc3VsdCkpIHsKICAgICAgaXNFZGdlUmVzdWx0ID0gZmFsc2U7CiAgICAgIGNvbnN0IGZpZWxkcyA9IC8gRWRnXC8oW1wuMC05XSspLy5leGVjKHRoZU5hdmlnYXRvci51c2VyQWdlbnQpOwogICAgICBpZiAoZmllbGRzICE9PSBudWxsKSB7CiAgICAgICAgaXNFZGdlUmVzdWx0ID0gdHJ1ZTsKICAgICAgICBlZGdlVmVyc2lvblJlc3VsdCA9IGV4dHJhY3RWZXJzaW9uKGZpZWxkc1sxXSk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBpc0VkZ2VSZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIGVkZ2VWZXJzaW9uKCkgewogICAgcmV0dXJuIGlzRWRnZSgpICYmIGVkZ2VWZXJzaW9uUmVzdWx0OwogIH0KICBmdW5jdGlvbiBpc0ZpcmVmb3goKSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpc0ZpcmVmb3hSZXN1bHQpKSB7CiAgICAgIGlzRmlyZWZveFJlc3VsdCA9IGZhbHNlOwogICAgICBjb25zdCBmaWVsZHMgPSAvRmlyZWZveFwvKFtcLjAtOV0rKS8uZXhlYyh0aGVOYXZpZ2F0b3IudXNlckFnZW50KTsKICAgICAgaWYgKGZpZWxkcyAhPT0gbnVsbCkgewogICAgICAgIGlzRmlyZWZveFJlc3VsdCA9IHRydWU7CiAgICAgICAgZmlyZWZveFZlcnNpb25SZXN1bHQgPSBleHRyYWN0VmVyc2lvbihmaWVsZHNbMV0pOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gaXNGaXJlZm94UmVzdWx0OwogIH0KICBmdW5jdGlvbiBpc1dpbmRvd3MoKSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpc1dpbmRvd3NSZXN1bHQpKSB7CiAgICAgIGlzV2luZG93c1Jlc3VsdCA9IC9XaW5kb3dzL2kudGVzdCh0aGVOYXZpZ2F0b3IuYXBwVmVyc2lvbik7CiAgICB9CiAgICByZXR1cm4gaXNXaW5kb3dzUmVzdWx0OwogIH0KICBmdW5jdGlvbiBpc0lQYWRPcklPUygpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGlzSVBhZE9ySU9TUmVzdWx0KSkgewogICAgICBpc0lQYWRPcklPU1Jlc3VsdCA9IG5hdmlnYXRvci5wbGF0Zm9ybSA9PT0gImlQaG9uZSIgfHwgbmF2aWdhdG9yLnBsYXRmb3JtID09PSAiaVBvZCIgfHwgbmF2aWdhdG9yLnBsYXRmb3JtID09PSAiaVBhZCI7CiAgICB9CiAgICByZXR1cm4gaXNJUGFkT3JJT1NSZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIGZpcmVmb3hWZXJzaW9uKCkgewogICAgcmV0dXJuIGlzRmlyZWZveCgpICYmIGZpcmVmb3hWZXJzaW9uUmVzdWx0OwogIH0KICBmdW5jdGlvbiBzdXBwb3J0c1BvaW50ZXJFdmVudHMoKSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChoYXNQb2ludGVyRXZlbnRzKSkgewogICAgICBoYXNQb2ludGVyRXZlbnRzID0gIWlzRmlyZWZveCgpICYmIHR5cGVvZiBQb2ludGVyRXZlbnQgIT09ICJ1bmRlZmluZWQiICYmICghZGVmaW5lZF9kZWZhdWx0KHRoZU5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCkgfHwgdGhlTmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkKTsKICAgIH0KICAgIHJldHVybiBoYXNQb2ludGVyRXZlbnRzOwogIH0KICBmdW5jdGlvbiBzdXBwb3J0c0ltYWdlUmVuZGVyaW5nUGl4ZWxhdGVkKCkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoc3VwcG9ydHNJbWFnZVJlbmRlcmluZ1BpeGVsYXRlZFJlc3VsdCkpIHsKICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiY2FudmFzIik7CiAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUoCiAgICAgICAgInN0eWxlIiwKICAgICAgICAiaW1hZ2UtcmVuZGVyaW5nOiAtbW96LWNyaXNwLWVkZ2VzO2ltYWdlLXJlbmRlcmluZzogcGl4ZWxhdGVkOyIKICAgICAgKTsKICAgICAgY29uc3QgdG1wMiA9IGNhbnZhcy5zdHlsZS5pbWFnZVJlbmRlcmluZzsKICAgICAgc3VwcG9ydHNJbWFnZVJlbmRlcmluZ1BpeGVsYXRlZFJlc3VsdCA9IGRlZmluZWRfZGVmYXVsdCh0bXAyKSAmJiB0bXAyICE9PSAiIjsKICAgICAgaWYgKHN1cHBvcnRzSW1hZ2VSZW5kZXJpbmdQaXhlbGF0ZWRSZXN1bHQpIHsKICAgICAgICBpbWFnZVJlbmRlcmluZ1ZhbHVlUmVzdWx0ID0gdG1wMjsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHN1cHBvcnRzSW1hZ2VSZW5kZXJpbmdQaXhlbGF0ZWRSZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIGltYWdlUmVuZGVyaW5nVmFsdWUoKSB7CiAgICByZXR1cm4gc3VwcG9ydHNJbWFnZVJlbmRlcmluZ1BpeGVsYXRlZCgpID8gaW1hZ2VSZW5kZXJpbmdWYWx1ZVJlc3VsdCA6IHZvaWQgMDsKICB9CiAgZnVuY3Rpb24gc3VwcG9ydHNXZWJQKCkgewogICAgaWYgKCFzdXBwb3J0c1dlYlAuaW5pdGlhbGl6ZWQpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIllvdSBtdXN0IGNhbGwgRmVhdHVyZURldGVjdGlvbi5zdXBwb3J0c1dlYlAuaW5pdGlhbGl6ZSBhbmQgd2FpdCBmb3IgdGhlIHByb21pc2UgdG8gcmVzb2x2ZSBiZWZvcmUgY2FsbGluZyBGZWF0dXJlRGV0ZWN0aW9uLnN1cHBvcnRzV2ViUCIKICAgICAgKTsKICAgIH0KICAgIHJldHVybiBzdXBwb3J0c1dlYlAuX3Jlc3VsdDsKICB9CiAgdmFyIHRoZU5hdmlnYXRvciwgaXNDaHJvbWVSZXN1bHQsIGNocm9tZVZlcnNpb25SZXN1bHQsIGlzU2FmYXJpUmVzdWx0LCBzYWZhcmlWZXJzaW9uUmVzdWx0LCBpc1dlYmtpdFJlc3VsdCwgd2Via2l0VmVyc2lvblJlc3VsdCwgaXNJbnRlcm5ldEV4cGxvcmVyUmVzdWx0LCBpbnRlcm5ldEV4cGxvcmVyVmVyc2lvblJlc3VsdCwgaXNFZGdlUmVzdWx0LCBlZGdlVmVyc2lvblJlc3VsdCwgaXNGaXJlZm94UmVzdWx0LCBmaXJlZm94VmVyc2lvblJlc3VsdCwgaXNXaW5kb3dzUmVzdWx0LCBpc0lQYWRPcklPU1Jlc3VsdCwgaGFzUG9pbnRlckV2ZW50cywgaW1hZ2VSZW5kZXJpbmdWYWx1ZVJlc3VsdCwgc3VwcG9ydHNJbWFnZVJlbmRlcmluZ1BpeGVsYXRlZFJlc3VsdCwgdHlwZWRBcnJheVR5cGVzLCBGZWF0dXJlRGV0ZWN0aW9uLCBGZWF0dXJlRGV0ZWN0aW9uX2RlZmF1bHQ7CiAgdmFyIGluaXRfRmVhdHVyZURldGVjdGlvbiA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRmVhdHVyZURldGVjdGlvbi5qcyIoKSB7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9GdWxsc2NyZWVuKCk7CiAgICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAidW5kZWZpbmVkIikgewogICAgICAgIHRoZU5hdmlnYXRvciA9IG5hdmlnYXRvcjsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGVOYXZpZ2F0b3IgPSB7fTsKICAgICAgfQogICAgICBzdXBwb3J0c1dlYlAuX3Byb21pc2UgPSB2b2lkIDA7CiAgICAgIHN1cHBvcnRzV2ViUC5fcmVzdWx0ID0gdm9pZCAwOwogICAgICBzdXBwb3J0c1dlYlAuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoc3VwcG9ydHNXZWJQLl9wcm9taXNlKSkgewogICAgICAgICAgcmV0dXJuIHN1cHBvcnRzV2ViUC5fcHJvbWlzZTsKICAgICAgICB9CiAgICAgICAgc3VwcG9ydHNXZWJQLl9wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7CiAgICAgICAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgc3VwcG9ydHNXZWJQLl9yZXN1bHQgPSBpbWFnZS53aWR0aCA+IDAgJiYgaW1hZ2UuaGVpZ2h0ID4gMDsKICAgICAgICAgICAgcmVzb2x2ZShzdXBwb3J0c1dlYlAuX3Jlc3VsdCk7CiAgICAgICAgICB9OwogICAgICAgICAgaW1hZ2Uub25lcnJvciA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBzdXBwb3J0c1dlYlAuX3Jlc3VsdCA9IGZhbHNlOwogICAgICAgICAgICByZXNvbHZlKHN1cHBvcnRzV2ViUC5fcmVzdWx0KTsKICAgICAgICAgIH07CiAgICAgICAgICBpbWFnZS5zcmMgPSAiZGF0YTppbWFnZS93ZWJwO2Jhc2U2NCxVa2xHUmlJQUFBQlhSVUpRVmxBNElCWUFBQUF3QVFDZEFTb0JBQUVBRHNEK0phUUFBM0FBQUFBQSI7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHN1cHBvcnRzV2ViUC5fcHJvbWlzZTsKICAgICAgfTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3VwcG9ydHNXZWJQLCB7CiAgICAgICAgaW5pdGlhbGl6ZWQ6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBkZWZpbmVkX2RlZmF1bHQoc3VwcG9ydHNXZWJQLl9yZXN1bHQpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHR5cGVkQXJyYXlUeXBlcyA9IFtdOwogICAgICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAidW5kZWZpbmVkIikgewogICAgICAgIHR5cGVkQXJyYXlUeXBlcy5wdXNoKAogICAgICAgICAgSW50OEFycmF5LAogICAgICAgICAgVWludDhBcnJheSwKICAgICAgICAgIEludDE2QXJyYXksCiAgICAgICAgICBVaW50MTZBcnJheSwKICAgICAgICAgIEludDMyQXJyYXksCiAgICAgICAgICBVaW50MzJBcnJheSwKICAgICAgICAgIEZsb2F0MzJBcnJheSwKICAgICAgICAgIEZsb2F0NjRBcnJheQogICAgICAgICk7CiAgICAgICAgaWYgKHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgIHR5cGVkQXJyYXlUeXBlcy5wdXNoKFVpbnQ4Q2xhbXBlZEFycmF5KTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgIHR5cGVkQXJyYXlUeXBlcy5wdXNoKFVpbnQ4Q2xhbXBlZEFycmF5KTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBCaWdJbnQ2NEFycmF5ICE9PSAidW5kZWZpbmVkIikgewogICAgICAgICAgdHlwZWRBcnJheVR5cGVzLnB1c2goQmlnSW50NjRBcnJheSk7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgQmlnVWludDY0QXJyYXkgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICB0eXBlZEFycmF5VHlwZXMucHVzaChCaWdVaW50NjRBcnJheSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIEZlYXR1cmVEZXRlY3Rpb24gPSB7CiAgICAgICAgaXNDaHJvbWUsCiAgICAgICAgY2hyb21lVmVyc2lvbiwKICAgICAgICBpc1NhZmFyaSwKICAgICAgICBzYWZhcmlWZXJzaW9uLAogICAgICAgIGlzV2Via2l0LAogICAgICAgIHdlYmtpdFZlcnNpb24sCiAgICAgICAgaXNJbnRlcm5ldEV4cGxvcmVyLAogICAgICAgIGludGVybmV0RXhwbG9yZXJWZXJzaW9uLAogICAgICAgIGlzRWRnZSwKICAgICAgICBlZGdlVmVyc2lvbiwKICAgICAgICBpc0ZpcmVmb3gsCiAgICAgICAgZmlyZWZveFZlcnNpb24sCiAgICAgICAgaXNXaW5kb3dzLAogICAgICAgIGlzSVBhZE9ySU9TLAogICAgICAgIGhhcmR3YXJlQ29uY3VycmVuY3k6IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHRoZU5hdmlnYXRvci5oYXJkd2FyZUNvbmN1cnJlbmN5LCAzKSwKICAgICAgICBzdXBwb3J0c1BvaW50ZXJFdmVudHMsCiAgICAgICAgc3VwcG9ydHNJbWFnZVJlbmRlcmluZ1BpeGVsYXRlZCwKICAgICAgICBzdXBwb3J0c1dlYlAsCiAgICAgICAgaW1hZ2VSZW5kZXJpbmdWYWx1ZSwKICAgICAgICB0eXBlZEFycmF5VHlwZXMKICAgICAgfTsKICAgICAgRmVhdHVyZURldGVjdGlvbi5zdXBwb3J0c0Jhc2lzID0gZnVuY3Rpb24oc2NlbmUpIHsKICAgICAgICByZXR1cm4gRmVhdHVyZURldGVjdGlvbi5zdXBwb3J0c1dlYkFzc2VtYmx5KCkgJiYgc2NlbmUuY29udGV4dC5zdXBwb3J0c0Jhc2lzOwogICAgICB9OwogICAgICBGZWF0dXJlRGV0ZWN0aW9uLnN1cHBvcnRzRnVsbHNjcmVlbiA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBGdWxsc2NyZWVuX2RlZmF1bHQuc3VwcG9ydHNGdWxsc2NyZWVuKCk7CiAgICAgIH07CiAgICAgIEZlYXR1cmVEZXRlY3Rpb24uc3VwcG9ydHNUeXBlZEFycmF5cyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICJ1bmRlZmluZWQiOwogICAgICB9OwogICAgICBGZWF0dXJlRGV0ZWN0aW9uLnN1cHBvcnRzQmlnSW50NjRBcnJheSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0eXBlb2YgQmlnSW50NjRBcnJheSAhPT0gInVuZGVmaW5lZCI7CiAgICAgIH07CiAgICAgIEZlYXR1cmVEZXRlY3Rpb24uc3VwcG9ydHNCaWdVaW50NjRBcnJheSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0eXBlb2YgQmlnVWludDY0QXJyYXkgIT09ICJ1bmRlZmluZWQiOwogICAgICB9OwogICAgICBGZWF0dXJlRGV0ZWN0aW9uLnN1cHBvcnRzQmlnSW50ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHR5cGVvZiBCaWdJbnQgIT09ICJ1bmRlZmluZWQiOwogICAgICB9OwogICAgICBGZWF0dXJlRGV0ZWN0aW9uLnN1cHBvcnRzV2ViV29ya2VycyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0eXBlb2YgV29ya2VyICE9PSAidW5kZWZpbmVkIjsKICAgICAgfTsKICAgICAgRmVhdHVyZURldGVjdGlvbi5zdXBwb3J0c1dlYkFzc2VtYmx5ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHR5cGVvZiBXZWJBc3NlbWJseSAhPT0gInVuZGVmaW5lZCI7CiAgICAgIH07CiAgICAgIEZlYXR1cmVEZXRlY3Rpb24uc3VwcG9ydHNXZWJnbDIgPSBmdW5jdGlvbihzY2VuZSkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgic2NlbmUiLCBzY2VuZSk7CiAgICAgICAgcmV0dXJuIHNjZW5lLmNvbnRleHQud2ViZ2wyOwogICAgICB9OwogICAgICBGZWF0dXJlRGV0ZWN0aW9uLnN1cHBvcnRzRXNtV2ViV29ya2VycyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiAhaXNGaXJlZm94KCkgfHwgcGFyc2VJbnQoZmlyZWZveFZlcnNpb25SZXN1bHQpID49IDExNDsKICAgICAgfTsKICAgICAgRmVhdHVyZURldGVjdGlvbl9kZWZhdWx0ID0gRmVhdHVyZURldGVjdGlvbjsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1F1YXRlcm5pb24uanMKICBmdW5jdGlvbiBRdWF0ZXJuaW9uKHgsIHksIHosIHcpIHsKICAgIHRoaXMueCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHgsIDApOwogICAgdGhpcy55ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoeSwgMCk7CiAgICB0aGlzLnogPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh6LCAwKTsKICAgIHRoaXMudyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHcsIDApOwogIH0KICB2YXIgZnJvbUF4aXNBbmdsZVNjcmF0Y2gsIGZyb21Sb3RhdGlvbk1hdHJpeE5leHQsIGZyb21Sb3RhdGlvbk1hdHJpeFF1YXQsIHNjcmF0Y2hIUFJRdWF0ZXJuaW9uLCBzY3JhdGNoSGVhZGluZ1F1YXRlcm5pb24sIHNjcmF0Y2hQaXRjaFF1YXRlcm5pb24sIHNjcmF0Y2hSb2xsUXVhdGVybmlvbiwgc2FtcGxlZFF1YXRlcm5pb25BeGlzLCBzYW1wbGVkUXVhdGVybmlvblJvdGF0aW9uLCBzYW1wbGVkUXVhdGVybmlvblRlbXBRdWF0ZXJuaW9uLCBzYW1wbGVkUXVhdGVybmlvblF1YXRlcm5pb24wLCBzYW1wbGVkUXVhdGVybmlvblF1YXRlcm5pb24wQ29uanVnYXRlLCBsZXJwU2NyYXRjaDQsIHNsZXJwRW5kTmVnYXRlZCwgc2xlcnBTY2FsZWRQLCBzbGVycFNjYWxlZFIsIHNxdWFkU2NyYXRjaENhcnRlc2lhbjAsIHNxdWFkU2NyYXRjaENhcnRlc2lhbjEsIHNxdWFkU2NyYXRjaFF1YXRlcm5pb24wLCBzcXVhZFNjcmF0Y2hRdWF0ZXJuaW9uMSwgZmFzdFNsZXJwU2NyYXRjaFF1YXRlcm5pb24sIG9wbXUsIHUsIHYsIGJULCBiRCwgUXVhdGVybmlvbl9kZWZhdWx0OwogIHZhciBpbml0X1F1YXRlcm5pb24gPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1F1YXRlcm5pb24uanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9GZWF0dXJlRGV0ZWN0aW9uKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDMoKTsKICAgICAgZnJvbUF4aXNBbmdsZVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIFF1YXRlcm5pb24uZnJvbUF4aXNBbmdsZSA9IGZ1bmN0aW9uKGF4aXMsIGFuZ2xlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImF4aXMiLCBheGlzKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImFuZ2xlIiwgYW5nbGUpOwogICAgICAgIGNvbnN0IGhhbGZBbmdsZSA9IGFuZ2xlIC8gMjsKICAgICAgICBjb25zdCBzID0gTWF0aC5zaW4oaGFsZkFuZ2xlKTsKICAgICAgICBmcm9tQXhpc0FuZ2xlU2NyYXRjaCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoYXhpcywgZnJvbUF4aXNBbmdsZVNjcmF0Y2gpOwogICAgICAgIGNvbnN0IHggPSBmcm9tQXhpc0FuZ2xlU2NyYXRjaC54ICogczsKICAgICAgICBjb25zdCB5ID0gZnJvbUF4aXNBbmdsZVNjcmF0Y2gueSAqIHM7CiAgICAgICAgY29uc3QgeiA9IGZyb21BeGlzQW5nbGVTY3JhdGNoLnogKiBzOwogICAgICAgIGNvbnN0IHcgPSBNYXRoLmNvcyhoYWxmQW5nbGUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgUXVhdGVybmlvbih4LCB5LCB6LCB3KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSB4OwogICAgICAgIHJlc3VsdC55ID0geTsKICAgICAgICByZXN1bHQueiA9IHo7CiAgICAgICAgcmVzdWx0LncgPSB3OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIGZyb21Sb3RhdGlvbk1hdHJpeE5leHQgPSBbMSwgMiwgMF07CiAgICAgIGZyb21Sb3RhdGlvbk1hdHJpeFF1YXQgPSBuZXcgQXJyYXkoMyk7CiAgICAgIFF1YXRlcm5pb24uZnJvbVJvdGF0aW9uTWF0cml4ID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgbGV0IHJvb3Q7CiAgICAgICAgbGV0IHg7CiAgICAgICAgbGV0IHk7CiAgICAgICAgbGV0IHo7CiAgICAgICAgbGV0IHc7CiAgICAgICAgY29uc3QgbTAwID0gbWF0cml4W01hdHJpeDNfZGVmYXVsdC5DT0xVTU4wUk9XMF07CiAgICAgICAgY29uc3QgbTExID0gbWF0cml4W01hdHJpeDNfZGVmYXVsdC5DT0xVTU4xUk9XMV07CiAgICAgICAgY29uc3QgbTIyID0gbWF0cml4W01hdHJpeDNfZGVmYXVsdC5DT0xVTU4yUk9XMl07CiAgICAgICAgY29uc3QgdHJhY2UgPSBtMDAgKyBtMTEgKyBtMjI7CiAgICAgICAgaWYgKHRyYWNlID4gMCkgewogICAgICAgICAgcm9vdCA9IE1hdGguc3FydCh0cmFjZSArIDEpOwogICAgICAgICAgdyA9IDAuNSAqIHJvb3Q7CiAgICAgICAgICByb290ID0gMC41IC8gcm9vdDsKICAgICAgICAgIHggPSAobWF0cml4W01hdHJpeDNfZGVmYXVsdC5DT0xVTU4xUk9XMl0gLSBtYXRyaXhbTWF0cml4M19kZWZhdWx0LkNPTFVNTjJST1cxXSkgKiByb290OwogICAgICAgICAgeSA9IChtYXRyaXhbTWF0cml4M19kZWZhdWx0LkNPTFVNTjJST1cwXSAtIG1hdHJpeFtNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMFJPVzJdKSAqIHJvb3Q7CiAgICAgICAgICB6ID0gKG1hdHJpeFtNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMFJPVzFdIC0gbWF0cml4W01hdHJpeDNfZGVmYXVsdC5DT0xVTU4xUk9XMF0pICogcm9vdDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc3QgbmV4dCA9IGZyb21Sb3RhdGlvbk1hdHJpeE5leHQ7CiAgICAgICAgICBsZXQgaSA9IDA7CiAgICAgICAgICBpZiAobTExID4gbTAwKSB7CiAgICAgICAgICAgIGkgPSAxOwogICAgICAgICAgfQogICAgICAgICAgaWYgKG0yMiA+IG0wMCAmJiBtMjIgPiBtMTEpIHsKICAgICAgICAgICAgaSA9IDI7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBqID0gbmV4dFtpXTsKICAgICAgICAgIGNvbnN0IGsgPSBuZXh0W2pdOwogICAgICAgICAgcm9vdCA9IE1hdGguc3FydCgKICAgICAgICAgICAgbWF0cml4W01hdHJpeDNfZGVmYXVsdC5nZXRFbGVtZW50SW5kZXgoaSwgaSldIC0gbWF0cml4W01hdHJpeDNfZGVmYXVsdC5nZXRFbGVtZW50SW5kZXgoaiwgaildIC0gbWF0cml4W01hdHJpeDNfZGVmYXVsdC5nZXRFbGVtZW50SW5kZXgoaywgayldICsgMQogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHF1YXQgPSBmcm9tUm90YXRpb25NYXRyaXhRdWF0OwogICAgICAgICAgcXVhdFtpXSA9IDAuNSAqIHJvb3Q7CiAgICAgICAgICByb290ID0gMC41IC8gcm9vdDsKICAgICAgICAgIHcgPSAobWF0cml4W01hdHJpeDNfZGVmYXVsdC5nZXRFbGVtZW50SW5kZXgoaywgaildIC0gbWF0cml4W01hdHJpeDNfZGVmYXVsdC5nZXRFbGVtZW50SW5kZXgoaiwgayldKSAqIHJvb3Q7CiAgICAgICAgICBxdWF0W2pdID0gKG1hdHJpeFtNYXRyaXgzX2RlZmF1bHQuZ2V0RWxlbWVudEluZGV4KGosIGkpXSArIG1hdHJpeFtNYXRyaXgzX2RlZmF1bHQuZ2V0RWxlbWVudEluZGV4KGksIGopXSkgKiByb290OwogICAgICAgICAgcXVhdFtrXSA9IChtYXRyaXhbTWF0cml4M19kZWZhdWx0LmdldEVsZW1lbnRJbmRleChrLCBpKV0gKyBtYXRyaXhbTWF0cml4M19kZWZhdWx0LmdldEVsZW1lbnRJbmRleChpLCBrKV0pICogcm9vdDsKICAgICAgICAgIHggPSAtcXVhdFswXTsKICAgICAgICAgIHkgPSAtcXVhdFsxXTsKICAgICAgICAgIHogPSAtcXVhdFsyXTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBRdWF0ZXJuaW9uKHgsIHksIHosIHcpOwogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJlc3VsdC56ID0gejsKICAgICAgICByZXN1bHQudyA9IHc7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NyYXRjaEhQUlF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpOwogICAgICBzY3JhdGNoSGVhZGluZ1F1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpOwogICAgICBzY3JhdGNoUGl0Y2hRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgc2NyYXRjaFJvbGxRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgUXVhdGVybmlvbi5mcm9tSGVhZGluZ1BpdGNoUm9sbCA9IGZ1bmN0aW9uKGhlYWRpbmdQaXRjaFJvbGwsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiaGVhZGluZ1BpdGNoUm9sbCIsIGhlYWRpbmdQaXRjaFJvbGwpOwogICAgICAgIHNjcmF0Y2hSb2xsUXVhdGVybmlvbiA9IFF1YXRlcm5pb24uZnJvbUF4aXNBbmdsZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1gsCiAgICAgICAgICBoZWFkaW5nUGl0Y2hSb2xsLnJvbGwsCiAgICAgICAgICBzY3JhdGNoSFBSUXVhdGVybmlvbgogICAgICAgICk7CiAgICAgICAgc2NyYXRjaFBpdGNoUXVhdGVybmlvbiA9IFF1YXRlcm5pb24uZnJvbUF4aXNBbmdsZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1ksCiAgICAgICAgICAtaGVhZGluZ1BpdGNoUm9sbC5waXRjaCwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgICAgcmVzdWx0ID0gUXVhdGVybmlvbi5tdWx0aXBseSgKICAgICAgICAgIHNjcmF0Y2hQaXRjaFF1YXRlcm5pb24sCiAgICAgICAgICBzY3JhdGNoUm9sbFF1YXRlcm5pb24sCiAgICAgICAgICBzY3JhdGNoUGl0Y2hRdWF0ZXJuaW9uCiAgICAgICAgKTsKICAgICAgICBzY3JhdGNoSGVhZGluZ1F1YXRlcm5pb24gPSBRdWF0ZXJuaW9uLmZyb21BeGlzQW5nbGUoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9aLAogICAgICAgICAgLWhlYWRpbmdQaXRjaFJvbGwuaGVhZGluZywKICAgICAgICAgIHNjcmF0Y2hIUFJRdWF0ZXJuaW9uCiAgICAgICAgKTsKICAgICAgICByZXR1cm4gUXVhdGVybmlvbi5tdWx0aXBseShzY3JhdGNoSGVhZGluZ1F1YXRlcm5pb24sIHJlc3VsdCwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgc2FtcGxlZFF1YXRlcm5pb25BeGlzID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzYW1wbGVkUXVhdGVybmlvblJvdGF0aW9uID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzYW1wbGVkUXVhdGVybmlvblRlbXBRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgc2FtcGxlZFF1YXRlcm5pb25RdWF0ZXJuaW9uMCA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgIHNhbXBsZWRRdWF0ZXJuaW9uUXVhdGVybmlvbjBDb25qdWdhdGUgPSBuZXcgUXVhdGVybmlvbigpOwogICAgICBRdWF0ZXJuaW9uLnBhY2tlZExlbmd0aCA9IDQ7CiAgICAgIFF1YXRlcm5pb24ucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLng7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLnk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLno7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSB2YWx1ZS53OwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbi51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICByZXN1bHQueSA9IGFycmF5W3N0YXJ0aW5nSW5kZXggKyAxXTsKICAgICAgICByZXN1bHQueiA9IGFycmF5W3N0YXJ0aW5nSW5kZXggKyAyXTsKICAgICAgICByZXN1bHQudyA9IGFycmF5W3N0YXJ0aW5nSW5kZXggKyAzXTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBRdWF0ZXJuaW9uLnBhY2tlZEludGVycG9sYXRpb25MZW5ndGggPSAzOwogICAgICBRdWF0ZXJuaW9uLmNvbnZlcnRQYWNrZWRBcnJheUZvckludGVycG9sYXRpb24gPSBmdW5jdGlvbihwYWNrZWRBcnJheSwgc3RhcnRpbmdJbmRleCwgbGFzdEluZGV4LCByZXN1bHQpIHsKICAgICAgICBRdWF0ZXJuaW9uLnVucGFjaygKICAgICAgICAgIHBhY2tlZEFycmF5LAogICAgICAgICAgbGFzdEluZGV4ICogNCwKICAgICAgICAgIHNhbXBsZWRRdWF0ZXJuaW9uUXVhdGVybmlvbjBDb25qdWdhdGUKICAgICAgICApOwogICAgICAgIFF1YXRlcm5pb24uY29uanVnYXRlKAogICAgICAgICAgc2FtcGxlZFF1YXRlcm5pb25RdWF0ZXJuaW9uMENvbmp1Z2F0ZSwKICAgICAgICAgIHNhbXBsZWRRdWF0ZXJuaW9uUXVhdGVybmlvbjBDb25qdWdhdGUKICAgICAgICApOwogICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBsYXN0SW5kZXggLSBzdGFydGluZ0luZGV4ICsgMTsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICBjb25zdCBvZmZzZXQgPSBpICogMzsKICAgICAgICAgIFF1YXRlcm5pb24udW5wYWNrKAogICAgICAgICAgICBwYWNrZWRBcnJheSwKICAgICAgICAgICAgKHN0YXJ0aW5nSW5kZXggKyBpKSAqIDQsCiAgICAgICAgICAgIHNhbXBsZWRRdWF0ZXJuaW9uVGVtcFF1YXRlcm5pb24KICAgICAgICAgICk7CiAgICAgICAgICBRdWF0ZXJuaW9uLm11bHRpcGx5KAogICAgICAgICAgICBzYW1wbGVkUXVhdGVybmlvblRlbXBRdWF0ZXJuaW9uLAogICAgICAgICAgICBzYW1wbGVkUXVhdGVybmlvblF1YXRlcm5pb24wQ29uanVnYXRlLAogICAgICAgICAgICBzYW1wbGVkUXVhdGVybmlvblRlbXBRdWF0ZXJuaW9uCiAgICAgICAgICApOwogICAgICAgICAgaWYgKHNhbXBsZWRRdWF0ZXJuaW9uVGVtcFF1YXRlcm5pb24udyA8IDApIHsKICAgICAgICAgICAgUXVhdGVybmlvbi5uZWdhdGUoCiAgICAgICAgICAgICAgc2FtcGxlZFF1YXRlcm5pb25UZW1wUXVhdGVybmlvbiwKICAgICAgICAgICAgICBzYW1wbGVkUXVhdGVybmlvblRlbXBRdWF0ZXJuaW9uCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgICBRdWF0ZXJuaW9uLmNvbXB1dGVBeGlzKAogICAgICAgICAgICBzYW1wbGVkUXVhdGVybmlvblRlbXBRdWF0ZXJuaW9uLAogICAgICAgICAgICBzYW1wbGVkUXVhdGVybmlvbkF4aXMKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBhbmdsZSA9IFF1YXRlcm5pb24uY29tcHV0ZUFuZ2xlKHNhbXBsZWRRdWF0ZXJuaW9uVGVtcFF1YXRlcm5pb24pOwogICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgICByZXN1bHQgPSBbXTsKICAgICAgICAgIH0KICAgICAgICAgIHJlc3VsdFtvZmZzZXRdID0gc2FtcGxlZFF1YXRlcm5pb25BeGlzLnggKiBhbmdsZTsKICAgICAgICAgIHJlc3VsdFtvZmZzZXQgKyAxXSA9IHNhbXBsZWRRdWF0ZXJuaW9uQXhpcy55ICogYW5nbGU7CiAgICAgICAgICByZXN1bHRbb2Zmc2V0ICsgMl0gPSBzYW1wbGVkUXVhdGVybmlvbkF4aXMueiAqIGFuZ2xlOwogICAgICAgIH0KICAgICAgfTsKICAgICAgUXVhdGVybmlvbi51bnBhY2tJbnRlcnBvbGF0aW9uUmVzdWx0ID0gZnVuY3Rpb24oYXJyYXksIHNvdXJjZUFycmF5LCBmaXJzdEluZGV4LCBsYXN0SW5kZXgsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoYXJyYXksIDAsIHNhbXBsZWRRdWF0ZXJuaW9uUm90YXRpb24pOwogICAgICAgIGNvbnN0IG1hZ25pdHVkZSA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUoc2FtcGxlZFF1YXRlcm5pb25Sb3RhdGlvbik7CiAgICAgICAgUXVhdGVybmlvbi51bnBhY2soc291cmNlQXJyYXksIGxhc3RJbmRleCAqIDQsIHNhbXBsZWRRdWF0ZXJuaW9uUXVhdGVybmlvbjApOwogICAgICAgIGlmIChtYWduaXR1ZGUgPT09IDApIHsKICAgICAgICAgIFF1YXRlcm5pb24uY2xvbmUoUXVhdGVybmlvbi5JREVOVElUWSwgc2FtcGxlZFF1YXRlcm5pb25UZW1wUXVhdGVybmlvbik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIFF1YXRlcm5pb24uZnJvbUF4aXNBbmdsZSgKICAgICAgICAgICAgc2FtcGxlZFF1YXRlcm5pb25Sb3RhdGlvbiwKICAgICAgICAgICAgbWFnbml0dWRlLAogICAgICAgICAgICBzYW1wbGVkUXVhdGVybmlvblRlbXBRdWF0ZXJuaW9uCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gUXVhdGVybmlvbi5tdWx0aXBseSgKICAgICAgICAgIHNhbXBsZWRRdWF0ZXJuaW9uVGVtcFF1YXRlcm5pb24sCiAgICAgICAgICBzYW1wbGVkUXVhdGVybmlvblF1YXRlcm5pb24wLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbi5jbG9uZSA9IGZ1bmN0aW9uKHF1YXRlcm5pb24sIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHF1YXRlcm5pb24pKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24oCiAgICAgICAgICAgIHF1YXRlcm5pb24ueCwKICAgICAgICAgICAgcXVhdGVybmlvbi55LAogICAgICAgICAgICBxdWF0ZXJuaW9uLnosCiAgICAgICAgICAgIHF1YXRlcm5pb24udwogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSBxdWF0ZXJuaW9uLng7CiAgICAgICAgcmVzdWx0LnkgPSBxdWF0ZXJuaW9uLnk7CiAgICAgICAgcmVzdWx0LnogPSBxdWF0ZXJuaW9uLno7CiAgICAgICAgcmVzdWx0LncgPSBxdWF0ZXJuaW9uLnc7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbi5jb25qdWdhdGUgPSBmdW5jdGlvbihxdWF0ZXJuaW9uLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInF1YXRlcm5pb24iLCBxdWF0ZXJuaW9uKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSAtcXVhdGVybmlvbi54OwogICAgICAgIHJlc3VsdC55ID0gLXF1YXRlcm5pb24ueTsKICAgICAgICByZXN1bHQueiA9IC1xdWF0ZXJuaW9uLno7CiAgICAgICAgcmVzdWx0LncgPSBxdWF0ZXJuaW9uLnc7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbi5tYWduaXR1ZGVTcXVhcmVkID0gZnVuY3Rpb24ocXVhdGVybmlvbikgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicXVhdGVybmlvbiIsIHF1YXRlcm5pb24pOwogICAgICAgIHJldHVybiBxdWF0ZXJuaW9uLnggKiBxdWF0ZXJuaW9uLnggKyBxdWF0ZXJuaW9uLnkgKiBxdWF0ZXJuaW9uLnkgKyBxdWF0ZXJuaW9uLnogKiBxdWF0ZXJuaW9uLnogKyBxdWF0ZXJuaW9uLncgKiBxdWF0ZXJuaW9uLnc7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24ubWFnbml0dWRlID0gZnVuY3Rpb24ocXVhdGVybmlvbikgewogICAgICAgIHJldHVybiBNYXRoLnNxcnQoUXVhdGVybmlvbi5tYWduaXR1ZGVTcXVhcmVkKHF1YXRlcm5pb24pKTsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbi5ub3JtYWxpemUgPSBmdW5jdGlvbihxdWF0ZXJuaW9uLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgaW52ZXJzZU1hZ25pdHVkZSA9IDEgLyBRdWF0ZXJuaW9uLm1hZ25pdHVkZShxdWF0ZXJuaW9uKTsKICAgICAgICBjb25zdCB4ID0gcXVhdGVybmlvbi54ICogaW52ZXJzZU1hZ25pdHVkZTsKICAgICAgICBjb25zdCB5ID0gcXVhdGVybmlvbi55ICogaW52ZXJzZU1hZ25pdHVkZTsKICAgICAgICBjb25zdCB6ID0gcXVhdGVybmlvbi56ICogaW52ZXJzZU1hZ25pdHVkZTsKICAgICAgICBjb25zdCB3ID0gcXVhdGVybmlvbi53ICogaW52ZXJzZU1hZ25pdHVkZTsKICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJlc3VsdC56ID0gejsKICAgICAgICByZXN1bHQudyA9IHc7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbi5pbnZlcnNlID0gZnVuY3Rpb24ocXVhdGVybmlvbiwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IG1hZ25pdHVkZVNxdWFyZWQgPSBRdWF0ZXJuaW9uLm1hZ25pdHVkZVNxdWFyZWQocXVhdGVybmlvbik7CiAgICAgICAgcmVzdWx0ID0gUXVhdGVybmlvbi5jb25qdWdhdGUocXVhdGVybmlvbiwgcmVzdWx0KTsKICAgICAgICByZXR1cm4gUXVhdGVybmlvbi5tdWx0aXBseUJ5U2NhbGFyKHJlc3VsdCwgMSAvIG1hZ25pdHVkZVNxdWFyZWQsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24uYWRkID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gbGVmdC54ICsgcmlnaHQueDsKICAgICAgICByZXN1bHQueSA9IGxlZnQueSArIHJpZ2h0Lnk7CiAgICAgICAgcmVzdWx0LnogPSBsZWZ0LnogKyByaWdodC56OwogICAgICAgIHJlc3VsdC53ID0gbGVmdC53ICsgcmlnaHQudzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBRdWF0ZXJuaW9uLnN1YnRyYWN0ID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gbGVmdC54IC0gcmlnaHQueDsKICAgICAgICByZXN1bHQueSA9IGxlZnQueSAtIHJpZ2h0Lnk7CiAgICAgICAgcmVzdWx0LnogPSBsZWZ0LnogLSByaWdodC56OwogICAgICAgIHJlc3VsdC53ID0gbGVmdC53IC0gcmlnaHQudzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBRdWF0ZXJuaW9uLm5lZ2F0ZSA9IGZ1bmN0aW9uKHF1YXRlcm5pb24sIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicXVhdGVybmlvbiIsIHF1YXRlcm5pb24pOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IC1xdWF0ZXJuaW9uLng7CiAgICAgICAgcmVzdWx0LnkgPSAtcXVhdGVybmlvbi55OwogICAgICAgIHJlc3VsdC56ID0gLXF1YXRlcm5pb24uejsKICAgICAgICByZXN1bHQudyA9IC1xdWF0ZXJuaW9uLnc7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbi5kb3QgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgcmV0dXJuIGxlZnQueCAqIHJpZ2h0LnggKyBsZWZ0LnkgKiByaWdodC55ICsgbGVmdC56ICogcmlnaHQueiArIGxlZnQudyAqIHJpZ2h0Lnc7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24ubXVsdGlwbHkgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgbGVmdFggPSBsZWZ0Lng7CiAgICAgICAgY29uc3QgbGVmdFkgPSBsZWZ0Lnk7CiAgICAgICAgY29uc3QgbGVmdFogPSBsZWZ0Lno7CiAgICAgICAgY29uc3QgbGVmdFcgPSBsZWZ0Lnc7CiAgICAgICAgY29uc3QgcmlnaHRYID0gcmlnaHQueDsKICAgICAgICBjb25zdCByaWdodFkgPSByaWdodC55OwogICAgICAgIGNvbnN0IHJpZ2h0WiA9IHJpZ2h0Lno7CiAgICAgICAgY29uc3QgcmlnaHRXID0gcmlnaHQudzsKICAgICAgICBjb25zdCB4ID0gbGVmdFcgKiByaWdodFggKyBsZWZ0WCAqIHJpZ2h0VyArIGxlZnRZICogcmlnaHRaIC0gbGVmdFogKiByaWdodFk7CiAgICAgICAgY29uc3QgeSA9IGxlZnRXICogcmlnaHRZIC0gbGVmdFggKiByaWdodFogKyBsZWZ0WSAqIHJpZ2h0VyArIGxlZnRaICogcmlnaHRYOwogICAgICAgIGNvbnN0IHogPSBsZWZ0VyAqIHJpZ2h0WiArIGxlZnRYICogcmlnaHRZIC0gbGVmdFkgKiByaWdodFggKyBsZWZ0WiAqIHJpZ2h0VzsKICAgICAgICBjb25zdCB3ID0gbGVmdFcgKiByaWdodFcgLSBsZWZ0WCAqIHJpZ2h0WCAtIGxlZnRZICogcmlnaHRZIC0gbGVmdFogKiByaWdodFo7CiAgICAgICAgcmVzdWx0LnggPSB4OwogICAgICAgIHJlc3VsdC55ID0geTsKICAgICAgICByZXN1bHQueiA9IHo7CiAgICAgICAgcmVzdWx0LncgPSB3OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhciA9IGZ1bmN0aW9uKHF1YXRlcm5pb24sIHNjYWxhciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJxdWF0ZXJuaW9uIiwgcXVhdGVybmlvbik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJzY2FsYXIiLCBzY2FsYXIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IHF1YXRlcm5pb24ueCAqIHNjYWxhcjsKICAgICAgICByZXN1bHQueSA9IHF1YXRlcm5pb24ueSAqIHNjYWxhcjsKICAgICAgICByZXN1bHQueiA9IHF1YXRlcm5pb24ueiAqIHNjYWxhcjsKICAgICAgICByZXN1bHQudyA9IHF1YXRlcm5pb24udyAqIHNjYWxhcjsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBRdWF0ZXJuaW9uLmRpdmlkZUJ5U2NhbGFyID0gZnVuY3Rpb24ocXVhdGVybmlvbiwgc2NhbGFyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInF1YXRlcm5pb24iLCBxdWF0ZXJuaW9uKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInNjYWxhciIsIHNjYWxhcik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gcXVhdGVybmlvbi54IC8gc2NhbGFyOwogICAgICAgIHJlc3VsdC55ID0gcXVhdGVybmlvbi55IC8gc2NhbGFyOwogICAgICAgIHJlc3VsdC56ID0gcXVhdGVybmlvbi56IC8gc2NhbGFyOwogICAgICAgIHJlc3VsdC53ID0gcXVhdGVybmlvbi53IC8gc2NhbGFyOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24uY29tcHV0ZUF4aXMgPSBmdW5jdGlvbihxdWF0ZXJuaW9uLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInF1YXRlcm5pb24iLCBxdWF0ZXJuaW9uKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgdyA9IHF1YXRlcm5pb24udzsKICAgICAgICBpZiAoTWF0aC5hYnModyAtIDEpIDwgTWF0aF9kZWZhdWx0LkVQU0lMT042KSB7CiAgICAgICAgICByZXN1bHQueCA9IHJlc3VsdC55ID0gcmVzdWx0LnogPSAwOwogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc2NhbGFyID0gMSAvIE1hdGguc3FydCgxIC0gdyAqIHcpOwogICAgICAgIHJlc3VsdC54ID0gcXVhdGVybmlvbi54ICogc2NhbGFyOwogICAgICAgIHJlc3VsdC55ID0gcXVhdGVybmlvbi55ICogc2NhbGFyOwogICAgICAgIHJlc3VsdC56ID0gcXVhdGVybmlvbi56ICogc2NhbGFyOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24uY29tcHV0ZUFuZ2xlID0gZnVuY3Rpb24ocXVhdGVybmlvbikgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicXVhdGVybmlvbiIsIHF1YXRlcm5pb24pOwogICAgICAgIGlmIChNYXRoLmFicyhxdWF0ZXJuaW9uLncgLSAxKSA8IE1hdGhfZGVmYXVsdC5FUFNJTE9ONikgewogICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHJldHVybiAyICogTWF0aC5hY29zKHF1YXRlcm5pb24udyk7CiAgICAgIH07CiAgICAgIGxlcnBTY3JhdGNoNCA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgIFF1YXRlcm5pb24ubGVycCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic3RhcnQiLCBzdGFydCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJlbmQiLCBlbmQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigidCIsIHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBsZXJwU2NyYXRjaDQgPSBRdWF0ZXJuaW9uLm11bHRpcGx5QnlTY2FsYXIoZW5kLCB0LCBsZXJwU2NyYXRjaDQpOwogICAgICAgIHJlc3VsdCA9IFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhcihzdGFydCwgMSAtIHQsIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIFF1YXRlcm5pb24uYWRkKGxlcnBTY3JhdGNoNCwgcmVzdWx0LCByZXN1bHQpOwogICAgICB9OwogICAgICBzbGVycEVuZE5lZ2F0ZWQgPSBuZXcgUXVhdGVybmlvbigpOwogICAgICBzbGVycFNjYWxlZFAgPSBuZXcgUXVhdGVybmlvbigpOwogICAgICBzbGVycFNjYWxlZFIgPSBuZXcgUXVhdGVybmlvbigpOwogICAgICBRdWF0ZXJuaW9uLnNsZXJwID0gZnVuY3Rpb24oc3RhcnQsIGVuZCwgdCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzdGFydCIsIHN0YXJ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImVuZCIsIGVuZCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJ0IiwgdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGxldCBkb3QgPSBRdWF0ZXJuaW9uLmRvdChzdGFydCwgZW5kKTsKICAgICAgICBsZXQgciA9IGVuZDsKICAgICAgICBpZiAoZG90IDwgMCkgewogICAgICAgICAgZG90ID0gLWRvdDsKICAgICAgICAgIHIgPSBzbGVycEVuZE5lZ2F0ZWQgPSBRdWF0ZXJuaW9uLm5lZ2F0ZShlbmQsIHNsZXJwRW5kTmVnYXRlZCk7CiAgICAgICAgfQogICAgICAgIGlmICgxIC0gZG90IDwgTWF0aF9kZWZhdWx0LkVQU0lMT042KSB7CiAgICAgICAgICByZXR1cm4gUXVhdGVybmlvbi5sZXJwKHN0YXJ0LCByLCB0LCByZXN1bHQpOwogICAgICAgIH0KICAgICAgICBjb25zdCB0aGV0YSA9IE1hdGguYWNvcyhkb3QpOwogICAgICAgIHNsZXJwU2NhbGVkUCA9IFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgIHN0YXJ0LAogICAgICAgICAgTWF0aC5zaW4oKDEgLSB0KSAqIHRoZXRhKSwKICAgICAgICAgIHNsZXJwU2NhbGVkUAogICAgICAgICk7CiAgICAgICAgc2xlcnBTY2FsZWRSID0gUXVhdGVybmlvbi5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgciwKICAgICAgICAgIE1hdGguc2luKHQgKiB0aGV0YSksCiAgICAgICAgICBzbGVycFNjYWxlZFIKICAgICAgICApOwogICAgICAgIHJlc3VsdCA9IFF1YXRlcm5pb24uYWRkKHNsZXJwU2NhbGVkUCwgc2xlcnBTY2FsZWRSLCByZXN1bHQpOwogICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLm11bHRpcGx5QnlTY2FsYXIocmVzdWx0LCAxIC8gTWF0aC5zaW4odGhldGEpLCByZXN1bHQpOwogICAgICB9OwogICAgICBRdWF0ZXJuaW9uLmxvZyA9IGZ1bmN0aW9uKHF1YXRlcm5pb24sIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicXVhdGVybmlvbiIsIHF1YXRlcm5pb24pOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCB0aGV0YSA9IE1hdGhfZGVmYXVsdC5hY29zQ2xhbXBlZChxdWF0ZXJuaW9uLncpOwogICAgICAgIGxldCB0aGV0YU92ZXJTaW5UaGV0YSA9IDA7CiAgICAgICAgaWYgKHRoZXRhICE9PSAwKSB7CiAgICAgICAgICB0aGV0YU92ZXJTaW5UaGV0YSA9IHRoZXRhIC8gTWF0aC5zaW4odGhldGEpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIocXVhdGVybmlvbiwgdGhldGFPdmVyU2luVGhldGEsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24uZXhwID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCB0aGV0YSA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUoY2FydGVzaWFuMTEpOwogICAgICAgIGxldCBzaW5UaGV0YU92ZXJUaGV0YSA9IDA7CiAgICAgICAgaWYgKHRoZXRhICE9PSAwKSB7CiAgICAgICAgICBzaW5UaGV0YU92ZXJUaGV0YSA9IE1hdGguc2luKHRoZXRhKSAvIHRoZXRhOwogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IGNhcnRlc2lhbjExLnggKiBzaW5UaGV0YU92ZXJUaGV0YTsKICAgICAgICByZXN1bHQueSA9IGNhcnRlc2lhbjExLnkgKiBzaW5UaGV0YU92ZXJUaGV0YTsKICAgICAgICByZXN1bHQueiA9IGNhcnRlc2lhbjExLnogKiBzaW5UaGV0YU92ZXJUaGV0YTsKICAgICAgICByZXN1bHQudyA9IE1hdGguY29zKHRoZXRhKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzcXVhZFNjcmF0Y2hDYXJ0ZXNpYW4wID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzcXVhZFNjcmF0Y2hDYXJ0ZXNpYW4xID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzcXVhZFNjcmF0Y2hRdWF0ZXJuaW9uMCA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgIHNxdWFkU2NyYXRjaFF1YXRlcm5pb24xID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgUXVhdGVybmlvbi5jb21wdXRlSW5uZXJRdWFkcmFuZ2xlID0gZnVuY3Rpb24ocTAsIHExMiwgcTIyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInEwIiwgcTApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicTEiLCBxMTIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicTIiLCBxMjIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBxSW52ID0gUXVhdGVybmlvbi5jb25qdWdhdGUocTEyLCBzcXVhZFNjcmF0Y2hRdWF0ZXJuaW9uMCk7CiAgICAgICAgUXVhdGVybmlvbi5tdWx0aXBseShxSW52LCBxMjIsIHNxdWFkU2NyYXRjaFF1YXRlcm5pb24xKTsKICAgICAgICBjb25zdCBjYXJ0MCA9IFF1YXRlcm5pb24ubG9nKHNxdWFkU2NyYXRjaFF1YXRlcm5pb24xLCBzcXVhZFNjcmF0Y2hDYXJ0ZXNpYW4wKTsKICAgICAgICBRdWF0ZXJuaW9uLm11bHRpcGx5KHFJbnYsIHEwLCBzcXVhZFNjcmF0Y2hRdWF0ZXJuaW9uMSk7CiAgICAgICAgY29uc3QgY2FydDEgPSBRdWF0ZXJuaW9uLmxvZyhzcXVhZFNjcmF0Y2hRdWF0ZXJuaW9uMSwgc3F1YWRTY3JhdGNoQ2FydGVzaWFuMSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjYXJ0MCwgY2FydDEsIGNhcnQwKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihjYXJ0MCwgMC4yNSwgY2FydDApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUoY2FydDAsIGNhcnQwKTsKICAgICAgICBRdWF0ZXJuaW9uLmV4cChjYXJ0MCwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjApOwogICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLm11bHRpcGx5KHExMiwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjAsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24uc3F1YWQgPSBmdW5jdGlvbihxMCwgcTEyLCBzMCwgczEsIHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicTAiLCBxMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJxMSIsIHExMik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzMCIsIHMwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInMxIiwgczEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigidCIsIHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBzbGVycDAgPSBRdWF0ZXJuaW9uLnNsZXJwKHEwLCBxMTIsIHQsIHNxdWFkU2NyYXRjaFF1YXRlcm5pb24wKTsKICAgICAgICBjb25zdCBzbGVycDEgPSBRdWF0ZXJuaW9uLnNsZXJwKHMwLCBzMSwgdCwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjEpOwogICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLnNsZXJwKHNsZXJwMCwgc2xlcnAxLCAyICogdCAqICgxIC0gdCksIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIGZhc3RTbGVycFNjcmF0Y2hRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgb3BtdSA9IDEuOTAxMTA3NDUzNTE3MzAwMzsKICAgICAgdSA9IEZlYXR1cmVEZXRlY3Rpb25fZGVmYXVsdC5zdXBwb3J0c1R5cGVkQXJyYXlzKCkgPyBuZXcgRmxvYXQzMkFycmF5KDgpIDogW107CiAgICAgIHYgPSBGZWF0dXJlRGV0ZWN0aW9uX2RlZmF1bHQuc3VwcG9ydHNUeXBlZEFycmF5cygpID8gbmV3IEZsb2F0MzJBcnJheSg4KSA6IFtdOwogICAgICBiVCA9IEZlYXR1cmVEZXRlY3Rpb25fZGVmYXVsdC5zdXBwb3J0c1R5cGVkQXJyYXlzKCkgPyBuZXcgRmxvYXQzMkFycmF5KDgpIDogW107CiAgICAgIGJEID0gRmVhdHVyZURldGVjdGlvbl9kZWZhdWx0LnN1cHBvcnRzVHlwZWRBcnJheXMoKSA/IG5ldyBGbG9hdDMyQXJyYXkoOCkgOiBbXTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA3OyArK2kpIHsKICAgICAgICBjb25zdCBzID0gaSArIDE7CiAgICAgICAgY29uc3QgdCA9IDIgKiBzICsgMTsKICAgICAgICB1W2ldID0gMSAvIChzICogdCk7CiAgICAgICAgdltpXSA9IHMgLyB0OwogICAgICB9CiAgICAgIHVbN10gPSBvcG11IC8gKDggKiAxNyk7CiAgICAgIHZbN10gPSBvcG11ICogOCAvIDE3OwogICAgICBRdWF0ZXJuaW9uLmZhc3RTbGVycCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic3RhcnQiLCBzdGFydCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJlbmQiLCBlbmQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigidCIsIHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBsZXQgeCA9IFF1YXRlcm5pb24uZG90KHN0YXJ0LCBlbmQpOwogICAgICAgIGxldCBzaWduMjsKICAgICAgICBpZiAoeCA+PSAwKSB7CiAgICAgICAgICBzaWduMiA9IDE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNpZ24yID0gLTE7CiAgICAgICAgICB4ID0gLXg7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHhtMSA9IHggLSAxOwogICAgICAgIGNvbnN0IGQgPSAxIC0gdDsKICAgICAgICBjb25zdCBzcXJUID0gdCAqIHQ7CiAgICAgICAgY29uc3Qgc3FyRCA9IGQgKiBkOwogICAgICAgIGZvciAobGV0IGkgPSA3OyBpID49IDA7IC0taSkgewogICAgICAgICAgYlRbaV0gPSAodVtpXSAqIHNxclQgLSB2W2ldKSAqIHhtMTsKICAgICAgICAgIGJEW2ldID0gKHVbaV0gKiBzcXJEIC0gdltpXSkgKiB4bTE7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGNUID0gc2lnbjIgKiB0ICogKDEgKyBiVFswXSAqICgxICsgYlRbMV0gKiAoMSArIGJUWzJdICogKDEgKyBiVFszXSAqICgxICsgYlRbNF0gKiAoMSArIGJUWzVdICogKDEgKyBiVFs2XSAqICgxICsgYlRbN10pKSkpKSkpKTsKICAgICAgICBjb25zdCBjRCA9IGQgKiAoMSArIGJEWzBdICogKDEgKyBiRFsxXSAqICgxICsgYkRbMl0gKiAoMSArIGJEWzNdICogKDEgKyBiRFs0XSAqICgxICsgYkRbNV0gKiAoMSArIGJEWzZdICogKDEgKyBiRFs3XSkpKSkpKSkpOwogICAgICAgIGNvbnN0IHRlbXAgPSBRdWF0ZXJuaW9uLm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgICBzdGFydCwKICAgICAgICAgIGNELAogICAgICAgICAgZmFzdFNsZXJwU2NyYXRjaFF1YXRlcm5pb24KICAgICAgICApOwogICAgICAgIFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhcihlbmQsIGNULCByZXN1bHQpOwogICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLmFkZCh0ZW1wLCByZXN1bHQsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24uZmFzdFNxdWFkID0gZnVuY3Rpb24ocTAsIHExMiwgczAsIHMxLCB0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInEwIiwgcTApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicTEiLCBxMTIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiczAiLCBzMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzMSIsIHMxKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInQiLCB0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3Qgc2xlcnAwID0gUXVhdGVybmlvbi5mYXN0U2xlcnAocTAsIHExMiwgdCwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjApOwogICAgICAgIGNvbnN0IHNsZXJwMSA9IFF1YXRlcm5pb24uZmFzdFNsZXJwKHMwLCBzMSwgdCwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjEpOwogICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLmZhc3RTbGVycChzbGVycDAsIHNsZXJwMSwgMiAqIHQgKiAoMSAtIHQpLCByZXN1bHQpOwogICAgICB9OwogICAgICBRdWF0ZXJuaW9uLmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIGxlZnQueCA9PT0gcmlnaHQueCAmJiBsZWZ0LnkgPT09IHJpZ2h0LnkgJiYgbGVmdC56ID09PSByaWdodC56ICYmIGxlZnQudyA9PT0gcmlnaHQudzsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbi5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIGVwc2lsb24pIHsKICAgICAgICBlcHNpbG9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZXBzaWxvbiwgMCk7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIE1hdGguYWJzKGxlZnQueCAtIHJpZ2h0LngpIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdC55IC0gcmlnaHQueSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0LnogLSByaWdodC56KSA8PSBlcHNpbG9uICYmIE1hdGguYWJzKGxlZnQudyAtIHJpZ2h0LncpIDw9IGVwc2lsb247CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24uWkVSTyA9IE9iamVjdC5mcmVlemUobmV3IFF1YXRlcm5pb24oMCwgMCwgMCwgMCkpOwogICAgICBRdWF0ZXJuaW9uLklERU5USVRZID0gT2JqZWN0LmZyZWV6ZShuZXcgUXVhdGVybmlvbigwLCAwLCAwLCAxKSk7CiAgICAgIFF1YXRlcm5pb24ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIFF1YXRlcm5pb24uY2xvbmUodGhpcywgcmVzdWx0KTsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbi5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ocmlnaHQpIHsKICAgICAgICByZXR1cm4gUXVhdGVybmlvbi5lcXVhbHModGhpcywgcmlnaHQpOwogICAgICB9OwogICAgICBRdWF0ZXJuaW9uLnByb3RvdHlwZS5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24ocmlnaHQsIGVwc2lsb24pIHsKICAgICAgICByZXR1cm4gUXVhdGVybmlvbi5lcXVhbHNFcHNpbG9uKHRoaXMsIHJpZ2h0LCBlcHNpbG9uKTsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gYCgke3RoaXMueH0sICR7dGhpcy55fSwgJHt0aGlzLnp9LCAke3RoaXMud30pYDsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbl9kZWZhdWx0ID0gUXVhdGVybmlvbjsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2JpbmFyeVNlYXJjaC5qcwogIGZ1bmN0aW9uIGJpbmFyeVNlYXJjaChhcnJheSwgaXRlbVRvRmluZCwgY29tcGFyYXRvcikgewogICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiaXRlbVRvRmluZCIsIGl0ZW1Ub0ZpbmQpOwogICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJjb21wYXJhdG9yIiwgY29tcGFyYXRvcik7CiAgICBsZXQgbG93ID0gMDsKICAgIGxldCBoaWdoID0gYXJyYXkubGVuZ3RoIC0gMTsKICAgIGxldCBpOwogICAgbGV0IGNvbXBhcmlzb247CiAgICB3aGlsZSAobG93IDw9IGhpZ2gpIHsKICAgICAgaSA9IH5+KChsb3cgKyBoaWdoKSAvIDIpOwogICAgICBjb21wYXJpc29uID0gY29tcGFyYXRvcihhcnJheVtpXSwgaXRlbVRvRmluZCk7CiAgICAgIGlmIChjb21wYXJpc29uIDwgMCkgewogICAgICAgIGxvdyA9IGkgKyAxOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmIChjb21wYXJpc29uID4gMCkgewogICAgICAgIGhpZ2ggPSBpIC0gMTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICByZXR1cm4gaTsKICAgIH0KICAgIHJldHVybiB+KGhpZ2ggKyAxKTsKICB9CiAgdmFyIGJpbmFyeVNlYXJjaF9kZWZhdWx0OwogIHZhciBpbml0X2JpbmFyeVNlYXJjaCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvYmluYXJ5U2VhcmNoLmpzIigpIHsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBiaW5hcnlTZWFyY2hfZGVmYXVsdCA9IGJpbmFyeVNlYXJjaDsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0VhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzU2FtcGxlLmpzCiAgZnVuY3Rpb24gRWFydGhPcmllbnRhdGlvblBhcmFtZXRlcnNTYW1wbGUoeFBvbGVXYW5kZXIsIHlQb2xlV2FuZGVyLCB4UG9sZU9mZnNldCwgeVBvbGVPZmZzZXQsIHV0MU1pbnVzVXRjKSB7CiAgICB0aGlzLnhQb2xlV2FuZGVyID0geFBvbGVXYW5kZXI7CiAgICB0aGlzLnlQb2xlV2FuZGVyID0geVBvbGVXYW5kZXI7CiAgICB0aGlzLnhQb2xlT2Zmc2V0ID0geFBvbGVPZmZzZXQ7CiAgICB0aGlzLnlQb2xlT2Zmc2V0ID0geVBvbGVPZmZzZXQ7CiAgICB0aGlzLnV0MU1pbnVzVXRjID0gdXQxTWludXNVdGM7CiAgfQogIHZhciBFYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVyc1NhbXBsZV9kZWZhdWx0OwogIHZhciBpbml0X0VhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzU2FtcGxlID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVyc1NhbXBsZS5qcyIoKSB7CiAgICAgIEVhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzU2FtcGxlX2RlZmF1bHQgPSBFYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVyc1NhbXBsZTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dyZWdvcmlhbkRhdGUuanMKICBmdW5jdGlvbiBHcmVnb3JpYW5EYXRlKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCwgaXNMZWFwU2Vjb25kKSB7CiAgICB0aGlzLnllYXIgPSB5ZWFyOwogICAgdGhpcy5tb250aCA9IG1vbnRoOwogICAgdGhpcy5kYXkgPSBkYXk7CiAgICB0aGlzLmhvdXIgPSBob3VyOwogICAgdGhpcy5taW51dGUgPSBtaW51dGU7CiAgICB0aGlzLnNlY29uZCA9IHNlY29uZDsKICAgIHRoaXMubWlsbGlzZWNvbmQgPSBtaWxsaXNlY29uZDsKICAgIHRoaXMuaXNMZWFwU2Vjb25kID0gaXNMZWFwU2Vjb25kOwogIH0KICB2YXIgR3JlZ29yaWFuRGF0ZV9kZWZhdWx0OwogIHZhciBpbml0X0dyZWdvcmlhbkRhdGUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dyZWdvcmlhbkRhdGUuanMiKCkgewogICAgICBHcmVnb3JpYW5EYXRlX2RlZmF1bHQgPSBHcmVnb3JpYW5EYXRlOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvaXNMZWFwWWVhci5qcwogIGZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikgewogICAgaWYgKHllYXIgPT09IG51bGwgfHwgaXNOYU4oeWVhcikpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInllYXIgaXMgcmVxdWlyZWQgYW5kIG11c3QgYmUgYSBudW1iZXIuIik7CiAgICB9CiAgICByZXR1cm4geWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCB8fCB5ZWFyICUgNDAwID09PSAwOwogIH0KICB2YXIgaXNMZWFwWWVhcl9kZWZhdWx0OwogIHZhciBpbml0X2lzTGVhcFllYXIgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2lzTGVhcFllYXIuanMiKCkgewogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGlzTGVhcFllYXJfZGVmYXVsdCA9IGlzTGVhcFllYXI7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9MZWFwU2Vjb25kLmpzCiAgZnVuY3Rpb24gTGVhcFNlY29uZChkYXRlLCBvZmZzZXQpIHsKICAgIHRoaXMuanVsaWFuRGF0ZSA9IGRhdGU7CiAgICB0aGlzLm9mZnNldCA9IG9mZnNldDsKICB9CiAgdmFyIExlYXBTZWNvbmRfZGVmYXVsdDsKICB2YXIgaW5pdF9MZWFwU2Vjb25kID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9MZWFwU2Vjb25kLmpzIigpIHsKICAgICAgTGVhcFNlY29uZF9kZWZhdWx0ID0gTGVhcFNlY29uZDsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1RpbWVDb25zdGFudHMuanMKICB2YXIgVGltZUNvbnN0YW50cywgVGltZUNvbnN0YW50c19kZWZhdWx0OwogIHZhciBpbml0X1RpbWVDb25zdGFudHMgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1RpbWVDb25zdGFudHMuanMiKCkgewogICAgICBUaW1lQ29uc3RhbnRzID0gewogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBpbiBvbmUgbWlsbGlzZWNvbmQ6IDxjb2RlPjAuMDAxPC9jb2RlPgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgU0VDT05EU19QRVJfTUlMTElTRUNPTkQ6IDFlLTMsCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIG51bWJlciBvZiBzZWNvbmRzIGluIG9uZSBtaW51dGU6IDxjb2RlPjYwPC9jb2RlPi4KICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFNFQ09ORFNfUEVSX01JTlVURTogNjAsCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIG51bWJlciBvZiBtaW51dGVzIGluIG9uZSBob3VyOiA8Y29kZT42MDwvY29kZT4uCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBNSU5VVEVTX1BFUl9IT1VSOiA2MCwKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIGhvdXJzIGluIG9uZSBkYXk6IDxjb2RlPjI0PC9jb2RlPi4KICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIEhPVVJTX1BFUl9EQVk6IDI0LAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBpbiBvbmUgaG91cjogPGNvZGU+MzYwMDwvY29kZT4uCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBTRUNPTkRTX1BFUl9IT1VSOiAzNjAwLAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBudW1iZXIgb2YgbWludXRlcyBpbiBvbmUgZGF5OiA8Y29kZT4xNDQwPC9jb2RlPi4KICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIE1JTlVURVNfUEVSX0RBWTogMTQ0MCwKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIHNlY29uZHMgaW4gb25lIGRheSwgaWdub3JpbmcgbGVhcCBzZWNvbmRzOiA8Y29kZT44NjQwMDwvY29kZT4uCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBTRUNPTkRTX1BFUl9EQVk6IDg2NDAwLAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBudW1iZXIgb2YgZGF5cyBpbiBvbmUgSnVsaWFuIGNlbnR1cnk6IDxjb2RlPjM2NTI1PC9jb2RlPi4KICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIERBWVNfUEVSX0pVTElBTl9DRU5UVVJZOiAzNjUyNSwKICAgICAgICAvKioKICAgICAgICAgKiBPbmUgdHJpbGxpb250aCBvZiBhIHNlY29uZC4KICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFBJQ09TRUNPTkQ6IDFlLTksCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIG51bWJlciBvZiBkYXlzIHRvIHN1YnRyYWN0IGZyb20gYSBKdWxpYW4gZGF0ZSB0byBkZXRlcm1pbmUgdGhlCiAgICAgICAgICogbW9kaWZpZWQgSnVsaWFuIGRhdGUsIHdoaWNoIGdpdmVzIHRoZSBudW1iZXIgb2YgZGF5cyBzaW5jZSBtaWRuaWdodAogICAgICAgICAqIG9uIE5vdmVtYmVyIDE3LCAxODU4LgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgTU9ESUZJRURfSlVMSUFOX0RBVEVfRElGRkVSRU5DRTogMjQwMDAwMDVlLTEKICAgICAgfTsKICAgICAgVGltZUNvbnN0YW50c19kZWZhdWx0ID0gT2JqZWN0LmZyZWV6ZShUaW1lQ29uc3RhbnRzKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1RpbWVTdGFuZGFyZC5qcwogIHZhciBUaW1lU3RhbmRhcmQsIFRpbWVTdGFuZGFyZF9kZWZhdWx0OwogIHZhciBpbml0X1RpbWVTdGFuZGFyZCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVGltZVN0YW5kYXJkLmpzIigpIHsKICAgICAgVGltZVN0YW5kYXJkID0gewogICAgICAgIC8qKgogICAgICAgICAqIFJlcHJlc2VudHMgdGhlIGNvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lIChVVEMpIHRpbWUgc3RhbmRhcmQuCiAgICAgICAgICoKICAgICAgICAgKiBVVEMgaXMgcmVsYXRlZCB0byBUQUkgYWNjb3JkaW5nIHRvIHRoZSByZWxhdGlvbnNoaXAKICAgICAgICAgKiA8Y29kZT5VVEMgPSBUQUkgLSBkZWx0YVQ8L2NvZGU+IHdoZXJlIDxjb2RlPmRlbHRhVDwvY29kZT4gaXMgdGhlIG51bWJlciBvZiBsZWFwCiAgICAgICAgICogc2Vjb25kcyB3aGljaCBoYXZlIGJlZW4gaW50cm9kdWNlZCBhcyBvZiB0aGUgdGltZSBpbiBUQUkuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFVUQzogMCwKICAgICAgICAvKioKICAgICAgICAgKiBSZXByZXNlbnRzIHRoZSBJbnRlcm5hdGlvbmFsIEF0b21pYyBUaW1lIChUQUkpIHRpbWUgc3RhbmRhcmQuCiAgICAgICAgICogVEFJIGlzIHRoZSBwcmluY2lwYWwgdGltZSBzdGFuZGFyZCB0byB3aGljaCB0aGUgb3RoZXIgdGltZSBzdGFuZGFyZHMgYXJlIHJlbGF0ZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFRBSTogMQogICAgICB9OwogICAgICBUaW1lU3RhbmRhcmRfZGVmYXVsdCA9IE9iamVjdC5mcmVlemUoVGltZVN0YW5kYXJkKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0p1bGlhbkRhdGUuanMKICBmdW5jdGlvbiBjb21wYXJlTGVhcFNlY29uZERhdGVzKGxlYXBTZWNvbmQsIGRhdGVUb0ZpbmQpIHsKICAgIHJldHVybiBKdWxpYW5EYXRlLmNvbXBhcmUobGVhcFNlY29uZC5qdWxpYW5EYXRlLCBkYXRlVG9GaW5kLmp1bGlhbkRhdGUpOwogIH0KICBmdW5jdGlvbiBjb252ZXJ0VXRjVG9UYWkoanVsaWFuRGF0ZSkgewogICAgYmluYXJ5U2VhcmNoU2NyYXRjaExlYXBTZWNvbmQuanVsaWFuRGF0ZSA9IGp1bGlhbkRhdGU7CiAgICBjb25zdCBsZWFwU2Vjb25kcyA9IEp1bGlhbkRhdGUubGVhcFNlY29uZHM7CiAgICBsZXQgaW5kZXggPSBiaW5hcnlTZWFyY2hfZGVmYXVsdCgKICAgICAgbGVhcFNlY29uZHMsCiAgICAgIGJpbmFyeVNlYXJjaFNjcmF0Y2hMZWFwU2Vjb25kLAogICAgICBjb21wYXJlTGVhcFNlY29uZERhdGVzCiAgICApOwogICAgaWYgKGluZGV4IDwgMCkgewogICAgICBpbmRleCA9IH5pbmRleDsKICAgIH0KICAgIGlmIChpbmRleCA+PSBsZWFwU2Vjb25kcy5sZW5ndGgpIHsKICAgICAgaW5kZXggPSBsZWFwU2Vjb25kcy5sZW5ndGggLSAxOwogICAgfQogICAgbGV0IG9mZnNldCA9IGxlYXBTZWNvbmRzW2luZGV4XS5vZmZzZXQ7CiAgICBpZiAoaW5kZXggPiAwKSB7CiAgICAgIGNvbnN0IGRpZmZlcmVuY2UgPSBKdWxpYW5EYXRlLnNlY29uZHNEaWZmZXJlbmNlKAogICAgICAgIGxlYXBTZWNvbmRzW2luZGV4XS5qdWxpYW5EYXRlLAogICAgICAgIGp1bGlhbkRhdGUKICAgICAgKTsKICAgICAgaWYgKGRpZmZlcmVuY2UgPiBvZmZzZXQpIHsKICAgICAgICBpbmRleC0tOwogICAgICAgIG9mZnNldCA9IGxlYXBTZWNvbmRzW2luZGV4XS5vZmZzZXQ7CiAgICAgIH0KICAgIH0KICAgIEp1bGlhbkRhdGUuYWRkU2Vjb25kcyhqdWxpYW5EYXRlLCBvZmZzZXQsIGp1bGlhbkRhdGUpOwogIH0KICBmdW5jdGlvbiBjb252ZXJ0VGFpVG9VdGMoanVsaWFuRGF0ZSwgcmVzdWx0KSB7CiAgICBiaW5hcnlTZWFyY2hTY3JhdGNoTGVhcFNlY29uZC5qdWxpYW5EYXRlID0ganVsaWFuRGF0ZTsKICAgIGNvbnN0IGxlYXBTZWNvbmRzID0gSnVsaWFuRGF0ZS5sZWFwU2Vjb25kczsKICAgIGxldCBpbmRleCA9IGJpbmFyeVNlYXJjaF9kZWZhdWx0KAogICAgICBsZWFwU2Vjb25kcywKICAgICAgYmluYXJ5U2VhcmNoU2NyYXRjaExlYXBTZWNvbmQsCiAgICAgIGNvbXBhcmVMZWFwU2Vjb25kRGF0ZXMKICAgICk7CiAgICBpZiAoaW5kZXggPCAwKSB7CiAgICAgIGluZGV4ID0gfmluZGV4OwogICAgfQogICAgaWYgKGluZGV4ID09PSAwKSB7CiAgICAgIHJldHVybiBKdWxpYW5EYXRlLmFkZFNlY29uZHMoanVsaWFuRGF0ZSwgLWxlYXBTZWNvbmRzWzBdLm9mZnNldCwgcmVzdWx0KTsKICAgIH0KICAgIGlmIChpbmRleCA+PSBsZWFwU2Vjb25kcy5sZW5ndGgpIHsKICAgICAgcmV0dXJuIEp1bGlhbkRhdGUuYWRkU2Vjb25kcygKICAgICAgICBqdWxpYW5EYXRlLAogICAgICAgIC1sZWFwU2Vjb25kc1tpbmRleCAtIDFdLm9mZnNldCwKICAgICAgICByZXN1bHQKICAgICAgKTsKICAgIH0KICAgIGNvbnN0IGRpZmZlcmVuY2UgPSBKdWxpYW5EYXRlLnNlY29uZHNEaWZmZXJlbmNlKAogICAgICBsZWFwU2Vjb25kc1tpbmRleF0uanVsaWFuRGF0ZSwKICAgICAganVsaWFuRGF0ZQogICAgKTsKICAgIGlmIChkaWZmZXJlbmNlID09PSAwKSB7CiAgICAgIHJldHVybiBKdWxpYW5EYXRlLmFkZFNlY29uZHMoCiAgICAgICAganVsaWFuRGF0ZSwKICAgICAgICAtbGVhcFNlY29uZHNbaW5kZXhdLm9mZnNldCwKICAgICAgICByZXN1bHQKICAgICAgKTsKICAgIH0KICAgIGlmIChkaWZmZXJlbmNlIDw9IDEpIHsKICAgICAgcmV0dXJuIHZvaWQgMDsKICAgIH0KICAgIHJldHVybiBKdWxpYW5EYXRlLmFkZFNlY29uZHMoCiAgICAgIGp1bGlhbkRhdGUsCiAgICAgIC1sZWFwU2Vjb25kc1stLWluZGV4XS5vZmZzZXQsCiAgICAgIHJlc3VsdAogICAgKTsKICB9CiAgZnVuY3Rpb24gc2V0Q29tcG9uZW50cyh3aG9sZURheXMsIHNlY29uZHNPZkRheSwganVsaWFuRGF0ZSkgewogICAgY29uc3QgZXh0cmFEYXlzID0gc2Vjb25kc09mRGF5IC8gVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX0RBWSB8IDA7CiAgICB3aG9sZURheXMgKz0gZXh0cmFEYXlzOwogICAgc2Vjb25kc09mRGF5IC09IFRpbWVDb25zdGFudHNfZGVmYXVsdC5TRUNPTkRTX1BFUl9EQVkgKiBleHRyYURheXM7CiAgICBpZiAoc2Vjb25kc09mRGF5IDwgMCkgewogICAgICB3aG9sZURheXMtLTsKICAgICAgc2Vjb25kc09mRGF5ICs9IFRpbWVDb25zdGFudHNfZGVmYXVsdC5TRUNPTkRTX1BFUl9EQVk7CiAgICB9CiAgICBqdWxpYW5EYXRlLmRheU51bWJlciA9IHdob2xlRGF5czsKICAgIGp1bGlhbkRhdGUuc2Vjb25kc09mRGF5ID0gc2Vjb25kc09mRGF5OwogICAgcmV0dXJuIGp1bGlhbkRhdGU7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVKdWxpYW5EYXRlQ29tcG9uZW50cyh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQpIHsKICAgIGNvbnN0IGEzID0gKG1vbnRoIC0gMTQpIC8gMTIgfCAwOwogICAgY29uc3QgYiA9IHllYXIgKyA0ODAwICsgYTM7CiAgICBsZXQgZGF5TnVtYmVyID0gKDE0NjEgKiBiIC8gNCB8IDApICsgKDM2NyAqIChtb250aCAtIDIgLSAxMiAqIGEzKSAvIDEyIHwgMCkgLSAoMyAqICgoYiArIDEwMCkgLyAxMDAgfCAwKSAvIDQgfCAwKSArIGRheSAtIDMyMDc1OwogICAgaG91ciA9IGhvdXIgLSAxMjsKICAgIGlmIChob3VyIDwgMCkgewogICAgICBob3VyICs9IDI0OwogICAgfQogICAgY29uc3Qgc2Vjb25kc09mRGF5ID0gc2Vjb25kICsgKGhvdXIgKiBUaW1lQ29uc3RhbnRzX2RlZmF1bHQuU0VDT05EU19QRVJfSE9VUiArIG1pbnV0ZSAqIFRpbWVDb25zdGFudHNfZGVmYXVsdC5TRUNPTkRTX1BFUl9NSU5VVEUgKyBtaWxsaXNlY29uZCAqIFRpbWVDb25zdGFudHNfZGVmYXVsdC5TRUNPTkRTX1BFUl9NSUxMSVNFQ09ORCk7CiAgICBpZiAoc2Vjb25kc09mRGF5ID49IDQzMjAwKSB7CiAgICAgIGRheU51bWJlciAtPSAxOwogICAgfQogICAgcmV0dXJuIFtkYXlOdW1iZXIsIHNlY29uZHNPZkRheV07CiAgfQogIGZ1bmN0aW9uIEp1bGlhbkRhdGUoanVsaWFuRGF5TnVtYmVyLCBzZWNvbmRzT2ZEYXksIHRpbWVTdGFuZGFyZCkgewogICAgdGhpcy5kYXlOdW1iZXIgPSB2b2lkIDA7CiAgICB0aGlzLnNlY29uZHNPZkRheSA9IHZvaWQgMDsKICAgIGp1bGlhbkRheU51bWJlciA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGp1bGlhbkRheU51bWJlciwgMCk7CiAgICBzZWNvbmRzT2ZEYXkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzZWNvbmRzT2ZEYXksIDApOwogICAgdGltZVN0YW5kYXJkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQodGltZVN0YW5kYXJkLCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5VVEMpOwogICAgY29uc3Qgd2hvbGVEYXlzID0ganVsaWFuRGF5TnVtYmVyIHwgMDsKICAgIHNlY29uZHNPZkRheSA9IHNlY29uZHNPZkRheSArIChqdWxpYW5EYXlOdW1iZXIgLSB3aG9sZURheXMpICogVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX0RBWTsKICAgIHNldENvbXBvbmVudHMod2hvbGVEYXlzLCBzZWNvbmRzT2ZEYXksIHRoaXMpOwogICAgaWYgKHRpbWVTdGFuZGFyZCA9PT0gVGltZVN0YW5kYXJkX2RlZmF1bHQuVVRDKSB7CiAgICAgIGNvbnZlcnRVdGNUb1RhaSh0aGlzKTsKICAgIH0KICB9CiAgdmFyIGdyZWdvcmlhbkRhdGVTY3JhdGNoLCBkYXlzSW5Nb250aCwgZGF5c0luTGVhcEZlYnVyYXJ5LCBiaW5hcnlTZWFyY2hTY3JhdGNoTGVhcFNlY29uZCwgbWF0Y2hDYWxlbmRhclllYXIsIG1hdGNoQ2FsZW5kYXJNb250aCwgbWF0Y2hPcmRpbmFsRGF0ZSwgbWF0Y2hXZWVrRGF0ZSwgbWF0Y2hDYWxlbmRhckRhdGUsIHV0Y09mZnNldCwgbWF0Y2hIb3VycywgbWF0Y2hIb3Vyc01pbnV0ZXMsIG1hdGNoSG91cnNNaW51dGVzU2Vjb25kcywgaXNvODYwMUVycm9yTWVzc2FnZSwgdG9HcmVnb3JpYW5EYXRlU2NyYXRjaCwgSnVsaWFuRGF0ZV9kZWZhdWx0OwogIHZhciBpbml0X0p1bGlhbkRhdGUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0p1bGlhbkRhdGUuanMiKCkgewogICAgICBpbml0X2JpbmFyeVNlYXJjaCgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0dyZWdvcmlhbkRhdGUoKTsKICAgICAgaW5pdF9pc0xlYXBZZWFyKCk7CiAgICAgIGluaXRfTGVhcFNlY29uZCgpOwogICAgICBpbml0X1RpbWVDb25zdGFudHMoKTsKICAgICAgaW5pdF9UaW1lU3RhbmRhcmQoKTsKICAgICAgZ3JlZ29yaWFuRGF0ZVNjcmF0Y2ggPSBuZXcgR3JlZ29yaWFuRGF0ZV9kZWZhdWx0KCk7CiAgICAgIGRheXNJbk1vbnRoID0gWzMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdOwogICAgICBkYXlzSW5MZWFwRmVidXJhcnkgPSAyOTsKICAgICAgYmluYXJ5U2VhcmNoU2NyYXRjaExlYXBTZWNvbmQgPSBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KCk7CiAgICAgIG1hdGNoQ2FsZW5kYXJZZWFyID0gL14oXGR7NH0pJC87CiAgICAgIG1hdGNoQ2FsZW5kYXJNb250aCA9IC9eKFxkezR9KS0oXGR7Mn0pJC87CiAgICAgIG1hdGNoT3JkaW5hbERhdGUgPSAvXihcZHs0fSktPyhcZHszfSkkLzsKICAgICAgbWF0Y2hXZWVrRGF0ZSA9IC9eKFxkezR9KS0/VyhcZHsyfSktPyhcZHsxfSk/JC87CiAgICAgIG1hdGNoQ2FsZW5kYXJEYXRlID0gL14oXGR7NH0pLT8oXGR7Mn0pLT8oXGR7Mn0pJC87CiAgICAgIHV0Y09mZnNldCA9IC8oW1orXC1dKT8oXGR7Mn0pPzo/KFxkezJ9KT8kLzsKICAgICAgbWF0Y2hIb3VycyA9IC9eKFxkezJ9KShcLlxkKyk/Ly5zb3VyY2UgKyB1dGNPZmZzZXQuc291cmNlOwogICAgICBtYXRjaEhvdXJzTWludXRlcyA9IC9eKFxkezJ9KTo/KFxkezJ9KShcLlxkKyk/Ly5zb3VyY2UgKyB1dGNPZmZzZXQuc291cmNlOwogICAgICBtYXRjaEhvdXJzTWludXRlc1NlY29uZHMgPSAvXihcZHsyfSk6PyhcZHsyfSk6PyhcZHsyfSkoXC5cZCspPy8uc291cmNlICsgdXRjT2Zmc2V0LnNvdXJjZTsKICAgICAgaXNvODYwMUVycm9yTWVzc2FnZSA9ICJJbnZhbGlkIElTTyA4NjAxIGRhdGUuIjsKICAgICAgSnVsaWFuRGF0ZS5mcm9tR3JlZ29yaWFuRGF0ZSA9IGZ1bmN0aW9uKGRhdGUsIHJlc3VsdCkgewogICAgICAgIGlmICghKGRhdGUgaW5zdGFuY2VvZiBHcmVnb3JpYW5EYXRlX2RlZmF1bHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZGF0ZSBtdXN0IGJlIGEgdmFsaWQgR3JlZ29yaWFuRGF0ZS4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgY29tcG9uZW50cyA9IGNvbXB1dGVKdWxpYW5EYXRlQ29tcG9uZW50cygKICAgICAgICAgIGRhdGUueWVhciwKICAgICAgICAgIGRhdGUubW9udGgsCiAgICAgICAgICBkYXRlLmRheSwKICAgICAgICAgIGRhdGUuaG91ciwKICAgICAgICAgIGRhdGUubWludXRlLAogICAgICAgICAgZGF0ZS5zZWNvbmQsCiAgICAgICAgICBkYXRlLm1pbGxpc2Vjb25kCiAgICAgICAgKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IEp1bGlhbkRhdGUoY29tcG9uZW50c1swXSwgY29tcG9uZW50c1sxXSwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVVRDKTsKICAgICAgICB9CiAgICAgICAgc2V0Q29tcG9uZW50cyhjb21wb25lbnRzWzBdLCBjb21wb25lbnRzWzFdLCByZXN1bHQpOwogICAgICAgIGNvbnZlcnRVdGNUb1RhaShyZXN1bHQpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUuZnJvbURhdGUgPSBmdW5jdGlvbihkYXRlLCByZXN1bHQpIHsKICAgICAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkgfHwgaXNOYU4oZGF0ZS5nZXRUaW1lKCkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZGF0ZSBtdXN0IGJlIGEgdmFsaWQgSmF2YVNjcmlwdCBEYXRlLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBjb21wb25lbnRzID0gY29tcHV0ZUp1bGlhbkRhdGVDb21wb25lbnRzKAogICAgICAgICAgZGF0ZS5nZXRVVENGdWxsWWVhcigpLAogICAgICAgICAgZGF0ZS5nZXRVVENNb250aCgpICsgMSwKICAgICAgICAgIGRhdGUuZ2V0VVRDRGF0ZSgpLAogICAgICAgICAgZGF0ZS5nZXRVVENIb3VycygpLAogICAgICAgICAgZGF0ZS5nZXRVVENNaW51dGVzKCksCiAgICAgICAgICBkYXRlLmdldFVUQ1NlY29uZHMoKSwKICAgICAgICAgIGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCkKICAgICAgICApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgSnVsaWFuRGF0ZShjb21wb25lbnRzWzBdLCBjb21wb25lbnRzWzFdLCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5VVEMpOwogICAgICAgIH0KICAgICAgICBzZXRDb21wb25lbnRzKGNvbXBvbmVudHNbMF0sIGNvbXBvbmVudHNbMV0sIHJlc3VsdCk7CiAgICAgICAgY29udmVydFV0Y1RvVGFpKHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS5mcm9tSXNvODYwMSA9IGZ1bmN0aW9uKGlzbzg2MDFTdHJpbmcsIHJlc3VsdCkgewogICAgICAgIGlmICh0eXBlb2YgaXNvODYwMVN0cmluZyAhPT0gInN0cmluZyIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KGlzbzg2MDFFcnJvck1lc3NhZ2UpOwogICAgICAgIH0KICAgICAgICBpc284NjAxU3RyaW5nID0gaXNvODYwMVN0cmluZy5yZXBsYWNlKCIsIiwgIi4iKTsKICAgICAgICBsZXQgdG9rZW5zID0gaXNvODYwMVN0cmluZy5zcGxpdCgiVCIpOwogICAgICAgIGxldCB5ZWFyOwogICAgICAgIGxldCBtb250aCA9IDE7CiAgICAgICAgbGV0IGRheSA9IDE7CiAgICAgICAgbGV0IGhvdXIgPSAwOwogICAgICAgIGxldCBtaW51dGUgPSAwOwogICAgICAgIGxldCBzZWNvbmQgPSAwOwogICAgICAgIGxldCBtaWxsaXNlY29uZCA9IDA7CiAgICAgICAgY29uc3QgZGF0ZSA9IHRva2Vuc1swXTsKICAgICAgICBjb25zdCB0aW1lID0gdG9rZW5zWzFdOwogICAgICAgIGxldCB0bXAyOwogICAgICAgIGxldCBpbkxlYXBZZWFyOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGRhdGUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdChpc284NjAxRXJyb3JNZXNzYWdlKTsKICAgICAgICB9CiAgICAgICAgbGV0IGRhc2hDb3VudDsKICAgICAgICB0b2tlbnMgPSBkYXRlLm1hdGNoKG1hdGNoQ2FsZW5kYXJEYXRlKTsKICAgICAgICBpZiAodG9rZW5zICE9PSBudWxsKSB7CiAgICAgICAgICBkYXNoQ291bnQgPSBkYXRlLnNwbGl0KCItIikubGVuZ3RoIC0gMTsKICAgICAgICAgIGlmIChkYXNoQ291bnQgPiAwICYmIGRhc2hDb3VudCAhPT0gMikgewogICAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdChpc284NjAxRXJyb3JNZXNzYWdlKTsKICAgICAgICAgIH0KICAgICAgICAgIHllYXIgPSArdG9rZW5zWzFdOwogICAgICAgICAgbW9udGggPSArdG9rZW5zWzJdOwogICAgICAgICAgZGF5ID0gK3Rva2Vuc1szXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdG9rZW5zID0gZGF0ZS5tYXRjaChtYXRjaENhbGVuZGFyTW9udGgpOwogICAgICAgICAgaWYgKHRva2VucyAhPT0gbnVsbCkgewogICAgICAgICAgICB5ZWFyID0gK3Rva2Vuc1sxXTsKICAgICAgICAgICAgbW9udGggPSArdG9rZW5zWzJdOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdG9rZW5zID0gZGF0ZS5tYXRjaChtYXRjaENhbGVuZGFyWWVhcik7CiAgICAgICAgICAgIGlmICh0b2tlbnMgIT09IG51bGwpIHsKICAgICAgICAgICAgICB5ZWFyID0gK3Rva2Vuc1sxXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBsZXQgZGF5T2ZZZWFyOwogICAgICAgICAgICAgIHRva2VucyA9IGRhdGUubWF0Y2gobWF0Y2hPcmRpbmFsRGF0ZSk7CiAgICAgICAgICAgICAgaWYgKHRva2VucyAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgeWVhciA9ICt0b2tlbnNbMV07CiAgICAgICAgICAgICAgICBkYXlPZlllYXIgPSArdG9rZW5zWzJdOwogICAgICAgICAgICAgICAgaW5MZWFwWWVhciA9IGlzTGVhcFllYXJfZGVmYXVsdCh5ZWFyKTsKICAgICAgICAgICAgICAgIGlmIChkYXlPZlllYXIgPCAxIHx8IGluTGVhcFllYXIgJiYgZGF5T2ZZZWFyID4gMzY2IHx8ICFpbkxlYXBZZWFyICYmIGRheU9mWWVhciA+IDM2NSkgewogICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdChpc284NjAxRXJyb3JNZXNzYWdlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdG9rZW5zID0gZGF0ZS5tYXRjaChtYXRjaFdlZWtEYXRlKTsKICAgICAgICAgICAgICAgIGlmICh0b2tlbnMgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgeWVhciA9ICt0b2tlbnNbMV07CiAgICAgICAgICAgICAgICAgIGNvbnN0IHdlZWtOdW1iZXIgPSArdG9rZW5zWzJdOwogICAgICAgICAgICAgICAgICBjb25zdCBkYXlPZldlZWsgPSArdG9rZW5zWzNdIHx8IDA7CiAgICAgICAgICAgICAgICAgIGRhc2hDb3VudCA9IGRhdGUuc3BsaXQoIi0iKS5sZW5ndGggLSAxOwogICAgICAgICAgICAgICAgICBpZiAoZGFzaENvdW50ID4gMCAmJiAoIWRlZmluZWRfZGVmYXVsdCh0b2tlbnNbM10pICYmIGRhc2hDb3VudCAhPT0gMSB8fCBkZWZpbmVkX2RlZmF1bHQodG9rZW5zWzNdKSAmJiBkYXNoQ291bnQgIT09IDIpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoaXNvODYwMUVycm9yTWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgY29uc3QgamFudWFyeTQgPSBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCAwLCA0KSk7CiAgICAgICAgICAgICAgICAgIGRheU9mWWVhciA9IHdlZWtOdW1iZXIgKiA3ICsgZGF5T2ZXZWVrIC0gamFudWFyeTQuZ2V0VVRDRGF5KCkgLSAzOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoaXNvODYwMUVycm9yTWVzc2FnZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRtcDIgPSBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCAwLCAxKSk7CiAgICAgICAgICAgICAgdG1wMi5zZXRVVENEYXRlKGRheU9mWWVhcik7CiAgICAgICAgICAgICAgbW9udGggPSB0bXAyLmdldFVUQ01vbnRoKCkgKyAxOwogICAgICAgICAgICAgIGRheSA9IHRtcDIuZ2V0VVRDRGF0ZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGluTGVhcFllYXIgPSBpc0xlYXBZZWFyX2RlZmF1bHQoeWVhcik7CiAgICAgICAgaWYgKG1vbnRoIDwgMSB8fCBtb250aCA+IDEyIHx8IGRheSA8IDEgfHwgKG1vbnRoICE9PSAyIHx8ICFpbkxlYXBZZWFyKSAmJiBkYXkgPiBkYXlzSW5Nb250aFttb250aCAtIDFdIHx8IGluTGVhcFllYXIgJiYgbW9udGggPT09IDIgJiYgZGF5ID4gZGF5c0luTGVhcEZlYnVyYXJ5KSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdChpc284NjAxRXJyb3JNZXNzYWdlKTsKICAgICAgICB9CiAgICAgICAgbGV0IG9mZnNldEluZGV4OwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQodGltZSkpIHsKICAgICAgICAgIHRva2VucyA9IHRpbWUubWF0Y2gobWF0Y2hIb3Vyc01pbnV0ZXNTZWNvbmRzKTsKICAgICAgICAgIGlmICh0b2tlbnMgIT09IG51bGwpIHsKICAgICAgICAgICAgZGFzaENvdW50ID0gdGltZS5zcGxpdCgiOiIpLmxlbmd0aCAtIDE7CiAgICAgICAgICAgIGlmIChkYXNoQ291bnQgPiAwICYmIGRhc2hDb3VudCAhPT0gMiAmJiBkYXNoQ291bnQgIT09IDMpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdChpc284NjAxRXJyb3JNZXNzYWdlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBob3VyID0gK3Rva2Vuc1sxXTsKICAgICAgICAgICAgbWludXRlID0gK3Rva2Vuc1syXTsKICAgICAgICAgICAgc2Vjb25kID0gK3Rva2Vuc1szXTsKICAgICAgICAgICAgbWlsbGlzZWNvbmQgPSArKHRva2Vuc1s0XSB8fCAwKSAqIDFlMzsKICAgICAgICAgICAgb2Zmc2V0SW5kZXggPSA1OwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdG9rZW5zID0gdGltZS5tYXRjaChtYXRjaEhvdXJzTWludXRlcyk7CiAgICAgICAgICAgIGlmICh0b2tlbnMgIT09IG51bGwpIHsKICAgICAgICAgICAgICBkYXNoQ291bnQgPSB0aW1lLnNwbGl0KCI6IikubGVuZ3RoIC0gMTsKICAgICAgICAgICAgICBpZiAoZGFzaENvdW50ID4gMikgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoaXNvODYwMUVycm9yTWVzc2FnZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGhvdXIgPSArdG9rZW5zWzFdOwogICAgICAgICAgICAgIG1pbnV0ZSA9ICt0b2tlbnNbMl07CiAgICAgICAgICAgICAgc2Vjb25kID0gKyh0b2tlbnNbM10gfHwgMCkgKiA2MDsKICAgICAgICAgICAgICBvZmZzZXRJbmRleCA9IDQ7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdG9rZW5zID0gdGltZS5tYXRjaChtYXRjaEhvdXJzKTsKICAgICAgICAgICAgICBpZiAodG9rZW5zICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICBob3VyID0gK3Rva2Vuc1sxXTsKICAgICAgICAgICAgICAgIG1pbnV0ZSA9ICsodG9rZW5zWzJdIHx8IDApICogNjA7CiAgICAgICAgICAgICAgICBvZmZzZXRJbmRleCA9IDM7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KGlzbzg2MDFFcnJvck1lc3NhZ2UpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKG1pbnV0ZSA+PSA2MCB8fCBzZWNvbmQgPj0gNjEgfHwgaG91ciA+IDI0IHx8IGhvdXIgPT09IDI0ICYmIChtaW51dGUgPiAwIHx8IHNlY29uZCA+IDAgfHwgbWlsbGlzZWNvbmQgPiAwKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdChpc284NjAxRXJyb3JNZXNzYWdlKTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHRva2Vuc1tvZmZzZXRJbmRleF07CiAgICAgICAgICBjb25zdCBvZmZzZXRIb3VycyA9ICt0b2tlbnNbb2Zmc2V0SW5kZXggKyAxXTsKICAgICAgICAgIGNvbnN0IG9mZnNldE1pbnV0ZXMgPSArKHRva2Vuc1tvZmZzZXRJbmRleCArIDJdIHx8IDApOwogICAgICAgICAgc3dpdGNoIChvZmZzZXQpIHsKICAgICAgICAgICAgY2FzZSAiKyI6CiAgICAgICAgICAgICAgaG91ciA9IGhvdXIgLSBvZmZzZXRIb3VyczsKICAgICAgICAgICAgICBtaW51dGUgPSBtaW51dGUgLSBvZmZzZXRNaW51dGVzOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICItIjoKICAgICAgICAgICAgICBob3VyID0gaG91ciArIG9mZnNldEhvdXJzOwogICAgICAgICAgICAgIG1pbnV0ZSA9IG1pbnV0ZSArIG9mZnNldE1pbnV0ZXM7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgIloiOgogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIG1pbnV0ZSA9IG1pbnV0ZSArIG5ldyBEYXRlKAogICAgICAgICAgICAgICAgRGF0ZS5VVEMoeWVhciwgbW9udGggLSAxLCBkYXksIGhvdXIsIG1pbnV0ZSkKICAgICAgICAgICAgICApLmdldFRpbWV6b25lT2Zmc2V0KCk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGlzTGVhcFNlY29uZCA9IHNlY29uZCA9PT0gNjA7CiAgICAgICAgaWYgKGlzTGVhcFNlY29uZCkgewogICAgICAgICAgc2Vjb25kLS07CiAgICAgICAgfQogICAgICAgIHdoaWxlIChtaW51dGUgPj0gNjApIHsKICAgICAgICAgIG1pbnV0ZSAtPSA2MDsKICAgICAgICAgIGhvdXIrKzsKICAgICAgICB9CiAgICAgICAgd2hpbGUgKGhvdXIgPj0gMjQpIHsKICAgICAgICAgIGhvdXIgLT0gMjQ7CiAgICAgICAgICBkYXkrKzsKICAgICAgICB9CiAgICAgICAgdG1wMiA9IGluTGVhcFllYXIgJiYgbW9udGggPT09IDIgPyBkYXlzSW5MZWFwRmVidXJhcnkgOiBkYXlzSW5Nb250aFttb250aCAtIDFdOwogICAgICAgIHdoaWxlIChkYXkgPiB0bXAyKSB7CiAgICAgICAgICBkYXkgLT0gdG1wMjsKICAgICAgICAgIG1vbnRoKys7CiAgICAgICAgICBpZiAobW9udGggPiAxMikgewogICAgICAgICAgICBtb250aCAtPSAxMjsKICAgICAgICAgICAgeWVhcisrOwogICAgICAgICAgfQogICAgICAgICAgdG1wMiA9IGluTGVhcFllYXIgJiYgbW9udGggPT09IDIgPyBkYXlzSW5MZWFwRmVidXJhcnkgOiBkYXlzSW5Nb250aFttb250aCAtIDFdOwogICAgICAgIH0KICAgICAgICB3aGlsZSAobWludXRlIDwgMCkgewogICAgICAgICAgbWludXRlICs9IDYwOwogICAgICAgICAgaG91ci0tOwogICAgICAgIH0KICAgICAgICB3aGlsZSAoaG91ciA8IDApIHsKICAgICAgICAgIGhvdXIgKz0gMjQ7CiAgICAgICAgICBkYXktLTsKICAgICAgICB9CiAgICAgICAgd2hpbGUgKGRheSA8IDEpIHsKICAgICAgICAgIG1vbnRoLS07CiAgICAgICAgICBpZiAobW9udGggPCAxKSB7CiAgICAgICAgICAgIG1vbnRoICs9IDEyOwogICAgICAgICAgICB5ZWFyLS07CiAgICAgICAgICB9CiAgICAgICAgICB0bXAyID0gaW5MZWFwWWVhciAmJiBtb250aCA9PT0gMiA/IGRheXNJbkxlYXBGZWJ1cmFyeSA6IGRheXNJbk1vbnRoW21vbnRoIC0gMV07CiAgICAgICAgICBkYXkgKz0gdG1wMjsKICAgICAgICB9CiAgICAgICAgY29uc3QgY29tcG9uZW50cyA9IGNvbXB1dGVKdWxpYW5EYXRlQ29tcG9uZW50cygKICAgICAgICAgIHllYXIsCiAgICAgICAgICBtb250aCwKICAgICAgICAgIGRheSwKICAgICAgICAgIGhvdXIsCiAgICAgICAgICBtaW51dGUsCiAgICAgICAgICBzZWNvbmQsCiAgICAgICAgICBtaWxsaXNlY29uZAogICAgICAgICk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEp1bGlhbkRhdGUoY29tcG9uZW50c1swXSwgY29tcG9uZW50c1sxXSwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVVRDKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc2V0Q29tcG9uZW50cyhjb21wb25lbnRzWzBdLCBjb21wb25lbnRzWzFdLCByZXN1bHQpOwogICAgICAgICAgY29udmVydFV0Y1RvVGFpKHJlc3VsdCk7CiAgICAgICAgfQogICAgICAgIGlmIChpc0xlYXBTZWNvbmQpIHsKICAgICAgICAgIEp1bGlhbkRhdGUuYWRkU2Vjb25kcyhyZXN1bHQsIDEsIHJlc3VsdCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUubm93ID0gZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIEp1bGlhbkRhdGUuZnJvbURhdGUoLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCksIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIHRvR3JlZ29yaWFuRGF0ZVNjcmF0Y2ggPSBuZXcgSnVsaWFuRGF0ZSgwLCAwLCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpOwogICAgICBKdWxpYW5EYXRlLnRvR3JlZ29yaWFuRGF0ZSA9IGZ1bmN0aW9uKGp1bGlhbkRhdGUsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGp1bGlhbkRhdGUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgianVsaWFuRGF0ZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgbGV0IGlzTGVhcFNlY29uZCA9IGZhbHNlOwogICAgICAgIGxldCB0aGlzVXRjID0gY29udmVydFRhaVRvVXRjKGp1bGlhbkRhdGUsIHRvR3JlZ29yaWFuRGF0ZVNjcmF0Y2gpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHRoaXNVdGMpKSB7CiAgICAgICAgICBKdWxpYW5EYXRlLmFkZFNlY29uZHMoanVsaWFuRGF0ZSwgLTEsIHRvR3JlZ29yaWFuRGF0ZVNjcmF0Y2gpOwogICAgICAgICAgdGhpc1V0YyA9IGNvbnZlcnRUYWlUb1V0Yyh0b0dyZWdvcmlhbkRhdGVTY3JhdGNoLCB0b0dyZWdvcmlhbkRhdGVTY3JhdGNoKTsKICAgICAgICAgIGlzTGVhcFNlY29uZCA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGxldCBqdWxpYW5EYXlOdW1iZXIgPSB0aGlzVXRjLmRheU51bWJlcjsKICAgICAgICBjb25zdCBzZWNvbmRzT2ZEYXkgPSB0aGlzVXRjLnNlY29uZHNPZkRheTsKICAgICAgICBpZiAoc2Vjb25kc09mRGF5ID49IDQzMjAwKSB7CiAgICAgICAgICBqdWxpYW5EYXlOdW1iZXIgKz0gMTsKICAgICAgICB9CiAgICAgICAgbGV0IEwgPSBqdWxpYW5EYXlOdW1iZXIgKyA2ODU2OSB8IDA7CiAgICAgICAgY29uc3QgTiA9IDQgKiBMIC8gMTQ2MDk3IHwgMDsKICAgICAgICBMID0gTCAtICgoMTQ2MDk3ICogTiArIDMpIC8gNCB8IDApIHwgMDsKICAgICAgICBjb25zdCBJID0gNGUzICogKEwgKyAxKSAvIDE0NjEwMDEgfCAwOwogICAgICAgIEwgPSBMIC0gKDE0NjEgKiBJIC8gNCB8IDApICsgMzEgfCAwOwogICAgICAgIGNvbnN0IEogPSA4MCAqIEwgLyAyNDQ3IHwgMDsKICAgICAgICBjb25zdCBkYXkgPSBMIC0gKDI0NDcgKiBKIC8gODAgfCAwKSB8IDA7CiAgICAgICAgTCA9IEogLyAxMSB8IDA7CiAgICAgICAgY29uc3QgbW9udGggPSBKICsgMiAtIDEyICogTCB8IDA7CiAgICAgICAgY29uc3QgeWVhciA9IDEwMCAqIChOIC0gNDkpICsgSSArIEwgfCAwOwogICAgICAgIGxldCBob3VyID0gc2Vjb25kc09mRGF5IC8gVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX0hPVVIgfCAwOwogICAgICAgIGxldCByZW1haW5pbmdTZWNvbmRzID0gc2Vjb25kc09mRGF5IC0gaG91ciAqIFRpbWVDb25zdGFudHNfZGVmYXVsdC5TRUNPTkRTX1BFUl9IT1VSOwogICAgICAgIGNvbnN0IG1pbnV0ZSA9IHJlbWFpbmluZ1NlY29uZHMgLyBUaW1lQ29uc3RhbnRzX2RlZmF1bHQuU0VDT05EU19QRVJfTUlOVVRFIHwgMDsKICAgICAgICByZW1haW5pbmdTZWNvbmRzID0gcmVtYWluaW5nU2Vjb25kcyAtIG1pbnV0ZSAqIFRpbWVDb25zdGFudHNfZGVmYXVsdC5TRUNPTkRTX1BFUl9NSU5VVEU7CiAgICAgICAgbGV0IHNlY29uZCA9IHJlbWFpbmluZ1NlY29uZHMgfCAwOwogICAgICAgIGNvbnN0IG1pbGxpc2Vjb25kID0gKHJlbWFpbmluZ1NlY29uZHMgLSBzZWNvbmQpIC8gVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX01JTExJU0VDT05EOwogICAgICAgIGhvdXIgKz0gMTI7CiAgICAgICAgaWYgKGhvdXIgPiAyMykgewogICAgICAgICAgaG91ciAtPSAyNDsKICAgICAgICB9CiAgICAgICAgaWYgKGlzTGVhcFNlY29uZCkgewogICAgICAgICAgc2Vjb25kICs9IDE7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgR3JlZ29yaWFuRGF0ZV9kZWZhdWx0KAogICAgICAgICAgICB5ZWFyLAogICAgICAgICAgICBtb250aCwKICAgICAgICAgICAgZGF5LAogICAgICAgICAgICBob3VyLAogICAgICAgICAgICBtaW51dGUsCiAgICAgICAgICAgIHNlY29uZCwKICAgICAgICAgICAgbWlsbGlzZWNvbmQsCiAgICAgICAgICAgIGlzTGVhcFNlY29uZAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnllYXIgPSB5ZWFyOwogICAgICAgIHJlc3VsdC5tb250aCA9IG1vbnRoOwogICAgICAgIHJlc3VsdC5kYXkgPSBkYXk7CiAgICAgICAgcmVzdWx0LmhvdXIgPSBob3VyOwogICAgICAgIHJlc3VsdC5taW51dGUgPSBtaW51dGU7CiAgICAgICAgcmVzdWx0LnNlY29uZCA9IHNlY29uZDsKICAgICAgICByZXN1bHQubWlsbGlzZWNvbmQgPSBtaWxsaXNlY29uZDsKICAgICAgICByZXN1bHQuaXNMZWFwU2Vjb25kID0gaXNMZWFwU2Vjb25kOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUudG9EYXRlID0gZnVuY3Rpb24oanVsaWFuRGF0ZSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGp1bGlhbkRhdGUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgianVsaWFuRGF0ZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZ0RhdGUgPSBKdWxpYW5EYXRlLnRvR3JlZ29yaWFuRGF0ZShqdWxpYW5EYXRlLCBncmVnb3JpYW5EYXRlU2NyYXRjaCk7CiAgICAgICAgbGV0IHNlY29uZCA9IGdEYXRlLnNlY29uZDsKICAgICAgICBpZiAoZ0RhdGUuaXNMZWFwU2Vjb25kKSB7CiAgICAgICAgICBzZWNvbmQgLT0gMTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKAogICAgICAgICAgRGF0ZS5VVEMoCiAgICAgICAgICAgIGdEYXRlLnllYXIsCiAgICAgICAgICAgIGdEYXRlLm1vbnRoIC0gMSwKICAgICAgICAgICAgZ0RhdGUuZGF5LAogICAgICAgICAgICBnRGF0ZS5ob3VyLAogICAgICAgICAgICBnRGF0ZS5taW51dGUsCiAgICAgICAgICAgIHNlY29uZCwKICAgICAgICAgICAgZ0RhdGUubWlsbGlzZWNvbmQKICAgICAgICAgICkKICAgICAgICApOwogICAgICB9OwogICAgICBKdWxpYW5EYXRlLnRvSXNvODYwMSA9IGZ1bmN0aW9uKGp1bGlhbkRhdGUsIHByZWNpc2lvbikgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGp1bGlhbkRhdGUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgianVsaWFuRGF0ZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZ0RhdGUgPSBKdWxpYW5EYXRlLnRvR3JlZ29yaWFuRGF0ZShqdWxpYW5EYXRlLCBncmVnb3JpYW5EYXRlU2NyYXRjaCk7CiAgICAgICAgbGV0IHllYXIgPSBnRGF0ZS55ZWFyOwogICAgICAgIGxldCBtb250aCA9IGdEYXRlLm1vbnRoOwogICAgICAgIGxldCBkYXkgPSBnRGF0ZS5kYXk7CiAgICAgICAgbGV0IGhvdXIgPSBnRGF0ZS5ob3VyOwogICAgICAgIGNvbnN0IG1pbnV0ZSA9IGdEYXRlLm1pbnV0ZTsKICAgICAgICBjb25zdCBzZWNvbmQgPSBnRGF0ZS5zZWNvbmQ7CiAgICAgICAgY29uc3QgbWlsbGlzZWNvbmQgPSBnRGF0ZS5taWxsaXNlY29uZDsKICAgICAgICBpZiAoeWVhciA9PT0gMWU0ICYmIG1vbnRoID09PSAxICYmIGRheSA9PT0gMSAmJiBob3VyID09PSAwICYmIG1pbnV0ZSA9PT0gMCAmJiBzZWNvbmQgPT09IDAgJiYgbWlsbGlzZWNvbmQgPT09IDApIHsKICAgICAgICAgIHllYXIgPSA5OTk5OwogICAgICAgICAgbW9udGggPSAxMjsKICAgICAgICAgIGRheSA9IDMxOwogICAgICAgICAgaG91ciA9IDI0OwogICAgICAgIH0KICAgICAgICBsZXQgbWlsbGlzZWNvbmRTdHI7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocHJlY2lzaW9uKSAmJiBtaWxsaXNlY29uZCAhPT0gMCkgewogICAgICAgICAgbWlsbGlzZWNvbmRTdHIgPSAobWlsbGlzZWNvbmQgKiAwLjAxKS50b1N0cmluZygpLnJlcGxhY2UoIi4iLCAiIik7CiAgICAgICAgICByZXR1cm4gYCR7eWVhci50b1N0cmluZygpLnBhZFN0YXJ0KDQsICIwIil9LSR7bW9udGgudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAiMCIpfS0ke2RheS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICIwIil9VCR7aG91ci50b1N0cmluZygpLnBhZFN0YXJ0KDIsICIwIil9OiR7bWludXRlLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgIjAiKX06JHtzZWNvbmQudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAiMCIpfS4ke21pbGxpc2Vjb25kU3RyfVpgOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwcmVjaXNpb24pIHx8IHByZWNpc2lvbiA9PT0gMCkgewogICAgICAgICAgcmV0dXJuIGAke3llYXIudG9TdHJpbmcoKS5wYWRTdGFydCg0LCAiMCIpfS0ke21vbnRoLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgIjAiKX0tJHtkYXkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAiMCIpfVQke2hvdXIudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAiMCIpfToke21pbnV0ZS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICIwIil9OiR7c2Vjb25kLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgIjAiKX1aYDsKICAgICAgICB9CiAgICAgICAgbWlsbGlzZWNvbmRTdHIgPSAobWlsbGlzZWNvbmQgKiAwLjAxKS50b0ZpeGVkKHByZWNpc2lvbikucmVwbGFjZSgiLiIsICIiKS5zbGljZSgwLCBwcmVjaXNpb24pOwogICAgICAgIHJldHVybiBgJHt5ZWFyLnRvU3RyaW5nKCkucGFkU3RhcnQoNCwgIjAiKX0tJHttb250aC50b1N0cmluZygpLnBhZFN0YXJ0KDIsICIwIil9LSR7ZGF5LnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgIjAiKX1UJHtob3VyLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgIjAiKX06JHttaW51dGUudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAiMCIpfToke3NlY29uZC50b1N0cmluZygpLnBhZFN0YXJ0KDIsICIwIil9LiR7bWlsbGlzZWNvbmRTdHJ9WmA7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUuY2xvbmUgPSBmdW5jdGlvbihqdWxpYW5EYXRlLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChqdWxpYW5EYXRlKSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBKdWxpYW5EYXRlKAogICAgICAgICAgICBqdWxpYW5EYXRlLmRheU51bWJlciwKICAgICAgICAgICAganVsaWFuRGF0ZS5zZWNvbmRzT2ZEYXksCiAgICAgICAgICAgIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LmRheU51bWJlciA9IGp1bGlhbkRhdGUuZGF5TnVtYmVyOwogICAgICAgIHJlc3VsdC5zZWNvbmRzT2ZEYXkgPSBqdWxpYW5EYXRlLnNlY29uZHNPZkRheTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBKdWxpYW5EYXRlLmNvbXBhcmUgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGxlZnQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibGVmdCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmlnaHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmlnaHQgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGp1bGlhbkRheU51bWJlckRpZmZlcmVuY2UgPSBsZWZ0LmRheU51bWJlciAtIHJpZ2h0LmRheU51bWJlcjsKICAgICAgICBpZiAoanVsaWFuRGF5TnVtYmVyRGlmZmVyZW5jZSAhPT0gMCkgewogICAgICAgICAgcmV0dXJuIGp1bGlhbkRheU51bWJlckRpZmZlcmVuY2U7CiAgICAgICAgfQogICAgICAgIHJldHVybiBsZWZ0LnNlY29uZHNPZkRheSAtIHJpZ2h0LnNlY29uZHNPZkRheTsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS5lcXVhbHMgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBsZWZ0LmRheU51bWJlciA9PT0gcmlnaHQuZGF5TnVtYmVyICYmIGxlZnQuc2Vjb25kc09mRGF5ID09PSByaWdodC5zZWNvbmRzT2ZEYXk7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBlcHNpbG9uKSB7CiAgICAgICAgZXBzaWxvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVwc2lsb24sIDApOwogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBNYXRoLmFicyhKdWxpYW5EYXRlLnNlY29uZHNEaWZmZXJlbmNlKGxlZnQsIHJpZ2h0KSkgPD0gZXBzaWxvbjsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS50b3RhbERheXMgPSBmdW5jdGlvbihqdWxpYW5EYXRlKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoanVsaWFuRGF0ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJqdWxpYW5EYXRlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4ganVsaWFuRGF0ZS5kYXlOdW1iZXIgKyBqdWxpYW5EYXRlLnNlY29uZHNPZkRheSAvIFRpbWVDb25zdGFudHNfZGVmYXVsdC5TRUNPTkRTX1BFUl9EQVk7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUuc2Vjb25kc0RpZmZlcmVuY2UgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGxlZnQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibGVmdCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmlnaHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmlnaHQgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGRheURpZmZlcmVuY2UgPSAobGVmdC5kYXlOdW1iZXIgLSByaWdodC5kYXlOdW1iZXIpICogVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX0RBWTsKICAgICAgICByZXR1cm4gZGF5RGlmZmVyZW5jZSArIChsZWZ0LnNlY29uZHNPZkRheSAtIHJpZ2h0LnNlY29uZHNPZkRheSk7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUuZGF5c0RpZmZlcmVuY2UgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGxlZnQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibGVmdCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmlnaHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmlnaHQgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGRheURpZmZlcmVuY2UgPSBsZWZ0LmRheU51bWJlciAtIHJpZ2h0LmRheU51bWJlcjsKICAgICAgICBjb25zdCBzZWNvbmREaWZmZXJlbmNlID0gKGxlZnQuc2Vjb25kc09mRGF5IC0gcmlnaHQuc2Vjb25kc09mRGF5KSAvIFRpbWVDb25zdGFudHNfZGVmYXVsdC5TRUNPTkRTX1BFUl9EQVk7CiAgICAgICAgcmV0dXJuIGRheURpZmZlcmVuY2UgKyBzZWNvbmREaWZmZXJlbmNlOwogICAgICB9OwogICAgICBKdWxpYW5EYXRlLmNvbXB1dGVUYWlNaW51c1V0YyA9IGZ1bmN0aW9uKGp1bGlhbkRhdGUpIHsKICAgICAgICBiaW5hcnlTZWFyY2hTY3JhdGNoTGVhcFNlY29uZC5qdWxpYW5EYXRlID0ganVsaWFuRGF0ZTsKICAgICAgICBjb25zdCBsZWFwU2Vjb25kcyA9IEp1bGlhbkRhdGUubGVhcFNlY29uZHM7CiAgICAgICAgbGV0IGluZGV4ID0gYmluYXJ5U2VhcmNoX2RlZmF1bHQoCiAgICAgICAgICBsZWFwU2Vjb25kcywKICAgICAgICAgIGJpbmFyeVNlYXJjaFNjcmF0Y2hMZWFwU2Vjb25kLAogICAgICAgICAgY29tcGFyZUxlYXBTZWNvbmREYXRlcwogICAgICAgICk7CiAgICAgICAgaWYgKGluZGV4IDwgMCkgewogICAgICAgICAgaW5kZXggPSB+aW5kZXg7CiAgICAgICAgICAtLWluZGV4OwogICAgICAgICAgaWYgKGluZGV4IDwgMCkgewogICAgICAgICAgICBpbmRleCA9IDA7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBsZWFwU2Vjb25kc1tpbmRleF0ub2Zmc2V0OwogICAgICB9OwogICAgICBKdWxpYW5EYXRlLmFkZFNlY29uZHMgPSBmdW5jdGlvbihqdWxpYW5EYXRlLCBzZWNvbmRzLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChqdWxpYW5EYXRlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImp1bGlhbkRhdGUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHNlY29uZHMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgic2Vjb25kcyBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInJlc3VsdCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNldENvbXBvbmVudHMoCiAgICAgICAgICBqdWxpYW5EYXRlLmRheU51bWJlciwKICAgICAgICAgIGp1bGlhbkRhdGUuc2Vjb25kc09mRGF5ICsgc2Vjb25kcywKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUuYWRkTWludXRlcyA9IGZ1bmN0aW9uKGp1bGlhbkRhdGUsIG1pbnV0ZXMsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGp1bGlhbkRhdGUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgianVsaWFuRGF0ZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQobWludXRlcykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJtaW51dGVzIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmVzdWx0IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBuZXdTZWNvbmRzT2ZEYXkgPSBqdWxpYW5EYXRlLnNlY29uZHNPZkRheSArIG1pbnV0ZXMgKiBUaW1lQ29uc3RhbnRzX2RlZmF1bHQuU0VDT05EU19QRVJfTUlOVVRFOwogICAgICAgIHJldHVybiBzZXRDb21wb25lbnRzKGp1bGlhbkRhdGUuZGF5TnVtYmVyLCBuZXdTZWNvbmRzT2ZEYXksIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUuYWRkSG91cnMgPSBmdW5jdGlvbihqdWxpYW5EYXRlLCBob3VycywgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoanVsaWFuRGF0ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJqdWxpYW5EYXRlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChob3VycykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJob3VycyBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInJlc3VsdCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbmV3U2Vjb25kc09mRGF5ID0ganVsaWFuRGF0ZS5zZWNvbmRzT2ZEYXkgKyBob3VycyAqIFRpbWVDb25zdGFudHNfZGVmYXVsdC5TRUNPTkRTX1BFUl9IT1VSOwogICAgICAgIHJldHVybiBzZXRDb21wb25lbnRzKGp1bGlhbkRhdGUuZGF5TnVtYmVyLCBuZXdTZWNvbmRzT2ZEYXksIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUuYWRkRGF5cyA9IGZ1bmN0aW9uKGp1bGlhbkRhdGUsIGRheXMsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGp1bGlhbkRhdGUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgianVsaWFuRGF0ZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZGF5cykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJkYXlzIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmVzdWx0IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBuZXdKdWxpYW5EYXlOdW1iZXIgPSBqdWxpYW5EYXRlLmRheU51bWJlciArIGRheXM7CiAgICAgICAgcmV0dXJuIHNldENvbXBvbmVudHMobmV3SnVsaWFuRGF5TnVtYmVyLCBqdWxpYW5EYXRlLnNlY29uZHNPZkRheSwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS5sZXNzVGhhbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIEp1bGlhbkRhdGUuY29tcGFyZShsZWZ0LCByaWdodCkgPCAwOwogICAgICB9OwogICAgICBKdWxpYW5EYXRlLmxlc3NUaGFuT3JFcXVhbHMgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIHJldHVybiBKdWxpYW5EYXRlLmNvbXBhcmUobGVmdCwgcmlnaHQpIDw9IDA7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUuZ3JlYXRlclRoYW4gPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIHJldHVybiBKdWxpYW5EYXRlLmNvbXBhcmUobGVmdCwgcmlnaHQpID4gMDsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS5ncmVhdGVyVGhhbk9yRXF1YWxzID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICByZXR1cm4gSnVsaWFuRGF0ZS5jb21wYXJlKGxlZnQsIHJpZ2h0KSA+PSAwOwogICAgICB9OwogICAgICBKdWxpYW5EYXRlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIHJldHVybiBKdWxpYW5EYXRlLmNsb25lKHRoaXMsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIEp1bGlhbkRhdGUuZXF1YWxzKHRoaXMsIHJpZ2h0KTsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS5wcm90b3R5cGUuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKHJpZ2h0LCBlcHNpbG9uKSB7CiAgICAgICAgcmV0dXJuIEp1bGlhbkRhdGUuZXF1YWxzRXBzaWxvbih0aGlzLCByaWdodCwgZXBzaWxvbik7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIEp1bGlhbkRhdGUudG9Jc284NjAxKHRoaXMpOwogICAgICB9OwogICAgICBKdWxpYW5EYXRlLmxlYXBTZWNvbmRzID0gWwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ0MTMxNywgNDMyMTAsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDEwKSwKICAgICAgICAvLyBKYW51YXJ5IDEsIDE5NzIgMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDQxNDk5LCA0MzIxMSwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMTEpLAogICAgICAgIC8vIEp1bHkgMSwgMTk3MiAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NDE2ODMsIDQzMjEyLCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAxMiksCiAgICAgICAgLy8gSmFudWFyeSAxLCAxOTczIDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ0MjA0OCwgNDMyMTMsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDEzKSwKICAgICAgICAvLyBKYW51YXJ5IDEsIDE5NzQgMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDQyNDEzLCA0MzIxNCwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMTQpLAogICAgICAgIC8vIEphbnVhcnkgMSwgMTk3NSAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NDI3NzgsIDQzMjE1LCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAxNSksCiAgICAgICAgLy8gSmFudWFyeSAxLCAxOTc2IDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ0MzE0NCwgNDMyMTYsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDE2KSwKICAgICAgICAvLyBKYW51YXJ5IDEsIDE5NzcgMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDQzNTA5LCA0MzIxNywgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMTcpLAogICAgICAgIC8vIEphbnVhcnkgMSwgMTk3OCAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NDM4NzQsIDQzMjE4LCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAxOCksCiAgICAgICAgLy8gSmFudWFyeSAxLCAxOTc5IDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ0NDIzOSwgNDMyMTksIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDE5KSwKICAgICAgICAvLyBKYW51YXJ5IDEsIDE5ODAgMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDQ0Nzg2LCA0MzIyMCwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMjApLAogICAgICAgIC8vIEp1bHkgMSwgMTk4MSAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NDUxNTEsIDQzMjIxLCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAyMSksCiAgICAgICAgLy8gSnVseSAxLCAxOTgyIDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ0NTUxNiwgNDMyMjIsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDIyKSwKICAgICAgICAvLyBKdWx5IDEsIDE5ODMgMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDQ2MjQ3LCA0MzIyMywgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMjMpLAogICAgICAgIC8vIEp1bHkgMSwgMTk4NSAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NDcxNjEsIDQzMjI0LCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAyNCksCiAgICAgICAgLy8gSmFudWFyeSAxLCAxOTg4IDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ0Nzg5MiwgNDMyMjUsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDI1KSwKICAgICAgICAvLyBKYW51YXJ5IDEsIDE5OTAgMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDQ4MjU3LCA0MzIyNiwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMjYpLAogICAgICAgIC8vIEphbnVhcnkgMSwgMTk5MSAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NDg4MDQsIDQzMjI3LCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAyNyksCiAgICAgICAgLy8gSnVseSAxLCAxOTkyIDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ0OTE2OSwgNDMyMjgsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDI4KSwKICAgICAgICAvLyBKdWx5IDEsIDE5OTMgMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDQ5NTM0LCA0MzIyOSwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMjkpLAogICAgICAgIC8vIEp1bHkgMSwgMTk5NCAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NTAwODMsIDQzMjMwLCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAzMCksCiAgICAgICAgLy8gSmFudWFyeSAxLCAxOTk2IDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ1MDYzMCwgNDMyMzEsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDMxKSwKICAgICAgICAvLyBKdWx5IDEsIDE5OTcgMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDUxMTc5LCA0MzIzMiwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMzIpLAogICAgICAgIC8vIEphbnVhcnkgMSwgMTk5OSAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NTM3MzYsIDQzMjMzLCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAzMyksCiAgICAgICAgLy8gSmFudWFyeSAxLCAyMDA2IDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ1NDgzMiwgNDMyMzQsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDM0KSwKICAgICAgICAvLyBKYW51YXJ5IDEsIDIwMDkgMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDU2MTA5LCA0MzIzNSwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMzUpLAogICAgICAgIC8vIEp1bHkgMSwgMjAxMiAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NTcyMDQsIDQzMjM2LCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAzNiksCiAgICAgICAgLy8gSnVseSAxLCAyMDE1IDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ1Nzc1NCwgNDMyMzcsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDM3KQogICAgICAgIC8vIEphbnVhcnkgMSwgMjAxNyAwMDowMDowMCBVVEMKICAgICAgXTsKICAgICAgSnVsaWFuRGF0ZV9kZWZhdWx0ID0gSnVsaWFuRGF0ZTsKICAgIH0KICB9KTsKCiAgLy8gbm9kZV9tb2R1bGVzL3VyaWpzL3NyYy9wdW55Y29kZS5qcwogIHZhciByZXF1aXJlX3B1bnljb2RlID0gX19jb21tb25KUyh7CiAgICAibm9kZV9tb2R1bGVzL3VyaWpzL3NyYy9wdW55Y29kZS5qcyIoZXhwb3J0czIsIG1vZHVsZSkgewogICAgICAvKiEgaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlIHYxLjQuMCBieSBAbWF0aGlhcyAqLwogICAgICAoZnVuY3Rpb24ocm9vdCkgewogICAgICAgIHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzMiA9PSAib2JqZWN0IiAmJiBleHBvcnRzMiAmJiAhZXhwb3J0czIubm9kZVR5cGUgJiYgZXhwb3J0czI7CiAgICAgICAgdmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICJvYmplY3QiICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTsKICAgICAgICB2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gIm9iamVjdCIgJiYgZ2xvYmFsOwogICAgICAgIGlmIChmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fCBmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCB8fCBmcmVlR2xvYmFsLnNlbGYgPT09IGZyZWVHbG9iYWwpIHsKICAgICAgICAgIHJvb3QgPSBmcmVlR2xvYmFsOwogICAgICAgIH0KICAgICAgICB2YXIgcHVueWNvZGUsIG1heEludCA9IDIxNDc0ODM2NDcsIGJhc2UgPSAzNiwgdE1pbiA9IDEsIHRNYXggPSAyNiwgc2tldyA9IDM4LCBkYW1wID0gNzAwLCBpbml0aWFsQmlhcyA9IDcyLCBpbml0aWFsTiA9IDEyOCwgZGVsaW1pdGVyID0gIi0iLCByZWdleFB1bnljb2RlID0gL154bi0tLywgcmVnZXhOb25BU0NJSSA9IC9bXlx4MjAtXHg3RV0vLCByZWdleFNlcGFyYXRvcnMgPSAvW1x4MkVcdTMwMDJcdUZGMEVcdUZGNjFdL2csIGVycm9ycyA9IHsKICAgICAgICAgICJvdmVyZmxvdyI6ICJPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2VzcyIsCiAgICAgICAgICAibm90LWJhc2ljIjogIklsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludCkiLAogICAgICAgICAgImludmFsaWQtaW5wdXQiOiAiSW52YWxpZCBpbnB1dCIKICAgICAgICB9LCBiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW4sIGZsb29yID0gTWF0aC5mbG9vciwgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSwga2V5OwogICAgICAgIGZ1bmN0aW9uIGVycm9yKHR5cGUpIHsKICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGVycm9yc1t0eXBlXSk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIG1hcChhcnJheSwgZm4pIHsKICAgICAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7CiAgICAgICAgICB2YXIgcmVzdWx0ID0gW107CiAgICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHsKICAgICAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBmbihhcnJheVtsZW5ndGhdKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIG1hcERvbWFpbihzdHJpbmcsIGZuKSB7CiAgICAgICAgICB2YXIgcGFydHMgPSBzdHJpbmcuc3BsaXQoIkAiKTsKICAgICAgICAgIHZhciByZXN1bHQgPSAiIjsKICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgIHJlc3VsdCA9IHBhcnRzWzBdICsgIkAiOwogICAgICAgICAgICBzdHJpbmcgPSBwYXJ0c1sxXTsKICAgICAgICAgIH0KICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4U2VwYXJhdG9ycywgIi4iKTsKICAgICAgICAgIHZhciBsYWJlbHMgPSBzdHJpbmcuc3BsaXQoIi4iKTsKICAgICAgICAgIHZhciBlbmNvZGVkID0gbWFwKGxhYmVscywgZm4pLmpvaW4oIi4iKTsKICAgICAgICAgIHJldHVybiByZXN1bHQgKyBlbmNvZGVkOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykgewogICAgICAgICAgdmFyIG91dHB1dCA9IFtdLCBjb3VudGVyID0gMCwgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aCwgdmFsdWUsIGV4dHJhOwogICAgICAgICAgd2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHsKICAgICAgICAgICAgdmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspOwogICAgICAgICAgICBpZiAodmFsdWUgPj0gNTUyOTYgJiYgdmFsdWUgPD0gNTYzMTkgJiYgY291bnRlciA8IGxlbmd0aCkgewogICAgICAgICAgICAgIGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTsKICAgICAgICAgICAgICBpZiAoKGV4dHJhICYgNjQ1MTIpID09IDU2MzIwKSB7CiAgICAgICAgICAgICAgICBvdXRwdXQucHVzaCgoKHZhbHVlICYgMTAyMykgPDwgMTApICsgKGV4dHJhICYgMTAyMykgKyA2NTUzNik7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTsKICAgICAgICAgICAgICAgIGNvdW50ZXItLTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgb3V0cHV0LnB1c2godmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gb3V0cHV0OwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7CiAgICAgICAgICByZXR1cm4gbWFwKGFycmF5LCBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICB2YXIgb3V0cHV0ID0gIiI7CiAgICAgICAgICAgIGlmICh2YWx1ZSA+IDY1NTM1KSB7CiAgICAgICAgICAgICAgdmFsdWUgLT0gNjU1MzY7CiAgICAgICAgICAgICAgb3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAxMDIzIHwgNTUyOTYpOwogICAgICAgICAgICAgIHZhbHVlID0gNTYzMjAgfCB2YWx1ZSAmIDEwMjM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgb3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7CiAgICAgICAgICB9KS5qb2luKCIiKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gYmFzaWNUb0RpZ2l0KGNvZGVQb2ludCkgewogICAgICAgICAgaWYgKGNvZGVQb2ludCAtIDQ4IDwgMTApIHsKICAgICAgICAgICAgcmV0dXJuIGNvZGVQb2ludCAtIDIyOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGNvZGVQb2ludCAtIDY1IDwgMjYpIHsKICAgICAgICAgICAgcmV0dXJuIGNvZGVQb2ludCAtIDY1OwogICAgICAgICAgfQogICAgICAgICAgaWYgKGNvZGVQb2ludCAtIDk3IDwgMjYpIHsKICAgICAgICAgICAgcmV0dXJuIGNvZGVQb2ludCAtIDk3OwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGJhc2U7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGRpZ2l0VG9CYXNpYyhkaWdpdCwgZmxhZykgewogICAgICAgICAgcmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KSAtICgoZmxhZyAhPSAwKSA8PCA1KTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gYWRhcHQoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7CiAgICAgICAgICB2YXIgayA9IDA7CiAgICAgICAgICBkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxOwogICAgICAgICAgZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpOwogICAgICAgICAgZm9yICg7IGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMTsgayArPSBiYXNlKSB7CiAgICAgICAgICAgIGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBkZWNvZGUzKGlucHV0KSB7CiAgICAgICAgICB2YXIgb3V0cHV0ID0gW10sIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoLCBvdXQsIGkgPSAwLCBuID0gaW5pdGlhbE4sIGJpYXMgPSBpbml0aWFsQmlhcywgYmFzaWMsIGosIGluZGV4LCBvbGRpLCB3LCBrLCBkaWdpdCwgdCwgYmFzZU1pbnVzVDsKICAgICAgICAgIGJhc2ljID0gaW5wdXQubGFzdEluZGV4T2YoZGVsaW1pdGVyKTsKICAgICAgICAgIGlmIChiYXNpYyA8IDApIHsKICAgICAgICAgICAgYmFzaWMgPSAwOwogICAgICAgICAgfQogICAgICAgICAgZm9yIChqID0gMDsgaiA8IGJhc2ljOyArK2opIHsKICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQoaikgPj0gMTI4KSB7CiAgICAgICAgICAgICAgZXJyb3IoIm5vdC1iYXNpYyIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG91dHB1dC5wdXNoKGlucHV0LmNoYXJDb2RlQXQoaikpOwogICAgICAgICAgfQogICAgICAgICAgZm9yIChpbmRleCA9IGJhc2ljID4gMCA/IGJhc2ljICsgMSA6IDA7IGluZGV4IDwgaW5wdXRMZW5ndGg7ICkgewogICAgICAgICAgICBmb3IgKG9sZGkgPSBpLCB3ID0gMSwgayA9IGJhc2U7IDsgayArPSBiYXNlKSB7CiAgICAgICAgICAgICAgaWYgKGluZGV4ID49IGlucHV0TGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBlcnJvcigiaW52YWxpZC1pbnB1dCIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBkaWdpdCA9IGJhc2ljVG9EaWdpdChpbnB1dC5jaGFyQ29kZUF0KGluZGV4KyspKTsKICAgICAgICAgICAgICBpZiAoZGlnaXQgPj0gYmFzZSB8fCBkaWdpdCA+IGZsb29yKChtYXhJbnQgLSBpKSAvIHcpKSB7CiAgICAgICAgICAgICAgICBlcnJvcigib3ZlcmZsb3ciKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaSArPSBkaWdpdCAqIHc7CiAgICAgICAgICAgICAgdCA9IGsgPD0gYmlhcyA/IHRNaW4gOiBrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzOwogICAgICAgICAgICAgIGlmIChkaWdpdCA8IHQpIHsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBiYXNlTWludXNUID0gYmFzZSAtIHQ7CiAgICAgICAgICAgICAgaWYgKHcgPiBmbG9vcihtYXhJbnQgLyBiYXNlTWludXNUKSkgewogICAgICAgICAgICAgICAgZXJyb3IoIm92ZXJmbG93Iik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHcgKj0gYmFzZU1pbnVzVDsKICAgICAgICAgICAgfQogICAgICAgICAgICBvdXQgPSBvdXRwdXQubGVuZ3RoICsgMTsKICAgICAgICAgICAgYmlhcyA9IGFkYXB0KGkgLSBvbGRpLCBvdXQsIG9sZGkgPT0gMCk7CiAgICAgICAgICAgIGlmIChmbG9vcihpIC8gb3V0KSA+IG1heEludCAtIG4pIHsKICAgICAgICAgICAgICBlcnJvcigib3ZlcmZsb3ciKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBuICs9IGZsb29yKGkgLyBvdXQpOwogICAgICAgICAgICBpICU9IG91dDsKICAgICAgICAgICAgb3V0cHV0LnNwbGljZShpKyssIDAsIG4pOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHVjczJlbmNvZGUob3V0cHV0KTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7CiAgICAgICAgICB2YXIgbiwgZGVsdGEsIGhhbmRsZWRDUENvdW50LCBiYXNpY0xlbmd0aCwgYmlhcywgaiwgbSwgcSwgaywgdCwgY3VycmVudFZhbHVlLCBvdXRwdXQgPSBbXSwgaW5wdXRMZW5ndGgsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgYmFzZU1pbnVzVCwgcU1pbnVzVDsKICAgICAgICAgIGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7CiAgICAgICAgICBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDsKICAgICAgICAgIG4gPSBpbml0aWFsTjsKICAgICAgICAgIGRlbHRhID0gMDsKICAgICAgICAgIGJpYXMgPSBpbml0aWFsQmlhczsKICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7CiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdOwogICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlIDwgMTI4KSB7CiAgICAgICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGN1cnJlbnRWYWx1ZSkpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDsKICAgICAgICAgIGlmIChiYXNpY0xlbmd0aCkgewogICAgICAgICAgICBvdXRwdXQucHVzaChkZWxpbWl0ZXIpOwogICAgICAgICAgfQogICAgICAgICAgd2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHsKICAgICAgICAgICAgZm9yIChtID0gbWF4SW50LCBqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHsKICAgICAgICAgICAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTsKICAgICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlID49IG4gJiYgY3VycmVudFZhbHVlIDwgbSkgewogICAgICAgICAgICAgICAgbSA9IGN1cnJlbnRWYWx1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxOwogICAgICAgICAgICBpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkgewogICAgICAgICAgICAgIGVycm9yKCJvdmVyZmxvdyIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGRlbHRhICs9IChtIC0gbikgKiBoYW5kbGVkQ1BDb3VudFBsdXNPbmU7CiAgICAgICAgICAgIG4gPSBtOwogICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikgewogICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdOwogICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHsKICAgICAgICAgICAgICAgIGVycm9yKCJvdmVyZmxvdyIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlID09IG4pIHsKICAgICAgICAgICAgICAgIGZvciAocSA9IGRlbHRhLCBrID0gYmFzZTsgOyBrICs9IGJhc2UpIHsKICAgICAgICAgICAgICAgICAgdCA9IGsgPD0gYmlhcyA/IHRNaW4gOiBrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzOwogICAgICAgICAgICAgICAgICBpZiAocSA8IHQpIHsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBxTWludXNUID0gcSAtIHQ7CiAgICAgICAgICAgICAgICAgIGJhc2VNaW51c1QgPSBiYXNlIC0gdDsKICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goCiAgICAgICAgICAgICAgICAgICAgc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyh0ICsgcU1pbnVzVCAlIGJhc2VNaW51c1QsIDApKQogICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICBxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxLCAwKSkpOwogICAgICAgICAgICAgICAgYmlhcyA9IGFkYXB0KGRlbHRhLCBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsIGhhbmRsZWRDUENvdW50ID09IGJhc2ljTGVuZ3RoKTsKICAgICAgICAgICAgICAgIGRlbHRhID0gMDsKICAgICAgICAgICAgICAgICsraGFuZGxlZENQQ291bnQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICsrZGVsdGE7CiAgICAgICAgICAgICsrbjsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBvdXRwdXQuam9pbigiIik7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIHRvVW5pY29kZShpbnB1dCkgewogICAgICAgICAgcmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7CiAgICAgICAgICAgIHJldHVybiByZWdleFB1bnljb2RlLnRlc3Qoc3RyaW5nKSA/IGRlY29kZTMoc3RyaW5nLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpIDogc3RyaW5nOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIHRvQVNDSUkoaW5wdXQpIHsKICAgICAgICAgIHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykgewogICAgICAgICAgICByZXR1cm4gcmVnZXhOb25BU0NJSS50ZXN0KHN0cmluZykgPyAieG4tLSIgKyBlbmNvZGUoc3RyaW5nKSA6IHN0cmluZzsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBwdW55Y29kZSA9IHsKICAgICAgICAgIC8qKgogICAgICAgICAgICogQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IFB1bnljb2RlLmpzIHZlcnNpb24gbnVtYmVyLgogICAgICAgICAgICogQG1lbWJlck9mIHB1bnljb2RlCiAgICAgICAgICAgKiBAdHlwZSBTdHJpbmcKICAgICAgICAgICAqLwogICAgICAgICAgInZlcnNpb24iOiAiMS4zLjIiLAogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBBbiBvYmplY3Qgb2YgbWV0aG9kcyB0byBjb252ZXJ0IGZyb20gSmF2YVNjcmlwdCdzIGludGVybmFsIGNoYXJhY3RlcgogICAgICAgICAgICogcmVwcmVzZW50YXRpb24gKFVDUy0yKSB0byBVbmljb2RlIGNvZGUgcG9pbnRzLCBhbmQgYmFjay4KICAgICAgICAgICAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPgogICAgICAgICAgICogQG1lbWJlck9mIHB1bnljb2RlCiAgICAgICAgICAgKiBAdHlwZSBPYmplY3QKICAgICAgICAgICAqLwogICAgICAgICAgInVjczIiOiB7CiAgICAgICAgICAgICJkZWNvZGUiOiB1Y3MyZGVjb2RlLAogICAgICAgICAgICAiZW5jb2RlIjogdWNzMmVuY29kZQogICAgICAgICAgfSwKICAgICAgICAgICJkZWNvZGUiOiBkZWNvZGUzLAogICAgICAgICAgImVuY29kZSI6IGVuY29kZSwKICAgICAgICAgICJ0b0FTQ0lJIjogdG9BU0NJSSwKICAgICAgICAgICJ0b1VuaWNvZGUiOiB0b1VuaWNvZGUKICAgICAgICB9OwogICAgICAgIGlmICh0eXBlb2YgZGVmaW5lID09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT0gIm9iamVjdCIgJiYgZGVmaW5lLmFtZCkgewogICAgICAgICAgZGVmaW5lKCJwdW55Y29kZSIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gcHVueWNvZGU7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUpIHsKICAgICAgICAgIGlmIChtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cykgewogICAgICAgICAgICBmcmVlTW9kdWxlLmV4cG9ydHMgPSBwdW55Y29kZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZvciAoa2V5IGluIHB1bnljb2RlKSB7CiAgICAgICAgICAgICAgcHVueWNvZGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHB1bnljb2RlW2tleV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJvb3QucHVueWNvZGUgPSBwdW55Y29kZTsKICAgICAgICB9CiAgICAgIH0pKGV4cG9ydHMyKTsKICAgIH0KICB9KTsKCiAgLy8gbm9kZV9tb2R1bGVzL3VyaWpzL3NyYy9JUHY2LmpzCiAgdmFyIHJlcXVpcmVfSVB2NiA9IF9fY29tbW9uSlMoewogICAgIm5vZGVfbW9kdWxlcy91cmlqcy9zcmMvSVB2Ni5qcyIoZXhwb3J0czIsIG1vZHVsZSkgewogICAgICAvKiEKICAgICAgICogVVJJLmpzIC0gTXV0YXRpbmcgVVJMcwogICAgICAgKiBJUHY2IFN1cHBvcnQKICAgICAgICoKICAgICAgICogVmVyc2lvbjogMS4xOS4xMQogICAgICAgKgogICAgICAgKiBBdXRob3I6IFJvZG5leSBSZWhtCiAgICAgICAqIFdlYjogaHR0cDovL21lZGlhbGl6ZS5naXRodWIuaW8vVVJJLmpzLwogICAgICAgKgogICAgICAgKiBMaWNlbnNlZCB1bmRlcgogICAgICAgKiAgIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UKICAgICAgICoKICAgICAgICovCiAgICAgIChmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7CiAgICAgICAgInVzZSBzdHJpY3QiOwogICAgICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSAib2JqZWN0IiAmJiBtb2R1bGUuZXhwb3J0cykgewogICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7CiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQpIHsKICAgICAgICAgIGRlZmluZShmYWN0b3J5KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcm9vdC5JUHY2ID0gZmFjdG9yeShyb290KTsKICAgICAgICB9CiAgICAgIH0pKGV4cG9ydHMyLCBmdW5jdGlvbihyb290KSB7CiAgICAgICAgInVzZSBzdHJpY3QiOwogICAgICAgIHZhciBfSVB2NiA9IHJvb3QgJiYgcm9vdC5JUHY2OwogICAgICAgIGZ1bmN0aW9uIGJlc3RQcmVzZW50YXRpb24oYWRkcmVzcykgewogICAgICAgICAgdmFyIF9hZGRyZXNzID0gYWRkcmVzcy50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgdmFyIHNlZ21lbnRzID0gX2FkZHJlc3Muc3BsaXQoIjoiKTsKICAgICAgICAgIHZhciBsZW5ndGggPSBzZWdtZW50cy5sZW5ndGg7CiAgICAgICAgICB2YXIgdG90YWwgPSA4OwogICAgICAgICAgaWYgKHNlZ21lbnRzWzBdID09PSAiIiAmJiBzZWdtZW50c1sxXSA9PT0gIiIgJiYgc2VnbWVudHNbMl0gPT09ICIiKSB7CiAgICAgICAgICAgIHNlZ21lbnRzLnNoaWZ0KCk7CiAgICAgICAgICAgIHNlZ21lbnRzLnNoaWZ0KCk7CiAgICAgICAgICB9IGVsc2UgaWYgKHNlZ21lbnRzWzBdID09PSAiIiAmJiBzZWdtZW50c1sxXSA9PT0gIiIpIHsKICAgICAgICAgICAgc2VnbWVudHMuc2hpZnQoKTsKICAgICAgICAgIH0gZWxzZSBpZiAoc2VnbWVudHNbbGVuZ3RoIC0gMV0gPT09ICIiICYmIHNlZ21lbnRzW2xlbmd0aCAtIDJdID09PSAiIikgewogICAgICAgICAgICBzZWdtZW50cy5wb3AoKTsKICAgICAgICAgIH0KICAgICAgICAgIGxlbmd0aCA9IHNlZ21lbnRzLmxlbmd0aDsKICAgICAgICAgIGlmIChzZWdtZW50c1tsZW5ndGggLSAxXS5pbmRleE9mKCIuIikgIT09IC0xKSB7CiAgICAgICAgICAgIHRvdGFsID0gNzsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBwb3M7CiAgICAgICAgICBmb3IgKHBvcyA9IDA7IHBvcyA8IGxlbmd0aDsgcG9zKyspIHsKICAgICAgICAgICAgaWYgKHNlZ21lbnRzW3Bvc10gPT09ICIiKSB7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChwb3MgPCB0b3RhbCkgewogICAgICAgICAgICBzZWdtZW50cy5zcGxpY2UocG9zLCAxLCAiMDAwMCIpOwogICAgICAgICAgICB3aGlsZSAoc2VnbWVudHMubGVuZ3RoIDwgdG90YWwpIHsKICAgICAgICAgICAgICBzZWdtZW50cy5zcGxpY2UocG9zLCAwLCAiMDAwMCIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgX3NlZ21lbnRzOwogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3RhbDsgaSsrKSB7CiAgICAgICAgICAgIF9zZWdtZW50cyA9IHNlZ21lbnRzW2ldLnNwbGl0KCIiKTsKICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAzOyBqKyspIHsKICAgICAgICAgICAgICBpZiAoX3NlZ21lbnRzWzBdID09PSAiMCIgJiYgX3NlZ21lbnRzLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgICAgIF9zZWdtZW50cy5zcGxpY2UoMCwgMSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBzZWdtZW50c1tpXSA9IF9zZWdtZW50cy5qb2luKCIiKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBiZXN0ID0gLTE7CiAgICAgICAgICB2YXIgX2Jlc3QgPSAwOwogICAgICAgICAgdmFyIF9jdXJyZW50ID0gMDsKICAgICAgICAgIHZhciBjdXJyZW50ID0gLTE7CiAgICAgICAgICB2YXIgaW56ZXJvZXMgPSBmYWxzZTsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b3RhbDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChpbnplcm9lcykgewogICAgICAgICAgICAgIGlmIChzZWdtZW50c1tpXSA9PT0gIjAiKSB7CiAgICAgICAgICAgICAgICBfY3VycmVudCArPSAxOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpbnplcm9lcyA9IGZhbHNlOwogICAgICAgICAgICAgICAgaWYgKF9jdXJyZW50ID4gX2Jlc3QpIHsKICAgICAgICAgICAgICAgICAgYmVzdCA9IGN1cnJlbnQ7CiAgICAgICAgICAgICAgICAgIF9iZXN0ID0gX2N1cnJlbnQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGlmIChzZWdtZW50c1tpXSA9PT0gIjAiKSB7CiAgICAgICAgICAgICAgICBpbnplcm9lcyA9IHRydWU7CiAgICAgICAgICAgICAgICBjdXJyZW50ID0gaTsKICAgICAgICAgICAgICAgIF9jdXJyZW50ID0gMTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChfY3VycmVudCA+IF9iZXN0KSB7CiAgICAgICAgICAgIGJlc3QgPSBjdXJyZW50OwogICAgICAgICAgICBfYmVzdCA9IF9jdXJyZW50OwogICAgICAgICAgfQogICAgICAgICAgaWYgKF9iZXN0ID4gMSkgewogICAgICAgICAgICBzZWdtZW50cy5zcGxpY2UoYmVzdCwgX2Jlc3QsICIiKTsKICAgICAgICAgIH0KICAgICAgICAgIGxlbmd0aCA9IHNlZ21lbnRzLmxlbmd0aDsKICAgICAgICAgIHZhciByZXN1bHQgPSAiIjsKICAgICAgICAgIGlmIChzZWdtZW50c1swXSA9PT0gIiIpIHsKICAgICAgICAgICAgcmVzdWx0ID0gIjoiOwogICAgICAgICAgfQogICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHJlc3VsdCArPSBzZWdtZW50c1tpXTsKICAgICAgICAgICAgaWYgKGkgPT09IGxlbmd0aCAtIDEpIHsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXN1bHQgKz0gIjoiOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHNlZ21lbnRzW2xlbmd0aCAtIDFdID09PSAiIikgewogICAgICAgICAgICByZXN1bHQgKz0gIjoiOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gbm9Db25mbGljdCgpIHsKICAgICAgICAgIGlmIChyb290LklQdjYgPT09IHRoaXMpIHsKICAgICAgICAgICAgcm9vdC5JUHY2ID0gX0lQdjY7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGJlc3Q6IGJlc3RQcmVzZW50YXRpb24sCiAgICAgICAgICBub0NvbmZsaWN0CiAgICAgICAgfTsKICAgICAgfSk7CiAgICB9CiAgfSk7CgogIC8vIG5vZGVfbW9kdWxlcy91cmlqcy9zcmMvU2Vjb25kTGV2ZWxEb21haW5zLmpzCiAgdmFyIHJlcXVpcmVfU2Vjb25kTGV2ZWxEb21haW5zID0gX19jb21tb25KUyh7CiAgICAibm9kZV9tb2R1bGVzL3VyaWpzL3NyYy9TZWNvbmRMZXZlbERvbWFpbnMuanMiKGV4cG9ydHMyLCBtb2R1bGUpIHsKICAgICAgLyohCiAgICAgICAqIFVSSS5qcyAtIE11dGF0aW5nIFVSTHMKICAgICAgICogU2Vjb25kIExldmVsIERvbWFpbiAoU0xEKSBTdXBwb3J0CiAgICAgICAqCiAgICAgICAqIFZlcnNpb246IDEuMTkuMTEKICAgICAgICoKICAgICAgICogQXV0aG9yOiBSb2RuZXkgUmVobQogICAgICAgKiBXZWI6IGh0dHA6Ly9tZWRpYWxpemUuZ2l0aHViLmlvL1VSSS5qcy8KICAgICAgICoKICAgICAgICogTGljZW5zZWQgdW5kZXIKICAgICAgICogICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlCiAgICAgICAqCiAgICAgICAqLwogICAgICAoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkgewogICAgICAgICJ1c2Ugc3RyaWN0IjsKICAgICAgICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gIm9iamVjdCIgJiYgbW9kdWxlLmV4cG9ydHMpIHsKICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpOwogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSB7CiAgICAgICAgICBkZWZpbmUoZmFjdG9yeSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zID0gZmFjdG9yeShyb290KTsKICAgICAgICB9CiAgICAgIH0pKGV4cG9ydHMyLCBmdW5jdGlvbihyb290KSB7CiAgICAgICAgInVzZSBzdHJpY3QiOwogICAgICAgIHZhciBfU2Vjb25kTGV2ZWxEb21haW5zID0gcm9vdCAmJiByb290LlNlY29uZExldmVsRG9tYWluczsKICAgICAgICB2YXIgU0xEID0gewogICAgICAgICAgLy8gbGlzdCBvZiBrbm93biBTZWNvbmQgTGV2ZWwgRG9tYWlucwogICAgICAgICAgLy8gY29udmVydGVkIGxpc3Qgb2YgU0xEcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9nYXZpbmdtaWxsZXIvc2Vjb25kLWxldmVsLWRvbWFpbnMKICAgICAgICAgIC8vIC0tLS0KICAgICAgICAgIC8vIHB1YmxpY3N1ZmZpeC5vcmcgaXMgbW9yZSBjdXJyZW50IGFuZCBhY3R1YWxseSB1c2VkIGJ5IGEgY291cGxlIG9mIGJyb3dzZXJzIGludGVybmFsbHkuCiAgICAgICAgICAvLyBkb3duc2lkZSBpcyBpdCBhbHNvIGNvbnRhaW5zIGRvbWFpbnMgbGlrZSAiZHluZG5zLm9yZyIgLSB3aGljaCBpcyBmaW5lIGZvciB0aGUgc2VjdXJpdHkKICAgICAgICAgIC8vIGlzc3VlcyBicm93c2VyIGhhdmUgdG8gZGVhbCB3aXRoIChTT1AgZm9yIGNvb2tpZXMsIGV0YykgLSBidXQgaXMgd2F5IG92ZXJib2FyZCBmb3IgVVJJLmpzCiAgICAgICAgICAvLyAtLS0tCiAgICAgICAgICBsaXN0OiB7CiAgICAgICAgICAgICJhYyI6ICIgY29tIGdvdiBtaWwgbmV0IG9yZyAiLAogICAgICAgICAgICAiYWUiOiAiIGFjIGNvIGdvdiBtaWwgbmFtZSBuZXQgb3JnIHBybyBzY2ggIiwKICAgICAgICAgICAgImFmIjogIiBjb20gZWR1IGdvdiBuZXQgb3JnICIsCiAgICAgICAgICAgICJhbCI6ICIgY29tIGVkdSBnb3YgbWlsIG5ldCBvcmcgIiwKICAgICAgICAgICAgImFvIjogIiBjbyBlZCBndiBpdCBvZyBwYiAiLAogICAgICAgICAgICAiYXIiOiAiIGNvbSBlZHUgZ29iIGdvdiBpbnQgbWlsIG5ldCBvcmcgdHVyICIsCiAgICAgICAgICAgICJhdCI6ICIgYWMgY28gZ3Ygb3IgIiwKICAgICAgICAgICAgImF1IjogIiBhc24gY29tIGNzaXJvIGVkdSBnb3YgaWQgbmV0IG9yZyAiLAogICAgICAgICAgICAiYmEiOiAiIGNvIGNvbSBlZHUgZ292IG1pbCBuZXQgb3JnIHJzIHVuYmkgdW5tbyB1bnNhIHVudHogdW56ZSAiLAogICAgICAgICAgICAiYmIiOiAiIGJpeiBjbyBjb20gZWR1IGdvdiBpbmZvIG5ldCBvcmcgc3RvcmUgdHYgIiwKICAgICAgICAgICAgImJoIjogIiBiaXogY2MgY29tIGVkdSBnb3YgaW5mbyBuZXQgb3JnICIsCiAgICAgICAgICAgICJibiI6ICIgY29tIGVkdSBnb3YgbmV0IG9yZyAiLAogICAgICAgICAgICAiYm8iOiAiIGNvbSBlZHUgZ29iIGdvdiBpbnQgbWlsIG5ldCBvcmcgdHYgIiwKICAgICAgICAgICAgImJyIjogIiBhZG0gYWR2IGFnciBhbSBhcnEgYXJ0IGF0byBiIGJpbyBibG9nIGJtZCBjaW0gY25nIGNudCBjb20gY29vcCBlY24gZWR1IGVuZyBlc3AgZXRjIGV0aSBmYXIgZmxvZyBmbSBmbmQgZm90IGZzdCBnMTIgZ2dmIGdvdiBpbWIgaW5kIGluZiBqb3IganVzIGxlbCBtYXQgbWVkIG1pbCBtdXMgbmV0IG5vbSBub3QgbnRyIG9kbyBvcmcgcHBnIHBybyBwc2MgcHNpIHFzbCByZWMgc2xnIHNydiB0bXAgdHJkIHR1ciB0diB2ZXQgdmxvZyB3aWtpIHpsZyAiLAogICAgICAgICAgICAiYnMiOiAiIGNvbSBlZHUgZ292IG5ldCBvcmcgIiwKICAgICAgICAgICAgImJ6IjogIiBkdSBldCBvbSBvdiByZyAiLAogICAgICAgICAgICAiY2EiOiAiIGFiIGJjIG1iIG5iIG5mIG5sIG5zIG50IG51IG9uIHBlIHFjIHNrIHlrICIsCiAgICAgICAgICAgICJjayI6ICIgYml6IGNvIGVkdSBnZW4gZ292IGluZm8gbmV0IG9yZyAiLAogICAgICAgICAgICAiY24iOiAiIGFjIGFoIGJqIGNvbSBjcSBlZHUgZmogZ2QgZ292IGdzIGd4IGd6IGhhIGhiIGhlIGhpIGhsIGhuIGpsIGpzIGp4IGxuIG1pbCBuZXQgbm0gbnggb3JnIHFoIHNjIHNkIHNoIHNuIHN4IHRqIHR3IHhqIHh6IHluIHpqICIsCiAgICAgICAgICAgICJjbyI6ICIgY29tIGVkdSBnb3YgbWlsIG5ldCBub20gb3JnICIsCiAgICAgICAgICAgICJjciI6ICIgYWMgYyBjbyBlZCBmaSBnbyBvciBzYSAiLAogICAgICAgICAgICAiY3kiOiAiIGFjIGJpeiBjb20gZWtsb2dlcyBnb3YgbHRkIG5hbWUgbmV0IG9yZyBwYXJsaWFtZW50IHByZXNzIHBybyB0bSAiLAogICAgICAgICAgICAiZG8iOiAiIGFydCBjb20gZWR1IGdvYiBnb3YgbWlsIG5ldCBvcmcgc2xkIHdlYiAiLAogICAgICAgICAgICAiZHoiOiAiIGFydCBhc3NvIGNvbSBlZHUgZ292IG5ldCBvcmcgcG9sICIsCiAgICAgICAgICAgICJlYyI6ICIgY29tIGVkdSBmaW4gZ292IGluZm8gbWVkIG1pbCBuZXQgb3JnIHBybyAiLAogICAgICAgICAgICAiZWciOiAiIGNvbSBlZHUgZXVuIGdvdiBtaWwgbmFtZSBuZXQgb3JnIHNjaSAiLAogICAgICAgICAgICAiZXIiOiAiIGNvbSBlZHUgZ292IGluZCBtaWwgbmV0IG9yZyByb2NoZXN0IHcgIiwKICAgICAgICAgICAgImVzIjogIiBjb20gZWR1IGdvYiBub20gb3JnICIsCiAgICAgICAgICAgICJldCI6ICIgYml6IGNvbSBlZHUgZ292IGluZm8gbmFtZSBuZXQgb3JnICIsCiAgICAgICAgICAgICJmaiI6ICIgYWMgYml6IGNvbSBpbmZvIG1pbCBuYW1lIG5ldCBvcmcgcHJvICIsCiAgICAgICAgICAgICJmayI6ICIgYWMgY28gZ292IG5ldCBub20gb3JnICIsCiAgICAgICAgICAgICJmciI6ICIgYXNzbyBjb20gZiBnb3V2IG5vbSBwcmQgcHJlc3NlIHRtICIsCiAgICAgICAgICAgICJnZyI6ICIgY28gbmV0IG9yZyAiLAogICAgICAgICAgICAiZ2giOiAiIGNvbSBlZHUgZ292IG1pbCBvcmcgIiwKICAgICAgICAgICAgImduIjogIiBhYyBjb20gZ292IG5ldCBvcmcgIiwKICAgICAgICAgICAgImdyIjogIiBjb20gZWR1IGdvdiBtaWwgbmV0IG9yZyAiLAogICAgICAgICAgICAiZ3QiOiAiIGNvbSBlZHUgZ29iIGluZCBtaWwgbmV0IG9yZyAiLAogICAgICAgICAgICAiZ3UiOiAiIGNvbSBlZHUgZ292IG5ldCBvcmcgIiwKICAgICAgICAgICAgImhrIjogIiBjb20gZWR1IGdvdiBpZHYgbmV0IG9yZyAiLAogICAgICAgICAgICAiaHUiOiAiIDIwMDAgYWdyYXIgYm9sdCBjYXNpbm8gY2l0eSBjbyBlcm90aWNhIGVyb3Rpa2EgZmlsbSBmb3J1bSBnYW1lcyBob3RlbCBpbmZvIGluZ2F0bGFuIGpvZ2FzeiBrb255dmVsbyBsYWthcyBtZWRpYSBuZXdzIG9yZyBwcml2IHJla2xhbSBzZXggc2hvcCBzcG9ydCBzdWxpIHN6ZXggdG0gdG96c2RlIHV0YXphcyB2aWRlbyAiLAogICAgICAgICAgICAiaWQiOiAiIGFjIGNvIGdvIG1pbCBuZXQgb3Igc2NoIHdlYiAiLAogICAgICAgICAgICAiaWwiOiAiIGFjIGNvIGdvdiBpZGYgazEyIG11bmkgbmV0IG9yZyAiLAogICAgICAgICAgICAiaW4iOiAiIGFjIGNvIGVkdSBlcm5ldCBmaXJtIGdlbiBnb3YgaSBpbmQgbWlsIG5ldCBuaWMgb3JnIHJlcyAiLAogICAgICAgICAgICAiaXEiOiAiIGNvbSBlZHUgZ292IGkgbWlsIG5ldCBvcmcgIiwKICAgICAgICAgICAgImlyIjogIiBhYyBjbyBkbnNzZWMgZ292IGkgaWQgbmV0IG9yZyBzY2ggIiwKICAgICAgICAgICAgIml0IjogIiBlZHUgZ292ICIsCiAgICAgICAgICAgICJqZSI6ICIgY28gbmV0IG9yZyAiLAogICAgICAgICAgICAiam8iOiAiIGNvbSBlZHUgZ292IG1pbCBuYW1lIG5ldCBvcmcgc2NoICIsCiAgICAgICAgICAgICJqcCI6ICIgYWMgYWQgY28gZWQgZ28gZ3IgbGcgbmUgb3IgIiwKICAgICAgICAgICAgImtlIjogIiBhYyBjbyBnbyBpbmZvIG1lIG1vYmkgbmUgb3Igc2MgIiwKICAgICAgICAgICAgImtoIjogIiBjb20gZWR1IGdvdiBtaWwgbmV0IG9yZyBwZXIgIiwKICAgICAgICAgICAgImtpIjogIiBiaXogY29tIGRlIGVkdSBnb3YgaW5mbyBtb2IgbmV0IG9yZyB0ZWwgIiwKICAgICAgICAgICAgImttIjogIiBhc3NvIGNvbSBjb29wIGVkdSBnb3V2IGsgbWVkZWNpbiBtaWwgbm9tIG5vdGFpcmVzIHBoYXJtYWNpZW5zIHByZXNzZSB0bSB2ZXRlcmluYWlyZSAiLAogICAgICAgICAgICAia24iOiAiIGVkdSBnb3YgbmV0IG9yZyAiLAogICAgICAgICAgICAia3IiOiAiIGFjIGJ1c2FuIGNodW5nYnVrIGNodW5nbmFtIGNvIGRhZWd1IGRhZWplb24gZXMgZ2FuZ3dvbiBnbyBnd2FuZ2p1IGd5ZW9uZ2J1ayBneWVvbmdnaSBneWVvbmduYW0gaHMgaW5jaGVvbiBqZWp1IGplb25idWsgamVvbm5hbSBrIGtnIG1pbCBtcyBuZSBvciBwZSByZSBzYyBzZW91bCB1bHNhbiAiLAogICAgICAgICAgICAia3ciOiAiIGNvbSBlZHUgZ292IG5ldCBvcmcgIiwKICAgICAgICAgICAgImt5IjogIiBjb20gZWR1IGdvdiBuZXQgb3JnICIsCiAgICAgICAgICAgICJreiI6ICIgY29tIGVkdSBnb3YgbWlsIG5ldCBvcmcgIiwKICAgICAgICAgICAgImxiIjogIiBjb20gZWR1IGdvdiBuZXQgb3JnICIsCiAgICAgICAgICAgICJsayI6ICIgYXNzbiBjb20gZWR1IGdvdiBncnAgaG90ZWwgaW50IGx0ZCBuZXQgbmdvIG9yZyBzY2ggc29jIHdlYiAiLAogICAgICAgICAgICAibHIiOiAiIGNvbSBlZHUgZ292IG5ldCBvcmcgIiwKICAgICAgICAgICAgImx2IjogIiBhc24gY29tIGNvbmYgZWR1IGdvdiBpZCBtaWwgbmV0IG9yZyAiLAogICAgICAgICAgICAibHkiOiAiIGNvbSBlZHUgZ292IGlkIG1lZCBuZXQgb3JnIHBsYyBzY2ggIiwKICAgICAgICAgICAgIm1hIjogIiBhYyBjbyBnb3YgbSBuZXQgb3JnIHByZXNzICIsCiAgICAgICAgICAgICJtYyI6ICIgYXNzbyB0bSAiLAogICAgICAgICAgICAibWUiOiAiIGFjIGNvIGVkdSBnb3YgaXRzIG5ldCBvcmcgcHJpdiAiLAogICAgICAgICAgICAibWciOiAiIGNvbSBlZHUgZ292IG1pbCBub20gb3JnIHByZCB0bSAiLAogICAgICAgICAgICAibWsiOiAiIGNvbSBlZHUgZ292IGluZiBuYW1lIG5ldCBvcmcgcHJvICIsCiAgICAgICAgICAgICJtbCI6ICIgY29tIGVkdSBnb3YgbmV0IG9yZyBwcmVzc2UgIiwKICAgICAgICAgICAgIm1uIjogIiBlZHUgZ292IG9yZyAiLAogICAgICAgICAgICAibW8iOiAiIGNvbSBlZHUgZ292IG5ldCBvcmcgIiwKICAgICAgICAgICAgIm10IjogIiBjb20gZWR1IGdvdiBuZXQgb3JnICIsCiAgICAgICAgICAgICJtdiI6ICIgYWVybyBiaXogY29tIGNvb3AgZWR1IGdvdiBpbmZvIGludCBtaWwgbXVzZXVtIG5hbWUgbmV0IG9yZyBwcm8gIiwKICAgICAgICAgICAgIm13IjogIiBhYyBjbyBjb20gY29vcCBlZHUgZ292IGludCBtdXNldW0gbmV0IG9yZyAiLAogICAgICAgICAgICAibXgiOiAiIGNvbSBlZHUgZ29iIG5ldCBvcmcgIiwKICAgICAgICAgICAgIm15IjogIiBjb20gZWR1IGdvdiBtaWwgbmFtZSBuZXQgb3JnIHNjaCAiLAogICAgICAgICAgICAibmYiOiAiIGFydHMgY29tIGZpcm0gaW5mbyBuZXQgb3RoZXIgcGVyIHJlYyBzdG9yZSB3ZWIgIiwKICAgICAgICAgICAgIm5nIjogIiBiaXogY29tIGVkdSBnb3YgbWlsIG1vYmkgbmFtZSBuZXQgb3JnIHNjaCAiLAogICAgICAgICAgICAibmkiOiAiIGFjIGNvIGNvbSBlZHUgZ29iIG1pbCBuZXQgbm9tIG9yZyAiLAogICAgICAgICAgICAibnAiOiAiIGNvbSBlZHUgZ292IG1pbCBuZXQgb3JnICIsCiAgICAgICAgICAgICJuciI6ICIgYml6IGNvbSBlZHUgZ292IGluZm8gbmV0IG9yZyAiLAogICAgICAgICAgICAib20iOiAiIGFjIGJpeiBjbyBjb20gZWR1IGdvdiBtZWQgbWlsIG11c2V1bSBuZXQgb3JnIHBybyBzY2ggIiwKICAgICAgICAgICAgInBlIjogIiBjb20gZWR1IGdvYiBtaWwgbmV0IG5vbSBvcmcgc2xkICIsCiAgICAgICAgICAgICJwaCI6ICIgY29tIGVkdSBnb3YgaSBtaWwgbmV0IG5nbyBvcmcgIiwKICAgICAgICAgICAgInBrIjogIiBiaXogY29tIGVkdSBmYW0gZ29iIGdvayBnb24gZ29wIGdvcyBnb3YgbmV0IG9yZyB3ZWIgIiwKICAgICAgICAgICAgInBsIjogIiBhcnQgYmlhbHlzdG9rIGJpeiBjb20gZWR1IGdkYSBnZGFuc2sgZ29yem93IGdvdiBpbmZvIGthdG93aWNlIGtyYWtvdyBsb2R6IGx1YmxpbiBtaWwgbmV0IG5nbyBvbHN6dHluIG9yZyBwb3puYW4gcHdyIHJhZG9tIHNsdXBzayBzemN6ZWNpbiB0b3J1biB3YXJzemF3YSB3YXcgd3JvYyB3cm9jbGF3IHpnb3JhICIsCiAgICAgICAgICAgICJwciI6ICIgYWMgYml6IGNvbSBlZHUgZXN0IGdvdiBpbmZvIGlzbGEgbmFtZSBuZXQgb3JnIHBybyBwcm9mICIsCiAgICAgICAgICAgICJwcyI6ICIgY29tIGVkdSBnb3YgbmV0IG9yZyBwbG8gc2VjICIsCiAgICAgICAgICAgICJwdyI6ICIgYmVsYXUgY28gZWQgZ28gbmUgb3IgIiwKICAgICAgICAgICAgInJvIjogIiBhcnRzIGNvbSBmaXJtIGluZm8gbm9tIG50IG9yZyByZWMgc3RvcmUgdG0gd3d3ICIsCiAgICAgICAgICAgICJycyI6ICIgYWMgY28gZWR1IGdvdiBpbiBvcmcgIiwKICAgICAgICAgICAgInNiIjogIiBjb20gZWR1IGdvdiBuZXQgb3JnICIsCiAgICAgICAgICAgICJzYyI6ICIgY29tIGVkdSBnb3YgbmV0IG9yZyAiLAogICAgICAgICAgICAic2giOiAiIGNvIGNvbSBlZHUgZ292IG5ldCBub20gb3JnICIsCiAgICAgICAgICAgICJzbCI6ICIgY29tIGVkdSBnb3YgbmV0IG9yZyAiLAogICAgICAgICAgICAic3QiOiAiIGNvIGNvbSBjb25zdWxhZG8gZWR1IGVtYmFpeGFkYSBnb3YgbWlsIG5ldCBvcmcgcHJpbmNpcGUgc2FvdG9tZSBzdG9yZSAiLAogICAgICAgICAgICAic3YiOiAiIGNvbSBlZHUgZ29iIG9yZyByZWQgIiwKICAgICAgICAgICAgInN6IjogIiBhYyBjbyBvcmcgIiwKICAgICAgICAgICAgInRyIjogIiBhdiBiYnMgYmVsIGJpeiBjb20gZHIgZWR1IGdlbiBnb3YgaW5mbyBrMTIgbmFtZSBuZXQgb3JnIHBvbCB0ZWwgdHNrIHR2IHdlYiAiLAogICAgICAgICAgICAidHQiOiAiIGFlcm8gYml6IGNhdCBjbyBjb20gY29vcCBlZHUgZ292IGluZm8gaW50IGpvYnMgbWlsIG1vYmkgbXVzZXVtIG5hbWUgbmV0IG9yZyBwcm8gdGVsIHRyYXZlbCAiLAogICAgICAgICAgICAidHciOiAiIGNsdWIgY29tIGViaXogZWR1IGdhbWUgZ292IGlkdiBtaWwgbmV0IG9yZyAiLAogICAgICAgICAgICAibXUiOiAiIGFjIGNvIGNvbSBnb3YgbmV0IG9yIG9yZyAiLAogICAgICAgICAgICAibXoiOiAiIGFjIGNvIGVkdSBnb3Ygb3JnICIsCiAgICAgICAgICAgICJuYSI6ICIgY28gY29tICIsCiAgICAgICAgICAgICJueiI6ICIgYWMgY28gY3JpIGdlZWsgZ2VuIGdvdnQgaGVhbHRoIGl3aSBtYW9yaSBtaWwgbmV0IG9yZyBwYXJsaWFtZW50IHNjaG9vbCAiLAogICAgICAgICAgICAicGEiOiAiIGFibyBhYyBjb20gZWR1IGdvYiBpbmcgbWVkIG5ldCBub20gb3JnIHNsZCAiLAogICAgICAgICAgICAicHQiOiAiIGNvbSBlZHUgZ292IGludCBuZXQgbm9tZSBvcmcgcHVibCAiLAogICAgICAgICAgICAicHkiOiAiIGNvbSBlZHUgZ292IG1pbCBuZXQgb3JnICIsCiAgICAgICAgICAgICJxYSI6ICIgY29tIGVkdSBnb3YgbWlsIG5ldCBvcmcgIiwKICAgICAgICAgICAgInJlIjogIiBhc3NvIGNvbSBub20gIiwKICAgICAgICAgICAgInJ1IjogIiBhYyBhZHlnZXlhIGFsdGFpIGFtdXIgYXJraGFuZ2Vsc2sgYXN0cmFraGFuIGJhc2hraXJpYSBiZWxnb3JvZCBiaXIgYnJ5YW5zayBidXJ5YXRpYSBjYmcgY2hlbCBjaGVseWFiaW5zayBjaGl0YSBjaHVrb3RrYSBjaHV2YXNoaWEgY29tIGRhZ2VzdGFuIGUtYnVyZyBlZHUgZ292IGdyb3pueSBpbnQgaXJrdXRzayBpdmFub3ZvIGl6aGV2c2sgamFyIGpvc2hrYXItb2xhIGthbG15a2lhIGthbHVnYSBrYW1jaGF0a2Ega2FyZWxpYSBrYXphbiBrY2hyIGtlbWVyb3ZvIGtoYWJhcm92c2sga2hha2Fzc2lhIGtodiBraXJvdiBrb2VuaWcga29taSBrb3N0cm9tYSBrcmFub3lhcnNrIGt1YmFuIGt1cmdhbiBrdXJzayBsaXBldHNrIG1hZ2FkYW4gbWFyaSBtYXJpLWVsIG1hcmluZSBtaWwgbW9yZG92aWEgbW9zcmVnIG1zayBtdXJtYW5zayBuYWxjaGlrIG5ldCBubm92IG5vdiBub3Zvc2liaXJzayBuc2sgb21zayBvcmVuYnVyZyBvcmcgb3J5b2wgcGVuemEgcGVybSBwcCBwc2tvdiBwdHogcm5kIHJ5YXphbiBzYWtoYWxpbiBzYW1hcmEgc2FyYXRvdiBzaW1iaXJzayBzbW9sZW5zayBzcGIgc3RhdnJvcG9sIHN0diBzdXJndXQgdGFtYm92IHRhdGFyc3RhbiB0b20gdG9tc2sgdHNhcml0c3luIHRzayB0dWxhIHR1dmEgdHZlciB0eXVtZW4gdWRtIHVkbXVydGlhIHVsYW4tdWRlIHZsYWRpa2F2a2F6IHZsYWRpbWlyIHZsYWRpdm9zdG9rIHZvbGdvZ3JhZCB2b2xvZ2RhIHZvcm9uZXpoIHZybiB2eWF0a2EgeWFrdXRpYSB5YW1hbCB5ZWthdGVyaW5idXJnIHl1emhuby1zYWtoYWxpbnNrICIsCiAgICAgICAgICAgICJydyI6ICIgYWMgY28gY29tIGVkdSBnb3V2IGdvdiBpbnQgbWlsIG5ldCAiLAogICAgICAgICAgICAic2EiOiAiIGNvbSBlZHUgZ292IG1lZCBuZXQgb3JnIHB1YiBzY2ggIiwKICAgICAgICAgICAgInNkIjogIiBjb20gZWR1IGdvdiBpbmZvIG1lZCBuZXQgb3JnIHR2ICIsCiAgICAgICAgICAgICJzZSI6ICIgYSBhYyBiIGJkIGMgZCBlIGYgZyBoIGkgayBsIG0gbiBvIG9yZyBwIHBhcnRpIHBwIHByZXNzIHIgcyB0IHRtIHUgdyB4IHkgeiAiLAogICAgICAgICAgICAic2ciOiAiIGNvbSBlZHUgZ292IGlkbiBuZXQgb3JnIHBlciAiLAogICAgICAgICAgICAic24iOiAiIGFydCBjb20gZWR1IGdvdXYgb3JnIHBlcnNvIHVuaXYgIiwKICAgICAgICAgICAgInN5IjogIiBjb20gZWR1IGdvdiBtaWwgbmV0IG5ld3Mgb3JnICIsCiAgICAgICAgICAgICJ0aCI6ICIgYWMgY28gZ28gaW4gbWkgbmV0IG9yICIsCiAgICAgICAgICAgICJ0aiI6ICIgYWMgYml6IGNvIGNvbSBlZHUgZ28gZ292IGluZm8gaW50IG1pbCBuYW1lIG5ldCBuaWMgb3JnIHRlc3Qgd2ViICIsCiAgICAgICAgICAgICJ0biI6ICIgYWdyaW5ldCBjb20gZGVmZW5zZSBlZHVuZXQgZW5zIGZpbiBnb3YgaW5kIGluZm8gaW50bCBtaW5jb20gbmF0IG5ldCBvcmcgcGVyc28gcm5ydCBybnMgcm51IHRvdXJpc20gIiwKICAgICAgICAgICAgInR6IjogIiBhYyBjbyBnbyBuZSBvciAiLAogICAgICAgICAgICAidWEiOiAiIGJpeiBjaGVya2Fzc3kgY2hlcm5pZ292IGNoZXJub3Z0c3kgY2sgY24gY28gY29tIGNyaW1lYSBjdiBkbiBkbmVwcm9wZXRyb3ZzayBkb25ldHNrIGRwIGVkdSBnb3YgaWYgaW4gaXZhbm8tZnJhbmtpdnNrIGtoIGtoYXJrb3Yga2hlcnNvbiBraG1lbG5pdHNraXkga2lldiBraXJvdm9ncmFkIGttIGtyIGtzIGt2IGxnIGx1Z2Fuc2sgbHV0c2sgbHZpdiBtZSBtayBuZXQgbmlrb2xhZXYgb2Qgb2Rlc3NhIG9yZyBwbCBwb2x0YXZhIHBwIHJvdm5vIHJ2IHNlYmFzdG9wb2wgc3VteSB0ZSB0ZXJub3BpbCB1emhnb3JvZCB2aW5uaWNhIHZuIHphcG9yaXpoemhlIHpoaXRvbWlyIHpwIHp0ICIsCiAgICAgICAgICAgICJ1ZyI6ICIgYWMgY28gZ28gbmUgb3Igb3JnIHNjICIsCiAgICAgICAgICAgICJ1ayI6ICIgYWMgYmwgYnJpdGlzaC1saWJyYXJ5IGNvIGN5bSBnb3YgZ292dCBpY25ldCBqZXQgbGVhIGx0ZCBtZSBtaWwgbW9kIG5hdGlvbmFsLWxpYnJhcnktc2NvdGxhbmQgbmVsIG5ldCBuaHMgbmljIG5scyBvcmcgb3JnbiBwYXJsaWFtZW50IHBsYyBwb2xpY2Ugc2NoIHNjb3Qgc29jICIsCiAgICAgICAgICAgICJ1cyI6ICIgZG5pIGZlZCBpc2Ega2lkcyBuc24gIiwKICAgICAgICAgICAgInV5IjogIiBjb20gZWR1IGd1YiBtaWwgbmV0IG9yZyAiLAogICAgICAgICAgICAidmUiOiAiIGNvIGNvbSBlZHUgZ29iIGluZm8gbWlsIG5ldCBvcmcgd2ViICIsCiAgICAgICAgICAgICJ2aSI6ICIgY28gY29tIGsxMiBuZXQgb3JnICIsCiAgICAgICAgICAgICJ2biI6ICIgYWMgYml6IGNvbSBlZHUgZ292IGhlYWx0aCBpbmZvIGludCBuYW1lIG5ldCBvcmcgcHJvICIsCiAgICAgICAgICAgICJ5ZSI6ICIgY28gY29tIGdvdiBsdGQgbWUgbmV0IG9yZyBwbGMgIiwKICAgICAgICAgICAgInl1IjogIiBhYyBjbyBlZHUgZ292IG9yZyAiLAogICAgICAgICAgICAiemEiOiAiIGFjIGFncmljIGFsdCBib3Vyc2UgY2l0eSBjbyBjeWJlcm5ldCBkYiBlZHUgZ292IGdyb25kYXIgaWFjY2VzcyBpbXQgaW5jYSBsYW5kZXNpZ24gbGF3IG1pbCBuZXQgbmdvIG5pcyBub20gb2xpdmV0dGkgb3JnIHBpeCBzY2hvb2wgdG0gd2ViICIsCiAgICAgICAgICAgICJ6bSI6ICIgYWMgY28gY29tIGVkdSBnb3YgbmV0IG9yZyBzY2ggIiwKICAgICAgICAgICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2VudHJhbE5pYyNTZWNvbmQtbGV2ZWxfZG9tYWlucwogICAgICAgICAgICAiY29tIjogImFyIGJyIGNuIGRlIGV1IGdiIGdyIGh1IGpwbiBrciBubyBxYyBydSBzYSBzZSB1ayB1cyB1eSB6YSAiLAogICAgICAgICAgICAibmV0IjogImdiIGpwIHNlIHVrICIsCiAgICAgICAgICAgICJvcmciOiAiYWUiLAogICAgICAgICAgICAiZGUiOiAiY29tICIKICAgICAgICAgIH0sCiAgICAgICAgICAvLyBnb3JoaWxsIDIwMTMtMTAtMjU6IFVzaW5nIGluZGV4T2YoKSBpbnN0ZWFkIFJlZ2V4cCgpLiBTaWduaWZpY2FudCBib29zdAogICAgICAgICAgLy8gaW4gYm90aCBwZXJmb3JtYW5jZSBhbmQgbWVtb3J5IGZvb3RwcmludC4gTm8gaW5pdGlhbGl6YXRpb24gcmVxdWlyZWQuCiAgICAgICAgICAvLyBodHRwOi8vanNwZXJmLmNvbS91cmktanMtc2xkLXJlZ2V4LXZzLWJpbmFyeS1zZWFyY2gvNAogICAgICAgICAgLy8gRm9sbG93aW5nIG1ldGhvZHMgdXNlIGxhc3RJbmRleE9mKCkgcmF0aGVyIHRoYW4gYXJyYXkuc3BsaXQoKSBpbiBvcmRlcgogICAgICAgICAgLy8gdG8gYXZvaWQgYW55IG1lbW9yeSBhbGxvY2F0aW9ucy4KICAgICAgICAgIGhhczogZnVuY3Rpb24oZG9tYWluKSB7CiAgICAgICAgICAgIHZhciB0bGRPZmZzZXQgPSBkb21haW4ubGFzdEluZGV4T2YoIi4iKTsKICAgICAgICAgICAgaWYgKHRsZE9mZnNldCA8PSAwIHx8IHRsZE9mZnNldCA+PSBkb21haW4ubGVuZ3RoIC0gMSkgewogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgc2xkT2Zmc2V0ID0gZG9tYWluLmxhc3RJbmRleE9mKCIuIiwgdGxkT2Zmc2V0IC0gMSk7CiAgICAgICAgICAgIGlmIChzbGRPZmZzZXQgPD0gMCB8fCBzbGRPZmZzZXQgPj0gdGxkT2Zmc2V0IC0gMSkgewogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgc2xkTGlzdCA9IFNMRC5saXN0W2RvbWFpbi5zbGljZSh0bGRPZmZzZXQgKyAxKV07CiAgICAgICAgICAgIGlmICghc2xkTGlzdCkgewogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gc2xkTGlzdC5pbmRleE9mKCIgIiArIGRvbWFpbi5zbGljZShzbGRPZmZzZXQgKyAxLCB0bGRPZmZzZXQpICsgIiAiKSA+PSAwOwogICAgICAgICAgfSwKICAgICAgICAgIGlzOiBmdW5jdGlvbihkb21haW4pIHsKICAgICAgICAgICAgdmFyIHRsZE9mZnNldCA9IGRvbWFpbi5sYXN0SW5kZXhPZigiLiIpOwogICAgICAgICAgICBpZiAodGxkT2Zmc2V0IDw9IDAgfHwgdGxkT2Zmc2V0ID49IGRvbWFpbi5sZW5ndGggLSAxKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBzbGRPZmZzZXQgPSBkb21haW4ubGFzdEluZGV4T2YoIi4iLCB0bGRPZmZzZXQgLSAxKTsKICAgICAgICAgICAgaWYgKHNsZE9mZnNldCA+PSAwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBzbGRMaXN0ID0gU0xELmxpc3RbZG9tYWluLnNsaWNlKHRsZE9mZnNldCArIDEpXTsKICAgICAgICAgICAgaWYgKCFzbGRMaXN0KSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzbGRMaXN0LmluZGV4T2YoIiAiICsgZG9tYWluLnNsaWNlKDAsIHRsZE9mZnNldCkgKyAiICIpID49IDA7CiAgICAgICAgICB9LAogICAgICAgICAgZ2V0OiBmdW5jdGlvbihkb21haW4pIHsKICAgICAgICAgICAgdmFyIHRsZE9mZnNldCA9IGRvbWFpbi5sYXN0SW5kZXhPZigiLiIpOwogICAgICAgICAgICBpZiAodGxkT2Zmc2V0IDw9IDAgfHwgdGxkT2Zmc2V0ID49IGRvbWFpbi5sZW5ndGggLSAxKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHNsZE9mZnNldCA9IGRvbWFpbi5sYXN0SW5kZXhPZigiLiIsIHRsZE9mZnNldCAtIDEpOwogICAgICAgICAgICBpZiAoc2xkT2Zmc2V0IDw9IDAgfHwgc2xkT2Zmc2V0ID49IHRsZE9mZnNldCAtIDEpIHsKICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgc2xkTGlzdCA9IFNMRC5saXN0W2RvbWFpbi5zbGljZSh0bGRPZmZzZXQgKyAxKV07CiAgICAgICAgICAgIGlmICghc2xkTGlzdCkgewogICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChzbGRMaXN0LmluZGV4T2YoIiAiICsgZG9tYWluLnNsaWNlKHNsZE9mZnNldCArIDEsIHRsZE9mZnNldCkgKyAiICIpIDwgMCkgewogICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBkb21haW4uc2xpY2Uoc2xkT2Zmc2V0ICsgMSk7CiAgICAgICAgICB9LAogICAgICAgICAgbm9Db25mbGljdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmIChyb290LlNlY29uZExldmVsRG9tYWlucyA9PT0gdGhpcykgewogICAgICAgICAgICAgIHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zID0gX1NlY29uZExldmVsRG9tYWluczsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHJldHVybiBTTEQ7CiAgICAgIH0pOwogICAgfQogIH0pOwoKICAvLyBub2RlX21vZHVsZXMvdXJpanMvc3JjL1VSSS5qcwogIHZhciByZXF1aXJlX1VSSSA9IF9fY29tbW9uSlMoewogICAgIm5vZGVfbW9kdWxlcy91cmlqcy9zcmMvVVJJLmpzIihleHBvcnRzMiwgbW9kdWxlKSB7CiAgICAgIC8qIQogICAgICAgKiBVUkkuanMgLSBNdXRhdGluZyBVUkxzCiAgICAgICAqCiAgICAgICAqIFZlcnNpb246IDEuMTkuMTEKICAgICAgICoKICAgICAgICogQXV0aG9yOiBSb2RuZXkgUmVobQogICAgICAgKiBXZWI6IGh0dHA6Ly9tZWRpYWxpemUuZ2l0aHViLmlvL1VSSS5qcy8KICAgICAgICoKICAgICAgICogTGljZW5zZWQgdW5kZXIKICAgICAgICogICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlCiAgICAgICAqCiAgICAgICAqLwogICAgICAoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkgewogICAgICAgICJ1c2Ugc3RyaWN0IjsKICAgICAgICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gIm9iamVjdCIgJiYgbW9kdWxlLmV4cG9ydHMpIHsKICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlX3B1bnljb2RlKCksIHJlcXVpcmVfSVB2NigpLCByZXF1aXJlX1NlY29uZExldmVsRG9tYWlucygpKTsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewogICAgICAgICAgZGVmaW5lKFsiLi9wdW55Y29kZSIsICIuL0lQdjYiLCAiLi9TZWNvbmRMZXZlbERvbWFpbnMiXSwgZmFjdG9yeSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJvb3QuVVJJID0gZmFjdG9yeShyb290LnB1bnljb2RlLCByb290LklQdjYsIHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zLCByb290KTsKICAgICAgICB9CiAgICAgIH0pKGV4cG9ydHMyLCBmdW5jdGlvbihwdW55Y29kZSwgSVB2NiwgU0xELCByb290KSB7CiAgICAgICAgInVzZSBzdHJpY3QiOwogICAgICAgIHZhciBfVVJJID0gcm9vdCAmJiByb290LlVSSTsKICAgICAgICBmdW5jdGlvbiBVUkkodXJsLCBiYXNlKSB7CiAgICAgICAgICB2YXIgX3VybFN1cHBsaWVkID0gYXJndW1lbnRzLmxlbmd0aCA+PSAxOwogICAgICAgICAgdmFyIF9iYXNlU3VwcGxpZWQgPSBhcmd1bWVudHMubGVuZ3RoID49IDI7CiAgICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVVJJKSkgewogICAgICAgICAgICBpZiAoX3VybFN1cHBsaWVkKSB7CiAgICAgICAgICAgICAgaWYgKF9iYXNlU3VwcGxpZWQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVVJJKHVybCwgYmFzZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBuZXcgVVJJKHVybCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG5ldyBVUkkoKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh1cmwgPT09IHZvaWQgMCkgewogICAgICAgICAgICBpZiAoX3VybFN1cHBsaWVkKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigidW5kZWZpbmVkIGlzIG5vdCBhIHZhbGlkIGFyZ3VtZW50IGZvciBVUkkiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodHlwZW9mIGxvY2F0aW9uICE9PSAidW5kZWZpbmVkIikgewogICAgICAgICAgICAgIHVybCA9IGxvY2F0aW9uLmhyZWYgKyAiIjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB1cmwgPSAiIjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKHVybCA9PT0gbnVsbCkgewogICAgICAgICAgICBpZiAoX3VybFN1cHBsaWVkKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigibnVsbCBpcyBub3QgYSB2YWxpZCBhcmd1bWVudCBmb3IgVVJJIik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuaHJlZih1cmwpOwogICAgICAgICAgaWYgKGJhc2UgIT09IHZvaWQgMCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5hYnNvbHV0ZVRvKGJhc2UpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIC9eWzAtOV0rJC8udGVzdCh2YWx1ZSk7CiAgICAgICAgfQogICAgICAgIFVSSS52ZXJzaW9uID0gIjEuMTkuMTEiOwogICAgICAgIHZhciBwID0gVVJJLnByb3RvdHlwZTsKICAgICAgICB2YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKICAgICAgICBmdW5jdGlvbiBlc2NhcGVSZWdFeChzdHJpbmcpIHsKICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvKFsuKis/Xj0hOiR7fSgpfFtcXVwvXFxdKS9nLCAiXFwkMSIpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBnZXRUeXBlKHZhbHVlKSB7CiAgICAgICAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkgewogICAgICAgICAgICByZXR1cm4gIlVuZGVmaW5lZCI7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gU3RyaW5nKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkpLnNsaWNlKDgsIC0xKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gaXNBcnJheShvYmopIHsKICAgICAgICAgIHJldHVybiBnZXRUeXBlKG9iaikgPT09ICJBcnJheSI7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGZpbHRlckFycmF5VmFsdWVzKGRhdGEsIHZhbHVlKSB7CiAgICAgICAgICB2YXIgbG9va3VwID0ge307CiAgICAgICAgICB2YXIgaSwgbGVuZ3RoOwogICAgICAgICAgaWYgKGdldFR5cGUodmFsdWUpID09PSAiUmVnRXhwIikgewogICAgICAgICAgICBsb29rdXAgPSBudWxsOwogICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkgewogICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIGxvb2t1cFt2YWx1ZVtpXV0gPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsb29rdXBbdmFsdWVdID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGRhdGEubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIF9tYXRjaCA9IGxvb2t1cCAmJiBsb29rdXBbZGF0YVtpXV0gIT09IHZvaWQgMCB8fCAhbG9va3VwICYmIHZhbHVlLnRlc3QoZGF0YVtpXSk7CiAgICAgICAgICAgIGlmIChfbWF0Y2gpIHsKICAgICAgICAgICAgICBkYXRhLnNwbGljZShpLCAxKTsKICAgICAgICAgICAgICBsZW5ndGgtLTsKICAgICAgICAgICAgICBpLS07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBkYXRhOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBhcnJheUNvbnRhaW5zKGxpc3QsIHZhbHVlKSB7CiAgICAgICAgICB2YXIgaSwgbGVuZ3RoOwogICAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7CiAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgaWYgKCFhcnJheUNvbnRhaW5zKGxpc3QsIHZhbHVlW2ldKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBfdHlwZSA9IGdldFR5cGUodmFsdWUpOwogICAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gbGlzdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoX3R5cGUgPT09ICJSZWdFeHAiKSB7CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsaXN0W2ldID09PSAic3RyaW5nIiAmJiBsaXN0W2ldLm1hdGNoKHZhbHVlKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKGxpc3RbaV0gPT09IHZhbHVlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gYXJyYXlzRXF1YWwob25lLCB0d28pIHsKICAgICAgICAgIGlmICghaXNBcnJheShvbmUpIHx8ICFpc0FycmF5KHR3bykpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgICAgaWYgKG9uZS5sZW5ndGggIT09IHR3by5sZW5ndGgpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgICAgb25lLnNvcnQoKTsKICAgICAgICAgIHR3by5zb3J0KCk7CiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9uZS5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgaWYgKG9uZVtpXSAhPT0gdHdvW2ldKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gdHJpbVNsYXNoZXModGV4dCkgewogICAgICAgICAgdmFyIHRyaW1fZXhwcmVzc2lvbiA9IC9eXC8rfFwvKyQvZzsKICAgICAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UodHJpbV9leHByZXNzaW9uLCAiIik7CiAgICAgICAgfQogICAgICAgIFVSSS5fcGFydHMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHByb3RvY29sOiBudWxsLAogICAgICAgICAgICB1c2VybmFtZTogbnVsbCwKICAgICAgICAgICAgcGFzc3dvcmQ6IG51bGwsCiAgICAgICAgICAgIGhvc3RuYW1lOiBudWxsLAogICAgICAgICAgICB1cm46IG51bGwsCiAgICAgICAgICAgIHBvcnQ6IG51bGwsCiAgICAgICAgICAgIHBhdGg6IG51bGwsCiAgICAgICAgICAgIHF1ZXJ5OiBudWxsLAogICAgICAgICAgICBmcmFnbWVudDogbnVsbCwKICAgICAgICAgICAgLy8gc3RhdGUKICAgICAgICAgICAgcHJldmVudEludmFsaWRIb3N0bmFtZTogVVJJLnByZXZlbnRJbnZhbGlkSG9zdG5hbWUsCiAgICAgICAgICAgIGR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVyczogVVJJLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywKICAgICAgICAgICAgZXNjYXBlUXVlcnlTcGFjZTogVVJJLmVzY2FwZVF1ZXJ5U3BhY2UKICAgICAgICAgIH07CiAgICAgICAgfTsKICAgICAgICBVUkkucHJldmVudEludmFsaWRIb3N0bmFtZSA9IGZhbHNlOwogICAgICAgIFVSSS5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMgPSBmYWxzZTsKICAgICAgICBVUkkuZXNjYXBlUXVlcnlTcGFjZSA9IHRydWU7CiAgICAgICAgVVJJLnByb3RvY29sX2V4cHJlc3Npb24gPSAvXlthLXpdW2EtejAtOS4rLV0qJC9pOwogICAgICAgIFVSSS5pZG5fZXhwcmVzc2lvbiA9IC9bXmEtejAtOVwuXy1dL2k7CiAgICAgICAgVVJJLnB1bnljb2RlX2V4cHJlc3Npb24gPSAvKHhuLS0pL2k7CiAgICAgICAgVVJJLmlwNF9leHByZXNzaW9uID0gL15cZHsxLDN9XC5cZHsxLDN9XC5cZHsxLDN9XC5cZHsxLDN9JC87CiAgICAgICAgVVJJLmlwNl9leHByZXNzaW9uID0gL15ccyooKChbMC05QS1GYS1mXXsxLDR9Oil7N30oWzAtOUEtRmEtZl17MSw0fXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7Nn0oOlswLTlBLUZhLWZdezEsNH18KCgyNVswLTVdfDJbMC00XVxkfDFcZFxkfFsxLTldP1xkKShcLigyNVswLTVdfDJbMC00XVxkfDFcZFxkfFsxLTldP1xkKSl7M30pfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXs1fSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDJ9KXw6KCgyNVswLTVdfDJbMC00XVxkfDFcZFxkfFsxLTldP1xkKShcLigyNVswLTVdfDJbMC00XVxkfDFcZFxkfFsxLTldP1xkKSl7M30pfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXs0fSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDN9KXwoKDpbMC05QS1GYS1mXXsxLDR9KT86KCgyNVswLTVdfDJbMC00XVxkfDFcZFxkfFsxLTldP1xkKShcLigyNVswLTVdfDJbMC00XVxkfDFcZFxkfFsxLTldP1xkKSl7M30pKXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7M30oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw0fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCwyfTooKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKFwuKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKXszfSkpfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXsyfSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDV9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDN9OigoMjVbMC01XXwyWzAtNF1cZHwxXGRcZHxbMS05XT9cZCkoXC4oMjVbMC01XXwyWzAtNF1cZHwxXGRcZHxbMS05XT9cZCkpezN9KSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezF9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsNn0pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsNH06KCgyNVswLTVdfDJbMC00XVxkfDFcZFxkfFsxLTldP1xkKShcLigyNVswLTVdfDJbMC00XVxkfDFcZFxkfFsxLTldP1xkKSl7M30pKXw6KSl8KDooKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw3fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCw1fTooKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKFwuKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKXszfSkpfDopKSkoJS4rKT9ccyokLzsKICAgICAgICBVUkkuZmluZF91cmlfZXhwcmVzc2lvbiA9IC9cYigoPzpbYS16XVtcdy1dKzooPzpcL3sxLDN9fFthLXowLTklXSl8d3d3XGR7MCwzfVsuXXxbYS16MC05LlwtXStbLl1bYS16XXsyLDR9XC8pKD86W15ccygpPD5dK3xcKChbXlxzKCk8Pl0rfChcKFteXHMoKTw+XStcKSkpKlwpKSsoPzpcKChbXlxzKCk8Pl0rfChcKFteXHMoKTw+XStcKSkpKlwpfFteXHNgISgpXFtcXXt9OzonIi4sPD4/wqvCu+KAnOKAneKAmOKAmV0pKS9pZzsKICAgICAgICBVUkkuZmluZFVyaSA9IHsKICAgICAgICAgIC8vIHZhbGlkICJzY2hlbWU6Ly8iIG9yICJ3d3cuIgogICAgICAgICAgc3RhcnQ6IC9cYig/OihbYS16XVthLXowLTkuKy1dKjpcL1wvKXx3d3dcLikvZ2ksCiAgICAgICAgICAvLyBldmVyeXRoaW5nIHVwIHRvIHRoZSBuZXh0IHdoaXRlc3BhY2UKICAgICAgICAgIGVuZDogL1tcc1xyXG5dfCQvLAogICAgICAgICAgLy8gdHJpbSB0cmFpbGluZyBwdW5jdHVhdGlvbiBjYXB0dXJlZCBieSBlbmQgUmVnRXhwCiAgICAgICAgICB0cmltOiAvW2AhKClcW1xde307OiciLiw8Pj/Cq8K74oCc4oCd4oCe4oCY4oCZXSskLywKICAgICAgICAgIC8vIGJhbGFuY2VkIHBhcmVucyBpbmNsdXNpb24gKCksIFtdLCB7fSwgPD4KICAgICAgICAgIHBhcmVuczogLyhcKFteXCldKlwpfFxbW15cXV0qXF18XHtbXn1dKlx9fDxbXj5dKj4pL2cKICAgICAgICB9OwogICAgICAgIFVSSS5sZWFkaW5nX3doaXRlc3BhY2VfZXhwcmVzc2lvbiA9IC9eW1x4MDAtXHgyMFx1MDBhMFx1MTY4MFx1MjAwMC1cdTIwMGFcdTIwMjhcdTIwMjlcdTIwMmZcdTIwNWZcdTMwMDBcdWZlZmZdKy87CiAgICAgICAgVVJJLmFzY2lpX3RhYl93aGl0ZXNwYWNlID0gL1tcdTAwMDlcdTAwMEFcdTAwMERdKy9nOwogICAgICAgIFVSSS5kZWZhdWx0UG9ydHMgPSB7CiAgICAgICAgICBodHRwOiAiODAiLAogICAgICAgICAgaHR0cHM6ICI0NDMiLAogICAgICAgICAgZnRwOiAiMjEiLAogICAgICAgICAgZ29waGVyOiAiNzAiLAogICAgICAgICAgd3M6ICI4MCIsCiAgICAgICAgICB3c3M6ICI0NDMiCiAgICAgICAgfTsKICAgICAgICBVUkkuaG9zdFByb3RvY29scyA9IFsKICAgICAgICAgICJodHRwIiwKICAgICAgICAgICJodHRwcyIKICAgICAgICBdOwogICAgICAgIFVSSS5pbnZhbGlkX2hvc3RuYW1lX2NoYXJhY3RlcnMgPSAvW15hLXpBLVowLTlcLlwtOl9dLzsKICAgICAgICBVUkkuZG9tQXR0cmlidXRlcyA9IHsKICAgICAgICAgICJhIjogImhyZWYiLAogICAgICAgICAgImJsb2NrcXVvdGUiOiAiY2l0ZSIsCiAgICAgICAgICAibGluayI6ICJocmVmIiwKICAgICAgICAgICJiYXNlIjogImhyZWYiLAogICAgICAgICAgInNjcmlwdCI6ICJzcmMiLAogICAgICAgICAgImZvcm0iOiAiYWN0aW9uIiwKICAgICAgICAgICJpbWciOiAic3JjIiwKICAgICAgICAgICJhcmVhIjogImhyZWYiLAogICAgICAgICAgImlmcmFtZSI6ICJzcmMiLAogICAgICAgICAgImVtYmVkIjogInNyYyIsCiAgICAgICAgICAic291cmNlIjogInNyYyIsCiAgICAgICAgICAidHJhY2siOiAic3JjIiwKICAgICAgICAgICJpbnB1dCI6ICJzcmMiLAogICAgICAgICAgLy8gYnV0IG9ubHkgaWYgdHlwZT0iaW1hZ2UiCiAgICAgICAgICAiYXVkaW8iOiAic3JjIiwKICAgICAgICAgICJ2aWRlbyI6ICJzcmMiCiAgICAgICAgfTsKICAgICAgICBVUkkuZ2V0RG9tQXR0cmlidXRlID0gZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgaWYgKCFub2RlIHx8ICFub2RlLm5vZGVOYW1lKSB7CiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgbm9kZU5hbWUgPSBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICBpZiAobm9kZU5hbWUgPT09ICJpbnB1dCIgJiYgbm9kZS50eXBlICE9PSAiaW1hZ2UiKSB7CiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gVVJJLmRvbUF0dHJpYnV0ZXNbbm9kZU5hbWVdOwogICAgICAgIH07CiAgICAgICAgZnVuY3Rpb24gZXNjYXBlRm9yRHVtYkZpcmVmb3gzNih2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIGVzY2FwZSh2YWx1ZSk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIHN0cmljdEVuY29kZVVSSUNvbXBvbmVudChzdHJpbmcpIHsKICAgICAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5nKS5yZXBsYWNlKC9bIScoKSpdL2csIGVzY2FwZUZvckR1bWJGaXJlZm94MzYpLnJlcGxhY2UoL1wqL2csICIlMkEiKTsKICAgICAgICB9CiAgICAgICAgVVJJLmVuY29kZSA9IHN0cmljdEVuY29kZVVSSUNvbXBvbmVudDsKICAgICAgICBVUkkuZGVjb2RlID0gZGVjb2RlVVJJQ29tcG9uZW50OwogICAgICAgIFVSSS5pc284ODU5ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBVUkkuZW5jb2RlID0gZXNjYXBlOwogICAgICAgICAgVVJJLmRlY29kZSA9IHVuZXNjYXBlOwogICAgICAgIH07CiAgICAgICAgVVJJLnVuaWNvZGUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIFVSSS5lbmNvZGUgPSBzdHJpY3RFbmNvZGVVUklDb21wb25lbnQ7CiAgICAgICAgICBVUkkuZGVjb2RlID0gZGVjb2RlVVJJQ29tcG9uZW50OwogICAgICAgIH07CiAgICAgICAgVVJJLmNoYXJhY3RlcnMgPSB7CiAgICAgICAgICBwYXRobmFtZTogewogICAgICAgICAgICBlbmNvZGU6IHsKICAgICAgICAgICAgICAvLyBSRkMzOTg2IDIuMTogRm9yIGNvbnNpc3RlbmN5LCBVUkkgcHJvZHVjZXJzIGFuZCBub3JtYWxpemVycyBzaG91bGQKICAgICAgICAgICAgICAvLyB1c2UgdXBwZXJjYXNlIGhleGFkZWNpbWFsIGRpZ2l0cyBmb3IgYWxsIHBlcmNlbnQtZW5jb2RpbmdzLgogICAgICAgICAgICAgIGV4cHJlc3Npb246IC8lKDI0fDI2fDJCfDJDfDNCfDNEfDNBfDQwKS9pZywKICAgICAgICAgICAgICBtYXA6IHsKICAgICAgICAgICAgICAgIC8vIC0uX34hJygpKgogICAgICAgICAgICAgICAgIiUyNCI6ICIkIiwKICAgICAgICAgICAgICAgICIlMjYiOiAiJiIsCiAgICAgICAgICAgICAgICAiJTJCIjogIisiLAogICAgICAgICAgICAgICAgIiUyQyI6ICIsIiwKICAgICAgICAgICAgICAgICIlM0IiOiAiOyIsCiAgICAgICAgICAgICAgICAiJTNEIjogIj0iLAogICAgICAgICAgICAgICAgIiUzQSI6ICI6IiwKICAgICAgICAgICAgICAgICIlNDAiOiAiQCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlY29kZTogewogICAgICAgICAgICAgIGV4cHJlc3Npb246IC9bXC9cPyNdL2csCiAgICAgICAgICAgICAgbWFwOiB7CiAgICAgICAgICAgICAgICAiLyI6ICIlMkYiLAogICAgICAgICAgICAgICAgIj8iOiAiJTNGIiwKICAgICAgICAgICAgICAgICIjIjogIiUyMyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICByZXNlcnZlZDogewogICAgICAgICAgICBlbmNvZGU6IHsKICAgICAgICAgICAgICAvLyBSRkMzOTg2IDIuMTogRm9yIGNvbnNpc3RlbmN5LCBVUkkgcHJvZHVjZXJzIGFuZCBub3JtYWxpemVycyBzaG91bGQKICAgICAgICAgICAgICAvLyB1c2UgdXBwZXJjYXNlIGhleGFkZWNpbWFsIGRpZ2l0cyBmb3IgYWxsIHBlcmNlbnQtZW5jb2RpbmdzLgogICAgICAgICAgICAgIGV4cHJlc3Npb246IC8lKDIxfDIzfDI0fDI2fDI3fDI4fDI5fDJBfDJCfDJDfDJGfDNBfDNCfDNEfDNGfDQwfDVCfDVEKS9pZywKICAgICAgICAgICAgICBtYXA6IHsKICAgICAgICAgICAgICAgIC8vIGdlbi1kZWxpbXMKICAgICAgICAgICAgICAgICIlM0EiOiAiOiIsCiAgICAgICAgICAgICAgICAiJTJGIjogIi8iLAogICAgICAgICAgICAgICAgIiUzRiI6ICI/IiwKICAgICAgICAgICAgICAgICIlMjMiOiAiIyIsCiAgICAgICAgICAgICAgICAiJTVCIjogIlsiLAogICAgICAgICAgICAgICAgIiU1RCI6ICJdIiwKICAgICAgICAgICAgICAgICIlNDAiOiAiQCIsCiAgICAgICAgICAgICAgICAvLyBzdWItZGVsaW1zCiAgICAgICAgICAgICAgICAiJTIxIjogIiEiLAogICAgICAgICAgICAgICAgIiUyNCI6ICIkIiwKICAgICAgICAgICAgICAgICIlMjYiOiAiJiIsCiAgICAgICAgICAgICAgICAiJTI3IjogIiciLAogICAgICAgICAgICAgICAgIiUyOCI6ICIoIiwKICAgICAgICAgICAgICAgICIlMjkiOiAiKSIsCiAgICAgICAgICAgICAgICAiJTJBIjogIioiLAogICAgICAgICAgICAgICAgIiUyQiI6ICIrIiwKICAgICAgICAgICAgICAgICIlMkMiOiAiLCIsCiAgICAgICAgICAgICAgICAiJTNCIjogIjsiLAogICAgICAgICAgICAgICAgIiUzRCI6ICI9IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHVybnBhdGg6IHsKICAgICAgICAgICAgLy8gVGhlIGNoYXJhY3RlcnMgdW5kZXIgYGVuY29kZWAgYXJlIHRoZSBjaGFyYWN0ZXJzIGNhbGxlZCBvdXQgYnkgUkZDIDIxNDEgYXMgYmVpbmcgYWNjZXB0YWJsZQogICAgICAgICAgICAvLyBmb3IgdXNhZ2UgaW4gYSBVUk4uIFJGQzIxNDEgYWxzbyBjYWxscyBvdXQgIi0iLCAiLiIsIGFuZCAiXyIgYXMgYWNjZXB0YWJsZSBjaGFyYWN0ZXJzLCBidXQKICAgICAgICAgICAgLy8gdGhlc2UgYXJlbid0IGVuY29kZWQgYnkgZW5jb2RlVVJJQ29tcG9uZW50LCBzbyB3ZSBkb24ndCBoYXZlIHRvIGNhbGwgdGhlbSBvdXQgaGVyZS4gQWxzbwogICAgICAgICAgICAvLyBub3RlIHRoYXQgdGhlIGNvbG9uIGNoYXJhY3RlciBpcyBub3QgZmVhdHVyZWQgaW4gdGhlIGVuY29kaW5nIG1hcDsgdGhpcyBpcyBiZWNhdXNlIFVSSS5qcwogICAgICAgICAgICAvLyBnaXZlcyB0aGUgY29sb25zIGluIFVSTnMgc2VtYW50aWMgbWVhbmluZyBhcyB0aGUgZGVsaW1pdGVycyBvZiBwYXRoIHNlZ2VtZW50cywgYW5kIHNvIGl0CiAgICAgICAgICAgIC8vIHNob3VsZCBub3QgYXBwZWFyIHVuZW5jb2RlZCBpbiBhIHNlZ21lbnQgaXRzZWxmLgogICAgICAgICAgICAvLyBTZWUgYWxzbyB0aGUgbm90ZSBhYm92ZSBhYm91dCBSRkMzOTg2IGFuZCBjYXBpdGFsYWxpemVkIGhleCBkaWdpdHMuCiAgICAgICAgICAgIGVuY29kZTogewogICAgICAgICAgICAgIGV4cHJlc3Npb246IC8lKDIxfDI0fDI3fDI4fDI5fDJBfDJCfDJDfDNCfDNEfDQwKS9pZywKICAgICAgICAgICAgICBtYXA6IHsKICAgICAgICAgICAgICAgICIlMjEiOiAiISIsCiAgICAgICAgICAgICAgICAiJTI0IjogIiQiLAogICAgICAgICAgICAgICAgIiUyNyI6ICInIiwKICAgICAgICAgICAgICAgICIlMjgiOiAiKCIsCiAgICAgICAgICAgICAgICAiJTI5IjogIikiLAogICAgICAgICAgICAgICAgIiUyQSI6ICIqIiwKICAgICAgICAgICAgICAgICIlMkIiOiAiKyIsCiAgICAgICAgICAgICAgICAiJTJDIjogIiwiLAogICAgICAgICAgICAgICAgIiUzQiI6ICI7IiwKICAgICAgICAgICAgICAgICIlM0QiOiAiPSIsCiAgICAgICAgICAgICAgICAiJTQwIjogIkAiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAvLyBUaGVzZSBjaGFyYWN0ZXJzIGFyZSB0aGUgY2hhcmFjdGVycyBjYWxsZWQgb3V0IGJ5IFJGQzIxNDEgYXMgInJlc2VydmVkIiBjaGFyYWN0ZXJzIHRoYXQKICAgICAgICAgICAgLy8gc2hvdWxkIG5ldmVyIGFwcGVhciBpbiBhIFVSTiwgcGx1cyB0aGUgY29sb24gY2hhcmFjdGVyIChzZWUgbm90ZSBhYm92ZSkuCiAgICAgICAgICAgIGRlY29kZTogewogICAgICAgICAgICAgIGV4cHJlc3Npb246IC9bXC9cPyM6XS9nLAogICAgICAgICAgICAgIG1hcDogewogICAgICAgICAgICAgICAgIi8iOiAiJTJGIiwKICAgICAgICAgICAgICAgICI/IjogIiUzRiIsCiAgICAgICAgICAgICAgICAiIyI6ICIlMjMiLAogICAgICAgICAgICAgICAgIjoiOiAiJTNBIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgVVJJLmVuY29kZVF1ZXJ5ID0gZnVuY3Rpb24oc3RyaW5nLCBlc2NhcGVRdWVyeVNwYWNlKSB7CiAgICAgICAgICB2YXIgZXNjYXBlZCA9IFVSSS5lbmNvZGUoc3RyaW5nICsgIiIpOwogICAgICAgICAgaWYgKGVzY2FwZVF1ZXJ5U3BhY2UgPT09IHZvaWQgMCkgewogICAgICAgICAgICBlc2NhcGVRdWVyeVNwYWNlID0gVVJJLmVzY2FwZVF1ZXJ5U3BhY2U7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gZXNjYXBlUXVlcnlTcGFjZSA/IGVzY2FwZWQucmVwbGFjZSgvJTIwL2csICIrIikgOiBlc2NhcGVkOwogICAgICAgIH07CiAgICAgICAgVVJJLmRlY29kZVF1ZXJ5ID0gZnVuY3Rpb24oc3RyaW5nLCBlc2NhcGVRdWVyeVNwYWNlKSB7CiAgICAgICAgICBzdHJpbmcgKz0gIiI7CiAgICAgICAgICBpZiAoZXNjYXBlUXVlcnlTcGFjZSA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIGVzY2FwZVF1ZXJ5U3BhY2UgPSBVUkkuZXNjYXBlUXVlcnlTcGFjZTsKICAgICAgICAgIH0KICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHJldHVybiBVUkkuZGVjb2RlKGVzY2FwZVF1ZXJ5U3BhY2UgPyBzdHJpbmcucmVwbGFjZSgvXCsvZywgIiUyMCIpIDogc3RyaW5nKTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgcmV0dXJuIHN0cmluZzsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHZhciBfcGFydHMgPSB7ICJlbmNvZGUiOiAiZW5jb2RlIiwgImRlY29kZSI6ICJkZWNvZGUiIH07CiAgICAgICAgdmFyIF9wYXJ0OwogICAgICAgIHZhciBnZW5lcmF0ZUFjY2Vzc29yID0gZnVuY3Rpb24oX2dyb3VwLCBfcGFydDIpIHsKICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICByZXR1cm4gVVJJW19wYXJ0Ml0oc3RyaW5nICsgIiIpLnJlcGxhY2UoVVJJLmNoYXJhY3RlcnNbX2dyb3VwXVtfcGFydDJdLmV4cHJlc3Npb24sIGZ1bmN0aW9uKGMpIHsKICAgICAgICAgICAgICAgIHJldHVybiBVUkkuY2hhcmFjdGVyc1tfZ3JvdXBdW19wYXJ0Ml0ubWFwW2NdOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZzsKICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICB9OwogICAgICAgIGZvciAoX3BhcnQgaW4gX3BhcnRzKSB7CiAgICAgICAgICBVUklbX3BhcnQgKyAiUGF0aFNlZ21lbnQiXSA9IGdlbmVyYXRlQWNjZXNzb3IoInBhdGhuYW1lIiwgX3BhcnRzW19wYXJ0XSk7CiAgICAgICAgICBVUklbX3BhcnQgKyAiVXJuUGF0aFNlZ21lbnQiXSA9IGdlbmVyYXRlQWNjZXNzb3IoInVybnBhdGgiLCBfcGFydHNbX3BhcnRdKTsKICAgICAgICB9CiAgICAgICAgdmFyIGdlbmVyYXRlU2VnbWVudGVkUGF0aEZ1bmN0aW9uID0gZnVuY3Rpb24oX3NlcCwgX2NvZGluZ0Z1bmNOYW1lLCBfaW5uZXJDb2RpbmdGdW5jTmFtZSkgewogICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykgewogICAgICAgICAgICB2YXIgYWN0dWFsQ29kaW5nRnVuYzsKICAgICAgICAgICAgaWYgKCFfaW5uZXJDb2RpbmdGdW5jTmFtZSkgewogICAgICAgICAgICAgIGFjdHVhbENvZGluZ0Z1bmMgPSBVUklbX2NvZGluZ0Z1bmNOYW1lXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBhY3R1YWxDb2RpbmdGdW5jID0gZnVuY3Rpb24oc3RyaW5nMikgewogICAgICAgICAgICAgICAgcmV0dXJuIFVSSVtfY29kaW5nRnVuY05hbWVdKFVSSVtfaW5uZXJDb2RpbmdGdW5jTmFtZV0oc3RyaW5nMikpOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHNlZ21lbnRzID0gKHN0cmluZyArICIiKS5zcGxpdChfc2VwKTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgc2VnbWVudHNbaV0gPSBhY3R1YWxDb2RpbmdGdW5jKHNlZ21lbnRzW2ldKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gc2VnbWVudHMuam9pbihfc2VwKTsKICAgICAgICAgIH07CiAgICAgICAgfTsKICAgICAgICBVUkkuZGVjb2RlUGF0aCA9IGdlbmVyYXRlU2VnbWVudGVkUGF0aEZ1bmN0aW9uKCIvIiwgImRlY29kZVBhdGhTZWdtZW50Iik7CiAgICAgICAgVVJJLmRlY29kZVVyblBhdGggPSBnZW5lcmF0ZVNlZ21lbnRlZFBhdGhGdW5jdGlvbigiOiIsICJkZWNvZGVVcm5QYXRoU2VnbWVudCIpOwogICAgICAgIFVSSS5yZWNvZGVQYXRoID0gZ2VuZXJhdGVTZWdtZW50ZWRQYXRoRnVuY3Rpb24oIi8iLCAiZW5jb2RlUGF0aFNlZ21lbnQiLCAiZGVjb2RlIik7CiAgICAgICAgVVJJLnJlY29kZVVyblBhdGggPSBnZW5lcmF0ZVNlZ21lbnRlZFBhdGhGdW5jdGlvbigiOiIsICJlbmNvZGVVcm5QYXRoU2VnbWVudCIsICJkZWNvZGUiKTsKICAgICAgICBVUkkuZW5jb2RlUmVzZXJ2ZWQgPSBnZW5lcmF0ZUFjY2Vzc29yKCJyZXNlcnZlZCIsICJlbmNvZGUiKTsKICAgICAgICBVUkkucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcsIHBhcnRzKSB7CiAgICAgICAgICB2YXIgcG9zOwogICAgICAgICAgaWYgKCFwYXJ0cykgewogICAgICAgICAgICBwYXJ0cyA9IHsKICAgICAgICAgICAgICBwcmV2ZW50SW52YWxpZEhvc3RuYW1lOiBVUkkucHJldmVudEludmFsaWRIb3N0bmFtZQogICAgICAgICAgICB9OwogICAgICAgICAgfQogICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoVVJJLmxlYWRpbmdfd2hpdGVzcGFjZV9leHByZXNzaW9uLCAiIik7CiAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShVUkkuYXNjaWlfdGFiX3doaXRlc3BhY2UsICIiKTsKICAgICAgICAgIHBvcyA9IHN0cmluZy5pbmRleE9mKCIjIik7CiAgICAgICAgICBpZiAocG9zID4gLTEpIHsKICAgICAgICAgICAgcGFydHMuZnJhZ21lbnQgPSBzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDEpIHx8IG51bGw7CiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKTsKICAgICAgICAgIH0KICAgICAgICAgIHBvcyA9IHN0cmluZy5pbmRleE9mKCI/Iik7CiAgICAgICAgICBpZiAocG9zID4gLTEpIHsKICAgICAgICAgICAgcGFydHMucXVlcnkgPSBzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDEpIHx8IG51bGw7CiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKTsKICAgICAgICAgIH0KICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9eKGh0dHBzP3xmdHB8d3NzPyk/OitbL1xcXSovaSwgIiQxOi8vIik7CiAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvXlsvXFxdezIsfS9pLCAiLy8iKTsKICAgICAgICAgIGlmIChzdHJpbmcuc3Vic3RyaW5nKDAsIDIpID09PSAiLy8iKSB7CiAgICAgICAgICAgIHBhcnRzLnByb3RvY29sID0gbnVsbDsKICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZygyKTsKICAgICAgICAgICAgc3RyaW5nID0gVVJJLnBhcnNlQXV0aG9yaXR5KHN0cmluZywgcGFydHMpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcG9zID0gc3RyaW5nLmluZGV4T2YoIjoiKTsKICAgICAgICAgICAgaWYgKHBvcyA+IC0xKSB7CiAgICAgICAgICAgICAgcGFydHMucHJvdG9jb2wgPSBzdHJpbmcuc3Vic3RyaW5nKDAsIHBvcykgfHwgbnVsbDsKICAgICAgICAgICAgICBpZiAocGFydHMucHJvdG9jb2wgJiYgIXBhcnRzLnByb3RvY29sLm1hdGNoKFVSSS5wcm90b2NvbF9leHByZXNzaW9uKSkgewogICAgICAgICAgICAgICAgcGFydHMucHJvdG9jb2wgPSB2b2lkIDA7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDEsIHBvcyArIDMpLnJlcGxhY2UoL1xcL2csICIvIikgPT09ICIvLyIpIHsKICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zdWJzdHJpbmcocG9zICsgMyk7CiAgICAgICAgICAgICAgICBzdHJpbmcgPSBVUkkucGFyc2VBdXRob3JpdHkoc3RyaW5nLCBwYXJ0cyk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zdWJzdHJpbmcocG9zICsgMSk7CiAgICAgICAgICAgICAgICBwYXJ0cy51cm4gPSB0cnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcGFydHMucGF0aCA9IHN0cmluZzsKICAgICAgICAgIHJldHVybiBwYXJ0czsKICAgICAgICB9OwogICAgICAgIFVSSS5wYXJzZUhvc3QgPSBmdW5jdGlvbihzdHJpbmcsIHBhcnRzKSB7CiAgICAgICAgICBpZiAoIXN0cmluZykgewogICAgICAgICAgICBzdHJpbmcgPSAiIjsKICAgICAgICAgIH0KICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9cXC9nLCAiLyIpOwogICAgICAgICAgdmFyIHBvcyA9IHN0cmluZy5pbmRleE9mKCIvIik7CiAgICAgICAgICB2YXIgYnJhY2tldFBvczsKICAgICAgICAgIHZhciB0OwogICAgICAgICAgaWYgKHBvcyA9PT0gLTEpIHsKICAgICAgICAgICAgcG9zID0gc3RyaW5nLmxlbmd0aDsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzdHJpbmcuY2hhckF0KDApID09PSAiWyIpIHsKICAgICAgICAgICAgYnJhY2tldFBvcyA9IHN0cmluZy5pbmRleE9mKCJdIik7CiAgICAgICAgICAgIHBhcnRzLmhvc3RuYW1lID0gc3RyaW5nLnN1YnN0cmluZygxLCBicmFja2V0UG9zKSB8fCBudWxsOwogICAgICAgICAgICBwYXJ0cy5wb3J0ID0gc3RyaW5nLnN1YnN0cmluZyhicmFja2V0UG9zICsgMiwgcG9zKSB8fCBudWxsOwogICAgICAgICAgICBpZiAocGFydHMucG9ydCA9PT0gIi8iKSB7CiAgICAgICAgICAgICAgcGFydHMucG9ydCA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBmaXJzdENvbG9uID0gc3RyaW5nLmluZGV4T2YoIjoiKTsKICAgICAgICAgICAgdmFyIGZpcnN0U2xhc2ggPSBzdHJpbmcuaW5kZXhPZigiLyIpOwogICAgICAgICAgICB2YXIgbmV4dENvbG9uID0gc3RyaW5nLmluZGV4T2YoIjoiLCBmaXJzdENvbG9uICsgMSk7CiAgICAgICAgICAgIGlmIChuZXh0Q29sb24gIT09IC0xICYmIChmaXJzdFNsYXNoID09PSAtMSB8fCBuZXh0Q29sb24gPCBmaXJzdFNsYXNoKSkgewogICAgICAgICAgICAgIHBhcnRzLmhvc3RuYW1lID0gc3RyaW5nLnN1YnN0cmluZygwLCBwb3MpIHx8IG51bGw7CiAgICAgICAgICAgICAgcGFydHMucG9ydCA9IG51bGw7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdCA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKS5zcGxpdCgiOiIpOwogICAgICAgICAgICAgIHBhcnRzLmhvc3RuYW1lID0gdFswXSB8fCBudWxsOwogICAgICAgICAgICAgIHBhcnRzLnBvcnQgPSB0WzFdIHx8IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChwYXJ0cy5ob3N0bmFtZSAmJiBzdHJpbmcuc3Vic3RyaW5nKHBvcykuY2hhckF0KDApICE9PSAiLyIpIHsKICAgICAgICAgICAgcG9zKys7CiAgICAgICAgICAgIHN0cmluZyA9ICIvIiArIHN0cmluZzsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChwYXJ0cy5wcmV2ZW50SW52YWxpZEhvc3RuYW1lKSB7CiAgICAgICAgICAgIFVSSS5lbnN1cmVWYWxpZEhvc3RuYW1lKHBhcnRzLmhvc3RuYW1lLCBwYXJ0cy5wcm90b2NvbCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocGFydHMucG9ydCkgewogICAgICAgICAgICBVUkkuZW5zdXJlVmFsaWRQb3J0KHBhcnRzLnBvcnQpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHN0cmluZy5zdWJzdHJpbmcocG9zKSB8fCAiLyI7CiAgICAgICAgfTsKICAgICAgICBVUkkucGFyc2VBdXRob3JpdHkgPSBmdW5jdGlvbihzdHJpbmcsIHBhcnRzKSB7CiAgICAgICAgICBzdHJpbmcgPSBVUkkucGFyc2VVc2VyaW5mbyhzdHJpbmcsIHBhcnRzKTsKICAgICAgICAgIHJldHVybiBVUkkucGFyc2VIb3N0KHN0cmluZywgcGFydHMpOwogICAgICAgIH07CiAgICAgICAgVVJJLnBhcnNlVXNlcmluZm8gPSBmdW5jdGlvbihzdHJpbmcsIHBhcnRzKSB7CiAgICAgICAgICB2YXIgX3N0cmluZyA9IHN0cmluZzsKICAgICAgICAgIHZhciBmaXJzdEJhY2tTbGFzaCA9IHN0cmluZy5pbmRleE9mKCJcXCIpOwogICAgICAgICAgaWYgKGZpcnN0QmFja1NsYXNoICE9PSAtMSkgewogICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvXFwvZywgIi8iKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBmaXJzdFNsYXNoID0gc3RyaW5nLmluZGV4T2YoIi8iKTsKICAgICAgICAgIHZhciBwb3MgPSBzdHJpbmcubGFzdEluZGV4T2YoIkAiLCBmaXJzdFNsYXNoID4gLTEgPyBmaXJzdFNsYXNoIDogc3RyaW5nLmxlbmd0aCAtIDEpOwogICAgICAgICAgdmFyIHQ7CiAgICAgICAgICBpZiAocG9zID4gLTEgJiYgKGZpcnN0U2xhc2ggPT09IC0xIHx8IHBvcyA8IGZpcnN0U2xhc2gpKSB7CiAgICAgICAgICAgIHQgPSBzdHJpbmcuc3Vic3RyaW5nKDAsIHBvcykuc3BsaXQoIjoiKTsKICAgICAgICAgICAgcGFydHMudXNlcm5hbWUgPSB0WzBdID8gVVJJLmRlY29kZSh0WzBdKSA6IG51bGw7CiAgICAgICAgICAgIHQuc2hpZnQoKTsKICAgICAgICAgICAgcGFydHMucGFzc3dvcmQgPSB0WzBdID8gVVJJLmRlY29kZSh0LmpvaW4oIjoiKSkgOiBudWxsOwogICAgICAgICAgICBzdHJpbmcgPSBfc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAxKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHBhcnRzLnVzZXJuYW1lID0gbnVsbDsKICAgICAgICAgICAgcGFydHMucGFzc3dvcmQgPSBudWxsOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHN0cmluZzsKICAgICAgICB9OwogICAgICAgIFVSSS5wYXJzZVF1ZXJ5ID0gZnVuY3Rpb24oc3RyaW5nLCBlc2NhcGVRdWVyeVNwYWNlKSB7CiAgICAgICAgICBpZiAoIXN0cmluZykgewogICAgICAgICAgICByZXR1cm4ge307CiAgICAgICAgICB9CiAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvJisvZywgIiYiKS5yZXBsYWNlKC9eXD8qJip8JiskL2csICIiKTsKICAgICAgICAgIGlmICghc3RyaW5nKSB7CiAgICAgICAgICAgIHJldHVybiB7fTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBpdGVtcyA9IHt9OwogICAgICAgICAgdmFyIHNwbGl0cyA9IHN0cmluZy5zcGxpdCgiJiIpOwogICAgICAgICAgdmFyIGxlbmd0aCA9IHNwbGl0cy5sZW5ndGg7CiAgICAgICAgICB2YXIgdjMsIG5hbWUsIHZhbHVlOwogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICB2MyA9IHNwbGl0c1tpXS5zcGxpdCgiPSIpOwogICAgICAgICAgICBuYW1lID0gVVJJLmRlY29kZVF1ZXJ5KHYzLnNoaWZ0KCksIGVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgICAgICAgICB2YWx1ZSA9IHYzLmxlbmd0aCA/IFVSSS5kZWNvZGVRdWVyeSh2My5qb2luKCI9IiksIGVzY2FwZVF1ZXJ5U3BhY2UpIDogbnVsbDsKICAgICAgICAgICAgaWYgKG5hbWUgPT09ICJfX3Byb3RvX18iKSB7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzT3duLmNhbGwoaXRlbXMsIG5hbWUpKSB7CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtc1tuYW1lXSA9PT0gInN0cmluZyIgfHwgaXRlbXNbbmFtZV0gPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGl0ZW1zW25hbWVdID0gW2l0ZW1zW25hbWVdXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaXRlbXNbbmFtZV0ucHVzaCh2YWx1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgaXRlbXNbbmFtZV0gPSB2YWx1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGl0ZW1zOwogICAgICAgIH07CiAgICAgICAgVVJJLmJ1aWxkID0gZnVuY3Rpb24ocGFydHMpIHsKICAgICAgICAgIHZhciB0ID0gIiI7CiAgICAgICAgICB2YXIgcmVxdWlyZUFic29sdXRlUGF0aCA9IGZhbHNlOwogICAgICAgICAgaWYgKHBhcnRzLnByb3RvY29sKSB7CiAgICAgICAgICAgIHQgKz0gcGFydHMucHJvdG9jb2wgKyAiOiI7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIXBhcnRzLnVybiAmJiAodCB8fCBwYXJ0cy5ob3N0bmFtZSkpIHsKICAgICAgICAgICAgdCArPSAiLy8iOwogICAgICAgICAgICByZXF1aXJlQWJzb2x1dGVQYXRoID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICAgIHQgKz0gVVJJLmJ1aWxkQXV0aG9yaXR5KHBhcnRzKSB8fCAiIjsKICAgICAgICAgIGlmICh0eXBlb2YgcGFydHMucGF0aCA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgaWYgKHBhcnRzLnBhdGguY2hhckF0KDApICE9PSAiLyIgJiYgcmVxdWlyZUFic29sdXRlUGF0aCkgewogICAgICAgICAgICAgIHQgKz0gIi8iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHQgKz0gcGFydHMucGF0aDsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0eXBlb2YgcGFydHMucXVlcnkgPT09ICJzdHJpbmciICYmIHBhcnRzLnF1ZXJ5KSB7CiAgICAgICAgICAgIHQgKz0gIj8iICsgcGFydHMucXVlcnk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodHlwZW9mIHBhcnRzLmZyYWdtZW50ID09PSAic3RyaW5nIiAmJiBwYXJ0cy5mcmFnbWVudCkgewogICAgICAgICAgICB0ICs9ICIjIiArIHBhcnRzLmZyYWdtZW50OwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHQ7CiAgICAgICAgfTsKICAgICAgICBVUkkuYnVpbGRIb3N0ID0gZnVuY3Rpb24ocGFydHMpIHsKICAgICAgICAgIHZhciB0ID0gIiI7CiAgICAgICAgICBpZiAoIXBhcnRzLmhvc3RuYW1lKSB7CiAgICAgICAgICAgIHJldHVybiAiIjsKICAgICAgICAgIH0gZWxzZSBpZiAoVVJJLmlwNl9leHByZXNzaW9uLnRlc3QocGFydHMuaG9zdG5hbWUpKSB7CiAgICAgICAgICAgIHQgKz0gIlsiICsgcGFydHMuaG9zdG5hbWUgKyAiXSI7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0ICs9IHBhcnRzLmhvc3RuYW1lOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHBhcnRzLnBvcnQpIHsKICAgICAgICAgICAgdCArPSAiOiIgKyBwYXJ0cy5wb3J0OwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHQ7CiAgICAgICAgfTsKICAgICAgICBVUkkuYnVpbGRBdXRob3JpdHkgPSBmdW5jdGlvbihwYXJ0cykgewogICAgICAgICAgcmV0dXJuIFVSSS5idWlsZFVzZXJpbmZvKHBhcnRzKSArIFVSSS5idWlsZEhvc3QocGFydHMpOwogICAgICAgIH07CiAgICAgICAgVVJJLmJ1aWxkVXNlcmluZm8gPSBmdW5jdGlvbihwYXJ0cykgewogICAgICAgICAgdmFyIHQgPSAiIjsKICAgICAgICAgIGlmIChwYXJ0cy51c2VybmFtZSkgewogICAgICAgICAgICB0ICs9IFVSSS5lbmNvZGUocGFydHMudXNlcm5hbWUpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHBhcnRzLnBhc3N3b3JkKSB7CiAgICAgICAgICAgIHQgKz0gIjoiICsgVVJJLmVuY29kZShwYXJ0cy5wYXNzd29yZCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodCkgewogICAgICAgICAgICB0ICs9ICJAIjsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0OwogICAgICAgIH07CiAgICAgICAgVVJJLmJ1aWxkUXVlcnkgPSBmdW5jdGlvbihkYXRhLCBkdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIGVzY2FwZVF1ZXJ5U3BhY2UpIHsKICAgICAgICAgIHZhciB0ID0gIiI7CiAgICAgICAgICB2YXIgdW5pcXVlLCBrZXksIGksIGxlbmd0aDsKICAgICAgICAgIGZvciAoa2V5IGluIGRhdGEpIHsKICAgICAgICAgICAgaWYgKGtleSA9PT0gIl9fcHJvdG9fXyIpIHsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNPd24uY2FsbChkYXRhLCBrZXkpKSB7CiAgICAgICAgICAgICAgaWYgKGlzQXJyYXkoZGF0YVtrZXldKSkgewogICAgICAgICAgICAgICAgdW5pcXVlID0ge307CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBkYXRhW2tleV0ubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgaWYgKGRhdGFba2V5XVtpXSAhPT0gdm9pZCAwICYmIHVuaXF1ZVtkYXRhW2tleV1baV0gKyAiIl0gPT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgICAgIHQgKz0gIiYiICsgVVJJLmJ1aWxkUXVlcnlQYXJhbWV0ZXIoa2V5LCBkYXRhW2tleV1baV0sIGVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgICAgICAgICAgICAgICAgIGlmIChkdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMgIT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICAgIHVuaXF1ZVtkYXRhW2tleV1baV0gKyAiIl0gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVtrZXldICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIHQgKz0gIiYiICsgVVJJLmJ1aWxkUXVlcnlQYXJhbWV0ZXIoa2V5LCBkYXRhW2tleV0sIGVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHQuc3Vic3RyaW5nKDEpOwogICAgICAgIH07CiAgICAgICAgVVJJLmJ1aWxkUXVlcnlQYXJhbWV0ZXIgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgZXNjYXBlUXVlcnlTcGFjZSkgewogICAgICAgICAgcmV0dXJuIFVSSS5lbmNvZGVRdWVyeShuYW1lLCBlc2NhcGVRdWVyeVNwYWNlKSArICh2YWx1ZSAhPT0gbnVsbCA/ICI9IiArIFVSSS5lbmNvZGVRdWVyeSh2YWx1ZSwgZXNjYXBlUXVlcnlTcGFjZSkgOiAiIik7CiAgICAgICAgfTsKICAgICAgICBVUkkuYWRkUXVlcnkgPSBmdW5jdGlvbihkYXRhLCBuYW1lLCB2YWx1ZSkgewogICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAib2JqZWN0IikgewogICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gbmFtZSkgewogICAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChuYW1lLCBrZXkpKSB7CiAgICAgICAgICAgICAgICBVUkkuYWRkUXVlcnkoZGF0YSwga2V5LCBuYW1lW2tleV0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgaWYgKGRhdGFbbmFtZV0gPT09IHZvaWQgMCkgewogICAgICAgICAgICAgIGRhdGFbbmFtZV0gPSB2YWx1ZTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGFbbmFtZV0gPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgZGF0YVtuYW1lXSA9IFtkYXRhW25hbWVdXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIWlzQXJyYXkodmFsdWUpKSB7CiAgICAgICAgICAgICAgdmFsdWUgPSBbdmFsdWVdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGRhdGFbbmFtZV0gPSAoZGF0YVtuYW1lXSB8fCBbXSkuY29uY2F0KHZhbHVlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlVSSS5hZGRRdWVyeSgpIGFjY2VwdHMgYW4gb2JqZWN0LCBzdHJpbmcgYXMgdGhlIG5hbWUgcGFyYW1ldGVyIik7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBVUkkuc2V0UXVlcnkgPSBmdW5jdGlvbihkYXRhLCBuYW1lLCB2YWx1ZSkgewogICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAib2JqZWN0IikgewogICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gbmFtZSkgewogICAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChuYW1lLCBrZXkpKSB7CiAgICAgICAgICAgICAgICBVUkkuc2V0UXVlcnkoZGF0YSwga2V5LCBuYW1lW2tleV0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgZGF0YVtuYW1lXSA9IHZhbHVlID09PSB2b2lkIDAgPyBudWxsIDogdmFsdWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJVUkkuc2V0UXVlcnkoKSBhY2NlcHRzIGFuIG9iamVjdCwgc3RyaW5nIGFzIHRoZSBuYW1lIHBhcmFtZXRlciIpOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgVVJJLnJlbW92ZVF1ZXJ5ID0gZnVuY3Rpb24oZGF0YSwgbmFtZSwgdmFsdWUpIHsKICAgICAgICAgIHZhciBpLCBsZW5ndGgsIGtleTsKICAgICAgICAgIGlmIChpc0FycmF5KG5hbWUpKSB7CiAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG5hbWUubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBkYXRhW25hbWVbaV1dID0gdm9pZCAwOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKGdldFR5cGUobmFtZSkgPT09ICJSZWdFeHAiKSB7CiAgICAgICAgICAgIGZvciAoa2V5IGluIGRhdGEpIHsKICAgICAgICAgICAgICBpZiAobmFtZS50ZXN0KGtleSkpIHsKICAgICAgICAgICAgICAgIGRhdGFba2V5XSA9IHZvaWQgMDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgIGZvciAoa2V5IGluIG5hbWUpIHsKICAgICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwobmFtZSwga2V5KSkgewogICAgICAgICAgICAgICAgVVJJLnJlbW92ZVF1ZXJ5KGRhdGEsIGtleSwgbmFtZVtrZXldKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgaWYgKGdldFR5cGUodmFsdWUpID09PSAiUmVnRXhwIikgewogICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KGRhdGFbbmFtZV0pICYmIHZhbHVlLnRlc3QoZGF0YVtuYW1lXSkpIHsKICAgICAgICAgICAgICAgICAgZGF0YVtuYW1lXSA9IHZvaWQgMDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGRhdGFbbmFtZV0gPSBmaWx0ZXJBcnJheVZhbHVlcyhkYXRhW25hbWVdLCB2YWx1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhW25hbWVdID09PSBTdHJpbmcodmFsdWUpICYmICghaXNBcnJheSh2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoID09PSAxKSkgewogICAgICAgICAgICAgICAgZGF0YVtuYW1lXSA9IHZvaWQgMDsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YVtuYW1lXSkpIHsKICAgICAgICAgICAgICAgIGRhdGFbbmFtZV0gPSBmaWx0ZXJBcnJheVZhbHVlcyhkYXRhW25hbWVdLCB2YWx1ZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGRhdGFbbmFtZV0gPSB2b2lkIDA7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlVSSS5yZW1vdmVRdWVyeSgpIGFjY2VwdHMgYW4gb2JqZWN0LCBzdHJpbmcsIFJlZ0V4cCBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyIik7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBVUkkuaGFzUXVlcnkgPSBmdW5jdGlvbihkYXRhLCBuYW1lLCB2YWx1ZSwgd2l0aGluQXJyYXkpIHsKICAgICAgICAgIHN3aXRjaCAoZ2V0VHlwZShuYW1lKSkgewogICAgICAgICAgICBjYXNlICJTdHJpbmciOgogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICJSZWdFeHAiOgogICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7CiAgICAgICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoZGF0YSwga2V5KSkgewogICAgICAgICAgICAgICAgICBpZiAobmFtZS50ZXN0KGtleSkgJiYgKHZhbHVlID09PSB2b2lkIDAgfHwgVVJJLmhhc1F1ZXJ5KGRhdGEsIGtleSwgdmFsdWUpKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgY2FzZSAiT2JqZWN0IjoKICAgICAgICAgICAgICBmb3IgKHZhciBfa2V5IGluIG5hbWUpIHsKICAgICAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChuYW1lLCBfa2V5KSkgewogICAgICAgICAgICAgICAgICBpZiAoIVVSSS5oYXNRdWVyeShkYXRhLCBfa2V5LCBuYW1lW19rZXldKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJVUkkuaGFzUXVlcnkoKSBhY2NlcHRzIGEgc3RyaW5nLCByZWd1bGFyIGV4cHJlc3Npb24gb3Igb2JqZWN0IGFzIHRoZSBuYW1lIHBhcmFtZXRlciIpOwogICAgICAgICAgfQogICAgICAgICAgc3dpdGNoIChnZXRUeXBlKHZhbHVlKSkgewogICAgICAgICAgICBjYXNlICJVbmRlZmluZWQiOgogICAgICAgICAgICAgIHJldHVybiBuYW1lIGluIGRhdGE7CiAgICAgICAgICAgIGNhc2UgIkJvb2xlYW4iOgogICAgICAgICAgICAgIHZhciBfYm9vbHkgPSBCb29sZWFuKGlzQXJyYXkoZGF0YVtuYW1lXSkgPyBkYXRhW25hbWVdLmxlbmd0aCA6IGRhdGFbbmFtZV0pOwogICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gX2Jvb2x5OwogICAgICAgICAgICBjYXNlICJGdW5jdGlvbiI6CiAgICAgICAgICAgICAgcmV0dXJuICEhdmFsdWUoZGF0YVtuYW1lXSwgbmFtZSwgZGF0YSk7CiAgICAgICAgICAgIGNhc2UgIkFycmF5IjoKICAgICAgICAgICAgICBpZiAoIWlzQXJyYXkoZGF0YVtuYW1lXSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIG9wID0gd2l0aGluQXJyYXkgPyBhcnJheUNvbnRhaW5zIDogYXJyYXlzRXF1YWw7CiAgICAgICAgICAgICAgcmV0dXJuIG9wKGRhdGFbbmFtZV0sIHZhbHVlKTsKICAgICAgICAgICAgY2FzZSAiUmVnRXhwIjoKICAgICAgICAgICAgICBpZiAoIWlzQXJyYXkoZGF0YVtuYW1lXSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBCb29sZWFuKGRhdGFbbmFtZV0gJiYgZGF0YVtuYW1lXS5tYXRjaCh2YWx1ZSkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoIXdpdGhpbkFycmF5KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBhcnJheUNvbnRhaW5zKGRhdGFbbmFtZV0sIHZhbHVlKTsKICAgICAgICAgICAgY2FzZSAiTnVtYmVyIjoKICAgICAgICAgICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSk7CiAgICAgICAgICAgIGNhc2UgIlN0cmluZyI6CiAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KGRhdGFbbmFtZV0pKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVtuYW1lXSA9PT0gdmFsdWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICghd2l0aGluQXJyYXkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIGFycmF5Q29udGFpbnMoZGF0YVtuYW1lXSwgdmFsdWUpOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlVSSS5oYXNRdWVyeSgpIGFjY2VwdHMgdW5kZWZpbmVkLCBib29sZWFuLCBzdHJpbmcsIG51bWJlciwgUmVnRXhwLCBGdW5jdGlvbiBhcyB0aGUgdmFsdWUgcGFyYW1ldGVyIik7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBVUkkuam9pblBhdGhzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICB2YXIgaW5wdXQgPSBbXTsKICAgICAgICAgIHZhciBzZWdtZW50cyA9IFtdOwogICAgICAgICAgdmFyIG5vbkVtcHR5U2VnbWVudHMgPSAwOwogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIHVybCA9IG5ldyBVUkkoYXJndW1lbnRzW2ldKTsKICAgICAgICAgICAgaW5wdXQucHVzaCh1cmwpOwogICAgICAgICAgICB2YXIgX3NlZ21lbnRzID0gdXJsLnNlZ21lbnQoKTsKICAgICAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCBfc2VnbWVudHMubGVuZ3RoOyBzKyspIHsKICAgICAgICAgICAgICBpZiAodHlwZW9mIF9zZWdtZW50c1tzXSA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgICAgIHNlZ21lbnRzLnB1c2goX3NlZ21lbnRzW3NdKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKF9zZWdtZW50c1tzXSkgewogICAgICAgICAgICAgICAgbm9uRW1wdHlTZWdtZW50cysrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKCFzZWdtZW50cy5sZW5ndGggfHwgIW5vbkVtcHR5U2VnbWVudHMpIHsKICAgICAgICAgICAgcmV0dXJuIG5ldyBVUkkoIiIpOwogICAgICAgICAgfQogICAgICAgICAgdmFyIHVyaSA9IG5ldyBVUkkoIiIpLnNlZ21lbnQoc2VnbWVudHMpOwogICAgICAgICAgaWYgKGlucHV0WzBdLnBhdGgoKSA9PT0gIiIgfHwgaW5wdXRbMF0ucGF0aCgpLnNsaWNlKDAsIDEpID09PSAiLyIpIHsKICAgICAgICAgICAgdXJpLnBhdGgoIi8iICsgdXJpLnBhdGgoKSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdXJpLm5vcm1hbGl6ZSgpOwogICAgICAgIH07CiAgICAgICAgVVJJLmNvbW1vblBhdGggPSBmdW5jdGlvbihvbmUsIHR3bykgewogICAgICAgICAgdmFyIGxlbmd0aCA9IE1hdGgubWluKG9uZS5sZW5ndGgsIHR3by5sZW5ndGgpOwogICAgICAgICAgdmFyIHBvczsKICAgICAgICAgIGZvciAocG9zID0gMDsgcG9zIDwgbGVuZ3RoOyBwb3MrKykgewogICAgICAgICAgICBpZiAob25lLmNoYXJBdChwb3MpICE9PSB0d28uY2hhckF0KHBvcykpIHsKICAgICAgICAgICAgICBwb3MtLTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKHBvcyA8IDEpIHsKICAgICAgICAgICAgcmV0dXJuIG9uZS5jaGFyQXQoMCkgPT09IHR3by5jaGFyQXQoMCkgJiYgb25lLmNoYXJBdCgwKSA9PT0gIi8iID8gIi8iIDogIiI7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAob25lLmNoYXJBdChwb3MpICE9PSAiLyIgfHwgdHdvLmNoYXJBdChwb3MpICE9PSAiLyIpIHsKICAgICAgICAgICAgcG9zID0gb25lLnN1YnN0cmluZygwLCBwb3MpLmxhc3RJbmRleE9mKCIvIik7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gb25lLnN1YnN0cmluZygwLCBwb3MgKyAxKTsKICAgICAgICB9OwogICAgICAgIFVSSS53aXRoaW5TdHJpbmcgPSBmdW5jdGlvbihzdHJpbmcsIGNhbGxiYWNrLCBvcHRpb25zKSB7CiAgICAgICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pOwogICAgICAgICAgdmFyIF9zdGFydCA9IG9wdGlvbnMuc3RhcnQgfHwgVVJJLmZpbmRVcmkuc3RhcnQ7CiAgICAgICAgICB2YXIgX2VuZCA9IG9wdGlvbnMuZW5kIHx8IFVSSS5maW5kVXJpLmVuZDsKICAgICAgICAgIHZhciBfdHJpbSA9IG9wdGlvbnMudHJpbSB8fCBVUkkuZmluZFVyaS50cmltOwogICAgICAgICAgdmFyIF9wYXJlbnMgPSBvcHRpb25zLnBhcmVucyB8fCBVUkkuZmluZFVyaS5wYXJlbnM7CiAgICAgICAgICB2YXIgX2F0dHJpYnV0ZU9wZW4gPSAvW2EtejAtOS1dPVsiJ10/JC9pOwogICAgICAgICAgX3N0YXJ0Lmxhc3RJbmRleCA9IDA7CiAgICAgICAgICB3aGlsZSAodHJ1ZSkgewogICAgICAgICAgICB2YXIgbWF0Y2ggPSBfc3RhcnQuZXhlYyhzdHJpbmcpOwogICAgICAgICAgICBpZiAoIW1hdGNoKSB7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHN0YXJ0ID0gbWF0Y2guaW5kZXg7CiAgICAgICAgICAgIGlmIChvcHRpb25zLmlnbm9yZUh0bWwpIHsKICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlT3BlbiA9IHN0cmluZy5zbGljZShNYXRoLm1heChzdGFydCAtIDMsIDApLCBzdGFydCk7CiAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZU9wZW4gJiYgX2F0dHJpYnV0ZU9wZW4udGVzdChhdHRyaWJ1dGVPcGVuKSkgewogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBlbmQgPSBzdGFydCArIHN0cmluZy5zbGljZShzdGFydCkuc2VhcmNoKF9lbmQpOwogICAgICAgICAgICB2YXIgc2xpY2UgPSBzdHJpbmcuc2xpY2Uoc3RhcnQsIGVuZCk7CiAgICAgICAgICAgIHZhciBwYXJlbnNFbmQgPSAtMTsKICAgICAgICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICAgICAgICB2YXIgcGFyZW5zTWF0Y2ggPSBfcGFyZW5zLmV4ZWMoc2xpY2UpOwogICAgICAgICAgICAgIGlmICghcGFyZW5zTWF0Y2gpIHsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgcGFyZW5zTWF0Y2hFbmQgPSBwYXJlbnNNYXRjaC5pbmRleCArIHBhcmVuc01hdGNoWzBdLmxlbmd0aDsKICAgICAgICAgICAgICBwYXJlbnNFbmQgPSBNYXRoLm1heChwYXJlbnNFbmQsIHBhcmVuc01hdGNoRW5kKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocGFyZW5zRW5kID4gLTEpIHsKICAgICAgICAgICAgICBzbGljZSA9IHNsaWNlLnNsaWNlKDAsIHBhcmVuc0VuZCkgKyBzbGljZS5zbGljZShwYXJlbnNFbmQpLnJlcGxhY2UoX3RyaW0sICIiKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBzbGljZSA9IHNsaWNlLnJlcGxhY2UoX3RyaW0sICIiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc2xpY2UubGVuZ3RoIDw9IG1hdGNoWzBdLmxlbmd0aCkgewogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChvcHRpb25zLmlnbm9yZSAmJiBvcHRpb25zLmlnbm9yZS50ZXN0KHNsaWNlKSkgewogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVuZCA9IHN0YXJ0ICsgc2xpY2UubGVuZ3RoOwogICAgICAgICAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2soc2xpY2UsIHN0YXJ0LCBlbmQsIHN0cmluZyk7CiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgIF9zdGFydC5sYXN0SW5kZXggPSBlbmQ7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVzdWx0ID0gU3RyaW5nKHJlc3VsdCk7CiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZSgwLCBzdGFydCkgKyByZXN1bHQgKyBzdHJpbmcuc2xpY2UoZW5kKTsKICAgICAgICAgICAgX3N0YXJ0Lmxhc3RJbmRleCA9IHN0YXJ0ICsgcmVzdWx0Lmxlbmd0aDsKICAgICAgICAgIH0KICAgICAgICAgIF9zdGFydC5sYXN0SW5kZXggPSAwOwogICAgICAgICAgcmV0dXJuIHN0cmluZzsKICAgICAgICB9OwogICAgICAgIFVSSS5lbnN1cmVWYWxpZEhvc3RuYW1lID0gZnVuY3Rpb24odjMsIHByb3RvY29sKSB7CiAgICAgICAgICB2YXIgaGFzSG9zdG5hbWUgPSAhIXYzOwogICAgICAgICAgdmFyIGhhc1Byb3RvY29sID0gISFwcm90b2NvbDsKICAgICAgICAgIHZhciByZWplY3RFbXB0eUhvc3RuYW1lID0gZmFsc2U7CiAgICAgICAgICBpZiAoaGFzUHJvdG9jb2wpIHsKICAgICAgICAgICAgcmVqZWN0RW1wdHlIb3N0bmFtZSA9IGFycmF5Q29udGFpbnMoVVJJLmhvc3RQcm90b2NvbHMsIHByb3RvY29sKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChyZWplY3RFbXB0eUhvc3RuYW1lICYmICFoYXNIb3N0bmFtZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJIb3N0bmFtZSBjYW5ub3QgYmUgZW1wdHksIGlmIHByb3RvY29sIGlzICIgKyBwcm90b2NvbCk7CiAgICAgICAgICB9IGVsc2UgaWYgKHYzICYmIHYzLm1hdGNoKFVSSS5pbnZhbGlkX2hvc3RuYW1lX2NoYXJhY3RlcnMpKSB7CiAgICAgICAgICAgIGlmICghcHVueWNvZGUpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdIb3N0bmFtZSAiJyArIHYzICsgJyIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuLTpfXSBhbmQgUHVueWNvZGUuanMgaXMgbm90IGF2YWlsYWJsZScpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChwdW55Y29kZS50b0FTQ0lJKHYzKS5tYXRjaChVUkkuaW52YWxpZF9ob3N0bmFtZV9jaGFyYWN0ZXJzKSkgewogICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0hvc3RuYW1lICInICsgdjMgKyAnIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gW0EtWjAtOS4tOl9dJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIFVSSS5lbnN1cmVWYWxpZFBvcnQgPSBmdW5jdGlvbih2MykgewogICAgICAgICAgaWYgKCF2MykgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgcG9ydCA9IE51bWJlcih2Myk7CiAgICAgICAgICBpZiAoaXNJbnRlZ2VyKHBvcnQpICYmIHBvcnQgPiAwICYmIHBvcnQgPCA2NTUzNikgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQb3J0ICInICsgdjMgKyAnIiBpcyBub3QgYSB2YWxpZCBwb3J0Jyk7CiAgICAgICAgfTsKICAgICAgICBVUkkubm9Db25mbGljdCA9IGZ1bmN0aW9uKHJlbW92ZUFsbCkgewogICAgICAgICAgaWYgKHJlbW92ZUFsbCkgewogICAgICAgICAgICB2YXIgdW5jb25mbGljdGVkID0gewogICAgICAgICAgICAgIFVSSTogdGhpcy5ub0NvbmZsaWN0KCkKICAgICAgICAgICAgfTsKICAgICAgICAgICAgaWYgKHJvb3QuVVJJVGVtcGxhdGUgJiYgdHlwZW9mIHJvb3QuVVJJVGVtcGxhdGUubm9Db25mbGljdCA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAgIHVuY29uZmxpY3RlZC5VUklUZW1wbGF0ZSA9IHJvb3QuVVJJVGVtcGxhdGUubm9Db25mbGljdCgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChyb290LklQdjYgJiYgdHlwZW9mIHJvb3QuSVB2Ni5ub0NvbmZsaWN0ID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgdW5jb25mbGljdGVkLklQdjYgPSByb290LklQdjYubm9Db25mbGljdCgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChyb290LlNlY29uZExldmVsRG9tYWlucyAmJiB0eXBlb2Ygcm9vdC5TZWNvbmRMZXZlbERvbWFpbnMubm9Db25mbGljdCA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAgIHVuY29uZmxpY3RlZC5TZWNvbmRMZXZlbERvbWFpbnMgPSByb290LlNlY29uZExldmVsRG9tYWlucy5ub0NvbmZsaWN0KCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHVuY29uZmxpY3RlZDsKICAgICAgICAgIH0gZWxzZSBpZiAocm9vdC5VUkkgPT09IHRoaXMpIHsKICAgICAgICAgICAgcm9vdC5VUkkgPSBfVVJJOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfTsKICAgICAgICBwLmJ1aWxkID0gZnVuY3Rpb24oZGVmZXJCdWlsZCkgewogICAgICAgICAgaWYgKGRlZmVyQnVpbGQgPT09IHRydWUpIHsKICAgICAgICAgICAgdGhpcy5fZGVmZXJyZWRfYnVpbGQgPSB0cnVlOwogICAgICAgICAgfSBlbHNlIGlmIChkZWZlckJ1aWxkID09PSB2b2lkIDAgfHwgdGhpcy5fZGVmZXJyZWRfYnVpbGQpIHsKICAgICAgICAgICAgdGhpcy5fc3RyaW5nID0gVVJJLmJ1aWxkKHRoaXMuX3BhcnRzKTsKICAgICAgICAgICAgdGhpcy5fZGVmZXJyZWRfYnVpbGQgPSBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CiAgICAgICAgcC5jbG9uZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuIG5ldyBVUkkodGhpcyk7CiAgICAgICAgfTsKICAgICAgICBwLnZhbHVlT2YgPSBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5idWlsZChmYWxzZSkuX3N0cmluZzsKICAgICAgICB9OwogICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoX3BhcnQyKSB7CiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odjMsIGJ1aWxkKSB7CiAgICAgICAgICAgIGlmICh2MyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzW19wYXJ0Ml0gfHwgIiI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdGhpcy5fcGFydHNbX3BhcnQyXSA9IHYzIHx8IG51bGw7CiAgICAgICAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZVByZWZpeEFjY2Vzc29yKF9wYXJ0MiwgX2tleSkgewogICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHYzLCBidWlsZCkgewogICAgICAgICAgICBpZiAodjMgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJ0c1tfcGFydDJdIHx8ICIiOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGlmICh2MyAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgdjMgPSB2MyArICIiOwogICAgICAgICAgICAgICAgaWYgKHYzLmNoYXJBdCgwKSA9PT0gX2tleSkgewogICAgICAgICAgICAgICAgICB2MyA9IHYzLnN1YnN0cmluZygxKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdGhpcy5fcGFydHNbX3BhcnQyXSA9IHYzOwogICAgICAgICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgICAgcC5wcm90b2NvbCA9IGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoInByb3RvY29sIik7CiAgICAgICAgcC51c2VybmFtZSA9IGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoInVzZXJuYW1lIik7CiAgICAgICAgcC5wYXNzd29yZCA9IGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoInBhc3N3b3JkIik7CiAgICAgICAgcC5ob3N0bmFtZSA9IGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoImhvc3RuYW1lIik7CiAgICAgICAgcC5wb3J0ID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcigicG9ydCIpOwogICAgICAgIHAucXVlcnkgPSBnZW5lcmF0ZVByZWZpeEFjY2Vzc29yKCJxdWVyeSIsICI/Iik7CiAgICAgICAgcC5mcmFnbWVudCA9IGdlbmVyYXRlUHJlZml4QWNjZXNzb3IoImZyYWdtZW50IiwgIiMiKTsKICAgICAgICBwLnNlYXJjaCA9IGZ1bmN0aW9uKHYzLCBidWlsZCkgewogICAgICAgICAgdmFyIHQgPSB0aGlzLnF1ZXJ5KHYzLCBidWlsZCk7CiAgICAgICAgICByZXR1cm4gdHlwZW9mIHQgPT09ICJzdHJpbmciICYmIHQubGVuZ3RoID8gIj8iICsgdCA6IHQ7CiAgICAgICAgfTsKICAgICAgICBwLmhhc2ggPSBmdW5jdGlvbih2MywgYnVpbGQpIHsKICAgICAgICAgIHZhciB0ID0gdGhpcy5mcmFnbWVudCh2MywgYnVpbGQpOwogICAgICAgICAgcmV0dXJuIHR5cGVvZiB0ID09PSAic3RyaW5nIiAmJiB0Lmxlbmd0aCA/ICIjIiArIHQgOiB0OwogICAgICAgIH07CiAgICAgICAgcC5wYXRobmFtZSA9IGZ1bmN0aW9uKHYzLCBidWlsZCkgewogICAgICAgICAgaWYgKHYzID09PSB2b2lkIDAgfHwgdjMgPT09IHRydWUpIHsKICAgICAgICAgICAgdmFyIHJlcyA9IHRoaXMuX3BhcnRzLnBhdGggfHwgKHRoaXMuX3BhcnRzLmhvc3RuYW1lID8gIi8iIDogIiIpOwogICAgICAgICAgICByZXR1cm4gdjMgPyAodGhpcy5fcGFydHMudXJuID8gVVJJLmRlY29kZVVyblBhdGggOiBVUkkuZGVjb2RlUGF0aCkocmVzKSA6IHJlczsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgICAgICAgICB0aGlzLl9wYXJ0cy5wYXRoID0gdjMgPyBVUkkucmVjb2RlVXJuUGF0aCh2MykgOiAiIjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLl9wYXJ0cy5wYXRoID0gdjMgPyBVUkkucmVjb2RlUGF0aCh2MykgOiAiLyI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHAucGF0aCA9IHAucGF0aG5hbWU7CiAgICAgICAgcC5ocmVmID0gZnVuY3Rpb24oaHJlZiwgYnVpbGQpIHsKICAgICAgICAgIHZhciBrZXk7CiAgICAgICAgICBpZiAoaHJlZiA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLl9zdHJpbmcgPSAiIjsKICAgICAgICAgIHRoaXMuX3BhcnRzID0gVVJJLl9wYXJ0cygpOwogICAgICAgICAgdmFyIF9VUkkyID0gaHJlZiBpbnN0YW5jZW9mIFVSSTsKICAgICAgICAgIHZhciBfb2JqZWN0ID0gdHlwZW9mIGhyZWYgPT09ICJvYmplY3QiICYmIChocmVmLmhvc3RuYW1lIHx8IGhyZWYucGF0aCB8fCBocmVmLnBhdGhuYW1lKTsKICAgICAgICAgIGlmIChocmVmLm5vZGVOYW1lKSB7CiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBVUkkuZ2V0RG9tQXR0cmlidXRlKGhyZWYpOwogICAgICAgICAgICBocmVmID0gaHJlZlthdHRyaWJ1dGVdIHx8ICIiOwogICAgICAgICAgICBfb2JqZWN0ID0gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIV9VUkkyICYmIF9vYmplY3QgJiYgaHJlZi5wYXRobmFtZSAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgIGhyZWYgPSBocmVmLnRvU3RyaW5nKCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodHlwZW9mIGhyZWYgPT09ICJzdHJpbmciIHx8IGhyZWYgaW5zdGFuY2VvZiBTdHJpbmcpIHsKICAgICAgICAgICAgdGhpcy5fcGFydHMgPSBVUkkucGFyc2UoU3RyaW5nKGhyZWYpLCB0aGlzLl9wYXJ0cyk7CiAgICAgICAgICB9IGVsc2UgaWYgKF9VUkkyIHx8IF9vYmplY3QpIHsKICAgICAgICAgICAgdmFyIHNyYyA9IF9VUkkyID8gaHJlZi5fcGFydHMgOiBocmVmOwogICAgICAgICAgICBmb3IgKGtleSBpbiBzcmMpIHsKICAgICAgICAgICAgICBpZiAoa2V5ID09PSAicXVlcnkiKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKHRoaXMuX3BhcnRzLCBrZXkpKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9wYXJ0c1trZXldID0gc3JjW2tleV07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChzcmMucXVlcnkpIHsKICAgICAgICAgICAgICB0aGlzLnF1ZXJ5KHNyYy5xdWVyeSwgZmFsc2UpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJpbnZhbGlkIGlucHV0Iik7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICAgIHAuaXMgPSBmdW5jdGlvbih3aGF0KSB7CiAgICAgICAgICB2YXIgaXAgPSBmYWxzZTsKICAgICAgICAgIHZhciBpcDQgPSBmYWxzZTsKICAgICAgICAgIHZhciBpcDYgPSBmYWxzZTsKICAgICAgICAgIHZhciBuYW1lID0gZmFsc2U7CiAgICAgICAgICB2YXIgc2xkID0gZmFsc2U7CiAgICAgICAgICB2YXIgaWRuID0gZmFsc2U7CiAgICAgICAgICB2YXIgcHVueWNvZGUyID0gZmFsc2U7CiAgICAgICAgICB2YXIgcmVsYXRpdmUgPSAhdGhpcy5fcGFydHMudXJuOwogICAgICAgICAgaWYgKHRoaXMuX3BhcnRzLmhvc3RuYW1lKSB7CiAgICAgICAgICAgIHJlbGF0aXZlID0gZmFsc2U7CiAgICAgICAgICAgIGlwNCA9IFVSSS5pcDRfZXhwcmVzc2lvbi50ZXN0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKTsKICAgICAgICAgICAgaXA2ID0gVVJJLmlwNl9leHByZXNzaW9uLnRlc3QodGhpcy5fcGFydHMuaG9zdG5hbWUpOwogICAgICAgICAgICBpcCA9IGlwNCB8fCBpcDY7CiAgICAgICAgICAgIG5hbWUgPSAhaXA7CiAgICAgICAgICAgIHNsZCA9IG5hbWUgJiYgU0xEICYmIFNMRC5oYXModGhpcy5fcGFydHMuaG9zdG5hbWUpOwogICAgICAgICAgICBpZG4gPSBuYW1lICYmIFVSSS5pZG5fZXhwcmVzc2lvbi50ZXN0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKTsKICAgICAgICAgICAgcHVueWNvZGUyID0gbmFtZSAmJiBVUkkucHVueWNvZGVfZXhwcmVzc2lvbi50ZXN0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKTsKICAgICAgICAgIH0KICAgICAgICAgIHN3aXRjaCAod2hhdC50b0xvd2VyQ2FzZSgpKSB7CiAgICAgICAgICAgIGNhc2UgInJlbGF0aXZlIjoKICAgICAgICAgICAgICByZXR1cm4gcmVsYXRpdmU7CiAgICAgICAgICAgIGNhc2UgImFic29sdXRlIjoKICAgICAgICAgICAgICByZXR1cm4gIXJlbGF0aXZlOwogICAgICAgICAgICBjYXNlICJkb21haW4iOgogICAgICAgICAgICBjYXNlICJuYW1lIjoKICAgICAgICAgICAgICByZXR1cm4gbmFtZTsKICAgICAgICAgICAgY2FzZSAic2xkIjoKICAgICAgICAgICAgICByZXR1cm4gc2xkOwogICAgICAgICAgICBjYXNlICJpcCI6CiAgICAgICAgICAgICAgcmV0dXJuIGlwOwogICAgICAgICAgICBjYXNlICJpcDQiOgogICAgICAgICAgICBjYXNlICJpcHY0IjoKICAgICAgICAgICAgY2FzZSAiaW5ldDQiOgogICAgICAgICAgICAgIHJldHVybiBpcDQ7CiAgICAgICAgICAgIGNhc2UgImlwNiI6CiAgICAgICAgICAgIGNhc2UgImlwdjYiOgogICAgICAgICAgICBjYXNlICJpbmV0NiI6CiAgICAgICAgICAgICAgcmV0dXJuIGlwNjsKICAgICAgICAgICAgY2FzZSAiaWRuIjoKICAgICAgICAgICAgICByZXR1cm4gaWRuOwogICAgICAgICAgICBjYXNlICJ1cmwiOgogICAgICAgICAgICAgIHJldHVybiAhdGhpcy5fcGFydHMudXJuOwogICAgICAgICAgICBjYXNlICJ1cm4iOgogICAgICAgICAgICAgIHJldHVybiAhIXRoaXMuX3BhcnRzLnVybjsKICAgICAgICAgICAgY2FzZSAicHVueWNvZGUiOgogICAgICAgICAgICAgIHJldHVybiBwdW55Y29kZTI7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9OwogICAgICAgIHZhciBfcHJvdG9jb2wgPSBwLnByb3RvY29sOwogICAgICAgIHZhciBfcG9ydCA9IHAucG9ydDsKICAgICAgICB2YXIgX2hvc3RuYW1lID0gcC5ob3N0bmFtZTsKICAgICAgICBwLnByb3RvY29sID0gZnVuY3Rpb24odjMsIGJ1aWxkKSB7CiAgICAgICAgICBpZiAodjMpIHsKICAgICAgICAgICAgdjMgPSB2My5yZXBsYWNlKC86KFwvXC8pPyQvLCAiIik7CiAgICAgICAgICAgIGlmICghdjMubWF0Y2goVVJJLnByb3RvY29sX2V4cHJlc3Npb24pKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvdG9jb2wgIicgKyB2MyArIGAiIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbQS1aMC05ListXSBvciBkb2Vzbid0IHN0YXJ0IHdpdGggW0EtWl1gKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIF9wcm90b2NvbC5jYWxsKHRoaXMsIHYzLCBidWlsZCk7CiAgICAgICAgfTsKICAgICAgICBwLnNjaGVtZSA9IHAucHJvdG9jb2w7CiAgICAgICAgcC5wb3J0ID0gZnVuY3Rpb24odjMsIGJ1aWxkKSB7CiAgICAgICAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgICAgICAgIHJldHVybiB2MyA9PT0gdm9pZCAwID8gIiIgOiB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHYzICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgaWYgKHYzID09PSAwKSB7CiAgICAgICAgICAgICAgdjMgPSBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh2MykgewogICAgICAgICAgICAgIHYzICs9ICIiOwogICAgICAgICAgICAgIGlmICh2My5jaGFyQXQoMCkgPT09ICI6IikgewogICAgICAgICAgICAgICAgdjMgPSB2My5zdWJzdHJpbmcoMSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIFVSSS5lbnN1cmVWYWxpZFBvcnQodjMpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gX3BvcnQuY2FsbCh0aGlzLCB2MywgYnVpbGQpOwogICAgICAgIH07CiAgICAgICAgcC5ob3N0bmFtZSA9IGZ1bmN0aW9uKHYzLCBidWlsZCkgewogICAgICAgICAgaWYgKHRoaXMuX3BhcnRzLnVybikgewogICAgICAgICAgICByZXR1cm4gdjMgPT09IHZvaWQgMCA/ICIiIDogdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2MyAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHZhciB4ID0geyBwcmV2ZW50SW52YWxpZEhvc3RuYW1lOiB0aGlzLl9wYXJ0cy5wcmV2ZW50SW52YWxpZEhvc3RuYW1lIH07CiAgICAgICAgICAgIHZhciByZXMgPSBVUkkucGFyc2VIb3N0KHYzLCB4KTsKICAgICAgICAgICAgaWYgKHJlcyAhPT0gIi8iKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSG9zdG5hbWUgIicgKyB2MyArICciIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbQS1aMC05Li1dJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdjMgPSB4Lmhvc3RuYW1lOwogICAgICAgICAgICBpZiAodGhpcy5fcGFydHMucHJldmVudEludmFsaWRIb3N0bmFtZSkgewogICAgICAgICAgICAgIFVSSS5lbnN1cmVWYWxpZEhvc3RuYW1lKHYzLCB0aGlzLl9wYXJ0cy5wcm90b2NvbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBfaG9zdG5hbWUuY2FsbCh0aGlzLCB2MywgYnVpbGQpOwogICAgICAgIH07CiAgICAgICAgcC5vcmlnaW4gPSBmdW5jdGlvbih2MywgYnVpbGQpIHsKICAgICAgICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgICAgICAgcmV0dXJuIHYzID09PSB2b2lkIDAgPyAiIiA6IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodjMgPT09IHZvaWQgMCkgewogICAgICAgICAgICB2YXIgcHJvdG9jb2wgPSB0aGlzLnByb3RvY29sKCk7CiAgICAgICAgICAgIHZhciBhdXRob3JpdHkgPSB0aGlzLmF1dGhvcml0eSgpOwogICAgICAgICAgICBpZiAoIWF1dGhvcml0eSkgewogICAgICAgICAgICAgIHJldHVybiAiIjsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gKHByb3RvY29sID8gcHJvdG9jb2wgKyAiOi8vIiA6ICIiKSArIHRoaXMuYXV0aG9yaXR5KCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgb3JpZ2luID0gVVJJKHYzKTsKICAgICAgICAgICAgdGhpcy5wcm90b2NvbChvcmlnaW4ucHJvdG9jb2woKSkuYXV0aG9yaXR5KG9yaWdpbi5hdXRob3JpdHkoKSkuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBwLmhvc3QgPSBmdW5jdGlvbih2MywgYnVpbGQpIHsKICAgICAgICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgICAgICAgcmV0dXJuIHYzID09PSB2b2lkIDAgPyAiIiA6IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodjMgPT09IHZvaWQgMCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFydHMuaG9zdG5hbWUgPyBVUkkuYnVpbGRIb3N0KHRoaXMuX3BhcnRzKSA6ICIiOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIHJlcyA9IFVSSS5wYXJzZUhvc3QodjMsIHRoaXMuX3BhcnRzKTsKICAgICAgICAgICAgaWYgKHJlcyAhPT0gIi8iKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSG9zdG5hbWUgIicgKyB2MyArICciIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbQS1aMC05Li1dJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHAuYXV0aG9yaXR5ID0gZnVuY3Rpb24odjMsIGJ1aWxkKSB7CiAgICAgICAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgICAgICAgIHJldHVybiB2MyA9PT0gdm9pZCAwID8gIiIgOiB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHYzID09PSB2b2lkIDApIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzLmhvc3RuYW1lID8gVVJJLmJ1aWxkQXV0aG9yaXR5KHRoaXMuX3BhcnRzKSA6ICIiOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIHJlcyA9IFVSSS5wYXJzZUF1dGhvcml0eSh2MywgdGhpcy5fcGFydHMpOwogICAgICAgICAgICBpZiAocmVzICE9PSAiLyIpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdIb3N0bmFtZSAiJyArIHYzICsgJyIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuLV0nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgcC51c2VyaW5mbyA9IGZ1bmN0aW9uKHYzLCBidWlsZCkgewogICAgICAgICAgaWYgKHRoaXMuX3BhcnRzLnVybikgewogICAgICAgICAgICByZXR1cm4gdjMgPT09IHZvaWQgMCA/ICIiIDogdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2MyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHZhciB0ID0gVVJJLmJ1aWxkVXNlcmluZm8odGhpcy5fcGFydHMpOwogICAgICAgICAgICByZXR1cm4gdCA/IHQuc3Vic3RyaW5nKDAsIHQubGVuZ3RoIC0gMSkgOiB0OwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKHYzW3YzLmxlbmd0aCAtIDFdICE9PSAiQCIpIHsKICAgICAgICAgICAgICB2MyArPSAiQCI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgVVJJLnBhcnNlVXNlcmluZm8odjMsIHRoaXMuX3BhcnRzKTsKICAgICAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHAucmVzb3VyY2UgPSBmdW5jdGlvbih2MywgYnVpbGQpIHsKICAgICAgICAgIHZhciBwYXJ0czsKICAgICAgICAgIGlmICh2MyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhdGgoKSArIHRoaXMuc2VhcmNoKCkgKyB0aGlzLmhhc2goKTsKICAgICAgICAgIH0KICAgICAgICAgIHBhcnRzID0gVVJJLnBhcnNlKHYzKTsKICAgICAgICAgIHRoaXMuX3BhcnRzLnBhdGggPSBwYXJ0cy5wYXRoOwogICAgICAgICAgdGhpcy5fcGFydHMucXVlcnkgPSBwYXJ0cy5xdWVyeTsKICAgICAgICAgIHRoaXMuX3BhcnRzLmZyYWdtZW50ID0gcGFydHMuZnJhZ21lbnQ7CiAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICAgIHAuc3ViZG9tYWluID0gZnVuY3Rpb24odjMsIGJ1aWxkKSB7CiAgICAgICAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgICAgICAgIHJldHVybiB2MyA9PT0gdm9pZCAwID8gIiIgOiB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHYzID09PSB2b2lkIDApIHsKICAgICAgICAgICAgaWYgKCF0aGlzLl9wYXJ0cy5ob3N0bmFtZSB8fCB0aGlzLmlzKCJJUCIpKSB7CiAgICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBlbmQgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5sZW5ndGggLSB0aGlzLmRvbWFpbigpLmxlbmd0aCAtIDE7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5zdWJzdHJpbmcoMCwgZW5kKSB8fCAiIjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBlID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubGVuZ3RoIC0gdGhpcy5kb21haW4oKS5sZW5ndGg7CiAgICAgICAgICAgIHZhciBzdWIgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5zdWJzdHJpbmcoMCwgZSk7CiAgICAgICAgICAgIHZhciByZXBsYWNlID0gbmV3IFJlZ0V4cCgiXiIgKyBlc2NhcGVSZWdFeChzdWIpKTsKICAgICAgICAgICAgaWYgKHYzICYmIHYzLmNoYXJBdCh2My5sZW5ndGggLSAxKSAhPT0gIi4iKSB7CiAgICAgICAgICAgICAgdjMgKz0gIi4iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh2My5pbmRleE9mKCI6IikgIT09IC0xKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiRG9tYWlucyBjYW5ub3QgY29udGFpbiBjb2xvbnMiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodjMpIHsKICAgICAgICAgICAgICBVUkkuZW5zdXJlVmFsaWRIb3N0bmFtZSh2MywgdGhpcy5fcGFydHMucHJvdG9jb2wpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdGhpcy5fcGFydHMuaG9zdG5hbWUucmVwbGFjZShyZXBsYWNlLCB2Myk7CiAgICAgICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBwLmRvbWFpbiA9IGZ1bmN0aW9uKHYzLCBidWlsZCkgewogICAgICAgICAgaWYgKHRoaXMuX3BhcnRzLnVybikgewogICAgICAgICAgICByZXR1cm4gdjMgPT09IHZvaWQgMCA/ICIiIDogdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0eXBlb2YgdjMgPT09ICJib29sZWFuIikgewogICAgICAgICAgICBidWlsZCA9IHYzOwogICAgICAgICAgICB2MyA9IHZvaWQgMDsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2MyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIGlmICghdGhpcy5fcGFydHMuaG9zdG5hbWUgfHwgdGhpcy5pcygiSVAiKSkgewogICAgICAgICAgICAgIHJldHVybiAiIjsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgdCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLm1hdGNoKC9cLi9nKTsKICAgICAgICAgICAgaWYgKHQgJiYgdC5sZW5ndGggPCAyKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzLmhvc3RuYW1lOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBlbmQgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5sZW5ndGggLSB0aGlzLnRsZChidWlsZCkubGVuZ3RoIC0gMTsKICAgICAgICAgICAgZW5kID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubGFzdEluZGV4T2YoIi4iLCBlbmQgLSAxKSArIDE7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5zdWJzdHJpbmcoZW5kKSB8fCAiIjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICghdjMpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJjYW5ub3Qgc2V0IGRvbWFpbiBlbXB0eSIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh2My5pbmRleE9mKCI6IikgIT09IC0xKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiRG9tYWlucyBjYW5ub3QgY29udGFpbiBjb2xvbnMiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBVUkkuZW5zdXJlVmFsaWRIb3N0bmFtZSh2MywgdGhpcy5fcGFydHMucHJvdG9jb2wpOwogICAgICAgICAgICBpZiAoIXRoaXMuX3BhcnRzLmhvc3RuYW1lIHx8IHRoaXMuaXMoIklQIikpIHsKICAgICAgICAgICAgICB0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IHYzOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHZhciByZXBsYWNlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeCh0aGlzLmRvbWFpbigpKSArICIkIik7CiAgICAgICAgICAgICAgdGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5yZXBsYWNlKHJlcGxhY2UsIHYzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgcC50bGQgPSBmdW5jdGlvbih2MywgYnVpbGQpIHsKICAgICAgICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgICAgICAgcmV0dXJuIHYzID09PSB2b2lkIDAgPyAiIiA6IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodHlwZW9mIHYzID09PSAiYm9vbGVhbiIpIHsKICAgICAgICAgICAgYnVpbGQgPSB2MzsKICAgICAgICAgICAgdjMgPSB2b2lkIDA7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodjMgPT09IHZvaWQgMCkgewogICAgICAgICAgICBpZiAoIXRoaXMuX3BhcnRzLmhvc3RuYW1lIHx8IHRoaXMuaXMoIklQIikpIHsKICAgICAgICAgICAgICByZXR1cm4gIiI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHBvcyA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLmxhc3RJbmRleE9mKCIuIik7CiAgICAgICAgICAgIHZhciB0bGQgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5zdWJzdHJpbmcocG9zICsgMSk7CiAgICAgICAgICAgIGlmIChidWlsZCAhPT0gdHJ1ZSAmJiBTTEQgJiYgU0xELmxpc3RbdGxkLnRvTG93ZXJDYXNlKCldKSB7CiAgICAgICAgICAgICAgcmV0dXJuIFNMRC5nZXQodGhpcy5fcGFydHMuaG9zdG5hbWUpIHx8IHRsZDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGxkOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIHJlcGxhY2U7CiAgICAgICAgICAgIGlmICghdjMpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJjYW5ub3Qgc2V0IFRMRCBlbXB0eSIpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHYzLm1hdGNoKC9bXmEtekEtWjAtOS1dLykpIHsKICAgICAgICAgICAgICBpZiAoU0xEICYmIFNMRC5pcyh2MykpIHsKICAgICAgICAgICAgICAgIHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHRoaXMudGxkKCkpICsgIiQiKTsKICAgICAgICAgICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdGhpcy5fcGFydHMuaG9zdG5hbWUucmVwbGFjZShyZXBsYWNlLCB2Myk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RMRCAiJyArIHYzICsgJyIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTldJyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9wYXJ0cy5ob3N0bmFtZSB8fCB0aGlzLmlzKCJJUCIpKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJjYW5ub3Qgc2V0IFRMRCBvbiBub24tZG9tYWluIGhvc3QiKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXBsYWNlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeCh0aGlzLnRsZCgpKSArICIkIik7CiAgICAgICAgICAgICAgdGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5yZXBsYWNlKHJlcGxhY2UsIHYzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgcC5kaXJlY3RvcnkgPSBmdW5jdGlvbih2MywgYnVpbGQpIHsKICAgICAgICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgICAgICAgcmV0dXJuIHYzID09PSB2b2lkIDAgPyAiIiA6IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodjMgPT09IHZvaWQgMCB8fCB2MyA9PT0gdHJ1ZSkgewogICAgICAgICAgICBpZiAoIXRoaXMuX3BhcnRzLnBhdGggJiYgIXRoaXMuX3BhcnRzLmhvc3RuYW1lKSB7CiAgICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0aGlzLl9wYXJ0cy5wYXRoID09PSAiLyIpIHsKICAgICAgICAgICAgICByZXR1cm4gIi8iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBlbmQgPSB0aGlzLl9wYXJ0cy5wYXRoLmxlbmd0aCAtIHRoaXMuZmlsZW5hbWUoKS5sZW5ndGggLSAxOwogICAgICAgICAgICB2YXIgcmVzID0gdGhpcy5fcGFydHMucGF0aC5zdWJzdHJpbmcoMCwgZW5kKSB8fCAodGhpcy5fcGFydHMuaG9zdG5hbWUgPyAiLyIgOiAiIik7CiAgICAgICAgICAgIHJldHVybiB2MyA/IFVSSS5kZWNvZGVQYXRoKHJlcykgOiByZXM7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgZSA9IHRoaXMuX3BhcnRzLnBhdGgubGVuZ3RoIC0gdGhpcy5maWxlbmFtZSgpLmxlbmd0aDsKICAgICAgICAgICAgdmFyIGRpcmVjdG9yeSA9IHRoaXMuX3BhcnRzLnBhdGguc3Vic3RyaW5nKDAsIGUpOwogICAgICAgICAgICB2YXIgcmVwbGFjZSA9IG5ldyBSZWdFeHAoIl4iICsgZXNjYXBlUmVnRXgoZGlyZWN0b3J5KSk7CiAgICAgICAgICAgIGlmICghdGhpcy5pcygicmVsYXRpdmUiKSkgewogICAgICAgICAgICAgIGlmICghdjMpIHsKICAgICAgICAgICAgICAgIHYzID0gIi8iOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAodjMuY2hhckF0KDApICE9PSAiLyIpIHsKICAgICAgICAgICAgICAgIHYzID0gIi8iICsgdjM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh2MyAmJiB2My5jaGFyQXQodjMubGVuZ3RoIC0gMSkgIT09ICIvIikgewogICAgICAgICAgICAgIHYzICs9ICIvIjsKICAgICAgICAgICAgfQogICAgICAgICAgICB2MyA9IFVSSS5yZWNvZGVQYXRoKHYzKTsKICAgICAgICAgICAgdGhpcy5fcGFydHMucGF0aCA9IHRoaXMuX3BhcnRzLnBhdGgucmVwbGFjZShyZXBsYWNlLCB2Myk7CiAgICAgICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBwLmZpbGVuYW1lID0gZnVuY3Rpb24odjMsIGJ1aWxkKSB7CiAgICAgICAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgICAgICAgIHJldHVybiB2MyA9PT0gdm9pZCAwID8gIiIgOiB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHR5cGVvZiB2MyAhPT0gInN0cmluZyIpIHsKICAgICAgICAgICAgaWYgKCF0aGlzLl9wYXJ0cy5wYXRoIHx8IHRoaXMuX3BhcnRzLnBhdGggPT09ICIvIikgewogICAgICAgICAgICAgIHJldHVybiAiIjsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcG9zID0gdGhpcy5fcGFydHMucGF0aC5sYXN0SW5kZXhPZigiLyIpOwogICAgICAgICAgICB2YXIgcmVzID0gdGhpcy5fcGFydHMucGF0aC5zdWJzdHJpbmcocG9zICsgMSk7CiAgICAgICAgICAgIHJldHVybiB2MyA/IFVSSS5kZWNvZGVQYXRoU2VnbWVudChyZXMpIDogcmVzOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIG11dGF0ZWREaXJlY3RvcnkgPSBmYWxzZTsKICAgICAgICAgICAgaWYgKHYzLmNoYXJBdCgwKSA9PT0gIi8iKSB7CiAgICAgICAgICAgICAgdjMgPSB2My5zdWJzdHJpbmcoMSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHYzLm1hdGNoKC9cLj9cLy8pKSB7CiAgICAgICAgICAgICAgbXV0YXRlZERpcmVjdG9yeSA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHRoaXMuZmlsZW5hbWUoKSkgKyAiJCIpOwogICAgICAgICAgICB2MyA9IFVSSS5yZWNvZGVQYXRoKHYzKTsKICAgICAgICAgICAgdGhpcy5fcGFydHMucGF0aCA9IHRoaXMuX3BhcnRzLnBhdGgucmVwbGFjZShyZXBsYWNlLCB2Myk7CiAgICAgICAgICAgIGlmIChtdXRhdGVkRGlyZWN0b3J5KSB7CiAgICAgICAgICAgICAgdGhpcy5ub3JtYWxpemVQYXRoKGJ1aWxkKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBwLnN1ZmZpeCA9IGZ1bmN0aW9uKHYzLCBidWlsZCkgewogICAgICAgICAgaWYgKHRoaXMuX3BhcnRzLnVybikgewogICAgICAgICAgICByZXR1cm4gdjMgPT09IHZvaWQgMCA/ICIiIDogdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2MyA9PT0gdm9pZCAwIHx8IHYzID09PSB0cnVlKSB7CiAgICAgICAgICAgIGlmICghdGhpcy5fcGFydHMucGF0aCB8fCB0aGlzLl9wYXJ0cy5wYXRoID09PSAiLyIpIHsKICAgICAgICAgICAgICByZXR1cm4gIiI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGZpbGVuYW1lID0gdGhpcy5maWxlbmFtZSgpOwogICAgICAgICAgICB2YXIgcG9zID0gZmlsZW5hbWUubGFzdEluZGV4T2YoIi4iKTsKICAgICAgICAgICAgdmFyIHMsIHJlczsKICAgICAgICAgICAgaWYgKHBvcyA9PT0gLTEpIHsKICAgICAgICAgICAgICByZXR1cm4gIiI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcyA9IGZpbGVuYW1lLnN1YnN0cmluZyhwb3MgKyAxKTsKICAgICAgICAgICAgcmVzID0gL15bYS16MC05JV0rJC9pLnRlc3QocykgPyBzIDogIiI7CiAgICAgICAgICAgIHJldHVybiB2MyA/IFVSSS5kZWNvZGVQYXRoU2VnbWVudChyZXMpIDogcmVzOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKHYzLmNoYXJBdCgwKSA9PT0gIi4iKSB7CiAgICAgICAgICAgICAgdjMgPSB2My5zdWJzdHJpbmcoMSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHN1ZmZpeCA9IHRoaXMuc3VmZml4KCk7CiAgICAgICAgICAgIHZhciByZXBsYWNlOwogICAgICAgICAgICBpZiAoIXN1ZmZpeCkgewogICAgICAgICAgICAgIGlmICghdjMpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB0aGlzLl9wYXJ0cy5wYXRoICs9ICIuIiArIFVSSS5yZWNvZGVQYXRoKHYzKTsKICAgICAgICAgICAgfSBlbHNlIGlmICghdjMpIHsKICAgICAgICAgICAgICByZXBsYWNlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeCgiLiIgKyBzdWZmaXgpICsgIiQiKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXBsYWNlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeChzdWZmaXgpICsgIiQiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocmVwbGFjZSkgewogICAgICAgICAgICAgIHYzID0gVVJJLnJlY29kZVBhdGgodjMpOwogICAgICAgICAgICAgIHRoaXMuX3BhcnRzLnBhdGggPSB0aGlzLl9wYXJ0cy5wYXRoLnJlcGxhY2UocmVwbGFjZSwgdjMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBwLnNlZ21lbnQgPSBmdW5jdGlvbihzZWdtZW50LCB2MywgYnVpbGQpIHsKICAgICAgICAgIHZhciBzZXBhcmF0b3IgPSB0aGlzLl9wYXJ0cy51cm4gPyAiOiIgOiAiLyI7CiAgICAgICAgICB2YXIgcGF0aCA9IHRoaXMucGF0aCgpOwogICAgICAgICAgdmFyIGFic29sdXRlID0gcGF0aC5zdWJzdHJpbmcoMCwgMSkgPT09ICIvIjsKICAgICAgICAgIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoc2VwYXJhdG9yKTsKICAgICAgICAgIGlmIChzZWdtZW50ICE9PSB2b2lkIDAgJiYgdHlwZW9mIHNlZ21lbnQgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICAgIGJ1aWxkID0gdjM7CiAgICAgICAgICAgIHYzID0gc2VnbWVudDsKICAgICAgICAgICAgc2VnbWVudCA9IHZvaWQgMDsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzZWdtZW50ICE9PSB2b2lkIDAgJiYgdHlwZW9mIHNlZ21lbnQgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQmFkIHNlZ21lbnQgIicgKyBzZWdtZW50ICsgJyIsIG11c3QgYmUgMC1iYXNlZCBpbnRlZ2VyJyk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoYWJzb2x1dGUpIHsKICAgICAgICAgICAgc2VnbWVudHMuc2hpZnQoKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzZWdtZW50IDwgMCkgewogICAgICAgICAgICBzZWdtZW50ID0gTWF0aC5tYXgoc2VnbWVudHMubGVuZ3RoICsgc2VnbWVudCwgMCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodjMgPT09IHZvaWQgMCkgewogICAgICAgICAgICByZXR1cm4gc2VnbWVudCA9PT0gdm9pZCAwID8gc2VnbWVudHMgOiBzZWdtZW50c1tzZWdtZW50XTsKICAgICAgICAgIH0gZWxzZSBpZiAoc2VnbWVudCA9PT0gbnVsbCB8fCBzZWdtZW50c1tzZWdtZW50XSA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIGlmIChpc0FycmF5KHYzKSkgewogICAgICAgICAgICAgIHNlZ21lbnRzID0gW107CiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2My5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmICghdjNbaV0ubGVuZ3RoICYmICghc2VnbWVudHMubGVuZ3RoIHx8ICFzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLSAxXS5sZW5ndGgpKSB7CiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCAmJiAhc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0gMV0ubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgIHNlZ21lbnRzLnBvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc2VnbWVudHMucHVzaCh0cmltU2xhc2hlcyh2M1tpXSkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmICh2MyB8fCB0eXBlb2YgdjMgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgdjMgPSB0cmltU2xhc2hlcyh2Myk7CiAgICAgICAgICAgICAgaWYgKHNlZ21lbnRzW3NlZ21lbnRzLmxlbmd0aCAtIDFdID09PSAiIikgewogICAgICAgICAgICAgICAgc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0gMV0gPSB2MzsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc2VnbWVudHMucHVzaCh2Myk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAodjMpIHsKICAgICAgICAgICAgICBzZWdtZW50c1tzZWdtZW50XSA9IHRyaW1TbGFzaGVzKHYzKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBzZWdtZW50cy5zcGxpY2Uoc2VnbWVudCwgMSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChhYnNvbHV0ZSkgewogICAgICAgICAgICBzZWdtZW50cy51bnNoaWZ0KCIiKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aGlzLnBhdGgoc2VnbWVudHMuam9pbihzZXBhcmF0b3IpLCBidWlsZCk7CiAgICAgICAgfTsKICAgICAgICBwLnNlZ21lbnRDb2RlZCA9IGZ1bmN0aW9uKHNlZ21lbnQsIHYzLCBidWlsZCkgewogICAgICAgICAgdmFyIHNlZ21lbnRzLCBpLCBsOwogICAgICAgICAgaWYgKHR5cGVvZiBzZWdtZW50ICE9PSAibnVtYmVyIikgewogICAgICAgICAgICBidWlsZCA9IHYzOwogICAgICAgICAgICB2MyA9IHNlZ21lbnQ7CiAgICAgICAgICAgIHNlZ21lbnQgPSB2b2lkIDA7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodjMgPT09IHZvaWQgMCkgewogICAgICAgICAgICBzZWdtZW50cyA9IHRoaXMuc2VnbWVudChzZWdtZW50LCB2MywgYnVpbGQpOwogICAgICAgICAgICBpZiAoIWlzQXJyYXkoc2VnbWVudHMpKSB7CiAgICAgICAgICAgICAgc2VnbWVudHMgPSBzZWdtZW50cyAhPT0gdm9pZCAwID8gVVJJLmRlY29kZShzZWdtZW50cykgOiB2b2lkIDA7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICAgICAgc2VnbWVudHNbaV0gPSBVUkkuZGVjb2RlKHNlZ21lbnRzW2ldKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNlZ21lbnRzOwogICAgICAgICAgfQogICAgICAgICAgaWYgKCFpc0FycmF5KHYzKSkgewogICAgICAgICAgICB2MyA9IHR5cGVvZiB2MyA9PT0gInN0cmluZyIgfHwgdjMgaW5zdGFuY2VvZiBTdHJpbmcgPyBVUkkuZW5jb2RlKHYzKSA6IHYzOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHYzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICAgIHYzW2ldID0gVVJJLmVuY29kZSh2M1tpXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aGlzLnNlZ21lbnQoc2VnbWVudCwgdjMsIGJ1aWxkKTsKICAgICAgICB9OwogICAgICAgIHZhciBxID0gcC5xdWVyeTsKICAgICAgICBwLnF1ZXJ5ID0gZnVuY3Rpb24odjMsIGJ1aWxkKSB7CiAgICAgICAgICBpZiAodjMgPT09IHRydWUpIHsKICAgICAgICAgICAgcmV0dXJuIFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTsKICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHYzID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgIHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgICAgICAgICB2YXIgcmVzdWx0ID0gdjMuY2FsbCh0aGlzLCBkYXRhKTsKICAgICAgICAgICAgdGhpcy5fcGFydHMucXVlcnkgPSBVUkkuYnVpbGRRdWVyeShyZXN1bHQgfHwgZGF0YSwgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTsKICAgICAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0gZWxzZSBpZiAodjMgIT09IHZvaWQgMCAmJiB0eXBlb2YgdjMgIT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIHRoaXMuX3BhcnRzLnF1ZXJ5ID0gVVJJLmJ1aWxkUXVlcnkodjMsIHRoaXMuX3BhcnRzLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7CiAgICAgICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gcS5jYWxsKHRoaXMsIHYzLCBidWlsZCk7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBwLnNldFF1ZXJ5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIGJ1aWxkKSB7CiAgICAgICAgICB2YXIgZGF0YSA9IFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTsKICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gInN0cmluZyIgfHwgbmFtZSBpbnN0YW5jZW9mIFN0cmluZykgewogICAgICAgICAgICBkYXRhW25hbWVdID0gdmFsdWUgIT09IHZvaWQgMCA/IHZhbHVlIDogbnVsbDsKICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBuYW1lKSB7CiAgICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKG5hbWUsIGtleSkpIHsKICAgICAgICAgICAgICAgIGRhdGFba2V5XSA9IG5hbWVba2V5XTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlVSSS5hZGRRdWVyeSgpIGFjY2VwdHMgYW4gb2JqZWN0LCBzdHJpbmcgYXMgdGhlIG5hbWUgcGFyYW1ldGVyIik7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLl9wYXJ0cy5xdWVyeSA9IFVSSS5idWlsZFF1ZXJ5KGRhdGEsIHRoaXMuX3BhcnRzLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7CiAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIGJ1aWxkID0gdmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICAgIHAuYWRkUXVlcnkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgYnVpbGQpIHsKICAgICAgICAgIHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgICAgICAgVVJJLmFkZFF1ZXJ5KGRhdGEsIG5hbWUsIHZhbHVlID09PSB2b2lkIDAgPyBudWxsIDogdmFsdWUpOwogICAgICAgICAgdGhpcy5fcGFydHMucXVlcnkgPSBVUkkuYnVpbGRRdWVyeShkYXRhLCB0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAic3RyaW5nIikgewogICAgICAgICAgICBidWlsZCA9IHZhbHVlOwogICAgICAgICAgfQogICAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfTsKICAgICAgICBwLnJlbW92ZVF1ZXJ5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIGJ1aWxkKSB7CiAgICAgICAgICB2YXIgZGF0YSA9IFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTsKICAgICAgICAgIFVSSS5yZW1vdmVRdWVyeShkYXRhLCBuYW1lLCB2YWx1ZSk7CiAgICAgICAgICB0aGlzLl9wYXJ0cy5xdWVyeSA9IFVSSS5idWlsZFF1ZXJ5KGRhdGEsIHRoaXMuX3BhcnRzLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7CiAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIGJ1aWxkID0gdmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICAgIHAuaGFzUXVlcnkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgd2l0aGluQXJyYXkpIHsKICAgICAgICAgIHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgICAgICAgcmV0dXJuIFVSSS5oYXNRdWVyeShkYXRhLCBuYW1lLCB2YWx1ZSwgd2l0aGluQXJyYXkpOwogICAgICAgIH07CiAgICAgICAgcC5zZXRTZWFyY2ggPSBwLnNldFF1ZXJ5OwogICAgICAgIHAuYWRkU2VhcmNoID0gcC5hZGRRdWVyeTsKICAgICAgICBwLnJlbW92ZVNlYXJjaCA9IHAucmVtb3ZlUXVlcnk7CiAgICAgICAgcC5oYXNTZWFyY2ggPSBwLmhhc1F1ZXJ5OwogICAgICAgIHAubm9ybWFsaXplID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZVByb3RvY29sKGZhbHNlKS5ub3JtYWxpemVQYXRoKGZhbHNlKS5ub3JtYWxpemVRdWVyeShmYWxzZSkubm9ybWFsaXplRnJhZ21lbnQoZmFsc2UpLmJ1aWxkKCk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxpemVQcm90b2NvbChmYWxzZSkubm9ybWFsaXplSG9zdG5hbWUoZmFsc2UpLm5vcm1hbGl6ZVBvcnQoZmFsc2UpLm5vcm1hbGl6ZVBhdGgoZmFsc2UpLm5vcm1hbGl6ZVF1ZXJ5KGZhbHNlKS5ub3JtYWxpemVGcmFnbWVudChmYWxzZSkuYnVpbGQoKTsKICAgICAgICB9OwogICAgICAgIHAubm9ybWFsaXplUHJvdG9jb2wgPSBmdW5jdGlvbihidWlsZCkgewogICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9wYXJ0cy5wcm90b2NvbCA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgdGhpcy5fcGFydHMucHJvdG9jb2wgPSB0aGlzLl9wYXJ0cy5wcm90b2NvbC50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICAgIHAubm9ybWFsaXplSG9zdG5hbWUgPSBmdW5jdGlvbihidWlsZCkgewogICAgICAgICAgaWYgKHRoaXMuX3BhcnRzLmhvc3RuYW1lKSB7CiAgICAgICAgICAgIGlmICh0aGlzLmlzKCJJRE4iKSAmJiBwdW55Y29kZSkgewogICAgICAgICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gcHVueWNvZGUudG9BU0NJSSh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pcygiSVB2NiIpICYmIElQdjYpIHsKICAgICAgICAgICAgICB0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IElQdjYuYmVzdCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICAgIHAubm9ybWFsaXplUG9ydCA9IGZ1bmN0aW9uKGJ1aWxkKSB7CiAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX3BhcnRzLnByb3RvY29sID09PSAic3RyaW5nIiAmJiB0aGlzLl9wYXJ0cy5wb3J0ID09PSBVUkkuZGVmYXVsdFBvcnRzW3RoaXMuX3BhcnRzLnByb3RvY29sXSkgewogICAgICAgICAgICB0aGlzLl9wYXJ0cy5wb3J0ID0gbnVsbDsKICAgICAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfTsKICAgICAgICBwLm5vcm1hbGl6ZVBhdGggPSBmdW5jdGlvbihidWlsZCkgewogICAgICAgICAgdmFyIF9wYXRoID0gdGhpcy5fcGFydHMucGF0aDsKICAgICAgICAgIGlmICghX3BhdGgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgICAgICAgIHRoaXMuX3BhcnRzLnBhdGggPSBVUkkucmVjb2RlVXJuUGF0aCh0aGlzLl9wYXJ0cy5wYXRoKTsKICAgICAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0aGlzLl9wYXJ0cy5wYXRoID09PSAiLyIpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBfcGF0aCA9IFVSSS5yZWNvZGVQYXRoKF9wYXRoKTsKICAgICAgICAgIHZhciBfd2FzX3JlbGF0aXZlOwogICAgICAgICAgdmFyIF9sZWFkaW5nUGFyZW50cyA9ICIiOwogICAgICAgICAgdmFyIF9wYXJlbnQsIF9wb3M7CiAgICAgICAgICBpZiAoX3BhdGguY2hhckF0KDApICE9PSAiLyIpIHsKICAgICAgICAgICAgX3dhc19yZWxhdGl2ZSA9IHRydWU7CiAgICAgICAgICAgIF9wYXRoID0gIi8iICsgX3BhdGg7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoX3BhdGguc2xpY2UoLTMpID09PSAiLy4uIiB8fCBfcGF0aC5zbGljZSgtMikgPT09ICIvLiIpIHsKICAgICAgICAgICAgX3BhdGggKz0gIi8iOwogICAgICAgICAgfQogICAgICAgICAgX3BhdGggPSBfcGF0aC5yZXBsYWNlKC8oXC8oXC5cLykrKXwoXC9cLiQpL2csICIvIikucmVwbGFjZSgvXC97Mix9L2csICIvIik7CiAgICAgICAgICBpZiAoX3dhc19yZWxhdGl2ZSkgewogICAgICAgICAgICBfbGVhZGluZ1BhcmVudHMgPSBfcGF0aC5zdWJzdHJpbmcoMSkubWF0Y2goL14oXC5cLlwvKSsvKSB8fCAiIjsKICAgICAgICAgICAgaWYgKF9sZWFkaW5nUGFyZW50cykgewogICAgICAgICAgICAgIF9sZWFkaW5nUGFyZW50cyA9IF9sZWFkaW5nUGFyZW50c1swXTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICAgICAgX3BhcmVudCA9IF9wYXRoLnNlYXJjaCgvXC9cLlwuKFwvfCQpLyk7CiAgICAgICAgICAgIGlmIChfcGFyZW50ID09PSAtMSkgewogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9IGVsc2UgaWYgKF9wYXJlbnQgPT09IDApIHsKICAgICAgICAgICAgICBfcGF0aCA9IF9wYXRoLnN1YnN0cmluZygzKTsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBfcG9zID0gX3BhdGguc3Vic3RyaW5nKDAsIF9wYXJlbnQpLmxhc3RJbmRleE9mKCIvIik7CiAgICAgICAgICAgIGlmIChfcG9zID09PSAtMSkgewogICAgICAgICAgICAgIF9wb3MgPSBfcGFyZW50OwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9wYXRoID0gX3BhdGguc3Vic3RyaW5nKDAsIF9wb3MpICsgX3BhdGguc3Vic3RyaW5nKF9wYXJlbnQgKyAzKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChfd2FzX3JlbGF0aXZlICYmIHRoaXMuaXMoInJlbGF0aXZlIikpIHsKICAgICAgICAgICAgX3BhdGggPSBfbGVhZGluZ1BhcmVudHMgKyBfcGF0aC5zdWJzdHJpbmcoMSk7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLl9wYXJ0cy5wYXRoID0gX3BhdGg7CiAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICAgIHAubm9ybWFsaXplUGF0aG5hbWUgPSBwLm5vcm1hbGl6ZVBhdGg7CiAgICAgICAgcC5ub3JtYWxpemVRdWVyeSA9IGZ1bmN0aW9uKGJ1aWxkKSB7CiAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX3BhcnRzLnF1ZXJ5ID09PSAic3RyaW5nIikgewogICAgICAgICAgICBpZiAoIXRoaXMuX3BhcnRzLnF1ZXJ5Lmxlbmd0aCkgewogICAgICAgICAgICAgIHRoaXMuX3BhcnRzLnF1ZXJ5ID0gbnVsbDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLnF1ZXJ5KFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfTsKICAgICAgICBwLm5vcm1hbGl6ZUZyYWdtZW50ID0gZnVuY3Rpb24oYnVpbGQpIHsKICAgICAgICAgIGlmICghdGhpcy5fcGFydHMuZnJhZ21lbnQpIHsKICAgICAgICAgICAgdGhpcy5fcGFydHMuZnJhZ21lbnQgPSBudWxsOwogICAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICAgIHAubm9ybWFsaXplU2VhcmNoID0gcC5ub3JtYWxpemVRdWVyeTsKICAgICAgICBwLm5vcm1hbGl6ZUhhc2ggPSBwLm5vcm1hbGl6ZUZyYWdtZW50OwogICAgICAgIHAuaXNvODg1OSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIGUgPSBVUkkuZW5jb2RlOwogICAgICAgICAgdmFyIGQgPSBVUkkuZGVjb2RlOwogICAgICAgICAgVVJJLmVuY29kZSA9IGVzY2FwZTsKICAgICAgICAgIFVSSS5kZWNvZGUgPSBkZWNvZGVVUklDb21wb25lbnQ7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZSgpOwogICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgVVJJLmVuY29kZSA9IGU7CiAgICAgICAgICAgIFVSSS5kZWNvZGUgPSBkOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfTsKICAgICAgICBwLnVuaWNvZGUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciBlID0gVVJJLmVuY29kZTsKICAgICAgICAgIHZhciBkID0gVVJJLmRlY29kZTsKICAgICAgICAgIFVSSS5lbmNvZGUgPSBzdHJpY3RFbmNvZGVVUklDb21wb25lbnQ7CiAgICAgICAgICBVUkkuZGVjb2RlID0gdW5lc2NhcGU7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZSgpOwogICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgVVJJLmVuY29kZSA9IGU7CiAgICAgICAgICAgIFVSSS5kZWNvZGUgPSBkOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfTsKICAgICAgICBwLnJlYWRhYmxlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICB2YXIgdXJpID0gdGhpcy5jbG9uZSgpOwogICAgICAgICAgdXJpLnVzZXJuYW1lKCIiKS5wYXNzd29yZCgiIikubm9ybWFsaXplKCk7CiAgICAgICAgICB2YXIgdCA9ICIiOwogICAgICAgICAgaWYgKHVyaS5fcGFydHMucHJvdG9jb2wpIHsKICAgICAgICAgICAgdCArPSB1cmkuX3BhcnRzLnByb3RvY29sICsgIjovLyI7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodXJpLl9wYXJ0cy5ob3N0bmFtZSkgewogICAgICAgICAgICBpZiAodXJpLmlzKCJwdW55Y29kZSIpICYmIHB1bnljb2RlKSB7CiAgICAgICAgICAgICAgdCArPSBwdW55Y29kZS50b1VuaWNvZGUodXJpLl9wYXJ0cy5ob3N0bmFtZSk7CiAgICAgICAgICAgICAgaWYgKHVyaS5fcGFydHMucG9ydCkgewogICAgICAgICAgICAgICAgdCArPSAiOiIgKyB1cmkuX3BhcnRzLnBvcnQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHQgKz0gdXJpLmhvc3QoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKHVyaS5fcGFydHMuaG9zdG5hbWUgJiYgdXJpLl9wYXJ0cy5wYXRoICYmIHVyaS5fcGFydHMucGF0aC5jaGFyQXQoMCkgIT09ICIvIikgewogICAgICAgICAgICB0ICs9ICIvIjsKICAgICAgICAgIH0KICAgICAgICAgIHQgKz0gdXJpLnBhdGgodHJ1ZSk7CiAgICAgICAgICBpZiAodXJpLl9wYXJ0cy5xdWVyeSkgewogICAgICAgICAgICB2YXIgcTMgPSAiIjsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHFwID0gdXJpLl9wYXJ0cy5xdWVyeS5zcGxpdCgiJiIpLCBsID0gcXAubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgICAgdmFyIGt2ID0gKHFwW2ldIHx8ICIiKS5zcGxpdCgiPSIpOwogICAgICAgICAgICAgIHEzICs9ICImIiArIFVSSS5kZWNvZGVRdWVyeShrdlswXSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSkucmVwbGFjZSgvJi9nLCAiJTI2Iik7CiAgICAgICAgICAgICAgaWYgKGt2WzFdICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIHEzICs9ICI9IiArIFVSSS5kZWNvZGVRdWVyeShrdlsxXSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSkucmVwbGFjZSgvJi9nLCAiJTI2Iik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHQgKz0gIj8iICsgcTMuc3Vic3RyaW5nKDEpOwogICAgICAgICAgfQogICAgICAgICAgdCArPSBVUkkuZGVjb2RlUXVlcnkodXJpLmhhc2goKSwgdHJ1ZSk7CiAgICAgICAgICByZXR1cm4gdDsKICAgICAgICB9OwogICAgICAgIHAuYWJzb2x1dGVUbyA9IGZ1bmN0aW9uKGJhc2UpIHsKICAgICAgICAgIHZhciByZXNvbHZlZCA9IHRoaXMuY2xvbmUoKTsKICAgICAgICAgIHZhciBwcm9wZXJ0aWVzID0gWyJwcm90b2NvbCIsICJ1c2VybmFtZSIsICJwYXNzd29yZCIsICJob3N0bmFtZSIsICJwb3J0Il07CiAgICAgICAgICB2YXIgYmFzZWRpciwgaSwgcDI7CiAgICAgICAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiVVJOcyBkbyBub3QgaGF2ZSBhbnkgZ2VuZXJhbGx5IGRlZmluZWQgaGllcmFyY2hpY2FsIGNvbXBvbmVudHMiKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICghKGJhc2UgaW5zdGFuY2VvZiBVUkkpKSB7CiAgICAgICAgICAgIGJhc2UgPSBuZXcgVVJJKGJhc2UpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHJlc29sdmVkLl9wYXJ0cy5wcm90b2NvbCkgewogICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXNvbHZlZC5fcGFydHMucHJvdG9jb2wgPSBiYXNlLl9wYXJ0cy5wcm90b2NvbDsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0aGlzLl9wYXJ0cy5ob3N0bmFtZSkgewogICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7CiAgICAgICAgICB9CiAgICAgICAgICBmb3IgKGkgPSAwOyBwMiA9IHByb3BlcnRpZXNbaV07IGkrKykgewogICAgICAgICAgICByZXNvbHZlZC5fcGFydHNbcDJdID0gYmFzZS5fcGFydHNbcDJdOwogICAgICAgICAgfQogICAgICAgICAgaWYgKCFyZXNvbHZlZC5fcGFydHMucGF0aCkgewogICAgICAgICAgICByZXNvbHZlZC5fcGFydHMucGF0aCA9IGJhc2UuX3BhcnRzLnBhdGg7CiAgICAgICAgICAgIGlmICghcmVzb2x2ZWQuX3BhcnRzLnF1ZXJ5KSB7CiAgICAgICAgICAgICAgcmVzb2x2ZWQuX3BhcnRzLnF1ZXJ5ID0gYmFzZS5fcGFydHMucXVlcnk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChyZXNvbHZlZC5fcGFydHMucGF0aC5zdWJzdHJpbmcoLTIpID09PSAiLi4iKSB7CiAgICAgICAgICAgICAgcmVzb2x2ZWQuX3BhcnRzLnBhdGggKz0gIi8iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChyZXNvbHZlZC5wYXRoKCkuY2hhckF0KDApICE9PSAiLyIpIHsKICAgICAgICAgICAgICBiYXNlZGlyID0gYmFzZS5kaXJlY3RvcnkoKTsKICAgICAgICAgICAgICBiYXNlZGlyID0gYmFzZWRpciA/IGJhc2VkaXIgOiBiYXNlLnBhdGgoKS5pbmRleE9mKCIvIikgPT09IDAgPyAiLyIgOiAiIjsKICAgICAgICAgICAgICByZXNvbHZlZC5fcGFydHMucGF0aCA9IChiYXNlZGlyID8gYmFzZWRpciArICIvIiA6ICIiKSArIHJlc29sdmVkLl9wYXJ0cy5wYXRoOwogICAgICAgICAgICAgIHJlc29sdmVkLm5vcm1hbGl6ZVBhdGgoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmVzb2x2ZWQuYnVpbGQoKTsKICAgICAgICAgIHJldHVybiByZXNvbHZlZDsKICAgICAgICB9OwogICAgICAgIHAucmVsYXRpdmVUbyA9IGZ1bmN0aW9uKGJhc2UpIHsKICAgICAgICAgIHZhciByZWxhdGl2ZSA9IHRoaXMuY2xvbmUoKS5ub3JtYWxpemUoKTsKICAgICAgICAgIHZhciByZWxhdGl2ZVBhcnRzLCBiYXNlUGFydHMsIGNvbW1vbiwgcmVsYXRpdmVQYXRoLCBiYXNlUGF0aDsKICAgICAgICAgIGlmIChyZWxhdGl2ZS5fcGFydHMudXJuKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiVVJOcyBkbyBub3QgaGF2ZSBhbnkgZ2VuZXJhbGx5IGRlZmluZWQgaGllcmFyY2hpY2FsIGNvbXBvbmVudHMiKTsKICAgICAgICAgIH0KICAgICAgICAgIGJhc2UgPSBuZXcgVVJJKGJhc2UpLm5vcm1hbGl6ZSgpOwogICAgICAgICAgcmVsYXRpdmVQYXJ0cyA9IHJlbGF0aXZlLl9wYXJ0czsKICAgICAgICAgIGJhc2VQYXJ0cyA9IGJhc2UuX3BhcnRzOwogICAgICAgICAgcmVsYXRpdmVQYXRoID0gcmVsYXRpdmUucGF0aCgpOwogICAgICAgICAgYmFzZVBhdGggPSBiYXNlLnBhdGgoKTsKICAgICAgICAgIGlmIChyZWxhdGl2ZVBhdGguY2hhckF0KDApICE9PSAiLyIpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJVUkkgaXMgYWxyZWFkeSByZWxhdGl2ZSIpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGJhc2VQYXRoLmNoYXJBdCgwKSAhPT0gIi8iKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiQ2Fubm90IGNhbGN1bGF0ZSBhIFVSSSByZWxhdGl2ZSB0byBhbm90aGVyIHJlbGF0aXZlIFVSSSIpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHJlbGF0aXZlUGFydHMucHJvdG9jb2wgPT09IGJhc2VQYXJ0cy5wcm90b2NvbCkgewogICAgICAgICAgICByZWxhdGl2ZVBhcnRzLnByb3RvY29sID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChyZWxhdGl2ZVBhcnRzLnVzZXJuYW1lICE9PSBiYXNlUGFydHMudXNlcm5hbWUgfHwgcmVsYXRpdmVQYXJ0cy5wYXNzd29yZCAhPT0gYmFzZVBhcnRzLnBhc3N3b3JkKSB7CiAgICAgICAgICAgIHJldHVybiByZWxhdGl2ZS5idWlsZCgpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHJlbGF0aXZlUGFydHMucHJvdG9jb2wgIT09IG51bGwgfHwgcmVsYXRpdmVQYXJ0cy51c2VybmFtZSAhPT0gbnVsbCB8fCByZWxhdGl2ZVBhcnRzLnBhc3N3b3JkICE9PSBudWxsKSB7CiAgICAgICAgICAgIHJldHVybiByZWxhdGl2ZS5idWlsZCgpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHJlbGF0aXZlUGFydHMuaG9zdG5hbWUgPT09IGJhc2VQYXJ0cy5ob3N0bmFtZSAmJiByZWxhdGl2ZVBhcnRzLnBvcnQgPT09IGJhc2VQYXJ0cy5wb3J0KSB7CiAgICAgICAgICAgIHJlbGF0aXZlUGFydHMuaG9zdG5hbWUgPSBudWxsOwogICAgICAgICAgICByZWxhdGl2ZVBhcnRzLnBvcnQgPSBudWxsOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocmVsYXRpdmVQYXRoID09PSBiYXNlUGF0aCkgewogICAgICAgICAgICByZWxhdGl2ZVBhcnRzLnBhdGggPSAiIjsKICAgICAgICAgICAgcmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7CiAgICAgICAgICB9CiAgICAgICAgICBjb21tb24gPSBVUkkuY29tbW9uUGF0aChyZWxhdGl2ZVBhdGgsIGJhc2VQYXRoKTsKICAgICAgICAgIGlmICghY29tbW9uKSB7CiAgICAgICAgICAgIHJldHVybiByZWxhdGl2ZS5idWlsZCgpOwogICAgICAgICAgfQogICAgICAgICAgdmFyIHBhcmVudHMgPSBiYXNlUGFydHMucGF0aC5zdWJzdHJpbmcoY29tbW9uLmxlbmd0aCkucmVwbGFjZSgvW15cL10qJC8sICIiKS5yZXBsYWNlKC8uKj9cLy9nLCAiLi4vIik7CiAgICAgICAgICByZWxhdGl2ZVBhcnRzLnBhdGggPSBwYXJlbnRzICsgcmVsYXRpdmVQYXJ0cy5wYXRoLnN1YnN0cmluZyhjb21tb24ubGVuZ3RoKSB8fCAiLi8iOwogICAgICAgICAgcmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7CiAgICAgICAgfTsKICAgICAgICBwLmVxdWFscyA9IGZ1bmN0aW9uKHVyaSkgewogICAgICAgICAgdmFyIG9uZSA9IHRoaXMuY2xvbmUoKTsKICAgICAgICAgIHZhciB0d28gPSBuZXcgVVJJKHVyaSk7CiAgICAgICAgICB2YXIgb25lX21hcCA9IHt9OwogICAgICAgICAgdmFyIHR3b19tYXAgPSB7fTsKICAgICAgICAgIHZhciBjaGVja2VkID0ge307CiAgICAgICAgICB2YXIgb25lX3F1ZXJ5LCB0d29fcXVlcnksIGtleTsKICAgICAgICAgIG9uZS5ub3JtYWxpemUoKTsKICAgICAgICAgIHR3by5ub3JtYWxpemUoKTsKICAgICAgICAgIGlmIChvbmUudG9TdHJpbmcoKSA9PT0gdHdvLnRvU3RyaW5nKCkpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICB9CiAgICAgICAgICBvbmVfcXVlcnkgPSBvbmUucXVlcnkoKTsKICAgICAgICAgIHR3b19xdWVyeSA9IHR3by5xdWVyeSgpOwogICAgICAgICAgb25lLnF1ZXJ5KCIiKTsKICAgICAgICAgIHR3by5xdWVyeSgiIik7CiAgICAgICAgICBpZiAob25lLnRvU3RyaW5nKCkgIT09IHR3by50b1N0cmluZygpKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChvbmVfcXVlcnkubGVuZ3RoICE9PSB0d29fcXVlcnkubGVuZ3RoKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICAgIG9uZV9tYXAgPSBVUkkucGFyc2VRdWVyeShvbmVfcXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgICAgICAgdHdvX21hcCA9IFVSSS5wYXJzZVF1ZXJ5KHR3b19xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7CiAgICAgICAgICBmb3IgKGtleSBpbiBvbmVfbWFwKSB7CiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChvbmVfbWFwLCBrZXkpKSB7CiAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KG9uZV9tYXBba2V5XSkpIHsKICAgICAgICAgICAgICAgIGlmIChvbmVfbWFwW2tleV0gIT09IHR3b19tYXBba2V5XSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIGlmICghYXJyYXlzRXF1YWwob25lX21hcFtrZXldLCB0d29fbWFwW2tleV0pKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNoZWNrZWRba2V5XSA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZvciAoa2V5IGluIHR3b19tYXApIHsKICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKHR3b19tYXAsIGtleSkpIHsKICAgICAgICAgICAgICBpZiAoIWNoZWNrZWRba2V5XSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfTsKICAgICAgICBwLnByZXZlbnRJbnZhbGlkSG9zdG5hbWUgPSBmdW5jdGlvbih2MykgewogICAgICAgICAgdGhpcy5fcGFydHMucHJldmVudEludmFsaWRIb3N0bmFtZSA9ICEhdjM7CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICAgIHAuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzID0gZnVuY3Rpb24odjMpIHsKICAgICAgICAgIHRoaXMuX3BhcnRzLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycyA9ICEhdjM7CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICAgIHAuZXNjYXBlUXVlcnlTcGFjZSA9IGZ1bmN0aW9uKHYzKSB7CiAgICAgICAgICB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlID0gISF2MzsKICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CiAgICAgICAgcmV0dXJuIFVSSTsKICAgICAgfSk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9hcHBlbmRGb3J3YXJkU2xhc2guanMKICBmdW5jdGlvbiBhcHBlbmRGb3J3YXJkU2xhc2godXJsKSB7CiAgICBpZiAodXJsLmxlbmd0aCA9PT0gMCB8fCB1cmxbdXJsLmxlbmd0aCAtIDFdICE9PSAiLyIpIHsKICAgICAgdXJsID0gYCR7dXJsfS9gOwogICAgfQogICAgcmV0dXJuIHVybDsKICB9CiAgdmFyIGFwcGVuZEZvcndhcmRTbGFzaF9kZWZhdWx0OwogIHZhciBpbml0X2FwcGVuZEZvcndhcmRTbGFzaCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvYXBwZW5kRm9yd2FyZFNsYXNoLmpzIigpIHsKICAgICAgYXBwZW5kRm9yd2FyZFNsYXNoX2RlZmF1bHQgPSBhcHBlbmRGb3J3YXJkU2xhc2g7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9jbG9uZS5qcwogIGZ1bmN0aW9uIGNsb25lKG9iamVjdCwgZGVlcCkgewogICAgaWYgKG9iamVjdCA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqZWN0ICE9PSAib2JqZWN0IikgewogICAgICByZXR1cm4gb2JqZWN0OwogICAgfQogICAgZGVlcCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGRlZXAsIGZhbHNlKTsKICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBvYmplY3QuY29uc3RydWN0b3IoKTsKICAgIGZvciAoY29uc3QgcHJvcGVydHlOYW1lIGluIG9iamVjdCkgewogICAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KHByb3BlcnR5TmFtZSkpIHsKICAgICAgICBsZXQgdmFsdWUgPSBvYmplY3RbcHJvcGVydHlOYW1lXTsKICAgICAgICBpZiAoZGVlcCkgewogICAgICAgICAgdmFsdWUgPSBjbG9uZSh2YWx1ZSwgZGVlcCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFtwcm9wZXJ0eU5hbWVdID0gdmFsdWU7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQogIHZhciBjbG9uZV9kZWZhdWx0OwogIHZhciBpbml0X2Nsb25lID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9jbG9uZS5qcyIoKSB7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGNsb25lX2RlZmF1bHQgPSBjbG9uZTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2NvbWJpbmUuanMKICBmdW5jdGlvbiBjb21iaW5lKG9iamVjdDEsIG9iamVjdDIsIGRlZXApIHsKICAgIGRlZXAgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChkZWVwLCBmYWxzZSk7CiAgICBjb25zdCByZXN1bHQgPSB7fTsKICAgIGNvbnN0IG9iamVjdDFEZWZpbmVkID0gZGVmaW5lZF9kZWZhdWx0KG9iamVjdDEpOwogICAgY29uc3Qgb2JqZWN0MkRlZmluZWQgPSBkZWZpbmVkX2RlZmF1bHQob2JqZWN0Mik7CiAgICBsZXQgcHJvcGVydHk7CiAgICBsZXQgb2JqZWN0MVZhbHVlOwogICAgbGV0IG9iamVjdDJWYWx1ZTsKICAgIGlmIChvYmplY3QxRGVmaW5lZCkgewogICAgICBmb3IgKHByb3BlcnR5IGluIG9iamVjdDEpIHsKICAgICAgICBpZiAob2JqZWN0MS5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHsKICAgICAgICAgIG9iamVjdDFWYWx1ZSA9IG9iamVjdDFbcHJvcGVydHldOwogICAgICAgICAgaWYgKG9iamVjdDJEZWZpbmVkICYmIGRlZXAgJiYgdHlwZW9mIG9iamVjdDFWYWx1ZSA9PT0gIm9iamVjdCIgJiYgb2JqZWN0Mi5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHsKICAgICAgICAgICAgb2JqZWN0MlZhbHVlID0gb2JqZWN0Mltwcm9wZXJ0eV07CiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqZWN0MlZhbHVlID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgIHJlc3VsdFtwcm9wZXJ0eV0gPSBjb21iaW5lKG9iamVjdDFWYWx1ZSwgb2JqZWN0MlZhbHVlLCBkZWVwKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXN1bHRbcHJvcGVydHldID0gb2JqZWN0MVZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXN1bHRbcHJvcGVydHldID0gb2JqZWN0MVZhbHVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogICAgaWYgKG9iamVjdDJEZWZpbmVkKSB7CiAgICAgIGZvciAocHJvcGVydHkgaW4gb2JqZWN0MikgewogICAgICAgIGlmIChvYmplY3QyLmhhc093blByb3BlcnR5KHByb3BlcnR5KSAmJiAhcmVzdWx0Lmhhc093blByb3BlcnR5KHByb3BlcnR5KSkgewogICAgICAgICAgb2JqZWN0MlZhbHVlID0gb2JqZWN0Mltwcm9wZXJ0eV07CiAgICAgICAgICByZXN1bHRbcHJvcGVydHldID0gb2JqZWN0MlZhbHVlOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgdmFyIGNvbWJpbmVfZGVmYXVsdDsKICB2YXIgaW5pdF9jb21iaW5lID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9jb21iaW5lLmpzIigpIHsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGNvbWJpbmVfZGVmYXVsdCA9IGNvbWJpbmU7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9kZWZlci5qcwogIGZ1bmN0aW9uIGRlZmVyKCkgewogICAgbGV0IHJlc29sdmU7CiAgICBsZXQgcmVqZWN0OwogICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlcywgcmVqKSB7CiAgICAgIHJlc29sdmUgPSByZXM7CiAgICAgIHJlamVjdCA9IHJlajsKICAgIH0pOwogICAgcmV0dXJuIHsKICAgICAgcmVzb2x2ZSwKICAgICAgcmVqZWN0LAogICAgICBwcm9taXNlCiAgICB9OwogIH0KICB2YXIgZGVmZXJfZGVmYXVsdDsKICB2YXIgaW5pdF9kZWZlciA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvZGVmZXIuanMiKCkgewogICAgICBkZWZlcl9kZWZhdWx0ID0gZGVmZXI7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9nZXRBYnNvbHV0ZVVyaS5qcwogIGZ1bmN0aW9uIGdldEFic29sdXRlVXJpKHJlbGF0aXZlLCBiYXNlKSB7CiAgICBsZXQgZG9jdW1lbnRPYmplY3Q7CiAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAidW5kZWZpbmVkIikgewogICAgICBkb2N1bWVudE9iamVjdCA9IGRvY3VtZW50OwogICAgfQogICAgcmV0dXJuIGdldEFic29sdXRlVXJpLl9pbXBsZW1lbnRhdGlvbihyZWxhdGl2ZSwgYmFzZSwgZG9jdW1lbnRPYmplY3QpOwogIH0KICB2YXIgaW1wb3J0X3VyaWpzLCBnZXRBYnNvbHV0ZVVyaV9kZWZhdWx0OwogIHZhciBpbml0X2dldEFic29sdXRlVXJpID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9nZXRBYnNvbHV0ZVVyaS5qcyIoKSB7CiAgICAgIGltcG9ydF91cmlqcyA9IF9fdG9FU00ocmVxdWlyZV9VUkkoKSwgMSk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGdldEFic29sdXRlVXJpLl9pbXBsZW1lbnRhdGlvbiA9IGZ1bmN0aW9uKHJlbGF0aXZlLCBiYXNlLCBkb2N1bWVudE9iamVjdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlbGF0aXZlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInJlbGF0aXZlIHVyaSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYmFzZSkpIHsKICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnRPYmplY3QgPT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgIHJldHVybiByZWxhdGl2ZTsKICAgICAgICAgIH0KICAgICAgICAgIGJhc2UgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChkb2N1bWVudE9iamVjdC5iYXNlVVJJLCBkb2N1bWVudE9iamVjdC5sb2NhdGlvbi5ocmVmKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgcmVsYXRpdmVVcmkgPSBuZXcgaW1wb3J0X3VyaWpzLmRlZmF1bHQocmVsYXRpdmUpOwogICAgICAgIGlmIChyZWxhdGl2ZVVyaS5zY2hlbWUoKSAhPT0gIiIpIHsKICAgICAgICAgIHJldHVybiByZWxhdGl2ZVVyaS50b1N0cmluZygpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVsYXRpdmVVcmkuYWJzb2x1dGVUbyhiYXNlKS50b1N0cmluZygpOwogICAgICB9OwogICAgICBnZXRBYnNvbHV0ZVVyaV9kZWZhdWx0ID0gZ2V0QWJzb2x1dGVVcmk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9nZXRCYXNlVXJpLmpzCiAgZnVuY3Rpb24gZ2V0QmFzZVVyaSh1cmksIGluY2x1ZGVRdWVyeSkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodXJpKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgidXJpIGlzIHJlcXVpcmVkLiIpOwogICAgfQogICAgbGV0IGJhc2VQYXRoID0gIiI7CiAgICBjb25zdCBpID0gdXJpLmxhc3RJbmRleE9mKCIvIik7CiAgICBpZiAoaSAhPT0gLTEpIHsKICAgICAgYmFzZVBhdGggPSB1cmkuc3Vic3RyaW5nKDAsIGkgKyAxKTsKICAgIH0KICAgIGlmICghaW5jbHVkZVF1ZXJ5KSB7CiAgICAgIHJldHVybiBiYXNlUGF0aDsKICAgIH0KICAgIHVyaSA9IG5ldyBpbXBvcnRfdXJpanMyLmRlZmF1bHQodXJpKTsKICAgIGlmICh1cmkucXVlcnkoKS5sZW5ndGggIT09IDApIHsKICAgICAgYmFzZVBhdGggKz0gYD8ke3VyaS5xdWVyeSgpfWA7CiAgICB9CiAgICBpZiAodXJpLmZyYWdtZW50KCkubGVuZ3RoICE9PSAwKSB7CiAgICAgIGJhc2VQYXRoICs9IGAjJHt1cmkuZnJhZ21lbnQoKX1gOwogICAgfQogICAgcmV0dXJuIGJhc2VQYXRoOwogIH0KICB2YXIgaW1wb3J0X3VyaWpzMiwgZ2V0QmFzZVVyaV9kZWZhdWx0OwogIHZhciBpbml0X2dldEJhc2VVcmkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2dldEJhc2VVcmkuanMiKCkgewogICAgICBpbXBvcnRfdXJpanMyID0gX190b0VTTShyZXF1aXJlX1VSSSgpLCAxKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgZ2V0QmFzZVVyaV9kZWZhdWx0ID0gZ2V0QmFzZVVyaTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2dldEV4dGVuc2lvbkZyb21VcmkuanMKICBmdW5jdGlvbiBnZXRFeHRlbnNpb25Gcm9tVXJpKHVyaSkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodXJpKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgidXJpIGlzIHJlcXVpcmVkLiIpOwogICAgfQogICAgY29uc3QgdXJpT2JqZWN0ID0gbmV3IGltcG9ydF91cmlqczMuZGVmYXVsdCh1cmkpOwogICAgdXJpT2JqZWN0Lm5vcm1hbGl6ZSgpOwogICAgbGV0IHBhdGggPSB1cmlPYmplY3QucGF0aCgpOwogICAgbGV0IGluZGV4ID0gcGF0aC5sYXN0SW5kZXhPZigiLyIpOwogICAgaWYgKGluZGV4ICE9PSAtMSkgewogICAgICBwYXRoID0gcGF0aC5zdWJzdHIoaW5kZXggKyAxKTsKICAgIH0KICAgIGluZGV4ID0gcGF0aC5sYXN0SW5kZXhPZigiLiIpOwogICAgaWYgKGluZGV4ID09PSAtMSkgewogICAgICBwYXRoID0gIiI7CiAgICB9IGVsc2UgewogICAgICBwYXRoID0gcGF0aC5zdWJzdHIoaW5kZXggKyAxKTsKICAgIH0KICAgIHJldHVybiBwYXRoOwogIH0KICB2YXIgaW1wb3J0X3VyaWpzMywgZ2V0RXh0ZW5zaW9uRnJvbVVyaV9kZWZhdWx0OwogIHZhciBpbml0X2dldEV4dGVuc2lvbkZyb21VcmkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2dldEV4dGVuc2lvbkZyb21VcmkuanMiKCkgewogICAgICBpbXBvcnRfdXJpanMzID0gX190b0VTTShyZXF1aXJlX1VSSSgpLCAxKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgZ2V0RXh0ZW5zaW9uRnJvbVVyaV9kZWZhdWx0ID0gZ2V0RXh0ZW5zaW9uRnJvbVVyaTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2dldEltYWdlUGl4ZWxzLmpzCiAgZnVuY3Rpb24gZ2V0SW1hZ2VQaXhlbHMoaW1hZ2UsIHdpZHRoLCBoZWlnaHQpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHdpZHRoKSkgewogICAgICB3aWR0aCA9IGltYWdlLndpZHRoOwogICAgfQogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaGVpZ2h0KSkgewogICAgICBoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7CiAgICB9CiAgICBsZXQgY29udGV4dDJEc0J5SGVpZ2h0ID0gY29udGV4dDJEc0J5V2lkdGhBbmRIZWlnaHRbd2lkdGhdOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoY29udGV4dDJEc0J5SGVpZ2h0KSkgewogICAgICBjb250ZXh0MkRzQnlIZWlnaHQgPSB7fTsKICAgICAgY29udGV4dDJEc0J5V2lkdGhBbmRIZWlnaHRbd2lkdGhdID0gY29udGV4dDJEc0J5SGVpZ2h0OwogICAgfQogICAgbGV0IGNvbnRleHQyZCA9IGNvbnRleHQyRHNCeUhlaWdodFtoZWlnaHRdOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoY29udGV4dDJkKSkgewogICAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKTsKICAgICAgY2FudmFzLndpZHRoID0gd2lkdGg7CiAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgIGNvbnRleHQyZCA9IGNhbnZhcy5nZXRDb250ZXh0KCIyZCIsIHsgd2lsbFJlYWRGcmVxdWVudGx5OiB0cnVlIH0pOwogICAgICBjb250ZXh0MmQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gImNvcHkiOwogICAgICBjb250ZXh0MkRzQnlIZWlnaHRbaGVpZ2h0XSA9IGNvbnRleHQyZDsKICAgIH0KICAgIGNvbnRleHQyZC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDAsIHdpZHRoLCBoZWlnaHQpOwogICAgcmV0dXJuIGNvbnRleHQyZC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCkuZGF0YTsKICB9CiAgdmFyIGNvbnRleHQyRHNCeVdpZHRoQW5kSGVpZ2h0LCBnZXRJbWFnZVBpeGVsc19kZWZhdWx0OwogIHZhciBpbml0X2dldEltYWdlUGl4ZWxzID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9nZXRJbWFnZVBpeGVscy5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBjb250ZXh0MkRzQnlXaWR0aEFuZEhlaWdodCA9IHt9OwogICAgICBnZXRJbWFnZVBpeGVsc19kZWZhdWx0ID0gZ2V0SW1hZ2VQaXhlbHM7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9pc0Jsb2JVcmkuanMKICBmdW5jdGlvbiBpc0Jsb2JVcmkodXJpKSB7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5zdHJpbmcoInVyaSIsIHVyaSk7CiAgICByZXR1cm4gYmxvYlVyaVJlZ2V4LnRlc3QodXJpKTsKICB9CiAgdmFyIGJsb2JVcmlSZWdleCwgaXNCbG9iVXJpX2RlZmF1bHQ7CiAgdmFyIGluaXRfaXNCbG9iVXJpID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9pc0Jsb2JVcmkuanMiKCkgewogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGJsb2JVcmlSZWdleCA9IC9eYmxvYjovaTsKICAgICAgaXNCbG9iVXJpX2RlZmF1bHQgPSBpc0Jsb2JVcmk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9pc0Nyb3NzT3JpZ2luVXJsLmpzCiAgZnVuY3Rpb24gaXNDcm9zc09yaWdpblVybCh1cmwpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGEpKSB7CiAgICAgIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIik7CiAgICB9CiAgICBhLmhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgIGNvbnN0IGhvc3QgPSBhLmhvc3Q7CiAgICBjb25zdCBwcm90b2NvbCA9IGEucHJvdG9jb2w7CiAgICBhLmhyZWYgPSB1cmw7CiAgICBhLmhyZWYgPSBhLmhyZWY7CiAgICByZXR1cm4gcHJvdG9jb2wgIT09IGEucHJvdG9jb2wgfHwgaG9zdCAhPT0gYS5ob3N0OwogIH0KICB2YXIgYSwgaXNDcm9zc09yaWdpblVybF9kZWZhdWx0OwogIHZhciBpbml0X2lzQ3Jvc3NPcmlnaW5VcmwgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2lzQ3Jvc3NPcmlnaW5VcmwuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaXNDcm9zc09yaWdpblVybF9kZWZhdWx0ID0gaXNDcm9zc09yaWdpblVybDsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2lzRGF0YVVyaS5qcwogIGZ1bmN0aW9uIGlzRGF0YVVyaSh1cmkpIHsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLnN0cmluZygidXJpIiwgdXJpKTsKICAgIHJldHVybiBkYXRhVXJpUmVnZXgudGVzdCh1cmkpOwogIH0KICB2YXIgZGF0YVVyaVJlZ2V4LCBpc0RhdGFVcmlfZGVmYXVsdDsKICB2YXIgaW5pdF9pc0RhdGFVcmkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2lzRGF0YVVyaS5qcyIoKSB7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgZGF0YVVyaVJlZ2V4ID0gL15kYXRhOi9pOwogICAgICBpc0RhdGFVcmlfZGVmYXVsdCA9IGlzRGF0YVVyaTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2xvYWRBbmRFeGVjdXRlU2NyaXB0LmpzCiAgZnVuY3Rpb24gbG9hZEFuZEV4ZWN1dGVTY3JpcHQodXJsKSB7CiAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsKICAgIHNjcmlwdC5hc3luYyA9IHRydWU7CiAgICBzY3JpcHQuc3JjID0gdXJsOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgaWYgKHdpbmRvdy5jcm9zc09yaWdpbklzb2xhdGVkKSB7CiAgICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgiY3Jvc3NvcmlnaW4iLCAiYW5vbnltb3VzIik7CiAgICAgIH0KICAgICAgY29uc3QgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoZWFkIilbMF07CiAgICAgIHNjcmlwdC5vbmxvYWQgPSBmdW5jdGlvbigpIHsKICAgICAgICBzY3JpcHQub25sb2FkID0gdm9pZCAwOwogICAgICAgIGhlYWQucmVtb3ZlQ2hpbGQoc2NyaXB0KTsKICAgICAgICByZXNvbHZlKCk7CiAgICAgIH07CiAgICAgIHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24oZSkgewogICAgICAgIHJlamVjdChlKTsKICAgICAgfTsKICAgICAgaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpOwogICAgfSk7CiAgfQogIHZhciBsb2FkQW5kRXhlY3V0ZVNjcmlwdF9kZWZhdWx0OwogIHZhciBpbml0X2xvYWRBbmRFeGVjdXRlU2NyaXB0ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9sb2FkQW5kRXhlY3V0ZVNjcmlwdC5qcyIoKSB7CiAgICAgIGxvYWRBbmRFeGVjdXRlU2NyaXB0X2RlZmF1bHQgPSBsb2FkQW5kRXhlY3V0ZVNjcmlwdDsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL29iamVjdFRvUXVlcnkuanMKICBmdW5jdGlvbiBvYmplY3RUb1F1ZXJ5KG9iaikgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQob2JqKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib2JqIGlzIHJlcXVpcmVkLiIpOwogICAgfQogICAgbGV0IHJlc3VsdCA9ICIiOwogICAgZm9yIChjb25zdCBwcm9wTmFtZSBpbiBvYmopIHsKICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHsKICAgICAgICBjb25zdCB2YWx1ZSA9IG9ialtwcm9wTmFtZV07CiAgICAgICAgY29uc3QgcGFydCA9IGAke2VuY29kZVVSSUNvbXBvbmVudChwcm9wTmFtZSl9PWA7CiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7CiAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdmFsdWUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICAgICAgICAgICAgcmVzdWx0ICs9IGAke3BhcnQgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWVbaV0pfSZgOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQgKz0gYCR7cGFydCArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSl9JmA7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgLTEpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgdmFyIG9iamVjdFRvUXVlcnlfZGVmYXVsdDsKICB2YXIgaW5pdF9vYmplY3RUb1F1ZXJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9vYmplY3RUb1F1ZXJ5LmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgb2JqZWN0VG9RdWVyeV9kZWZhdWx0ID0gb2JqZWN0VG9RdWVyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL3F1ZXJ5VG9PYmplY3QuanMKICBmdW5jdGlvbiBxdWVyeVRvT2JqZWN0KHF1ZXJ5U3RyaW5nKSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChxdWVyeVN0cmluZykpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInF1ZXJ5U3RyaW5nIGlzIHJlcXVpcmVkLiIpOwogICAgfQogICAgY29uc3QgcmVzdWx0ID0ge307CiAgICBpZiAocXVlcnlTdHJpbmcgPT09ICIiKSB7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CiAgICBjb25zdCBwYXJ0cyA9IHF1ZXJ5U3RyaW5nLnJlcGxhY2UoL1wrL2csICIlMjAiKS5zcGxpdCgvWyY7XS8pOwogICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBhcnRzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7CiAgICAgIGNvbnN0IHN1YnBhcnRzID0gcGFydHNbaV0uc3BsaXQoIj0iKTsKICAgICAgY29uc3QgbmFtZSA9IGRlY29kZVVSSUNvbXBvbmVudChzdWJwYXJ0c1swXSk7CiAgICAgIGxldCB2YWx1ZSA9IHN1YnBhcnRzWzFdOwogICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHZhbHVlKSkgewogICAgICAgIHZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YWx1ZSA9ICIiOwogICAgICB9CiAgICAgIGNvbnN0IHJlc3VsdFZhbHVlID0gcmVzdWx0W25hbWVdOwogICAgICBpZiAodHlwZW9mIHJlc3VsdFZhbHVlID09PSAic3RyaW5nIikgewogICAgICAgIHJlc3VsdFtuYW1lXSA9IFtyZXN1bHRWYWx1ZSwgdmFsdWVdOwogICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0VmFsdWUpKSB7CiAgICAgICAgcmVzdWx0VmFsdWUucHVzaCh2YWx1ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVzdWx0W25hbWVdID0gdmFsdWU7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQogIHZhciBxdWVyeVRvT2JqZWN0X2RlZmF1bHQ7CiAgdmFyIGluaXRfcXVlcnlUb09iamVjdCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvcXVlcnlUb09iamVjdC5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIHF1ZXJ5VG9PYmplY3RfZGVmYXVsdCA9IHF1ZXJ5VG9PYmplY3Q7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9SZXF1ZXN0U3RhdGUuanMKICB2YXIgUmVxdWVzdFN0YXRlLCBSZXF1ZXN0U3RhdGVfZGVmYXVsdDsKICB2YXIgaW5pdF9SZXF1ZXN0U3RhdGUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1JlcXVlc3RTdGF0ZS5qcyIoKSB7CiAgICAgIFJlcXVlc3RTdGF0ZSA9IHsKICAgICAgICAvKioKICAgICAgICAgKiBJbml0aWFsIHVuaXNzdWVkIHN0YXRlLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBVTklTU1VFRDogMCwKICAgICAgICAvKioKICAgICAgICAgKiBJc3N1ZWQgYnV0IG5vdCB5ZXQgYWN0aXZlLiBXaWxsIGJlY29tZSBhY3RpdmUgd2hlbiBvcGVuIHNsb3RzIGFyZSBhdmFpbGFibGUuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIElTU1VFRDogMSwKICAgICAgICAvKioKICAgICAgICAgKiBBY3R1YWwgaHR0cCByZXF1ZXN0IGhhcyBiZWVuIHNlbnQuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIEFDVElWRTogMiwKICAgICAgICAvKioKICAgICAgICAgKiBSZXF1ZXN0IGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFJFQ0VJVkVEOiAzLAogICAgICAgIC8qKgogICAgICAgICAqIFJlcXVlc3Qgd2FzIGNhbmNlbGxlZCwgZWl0aGVyIGV4cGxpY2l0bHkgb3IgYXV0b21hdGljYWxseSBiZWNhdXNlIG9mIGxvdyBwcmlvcml0eS4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgQ0FOQ0VMTEVEOiA0LAogICAgICAgIC8qKgogICAgICAgICAqIFJlcXVlc3QgZmFpbGVkLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBGQUlMRUQ6IDUKICAgICAgfTsKICAgICAgUmVxdWVzdFN0YXRlX2RlZmF1bHQgPSBPYmplY3QuZnJlZXplKFJlcXVlc3RTdGF0ZSk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9SZXF1ZXN0VHlwZS5qcwogIHZhciBSZXF1ZXN0VHlwZSwgUmVxdWVzdFR5cGVfZGVmYXVsdDsKICB2YXIgaW5pdF9SZXF1ZXN0VHlwZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUmVxdWVzdFR5cGUuanMiKCkgewogICAgICBSZXF1ZXN0VHlwZSA9IHsKICAgICAgICAvKioKICAgICAgICAgKiBUZXJyYWluIHJlcXVlc3QuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFRFUlJBSU46IDAsCiAgICAgICAgLyoqCiAgICAgICAgICogSW1hZ2VyeSByZXF1ZXN0LgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBJTUFHRVJZOiAxLAogICAgICAgIC8qKgogICAgICAgICAqIDNEIFRpbGVzIHJlcXVlc3QuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFRJTEVTM0Q6IDIsCiAgICAgICAgLyoqCiAgICAgICAgICogT3RoZXIgcmVxdWVzdC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgT1RIRVI6IDMKICAgICAgfTsKICAgICAgUmVxdWVzdFR5cGVfZGVmYXVsdCA9IE9iamVjdC5mcmVlemUoUmVxdWVzdFR5cGUpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUmVxdWVzdC5qcwogIGZ1bmN0aW9uIFJlcXVlc3Qob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCB0aHJvdHRsZUJ5U2VydmVyID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy50aHJvdHRsZUJ5U2VydmVyLCBmYWxzZSk7CiAgICBjb25zdCB0aHJvdHRsZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMudGhyb3R0bGUsIGZhbHNlKTsKICAgIHRoaXMudXJsID0gb3B0aW9ucy51cmw7CiAgICB0aGlzLnJlcXVlc3RGdW5jdGlvbiA9IG9wdGlvbnMucmVxdWVzdEZ1bmN0aW9uOwogICAgdGhpcy5jYW5jZWxGdW5jdGlvbiA9IG9wdGlvbnMuY2FuY2VsRnVuY3Rpb247CiAgICB0aGlzLnByaW9yaXR5RnVuY3Rpb24gPSBvcHRpb25zLnByaW9yaXR5RnVuY3Rpb247CiAgICB0aGlzLnByaW9yaXR5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5wcmlvcml0eSwgMCk7CiAgICB0aGlzLnRocm90dGxlID0gdGhyb3R0bGU7CiAgICB0aGlzLnRocm90dGxlQnlTZXJ2ZXIgPSB0aHJvdHRsZUJ5U2VydmVyOwogICAgdGhpcy50eXBlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy50eXBlLCBSZXF1ZXN0VHlwZV9kZWZhdWx0Lk9USEVSKTsKICAgIHRoaXMuc2VydmVyS2V5ID0gb3B0aW9ucy5zZXJ2ZXJLZXk7CiAgICB0aGlzLnN0YXRlID0gUmVxdWVzdFN0YXRlX2RlZmF1bHQuVU5JU1NVRUQ7CiAgICB0aGlzLmRlZmVycmVkID0gdm9pZCAwOwogICAgdGhpcy5jYW5jZWxsZWQgPSBmYWxzZTsKICB9CiAgdmFyIFJlcXVlc3RfZGVmYXVsdDsKICB2YXIgaW5pdF9SZXF1ZXN0ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9SZXF1ZXN0LmpzIigpIHsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfUmVxdWVzdFN0YXRlKCk7CiAgICAgIGluaXRfUmVxdWVzdFR5cGUoKTsKICAgICAgUmVxdWVzdC5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdGhpcy5jYW5jZWxsZWQgPSB0cnVlOwogICAgICB9OwogICAgICBSZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnVybCA9IHRoaXMudXJsOwogICAgICAgIHJlc3VsdC5yZXF1ZXN0RnVuY3Rpb24gPSB0aGlzLnJlcXVlc3RGdW5jdGlvbjsKICAgICAgICByZXN1bHQuY2FuY2VsRnVuY3Rpb24gPSB0aGlzLmNhbmNlbEZ1bmN0aW9uOwogICAgICAgIHJlc3VsdC5wcmlvcml0eUZ1bmN0aW9uID0gdGhpcy5wcmlvcml0eUZ1bmN0aW9uOwogICAgICAgIHJlc3VsdC5wcmlvcml0eSA9IHRoaXMucHJpb3JpdHk7CiAgICAgICAgcmVzdWx0LnRocm90dGxlID0gdGhpcy50aHJvdHRsZTsKICAgICAgICByZXN1bHQudGhyb3R0bGVCeVNlcnZlciA9IHRoaXMudGhyb3R0bGVCeVNlcnZlcjsKICAgICAgICByZXN1bHQudHlwZSA9IHRoaXMudHlwZTsKICAgICAgICByZXN1bHQuc2VydmVyS2V5ID0gdGhpcy5zZXJ2ZXJLZXk7CiAgICAgICAgcmVzdWx0LnN0YXRlID0gUmVxdWVzdFN0YXRlX2RlZmF1bHQuVU5JU1NVRUQ7CiAgICAgICAgcmVzdWx0LmRlZmVycmVkID0gdm9pZCAwOwogICAgICAgIHJlc3VsdC5jYW5jZWxsZWQgPSBmYWxzZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBSZXF1ZXN0X2RlZmF1bHQgPSBSZXF1ZXN0OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvcGFyc2VSZXNwb25zZUhlYWRlcnMuanMKICBmdW5jdGlvbiBwYXJzZVJlc3BvbnNlSGVhZGVycyhoZWFkZXJTdHJpbmcpIHsKICAgIGNvbnN0IGhlYWRlcnMgPSB7fTsKICAgIGlmICghaGVhZGVyU3RyaW5nKSB7CiAgICAgIHJldHVybiBoZWFkZXJzOwogICAgfQogICAgY29uc3QgaGVhZGVyUGFpcnMgPSBoZWFkZXJTdHJpbmcuc3BsaXQoIlxyXG4iKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGVhZGVyUGFpcnMubGVuZ3RoOyArK2kpIHsKICAgICAgY29uc3QgaGVhZGVyUGFpciA9IGhlYWRlclBhaXJzW2ldOwogICAgICBjb25zdCBpbmRleCA9IGhlYWRlclBhaXIuaW5kZXhPZigiOiAiKTsKICAgICAgaWYgKGluZGV4ID4gMCkgewogICAgICAgIGNvbnN0IGtleSA9IGhlYWRlclBhaXIuc3Vic3RyaW5nKDAsIGluZGV4KTsKICAgICAgICBjb25zdCB2YWwgPSBoZWFkZXJQYWlyLnN1YnN0cmluZyhpbmRleCArIDIpOwogICAgICAgIGhlYWRlcnNba2V5XSA9IHZhbDsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGhlYWRlcnM7CiAgfQogIHZhciBwYXJzZVJlc3BvbnNlSGVhZGVyc19kZWZhdWx0OwogIHZhciBpbml0X3BhcnNlUmVzcG9uc2VIZWFkZXJzID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9wYXJzZVJlc3BvbnNlSGVhZGVycy5qcyIoKSB7CiAgICAgIHBhcnNlUmVzcG9uc2VIZWFkZXJzX2RlZmF1bHQgPSBwYXJzZVJlc3BvbnNlSGVhZGVyczsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1JlcXVlc3RFcnJvckV2ZW50LmpzCiAgZnVuY3Rpb24gUmVxdWVzdEVycm9yRXZlbnQoc3RhdHVzQ29kZSwgcmVzcG9uc2UsIHJlc3BvbnNlSGVhZGVycykgewogICAgdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzQ29kZTsKICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTsKICAgIHRoaXMucmVzcG9uc2VIZWFkZXJzID0gcmVzcG9uc2VIZWFkZXJzOwogICAgaWYgKHR5cGVvZiB0aGlzLnJlc3BvbnNlSGVhZGVycyA9PT0gInN0cmluZyIpIHsKICAgICAgdGhpcy5yZXNwb25zZUhlYWRlcnMgPSBwYXJzZVJlc3BvbnNlSGVhZGVyc19kZWZhdWx0KHRoaXMucmVzcG9uc2VIZWFkZXJzKTsKICAgIH0KICB9CiAgdmFyIFJlcXVlc3RFcnJvckV2ZW50X2RlZmF1bHQ7CiAgdmFyIGluaXRfUmVxdWVzdEVycm9yRXZlbnQgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1JlcXVlc3RFcnJvckV2ZW50LmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfcGFyc2VSZXNwb25zZUhlYWRlcnMoKTsKICAgICAgUmVxdWVzdEVycm9yRXZlbnQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7CiAgICAgICAgbGV0IHN0ciA9ICJSZXF1ZXN0IGhhcyBmYWlsZWQuIjsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHRoaXMuc3RhdHVzQ29kZSkpIHsKICAgICAgICAgIHN0ciArPSBgIFN0YXR1cyBDb2RlOiAke3RoaXMuc3RhdHVzQ29kZX1gOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc3RyOwogICAgICB9OwogICAgICBSZXF1ZXN0RXJyb3JFdmVudF9kZWZhdWx0ID0gUmVxdWVzdEVycm9yRXZlbnQ7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FdmVudC5qcwogIGZ1bmN0aW9uIEV2ZW50KCkgewogICAgdGhpcy5fbGlzdGVuZXJzID0gW107CiAgICB0aGlzLl9zY29wZXMgPSBbXTsKICAgIHRoaXMuX3RvUmVtb3ZlID0gW107CiAgICB0aGlzLl9pbnNpZGVSYWlzZUV2ZW50ID0gZmFsc2U7CiAgfQogIGZ1bmN0aW9uIGNvbXBhcmVOdW1iZXIoYTMsIGIpIHsKICAgIHJldHVybiBiIC0gYTM7CiAgfQogIHZhciBFdmVudF9kZWZhdWx0OwogIHZhciBpbml0X0V2ZW50ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FdmVudC5qcyIoKSB7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEV2ZW50LnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBudW1iZXIgb2YgbGlzdGVuZXJzIGN1cnJlbnRseSBzdWJzY3JpYmVkIHRvIHRoZSBldmVudC4KICAgICAgICAgKiBAbWVtYmVyb2YgRXZlbnQucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBudW1iZXJPZkxpc3RlbmVyczogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3RlbmVycy5sZW5ndGggLSB0aGlzLl90b1JlbW92ZS5sZW5ndGg7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgRXZlbnQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lciwgc2NvcGUpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5mdW5jKCJsaXN0ZW5lciIsIGxpc3RlbmVyKTsKICAgICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7CiAgICAgICAgdGhpcy5fc2NvcGVzLnB1c2goc2NvcGUpOwogICAgICAgIGNvbnN0IGV2ZW50ID0gdGhpczsKICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICBldmVudC5yZW1vdmVFdmVudExpc3RlbmVyKGxpc3RlbmVyLCBzY29wZSk7CiAgICAgICAgfTsKICAgICAgfTsKICAgICAgRXZlbnQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lciwgc2NvcGUpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5mdW5jKCJsaXN0ZW5lciIsIGxpc3RlbmVyKTsKICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7CiAgICAgICAgY29uc3Qgc2NvcGVzID0gdGhpcy5fc2NvcGVzOwogICAgICAgIGxldCBpbmRleCA9IC0xOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBpZiAobGlzdGVuZXJzW2ldID09PSBsaXN0ZW5lciAmJiBzY29wZXNbaV0gPT09IHNjb3BlKSB7CiAgICAgICAgICAgIGluZGV4ID0gaTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHsKICAgICAgICAgIGlmICh0aGlzLl9pbnNpZGVSYWlzZUV2ZW50KSB7CiAgICAgICAgICAgIHRoaXMuX3RvUmVtb3ZlLnB1c2goaW5kZXgpOwogICAgICAgICAgICBsaXN0ZW5lcnNbaW5kZXhdID0gdm9pZCAwOwogICAgICAgICAgICBzY29wZXNbaW5kZXhdID0gdm9pZCAwOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgICAgIHNjb3Blcy5zcGxpY2UoaW5kZXgsIDEpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfTsKICAgICAgRXZlbnQucHJvdG90eXBlLnJhaXNlRXZlbnQgPSBmdW5jdGlvbigpIHsKICAgICAgICB0aGlzLl9pbnNpZGVSYWlzZUV2ZW50ID0gdHJ1ZTsKICAgICAgICBsZXQgaTsKICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7CiAgICAgICAgY29uc3Qgc2NvcGVzID0gdGhpcy5fc2NvcGVzOwogICAgICAgIGxldCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgY29uc3QgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGxpc3RlbmVyKSkgewogICAgICAgICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkoc2NvcGVzW2ldLCBhcmd1bWVudHMpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCB0b1JlbW92ZSA9IHRoaXMuX3RvUmVtb3ZlOwogICAgICAgIGxlbmd0aCA9IHRvUmVtb3ZlLmxlbmd0aDsKICAgICAgICBpZiAobGVuZ3RoID4gMCkgewogICAgICAgICAgdG9SZW1vdmUuc29ydChjb21wYXJlTnVtYmVyKTsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICBjb25zdCBpbmRleCA9IHRvUmVtb3ZlW2ldOwogICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICAgICAgc2NvcGVzLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgICB9CiAgICAgICAgICB0b1JlbW92ZS5sZW5ndGggPSAwOwogICAgICAgIH0KICAgICAgICB0aGlzLl9pbnNpZGVSYWlzZUV2ZW50ID0gZmFsc2U7CiAgICAgIH07CiAgICAgIEV2ZW50X2RlZmF1bHQgPSBFdmVudDsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0hlYXAuanMKICBmdW5jdGlvbiBIZWFwKG9wdGlvbnMpIHsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgib3B0aW9ucyIsIG9wdGlvbnMpOwogICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJvcHRpb25zLmNvbXBhcmF0b3IiLCBvcHRpb25zLmNvbXBhcmF0b3IpOwogICAgdGhpcy5fY29tcGFyYXRvciA9IG9wdGlvbnMuY29tcGFyYXRvcjsKICAgIHRoaXMuX2FycmF5ID0gW107CiAgICB0aGlzLl9sZW5ndGggPSAwOwogICAgdGhpcy5fbWF4aW11bUxlbmd0aCA9IHZvaWQgMDsKICB9CiAgZnVuY3Rpb24gc3dhcChhcnJheSwgYTMsIGIpIHsKICAgIGNvbnN0IHRlbXAgPSBhcnJheVthM107CiAgICBhcnJheVthM10gPSBhcnJheVtiXTsKICAgIGFycmF5W2JdID0gdGVtcDsKICB9CiAgdmFyIEhlYXBfZGVmYXVsdDsKICB2YXIgaW5pdF9IZWFwID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9IZWFwLmpzIigpIHsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoSGVhcC5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBsZW5ndGggb2YgdGhlIGhlYXAuCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgSGVhcC5wcm90b3R5cGUKICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgbGVuZ3RoOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fbGVuZ3RoOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgaW50ZXJuYWwgYXJyYXkuCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgSGVhcC5wcm90b3R5cGUKICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtBcnJheX0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBpbnRlcm5hbEFycmF5OiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fYXJyYXk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIGFuZCBzZXRzIHRoZSBtYXhpbXVtIGxlbmd0aCBvZiB0aGUgaGVhcC4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJvZiBIZWFwLnByb3RvdHlwZQogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKi8KICAgICAgICBtYXhpbXVtTGVuZ3RoOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fbWF4aW11bUxlbmd0aDsKICAgICAgICAgIH0sCiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJtYXhpbXVtTGVuZ3RoIiwgdmFsdWUsIDApOwogICAgICAgICAgICBjb25zdCBvcmlnaW5hbExlbmd0aCA9IHRoaXMuX2xlbmd0aDsKICAgICAgICAgICAgaWYgKHZhbHVlIDwgb3JpZ2luYWxMZW5ndGgpIHsKICAgICAgICAgICAgICBjb25zdCBhcnJheSA9IHRoaXMuX2FycmF5OwogICAgICAgICAgICAgIGZvciAobGV0IGkgPSB2YWx1ZTsgaSA8IG9yaWdpbmFsTGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICAgIGFycmF5W2ldID0gdm9pZCAwOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB0aGlzLl9sZW5ndGggPSB2YWx1ZTsKICAgICAgICAgICAgICBhcnJheS5sZW5ndGggPSB2YWx1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLl9tYXhpbXVtTGVuZ3RoID0gdmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgY29tcGFyYXRvciB0byB1c2UgZm9yIHRoZSBoZWFwLiBJZiBjb21wYXJhdG9yKGEsIGIpIGlzIGxlc3MgdGhhbiAwLCBzb3J0IGEgdG8gYSBsb3dlciBpbmRleCB0aGFuIGIsIG90aGVyd2lzZSBzb3J0IHRvIGEgaGlnaGVyIGluZGV4LgogICAgICAgICAqCiAgICAgICAgICogQG1lbWJlcm9mIEhlYXAucHJvdG90eXBlCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7SGVhcC5Db21wYXJhdG9yQ2FsbGJhY2t9CiAgICAgICAgICovCiAgICAgICAgY29tcGFyYXRvcjogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbXBhcmF0b3I7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgSGVhcC5wcm90b3R5cGUucmVzZXJ2ZSA9IGZ1bmN0aW9uKGxlbmd0aCkgewogICAgICAgIGxlbmd0aCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGxlbmd0aCwgdGhpcy5fbGVuZ3RoKTsKICAgICAgICB0aGlzLl9hcnJheS5sZW5ndGggPSBsZW5ndGg7CiAgICAgIH07CiAgICAgIEhlYXAucHJvdG90eXBlLmhlYXBpZnkgPSBmdW5jdGlvbihpbmRleCkgewogICAgICAgIGluZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoaW5kZXgsIDApOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMuX2xlbmd0aDsKICAgICAgICBjb25zdCBjb21wYXJhdG9yID0gdGhpcy5fY29tcGFyYXRvcjsKICAgICAgICBjb25zdCBhcnJheSA9IHRoaXMuX2FycmF5OwogICAgICAgIGxldCBjYW5kaWRhdGUgPSAtMTsKICAgICAgICBsZXQgaW5zZXJ0aW5nID0gdHJ1ZTsKICAgICAgICB3aGlsZSAoaW5zZXJ0aW5nKSB7CiAgICAgICAgICBjb25zdCByaWdodCA9IDIgKiAoaW5kZXggKyAxKTsKICAgICAgICAgIGNvbnN0IGxlZnQgPSByaWdodCAtIDE7CiAgICAgICAgICBpZiAobGVmdCA8IGxlbmd0aCAmJiBjb21wYXJhdG9yKGFycmF5W2xlZnRdLCBhcnJheVtpbmRleF0pIDwgMCkgewogICAgICAgICAgICBjYW5kaWRhdGUgPSBsZWZ0OwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY2FuZGlkYXRlID0gaW5kZXg7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocmlnaHQgPCBsZW5ndGggJiYgY29tcGFyYXRvcihhcnJheVtyaWdodF0sIGFycmF5W2NhbmRpZGF0ZV0pIDwgMCkgewogICAgICAgICAgICBjYW5kaWRhdGUgPSByaWdodDsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChjYW5kaWRhdGUgIT09IGluZGV4KSB7CiAgICAgICAgICAgIHN3YXAoYXJyYXksIGNhbmRpZGF0ZSwgaW5kZXgpOwogICAgICAgICAgICBpbmRleCA9IGNhbmRpZGF0ZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGluc2VydGluZyA9IGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKICAgICAgSGVhcC5wcm90b3R5cGUucmVzb3J0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5fbGVuZ3RoOwogICAgICAgIGZvciAobGV0IGkgPSBNYXRoLmNlaWwobGVuZ3RoIC8gMik7IGkgPj0gMDsgLS1pKSB7CiAgICAgICAgICB0aGlzLmhlYXBpZnkoaSk7CiAgICAgICAgfQogICAgICB9OwogICAgICBIZWFwLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJlbGVtZW50IiwgZWxlbWVudCk7CiAgICAgICAgY29uc3QgYXJyYXkgPSB0aGlzLl9hcnJheTsKICAgICAgICBjb25zdCBjb21wYXJhdG9yID0gdGhpcy5fY29tcGFyYXRvcjsKICAgICAgICBjb25zdCBtYXhpbXVtTGVuZ3RoID0gdGhpcy5fbWF4aW11bUxlbmd0aDsKICAgICAgICBsZXQgaW5kZXggPSB0aGlzLl9sZW5ndGgrKzsKICAgICAgICBpZiAoaW5kZXggPCBhcnJheS5sZW5ndGgpIHsKICAgICAgICAgIGFycmF5W2luZGV4XSA9IGVsZW1lbnQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFycmF5LnB1c2goZWxlbWVudCk7CiAgICAgICAgfQogICAgICAgIHdoaWxlIChpbmRleCAhPT0gMCkgewogICAgICAgICAgY29uc3QgcGFyZW50ID0gTWF0aC5mbG9vcigoaW5kZXggLSAxKSAvIDIpOwogICAgICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCBhcnJheVtwYXJlbnRdKSA8IDApIHsKICAgICAgICAgICAgc3dhcChhcnJheSwgaW5kZXgsIHBhcmVudCk7CiAgICAgICAgICAgIGluZGV4ID0gcGFyZW50OwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGxldCByZW1vdmVkRWxlbWVudDsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG1heGltdW1MZW5ndGgpICYmIHRoaXMuX2xlbmd0aCA+IG1heGltdW1MZW5ndGgpIHsKICAgICAgICAgIHJlbW92ZWRFbGVtZW50ID0gYXJyYXlbbWF4aW11bUxlbmd0aF07CiAgICAgICAgICB0aGlzLl9sZW5ndGggPSBtYXhpbXVtTGVuZ3RoOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVtb3ZlZEVsZW1lbnQ7CiAgICAgIH07CiAgICAgIEhlYXAucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgICAgaW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChpbmRleCwgMCk7CiAgICAgICAgaWYgKHRoaXMuX2xlbmd0aCA9PT0gMCkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuKCJpbmRleCIsIGluZGV4LCB0aGlzLl9sZW5ndGgpOwogICAgICAgIGNvbnN0IGFycmF5ID0gdGhpcy5fYXJyYXk7CiAgICAgICAgY29uc3Qgcm9vdCA9IGFycmF5W2luZGV4XTsKICAgICAgICBzd2FwKGFycmF5LCBpbmRleCwgLS10aGlzLl9sZW5ndGgpOwogICAgICAgIHRoaXMuaGVhcGlmeShpbmRleCk7CiAgICAgICAgYXJyYXlbdGhpcy5fbGVuZ3RoXSA9IHZvaWQgMDsKICAgICAgICByZXR1cm4gcm9vdDsKICAgICAgfTsKICAgICAgSGVhcF9kZWZhdWx0ID0gSGVhcDsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1JlcXVlc3RTY2hlZHVsZXIuanMKICBmdW5jdGlvbiBzb3J0UmVxdWVzdHMoYTMsIGIpIHsKICAgIHJldHVybiBhMy5wcmlvcml0eSAtIGIucHJpb3JpdHk7CiAgfQogIGZ1bmN0aW9uIFJlcXVlc3RTY2hlZHVsZXIoKSB7CiAgfQogIGZ1bmN0aW9uIHVwZGF0ZVByaW9yaXR5KHJlcXVlc3QpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQocmVxdWVzdC5wcmlvcml0eUZ1bmN0aW9uKSkgewogICAgICByZXF1ZXN0LnByaW9yaXR5ID0gcmVxdWVzdC5wcmlvcml0eUZ1bmN0aW9uKCk7CiAgICB9CiAgfQogIGZ1bmN0aW9uIGlzc3VlUmVxdWVzdChyZXF1ZXN0KSB7CiAgICBpZiAocmVxdWVzdC5zdGF0ZSA9PT0gUmVxdWVzdFN0YXRlX2RlZmF1bHQuVU5JU1NVRUQpIHsKICAgICAgcmVxdWVzdC5zdGF0ZSA9IFJlcXVlc3RTdGF0ZV9kZWZhdWx0LklTU1VFRDsKICAgICAgcmVxdWVzdC5kZWZlcnJlZCA9IGRlZmVyX2RlZmF1bHQoKTsKICAgIH0KICAgIHJldHVybiByZXF1ZXN0LmRlZmVycmVkLnByb21pc2U7CiAgfQogIGZ1bmN0aW9uIGdldFJlcXVlc3RSZWNlaXZlZEZ1bmN0aW9uKHJlcXVlc3QpIHsKICAgIHJldHVybiBmdW5jdGlvbihyZXN1bHRzKSB7CiAgICAgIGlmIChyZXF1ZXN0LnN0YXRlID09PSBSZXF1ZXN0U3RhdGVfZGVmYXVsdC5DQU5DRUxMRUQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY29uc3QgZGVmZXJyZWQgPSByZXF1ZXN0LmRlZmVycmVkOwogICAgICAtLXN0YXRpc3RpY3MubnVtYmVyT2ZBY3RpdmVSZXF1ZXN0czsKICAgICAgLS1udW1iZXJPZkFjdGl2ZVJlcXVlc3RzQnlTZXJ2ZXJbcmVxdWVzdC5zZXJ2ZXJLZXldOwogICAgICByZXF1ZXN0Q29tcGxldGVkRXZlbnQucmFpc2VFdmVudCgpOwogICAgICByZXF1ZXN0LnN0YXRlID0gUmVxdWVzdFN0YXRlX2RlZmF1bHQuUkVDRUlWRUQ7CiAgICAgIHJlcXVlc3QuZGVmZXJyZWQgPSB2b2lkIDA7CiAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0cyk7CiAgICB9OwogIH0KICBmdW5jdGlvbiBnZXRSZXF1ZXN0RmFpbGVkRnVuY3Rpb24ocmVxdWVzdCkgewogICAgcmV0dXJuIGZ1bmN0aW9uKGVycm9yKSB7CiAgICAgIGlmIChyZXF1ZXN0LnN0YXRlID09PSBSZXF1ZXN0U3RhdGVfZGVmYXVsdC5DQU5DRUxMRUQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgKytzdGF0aXN0aWNzLm51bWJlck9mRmFpbGVkUmVxdWVzdHM7CiAgICAgIC0tc3RhdGlzdGljcy5udW1iZXJPZkFjdGl2ZVJlcXVlc3RzOwogICAgICAtLW51bWJlck9mQWN0aXZlUmVxdWVzdHNCeVNlcnZlcltyZXF1ZXN0LnNlcnZlcktleV07CiAgICAgIHJlcXVlc3RDb21wbGV0ZWRFdmVudC5yYWlzZUV2ZW50KGVycm9yKTsKICAgICAgcmVxdWVzdC5zdGF0ZSA9IFJlcXVlc3RTdGF0ZV9kZWZhdWx0LkZBSUxFRDsKICAgICAgcmVxdWVzdC5kZWZlcnJlZC5yZWplY3QoZXJyb3IpOwogICAgfTsKICB9CiAgZnVuY3Rpb24gc3RhcnRSZXF1ZXN0KHJlcXVlc3QpIHsKICAgIGNvbnN0IHByb21pc2UgPSBpc3N1ZVJlcXVlc3QocmVxdWVzdCk7CiAgICByZXF1ZXN0LnN0YXRlID0gUmVxdWVzdFN0YXRlX2RlZmF1bHQuQUNUSVZFOwogICAgYWN0aXZlUmVxdWVzdHMucHVzaChyZXF1ZXN0KTsKICAgICsrc3RhdGlzdGljcy5udW1iZXJPZkFjdGl2ZVJlcXVlc3RzOwogICAgKytzdGF0aXN0aWNzLm51bWJlck9mQWN0aXZlUmVxdWVzdHNFdmVyOwogICAgKytudW1iZXJPZkFjdGl2ZVJlcXVlc3RzQnlTZXJ2ZXJbcmVxdWVzdC5zZXJ2ZXJLZXldOwogICAgcmVxdWVzdC5yZXF1ZXN0RnVuY3Rpb24oKS50aGVuKGdldFJlcXVlc3RSZWNlaXZlZEZ1bmN0aW9uKHJlcXVlc3QpKS5jYXRjaChnZXRSZXF1ZXN0RmFpbGVkRnVuY3Rpb24ocmVxdWVzdCkpOwogICAgcmV0dXJuIHByb21pc2U7CiAgfQogIGZ1bmN0aW9uIGNhbmNlbFJlcXVlc3QocmVxdWVzdCkgewogICAgY29uc3QgYWN0aXZlID0gcmVxdWVzdC5zdGF0ZSA9PT0gUmVxdWVzdFN0YXRlX2RlZmF1bHQuQUNUSVZFOwogICAgcmVxdWVzdC5zdGF0ZSA9IFJlcXVlc3RTdGF0ZV9kZWZhdWx0LkNBTkNFTExFRDsKICAgICsrc3RhdGlzdGljcy5udW1iZXJPZkNhbmNlbGxlZFJlcXVlc3RzOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZXF1ZXN0LmRlZmVycmVkKSkgewogICAgICBjb25zdCBkZWZlcnJlZCA9IHJlcXVlc3QuZGVmZXJyZWQ7CiAgICAgIHJlcXVlc3QuZGVmZXJyZWQgPSB2b2lkIDA7CiAgICAgIGRlZmVycmVkLnJlamVjdCgpOwogICAgfQogICAgaWYgKGFjdGl2ZSkgewogICAgICAtLXN0YXRpc3RpY3MubnVtYmVyT2ZBY3RpdmVSZXF1ZXN0czsKICAgICAgLS1udW1iZXJPZkFjdGl2ZVJlcXVlc3RzQnlTZXJ2ZXJbcmVxdWVzdC5zZXJ2ZXJLZXldOwogICAgICArK3N0YXRpc3RpY3MubnVtYmVyT2ZDYW5jZWxsZWRBY3RpdmVSZXF1ZXN0czsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQocmVxdWVzdC5jYW5jZWxGdW5jdGlvbikpIHsKICAgICAgcmVxdWVzdC5jYW5jZWxGdW5jdGlvbigpOwogICAgfQogIH0KICBmdW5jdGlvbiB1cGRhdGVTdGF0aXN0aWNzKCkgewogICAgaWYgKCFSZXF1ZXN0U2NoZWR1bGVyLmRlYnVnU2hvd1N0YXRpc3RpY3MpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKHN0YXRpc3RpY3MubnVtYmVyT2ZBY3RpdmVSZXF1ZXN0cyA9PT0gMCAmJiBzdGF0aXN0aWNzLmxhc3ROdW1iZXJPZkFjdGl2ZVJlcXVlc3RzID4gMCkgewogICAgICBpZiAoc3RhdGlzdGljcy5udW1iZXJPZkF0dGVtcHRlZFJlcXVlc3RzID4gMCkgewogICAgICAgIGNvbnNvbGUubG9nKAogICAgICAgICAgYE51bWJlciBvZiBhdHRlbXB0ZWQgcmVxdWVzdHM6ICR7c3RhdGlzdGljcy5udW1iZXJPZkF0dGVtcHRlZFJlcXVlc3RzfWAKICAgICAgICApOwogICAgICAgIHN0YXRpc3RpY3MubnVtYmVyT2ZBdHRlbXB0ZWRSZXF1ZXN0cyA9IDA7CiAgICAgIH0KICAgICAgaWYgKHN0YXRpc3RpY3MubnVtYmVyT2ZDYW5jZWxsZWRSZXF1ZXN0cyA+IDApIHsKICAgICAgICBjb25zb2xlLmxvZygKICAgICAgICAgIGBOdW1iZXIgb2YgY2FuY2VsbGVkIHJlcXVlc3RzOiAke3N0YXRpc3RpY3MubnVtYmVyT2ZDYW5jZWxsZWRSZXF1ZXN0c31gCiAgICAgICAgKTsKICAgICAgICBzdGF0aXN0aWNzLm51bWJlck9mQ2FuY2VsbGVkUmVxdWVzdHMgPSAwOwogICAgICB9CiAgICAgIGlmIChzdGF0aXN0aWNzLm51bWJlck9mQ2FuY2VsbGVkQWN0aXZlUmVxdWVzdHMgPiAwKSB7CiAgICAgICAgY29uc29sZS5sb2coCiAgICAgICAgICBgTnVtYmVyIG9mIGNhbmNlbGxlZCBhY3RpdmUgcmVxdWVzdHM6ICR7c3RhdGlzdGljcy5udW1iZXJPZkNhbmNlbGxlZEFjdGl2ZVJlcXVlc3RzfWAKICAgICAgICApOwogICAgICAgIHN0YXRpc3RpY3MubnVtYmVyT2ZDYW5jZWxsZWRBY3RpdmVSZXF1ZXN0cyA9IDA7CiAgICAgIH0KICAgICAgaWYgKHN0YXRpc3RpY3MubnVtYmVyT2ZGYWlsZWRSZXF1ZXN0cyA+IDApIHsKICAgICAgICBjb25zb2xlLmxvZygKICAgICAgICAgIGBOdW1iZXIgb2YgZmFpbGVkIHJlcXVlc3RzOiAke3N0YXRpc3RpY3MubnVtYmVyT2ZGYWlsZWRSZXF1ZXN0c31gCiAgICAgICAgKTsKICAgICAgICBzdGF0aXN0aWNzLm51bWJlck9mRmFpbGVkUmVxdWVzdHMgPSAwOwogICAgICB9CiAgICB9CiAgICBzdGF0aXN0aWNzLmxhc3ROdW1iZXJPZkFjdGl2ZVJlcXVlc3RzID0gc3RhdGlzdGljcy5udW1iZXJPZkFjdGl2ZVJlcXVlc3RzOwogIH0KICB2YXIgaW1wb3J0X3VyaWpzNCwgc3RhdGlzdGljcywgcHJpb3JpdHlIZWFwTGVuZ3RoLCByZXF1ZXN0SGVhcCwgYWN0aXZlUmVxdWVzdHMsIG51bWJlck9mQWN0aXZlUmVxdWVzdHNCeVNlcnZlciwgcGFnZVVyaSwgcmVxdWVzdENvbXBsZXRlZEV2ZW50LCBSZXF1ZXN0U2NoZWR1bGVyX2RlZmF1bHQ7CiAgdmFyIGluaXRfUmVxdWVzdFNjaGVkdWxlciA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUmVxdWVzdFNjaGVkdWxlci5qcyIoKSB7CiAgICAgIGltcG9ydF91cmlqczQgPSBfX3RvRVNNKHJlcXVpcmVfVVJJKCksIDEpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmZXIoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRXZlbnQoKTsKICAgICAgaW5pdF9IZWFwKCk7CiAgICAgIGluaXRfaXNCbG9iVXJpKCk7CiAgICAgIGluaXRfaXNEYXRhVXJpKCk7CiAgICAgIGluaXRfUmVxdWVzdFN0YXRlKCk7CiAgICAgIHN0YXRpc3RpY3MgPSB7CiAgICAgICAgbnVtYmVyT2ZBdHRlbXB0ZWRSZXF1ZXN0czogMCwKICAgICAgICBudW1iZXJPZkFjdGl2ZVJlcXVlc3RzOiAwLAogICAgICAgIG51bWJlck9mQ2FuY2VsbGVkUmVxdWVzdHM6IDAsCiAgICAgICAgbnVtYmVyT2ZDYW5jZWxsZWRBY3RpdmVSZXF1ZXN0czogMCwKICAgICAgICBudW1iZXJPZkZhaWxlZFJlcXVlc3RzOiAwLAogICAgICAgIG51bWJlck9mQWN0aXZlUmVxdWVzdHNFdmVyOiAwLAogICAgICAgIGxhc3ROdW1iZXJPZkFjdGl2ZVJlcXVlc3RzOiAwCiAgICAgIH07CiAgICAgIHByaW9yaXR5SGVhcExlbmd0aCA9IDIwOwogICAgICByZXF1ZXN0SGVhcCA9IG5ldyBIZWFwX2RlZmF1bHQoewogICAgICAgIGNvbXBhcmF0b3I6IHNvcnRSZXF1ZXN0cwogICAgICB9KTsKICAgICAgcmVxdWVzdEhlYXAubWF4aW11bUxlbmd0aCA9IHByaW9yaXR5SGVhcExlbmd0aDsKICAgICAgcmVxdWVzdEhlYXAucmVzZXJ2ZShwcmlvcml0eUhlYXBMZW5ndGgpOwogICAgICBhY3RpdmVSZXF1ZXN0cyA9IFtdOwogICAgICBudW1iZXJPZkFjdGl2ZVJlcXVlc3RzQnlTZXJ2ZXIgPSB7fTsKICAgICAgcGFnZVVyaSA9IHR5cGVvZiBkb2N1bWVudCAhPT0gInVuZGVmaW5lZCIgPyBuZXcgaW1wb3J0X3VyaWpzNC5kZWZhdWx0KGRvY3VtZW50LmxvY2F0aW9uLmhyZWYpIDogbmV3IGltcG9ydF91cmlqczQuZGVmYXVsdCgpOwogICAgICByZXF1ZXN0Q29tcGxldGVkRXZlbnQgPSBuZXcgRXZlbnRfZGVmYXVsdCgpOwogICAgICBSZXF1ZXN0U2NoZWR1bGVyLm1heGltdW1SZXF1ZXN0cyA9IDUwOwogICAgICBSZXF1ZXN0U2NoZWR1bGVyLm1heGltdW1SZXF1ZXN0c1BlclNlcnZlciA9IDY7CiAgICAgIFJlcXVlc3RTY2hlZHVsZXIucmVxdWVzdHNCeVNlcnZlciA9IHsKICAgICAgICAiYXBpLmNlc2l1bS5jb206NDQzIjogMTgsCiAgICAgICAgImFzc2V0cy5pb24uY2VzaXVtLmNvbTo0NDMiOiAxOCwKICAgICAgICAiaWJhc2VtYXBzLWFwaS5hcmNnaXMuY29tOjQ0MyI6IDE4LAogICAgICAgICJ0aWxlLmdvb2dsZWFwaXMuY29tOjQ0MyI6IDE4LAogICAgICAgICJ0aWxlLm9wZW5zdHJlZXRtYXAub3JnOjQ0MyI6IDE4CiAgICAgIH07CiAgICAgIFJlcXVlc3RTY2hlZHVsZXIudGhyb3R0bGVSZXF1ZXN0cyA9IHRydWU7CiAgICAgIFJlcXVlc3RTY2hlZHVsZXIuZGVidWdTaG93U3RhdGlzdGljcyA9IGZhbHNlOwogICAgICBSZXF1ZXN0U2NoZWR1bGVyLnJlcXVlc3RDb21wbGV0ZWRFdmVudCA9IHJlcXVlc3RDb21wbGV0ZWRFdmVudDsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVxdWVzdFNjaGVkdWxlciwgewogICAgICAgIC8qKgogICAgICAgICAqIFJldHVybnMgdGhlIHN0YXRpc3RpY3MgdXNlZCBieSB0aGUgcmVxdWVzdCBzY2hlZHVsZXIuCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgUmVxdWVzdFNjaGVkdWxlcgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge29iamVjdH0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqLwogICAgICAgIHN0YXRpc3RpY3M6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBzdGF0aXN0aWNzOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIG1heGltdW0gc2l6ZSBvZiB0aGUgcHJpb3JpdHkgaGVhcC4gVGhpcyBsaW1pdHMgdGhlIG51bWJlciBvZiByZXF1ZXN0cyB0aGF0IGFyZSBzb3J0ZWQgYnkgcHJpb3JpdHkuIE9ubHkgYXBwbGllcyB0byByZXF1ZXN0cyB0aGF0IGFyZSBub3QgeWV0IGFjdGl2ZS4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJvZiBSZXF1ZXN0U2NoZWR1bGVyCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBkZWZhdWx0IDIwCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKi8KICAgICAgICBwcmlvcml0eUhlYXBMZW5ndGg6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBwcmlvcml0eUhlYXBMZW5ndGg7CiAgICAgICAgICB9LAogICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICBpZiAodmFsdWUgPCBwcmlvcml0eUhlYXBMZW5ndGgpIHsKICAgICAgICAgICAgICB3aGlsZSAocmVxdWVzdEhlYXAubGVuZ3RoID4gdmFsdWUpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSByZXF1ZXN0SGVhcC5wb3AoKTsKICAgICAgICAgICAgICAgIGNhbmNlbFJlcXVlc3QocmVxdWVzdCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHByaW9yaXR5SGVhcExlbmd0aCA9IHZhbHVlOwogICAgICAgICAgICByZXF1ZXN0SGVhcC5tYXhpbXVtTGVuZ3RoID0gdmFsdWU7CiAgICAgICAgICAgIHJlcXVlc3RIZWFwLnJlc2VydmUodmFsdWUpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIFJlcXVlc3RTY2hlZHVsZXIuc2VydmVySGFzT3BlblNsb3RzID0gZnVuY3Rpb24oc2VydmVyS2V5LCBkZXNpcmVkUmVxdWVzdHMpIHsKICAgICAgICBkZXNpcmVkUmVxdWVzdHMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChkZXNpcmVkUmVxdWVzdHMsIDEpOwogICAgICAgIGNvbnN0IG1heFJlcXVlc3RzID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgICAgICBSZXF1ZXN0U2NoZWR1bGVyLnJlcXVlc3RzQnlTZXJ2ZXJbc2VydmVyS2V5XSwKICAgICAgICAgIFJlcXVlc3RTY2hlZHVsZXIubWF4aW11bVJlcXVlc3RzUGVyU2VydmVyCiAgICAgICAgKTsKICAgICAgICBjb25zdCBoYXNPcGVuU2xvdHNTZXJ2ZXIgPSBudW1iZXJPZkFjdGl2ZVJlcXVlc3RzQnlTZXJ2ZXJbc2VydmVyS2V5XSArIGRlc2lyZWRSZXF1ZXN0cyA8PSBtYXhSZXF1ZXN0czsKICAgICAgICByZXR1cm4gaGFzT3BlblNsb3RzU2VydmVyOwogICAgICB9OwogICAgICBSZXF1ZXN0U2NoZWR1bGVyLmhlYXBIYXNPcGVuU2xvdHMgPSBmdW5jdGlvbihkZXNpcmVkUmVxdWVzdHMpIHsKICAgICAgICBjb25zdCBoYXNPcGVuU2xvdHNIZWFwID0gcmVxdWVzdEhlYXAubGVuZ3RoICsgZGVzaXJlZFJlcXVlc3RzIDw9IHByaW9yaXR5SGVhcExlbmd0aDsKICAgICAgICByZXR1cm4gaGFzT3BlblNsb3RzSGVhcDsKICAgICAgfTsKICAgICAgUmVxdWVzdFNjaGVkdWxlci51cGRhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgICBsZXQgaTsKICAgICAgICBsZXQgcmVxdWVzdDsKICAgICAgICBsZXQgcmVtb3ZlQ291bnQgPSAwOwogICAgICAgIGNvbnN0IGFjdGl2ZUxlbmd0aCA9IGFjdGl2ZVJlcXVlc3RzLmxlbmd0aDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYWN0aXZlTGVuZ3RoOyArK2kpIHsKICAgICAgICAgIHJlcXVlc3QgPSBhY3RpdmVSZXF1ZXN0c1tpXTsKICAgICAgICAgIGlmIChyZXF1ZXN0LmNhbmNlbGxlZCkgewogICAgICAgICAgICBjYW5jZWxSZXF1ZXN0KHJlcXVlc3QpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdGUgIT09IFJlcXVlc3RTdGF0ZV9kZWZhdWx0LkFDVElWRSkgewogICAgICAgICAgICArK3JlbW92ZUNvdW50OwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChyZW1vdmVDb3VudCA+IDApIHsKICAgICAgICAgICAgYWN0aXZlUmVxdWVzdHNbaSAtIHJlbW92ZUNvdW50XSA9IHJlcXVlc3Q7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGFjdGl2ZVJlcXVlc3RzLmxlbmd0aCAtPSByZW1vdmVDb3VudDsKICAgICAgICBjb25zdCBpc3N1ZWRSZXF1ZXN0cyA9IHJlcXVlc3RIZWFwLmludGVybmFsQXJyYXk7CiAgICAgICAgY29uc3QgaXNzdWVkTGVuZ3RoID0gcmVxdWVzdEhlYXAubGVuZ3RoOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBpc3N1ZWRMZW5ndGg7ICsraSkgewogICAgICAgICAgdXBkYXRlUHJpb3JpdHkoaXNzdWVkUmVxdWVzdHNbaV0pOwogICAgICAgIH0KICAgICAgICByZXF1ZXN0SGVhcC5yZXNvcnQoKTsKICAgICAgICBjb25zdCBvcGVuU2xvdHMgPSBNYXRoLm1heCgKICAgICAgICAgIFJlcXVlc3RTY2hlZHVsZXIubWF4aW11bVJlcXVlc3RzIC0gYWN0aXZlUmVxdWVzdHMubGVuZ3RoLAogICAgICAgICAgMAogICAgICAgICk7CiAgICAgICAgbGV0IGZpbGxlZFNsb3RzID0gMDsKICAgICAgICB3aGlsZSAoZmlsbGVkU2xvdHMgPCBvcGVuU2xvdHMgJiYgcmVxdWVzdEhlYXAubGVuZ3RoID4gMCkgewogICAgICAgICAgcmVxdWVzdCA9IHJlcXVlc3RIZWFwLnBvcCgpOwogICAgICAgICAgaWYgKHJlcXVlc3QuY2FuY2VsbGVkKSB7CiAgICAgICAgICAgIGNhbmNlbFJlcXVlc3QocmVxdWVzdCk7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHJlcXVlc3QudGhyb3R0bGVCeVNlcnZlciAmJiAhUmVxdWVzdFNjaGVkdWxlci5zZXJ2ZXJIYXNPcGVuU2xvdHMocmVxdWVzdC5zZXJ2ZXJLZXkpKSB7CiAgICAgICAgICAgIGNhbmNlbFJlcXVlc3QocmVxdWVzdCk7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgc3RhcnRSZXF1ZXN0KHJlcXVlc3QpOwogICAgICAgICAgKytmaWxsZWRTbG90czsKICAgICAgICB9CiAgICAgICAgdXBkYXRlU3RhdGlzdGljcygpOwogICAgICB9OwogICAgICBSZXF1ZXN0U2NoZWR1bGVyLmdldFNlcnZlcktleSA9IGZ1bmN0aW9uKHVybCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLnN0cmluZygidXJsIiwgdXJsKTsKICAgICAgICBsZXQgdXJpID0gbmV3IGltcG9ydF91cmlqczQuZGVmYXVsdCh1cmwpOwogICAgICAgIGlmICh1cmkuc2NoZW1lKCkgPT09ICIiKSB7CiAgICAgICAgICB1cmkgPSB1cmkuYWJzb2x1dGVUbyhwYWdlVXJpKTsKICAgICAgICAgIHVyaS5ub3JtYWxpemUoKTsKICAgICAgICB9CiAgICAgICAgbGV0IHNlcnZlcktleSA9IHVyaS5hdXRob3JpdHkoKTsKICAgICAgICBpZiAoIS86Ly50ZXN0KHNlcnZlcktleSkpIHsKICAgICAgICAgIHNlcnZlcktleSA9IGAke3NlcnZlcktleX06JHt1cmkuc2NoZW1lKCkgPT09ICJodHRwcyIgPyAiNDQzIiA6ICI4MCJ9YDsKICAgICAgICB9CiAgICAgICAgY29uc3QgbGVuZ3RoID0gbnVtYmVyT2ZBY3RpdmVSZXF1ZXN0c0J5U2VydmVyW3NlcnZlcktleV07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQobGVuZ3RoKSkgewogICAgICAgICAgbnVtYmVyT2ZBY3RpdmVSZXF1ZXN0c0J5U2VydmVyW3NlcnZlcktleV0gPSAwOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc2VydmVyS2V5OwogICAgICB9OwogICAgICBSZXF1ZXN0U2NoZWR1bGVyLnJlcXVlc3QgPSBmdW5jdGlvbihyZXF1ZXN0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXF1ZXN0IiwgcmVxdWVzdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yuc3RyaW5nKCJyZXF1ZXN0LnVybCIsIHJlcXVlc3QudXJsKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5mdW5jKCJyZXF1ZXN0LnJlcXVlc3RGdW5jdGlvbiIsIHJlcXVlc3QucmVxdWVzdEZ1bmN0aW9uKTsKICAgICAgICBpZiAoaXNEYXRhVXJpX2RlZmF1bHQocmVxdWVzdC51cmwpIHx8IGlzQmxvYlVyaV9kZWZhdWx0KHJlcXVlc3QudXJsKSkgewogICAgICAgICAgcmVxdWVzdENvbXBsZXRlZEV2ZW50LnJhaXNlRXZlbnQoKTsKICAgICAgICAgIHJlcXVlc3Quc3RhdGUgPSBSZXF1ZXN0U3RhdGVfZGVmYXVsdC5SRUNFSVZFRDsKICAgICAgICAgIHJldHVybiByZXF1ZXN0LnJlcXVlc3RGdW5jdGlvbigpOwogICAgICAgIH0KICAgICAgICArK3N0YXRpc3RpY3MubnVtYmVyT2ZBdHRlbXB0ZWRSZXF1ZXN0czsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXF1ZXN0LnNlcnZlcktleSkpIHsKICAgICAgICAgIHJlcXVlc3Quc2VydmVyS2V5ID0gUmVxdWVzdFNjaGVkdWxlci5nZXRTZXJ2ZXJLZXkocmVxdWVzdC51cmwpOwogICAgICAgIH0KICAgICAgICBpZiAoUmVxdWVzdFNjaGVkdWxlci50aHJvdHRsZVJlcXVlc3RzICYmIHJlcXVlc3QudGhyb3R0bGVCeVNlcnZlciAmJiAhUmVxdWVzdFNjaGVkdWxlci5zZXJ2ZXJIYXNPcGVuU2xvdHMocmVxdWVzdC5zZXJ2ZXJLZXkpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIVJlcXVlc3RTY2hlZHVsZXIudGhyb3R0bGVSZXF1ZXN0cyB8fCAhcmVxdWVzdC50aHJvdHRsZSkgewogICAgICAgICAgcmV0dXJuIHN0YXJ0UmVxdWVzdChyZXF1ZXN0KTsKICAgICAgICB9CiAgICAgICAgaWYgKGFjdGl2ZVJlcXVlc3RzLmxlbmd0aCA+PSBSZXF1ZXN0U2NoZWR1bGVyLm1heGltdW1SZXF1ZXN0cykgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgdXBkYXRlUHJpb3JpdHkocmVxdWVzdCk7CiAgICAgICAgY29uc3QgcmVtb3ZlZFJlcXVlc3QgPSByZXF1ZXN0SGVhcC5pbnNlcnQocmVxdWVzdCk7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZW1vdmVkUmVxdWVzdCkpIHsKICAgICAgICAgIGlmIChyZW1vdmVkUmVxdWVzdCA9PT0gcmVxdWVzdCkgewogICAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgICAgfQogICAgICAgICAgY2FuY2VsUmVxdWVzdChyZW1vdmVkUmVxdWVzdCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBpc3N1ZVJlcXVlc3QocmVxdWVzdCk7CiAgICAgIH07CiAgICAgIFJlcXVlc3RTY2hlZHVsZXIuY2xlYXJGb3JTcGVjcyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHdoaWxlIChyZXF1ZXN0SGVhcC5sZW5ndGggPiAwKSB7CiAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gcmVxdWVzdEhlYXAucG9wKCk7CiAgICAgICAgICBjYW5jZWxSZXF1ZXN0KHJlcXVlc3QpOwogICAgICAgIH0KICAgICAgICBjb25zdCBsZW5ndGggPSBhY3RpdmVSZXF1ZXN0cy5sZW5ndGg7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgY2FuY2VsUmVxdWVzdChhY3RpdmVSZXF1ZXN0c1tpXSk7CiAgICAgICAgfQogICAgICAgIGFjdGl2ZVJlcXVlc3RzLmxlbmd0aCA9IDA7CiAgICAgICAgbnVtYmVyT2ZBY3RpdmVSZXF1ZXN0c0J5U2VydmVyID0ge307CiAgICAgICAgc3RhdGlzdGljcy5udW1iZXJPZkF0dGVtcHRlZFJlcXVlc3RzID0gMDsKICAgICAgICBzdGF0aXN0aWNzLm51bWJlck9mQWN0aXZlUmVxdWVzdHMgPSAwOwogICAgICAgIHN0YXRpc3RpY3MubnVtYmVyT2ZDYW5jZWxsZWRSZXF1ZXN0cyA9IDA7CiAgICAgICAgc3RhdGlzdGljcy5udW1iZXJPZkNhbmNlbGxlZEFjdGl2ZVJlcXVlc3RzID0gMDsKICAgICAgICBzdGF0aXN0aWNzLm51bWJlck9mRmFpbGVkUmVxdWVzdHMgPSAwOwogICAgICAgIHN0YXRpc3RpY3MubnVtYmVyT2ZBY3RpdmVSZXF1ZXN0c0V2ZXIgPSAwOwogICAgICAgIHN0YXRpc3RpY3MubGFzdE51bWJlck9mQWN0aXZlUmVxdWVzdHMgPSAwOwogICAgICB9OwogICAgICBSZXF1ZXN0U2NoZWR1bGVyLm51bWJlck9mQWN0aXZlUmVxdWVzdHNCeVNlcnZlciA9IGZ1bmN0aW9uKHNlcnZlcktleSkgewogICAgICAgIHJldHVybiBudW1iZXJPZkFjdGl2ZVJlcXVlc3RzQnlTZXJ2ZXJbc2VydmVyS2V5XTsKICAgICAgfTsKICAgICAgUmVxdWVzdFNjaGVkdWxlci5yZXF1ZXN0SGVhcCA9IHJlcXVlc3RIZWFwOwogICAgICBSZXF1ZXN0U2NoZWR1bGVyX2RlZmF1bHQgPSBSZXF1ZXN0U2NoZWR1bGVyOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVHJ1c3RlZFNlcnZlcnMuanMKICBmdW5jdGlvbiBnZXRBdXRob3JpdHkodXJsKSB7CiAgICBjb25zdCB1cmkgPSBuZXcgaW1wb3J0X3VyaWpzNS5kZWZhdWx0KHVybCk7CiAgICB1cmkubm9ybWFsaXplKCk7CiAgICBsZXQgYXV0aG9yaXR5ID0gdXJpLmF1dGhvcml0eSgpOwogICAgaWYgKGF1dGhvcml0eS5sZW5ndGggPT09IDApIHsKICAgICAgcmV0dXJuIHZvaWQgMDsKICAgIH0KICAgIHVyaS5hdXRob3JpdHkoYXV0aG9yaXR5KTsKICAgIGlmIChhdXRob3JpdHkuaW5kZXhPZigiQCIpICE9PSAtMSkgewogICAgICBjb25zdCBwYXJ0cyA9IGF1dGhvcml0eS5zcGxpdCgiQCIpOwogICAgICBhdXRob3JpdHkgPSBwYXJ0c1sxXTsKICAgIH0KICAgIGlmIChhdXRob3JpdHkuaW5kZXhPZigiOiIpID09PSAtMSkgewogICAgICBsZXQgc2NoZW1lID0gdXJpLnNjaGVtZSgpOwogICAgICBpZiAoc2NoZW1lLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHNjaGVtZSA9IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbDsKICAgICAgICBzY2hlbWUgPSBzY2hlbWUuc3Vic3RyaW5nKDAsIHNjaGVtZS5sZW5ndGggLSAxKTsKICAgICAgfQogICAgICBpZiAoc2NoZW1lID09PSAiaHR0cCIpIHsKICAgICAgICBhdXRob3JpdHkgKz0gIjo4MCI7CiAgICAgIH0gZWxzZSBpZiAoc2NoZW1lID09PSAiaHR0cHMiKSB7CiAgICAgICAgYXV0aG9yaXR5ICs9ICI6NDQzIjsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gYXV0aG9yaXR5OwogIH0KICB2YXIgaW1wb3J0X3VyaWpzNSwgVHJ1c3RlZFNlcnZlcnMsIF9zZXJ2ZXJzLCBUcnVzdGVkU2VydmVyc19kZWZhdWx0OwogIHZhciBpbml0X1RydXN0ZWRTZXJ2ZXJzID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9UcnVzdGVkU2VydmVycy5qcyIoKSB7CiAgICAgIGltcG9ydF91cmlqczUgPSBfX3RvRVNNKHJlcXVpcmVfVVJJKCksIDEpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBUcnVzdGVkU2VydmVycyA9IHt9OwogICAgICBfc2VydmVycyA9IHt9OwogICAgICBUcnVzdGVkU2VydmVycy5hZGQgPSBmdW5jdGlvbihob3N0LCBwb3J0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaG9zdCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJob3N0IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwb3J0KSB8fCBwb3J0IDw9IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwb3J0IGlzIHJlcXVpcmVkIHRvIGJlIGdyZWF0ZXIgdGhhbiAwLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBhdXRob3JpdHkgPSBgJHtob3N0LnRvTG93ZXJDYXNlKCl9OiR7cG9ydH1gOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KF9zZXJ2ZXJzW2F1dGhvcml0eV0pKSB7CiAgICAgICAgICBfc2VydmVyc1thdXRob3JpdHldID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIFRydXN0ZWRTZXJ2ZXJzLnJlbW92ZSA9IGZ1bmN0aW9uKGhvc3QsIHBvcnQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChob3N0KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImhvc3QgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBvcnQpIHx8IHBvcnQgPD0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInBvcnQgaXMgcmVxdWlyZWQgdG8gYmUgZ3JlYXRlciB0aGFuIDAuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF1dGhvcml0eSA9IGAke2hvc3QudG9Mb3dlckNhc2UoKX06JHtwb3J0fWA7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChfc2VydmVyc1thdXRob3JpdHldKSkgewogICAgICAgICAgZGVsZXRlIF9zZXJ2ZXJzW2F1dGhvcml0eV07CiAgICAgICAgfQogICAgICB9OwogICAgICBUcnVzdGVkU2VydmVycy5jb250YWlucyA9IGZ1bmN0aW9uKHVybCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHVybCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ1cmwgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF1dGhvcml0eSA9IGdldEF1dGhvcml0eSh1cmwpOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYXV0aG9yaXR5KSAmJiBkZWZpbmVkX2RlZmF1bHQoX3NlcnZlcnNbYXV0aG9yaXR5XSkpIHsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH07CiAgICAgIFRydXN0ZWRTZXJ2ZXJzLmNsZWFyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgX3NlcnZlcnMgPSB7fTsKICAgICAgfTsKICAgICAgVHJ1c3RlZFNlcnZlcnNfZGVmYXVsdCA9IFRydXN0ZWRTZXJ2ZXJzOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUmVzb3VyY2UuanMKICBmdW5jdGlvbiBSZXNvdXJjZShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gInN0cmluZyIpIHsKICAgICAgb3B0aW9ucyA9IHsKICAgICAgICB1cmw6IG9wdGlvbnMKICAgICAgfTsKICAgIH0KICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLnN0cmluZygib3B0aW9ucy51cmwiLCBvcHRpb25zLnVybCk7CiAgICB0aGlzLl91cmwgPSB2b2lkIDA7CiAgICB0aGlzLl90ZW1wbGF0ZVZhbHVlcyA9IGRlZmF1bHRDbG9uZShvcHRpb25zLnRlbXBsYXRlVmFsdWVzLCB7fSk7CiAgICB0aGlzLl9xdWVyeVBhcmFtZXRlcnMgPSBkZWZhdWx0Q2xvbmUob3B0aW9ucy5xdWVyeVBhcmFtZXRlcnMsIHt9KTsKICAgIHRoaXMuaGVhZGVycyA9IGRlZmF1bHRDbG9uZShvcHRpb25zLmhlYWRlcnMsIHt9KTsKICAgIHRoaXMucmVxdWVzdCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMucmVxdWVzdCwgbmV3IFJlcXVlc3RfZGVmYXVsdCgpKTsKICAgIHRoaXMucHJveHkgPSBvcHRpb25zLnByb3h5OwogICAgdGhpcy5yZXRyeUNhbGxiYWNrID0gb3B0aW9ucy5yZXRyeUNhbGxiYWNrOwogICAgdGhpcy5yZXRyeUF0dGVtcHRzID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5yZXRyeUF0dGVtcHRzLCAwKTsKICAgIHRoaXMuX3JldHJ5Q291bnQgPSAwOwogICAgY29uc3QgcGFyc2VVcmwgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnBhcnNlVXJsLCB0cnVlKTsKICAgIGlmIChwYXJzZVVybCkgewogICAgICB0aGlzLnBhcnNlVXJsKG9wdGlvbnMudXJsLCB0cnVlLCB0cnVlKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuX3VybCA9IG9wdGlvbnMudXJsOwogICAgfQogICAgdGhpcy5fY3JlZGl0cyA9IG9wdGlvbnMuY3JlZGl0czsKICB9CiAgZnVuY3Rpb24gZGVmYXVsdENsb25lKHZhbHVlLCBkZWZhdWx0VmFsdWUyKSB7CiAgICByZXR1cm4gZGVmaW5lZF9kZWZhdWx0KHZhbHVlKSA/IGNsb25lX2RlZmF1bHQodmFsdWUpIDogZGVmYXVsdFZhbHVlMjsKICB9CiAgZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZyhxdWVyeVN0cmluZykgewogICAgaWYgKHF1ZXJ5U3RyaW5nLmxlbmd0aCA9PT0gMCkgewogICAgICByZXR1cm4ge307CiAgICB9CiAgICBpZiAocXVlcnlTdHJpbmcuaW5kZXhPZigiPSIpID09PSAtMSkgewogICAgICByZXR1cm4geyBbcXVlcnlTdHJpbmddOiB2b2lkIDAgfTsKICAgIH0KICAgIHJldHVybiBxdWVyeVRvT2JqZWN0X2RlZmF1bHQocXVlcnlTdHJpbmcpOwogIH0KICBmdW5jdGlvbiBjb21iaW5lUXVlcnlQYXJhbWV0ZXJzKHExMiwgcTIyLCBwcmVzZXJ2ZVF1ZXJ5UGFyYW1ldGVycykgewogICAgaWYgKCFwcmVzZXJ2ZVF1ZXJ5UGFyYW1ldGVycykgewogICAgICByZXR1cm4gY29tYmluZV9kZWZhdWx0KHExMiwgcTIyKTsKICAgIH0KICAgIGNvbnN0IHJlc3VsdCA9IGNsb25lX2RlZmF1bHQocTEyLCB0cnVlKTsKICAgIGZvciAoY29uc3QgcGFyYW0gaW4gcTIyKSB7CiAgICAgIGlmIChxMjIuaGFzT3duUHJvcGVydHkocGFyYW0pKSB7CiAgICAgICAgbGV0IHZhbHVlID0gcmVzdWx0W3BhcmFtXTsKICAgICAgICBjb25zdCBxMlZhbHVlID0gcTIyW3BhcmFtXTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHZhbHVlKSkgewogICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkgewogICAgICAgICAgICB2YWx1ZSA9IHJlc3VsdFtwYXJhbV0gPSBbdmFsdWVdOwogICAgICAgICAgfQogICAgICAgICAgcmVzdWx0W3BhcmFtXSA9IHZhbHVlLmNvbmNhdChxMlZhbHVlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0W3BhcmFtXSA9IEFycmF5LmlzQXJyYXkocTJWYWx1ZSkgPyBxMlZhbHVlLnNsaWNlKCkgOiBxMlZhbHVlOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgZnVuY3Rpb24gc3RyaW5naWZ5UXVlcnkocXVlcnlPYmplY3QpIHsKICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhxdWVyeU9iamVjdCk7CiAgICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHsKICAgICAgcmV0dXJuICIiOwogICAgfQogICAgaWYgKGtleXMubGVuZ3RoID09PSAxICYmICFkZWZpbmVkX2RlZmF1bHQocXVlcnlPYmplY3Rba2V5c1swXV0pKSB7CiAgICAgIHJldHVybiBgPyR7a2V5c1swXX1gOwogICAgfQogICAgcmV0dXJuIGA/JHtvYmplY3RUb1F1ZXJ5X2RlZmF1bHQocXVlcnlPYmplY3QpfWA7CiAgfQogIGZ1bmN0aW9uIGZldGNoSW1hZ2Uob3B0aW9ucykgewogICAgY29uc3QgcmVzb3VyY2UgPSBvcHRpb25zLnJlc291cmNlOwogICAgY29uc3QgZmxpcFkgPSBvcHRpb25zLmZsaXBZOwogICAgY29uc3Qgc2tpcENvbG9yU3BhY2VDb252ZXJzaW9uID0gb3B0aW9ucy5za2lwQ29sb3JTcGFjZUNvbnZlcnNpb247CiAgICBjb25zdCBwcmVmZXJJbWFnZUJpdG1hcCA9IG9wdGlvbnMucHJlZmVySW1hZ2VCaXRtYXA7CiAgICBjb25zdCByZXF1ZXN0ID0gcmVzb3VyY2UucmVxdWVzdDsKICAgIHJlcXVlc3QudXJsID0gcmVzb3VyY2UudXJsOwogICAgcmVxdWVzdC5yZXF1ZXN0RnVuY3Rpb24gPSBmdW5jdGlvbigpIHsKICAgICAgbGV0IGNyb3NzT3JpZ2luID0gZmFsc2U7CiAgICAgIGlmICghcmVzb3VyY2UuaXNEYXRhVXJpICYmICFyZXNvdXJjZS5pc0Jsb2JVcmkpIHsKICAgICAgICBjcm9zc09yaWdpbiA9IHJlc291cmNlLmlzQ3Jvc3NPcmlnaW5Vcmw7CiAgICAgIH0KICAgICAgY29uc3QgZGVmZXJyZWQgPSBkZWZlcl9kZWZhdWx0KCk7CiAgICAgIFJlc291cmNlLl9JbXBsZW1lbnRhdGlvbnMuY3JlYXRlSW1hZ2UoCiAgICAgICAgcmVxdWVzdCwKICAgICAgICBjcm9zc09yaWdpbiwKICAgICAgICBkZWZlcnJlZCwKICAgICAgICBmbGlwWSwKICAgICAgICBza2lwQ29sb3JTcGFjZUNvbnZlcnNpb24sCiAgICAgICAgcHJlZmVySW1hZ2VCaXRtYXAKICAgICAgKTsKICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7CiAgICB9OwogICAgY29uc3QgcHJvbWlzZSA9IFJlcXVlc3RTY2hlZHVsZXJfZGVmYXVsdC5yZXF1ZXN0KHJlcXVlc3QpOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocHJvbWlzZSkpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgcmV0dXJuIHByb21pc2UuY2F0Y2goZnVuY3Rpb24oZSkgewogICAgICBpZiAocmVxdWVzdC5zdGF0ZSAhPT0gUmVxdWVzdFN0YXRlX2RlZmF1bHQuRkFJTEVEKSB7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpOwogICAgICB9CiAgICAgIHJldHVybiByZXNvdXJjZS5yZXRyeU9uRXJyb3IoZSkudGhlbihmdW5jdGlvbihyZXRyeSkgewogICAgICAgIGlmIChyZXRyeSkgewogICAgICAgICAgcmVxdWVzdC5zdGF0ZSA9IFJlcXVlc3RTdGF0ZV9kZWZhdWx0LlVOSVNTVUVEOwogICAgICAgICAgcmVxdWVzdC5kZWZlcnJlZCA9IHZvaWQgMDsKICAgICAgICAgIHJldHVybiBmZXRjaEltYWdlKHsKICAgICAgICAgICAgcmVzb3VyY2UsCiAgICAgICAgICAgIGZsaXBZLAogICAgICAgICAgICBza2lwQ29sb3JTcGFjZUNvbnZlcnNpb24sCiAgICAgICAgICAgIHByZWZlckltYWdlQml0bWFwCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpOwogICAgICB9KTsKICAgIH0pOwogIH0KICBmdW5jdGlvbiBmZXRjaEpzb25wKHJlc291cmNlLCBjYWxsYmFja1BhcmFtZXRlck5hbWUsIGZ1bmN0aW9uTmFtZSkgewogICAgY29uc3QgY2FsbGJhY2tRdWVyeSA9IHt9OwogICAgY2FsbGJhY2tRdWVyeVtjYWxsYmFja1BhcmFtZXRlck5hbWVdID0gZnVuY3Rpb25OYW1lOwogICAgcmVzb3VyY2Uuc2V0UXVlcnlQYXJhbWV0ZXJzKGNhbGxiYWNrUXVlcnkpOwogICAgY29uc3QgcmVxdWVzdCA9IHJlc291cmNlLnJlcXVlc3Q7CiAgICBjb25zdCB1cmwgPSByZXNvdXJjZS51cmw7CiAgICByZXF1ZXN0LnVybCA9IHVybDsKICAgIHJlcXVlc3QucmVxdWVzdEZ1bmN0aW9uID0gZnVuY3Rpb24oKSB7CiAgICAgIGNvbnN0IGRlZmVycmVkID0gZGVmZXJfZGVmYXVsdCgpOwogICAgICB3aW5kb3dbZnVuY3Rpb25OYW1lXSA9IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGRhdGEpOwogICAgICAgIHRyeSB7CiAgICAgICAgICBkZWxldGUgd2luZG93W2Z1bmN0aW9uTmFtZV07CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgd2luZG93W2Z1bmN0aW9uTmFtZV0gPSB2b2lkIDA7CiAgICAgICAgfQogICAgICB9OwogICAgICBSZXNvdXJjZS5fSW1wbGVtZW50YXRpb25zLmxvYWRBbmRFeGVjdXRlU2NyaXB0KHVybCwgZnVuY3Rpb25OYW1lLCBkZWZlcnJlZCk7CiAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlOwogICAgfTsKICAgIGNvbnN0IHByb21pc2UgPSBSZXF1ZXN0U2NoZWR1bGVyX2RlZmF1bHQucmVxdWVzdChyZXF1ZXN0KTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHByb21pc2UpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHJldHVybiBwcm9taXNlLmNhdGNoKGZ1bmN0aW9uKGUpIHsKICAgICAgaWYgKHJlcXVlc3Quc3RhdGUgIT09IFJlcXVlc3RTdGF0ZV9kZWZhdWx0LkZBSUxFRCkgewogICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTsKICAgICAgfQogICAgICByZXR1cm4gcmVzb3VyY2UucmV0cnlPbkVycm9yKGUpLnRoZW4oZnVuY3Rpb24ocmV0cnkpIHsKICAgICAgICBpZiAocmV0cnkpIHsKICAgICAgICAgIHJlcXVlc3Quc3RhdGUgPSBSZXF1ZXN0U3RhdGVfZGVmYXVsdC5VTklTU1VFRDsKICAgICAgICAgIHJlcXVlc3QuZGVmZXJyZWQgPSB2b2lkIDA7CiAgICAgICAgICByZXR1cm4gZmV0Y2hKc29ucChyZXNvdXJjZSwgY2FsbGJhY2tQYXJhbWV0ZXJOYW1lLCBmdW5jdGlvbk5hbWUpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7CiAgICAgIH0pOwogICAgfSk7CiAgfQogIGZ1bmN0aW9uIGNoZWNrQW5kUmVzZXRSZXF1ZXN0KHJlcXVlc3QpIHsKICAgIGlmIChyZXF1ZXN0LnN0YXRlID09PSBSZXF1ZXN0U3RhdGVfZGVmYXVsdC5JU1NVRUQgfHwgcmVxdWVzdC5zdGF0ZSA9PT0gUmVxdWVzdFN0YXRlX2RlZmF1bHQuQUNUSVZFKSB7CiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgiVGhlIFJlc291cmNlIGlzIGFscmVhZHkgYmVpbmcgZmV0Y2hlZC4iKTsKICAgIH0KICAgIHJlcXVlc3Quc3RhdGUgPSBSZXF1ZXN0U3RhdGVfZGVmYXVsdC5VTklTU1VFRDsKICAgIHJlcXVlc3QuZGVmZXJyZWQgPSB2b2lkIDA7CiAgfQogIGZ1bmN0aW9uIGRlY29kZURhdGFVcmlUZXh0KGlzQmFzZTY0LCBkYXRhKSB7CiAgICBjb25zdCByZXN1bHQgPSBkZWNvZGVVUklDb21wb25lbnQoZGF0YSk7CiAgICBpZiAoaXNCYXNlNjQpIHsKICAgICAgcmV0dXJuIGF0b2IocmVzdWx0KTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIGRlY29kZURhdGFVcmlBcnJheUJ1ZmZlcihpc0Jhc2U2NCwgZGF0YSkgewogICAgY29uc3QgYnl0ZVN0cmluZyA9IGRlY29kZURhdGFVcmlUZXh0KGlzQmFzZTY0LCBkYXRhKTsKICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihieXRlU3RyaW5nLmxlbmd0aCk7CiAgICBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZVN0cmluZy5sZW5ndGg7IGkrKykgewogICAgICB2aWV3W2ldID0gYnl0ZVN0cmluZy5jaGFyQ29kZUF0KGkpOwogICAgfQogICAgcmV0dXJuIGJ1ZmZlcjsKICB9CiAgZnVuY3Rpb24gZGVjb2RlRGF0YVVyaShkYXRhVXJpUmVnZXhSZXN1bHQsIHJlc3BvbnNlVHlwZSkgewogICAgcmVzcG9uc2VUeXBlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQocmVzcG9uc2VUeXBlLCAiIik7CiAgICBjb25zdCBtaW1lVHlwZSA9IGRhdGFVcmlSZWdleFJlc3VsdFsxXTsKICAgIGNvbnN0IGlzQmFzZTY0ID0gISFkYXRhVXJpUmVnZXhSZXN1bHRbMl07CiAgICBjb25zdCBkYXRhID0gZGF0YVVyaVJlZ2V4UmVzdWx0WzNdOwogICAgbGV0IGJ1ZmZlcjsKICAgIGxldCBwYXJzZXI7CiAgICBzd2l0Y2ggKHJlc3BvbnNlVHlwZSkgewogICAgICBjYXNlICIiOgogICAgICBjYXNlICJ0ZXh0IjoKICAgICAgICByZXR1cm4gZGVjb2RlRGF0YVVyaVRleHQoaXNCYXNlNjQsIGRhdGEpOwogICAgICBjYXNlICJhcnJheWJ1ZmZlciI6CiAgICAgICAgcmV0dXJuIGRlY29kZURhdGFVcmlBcnJheUJ1ZmZlcihpc0Jhc2U2NCwgZGF0YSk7CiAgICAgIGNhc2UgImJsb2IiOgogICAgICAgIGJ1ZmZlciA9IGRlY29kZURhdGFVcmlBcnJheUJ1ZmZlcihpc0Jhc2U2NCwgZGF0YSk7CiAgICAgICAgcmV0dXJuIG5ldyBCbG9iKFtidWZmZXJdLCB7CiAgICAgICAgICB0eXBlOiBtaW1lVHlwZQogICAgICAgIH0pOwogICAgICBjYXNlICJkb2N1bWVudCI6CiAgICAgICAgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpOwogICAgICAgIHJldHVybiBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKAogICAgICAgICAgZGVjb2RlRGF0YVVyaVRleHQoaXNCYXNlNjQsIGRhdGEpLAogICAgICAgICAgbWltZVR5cGUKICAgICAgICApOwogICAgICBjYXNlICJqc29uIjoKICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkZWNvZGVEYXRhVXJpVGV4dChpc0Jhc2U2NCwgZGF0YSkpOwogICAgICBkZWZhdWx0OgogICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KGBVbmhhbmRsZWQgcmVzcG9uc2VUeXBlOiAke3Jlc3BvbnNlVHlwZX1gKTsKICAgIH0KICB9CiAgZnVuY3Rpb24gZGVjb2RlUmVzcG9uc2UobG9hZFdpdGhIdHRwUmVzcG9uc2UsIHJlc3BvbnNlVHlwZSkgewogICAgc3dpdGNoIChyZXNwb25zZVR5cGUpIHsKICAgICAgY2FzZSAidGV4dCI6CiAgICAgICAgcmV0dXJuIGxvYWRXaXRoSHR0cFJlc3BvbnNlLnRvU3RyaW5nKCJ1dGY4Iik7CiAgICAgIGNhc2UgImpzb24iOgogICAgICAgIHJldHVybiBKU09OLnBhcnNlKGxvYWRXaXRoSHR0cFJlc3BvbnNlLnRvU3RyaW5nKCJ1dGY4IikpOwogICAgICBkZWZhdWx0OgogICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShsb2FkV2l0aEh0dHBSZXNwb25zZSkuYnVmZmVyOwogICAgfQogIH0KICBmdW5jdGlvbiBsb2FkV2l0aEh0dHBSZXF1ZXN0KHVybCwgcmVzcG9uc2VUeXBlLCBtZXRob2QsIGRhdGEsIGhlYWRlcnMsIGRlZmVycmVkLCBvdmVycmlkZU1pbWVUeXBlKSB7CiAgICBsZXQgVVJMMjsKICAgIGxldCB6bGliOwogICAgUHJvbWlzZS5hbGwoW2ltcG9ydCgidXJsIiksIGltcG9ydCgiemxpYiIpXSkudGhlbigoW3VybEltcG9ydCwgemxpYkltcG9ydF0pID0+IHsKICAgICAgVVJMMiA9IHVybEltcG9ydC5wYXJzZSh1cmwpOwogICAgICB6bGliID0gemxpYkltcG9ydDsKICAgICAgcmV0dXJuIFVSTDIucHJvdG9jb2wgPT09ICJodHRwczoiID8gaW1wb3J0KCJodHRwcyIpIDogaW1wb3J0KCJodHRwIik7CiAgICB9KS50aGVuKChodHRwKSA9PiB7CiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7CiAgICAgICAgcHJvdG9jb2w6IFVSTDIucHJvdG9jb2wsCiAgICAgICAgaG9zdG5hbWU6IFVSTDIuaG9zdG5hbWUsCiAgICAgICAgcG9ydDogVVJMMi5wb3J0LAogICAgICAgIHBhdGg6IFVSTDIucGF0aCwKICAgICAgICBxdWVyeTogVVJMMi5xdWVyeSwKICAgICAgICBtZXRob2QsCiAgICAgICAgaGVhZGVycwogICAgICB9OwogICAgICBodHRwLnJlcXVlc3Qob3B0aW9ucykub24oInJlc3BvbnNlIiwgZnVuY3Rpb24ocmVzKSB7CiAgICAgICAgaWYgKHJlcy5zdGF0dXNDb2RlIDwgMjAwIHx8IHJlcy5zdGF0dXNDb2RlID49IDMwMCkgewogICAgICAgICAgZGVmZXJyZWQucmVqZWN0KAogICAgICAgICAgICBuZXcgUmVxdWVzdEVycm9yRXZlbnRfZGVmYXVsdChyZXMuc3RhdHVzQ29kZSwgcmVzLCByZXMuaGVhZGVycykKICAgICAgICAgICk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IGNodW5rQXJyYXkgPSBbXTsKICAgICAgICByZXMub24oImRhdGEiLCBmdW5jdGlvbihjaHVuaykgewogICAgICAgICAgY2h1bmtBcnJheS5wdXNoKGNodW5rKTsKICAgICAgICB9KTsKICAgICAgICByZXMub24oImVuZCIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgY29uc3QgcmVzdWx0ID0gQnVmZmVyLmNvbmNhdChjaHVua0FycmF5KTsKICAgICAgICAgIGlmIChyZXMuaGVhZGVyc1siY29udGVudC1lbmNvZGluZyJdID09PSAiZ3ppcCIpIHsKICAgICAgICAgICAgemxpYi5ndW56aXAocmVzdWx0LCBmdW5jdGlvbihlcnJvciwgcmVzdWx0VW56aXBwZWQpIHsKICAgICAgICAgICAgICBpZiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgKICAgICAgICAgICAgICAgICAgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KCJFcnJvciBkZWNvbXByZXNzaW5nIHJlc3BvbnNlLiIpCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKAogICAgICAgICAgICAgICAgICBkZWNvZGVSZXNwb25zZShyZXN1bHRVbnppcHBlZCwgcmVzcG9uc2VUeXBlKQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkZWNvZGVSZXNwb25zZShyZXN1bHQsIHJlc3BvbnNlVHlwZSkpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KS5vbigiZXJyb3IiLCBmdW5jdGlvbihlKSB7CiAgICAgICAgZGVmZXJyZWQucmVqZWN0KG5ldyBSZXF1ZXN0RXJyb3JFdmVudF9kZWZhdWx0KCkpOwogICAgICB9KS5lbmQoKTsKICAgIH0pOwogIH0KICB2YXIgaW1wb3J0X3VyaWpzNiwgeGhyQmxvYlN1cHBvcnRlZCwgc3VwcG9ydHNJbWFnZUJpdG1hcE9wdGlvbnNQcm9taXNlLCBkYXRhVXJpUmVnZXgyLCBub1hNTEh0dHBSZXF1ZXN0LCBSZXNvdXJjZV9kZWZhdWx0OwogIHZhciBpbml0X1Jlc291cmNlID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9SZXNvdXJjZS5qcyIoKSB7CiAgICAgIGltcG9ydF91cmlqczYgPSBfX3RvRVNNKHJlcXVpcmVfVVJJKCksIDEpOwogICAgICBpbml0X2FwcGVuZEZvcndhcmRTbGFzaCgpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfY2xvbmUoKTsKICAgICAgaW5pdF9jb21iaW5lKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmZXIoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9nZXRBYnNvbHV0ZVVyaSgpOwogICAgICBpbml0X2dldEJhc2VVcmkoKTsKICAgICAgaW5pdF9nZXRFeHRlbnNpb25Gcm9tVXJpKCk7CiAgICAgIGluaXRfZ2V0SW1hZ2VQaXhlbHMoKTsKICAgICAgaW5pdF9pc0Jsb2JVcmkoKTsKICAgICAgaW5pdF9pc0Nyb3NzT3JpZ2luVXJsKCk7CiAgICAgIGluaXRfaXNEYXRhVXJpKCk7CiAgICAgIGluaXRfbG9hZEFuZEV4ZWN1dGVTY3JpcHQoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfb2JqZWN0VG9RdWVyeSgpOwogICAgICBpbml0X3F1ZXJ5VG9PYmplY3QoKTsKICAgICAgaW5pdF9SZXF1ZXN0KCk7CiAgICAgIGluaXRfUmVxdWVzdEVycm9yRXZlbnQoKTsKICAgICAgaW5pdF9SZXF1ZXN0U2NoZWR1bGVyKCk7CiAgICAgIGluaXRfUmVxdWVzdFN0YXRlKCk7CiAgICAgIGluaXRfUnVudGltZUVycm9yKCk7CiAgICAgIGluaXRfVHJ1c3RlZFNlcnZlcnMoKTsKICAgICAgeGhyQmxvYlN1cHBvcnRlZCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgICAgICAgIHhoci5vcGVuKCJHRVQiLCAiIyIsIHRydWUpOwogICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICJibG9iIjsKICAgICAgICAgIHJldHVybiB4aHIucmVzcG9uc2VUeXBlID09PSAiYmxvYiI7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfSgpOwogICAgICBSZXNvdXJjZS5jcmVhdGVJZk5lZWRlZCA9IGZ1bmN0aW9uKHJlc291cmNlKSB7CiAgICAgICAgaWYgKHJlc291cmNlIGluc3RhbmNlb2YgUmVzb3VyY2UpIHsKICAgICAgICAgIHJldHVybiByZXNvdXJjZS5nZXREZXJpdmVkUmVzb3VyY2UoewogICAgICAgICAgICByZXF1ZXN0OiByZXNvdXJjZS5yZXF1ZXN0CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiByZXNvdXJjZSAhPT0gInN0cmluZyIpIHsKICAgICAgICAgIHJldHVybiByZXNvdXJjZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBSZXNvdXJjZSh7CiAgICAgICAgICB1cmw6IHJlc291cmNlCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLnN1cHBvcnRzSW1hZ2VCaXRtYXBPcHRpb25zID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChzdXBwb3J0c0ltYWdlQml0bWFwT3B0aW9uc1Byb21pc2UpKSB7CiAgICAgICAgICByZXR1cm4gc3VwcG9ydHNJbWFnZUJpdG1hcE9wdGlvbnNQcm9taXNlOwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIGNyZWF0ZUltYWdlQml0bWFwICE9PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICBzdXBwb3J0c0ltYWdlQml0bWFwT3B0aW9uc1Byb21pc2UgPSBQcm9taXNlLnJlc29sdmUoZmFsc2UpOwogICAgICAgICAgcmV0dXJuIHN1cHBvcnRzSW1hZ2VCaXRtYXBPcHRpb25zUHJvbWlzZTsKICAgICAgICB9CiAgICAgICAgY29uc3QgaW1hZ2VEYXRhVXJpID0gImRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQUVBQUFBQkNBSUFBQUNRZDFQZUFBQUFCR2RCVFVFQUFFNGczckVpRGdBQUFDQmpTRkpOQUFCNkpnQUFnSVFBQVBvQUFBQ0E2QUFBZFRBQUFPcGdBQUE2bUFBQUYzQ2N1bEU4QUFBQURFbEVRVlFJMTJOZzZHQUFBQUVVQUluZ0UzWmlBQUFBQUVsRlRrU3VRbUNDIjsKICAgICAgICBzdXBwb3J0c0ltYWdlQml0bWFwT3B0aW9uc1Byb21pc2UgPSBSZXNvdXJjZS5mZXRjaEJsb2IoewogICAgICAgICAgdXJsOiBpbWFnZURhdGFVcmkKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGJsb2IpIHsKICAgICAgICAgIGNvbnN0IGltYWdlQml0bWFwT3B0aW9ucyA9IHsKICAgICAgICAgICAgaW1hZ2VPcmllbnRhdGlvbjogImZsaXBZIiwKICAgICAgICAgICAgLy8gZGVmYXVsdCBpcyAibm9uZSIKICAgICAgICAgICAgcHJlbXVsdGlwbHlBbHBoYTogIm5vbmUiLAogICAgICAgICAgICAvLyBkZWZhdWx0IGlzICJkZWZhdWx0IgogICAgICAgICAgICBjb2xvclNwYWNlQ29udmVyc2lvbjogIm5vbmUiCiAgICAgICAgICAgIC8vIGRlZmF1bHQgaXMgImRlZmF1bHQiCiAgICAgICAgICB9OwogICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFsKICAgICAgICAgICAgY3JlYXRlSW1hZ2VCaXRtYXAoYmxvYiwgaW1hZ2VCaXRtYXBPcHRpb25zKSwKICAgICAgICAgICAgY3JlYXRlSW1hZ2VCaXRtYXAoYmxvYikKICAgICAgICAgIF0pOwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oaW1hZ2VCaXRtYXBzKSB7CiAgICAgICAgICBjb25zdCBjb2xvcldpdGhPcHRpb25zID0gZ2V0SW1hZ2VQaXhlbHNfZGVmYXVsdChpbWFnZUJpdG1hcHNbMF0pOwogICAgICAgICAgY29uc3QgY29sb3JXaXRoRGVmYXVsdHMgPSBnZXRJbWFnZVBpeGVsc19kZWZhdWx0KGltYWdlQml0bWFwc1sxXSk7CiAgICAgICAgICByZXR1cm4gY29sb3JXaXRoT3B0aW9uc1sxXSAhPT0gY29sb3JXaXRoRGVmYXVsdHNbMV07CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHN1cHBvcnRzSW1hZ2VCaXRtYXBPcHRpb25zUHJvbWlzZTsKICAgICAgfTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVzb3VyY2UsIHsKICAgICAgICAvKioKICAgICAgICAgKiBSZXR1cm5zIHRydWUgaWYgYmxvYnMgYXJlIHN1cHBvcnRlZC4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJvZiBSZXNvdXJjZQogICAgICAgICAqIEB0eXBlIHtib29sZWFufQogICAgICAgICAqCiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgaXNCbG9iU3VwcG9ydGVkOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4geGhyQmxvYlN1cHBvcnRlZDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhSZXNvdXJjZS5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBRdWVyeSBwYXJhbWV0ZXJzIGFwcGVuZGVkIHRvIHRoZSB1cmwuCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgUmVzb3VyY2UucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge29iamVjdH0KICAgICAgICAgKgogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIHF1ZXJ5UGFyYW1ldGVyczogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3F1ZXJ5UGFyYW1ldGVyczsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBrZXkvdmFsdWUgcGFpcnMgdXNlZCB0byByZXBsYWNlIHRlbXBsYXRlIHBhcmFtZXRlcnMgaW4gdGhlIHVybC4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJvZiBSZXNvdXJjZS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fQogICAgICAgICAqCiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgdGVtcGxhdGVWYWx1ZXM6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZW1wbGF0ZVZhbHVlczsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSB1cmwgdG8gdGhlIHJlc291cmNlIHdpdGggdGVtcGxhdGUgdmFsdWVzIHJlcGxhY2VkLCBxdWVyeSBzdHJpbmcgYXBwZW5kZWQgYW5kIGVuY29kZWQgYnkgcHJveHkgaWYgb25lIHdhcyBzZXQuCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgUmVzb3VyY2UucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge3N0cmluZ30KICAgICAgICAgKi8KICAgICAgICB1cmw6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFVybENvbXBvbmVudCh0cnVlLCB0cnVlKTsKICAgICAgICAgIH0sCiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgIHRoaXMucGFyc2VVcmwodmFsdWUsIGZhbHNlLCBmYWxzZSk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgZmlsZSBleHRlbnNpb24gb2YgdGhlIHJlc291cmNlLgogICAgICAgICAqCiAgICAgICAgICogQG1lbWJlcm9mIFJlc291cmNlLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgICAgICoKICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBleHRlbnNpb246IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBnZXRFeHRlbnNpb25Gcm9tVXJpX2RlZmF1bHQodGhpcy5fdXJsKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIFRydWUgaWYgdGhlIFJlc291cmNlIHJlZmVycyB0byBhIGRhdGEgVVJJLgogICAgICAgICAqCiAgICAgICAgICogQG1lbWJlcm9mIFJlc291cmNlLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtib29sZWFufQogICAgICAgICAqLwogICAgICAgIGlzRGF0YVVyaTogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIGlzRGF0YVVyaV9kZWZhdWx0KHRoaXMuX3VybCk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIGlmIHRoZSBSZXNvdXJjZSByZWZlcnMgdG8gYSBibG9iIFVSSS4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJvZiBSZXNvdXJjZS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAgICAgKi8KICAgICAgICBpc0Jsb2JVcmk6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBpc0Jsb2JVcmlfZGVmYXVsdCh0aGlzLl91cmwpOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogVHJ1ZSBpZiB0aGUgUmVzb3VyY2UgcmVmZXJzIHRvIGEgY3Jvc3Mgb3JpZ2luIFVSTC4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJvZiBSZXNvdXJjZS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAgICAgKi8KICAgICAgICBpc0Nyb3NzT3JpZ2luVXJsOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gaXNDcm9zc09yaWdpblVybF9kZWZhdWx0KHRoaXMuX3VybCk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIGlmIHRoZSBSZXNvdXJjZSBoYXMgcmVxdWVzdCBoZWFkZXJzLiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gY2hlY2tpbmcgaWYgdGhlIGhlYWRlcnMgcHJvcGVydHkgaGFzIGFueSBrZXlzLgogICAgICAgICAqCiAgICAgICAgICogQG1lbWJlcm9mIFJlc291cmNlLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtib29sZWFufQogICAgICAgICAqLwogICAgICAgIGhhc0hlYWRlcnM6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmhlYWRlcnMpLmxlbmd0aCA+IDA7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBjcmVkaXRzIHJlcXVpcmVkIGZvciBhdHRyaWJ1dGlvbiBvZiBhbiBhc3NldC4KICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqLwogICAgICAgIGNyZWRpdHM6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jcmVkaXRzOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIFJlc291cmNlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0aGlzLmdldFVybENvbXBvbmVudCh0cnVlLCB0cnVlKTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucHJvdG90eXBlLnBhcnNlVXJsID0gZnVuY3Rpb24odXJsLCBtZXJnZSwgcHJlc2VydmVRdWVyeSwgYmFzZVVybCkgewogICAgICAgIGxldCB1cmkgPSBuZXcgaW1wb3J0X3VyaWpzNi5kZWZhdWx0KHVybCk7CiAgICAgICAgY29uc3QgcXVlcnkgPSBwYXJzZVF1ZXJ5U3RyaW5nKHVyaS5xdWVyeSgpKTsKICAgICAgICB0aGlzLl9xdWVyeVBhcmFtZXRlcnMgPSBtZXJnZSA/IGNvbWJpbmVRdWVyeVBhcmFtZXRlcnMocXVlcnksIHRoaXMucXVlcnlQYXJhbWV0ZXJzLCBwcmVzZXJ2ZVF1ZXJ5KSA6IHF1ZXJ5OwogICAgICAgIHVyaS5zZWFyY2goIiIpOwogICAgICAgIHVyaS5mcmFnbWVudCgiIik7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChiYXNlVXJsKSAmJiB1cmkuc2NoZW1lKCkgPT09ICIiKSB7CiAgICAgICAgICB1cmkgPSB1cmkuYWJzb2x1dGVUbyhnZXRBYnNvbHV0ZVVyaV9kZWZhdWx0KGJhc2VVcmwpKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5fdXJsID0gdXJpLnRvU3RyaW5nKCk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLnByb3RvdHlwZS5nZXRVcmxDb21wb25lbnQgPSBmdW5jdGlvbihxdWVyeSwgcHJveHkpIHsKICAgICAgICBpZiAodGhpcy5pc0RhdGFVcmkpIHsKICAgICAgICAgIHJldHVybiB0aGlzLl91cmw7CiAgICAgICAgfQogICAgICAgIGxldCB1cmwgPSB0aGlzLl91cmw7CiAgICAgICAgaWYgKHF1ZXJ5KSB7CiAgICAgICAgICB1cmwgPSBgJHt1cmx9JHtzdHJpbmdpZnlRdWVyeSh0aGlzLnF1ZXJ5UGFyYW1ldGVycyl9YDsKICAgICAgICB9CiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoLyU3Qi9nLCAieyIpLnJlcGxhY2UoLyU3RC9nLCAifSIpOwogICAgICAgIGNvbnN0IHRlbXBsYXRlVmFsdWVzID0gdGhpcy5fdGVtcGxhdGVWYWx1ZXM7CiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRlbXBsYXRlVmFsdWVzKS5sZW5ndGggPiAwKSB7CiAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgveyguKj8pfS9nLCBmdW5jdGlvbihtYXRjaCwga2V5KSB7CiAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VtZW50ID0gdGVtcGxhdGVWYWx1ZXNba2V5XTsKICAgICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZXBsYWNlbWVudCkpIHsKICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHJlcGxhY2VtZW50KTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbWF0Y2g7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgaWYgKHByb3h5ICYmIGRlZmluZWRfZGVmYXVsdCh0aGlzLnByb3h5KSkgewogICAgICAgICAgdXJsID0gdGhpcy5wcm94eS5nZXRVUkwodXJsKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVybDsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucHJvdG90eXBlLnNldFF1ZXJ5UGFyYW1ldGVycyA9IGZ1bmN0aW9uKHBhcmFtcywgdXNlQXNEZWZhdWx0KSB7CiAgICAgICAgaWYgKHVzZUFzRGVmYXVsdCkgewogICAgICAgICAgdGhpcy5fcXVlcnlQYXJhbWV0ZXJzID0gY29tYmluZVF1ZXJ5UGFyYW1ldGVycygKICAgICAgICAgICAgdGhpcy5fcXVlcnlQYXJhbWV0ZXJzLAogICAgICAgICAgICBwYXJhbXMsCiAgICAgICAgICAgIGZhbHNlCiAgICAgICAgICApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLl9xdWVyeVBhcmFtZXRlcnMgPSBjb21iaW5lUXVlcnlQYXJhbWV0ZXJzKAogICAgICAgICAgICBwYXJhbXMsCiAgICAgICAgICAgIHRoaXMuX3F1ZXJ5UGFyYW1ldGVycywKICAgICAgICAgICAgZmFsc2UKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICB9OwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUuYXBwZW5kUXVlcnlQYXJhbWV0ZXJzID0gZnVuY3Rpb24ocGFyYW1zKSB7CiAgICAgICAgdGhpcy5fcXVlcnlQYXJhbWV0ZXJzID0gY29tYmluZVF1ZXJ5UGFyYW1ldGVycygKICAgICAgICAgIHBhcmFtcywKICAgICAgICAgIHRoaXMuX3F1ZXJ5UGFyYW1ldGVycywKICAgICAgICAgIHRydWUKICAgICAgICApOwogICAgICB9OwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUuc2V0VGVtcGxhdGVWYWx1ZXMgPSBmdW5jdGlvbih0ZW1wbGF0ZSwgdXNlQXNEZWZhdWx0KSB7CiAgICAgICAgaWYgKHVzZUFzRGVmYXVsdCkgewogICAgICAgICAgdGhpcy5fdGVtcGxhdGVWYWx1ZXMgPSBjb21iaW5lX2RlZmF1bHQodGhpcy5fdGVtcGxhdGVWYWx1ZXMsIHRlbXBsYXRlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5fdGVtcGxhdGVWYWx1ZXMgPSBjb21iaW5lX2RlZmF1bHQodGVtcGxhdGUsIHRoaXMuX3RlbXBsYXRlVmFsdWVzKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIFJlc291cmNlLnByb3RvdHlwZS5nZXREZXJpdmVkUmVzb3VyY2UgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSB0aGlzLmNsb25lKCk7CiAgICAgICAgcmVzb3VyY2UuX3JldHJ5Q291bnQgPSAwOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy51cmwpKSB7CiAgICAgICAgICBjb25zdCBwcmVzZXJ2ZVF1ZXJ5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5wcmVzZXJ2ZVF1ZXJ5UGFyYW1ldGVycywgZmFsc2UpOwogICAgICAgICAgcmVzb3VyY2UucGFyc2VVcmwob3B0aW9ucy51cmwsIHRydWUsIHByZXNlcnZlUXVlcnksIHRoaXMuX3VybCk7CiAgICAgICAgfQogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5xdWVyeVBhcmFtZXRlcnMpKSB7CiAgICAgICAgICByZXNvdXJjZS5fcXVlcnlQYXJhbWV0ZXJzID0gY29tYmluZV9kZWZhdWx0KAogICAgICAgICAgICBvcHRpb25zLnF1ZXJ5UGFyYW1ldGVycywKICAgICAgICAgICAgcmVzb3VyY2UucXVlcnlQYXJhbWV0ZXJzCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMudGVtcGxhdGVWYWx1ZXMpKSB7CiAgICAgICAgICByZXNvdXJjZS5fdGVtcGxhdGVWYWx1ZXMgPSBjb21iaW5lX2RlZmF1bHQoCiAgICAgICAgICAgIG9wdGlvbnMudGVtcGxhdGVWYWx1ZXMsCiAgICAgICAgICAgIHJlc291cmNlLnRlbXBsYXRlVmFsdWVzCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMuaGVhZGVycykpIHsKICAgICAgICAgIHJlc291cmNlLmhlYWRlcnMgPSBjb21iaW5lX2RlZmF1bHQob3B0aW9ucy5oZWFkZXJzLCByZXNvdXJjZS5oZWFkZXJzKTsKICAgICAgICB9CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChvcHRpb25zLnByb3h5KSkgewogICAgICAgICAgcmVzb3VyY2UucHJveHkgPSBvcHRpb25zLnByb3h5OwogICAgICAgIH0KICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMucmVxdWVzdCkpIHsKICAgICAgICAgIHJlc291cmNlLnJlcXVlc3QgPSBvcHRpb25zLnJlcXVlc3Q7CiAgICAgICAgfQogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5yZXRyeUNhbGxiYWNrKSkgewogICAgICAgICAgcmVzb3VyY2UucmV0cnlDYWxsYmFjayA9IG9wdGlvbnMucmV0cnlDYWxsYmFjazsKICAgICAgICB9CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChvcHRpb25zLnJldHJ5QXR0ZW1wdHMpKSB7CiAgICAgICAgICByZXNvdXJjZS5yZXRyeUF0dGVtcHRzID0gb3B0aW9ucy5yZXRyeUF0dGVtcHRzOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzb3VyY2U7CiAgICAgIH07CiAgICAgIFJlc291cmNlLnByb3RvdHlwZS5yZXRyeU9uRXJyb3IgPSBmdW5jdGlvbihlcnJvcikgewogICAgICAgIGNvbnN0IHJldHJ5Q2FsbGJhY2sgPSB0aGlzLnJldHJ5Q2FsbGJhY2s7CiAgICAgICAgaWYgKHR5cGVvZiByZXRyeUNhbGxiYWNrICE9PSAiZnVuY3Rpb24iIHx8IHRoaXMuX3JldHJ5Q291bnQgPj0gdGhpcy5yZXRyeUF0dGVtcHRzKSB7CiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXRyeUNhbGxiYWNrKHRoaXMsIGVycm9yKSkudGhlbihmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICAgICsrdGhhdC5fcmV0cnlDb3VudDsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgUmVzb3VyY2UoewogICAgICAgICAgICB1cmw6IHRoaXMuX3VybCwKICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzOiB0aGlzLnF1ZXJ5UGFyYW1ldGVycywKICAgICAgICAgICAgdGVtcGxhdGVWYWx1ZXM6IHRoaXMudGVtcGxhdGVWYWx1ZXMsCiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycywKICAgICAgICAgICAgcHJveHk6IHRoaXMucHJveHksCiAgICAgICAgICAgIHJldHJ5Q2FsbGJhY2s6IHRoaXMucmV0cnlDYWxsYmFjaywKICAgICAgICAgICAgcmV0cnlBdHRlbXB0czogdGhpcy5yZXRyeUF0dGVtcHRzLAogICAgICAgICAgICByZXF1ZXN0OiB0aGlzLnJlcXVlc3QuY2xvbmUoKSwKICAgICAgICAgICAgcGFyc2VVcmw6IGZhbHNlLAogICAgICAgICAgICBjcmVkaXRzOiBkZWZpbmVkX2RlZmF1bHQodGhpcy5jcmVkaXRzKSA/IHRoaXMuY3JlZGl0cy5zbGljZSgpIDogdm9pZCAwCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Ll91cmwgPSB0aGlzLl91cmw7CiAgICAgICAgcmVzdWx0Ll9xdWVyeVBhcmFtZXRlcnMgPSBjbG9uZV9kZWZhdWx0KHRoaXMuX3F1ZXJ5UGFyYW1ldGVycyk7CiAgICAgICAgcmVzdWx0Ll90ZW1wbGF0ZVZhbHVlcyA9IGNsb25lX2RlZmF1bHQodGhpcy5fdGVtcGxhdGVWYWx1ZXMpOwogICAgICAgIHJlc3VsdC5oZWFkZXJzID0gY2xvbmVfZGVmYXVsdCh0aGlzLmhlYWRlcnMpOwogICAgICAgIHJlc3VsdC5wcm94eSA9IHRoaXMucHJveHk7CiAgICAgICAgcmVzdWx0LnJldHJ5Q2FsbGJhY2sgPSB0aGlzLnJldHJ5Q2FsbGJhY2s7CiAgICAgICAgcmVzdWx0LnJldHJ5QXR0ZW1wdHMgPSB0aGlzLnJldHJ5QXR0ZW1wdHM7CiAgICAgICAgcmVzdWx0Ll9yZXRyeUNvdW50ID0gMDsKICAgICAgICByZXN1bHQucmVxdWVzdCA9IHRoaXMucmVxdWVzdC5jbG9uZSgpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFJlc291cmNlLnByb3RvdHlwZS5nZXRCYXNlVXJpID0gZnVuY3Rpb24oaW5jbHVkZVF1ZXJ5KSB7CiAgICAgICAgcmV0dXJuIGdldEJhc2VVcmlfZGVmYXVsdCh0aGlzLmdldFVybENvbXBvbmVudChpbmNsdWRlUXVlcnkpLCBpbmNsdWRlUXVlcnkpOwogICAgICB9OwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUuYXBwZW5kRm9yd2FyZFNsYXNoID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdGhpcy5fdXJsID0gYXBwZW5kRm9yd2FyZFNsYXNoX2RlZmF1bHQodGhpcy5fdXJsKTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucHJvdG90eXBlLmZldGNoQXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy5mZXRjaCh7CiAgICAgICAgICByZXNwb25zZVR5cGU6ICJhcnJheWJ1ZmZlciIKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UuZmV0Y2hBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBSZXNvdXJjZShvcHRpb25zKTsKICAgICAgICByZXR1cm4gcmVzb3VyY2UuZmV0Y2hBcnJheUJ1ZmZlcigpOwogICAgICB9OwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUuZmV0Y2hCbG9iID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goewogICAgICAgICAgcmVzcG9uc2VUeXBlOiAiYmxvYiIKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UuZmV0Y2hCbG9iID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIGNvbnN0IHJlc291cmNlID0gbmV3IFJlc291cmNlKG9wdGlvbnMpOwogICAgICAgIHJldHVybiByZXNvdXJjZS5mZXRjaEJsb2IoKTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucHJvdG90eXBlLmZldGNoSW1hZ2UgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICAgICAgY29uc3QgcHJlZmVySW1hZ2VCaXRtYXAgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnByZWZlckltYWdlQml0bWFwLCBmYWxzZSk7CiAgICAgICAgY29uc3QgcHJlZmVyQmxvYiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMucHJlZmVyQmxvYiwgZmFsc2UpOwogICAgICAgIGNvbnN0IGZsaXBZID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5mbGlwWSwgZmFsc2UpOwogICAgICAgIGNvbnN0IHNraXBDb2xvclNwYWNlQ29udmVyc2lvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICAgICAgb3B0aW9ucy5za2lwQ29sb3JTcGFjZUNvbnZlcnNpb24sCiAgICAgICAgICBmYWxzZQogICAgICAgICk7CiAgICAgICAgY2hlY2tBbmRSZXNldFJlcXVlc3QodGhpcy5yZXF1ZXN0KTsKICAgICAgICBpZiAoIXhockJsb2JTdXBwb3J0ZWQgfHwgdGhpcy5pc0RhdGFVcmkgfHwgdGhpcy5pc0Jsb2JVcmkgfHwgIXRoaXMuaGFzSGVhZGVycyAmJiAhcHJlZmVyQmxvYikgewogICAgICAgICAgcmV0dXJuIGZldGNoSW1hZ2UoewogICAgICAgICAgICByZXNvdXJjZTogdGhpcywKICAgICAgICAgICAgZmxpcFksCiAgICAgICAgICAgIHNraXBDb2xvclNwYWNlQ29udmVyc2lvbiwKICAgICAgICAgICAgcHJlZmVySW1hZ2VCaXRtYXAKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBjb25zdCBibG9iUHJvbWlzZSA9IHRoaXMuZmV0Y2hCbG9iKCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYmxvYlByb21pc2UpKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGxldCBzdXBwb3J0c0ltYWdlQml0bWFwOwogICAgICAgIGxldCB1c2VJbWFnZUJpdG1hcDsKICAgICAgICBsZXQgZ2VuZXJhdGVkQmxvYlJlc291cmNlOwogICAgICAgIGxldCBnZW5lcmF0ZWRCbG9iOwogICAgICAgIHJldHVybiBSZXNvdXJjZS5zdXBwb3J0c0ltYWdlQml0bWFwT3B0aW9ucygpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgICBzdXBwb3J0c0ltYWdlQml0bWFwID0gcmVzdWx0OwogICAgICAgICAgdXNlSW1hZ2VCaXRtYXAgPSBzdXBwb3J0c0ltYWdlQml0bWFwICYmIHByZWZlckltYWdlQml0bWFwOwogICAgICAgICAgcmV0dXJuIGJsb2JQcm9taXNlOwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oYmxvYikgewogICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYmxvYikpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgZ2VuZXJhdGVkQmxvYiA9IGJsb2I7CiAgICAgICAgICBpZiAodXNlSW1hZ2VCaXRtYXApIHsKICAgICAgICAgICAgcmV0dXJuIFJlc291cmNlLmNyZWF0ZUltYWdlQml0bWFwRnJvbUJsb2IoYmxvYiwgewogICAgICAgICAgICAgIGZsaXBZLAogICAgICAgICAgICAgIHByZW11bHRpcGx5QWxwaGE6IGZhbHNlLAogICAgICAgICAgICAgIHNraXBDb2xvclNwYWNlQ29udmVyc2lvbgogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGJsb2JVcmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTsKICAgICAgICAgIGdlbmVyYXRlZEJsb2JSZXNvdXJjZSA9IG5ldyBSZXNvdXJjZSh7CiAgICAgICAgICAgIHVybDogYmxvYlVybAogICAgICAgICAgfSk7CiAgICAgICAgICByZXR1cm4gZmV0Y2hJbWFnZSh7CiAgICAgICAgICAgIHJlc291cmNlOiBnZW5lcmF0ZWRCbG9iUmVzb3VyY2UsCiAgICAgICAgICAgIGZsaXBZLAogICAgICAgICAgICBza2lwQ29sb3JTcGFjZUNvbnZlcnNpb24sCiAgICAgICAgICAgIHByZWZlckltYWdlQml0bWFwOiBmYWxzZQogICAgICAgICAgfSk7CiAgICAgICAgfSkudGhlbihmdW5jdGlvbihpbWFnZSkgewogICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaW1hZ2UpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIGltYWdlLmJsb2IgPSBnZW5lcmF0ZWRCbG9iOwogICAgICAgICAgaWYgKHVzZUltYWdlQml0bWFwKSB7CiAgICAgICAgICAgIHJldHVybiBpbWFnZTsKICAgICAgICAgIH0KICAgICAgICAgIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKGdlbmVyYXRlZEJsb2JSZXNvdXJjZS51cmwpOwogICAgICAgICAgcmV0dXJuIGltYWdlOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGdlbmVyYXRlZEJsb2JSZXNvdXJjZSkpIHsKICAgICAgICAgICAgd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwoZ2VuZXJhdGVkQmxvYlJlc291cmNlLnVybCk7CiAgICAgICAgICB9CiAgICAgICAgICBlcnJvci5ibG9iID0gZ2VuZXJhdGVkQmxvYjsKICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7CiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLmZldGNoSW1hZ2UgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBuZXcgUmVzb3VyY2Uob3B0aW9ucyk7CiAgICAgICAgcmV0dXJuIHJlc291cmNlLmZldGNoSW1hZ2UoewogICAgICAgICAgZmxpcFk6IG9wdGlvbnMuZmxpcFksCiAgICAgICAgICBza2lwQ29sb3JTcGFjZUNvbnZlcnNpb246IG9wdGlvbnMuc2tpcENvbG9yU3BhY2VDb252ZXJzaW9uLAogICAgICAgICAgcHJlZmVyQmxvYjogb3B0aW9ucy5wcmVmZXJCbG9iLAogICAgICAgICAgcHJlZmVySW1hZ2VCaXRtYXA6IG9wdGlvbnMucHJlZmVySW1hZ2VCaXRtYXAKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucHJvdG90eXBlLmZldGNoVGV4dCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0aGlzLmZldGNoKHsKICAgICAgICAgIHJlc3BvbnNlVHlwZTogInRleHQiCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLmZldGNoVGV4dCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBSZXNvdXJjZShvcHRpb25zKTsKICAgICAgICByZXR1cm4gcmVzb3VyY2UuZmV0Y2hUZXh0KCk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLnByb3RvdHlwZS5mZXRjaEpzb24gPSBmdW5jdGlvbigpIHsKICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5mZXRjaCh7CiAgICAgICAgICByZXNwb25zZVR5cGU6ICJ0ZXh0IiwKICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgQWNjZXB0OiAiYXBwbGljYXRpb24vanNvbiwqLyo7cT0wLjAxIgogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHByb21pc2UpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh2YWx1ZSkpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpOwogICAgICAgIH0pOwogICAgICB9OwogICAgICBSZXNvdXJjZS5mZXRjaEpzb24gPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBuZXcgUmVzb3VyY2Uob3B0aW9ucyk7CiAgICAgICAgcmV0dXJuIHJlc291cmNlLmZldGNoSnNvbigpOwogICAgICB9OwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUuZmV0Y2hYTUwgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy5mZXRjaCh7CiAgICAgICAgICByZXNwb25zZVR5cGU6ICJkb2N1bWVudCIsCiAgICAgICAgICBvdmVycmlkZU1pbWVUeXBlOiAidGV4dC94bWwiCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLmZldGNoWE1MID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIGNvbnN0IHJlc291cmNlID0gbmV3IFJlc291cmNlKG9wdGlvbnMpOwogICAgICAgIHJldHVybiByZXNvdXJjZS5mZXRjaFhNTCgpOwogICAgICB9OwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUuZmV0Y2hKc29ucCA9IGZ1bmN0aW9uKGNhbGxiYWNrUGFyYW1ldGVyTmFtZSkgewogICAgICAgIGNhbGxiYWNrUGFyYW1ldGVyTmFtZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNhbGxiYWNrUGFyYW1ldGVyTmFtZSwgImNhbGxiYWNrIik7CiAgICAgICAgY2hlY2tBbmRSZXNldFJlcXVlc3QodGhpcy5yZXF1ZXN0KTsKICAgICAgICBsZXQgZnVuY3Rpb25OYW1lOwogICAgICAgIGRvIHsKICAgICAgICAgIGZ1bmN0aW9uTmFtZSA9IGBsb2FkSnNvbnAke01hdGhfZGVmYXVsdC5uZXh0UmFuZG9tTnVtYmVyKCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiwgOCl9YDsKICAgICAgICB9IHdoaWxlIChkZWZpbmVkX2RlZmF1bHQod2luZG93W2Z1bmN0aW9uTmFtZV0pKTsKICAgICAgICByZXR1cm4gZmV0Y2hKc29ucCh0aGlzLCBjYWxsYmFja1BhcmFtZXRlck5hbWUsIGZ1bmN0aW9uTmFtZSk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLmZldGNoSnNvbnAgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBuZXcgUmVzb3VyY2Uob3B0aW9ucyk7CiAgICAgICAgcmV0dXJuIHJlc291cmNlLmZldGNoSnNvbnAob3B0aW9ucy5jYWxsYmFja1BhcmFtZXRlck5hbWUpOwogICAgICB9OwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUuX21ha2VSZXF1ZXN0ID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIGNvbnN0IHJlc291cmNlID0gdGhpczsKICAgICAgICBjaGVja0FuZFJlc2V0UmVxdWVzdChyZXNvdXJjZS5yZXF1ZXN0KTsKICAgICAgICBjb25zdCByZXF1ZXN0ID0gcmVzb3VyY2UucmVxdWVzdDsKICAgICAgICBjb25zdCB1cmwgPSByZXNvdXJjZS51cmw7CiAgICAgICAgcmVxdWVzdC51cmwgPSB1cmw7CiAgICAgICAgcmVxdWVzdC5yZXF1ZXN0RnVuY3Rpb24gPSBmdW5jdGlvbigpIHsKICAgICAgICAgIGNvbnN0IHJlc3BvbnNlVHlwZSA9IG9wdGlvbnMucmVzcG9uc2VUeXBlOwogICAgICAgICAgY29uc3QgaGVhZGVycyA9IGNvbWJpbmVfZGVmYXVsdChvcHRpb25zLmhlYWRlcnMsIHJlc291cmNlLmhlYWRlcnMpOwogICAgICAgICAgY29uc3Qgb3ZlcnJpZGVNaW1lVHlwZSA9IG9wdGlvbnMub3ZlcnJpZGVNaW1lVHlwZTsKICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IG9wdGlvbnMubWV0aG9kOwogICAgICAgICAgY29uc3QgZGF0YSA9IG9wdGlvbnMuZGF0YTsKICAgICAgICAgIGNvbnN0IGRlZmVycmVkID0gZGVmZXJfZGVmYXVsdCgpOwogICAgICAgICAgY29uc3QgeGhyID0gUmVzb3VyY2UuX0ltcGxlbWVudGF0aW9ucy5sb2FkV2l0aFhocigKICAgICAgICAgICAgdXJsLAogICAgICAgICAgICByZXNwb25zZVR5cGUsCiAgICAgICAgICAgIG1ldGhvZCwKICAgICAgICAgICAgZGF0YSwKICAgICAgICAgICAgaGVhZGVycywKICAgICAgICAgICAgZGVmZXJyZWQsCiAgICAgICAgICAgIG92ZXJyaWRlTWltZVR5cGUKICAgICAgICAgICk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHhocikgJiYgZGVmaW5lZF9kZWZhdWx0KHhoci5hYm9ydCkpIHsKICAgICAgICAgICAgcmVxdWVzdC5jYW5jZWxGdW5jdGlvbiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHhoci5hYm9ydCgpOwogICAgICAgICAgICB9OwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7CiAgICAgICAgfTsKICAgICAgICBjb25zdCBwcm9taXNlID0gUmVxdWVzdFNjaGVkdWxlcl9kZWZhdWx0LnJlcXVlc3QocmVxdWVzdCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocHJvbWlzZSkpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICByZXF1ZXN0LmNhbmNlbEZ1bmN0aW9uID0gdm9pZCAwOwogICAgICAgICAgcmV0dXJuIGRhdGE7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZSkgewogICAgICAgICAgcmVxdWVzdC5jYW5jZWxGdW5jdGlvbiA9IHZvaWQgMDsKICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXRlICE9PSBSZXF1ZXN0U3RhdGVfZGVmYXVsdC5GQUlMRUQpIHsKICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHJlc291cmNlLnJldHJ5T25FcnJvcihlKS50aGVuKGZ1bmN0aW9uKHJldHJ5KSB7CiAgICAgICAgICAgIGlmIChyZXRyeSkgewogICAgICAgICAgICAgIHJlcXVlc3Quc3RhdGUgPSBSZXF1ZXN0U3RhdGVfZGVmYXVsdC5VTklTU1VFRDsKICAgICAgICAgICAgICByZXF1ZXN0LmRlZmVycmVkID0gdm9pZCAwOwogICAgICAgICAgICAgIHJldHVybiByZXNvdXJjZS5mZXRjaChvcHRpb25zKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgZGF0YVVyaVJlZ2V4MiA9IC9eZGF0YTooLio/KSg7YmFzZTY0KT8sKC4qKSQvOwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRDbG9uZShvcHRpb25zLCB7fSk7CiAgICAgICAgb3B0aW9ucy5tZXRob2QgPSAiR0VUIjsKICAgICAgICByZXR1cm4gdGhpcy5fbWFrZVJlcXVlc3Qob3B0aW9ucyk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLmZldGNoID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIGNvbnN0IHJlc291cmNlID0gbmV3IFJlc291cmNlKG9wdGlvbnMpOwogICAgICAgIHJldHVybiByZXNvdXJjZS5mZXRjaCh7CiAgICAgICAgICAvLyBNYWtlIGNvcHkgb2YganVzdCB0aGUgbmVlZGVkIGZpZWxkcyBiZWNhdXNlIGhlYWRlcnMgY2FuIGJlIHBhc3NlZCB0byBib3RoIHRoZSBjb25zdHJ1Y3RvciBhbmQgdG8gZmV0Y2gKICAgICAgICAgIHJlc3BvbnNlVHlwZTogb3B0aW9ucy5yZXNwb25zZVR5cGUsCiAgICAgICAgICBvdmVycmlkZU1pbWVUeXBlOiBvcHRpb25zLm92ZXJyaWRlTWltZVR5cGUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBvcHRpb25zID0gZGVmYXVsdENsb25lKG9wdGlvbnMsIHt9KTsKICAgICAgICBvcHRpb25zLm1ldGhvZCA9ICJERUxFVEUiOwogICAgICAgIHJldHVybiB0aGlzLl9tYWtlUmVxdWVzdChvcHRpb25zKTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UuZGVsZXRlID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIGNvbnN0IHJlc291cmNlID0gbmV3IFJlc291cmNlKG9wdGlvbnMpOwogICAgICAgIHJldHVybiByZXNvdXJjZS5kZWxldGUoewogICAgICAgICAgLy8gTWFrZSBjb3B5IG9mIGp1c3QgdGhlIG5lZWRlZCBmaWVsZHMgYmVjYXVzZSBoZWFkZXJzIGNhbiBiZSBwYXNzZWQgdG8gYm90aCB0aGUgY29uc3RydWN0b3IgYW5kIHRvIGZldGNoCiAgICAgICAgICByZXNwb25zZVR5cGU6IG9wdGlvbnMucmVzcG9uc2VUeXBlLAogICAgICAgICAgb3ZlcnJpZGVNaW1lVHlwZTogb3B0aW9ucy5vdmVycmlkZU1pbWVUeXBlLAogICAgICAgICAgZGF0YTogb3B0aW9ucy5kYXRhCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLnByb3RvdHlwZS5oZWFkID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0Q2xvbmUob3B0aW9ucywge30pOwogICAgICAgIG9wdGlvbnMubWV0aG9kID0gIkhFQUQiOwogICAgICAgIHJldHVybiB0aGlzLl9tYWtlUmVxdWVzdChvcHRpb25zKTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UuaGVhZCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBSZXNvdXJjZShvcHRpb25zKTsKICAgICAgICByZXR1cm4gcmVzb3VyY2UuaGVhZCh7CiAgICAgICAgICAvLyBNYWtlIGNvcHkgb2YganVzdCB0aGUgbmVlZGVkIGZpZWxkcyBiZWNhdXNlIGhlYWRlcnMgY2FuIGJlIHBhc3NlZCB0byBib3RoIHRoZSBjb25zdHJ1Y3RvciBhbmQgdG8gZmV0Y2gKICAgICAgICAgIHJlc3BvbnNlVHlwZTogb3B0aW9ucy5yZXNwb25zZVR5cGUsCiAgICAgICAgICBvdmVycmlkZU1pbWVUeXBlOiBvcHRpb25zLm92ZXJyaWRlTWltZVR5cGUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucHJvdG90eXBlLm9wdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRDbG9uZShvcHRpb25zLCB7fSk7CiAgICAgICAgb3B0aW9ucy5tZXRob2QgPSAiT1BUSU9OUyI7CiAgICAgICAgcmV0dXJuIHRoaXMuX21ha2VSZXF1ZXN0KG9wdGlvbnMpOwogICAgICB9OwogICAgICBSZXNvdXJjZS5vcHRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIGNvbnN0IHJlc291cmNlID0gbmV3IFJlc291cmNlKG9wdGlvbnMpOwogICAgICAgIHJldHVybiByZXNvdXJjZS5vcHRpb25zKHsKICAgICAgICAgIC8vIE1ha2UgY29weSBvZiBqdXN0IHRoZSBuZWVkZWQgZmllbGRzIGJlY2F1c2UgaGVhZGVycyBjYW4gYmUgcGFzc2VkIHRvIGJvdGggdGhlIGNvbnN0cnVjdG9yIGFuZCB0byBmZXRjaAogICAgICAgICAgcmVzcG9uc2VUeXBlOiBvcHRpb25zLnJlc3BvbnNlVHlwZSwKICAgICAgICAgIG92ZXJyaWRlTWltZVR5cGU6IG9wdGlvbnMub3ZlcnJpZGVNaW1lVHlwZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUucG9zdCA9IGZ1bmN0aW9uKGRhdGEsIG9wdGlvbnMpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImRhdGEiLCBkYXRhKTsKICAgICAgICBvcHRpb25zID0gZGVmYXVsdENsb25lKG9wdGlvbnMsIHt9KTsKICAgICAgICBvcHRpb25zLm1ldGhvZCA9ICJQT1NUIjsKICAgICAgICBvcHRpb25zLmRhdGEgPSBkYXRhOwogICAgICAgIHJldHVybiB0aGlzLl9tYWtlUmVxdWVzdChvcHRpb25zKTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucG9zdCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBSZXNvdXJjZShvcHRpb25zKTsKICAgICAgICByZXR1cm4gcmVzb3VyY2UucG9zdChvcHRpb25zLmRhdGEsIHsKICAgICAgICAgIC8vIE1ha2UgY29weSBvZiBqdXN0IHRoZSBuZWVkZWQgZmllbGRzIGJlY2F1c2UgaGVhZGVycyBjYW4gYmUgcGFzc2VkIHRvIGJvdGggdGhlIGNvbnN0cnVjdG9yIGFuZCB0byBwb3N0CiAgICAgICAgICByZXNwb25zZVR5cGU6IG9wdGlvbnMucmVzcG9uc2VUeXBlLAogICAgICAgICAgb3ZlcnJpZGVNaW1lVHlwZTogb3B0aW9ucy5vdmVycmlkZU1pbWVUeXBlCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbihkYXRhLCBvcHRpb25zKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJkYXRhIiwgZGF0YSk7CiAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRDbG9uZShvcHRpb25zLCB7fSk7CiAgICAgICAgb3B0aW9ucy5tZXRob2QgPSAiUFVUIjsKICAgICAgICBvcHRpb25zLmRhdGEgPSBkYXRhOwogICAgICAgIHJldHVybiB0aGlzLl9tYWtlUmVxdWVzdChvcHRpb25zKTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucHV0ID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIGNvbnN0IHJlc291cmNlID0gbmV3IFJlc291cmNlKG9wdGlvbnMpOwogICAgICAgIHJldHVybiByZXNvdXJjZS5wdXQob3B0aW9ucy5kYXRhLCB7CiAgICAgICAgICAvLyBNYWtlIGNvcHkgb2YganVzdCB0aGUgbmVlZGVkIGZpZWxkcyBiZWNhdXNlIGhlYWRlcnMgY2FuIGJlIHBhc3NlZCB0byBib3RoIHRoZSBjb25zdHJ1Y3RvciBhbmQgdG8gcG9zdAogICAgICAgICAgcmVzcG9uc2VUeXBlOiBvcHRpb25zLnJlc3BvbnNlVHlwZSwKICAgICAgICAgIG92ZXJyaWRlTWltZVR5cGU6IG9wdGlvbnMub3ZlcnJpZGVNaW1lVHlwZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUucGF0Y2ggPSBmdW5jdGlvbihkYXRhLCBvcHRpb25zKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJkYXRhIiwgZGF0YSk7CiAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRDbG9uZShvcHRpb25zLCB7fSk7CiAgICAgICAgb3B0aW9ucy5tZXRob2QgPSAiUEFUQ0giOwogICAgICAgIG9wdGlvbnMuZGF0YSA9IGRhdGE7CiAgICAgICAgcmV0dXJuIHRoaXMuX21ha2VSZXF1ZXN0KG9wdGlvbnMpOwogICAgICB9OwogICAgICBSZXNvdXJjZS5wYXRjaCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBSZXNvdXJjZShvcHRpb25zKTsKICAgICAgICByZXR1cm4gcmVzb3VyY2UucGF0Y2gob3B0aW9ucy5kYXRhLCB7CiAgICAgICAgICAvLyBNYWtlIGNvcHkgb2YganVzdCB0aGUgbmVlZGVkIGZpZWxkcyBiZWNhdXNlIGhlYWRlcnMgY2FuIGJlIHBhc3NlZCB0byBib3RoIHRoZSBjb25zdHJ1Y3RvciBhbmQgdG8gcG9zdAogICAgICAgICAgcmVzcG9uc2VUeXBlOiBvcHRpb25zLnJlc3BvbnNlVHlwZSwKICAgICAgICAgIG92ZXJyaWRlTWltZVR5cGU6IG9wdGlvbnMub3ZlcnJpZGVNaW1lVHlwZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBSZXNvdXJjZS5fSW1wbGVtZW50YXRpb25zID0ge307CiAgICAgIFJlc291cmNlLl9JbXBsZW1lbnRhdGlvbnMubG9hZEltYWdlRWxlbWVudCA9IGZ1bmN0aW9uKHVybCwgY3Jvc3NPcmlnaW4sIGRlZmVycmVkKSB7CiAgICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTsKICAgICAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIGlmIChpbWFnZS5uYXR1cmFsV2lkdGggPT09IDAgJiYgaW1hZ2UubmF0dXJhbEhlaWdodCA9PT0gMCAmJiBpbWFnZS53aWR0aCA9PT0gMCAmJiBpbWFnZS5oZWlnaHQgPT09IDApIHsKICAgICAgICAgICAgaW1hZ2Uud2lkdGggPSAzMDA7CiAgICAgICAgICAgIGltYWdlLmhlaWdodCA9IDE1MDsKICAgICAgICAgIH0KICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoaW1hZ2UpOwogICAgICAgIH07CiAgICAgICAgaW1hZ2Uub25lcnJvciA9IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlKTsKICAgICAgICB9OwogICAgICAgIGlmIChjcm9zc09yaWdpbikgewogICAgICAgICAgaWYgKFRydXN0ZWRTZXJ2ZXJzX2RlZmF1bHQuY29udGFpbnModXJsKSkgewogICAgICAgICAgICBpbWFnZS5jcm9zc09yaWdpbiA9ICJ1c2UtY3JlZGVudGlhbHMiOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaW1hZ2UuY3Jvc3NPcmlnaW4gPSAiIjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaW1hZ2Uuc3JjID0gdXJsOwogICAgICB9OwogICAgICBSZXNvdXJjZS5fSW1wbGVtZW50YXRpb25zLmNyZWF0ZUltYWdlID0gZnVuY3Rpb24ocmVxdWVzdCwgY3Jvc3NPcmlnaW4sIGRlZmVycmVkLCBmbGlwWSwgc2tpcENvbG9yU3BhY2VDb252ZXJzaW9uLCBwcmVmZXJJbWFnZUJpdG1hcCkgewogICAgICAgIGNvbnN0IHVybCA9IHJlcXVlc3QudXJsOwogICAgICAgIFJlc291cmNlLnN1cHBvcnRzSW1hZ2VCaXRtYXBPcHRpb25zKCkudGhlbihmdW5jdGlvbihzdXBwb3J0c0ltYWdlQml0bWFwKSB7CiAgICAgICAgICBpZiAoIShzdXBwb3J0c0ltYWdlQml0bWFwICYmIHByZWZlckltYWdlQml0bWFwKSkgewogICAgICAgICAgICBSZXNvdXJjZS5fSW1wbGVtZW50YXRpb25zLmxvYWRJbWFnZUVsZW1lbnQodXJsLCBjcm9zc09yaWdpbiwgZGVmZXJyZWQpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCByZXNwb25zZVR5cGUgPSAiYmxvYiI7CiAgICAgICAgICBjb25zdCBtZXRob2QgPSAiR0VUIjsKICAgICAgICAgIGNvbnN0IHhockRlZmVycmVkID0gZGVmZXJfZGVmYXVsdCgpOwogICAgICAgICAgY29uc3QgeGhyID0gUmVzb3VyY2UuX0ltcGxlbWVudGF0aW9ucy5sb2FkV2l0aFhocigKICAgICAgICAgICAgdXJsLAogICAgICAgICAgICByZXNwb25zZVR5cGUsCiAgICAgICAgICAgIG1ldGhvZCwKICAgICAgICAgICAgdm9pZCAwLAogICAgICAgICAgICB2b2lkIDAsCiAgICAgICAgICAgIHhockRlZmVycmVkLAogICAgICAgICAgICB2b2lkIDAsCiAgICAgICAgICAgIHZvaWQgMCwKICAgICAgICAgICAgdm9pZCAwCiAgICAgICAgICApOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh4aHIpICYmIGRlZmluZWRfZGVmYXVsdCh4aHIuYWJvcnQpKSB7CiAgICAgICAgICAgIHJlcXVlc3QuY2FuY2VsRnVuY3Rpb24gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICB4aHIuYWJvcnQoKTsKICAgICAgICAgICAgfTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB4aHJEZWZlcnJlZC5wcm9taXNlLnRoZW4oZnVuY3Rpb24oYmxvYikgewogICAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChibG9iKSkgewogICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgKICAgICAgICAgICAgICAgIG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgICAgICAgYFN1Y2Nlc3NmdWxseSByZXRyaWV2ZWQgJHt1cmx9IGJ1dCBpdCBjb250YWluZWQgbm8gY29udGVudC5gCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIFJlc291cmNlLmNyZWF0ZUltYWdlQml0bWFwRnJvbUJsb2IoYmxvYiwgewogICAgICAgICAgICAgIGZsaXBZLAogICAgICAgICAgICAgIHByZW11bHRpcGx5QWxwaGE6IGZhbHNlLAogICAgICAgICAgICAgIHNraXBDb2xvclNwYWNlQ29udmVyc2lvbgogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oaW1hZ2UpIHsKICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShpbWFnZSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlKSB7CiAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZSk7CiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLmNyZWF0ZUltYWdlQml0bWFwRnJvbUJsb2IgPSBmdW5jdGlvbihibG9iLCBvcHRpb25zKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJvcHRpb25zIiwgb3B0aW9ucyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YuYm9vbCgib3B0aW9ucy5mbGlwWSIsIG9wdGlvbnMuZmxpcFkpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLmJvb2woIm9wdGlvbnMucHJlbXVsdGlwbHlBbHBoYSIsIG9wdGlvbnMucHJlbXVsdGlwbHlBbHBoYSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YuYm9vbCgKICAgICAgICAgICJvcHRpb25zLnNraXBDb2xvclNwYWNlQ29udmVyc2lvbiIsCiAgICAgICAgICBvcHRpb25zLnNraXBDb2xvclNwYWNlQ29udmVyc2lvbgogICAgICAgICk7CiAgICAgICAgcmV0dXJuIGNyZWF0ZUltYWdlQml0bWFwKGJsb2IsIHsKICAgICAgICAgIGltYWdlT3JpZW50YXRpb246IG9wdGlvbnMuZmxpcFkgPyAiZmxpcFkiIDogIm5vbmUiLAogICAgICAgICAgcHJlbXVsdGlwbHlBbHBoYTogb3B0aW9ucy5wcmVtdWx0aXBseUFscGhhID8gInByZW11bHRpcGx5IiA6ICJub25lIiwKICAgICAgICAgIGNvbG9yU3BhY2VDb252ZXJzaW9uOiBvcHRpb25zLnNraXBDb2xvclNwYWNlQ29udmVyc2lvbiA/ICJub25lIiA6ICJkZWZhdWx0IgogICAgICAgIH0pOwogICAgICB9OwogICAgICBub1hNTEh0dHBSZXF1ZXN0ID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSAidW5kZWZpbmVkIjsKICAgICAgUmVzb3VyY2UuX0ltcGxlbWVudGF0aW9ucy5sb2FkV2l0aFhociA9IGZ1bmN0aW9uKHVybCwgcmVzcG9uc2VUeXBlLCBtZXRob2QsIGRhdGEsIGhlYWRlcnMsIGRlZmVycmVkLCBvdmVycmlkZU1pbWVUeXBlKSB7CiAgICAgICAgY29uc3QgZGF0YVVyaVJlZ2V4UmVzdWx0ID0gZGF0YVVyaVJlZ2V4Mi5leGVjKHVybCk7CiAgICAgICAgaWYgKGRhdGFVcmlSZWdleFJlc3VsdCAhPT0gbnVsbCkgewogICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkZWNvZGVEYXRhVXJpKGRhdGFVcmlSZWdleFJlc3VsdCwgcmVzcG9uc2VUeXBlKSk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmIChub1hNTEh0dHBSZXF1ZXN0KSB7CiAgICAgICAgICBsb2FkV2l0aEh0dHBSZXF1ZXN0KAogICAgICAgICAgICB1cmwsCiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSwKICAgICAgICAgICAgbWV0aG9kLAogICAgICAgICAgICBkYXRhLAogICAgICAgICAgICBoZWFkZXJzLAogICAgICAgICAgICBkZWZlcnJlZCwKICAgICAgICAgICAgb3ZlcnJpZGVNaW1lVHlwZQogICAgICAgICAgKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgICAgICAgaWYgKFRydXN0ZWRTZXJ2ZXJzX2RlZmF1bHQuY29udGFpbnModXJsKSkgewogICAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7CiAgICAgICAgfQogICAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG92ZXJyaWRlTWltZVR5cGUpICYmIGRlZmluZWRfZGVmYXVsdCh4aHIub3ZlcnJpZGVNaW1lVHlwZSkpIHsKICAgICAgICAgIHhoci5vdmVycmlkZU1pbWVUeXBlKG92ZXJyaWRlTWltZVR5cGUpOwogICAgICAgIH0KICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGhlYWRlcnMpKSB7CiAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBoZWFkZXJzKSB7CiAgICAgICAgICAgIGlmIChoZWFkZXJzLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIGhlYWRlcnNba2V5XSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZXNwb25zZVR5cGUpKSB7CiAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlOwogICAgICAgIH0KICAgICAgICBsZXQgbG9jYWxGaWxlID0gZmFsc2U7CiAgICAgICAgaWYgKHR5cGVvZiB1cmwgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICBsb2NhbEZpbGUgPSB1cmwuaW5kZXhPZigiZmlsZTovLyIpID09PSAwIHx8IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiICYmIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gPT09ICJmaWxlOi8vIjsKICAgICAgICB9CiAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKCh4aHIuc3RhdHVzIDwgMjAwIHx8IHhoci5zdGF0dXMgPj0gMzAwKSAmJiAhKGxvY2FsRmlsZSAmJiB4aHIuc3RhdHVzID09PSAwKSkgewogICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoCiAgICAgICAgICAgICAgbmV3IFJlcXVlc3RFcnJvckV2ZW50X2RlZmF1bHQoCiAgICAgICAgICAgICAgICB4aHIuc3RhdHVzLAogICAgICAgICAgICAgICAgeGhyLnJlc3BvbnNlLAogICAgICAgICAgICAgICAgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpCiAgICAgICAgICAgICAgKQogICAgICAgICAgICApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHhoci5yZXNwb25zZTsKICAgICAgICAgIGNvbnN0IGJyb3dzZXJSZXNwb25zZVR5cGUgPSB4aHIucmVzcG9uc2VUeXBlOwogICAgICAgICAgaWYgKG1ldGhvZCA9PT0gIkhFQUQiIHx8IG1ldGhvZCA9PT0gIk9QVElPTlMiKSB7CiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlSGVhZGVyU3RyaW5nID0geGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpOwogICAgICAgICAgICBjb25zdCBzcGxpdEhlYWRlcnMgPSByZXNwb25zZUhlYWRlclN0cmluZy50cmltKCkuc3BsaXQoL1tcclxuXSsvKTsKICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0ge307CiAgICAgICAgICAgIHNwbGl0SGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICAgICAgICBjb25zdCBwYXJ0cyA9IGxpbmUuc3BsaXQoIjogIik7CiAgICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gcGFydHMuc2hpZnQoKTsKICAgICAgICAgICAgICByZXNwb25zZUhlYWRlcnNbaGVhZGVyXSA9IHBhcnRzLmpvaW4oIjogIik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3BvbnNlSGVhZGVycyk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDQpIHsKICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpOwogICAgICAgICAgfSBlbHNlIGlmIChkZWZpbmVkX2RlZmF1bHQocmVzcG9uc2UpICYmICghZGVmaW5lZF9kZWZhdWx0KHJlc3BvbnNlVHlwZSkgfHwgYnJvd3NlclJlc3BvbnNlVHlwZSA9PT0gcmVzcG9uc2VUeXBlKSkgewogICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3BvbnNlKTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2VUeXBlID09PSAianNvbiIgJiYgdHlwZW9mIHJlc3BvbnNlID09PSAic3RyaW5nIikgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoSlNPTi5wYXJzZShyZXNwb25zZSkpOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKChicm93c2VyUmVzcG9uc2VUeXBlID09PSAiIiB8fCBicm93c2VyUmVzcG9uc2VUeXBlID09PSAiZG9jdW1lbnQiKSAmJiBkZWZpbmVkX2RlZmF1bHQoeGhyLnJlc3BvbnNlWE1MKSAmJiB4aHIucmVzcG9uc2VYTUwuaGFzQ2hpbGROb2RlcygpKSB7CiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoeGhyLnJlc3BvbnNlWE1MKTsKICAgICAgICAgIH0gZWxzZSBpZiAoKGJyb3dzZXJSZXNwb25zZVR5cGUgPT09ICIiIHx8IGJyb3dzZXJSZXNwb25zZVR5cGUgPT09ICJ0ZXh0IikgJiYgZGVmaW5lZF9kZWZhdWx0KHhoci5yZXNwb25zZVRleHQpKSB7CiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoeGhyLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoCiAgICAgICAgICAgICAgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KCJJbnZhbGlkIFhNTEh0dHBSZXF1ZXN0IHJlc3BvbnNlIHR5cGUuIikKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oZSkgewogICAgICAgICAgZGVmZXJyZWQucmVqZWN0KG5ldyBSZXF1ZXN0RXJyb3JFdmVudF9kZWZhdWx0KCkpOwogICAgICAgIH07CiAgICAgICAgeGhyLnNlbmQoZGF0YSk7CiAgICAgICAgcmV0dXJuIHhocjsKICAgICAgfTsKICAgICAgUmVzb3VyY2UuX0ltcGxlbWVudGF0aW9ucy5sb2FkQW5kRXhlY3V0ZVNjcmlwdCA9IGZ1bmN0aW9uKHVybCwgZnVuY3Rpb25OYW1lLCBkZWZlcnJlZCkgewogICAgICAgIHJldHVybiBsb2FkQW5kRXhlY3V0ZVNjcmlwdF9kZWZhdWx0KHVybCwgZnVuY3Rpb25OYW1lKS5jYXRjaChmdW5jdGlvbihlKSB7CiAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZSk7CiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLl9EZWZhdWx0SW1wbGVtZW50YXRpb25zID0ge307CiAgICAgIFJlc291cmNlLl9EZWZhdWx0SW1wbGVtZW50YXRpb25zLmNyZWF0ZUltYWdlID0gUmVzb3VyY2UuX0ltcGxlbWVudGF0aW9ucy5jcmVhdGVJbWFnZTsKICAgICAgUmVzb3VyY2UuX0RlZmF1bHRJbXBsZW1lbnRhdGlvbnMubG9hZFdpdGhYaHIgPSBSZXNvdXJjZS5fSW1wbGVtZW50YXRpb25zLmxvYWRXaXRoWGhyOwogICAgICBSZXNvdXJjZS5fRGVmYXVsdEltcGxlbWVudGF0aW9ucy5sb2FkQW5kRXhlY3V0ZVNjcmlwdCA9IFJlc291cmNlLl9JbXBsZW1lbnRhdGlvbnMubG9hZEFuZEV4ZWN1dGVTY3JpcHQ7CiAgICAgIFJlc291cmNlLkRFRkFVTFQgPSBPYmplY3QuZnJlZXplKAogICAgICAgIG5ldyBSZXNvdXJjZSh7CiAgICAgICAgICB1cmw6IHR5cGVvZiBkb2N1bWVudCA9PT0gInVuZGVmaW5lZCIgPyAiIiA6IGRvY3VtZW50LmxvY2F0aW9uLmhyZWYuc3BsaXQoIj8iKVswXQogICAgICAgIH0pCiAgICAgICk7CiAgICAgIFJlc291cmNlX2RlZmF1bHQgPSBSZXNvdXJjZTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0VhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzLmpzCiAgZnVuY3Rpb24gRWFydGhPcmllbnRhdGlvblBhcmFtZXRlcnMob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICB0aGlzLl9kYXRlcyA9IHZvaWQgMDsKICAgIHRoaXMuX3NhbXBsZXMgPSB2b2lkIDA7CiAgICB0aGlzLl9kYXRlQ29sdW1uID0gLTE7CiAgICB0aGlzLl94UG9sZVdhbmRlclJhZGlhbnNDb2x1bW4gPSAtMTsKICAgIHRoaXMuX3lQb2xlV2FuZGVyUmFkaWFuc0NvbHVtbiA9IC0xOwogICAgdGhpcy5fdXQxTWludXNVdGNTZWNvbmRzQ29sdW1uID0gLTE7CiAgICB0aGlzLl94Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnNDb2x1bW4gPSAtMTsKICAgIHRoaXMuX3lDZWxlc3RpYWxQb2xlT2Zmc2V0UmFkaWFuc0NvbHVtbiA9IC0xOwogICAgdGhpcy5fdGFpTWludXNVdGNTZWNvbmRzQ29sdW1uID0gLTE7CiAgICB0aGlzLl9jb2x1bW5Db3VudCA9IDA7CiAgICB0aGlzLl9sYXN0SW5kZXggPSAtMTsKICAgIHRoaXMuX2FkZE5ld0xlYXBTZWNvbmRzID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5hZGROZXdMZWFwU2Vjb25kcywgdHJ1ZSk7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMuZGF0YSkpIHsKICAgICAgb25EYXRhUmVhZHkodGhpcywgb3B0aW9ucy5kYXRhKTsKICAgIH0gZWxzZSB7CiAgICAgIG9uRGF0YVJlYWR5KHRoaXMsIHsKICAgICAgICBjb2x1bW5OYW1lczogWwogICAgICAgICAgImRhdGVJc284NjAxIiwKICAgICAgICAgICJtb2RpZmllZEp1bGlhbkRhdGVVdGMiLAogICAgICAgICAgInhQb2xlV2FuZGVyUmFkaWFucyIsCiAgICAgICAgICAieVBvbGVXYW5kZXJSYWRpYW5zIiwKICAgICAgICAgICJ1dDFNaW51c1V0Y1NlY29uZHMiLAogICAgICAgICAgImxlbmd0aE9mRGF5Q29ycmVjdGlvblNlY29uZHMiLAogICAgICAgICAgInhDZWxlc3RpYWxQb2xlT2Zmc2V0UmFkaWFucyIsCiAgICAgICAgICAieUNlbGVzdGlhbFBvbGVPZmZzZXRSYWRpYW5zIiwKICAgICAgICAgICJ0YWlNaW51c1V0Y1NlY29uZHMiCiAgICAgICAgXSwKICAgICAgICBzYW1wbGVzOiBbXQogICAgICB9KTsKICAgIH0KICB9CiAgZnVuY3Rpb24gY29tcGFyZUxlYXBTZWNvbmREYXRlczIobGVhcFNlY29uZCwgZGF0ZVRvRmluZCkgewogICAgcmV0dXJuIEp1bGlhbkRhdGVfZGVmYXVsdC5jb21wYXJlKGxlYXBTZWNvbmQuanVsaWFuRGF0ZSwgZGF0ZVRvRmluZCk7CiAgfQogIGZ1bmN0aW9uIG9uRGF0YVJlYWR5KGVvcCwgZW9wRGF0YSkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZW9wRGF0YS5jb2x1bW5OYW1lcykpIHsKICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KAogICAgICAgICJFcnJvciBpbiBsb2FkZWQgRU9QIGRhdGE6IFRoZSBjb2x1bW5OYW1lcyBwcm9wZXJ0eSBpcyByZXF1aXJlZC4iCiAgICAgICk7CiAgICB9CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChlb3BEYXRhLnNhbXBsZXMpKSB7CiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgKICAgICAgICAiRXJyb3IgaW4gbG9hZGVkIEVPUCBkYXRhOiBUaGUgc2FtcGxlcyBwcm9wZXJ0eSBpcyByZXF1aXJlZC4iCiAgICAgICk7CiAgICB9CiAgICBjb25zdCBkYXRlQ29sdW1uID0gZW9wRGF0YS5jb2x1bW5OYW1lcy5pbmRleE9mKCJtb2RpZmllZEp1bGlhbkRhdGVVdGMiKTsKICAgIGNvbnN0IHhQb2xlV2FuZGVyUmFkaWFuc0NvbHVtbiA9IGVvcERhdGEuY29sdW1uTmFtZXMuaW5kZXhPZigKICAgICAgInhQb2xlV2FuZGVyUmFkaWFucyIKICAgICk7CiAgICBjb25zdCB5UG9sZVdhbmRlclJhZGlhbnNDb2x1bW4gPSBlb3BEYXRhLmNvbHVtbk5hbWVzLmluZGV4T2YoCiAgICAgICJ5UG9sZVdhbmRlclJhZGlhbnMiCiAgICApOwogICAgY29uc3QgdXQxTWludXNVdGNTZWNvbmRzQ29sdW1uID0gZW9wRGF0YS5jb2x1bW5OYW1lcy5pbmRleE9mKAogICAgICAidXQxTWludXNVdGNTZWNvbmRzIgogICAgKTsKICAgIGNvbnN0IHhDZWxlc3RpYWxQb2xlT2Zmc2V0UmFkaWFuc0NvbHVtbiA9IGVvcERhdGEuY29sdW1uTmFtZXMuaW5kZXhPZigKICAgICAgInhDZWxlc3RpYWxQb2xlT2Zmc2V0UmFkaWFucyIKICAgICk7CiAgICBjb25zdCB5Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnNDb2x1bW4gPSBlb3BEYXRhLmNvbHVtbk5hbWVzLmluZGV4T2YoCiAgICAgICJ5Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnMiCiAgICApOwogICAgY29uc3QgdGFpTWludXNVdGNTZWNvbmRzQ29sdW1uID0gZW9wRGF0YS5jb2x1bW5OYW1lcy5pbmRleE9mKAogICAgICAidGFpTWludXNVdGNTZWNvbmRzIgogICAgKTsKICAgIGlmIChkYXRlQ29sdW1uIDwgMCB8fCB4UG9sZVdhbmRlclJhZGlhbnNDb2x1bW4gPCAwIHx8IHlQb2xlV2FuZGVyUmFkaWFuc0NvbHVtbiA8IDAgfHwgdXQxTWludXNVdGNTZWNvbmRzQ29sdW1uIDwgMCB8fCB4Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnNDb2x1bW4gPCAwIHx8IHlDZWxlc3RpYWxQb2xlT2Zmc2V0UmFkaWFuc0NvbHVtbiA8IDAgfHwgdGFpTWludXNVdGNTZWNvbmRzQ29sdW1uIDwgMCkgewogICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoCiAgICAgICAgIkVycm9yIGluIGxvYWRlZCBFT1AgZGF0YTogVGhlIGNvbHVtbk5hbWVzIHByb3BlcnR5IG11c3QgaW5jbHVkZSBtb2RpZmllZEp1bGlhbkRhdGVVdGMsIHhQb2xlV2FuZGVyUmFkaWFucywgeVBvbGVXYW5kZXJSYWRpYW5zLCB1dDFNaW51c1V0Y1NlY29uZHMsIHhDZWxlc3RpYWxQb2xlT2Zmc2V0UmFkaWFucywgeUNlbGVzdGlhbFBvbGVPZmZzZXRSYWRpYW5zLCBhbmQgdGFpTWludXNVdGNTZWNvbmRzIGNvbHVtbnMiCiAgICAgICk7CiAgICB9CiAgICBjb25zdCBzYW1wbGVzID0gZW9wLl9zYW1wbGVzID0gZW9wRGF0YS5zYW1wbGVzOwogICAgY29uc3QgZGF0ZXMgPSBlb3AuX2RhdGVzID0gW107CiAgICBlb3AuX2RhdGVDb2x1bW4gPSBkYXRlQ29sdW1uOwogICAgZW9wLl94UG9sZVdhbmRlclJhZGlhbnNDb2x1bW4gPSB4UG9sZVdhbmRlclJhZGlhbnNDb2x1bW47CiAgICBlb3AuX3lQb2xlV2FuZGVyUmFkaWFuc0NvbHVtbiA9IHlQb2xlV2FuZGVyUmFkaWFuc0NvbHVtbjsKICAgIGVvcC5fdXQxTWludXNVdGNTZWNvbmRzQ29sdW1uID0gdXQxTWludXNVdGNTZWNvbmRzQ29sdW1uOwogICAgZW9wLl94Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnNDb2x1bW4gPSB4Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnNDb2x1bW47CiAgICBlb3AuX3lDZWxlc3RpYWxQb2xlT2Zmc2V0UmFkaWFuc0NvbHVtbiA9IHlDZWxlc3RpYWxQb2xlT2Zmc2V0UmFkaWFuc0NvbHVtbjsKICAgIGVvcC5fdGFpTWludXNVdGNTZWNvbmRzQ29sdW1uID0gdGFpTWludXNVdGNTZWNvbmRzQ29sdW1uOwogICAgZW9wLl9jb2x1bW5Db3VudCA9IGVvcERhdGEuY29sdW1uTmFtZXMubGVuZ3RoOwogICAgZW9wLl9sYXN0SW5kZXggPSB2b2lkIDA7CiAgICBsZXQgbGFzdFRhaU1pbnVzVXRjOwogICAgY29uc3QgYWRkTmV3TGVhcFNlY29uZHMgPSBlb3AuX2FkZE5ld0xlYXBTZWNvbmRzOwogICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNhbXBsZXMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IGVvcC5fY29sdW1uQ291bnQpIHsKICAgICAgY29uc3QgbWpkID0gc2FtcGxlc1tpICsgZGF0ZUNvbHVtbl07CiAgICAgIGNvbnN0IHRhaU1pbnVzVXRjID0gc2FtcGxlc1tpICsgdGFpTWludXNVdGNTZWNvbmRzQ29sdW1uXTsKICAgICAgY29uc3QgZGF5ID0gbWpkICsgVGltZUNvbnN0YW50c19kZWZhdWx0Lk1PRElGSUVEX0pVTElBTl9EQVRFX0RJRkZFUkVOQ0U7CiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgSnVsaWFuRGF0ZV9kZWZhdWx0KGRheSwgdGFpTWludXNVdGMsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSk7CiAgICAgIGRhdGVzLnB1c2goZGF0ZSk7CiAgICAgIGlmIChhZGROZXdMZWFwU2Vjb25kcykgewogICAgICAgIGlmICh0YWlNaW51c1V0YyAhPT0gbGFzdFRhaU1pbnVzVXRjICYmIGRlZmluZWRfZGVmYXVsdChsYXN0VGFpTWludXNVdGMpKSB7CiAgICAgICAgICBjb25zdCBsZWFwU2Vjb25kcyA9IEp1bGlhbkRhdGVfZGVmYXVsdC5sZWFwU2Vjb25kczsKICAgICAgICAgIGNvbnN0IGxlYXBTZWNvbmRJbmRleCA9IGJpbmFyeVNlYXJjaF9kZWZhdWx0KAogICAgICAgICAgICBsZWFwU2Vjb25kcywKICAgICAgICAgICAgZGF0ZSwKICAgICAgICAgICAgY29tcGFyZUxlYXBTZWNvbmREYXRlczIKICAgICAgICAgICk7CiAgICAgICAgICBpZiAobGVhcFNlY29uZEluZGV4IDwgMCkgewogICAgICAgICAgICBjb25zdCBsZWFwU2Vjb25kID0gbmV3IExlYXBTZWNvbmRfZGVmYXVsdChkYXRlLCB0YWlNaW51c1V0Yyk7CiAgICAgICAgICAgIGxlYXBTZWNvbmRzLnNwbGljZSh+bGVhcFNlY29uZEluZGV4LCAwLCBsZWFwU2Vjb25kKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgbGFzdFRhaU1pbnVzVXRjID0gdGFpTWludXNVdGM7CiAgICAgIH0KICAgIH0KICB9CiAgZnVuY3Rpb24gZmlsbFJlc3VsdEZyb21JbmRleChlb3AsIHNhbXBsZXMsIGluZGV4LCBjb2x1bW5Db3VudCwgcmVzdWx0KSB7CiAgICBjb25zdCBzdGFydCA9IGluZGV4ICogY29sdW1uQ291bnQ7CiAgICByZXN1bHQueFBvbGVXYW5kZXIgPSBzYW1wbGVzW3N0YXJ0ICsgZW9wLl94UG9sZVdhbmRlclJhZGlhbnNDb2x1bW5dOwogICAgcmVzdWx0LnlQb2xlV2FuZGVyID0gc2FtcGxlc1tzdGFydCArIGVvcC5feVBvbGVXYW5kZXJSYWRpYW5zQ29sdW1uXTsKICAgIHJlc3VsdC54UG9sZU9mZnNldCA9IHNhbXBsZXNbc3RhcnQgKyBlb3AuX3hDZWxlc3RpYWxQb2xlT2Zmc2V0UmFkaWFuc0NvbHVtbl07CiAgICByZXN1bHQueVBvbGVPZmZzZXQgPSBzYW1wbGVzW3N0YXJ0ICsgZW9wLl95Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnNDb2x1bW5dOwogICAgcmVzdWx0LnV0MU1pbnVzVXRjID0gc2FtcGxlc1tzdGFydCArIGVvcC5fdXQxTWludXNVdGNTZWNvbmRzQ29sdW1uXTsKICB9CiAgZnVuY3Rpb24gbGluZWFySW50ZXJwKGR4LCB5MSwgeTIpIHsKICAgIHJldHVybiB5MSArIGR4ICogKHkyIC0geTEpOwogIH0KICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShlb3AsIGRhdGVzLCBzYW1wbGVzLCBkYXRlLCBiZWZvcmUsIGFmdGVyLCByZXN1bHQpIHsKICAgIGNvbnN0IGNvbHVtbkNvdW50ID0gZW9wLl9jb2x1bW5Db3VudDsKICAgIGlmIChhZnRlciA+IGRhdGVzLmxlbmd0aCAtIDEpIHsKICAgICAgcmVzdWx0LnhQb2xlV2FuZGVyID0gMDsKICAgICAgcmVzdWx0LnlQb2xlV2FuZGVyID0gMDsKICAgICAgcmVzdWx0LnhQb2xlT2Zmc2V0ID0gMDsKICAgICAgcmVzdWx0LnlQb2xlT2Zmc2V0ID0gMDsKICAgICAgcmVzdWx0LnV0MU1pbnVzVXRjID0gMDsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICAgIGNvbnN0IGJlZm9yZURhdGUgPSBkYXRlc1tiZWZvcmVdOwogICAgY29uc3QgYWZ0ZXJEYXRlID0gZGF0ZXNbYWZ0ZXJdOwogICAgaWYgKGJlZm9yZURhdGUuZXF1YWxzKGFmdGVyRGF0ZSkgfHwgZGF0ZS5lcXVhbHMoYmVmb3JlRGF0ZSkpIHsKICAgICAgZmlsbFJlc3VsdEZyb21JbmRleChlb3AsIHNhbXBsZXMsIGJlZm9yZSwgY29sdW1uQ291bnQsIHJlc3VsdCk7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9IGVsc2UgaWYgKGRhdGUuZXF1YWxzKGFmdGVyRGF0ZSkpIHsKICAgICAgZmlsbFJlc3VsdEZyb21JbmRleChlb3AsIHNhbXBsZXMsIGFmdGVyLCBjb2x1bW5Db3VudCwgcmVzdWx0KTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICAgIGNvbnN0IGZhY3RvciA9IEp1bGlhbkRhdGVfZGVmYXVsdC5zZWNvbmRzRGlmZmVyZW5jZShkYXRlLCBiZWZvcmVEYXRlKSAvIEp1bGlhbkRhdGVfZGVmYXVsdC5zZWNvbmRzRGlmZmVyZW5jZShhZnRlckRhdGUsIGJlZm9yZURhdGUpOwogICAgY29uc3Qgc3RhcnRCZWZvcmUgPSBiZWZvcmUgKiBjb2x1bW5Db3VudDsKICAgIGNvbnN0IHN0YXJ0QWZ0ZXIgPSBhZnRlciAqIGNvbHVtbkNvdW50OwogICAgbGV0IGJlZm9yZVV0MU1pbnVzVXRjID0gc2FtcGxlc1tzdGFydEJlZm9yZSArIGVvcC5fdXQxTWludXNVdGNTZWNvbmRzQ29sdW1uXTsKICAgIGxldCBhZnRlclV0MU1pbnVzVXRjID0gc2FtcGxlc1tzdGFydEFmdGVyICsgZW9wLl91dDFNaW51c1V0Y1NlY29uZHNDb2x1bW5dOwogICAgY29uc3Qgb2Zmc2V0RGlmZmVyZW5jZSA9IGFmdGVyVXQxTWludXNVdGMgLSBiZWZvcmVVdDFNaW51c1V0YzsKICAgIGlmIChvZmZzZXREaWZmZXJlbmNlID4gMC41IHx8IG9mZnNldERpZmZlcmVuY2UgPCAtMC41KSB7CiAgICAgIGNvbnN0IGJlZm9yZVRhaU1pbnVzVXRjID0gc2FtcGxlc1tzdGFydEJlZm9yZSArIGVvcC5fdGFpTWludXNVdGNTZWNvbmRzQ29sdW1uXTsKICAgICAgY29uc3QgYWZ0ZXJUYWlNaW51c1V0YyA9IHNhbXBsZXNbc3RhcnRBZnRlciArIGVvcC5fdGFpTWludXNVdGNTZWNvbmRzQ29sdW1uXTsKICAgICAgaWYgKGJlZm9yZVRhaU1pbnVzVXRjICE9PSBhZnRlclRhaU1pbnVzVXRjKSB7CiAgICAgICAgaWYgKGFmdGVyRGF0ZS5lcXVhbHMoZGF0ZSkpIHsKICAgICAgICAgIGJlZm9yZVV0MU1pbnVzVXRjID0gYWZ0ZXJVdDFNaW51c1V0YzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYWZ0ZXJVdDFNaW51c1V0YyAtPSBhZnRlclRhaU1pbnVzVXRjIC0gYmVmb3JlVGFpTWludXNVdGM7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXN1bHQueFBvbGVXYW5kZXIgPSBsaW5lYXJJbnRlcnAoCiAgICAgIGZhY3RvciwKICAgICAgc2FtcGxlc1tzdGFydEJlZm9yZSArIGVvcC5feFBvbGVXYW5kZXJSYWRpYW5zQ29sdW1uXSwKICAgICAgc2FtcGxlc1tzdGFydEFmdGVyICsgZW9wLl94UG9sZVdhbmRlclJhZGlhbnNDb2x1bW5dCiAgICApOwogICAgcmVzdWx0LnlQb2xlV2FuZGVyID0gbGluZWFySW50ZXJwKAogICAgICBmYWN0b3IsCiAgICAgIHNhbXBsZXNbc3RhcnRCZWZvcmUgKyBlb3AuX3lQb2xlV2FuZGVyUmFkaWFuc0NvbHVtbl0sCiAgICAgIHNhbXBsZXNbc3RhcnRBZnRlciArIGVvcC5feVBvbGVXYW5kZXJSYWRpYW5zQ29sdW1uXQogICAgKTsKICAgIHJlc3VsdC54UG9sZU9mZnNldCA9IGxpbmVhckludGVycCgKICAgICAgZmFjdG9yLAogICAgICBzYW1wbGVzW3N0YXJ0QmVmb3JlICsgZW9wLl94Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnNDb2x1bW5dLAogICAgICBzYW1wbGVzW3N0YXJ0QWZ0ZXIgKyBlb3AuX3hDZWxlc3RpYWxQb2xlT2Zmc2V0UmFkaWFuc0NvbHVtbl0KICAgICk7CiAgICByZXN1bHQueVBvbGVPZmZzZXQgPSBsaW5lYXJJbnRlcnAoCiAgICAgIGZhY3RvciwKICAgICAgc2FtcGxlc1tzdGFydEJlZm9yZSArIGVvcC5feUNlbGVzdGlhbFBvbGVPZmZzZXRSYWRpYW5zQ29sdW1uXSwKICAgICAgc2FtcGxlc1tzdGFydEFmdGVyICsgZW9wLl95Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnNDb2x1bW5dCiAgICApOwogICAgcmVzdWx0LnV0MU1pbnVzVXRjID0gbGluZWFySW50ZXJwKAogICAgICBmYWN0b3IsCiAgICAgIGJlZm9yZVV0MU1pbnVzVXRjLAogICAgICBhZnRlclV0MU1pbnVzVXRjCiAgICApOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgdmFyIEVhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzX2RlZmF1bHQ7CiAgdmFyIGluaXRfRWFydGhPcmllbnRhdGlvblBhcmFtZXRlcnMgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0VhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzLmpzIigpIHsKICAgICAgaW5pdF9iaW5hcnlTZWFyY2goKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVyc1NhbXBsZSgpOwogICAgICBpbml0X0p1bGlhbkRhdGUoKTsKICAgICAgaW5pdF9MZWFwU2Vjb25kKCk7CiAgICAgIGluaXRfUmVzb3VyY2UoKTsKICAgICAgaW5pdF9SdW50aW1lRXJyb3IoKTsKICAgICAgaW5pdF9UaW1lQ29uc3RhbnRzKCk7CiAgICAgIGluaXRfVGltZVN0YW5kYXJkKCk7CiAgICAgIEVhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzLmZyb21VcmwgPSBhc3luYyBmdW5jdGlvbih1cmwsIG9wdGlvbnMpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInVybCIsIHVybCk7CiAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBSZXNvdXJjZV9kZWZhdWx0LmNyZWF0ZUlmTmVlZGVkKHVybCk7CiAgICAgICAgbGV0IGVvcERhdGE7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGVvcERhdGEgPSBhd2FpdCByZXNvdXJjZS5mZXRjaEpzb24oKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgIGBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSByZXRyaWV2aW5nIHRoZSBFT1AgZGF0YSBmcm9tIHRoZSBVUkwgJHtyZXNvdXJjZS51cmx9LmAKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgRWFydGhPcmllbnRhdGlvblBhcmFtZXRlcnMoewogICAgICAgICAgYWRkTmV3TGVhcFNlY29uZHM6IG9wdGlvbnMuYWRkTmV3TGVhcFNlY29uZHMsCiAgICAgICAgICBkYXRhOiBlb3BEYXRhCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIEVhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzLk5PTkUgPSBPYmplY3QuZnJlZXplKHsKICAgICAgICBjb21wdXRlOiBmdW5jdGlvbihkYXRlLCByZXN1bHQpIHsKICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgICAgcmVzdWx0ID0gbmV3IEVhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzU2FtcGxlX2RlZmF1bHQoMCwgMCwgMCwgMCwgMCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXN1bHQueFBvbGVXYW5kZXIgPSAwOwogICAgICAgICAgICByZXN1bHQueVBvbGVXYW5kZXIgPSAwOwogICAgICAgICAgICByZXN1bHQueFBvbGVPZmZzZXQgPSAwOwogICAgICAgICAgICByZXN1bHQueVBvbGVPZmZzZXQgPSAwOwogICAgICAgICAgICByZXN1bHQudXQxTWludXNVdGMgPSAwOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgIH0pOwogICAgICBFYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVycy5wcm90b3R5cGUuY29tcHV0ZSA9IGZ1bmN0aW9uKGRhdGUsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHRoaXMuX3NhbXBsZXMpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgRWFydGhPcmllbnRhdGlvblBhcmFtZXRlcnNTYW1wbGVfZGVmYXVsdCgwLCAwLCAwLCAwLCAwKTsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMuX3NhbXBsZXMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICByZXN1bHQueFBvbGVXYW5kZXIgPSAwOwogICAgICAgICAgcmVzdWx0LnlQb2xlV2FuZGVyID0gMDsKICAgICAgICAgIHJlc3VsdC54UG9sZU9mZnNldCA9IDA7CiAgICAgICAgICByZXN1bHQueVBvbGVPZmZzZXQgPSAwOwogICAgICAgICAgcmVzdWx0LnV0MU1pbnVzVXRjID0gMDsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGRhdGVzID0gdGhpcy5fZGF0ZXM7CiAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gdGhpcy5fbGFzdEluZGV4OwogICAgICAgIGxldCBiZWZvcmUgPSAwOwogICAgICAgIGxldCBhZnRlciA9IDA7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChsYXN0SW5kZXgpKSB7CiAgICAgICAgICBjb25zdCBwcmV2aW91c0luZGV4RGF0ZSA9IGRhdGVzW2xhc3RJbmRleF07CiAgICAgICAgICBjb25zdCBuZXh0SW5kZXhEYXRlID0gZGF0ZXNbbGFzdEluZGV4ICsgMV07CiAgICAgICAgICBjb25zdCBpc0FmdGVyUHJldmlvdXMgPSBKdWxpYW5EYXRlX2RlZmF1bHQubGVzc1RoYW5PckVxdWFscygKICAgICAgICAgICAgcHJldmlvdXNJbmRleERhdGUsCiAgICAgICAgICAgIGRhdGUKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBpc0FmdGVyTGFzdFNhbXBsZSA9ICFkZWZpbmVkX2RlZmF1bHQobmV4dEluZGV4RGF0ZSk7CiAgICAgICAgICBjb25zdCBpc0JlZm9yZU5leHQgPSBpc0FmdGVyTGFzdFNhbXBsZSB8fCBKdWxpYW5EYXRlX2RlZmF1bHQuZ3JlYXRlclRoYW5PckVxdWFscyhuZXh0SW5kZXhEYXRlLCBkYXRlKTsKICAgICAgICAgIGlmIChpc0FmdGVyUHJldmlvdXMgJiYgaXNCZWZvcmVOZXh0KSB7CiAgICAgICAgICAgIGJlZm9yZSA9IGxhc3RJbmRleDsKICAgICAgICAgICAgaWYgKCFpc0FmdGVyTGFzdFNhbXBsZSAmJiBuZXh0SW5kZXhEYXRlLmVxdWFscyhkYXRlKSkgewogICAgICAgICAgICAgICsrYmVmb3JlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGFmdGVyID0gYmVmb3JlICsgMTsKICAgICAgICAgICAgaW50ZXJwb2xhdGUodGhpcywgZGF0ZXMsIHRoaXMuX3NhbXBsZXMsIGRhdGUsIGJlZm9yZSwgYWZ0ZXIsIHJlc3VsdCk7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGxldCBpbmRleCA9IGJpbmFyeVNlYXJjaF9kZWZhdWx0KGRhdGVzLCBkYXRlLCBKdWxpYW5EYXRlX2RlZmF1bHQuY29tcGFyZSwgdGhpcy5fZGF0ZUNvbHVtbik7CiAgICAgICAgaWYgKGluZGV4ID49IDApIHsKICAgICAgICAgIGlmIChpbmRleCA8IGRhdGVzLmxlbmd0aCAtIDEgJiYgZGF0ZXNbaW5kZXggKyAxXS5lcXVhbHMoZGF0ZSkpIHsKICAgICAgICAgICAgKytpbmRleDsKICAgICAgICAgIH0KICAgICAgICAgIGJlZm9yZSA9IGluZGV4OwogICAgICAgICAgYWZ0ZXIgPSBpbmRleDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYWZ0ZXIgPSB+aW5kZXg7CiAgICAgICAgICBiZWZvcmUgPSBhZnRlciAtIDE7CiAgICAgICAgICBpZiAoYmVmb3JlIDwgMCkgewogICAgICAgICAgICBiZWZvcmUgPSAwOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLl9sYXN0SW5kZXggPSBiZWZvcmU7CiAgICAgICAgaW50ZXJwb2xhdGUodGhpcywgZGF0ZXMsIHRoaXMuX3NhbXBsZXMsIGRhdGUsIGJlZm9yZSwgYWZ0ZXIsIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgRWFydGhPcmllbnRhdGlvblBhcmFtZXRlcnNfZGVmYXVsdCA9IEVhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSGVhZGluZ1BpdGNoUm9sbC5qcwogIGZ1bmN0aW9uIEhlYWRpbmdQaXRjaFJvbGwoaGVhZGluZywgcGl0Y2gsIHJvbGwpIHsKICAgIHRoaXMuaGVhZGluZyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGhlYWRpbmcsIDApOwogICAgdGhpcy5waXRjaCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHBpdGNoLCAwKTsKICAgIHRoaXMucm9sbCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHJvbGwsIDApOwogIH0KICB2YXIgSGVhZGluZ1BpdGNoUm9sbF9kZWZhdWx0OwogIHZhciBpbml0X0hlYWRpbmdQaXRjaFJvbGwgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0hlYWRpbmdQaXRjaFJvbGwuanMiKCkgewogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgSGVhZGluZ1BpdGNoUm9sbC5mcm9tUXVhdGVybmlvbiA9IGZ1bmN0aW9uKHF1YXRlcm5pb24sIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHF1YXRlcm5pb24pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicXVhdGVybmlvbiBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgSGVhZGluZ1BpdGNoUm9sbCgpOwogICAgICAgIH0KICAgICAgICBjb25zdCB0ZXN0ID0gMiAqIChxdWF0ZXJuaW9uLncgKiBxdWF0ZXJuaW9uLnkgLSBxdWF0ZXJuaW9uLnogKiBxdWF0ZXJuaW9uLngpOwogICAgICAgIGNvbnN0IGRlbm9taW5hdG9yUm9sbCA9IDEgLSAyICogKHF1YXRlcm5pb24ueCAqIHF1YXRlcm5pb24ueCArIHF1YXRlcm5pb24ueSAqIHF1YXRlcm5pb24ueSk7CiAgICAgICAgY29uc3QgbnVtZXJhdG9yUm9sbCA9IDIgKiAocXVhdGVybmlvbi53ICogcXVhdGVybmlvbi54ICsgcXVhdGVybmlvbi55ICogcXVhdGVybmlvbi56KTsKICAgICAgICBjb25zdCBkZW5vbWluYXRvckhlYWRpbmcgPSAxIC0gMiAqIChxdWF0ZXJuaW9uLnkgKiBxdWF0ZXJuaW9uLnkgKyBxdWF0ZXJuaW9uLnogKiBxdWF0ZXJuaW9uLnopOwogICAgICAgIGNvbnN0IG51bWVyYXRvckhlYWRpbmcgPSAyICogKHF1YXRlcm5pb24udyAqIHF1YXRlcm5pb24ueiArIHF1YXRlcm5pb24ueCAqIHF1YXRlcm5pb24ueSk7CiAgICAgICAgcmVzdWx0LmhlYWRpbmcgPSAtTWF0aC5hdGFuMihudW1lcmF0b3JIZWFkaW5nLCBkZW5vbWluYXRvckhlYWRpbmcpOwogICAgICAgIHJlc3VsdC5yb2xsID0gTWF0aC5hdGFuMihudW1lcmF0b3JSb2xsLCBkZW5vbWluYXRvclJvbGwpOwogICAgICAgIHJlc3VsdC5waXRjaCA9IC1NYXRoX2RlZmF1bHQuYXNpbkNsYW1wZWQodGVzdCk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgSGVhZGluZ1BpdGNoUm9sbC5mcm9tRGVncmVlcyA9IGZ1bmN0aW9uKGhlYWRpbmcsIHBpdGNoLCByb2xsLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChoZWFkaW5nKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImhlYWRpbmcgaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocGl0Y2gpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicGl0Y2ggaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocm9sbCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJyb2xsIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBIZWFkaW5nUGl0Y2hSb2xsKCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5oZWFkaW5nID0gaGVhZGluZyAqIE1hdGhfZGVmYXVsdC5SQURJQU5TX1BFUl9ERUdSRUU7CiAgICAgICAgcmVzdWx0LnBpdGNoID0gcGl0Y2ggKiBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFOwogICAgICAgIHJlc3VsdC5yb2xsID0gcm9sbCAqIE1hdGhfZGVmYXVsdC5SQURJQU5TX1BFUl9ERUdSRUU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgSGVhZGluZ1BpdGNoUm9sbC5jbG9uZSA9IGZ1bmN0aW9uKGhlYWRpbmdQaXRjaFJvbGwsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGhlYWRpbmdQaXRjaFJvbGwpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IEhlYWRpbmdQaXRjaFJvbGwoCiAgICAgICAgICAgIGhlYWRpbmdQaXRjaFJvbGwuaGVhZGluZywKICAgICAgICAgICAgaGVhZGluZ1BpdGNoUm9sbC5waXRjaCwKICAgICAgICAgICAgaGVhZGluZ1BpdGNoUm9sbC5yb2xsCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXN1bHQuaGVhZGluZyA9IGhlYWRpbmdQaXRjaFJvbGwuaGVhZGluZzsKICAgICAgICByZXN1bHQucGl0Y2ggPSBoZWFkaW5nUGl0Y2hSb2xsLnBpdGNoOwogICAgICAgIHJlc3VsdC5yb2xsID0gaGVhZGluZ1BpdGNoUm9sbC5yb2xsOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEhlYWRpbmdQaXRjaFJvbGwuZXF1YWxzID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICByZXR1cm4gbGVmdCA9PT0gcmlnaHQgfHwgZGVmaW5lZF9kZWZhdWx0KGxlZnQpICYmIGRlZmluZWRfZGVmYXVsdChyaWdodCkgJiYgbGVmdC5oZWFkaW5nID09PSByaWdodC5oZWFkaW5nICYmIGxlZnQucGl0Y2ggPT09IHJpZ2h0LnBpdGNoICYmIGxlZnQucm9sbCA9PT0gcmlnaHQucm9sbDsKICAgICAgfTsKICAgICAgSGVhZGluZ1BpdGNoUm9sbC5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlbGF0aXZlRXBzaWxvbiwgYWJzb2x1dGVFcHNpbG9uKSB7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgbGVmdC5oZWFkaW5nLAogICAgICAgICAgcmlnaHQuaGVhZGluZywKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICkgJiYgTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICBsZWZ0LnBpdGNoLAogICAgICAgICAgcmlnaHQucGl0Y2gsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgbGVmdC5yb2xsLAogICAgICAgICAgcmlnaHQucm9sbCwKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICk7CiAgICAgIH07CiAgICAgIEhlYWRpbmdQaXRjaFJvbGwucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIEhlYWRpbmdQaXRjaFJvbGwuY2xvbmUodGhpcywgcmVzdWx0KTsKICAgICAgfTsKICAgICAgSGVhZGluZ1BpdGNoUm9sbC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ocmlnaHQpIHsKICAgICAgICByZXR1cm4gSGVhZGluZ1BpdGNoUm9sbC5lcXVhbHModGhpcywgcmlnaHQpOwogICAgICB9OwogICAgICBIZWFkaW5nUGl0Y2hSb2xsLnByb3RvdHlwZS5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24ocmlnaHQsIHJlbGF0aXZlRXBzaWxvbiwgYWJzb2x1dGVFcHNpbG9uKSB7CiAgICAgICAgcmV0dXJuIEhlYWRpbmdQaXRjaFJvbGwuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHRoaXMsCiAgICAgICAgICByaWdodCwKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICk7CiAgICAgIH07CiAgICAgIEhlYWRpbmdQaXRjaFJvbGwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGAoJHt0aGlzLmhlYWRpbmd9LCAke3RoaXMucGl0Y2h9LCAke3RoaXMucm9sbH0pYDsKICAgICAgfTsKICAgICAgSGVhZGluZ1BpdGNoUm9sbF9kZWZhdWx0ID0gSGVhZGluZ1BpdGNoUm9sbDsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2J1aWxkTW9kdWxlVXJsLmpzCiAgZnVuY3Rpb24gZ2V0QmFzZVVybEZyb21DZXNpdW1TY3JpcHQoKSB7CiAgICBjb25zdCBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInNjcmlwdCIpOwogICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNjcmlwdHMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICAgICAgY29uc3Qgc3JjID0gc2NyaXB0c1tpXS5nZXRBdHRyaWJ1dGUoInNyYyIpOwogICAgICBjb25zdCByZXN1bHQgPSBjZXNpdW1TY3JpcHRSZWdleC5leGVjKHNyYyk7CiAgICAgIGlmIChyZXN1bHQgIT09IG51bGwpIHsKICAgICAgICByZXR1cm4gcmVzdWx0WzFdOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gdm9pZCAwOwogIH0KICBmdW5jdGlvbiB0cnlNYWtlQWJzb2x1dGUodXJsKSB7CiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAidW5kZWZpbmVkIikgewogICAgICByZXR1cm4gdXJsOwogICAgfQogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYTIpKSB7CiAgICAgIGEyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpOwogICAgfQogICAgYTIuaHJlZiA9IHVybDsKICAgIHJldHVybiBhMi5ocmVmOwogIH0KICBmdW5jdGlvbiBnZXRDZXNpdW1CYXNlVXJsKCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChiYXNlUmVzb3VyY2UpKSB7CiAgICAgIHJldHVybiBiYXNlUmVzb3VyY2U7CiAgICB9CiAgICBsZXQgYmFzZVVybFN0cmluZzsKICAgIGlmICh0eXBlb2YgQ0VTSVVNX0JBU0VfVVJMICE9PSAidW5kZWZpbmVkIikgewogICAgICBiYXNlVXJsU3RyaW5nID0gQ0VTSVVNX0JBU0VfVVJMOwogICAgfSBlbHNlIGlmIChkZWZpbmVkX2RlZmF1bHQoaW1wb3J0X21ldGE/LnVybCkpIHsKICAgICAgYmFzZVVybFN0cmluZyA9IGdldEFic29sdXRlVXJpX2RlZmF1bHQoIi4iLCBpbXBvcnRfbWV0YS51cmwpOwogICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAib2JqZWN0IiAmJiBkZWZpbmVkX2RlZmF1bHQoZGVmaW5lLmFtZCkgJiYgIWRlZmluZS5hbWQudG9VcmxVbmRlZmluZWQgJiYgZGVmaW5lZF9kZWZhdWx0KF9fcmVxdWlyZS50b1VybCkpIHsKICAgICAgYmFzZVVybFN0cmluZyA9IGdldEFic29sdXRlVXJpX2RlZmF1bHQoCiAgICAgICAgIi4uIiwKICAgICAgICBidWlsZE1vZHVsZVVybCgiQ29yZS9idWlsZE1vZHVsZVVybC5qcyIpCiAgICAgICk7CiAgICB9IGVsc2UgewogICAgICBiYXNlVXJsU3RyaW5nID0gZ2V0QmFzZVVybEZyb21DZXNpdW1TY3JpcHQoKTsKICAgIH0KICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGJhc2VVcmxTdHJpbmcpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJVbmFibGUgdG8gZGV0ZXJtaW5lIENlc2l1bSBiYXNlIFVSTCBhdXRvbWF0aWNhbGx5LCB0cnkgZGVmaW5pbmcgYSBnbG9iYWwgdmFyaWFibGUgY2FsbGVkIENFU0lVTV9CQVNFX1VSTC4iCiAgICAgICk7CiAgICB9CiAgICBiYXNlUmVzb3VyY2UgPSBuZXcgUmVzb3VyY2VfZGVmYXVsdCh7CiAgICAgIHVybDogdHJ5TWFrZUFic29sdXRlKGJhc2VVcmxTdHJpbmcpCiAgICB9KTsKICAgIGJhc2VSZXNvdXJjZS5hcHBlbmRGb3J3YXJkU2xhc2goKTsKICAgIHJldHVybiBiYXNlUmVzb3VyY2U7CiAgfQogIGZ1bmN0aW9uIGJ1aWxkTW9kdWxlVXJsRnJvbVJlcXVpcmVUb1VybChtb2R1bGVJRCkgewogICAgcmV0dXJuIHRyeU1ha2VBYnNvbHV0ZShfX3JlcXVpcmUudG9VcmwoYC4uLyR7bW9kdWxlSUR9YCkpOwogIH0KICBmdW5jdGlvbiBidWlsZE1vZHVsZVVybEZyb21CYXNlVXJsKG1vZHVsZUlEKSB7CiAgICBjb25zdCByZXNvdXJjZSA9IGdldENlc2l1bUJhc2VVcmwoKS5nZXREZXJpdmVkUmVzb3VyY2UoewogICAgICB1cmw6IG1vZHVsZUlECiAgICB9KTsKICAgIHJldHVybiByZXNvdXJjZS51cmw7CiAgfQogIGZ1bmN0aW9uIGJ1aWxkTW9kdWxlVXJsKHJlbGF0aXZlVXJsKSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpbXBsZW1lbnRhdGlvbikpIHsKICAgICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJvYmplY3QiICYmIGRlZmluZWRfZGVmYXVsdChkZWZpbmUuYW1kKSAmJiAhZGVmaW5lLmFtZC50b1VybFVuZGVmaW5lZCAmJiBkZWZpbmVkX2RlZmF1bHQoX19yZXF1aXJlLnRvVXJsKSkgewogICAgICAgIGltcGxlbWVudGF0aW9uID0gYnVpbGRNb2R1bGVVcmxGcm9tUmVxdWlyZVRvVXJsOwogICAgICB9IGVsc2UgewogICAgICAgIGltcGxlbWVudGF0aW9uID0gYnVpbGRNb2R1bGVVcmxGcm9tQmFzZVVybDsKICAgICAgfQogICAgfQogICAgY29uc3QgdXJsID0gaW1wbGVtZW50YXRpb24ocmVsYXRpdmVVcmwpOwogICAgcmV0dXJuIHVybDsKICB9CiAgdmFyIGltcG9ydF9tZXRhLCBjZXNpdW1TY3JpcHRSZWdleCwgYTIsIGJhc2VSZXNvdXJjZSwgaW1wbGVtZW50YXRpb24sIGJ1aWxkTW9kdWxlVXJsX2RlZmF1bHQ7CiAgdmFyIGluaXRfYnVpbGRNb2R1bGVVcmwgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2J1aWxkTW9kdWxlVXJsLmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9nZXRBYnNvbHV0ZVVyaSgpOwogICAgICBpbml0X1Jlc291cmNlKCk7CiAgICAgIGltcG9ydF9tZXRhID0ge307CiAgICAgIGNlc2l1bVNjcmlwdFJlZ2V4ID0gLygoPzouKlwvKXxeKUNlc2l1bVwuanMoPzpcP3xcI3wkKS87CiAgICAgIGJ1aWxkTW9kdWxlVXJsLl9jZXNpdW1TY3JpcHRSZWdleCA9IGNlc2l1bVNjcmlwdFJlZ2V4OwogICAgICBidWlsZE1vZHVsZVVybC5fYnVpbGRNb2R1bGVVcmxGcm9tQmFzZVVybCA9IGJ1aWxkTW9kdWxlVXJsRnJvbUJhc2VVcmw7CiAgICAgIGJ1aWxkTW9kdWxlVXJsLl9jbGVhckJhc2VSZXNvdXJjZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIGJhc2VSZXNvdXJjZSA9IHZvaWQgMDsKICAgICAgfTsKICAgICAgYnVpbGRNb2R1bGVVcmwuc2V0QmFzZVVybCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgYmFzZVJlc291cmNlID0gUmVzb3VyY2VfZGVmYXVsdC5ERUZBVUxULmdldERlcml2ZWRSZXNvdXJjZSh7CiAgICAgICAgICB1cmw6IHZhbHVlCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIGJ1aWxkTW9kdWxlVXJsLmdldENlc2l1bUJhc2VVcmwgPSBnZXRDZXNpdW1CYXNlVXJsOwogICAgICBidWlsZE1vZHVsZVVybF9kZWZhdWx0ID0gYnVpbGRNb2R1bGVVcmw7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9JYXUyMDA2WHlzU2FtcGxlLmpzCiAgZnVuY3Rpb24gSWF1MjAwNlh5c1NhbXBsZSh4LCB5LCBzKSB7CiAgICB0aGlzLnggPSB4OwogICAgdGhpcy55ID0geTsKICAgIHRoaXMucyA9IHM7CiAgfQogIHZhciBJYXUyMDA2WHlzU2FtcGxlX2RlZmF1bHQ7CiAgdmFyIGluaXRfSWF1MjAwNlh5c1NhbXBsZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSWF1MjAwNlh5c1NhbXBsZS5qcyIoKSB7CiAgICAgIElhdTIwMDZYeXNTYW1wbGVfZGVmYXVsdCA9IElhdTIwMDZYeXNTYW1wbGU7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9JYXUyMDA2WHlzRGF0YS5qcwogIGZ1bmN0aW9uIElhdTIwMDZYeXNEYXRhKG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgdGhpcy5feHlzRmlsZVVybFRlbXBsYXRlID0gUmVzb3VyY2VfZGVmYXVsdC5jcmVhdGVJZk5lZWRlZCgKICAgICAgb3B0aW9ucy54eXNGaWxlVXJsVGVtcGxhdGUKICAgICk7CiAgICB0aGlzLl9pbnRlcnBvbGF0aW9uT3JkZXIgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmludGVycG9sYXRpb25PcmRlciwgOSk7CiAgICB0aGlzLl9zYW1wbGVaZXJvSnVsaWFuRXBoZW1lcmlzRGF0ZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICBvcHRpb25zLnNhbXBsZVplcm9KdWxpYW5FcGhlbWVyaXNEYXRlLAogICAgICAyNDQyMzk2NWUtMQogICAgKTsKICAgIHRoaXMuX3NhbXBsZVplcm9EYXRlVFQgPSBuZXcgSnVsaWFuRGF0ZV9kZWZhdWx0KAogICAgICB0aGlzLl9zYW1wbGVaZXJvSnVsaWFuRXBoZW1lcmlzRGF0ZSwKICAgICAgMCwKICAgICAgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJCiAgICApOwogICAgdGhpcy5fc3RlcFNpemVEYXlzID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5zdGVwU2l6ZURheXMsIDEpOwogICAgdGhpcy5fc2FtcGxlc1Blclh5c0ZpbGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnNhbXBsZXNQZXJYeXNGaWxlLCAxZTMpOwogICAgdGhpcy5fdG90YWxTYW1wbGVzID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy50b3RhbFNhbXBsZXMsIDI3NDI2KTsKICAgIHRoaXMuX3NhbXBsZXMgPSBuZXcgQXJyYXkodGhpcy5fdG90YWxTYW1wbGVzICogMyk7CiAgICB0aGlzLl9jaHVua0Rvd25sb2Fkc0luUHJvZ3Jlc3MgPSBbXTsKICAgIGNvbnN0IG9yZGVyID0gdGhpcy5faW50ZXJwb2xhdGlvbk9yZGVyOwogICAgY29uc3QgZGVub20gPSB0aGlzLl9kZW5vbWluYXRvcnMgPSBuZXcgQXJyYXkob3JkZXIgKyAxKTsKICAgIGNvbnN0IHhUYWJsZSA9IHRoaXMuX3hUYWJsZSA9IG5ldyBBcnJheShvcmRlciArIDEpOwogICAgY29uc3Qgc3RlcE4gPSBNYXRoLnBvdyh0aGlzLl9zdGVwU2l6ZURheXMsIG9yZGVyKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IG9yZGVyOyArK2kpIHsKICAgICAgZGVub21baV0gPSBzdGVwTjsKICAgICAgeFRhYmxlW2ldID0gaSAqIHRoaXMuX3N0ZXBTaXplRGF5czsKICAgICAgZm9yIChsZXQgaiA9IDA7IGogPD0gb3JkZXI7ICsraikgewogICAgICAgIGlmIChqICE9PSBpKSB7CiAgICAgICAgICBkZW5vbVtpXSAqPSBpIC0gajsKICAgICAgICB9CiAgICAgIH0KICAgICAgZGVub21baV0gPSAxIC8gZGVub21baV07CiAgICB9CiAgICB0aGlzLl93b3JrID0gbmV3IEFycmF5KG9yZGVyICsgMSk7CiAgICB0aGlzLl9jb2VmID0gbmV3IEFycmF5KG9yZGVyICsgMSk7CiAgfQogIGZ1bmN0aW9uIGdldERheXNTaW5jZUVwb2NoKHh5cywgZGF5VFQsIHNlY29uZFRUKSB7CiAgICBjb25zdCBkYXRlVFQgPSBqdWxpYW5EYXRlU2NyYXRjaDsKICAgIGRhdGVUVC5kYXlOdW1iZXIgPSBkYXlUVDsKICAgIGRhdGVUVC5zZWNvbmRzT2ZEYXkgPSBzZWNvbmRUVDsKICAgIHJldHVybiBKdWxpYW5EYXRlX2RlZmF1bHQuZGF5c0RpZmZlcmVuY2UoZGF0ZVRULCB4eXMuX3NhbXBsZVplcm9EYXRlVFQpOwogIH0KICBmdW5jdGlvbiByZXF1ZXN0WHlzQ2h1bmsoeHlzRGF0YSwgY2h1bmtJbmRleCkgewogICAgaWYgKHh5c0RhdGEuX2NodW5rRG93bmxvYWRzSW5Qcm9ncmVzc1tjaHVua0luZGV4XSkgewogICAgICByZXR1cm4geHlzRGF0YS5fY2h1bmtEb3dubG9hZHNJblByb2dyZXNzW2NodW5rSW5kZXhdOwogICAgfQogICAgbGV0IGNodW5rVXJsOwogICAgY29uc3QgeHlzRmlsZVVybFRlbXBsYXRlID0geHlzRGF0YS5feHlzRmlsZVVybFRlbXBsYXRlOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdCh4eXNGaWxlVXJsVGVtcGxhdGUpKSB7CiAgICAgIGNodW5rVXJsID0geHlzRmlsZVVybFRlbXBsYXRlLmdldERlcml2ZWRSZXNvdXJjZSh7CiAgICAgICAgdGVtcGxhdGVWYWx1ZXM6IHsKICAgICAgICAgIDA6IGNodW5rSW5kZXgKICAgICAgICB9CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgY2h1bmtVcmwgPSBuZXcgUmVzb3VyY2VfZGVmYXVsdCh7CiAgICAgICAgdXJsOiBidWlsZE1vZHVsZVVybF9kZWZhdWx0KGBBc3NldHMvSUFVMjAwNl9YWVMvSUFVMjAwNl9YWVNfJHtjaHVua0luZGV4fS5qc29uYCkKICAgICAgfSk7CiAgICB9CiAgICBjb25zdCBwcm9taXNlID0gY2h1bmtVcmwuZmV0Y2hKc29uKCkudGhlbihmdW5jdGlvbihjaHVuaykgewogICAgICB4eXNEYXRhLl9jaHVua0Rvd25sb2Fkc0luUHJvZ3Jlc3NbY2h1bmtJbmRleF0gPSBmYWxzZTsKICAgICAgY29uc3Qgc2FtcGxlcyA9IHh5c0RhdGEuX3NhbXBsZXM7CiAgICAgIGNvbnN0IG5ld1NhbXBsZXMgPSBjaHVuay5zYW1wbGVzOwogICAgICBjb25zdCBzdGFydEluZGV4ID0gY2h1bmtJbmRleCAqIHh5c0RhdGEuX3NhbXBsZXNQZXJYeXNGaWxlICogMzsKICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IG5ld1NhbXBsZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICAgICAgICBzYW1wbGVzW3N0YXJ0SW5kZXggKyBpXSA9IG5ld1NhbXBsZXNbaV07CiAgICAgIH0KICAgIH0pOwogICAgeHlzRGF0YS5fY2h1bmtEb3dubG9hZHNJblByb2dyZXNzW2NodW5rSW5kZXhdID0gcHJvbWlzZTsKICAgIHJldHVybiBwcm9taXNlOwogIH0KICB2YXIganVsaWFuRGF0ZVNjcmF0Y2gsIElhdTIwMDZYeXNEYXRhX2RlZmF1bHQ7CiAgdmFyIGluaXRfSWF1MjAwNlh5c0RhdGEgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0lhdTIwMDZYeXNEYXRhLmpzIigpIHsKICAgICAgaW5pdF9idWlsZE1vZHVsZVVybCgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9JYXUyMDA2WHlzU2FtcGxlKCk7CiAgICAgIGluaXRfSnVsaWFuRGF0ZSgpOwogICAgICBpbml0X1Jlc291cmNlKCk7CiAgICAgIGluaXRfVGltZVN0YW5kYXJkKCk7CiAgICAgIGp1bGlhbkRhdGVTY3JhdGNoID0gbmV3IEp1bGlhbkRhdGVfZGVmYXVsdCgwLCAwLCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpOwogICAgICBJYXUyMDA2WHlzRGF0YS5wcm90b3R5cGUucHJlbG9hZCA9IGZ1bmN0aW9uKHN0YXJ0RGF5VFQsIHN0YXJ0U2Vjb25kVFQsIHN0b3BEYXlUVCwgc3RvcFNlY29uZFRUKSB7CiAgICAgICAgY29uc3Qgc3RhcnREYXlzU2luY2VFcG9jaCA9IGdldERheXNTaW5jZUVwb2NoKAogICAgICAgICAgdGhpcywKICAgICAgICAgIHN0YXJ0RGF5VFQsCiAgICAgICAgICBzdGFydFNlY29uZFRUCiAgICAgICAgKTsKICAgICAgICBjb25zdCBzdG9wRGF5c1NpbmNlRXBvY2ggPSBnZXREYXlzU2luY2VFcG9jaCh0aGlzLCBzdG9wRGF5VFQsIHN0b3BTZWNvbmRUVCk7CiAgICAgICAgbGV0IHN0YXJ0SW5kZXggPSBzdGFydERheXNTaW5jZUVwb2NoIC8gdGhpcy5fc3RlcFNpemVEYXlzIC0gdGhpcy5faW50ZXJwb2xhdGlvbk9yZGVyIC8gMiB8IDA7CiAgICAgICAgaWYgKHN0YXJ0SW5kZXggPCAwKSB7CiAgICAgICAgICBzdGFydEluZGV4ID0gMDsKICAgICAgICB9CiAgICAgICAgbGV0IHN0b3BJbmRleCA9IHN0b3BEYXlzU2luY2VFcG9jaCAvIHRoaXMuX3N0ZXBTaXplRGF5cyAtIHRoaXMuX2ludGVycG9sYXRpb25PcmRlciAvIDIgfCAwICsgdGhpcy5faW50ZXJwb2xhdGlvbk9yZGVyOwogICAgICAgIGlmIChzdG9wSW5kZXggPj0gdGhpcy5fdG90YWxTYW1wbGVzKSB7CiAgICAgICAgICBzdG9wSW5kZXggPSB0aGlzLl90b3RhbFNhbXBsZXMgLSAxOwogICAgICAgIH0KICAgICAgICBjb25zdCBzdGFydENodW5rID0gc3RhcnRJbmRleCAvIHRoaXMuX3NhbXBsZXNQZXJYeXNGaWxlIHwgMDsKICAgICAgICBjb25zdCBzdG9wQ2h1bmsgPSBzdG9wSW5kZXggLyB0aGlzLl9zYW1wbGVzUGVyWHlzRmlsZSB8IDA7CiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTsKICAgICAgICBmb3IgKGxldCBpID0gc3RhcnRDaHVuazsgaSA8PSBzdG9wQ2h1bms7ICsraSkgewogICAgICAgICAgcHJvbWlzZXMucHVzaChyZXF1ZXN0WHlzQ2h1bmsodGhpcywgaSkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpOwogICAgICB9OwogICAgICBJYXUyMDA2WHlzRGF0YS5wcm90b3R5cGUuY29tcHV0ZVh5c1JhZGlhbnMgPSBmdW5jdGlvbihkYXlUVCwgc2Vjb25kVFQsIHJlc3VsdCkgewogICAgICAgIGNvbnN0IGRheXNTaW5jZUVwb2NoID0gZ2V0RGF5c1NpbmNlRXBvY2godGhpcywgZGF5VFQsIHNlY29uZFRUKTsKICAgICAgICBpZiAoZGF5c1NpbmNlRXBvY2ggPCAwKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBjb25zdCBjZW50ZXJJbmRleCA9IGRheXNTaW5jZUVwb2NoIC8gdGhpcy5fc3RlcFNpemVEYXlzIHwgMDsKICAgICAgICBpZiAoY2VudGVySW5kZXggPj0gdGhpcy5fdG90YWxTYW1wbGVzKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBjb25zdCBkZWdyZWUgPSB0aGlzLl9pbnRlcnBvbGF0aW9uT3JkZXI7CiAgICAgICAgbGV0IGZpcnN0SW5kZXggPSBjZW50ZXJJbmRleCAtIChkZWdyZWUgLyAyIHwgMCk7CiAgICAgICAgaWYgKGZpcnN0SW5kZXggPCAwKSB7CiAgICAgICAgICBmaXJzdEluZGV4ID0gMDsKICAgICAgICB9CiAgICAgICAgbGV0IGxhc3RJbmRleCA9IGZpcnN0SW5kZXggKyBkZWdyZWU7CiAgICAgICAgaWYgKGxhc3RJbmRleCA+PSB0aGlzLl90b3RhbFNhbXBsZXMpIHsKICAgICAgICAgIGxhc3RJbmRleCA9IHRoaXMuX3RvdGFsU2FtcGxlcyAtIDE7CiAgICAgICAgICBmaXJzdEluZGV4ID0gbGFzdEluZGV4IC0gZGVncmVlOwogICAgICAgICAgaWYgKGZpcnN0SW5kZXggPCAwKSB7CiAgICAgICAgICAgIGZpcnN0SW5kZXggPSAwOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBsZXQgaXNEYXRhTWlzc2luZyA9IGZhbHNlOwogICAgICAgIGNvbnN0IHNhbXBsZXMgPSB0aGlzLl9zYW1wbGVzOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHNhbXBsZXNbZmlyc3RJbmRleCAqIDNdKSkgewogICAgICAgICAgcmVxdWVzdFh5c0NodW5rKHRoaXMsIGZpcnN0SW5kZXggLyB0aGlzLl9zYW1wbGVzUGVyWHlzRmlsZSB8IDApOwogICAgICAgICAgaXNEYXRhTWlzc2luZyA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHNhbXBsZXNbbGFzdEluZGV4ICogM10pKSB7CiAgICAgICAgICByZXF1ZXN0WHlzQ2h1bmsodGhpcywgbGFzdEluZGV4IC8gdGhpcy5fc2FtcGxlc1Blclh5c0ZpbGUgfCAwKTsKICAgICAgICAgIGlzRGF0YU1pc3NpbmcgPSB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoaXNEYXRhTWlzc2luZykgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IElhdTIwMDZYeXNTYW1wbGVfZGVmYXVsdCgwLCAwLCAwKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0LnggPSAwOwogICAgICAgICAgcmVzdWx0LnkgPSAwOwogICAgICAgICAgcmVzdWx0LnMgPSAwOwogICAgICAgIH0KICAgICAgICBjb25zdCB4ID0gZGF5c1NpbmNlRXBvY2ggLSBmaXJzdEluZGV4ICogdGhpcy5fc3RlcFNpemVEYXlzOwogICAgICAgIGNvbnN0IHdvcmsgPSB0aGlzLl93b3JrOwogICAgICAgIGNvbnN0IGRlbm9tID0gdGhpcy5fZGVub21pbmF0b3JzOwogICAgICAgIGNvbnN0IGNvZWYgPSB0aGlzLl9jb2VmOwogICAgICAgIGNvbnN0IHhUYWJsZSA9IHRoaXMuX3hUYWJsZTsKICAgICAgICBsZXQgaSwgajsKICAgICAgICBmb3IgKGkgPSAwOyBpIDw9IGRlZ3JlZTsgKytpKSB7CiAgICAgICAgICB3b3JrW2ldID0geCAtIHhUYWJsZVtpXTsKICAgICAgICB9CiAgICAgICAgZm9yIChpID0gMDsgaSA8PSBkZWdyZWU7ICsraSkgewogICAgICAgICAgY29lZltpXSA9IDE7CiAgICAgICAgICBmb3IgKGogPSAwOyBqIDw9IGRlZ3JlZTsgKytqKSB7CiAgICAgICAgICAgIGlmIChqICE9PSBpKSB7CiAgICAgICAgICAgICAgY29lZltpXSAqPSB3b3JrW2pdOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBjb2VmW2ldICo9IGRlbm9tW2ldOwogICAgICAgICAgbGV0IHNhbXBsZUluZGV4ID0gKGZpcnN0SW5kZXggKyBpKSAqIDM7CiAgICAgICAgICByZXN1bHQueCArPSBjb2VmW2ldICogc2FtcGxlc1tzYW1wbGVJbmRleCsrXTsKICAgICAgICAgIHJlc3VsdC55ICs9IGNvZWZbaV0gKiBzYW1wbGVzW3NhbXBsZUluZGV4KytdOwogICAgICAgICAgcmVzdWx0LnMgKz0gY29lZltpXSAqIHNhbXBsZXNbc2FtcGxlSW5kZXhdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBJYXUyMDA2WHlzRGF0YV9kZWZhdWx0ID0gSWF1MjAwNlh5c0RhdGE7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9UcmFuc2Zvcm1zLmpzCiAgdmFyIFRyYW5zZm9ybXMsIHZlY3RvclByb2R1Y3RMb2NhbEZyYW1lLCBkZWdlbmVyYXRlUG9zaXRpb25Mb2NhbEZyYW1lLCBsb2NhbEZyYW1lVG9GaXhlZEZyYW1lQ2FjaGUsIHNjcmF0Y2hDYWxjdWxhdGVDYXJ0ZXNpYW4sIHNjcmF0Y2hGaXJzdENhcnRlc2lhbiwgc2NyYXRjaFNlY29uZENhcnRlc2lhbiwgc2NyYXRjaFRoaXJkQ2FydGVzaWFuLCBzY3JhdGNoSFBSUXVhdGVybmlvbjIsIHNjcmF0Y2hTY2FsZSwgc2NyYXRjaEhQUk1hdHJpeDQsIHNjcmF0Y2hFTlVNYXRyaXg0LCBzY3JhdGNoSFBSTWF0cml4Mywgbm9TY2FsZSwgaHByQ2VudGVyU2NyYXRjaCwgZmZTY3JhdGNoLCBocHJUcmFuc2Zvcm1TY3JhdGNoLCBocHJSb3RhdGlvblNjcmF0Y2gsIGhwclF1YXRlcm5pb25TY3JhdGNoLCBnbXN0Q29uc3RhbnQwLCBnbXN0Q29uc3RhbnQxLCBnbXN0Q29uc3RhbnQyLCBnbXN0Q29uc3RhbnQzLCByYXRlQ29lZiwgd2dzODRXUlByZWNlc3NpbmcsIHR3b1BpT3ZlclNlY29uZHNJbkRheSwgZGF0ZUluVXRjLCB0dE1pbnVzVGFpLCBqMjAwMHR0RGF5cywgeHlzU2NyYXRjaCwgZW9wU2NyYXRjaCwgcm90YXRpb24xU2NyYXRjaCwgcm90YXRpb24yU2NyYXRjaCwgcG9pbnRUb1dpbmRvd0Nvb3JkaW5hdGVzVGVtcCwgbm9ybWFsU2NyYXRjaCwgcmlnaHRTY3JhdGNoLCB1cFNjcmF0Y2gsIHN3aXp6bGVNYXRyaXgsIHNjcmF0Y2hDYXJ0b2dyYXBoaWMsIHNjcmF0Y2hDYXJ0ZXNpYW4zUHJvamVjdGlvbiwgc2NyYXRjaENlbnRlciwgc2NyYXRjaFJvdGF0aW9uLCBzY3JhdGNoRnJvbUVOVSwgc2NyYXRjaFRvRU5VLCBUcmFuc2Zvcm1zX2RlZmF1bHQ7CiAgdmFyIGluaXRfVHJhbnNmb3JtcyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVHJhbnNmb3Jtcy5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW40KCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9FYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVycygpOwogICAgICBpbml0X0VhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzU2FtcGxlKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfSGVhZGluZ1BpdGNoUm9sbCgpOwogICAgICBpbml0X0lhdTIwMDZYeXNEYXRhKCk7CiAgICAgIGluaXRfSWF1MjAwNlh5c1NhbXBsZSgpOwogICAgICBpbml0X0p1bGlhbkRhdGUoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfTWF0cml4MygpOwogICAgICBpbml0X01hdHJpeDQoKTsKICAgICAgaW5pdF9RdWF0ZXJuaW9uKCk7CiAgICAgIGluaXRfVGltZUNvbnN0YW50cygpOwogICAgICBUcmFuc2Zvcm1zID0ge307CiAgICAgIHZlY3RvclByb2R1Y3RMb2NhbEZyYW1lID0gewogICAgICAgIHVwOiB7CiAgICAgICAgICBzb3V0aDogImVhc3QiLAogICAgICAgICAgbm9ydGg6ICJ3ZXN0IiwKICAgICAgICAgIHdlc3Q6ICJzb3V0aCIsCiAgICAgICAgICBlYXN0OiAibm9ydGgiCiAgICAgICAgfSwKICAgICAgICBkb3duOiB7CiAgICAgICAgICBzb3V0aDogIndlc3QiLAogICAgICAgICAgbm9ydGg6ICJlYXN0IiwKICAgICAgICAgIHdlc3Q6ICJub3J0aCIsCiAgICAgICAgICBlYXN0OiAic291dGgiCiAgICAgICAgfSwKICAgICAgICBzb3V0aDogewogICAgICAgICAgdXA6ICJ3ZXN0IiwKICAgICAgICAgIGRvd246ICJlYXN0IiwKICAgICAgICAgIHdlc3Q6ICJkb3duIiwKICAgICAgICAgIGVhc3Q6ICJ1cCIKICAgICAgICB9LAogICAgICAgIG5vcnRoOiB7CiAgICAgICAgICB1cDogImVhc3QiLAogICAgICAgICAgZG93bjogIndlc3QiLAogICAgICAgICAgd2VzdDogInVwIiwKICAgICAgICAgIGVhc3Q6ICJkb3duIgogICAgICAgIH0sCiAgICAgICAgd2VzdDogewogICAgICAgICAgdXA6ICJub3J0aCIsCiAgICAgICAgICBkb3duOiAic291dGgiLAogICAgICAgICAgbm9ydGg6ICJkb3duIiwKICAgICAgICAgIHNvdXRoOiAidXAiCiAgICAgICAgfSwKICAgICAgICBlYXN0OiB7CiAgICAgICAgICB1cDogInNvdXRoIiwKICAgICAgICAgIGRvd246ICJub3J0aCIsCiAgICAgICAgICBub3J0aDogInVwIiwKICAgICAgICAgIHNvdXRoOiAiZG93biIKICAgICAgICB9CiAgICAgIH07CiAgICAgIGRlZ2VuZXJhdGVQb3NpdGlvbkxvY2FsRnJhbWUgPSB7CiAgICAgICAgbm9ydGg6IFstMSwgMCwgMF0sCiAgICAgICAgZWFzdDogWzAsIDEsIDBdLAogICAgICAgIHVwOiBbMCwgMCwgMV0sCiAgICAgICAgc291dGg6IFsxLCAwLCAwXSwKICAgICAgICB3ZXN0OiBbMCwgLTEsIDBdLAogICAgICAgIGRvd246IFswLCAwLCAtMV0KICAgICAgfTsKICAgICAgbG9jYWxGcmFtZVRvRml4ZWRGcmFtZUNhY2hlID0ge307CiAgICAgIHNjcmF0Y2hDYWxjdWxhdGVDYXJ0ZXNpYW4gPSB7CiAgICAgICAgZWFzdDogbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLAogICAgICAgIG5vcnRoOiBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksCiAgICAgICAgdXA6IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwKICAgICAgICB3ZXN0OiBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksCiAgICAgICAgc291dGg6IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwKICAgICAgICBkb3duOiBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCkKICAgICAgfTsKICAgICAgc2NyYXRjaEZpcnN0Q2FydGVzaWFuID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoU2Vjb25kQ2FydGVzaWFuID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoVGhpcmRDYXJ0ZXNpYW4gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIFRyYW5zZm9ybXMubG9jYWxGcmFtZVRvRml4ZWRGcmFtZUdlbmVyYXRvciA9IGZ1bmN0aW9uKGZpcnN0QXhpcywgc2Vjb25kQXhpcykgewogICAgICAgIGlmICghdmVjdG9yUHJvZHVjdExvY2FsRnJhbWUuaGFzT3duUHJvcGVydHkoZmlyc3RBeGlzKSB8fCAhdmVjdG9yUHJvZHVjdExvY2FsRnJhbWVbZmlyc3RBeGlzXS5oYXNPd25Qcm9wZXJ0eShzZWNvbmRBeGlzKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJmaXJzdEF4aXMgYW5kIHNlY29uZEF4aXMgbXVzdCBiZSBlYXN0LCBub3J0aCwgdXAsIHdlc3QsIHNvdXRoIG9yIGRvd24uIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgdGhpcmRBeGlzID0gdmVjdG9yUHJvZHVjdExvY2FsRnJhbWVbZmlyc3RBeGlzXVtzZWNvbmRBeGlzXTsKICAgICAgICBsZXQgcmVzdWx0YXQ7CiAgICAgICAgY29uc3QgaGFzaEF4aXMgPSBmaXJzdEF4aXMgKyBzZWNvbmRBeGlzOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobG9jYWxGcmFtZVRvRml4ZWRGcmFtZUNhY2hlW2hhc2hBeGlzXSkpIHsKICAgICAgICAgIHJlc3VsdGF0ID0gbG9jYWxGcmFtZVRvRml4ZWRGcmFtZUNhY2hlW2hhc2hBeGlzXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0YXQgPSBmdW5jdGlvbihvcmlnaW4sIGVsbGlwc29pZCwgcmVzdWx0KSB7CiAgICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG9yaWdpbikpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3JpZ2luIGlzIHJlcXVpcmVkLiIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKG9yaWdpbiwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTQpKSB7CiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICAgICAgICAgIGRlZ2VuZXJhdGVQb3NpdGlvbkxvY2FsRnJhbWVbZmlyc3RBeGlzXSwKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICBzY3JhdGNoRmlyc3RDYXJ0ZXNpYW4KICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICAgICAgICBkZWdlbmVyYXRlUG9zaXRpb25Mb2NhbEZyYW1lW3NlY29uZEF4aXNdLAogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIHNjcmF0Y2hTZWNvbmRDYXJ0ZXNpYW4KICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICAgICAgICBkZWdlbmVyYXRlUG9zaXRpb25Mb2NhbEZyYW1lW3RoaXJkQXhpc10sCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgc2NyYXRjaFRoaXJkQ2FydGVzaWFuCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihvcmlnaW4ueCwgMCwgTWF0aF9kZWZhdWx0LkVQU0lMT04xNCkgJiYgTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24ob3JpZ2luLnksIDAsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTQpKSB7CiAgICAgICAgICAgICAgY29uc3Qgc2lnbjIgPSBNYXRoX2RlZmF1bHQuc2lnbihvcmlnaW4ueik7CiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICAgICAgICAgIGRlZ2VuZXJhdGVQb3NpdGlvbkxvY2FsRnJhbWVbZmlyc3RBeGlzXSwKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICBzY3JhdGNoRmlyc3RDYXJ0ZXNpYW4KICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIGlmIChmaXJzdEF4aXMgIT09ICJlYXN0IiAmJiBmaXJzdEF4aXMgIT09ICJ3ZXN0IikgewogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgICAgICAgICAgIHNjcmF0Y2hGaXJzdENhcnRlc2lhbiwKICAgICAgICAgICAgICAgICAgc2lnbjIsCiAgICAgICAgICAgICAgICAgIHNjcmF0Y2hGaXJzdENhcnRlc2lhbgogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICAgICAgICAgIGRlZ2VuZXJhdGVQb3NpdGlvbkxvY2FsRnJhbWVbc2Vjb25kQXhpc10sCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgc2NyYXRjaFNlY29uZENhcnRlc2lhbgogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgaWYgKHNlY29uZEF4aXMgIT09ICJlYXN0IiAmJiBzZWNvbmRBeGlzICE9PSAid2VzdCIpIHsKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgICAgICAgICBzY3JhdGNoU2Vjb25kQ2FydGVzaWFuLAogICAgICAgICAgICAgICAgICBzaWduMiwKICAgICAgICAgICAgICAgICAgc2NyYXRjaFNlY29uZENhcnRlc2lhbgogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICAgICAgICAgIGRlZ2VuZXJhdGVQb3NpdGlvbkxvY2FsRnJhbWVbdGhpcmRBeGlzXSwKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICBzY3JhdGNoVGhpcmRDYXJ0ZXNpYW4KICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIGlmICh0aGlyZEF4aXMgIT09ICJlYXN0IiAmJiB0aGlyZEF4aXMgIT09ICJ3ZXN0IikgewogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgICAgICAgICAgIHNjcmF0Y2hUaGlyZENhcnRlc2lhbiwKICAgICAgICAgICAgICAgICAgc2lnbjIsCiAgICAgICAgICAgICAgICAgIHNjcmF0Y2hUaGlyZENhcnRlc2lhbgogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgZWxsaXBzb2lkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NCk7CiAgICAgICAgICAgICAgZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChvcmlnaW4sIHNjcmF0Y2hDYWxjdWxhdGVDYXJ0ZXNpYW4udXApOwogICAgICAgICAgICAgIGNvbnN0IHVwID0gc2NyYXRjaENhbGN1bGF0ZUNhcnRlc2lhbi51cDsKICAgICAgICAgICAgICBjb25zdCBlYXN0ID0gc2NyYXRjaENhbGN1bGF0ZUNhcnRlc2lhbi5lYXN0OwogICAgICAgICAgICAgIGVhc3QueCA9IC1vcmlnaW4ueTsKICAgICAgICAgICAgICBlYXN0LnkgPSBvcmlnaW4ueDsKICAgICAgICAgICAgICBlYXN0LnogPSAwOwogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoZWFzdCwgc2NyYXRjaENhbGN1bGF0ZUNhcnRlc2lhbi5lYXN0KTsKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3ModXAsIGVhc3QsIHNjcmF0Y2hDYWxjdWxhdGVDYXJ0ZXNpYW4ubm9ydGgpOwogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgICAgICAgc2NyYXRjaENhbGN1bGF0ZUNhcnRlc2lhbi51cCwKICAgICAgICAgICAgICAgIC0xLAogICAgICAgICAgICAgICAgc2NyYXRjaENhbGN1bGF0ZUNhcnRlc2lhbi5kb3duCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgICAgICAgIHNjcmF0Y2hDYWxjdWxhdGVDYXJ0ZXNpYW4uZWFzdCwKICAgICAgICAgICAgICAgIC0xLAogICAgICAgICAgICAgICAgc2NyYXRjaENhbGN1bGF0ZUNhcnRlc2lhbi53ZXN0CiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgICAgICAgIHNjcmF0Y2hDYWxjdWxhdGVDYXJ0ZXNpYW4ubm9ydGgsCiAgICAgICAgICAgICAgICAtMSwKICAgICAgICAgICAgICAgIHNjcmF0Y2hDYWxjdWxhdGVDYXJ0ZXNpYW4uc291dGgKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIHNjcmF0Y2hGaXJzdENhcnRlc2lhbiA9IHNjcmF0Y2hDYWxjdWxhdGVDYXJ0ZXNpYW5bZmlyc3RBeGlzXTsKICAgICAgICAgICAgICBzY3JhdGNoU2Vjb25kQ2FydGVzaWFuID0gc2NyYXRjaENhbGN1bGF0ZUNhcnRlc2lhbltzZWNvbmRBeGlzXTsKICAgICAgICAgICAgICBzY3JhdGNoVGhpcmRDYXJ0ZXNpYW4gPSBzY3JhdGNoQ2FsY3VsYXRlQ2FydGVzaWFuW3RoaXJkQXhpc107CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVzdWx0WzBdID0gc2NyYXRjaEZpcnN0Q2FydGVzaWFuLng7CiAgICAgICAgICAgIHJlc3VsdFsxXSA9IHNjcmF0Y2hGaXJzdENhcnRlc2lhbi55OwogICAgICAgICAgICByZXN1bHRbMl0gPSBzY3JhdGNoRmlyc3RDYXJ0ZXNpYW4uejsKICAgICAgICAgICAgcmVzdWx0WzNdID0gMDsKICAgICAgICAgICAgcmVzdWx0WzRdID0gc2NyYXRjaFNlY29uZENhcnRlc2lhbi54OwogICAgICAgICAgICByZXN1bHRbNV0gPSBzY3JhdGNoU2Vjb25kQ2FydGVzaWFuLnk7CiAgICAgICAgICAgIHJlc3VsdFs2XSA9IHNjcmF0Y2hTZWNvbmRDYXJ0ZXNpYW4uejsKICAgICAgICAgICAgcmVzdWx0WzddID0gMDsKICAgICAgICAgICAgcmVzdWx0WzhdID0gc2NyYXRjaFRoaXJkQ2FydGVzaWFuLng7CiAgICAgICAgICAgIHJlc3VsdFs5XSA9IHNjcmF0Y2hUaGlyZENhcnRlc2lhbi55OwogICAgICAgICAgICByZXN1bHRbMTBdID0gc2NyYXRjaFRoaXJkQ2FydGVzaWFuLno7CiAgICAgICAgICAgIHJlc3VsdFsxMV0gPSAwOwogICAgICAgICAgICByZXN1bHRbMTJdID0gb3JpZ2luLng7CiAgICAgICAgICAgIHJlc3VsdFsxM10gPSBvcmlnaW4ueTsKICAgICAgICAgICAgcmVzdWx0WzE0XSA9IG9yaWdpbi56OwogICAgICAgICAgICByZXN1bHRbMTVdID0gMTsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgIH07CiAgICAgICAgICBsb2NhbEZyYW1lVG9GaXhlZEZyYW1lQ2FjaGVbaGFzaEF4aXNdID0gcmVzdWx0YXQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHRhdDsKICAgICAgfTsKICAgICAgVHJhbnNmb3Jtcy5lYXN0Tm9ydGhVcFRvRml4ZWRGcmFtZSA9IFRyYW5zZm9ybXMubG9jYWxGcmFtZVRvRml4ZWRGcmFtZUdlbmVyYXRvcigKICAgICAgICAiZWFzdCIsCiAgICAgICAgIm5vcnRoIgogICAgICApOwogICAgICBUcmFuc2Zvcm1zLm5vcnRoRWFzdERvd25Ub0ZpeGVkRnJhbWUgPSBUcmFuc2Zvcm1zLmxvY2FsRnJhbWVUb0ZpeGVkRnJhbWVHZW5lcmF0b3IoCiAgICAgICAgIm5vcnRoIiwKICAgICAgICAiZWFzdCIKICAgICAgKTsKICAgICAgVHJhbnNmb3Jtcy5ub3J0aFVwRWFzdFRvRml4ZWRGcmFtZSA9IFRyYW5zZm9ybXMubG9jYWxGcmFtZVRvRml4ZWRGcmFtZUdlbmVyYXRvcigKICAgICAgICAibm9ydGgiLAogICAgICAgICJ1cCIKICAgICAgKTsKICAgICAgVHJhbnNmb3Jtcy5ub3J0aFdlc3RVcFRvRml4ZWRGcmFtZSA9IFRyYW5zZm9ybXMubG9jYWxGcmFtZVRvRml4ZWRGcmFtZUdlbmVyYXRvcigKICAgICAgICAibm9ydGgiLAogICAgICAgICJ3ZXN0IgogICAgICApOwogICAgICBzY3JhdGNoSFBSUXVhdGVybmlvbjIgPSBuZXcgUXVhdGVybmlvbl9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hTY2FsZSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoMSwgMSwgMSk7CiAgICAgIHNjcmF0Y2hIUFJNYXRyaXg0ID0gbmV3IE1hdHJpeDRfZGVmYXVsdCgpOwogICAgICBUcmFuc2Zvcm1zLmhlYWRpbmdQaXRjaFJvbGxUb0ZpeGVkRnJhbWUgPSBmdW5jdGlvbihvcmlnaW4sIGhlYWRpbmdQaXRjaFJvbGwsIGVsbGlwc29pZCwgZml4ZWRGcmFtZVRyYW5zZm9ybSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJIZWFkaW5nUGl0Y2hSb2xsIiwgaGVhZGluZ1BpdGNoUm9sbCk7CiAgICAgICAgZml4ZWRGcmFtZVRyYW5zZm9ybSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICAgICAgZml4ZWRGcmFtZVRyYW5zZm9ybSwKICAgICAgICAgIFRyYW5zZm9ybXMuZWFzdE5vcnRoVXBUb0ZpeGVkRnJhbWUKICAgICAgICApOwogICAgICAgIGNvbnN0IGhwclF1YXRlcm5pb24gPSBRdWF0ZXJuaW9uX2RlZmF1bHQuZnJvbUhlYWRpbmdQaXRjaFJvbGwoCiAgICAgICAgICBoZWFkaW5nUGl0Y2hSb2xsLAogICAgICAgICAgc2NyYXRjaEhQUlF1YXRlcm5pb24yCiAgICAgICAgKTsKICAgICAgICBjb25zdCBocHJNYXRyaXggPSBNYXRyaXg0X2RlZmF1bHQuZnJvbVRyYW5zbGF0aW9uUXVhdGVybmlvblJvdGF0aW9uU2NhbGUoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywKICAgICAgICAgIGhwclF1YXRlcm5pb24sCiAgICAgICAgICBzY3JhdGNoU2NhbGUsCiAgICAgICAgICBzY3JhdGNoSFBSTWF0cml4NAogICAgICAgICk7CiAgICAgICAgcmVzdWx0ID0gZml4ZWRGcmFtZVRyYW5zZm9ybShvcmlnaW4sIGVsbGlwc29pZCwgcmVzdWx0KTsKICAgICAgICByZXR1cm4gTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5KHJlc3VsdCwgaHByTWF0cml4LCByZXN1bHQpOwogICAgICB9OwogICAgICBzY3JhdGNoRU5VTWF0cml4NCA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEhQUk1hdHJpeDMgPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIFRyYW5zZm9ybXMuaGVhZGluZ1BpdGNoUm9sbFF1YXRlcm5pb24gPSBmdW5jdGlvbihvcmlnaW4sIGhlYWRpbmdQaXRjaFJvbGwsIGVsbGlwc29pZCwgZml4ZWRGcmFtZVRyYW5zZm9ybSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJIZWFkaW5nUGl0Y2hSb2xsIiwgaGVhZGluZ1BpdGNoUm9sbCk7CiAgICAgICAgY29uc3QgdHJhbnNmb3JtMiA9IFRyYW5zZm9ybXMuaGVhZGluZ1BpdGNoUm9sbFRvRml4ZWRGcmFtZSgKICAgICAgICAgIG9yaWdpbiwKICAgICAgICAgIGhlYWRpbmdQaXRjaFJvbGwsCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBmaXhlZEZyYW1lVHJhbnNmb3JtLAogICAgICAgICAgc2NyYXRjaEVOVU1hdHJpeDQKICAgICAgICApOwogICAgICAgIGNvbnN0IHJvdGF0aW9uID0gTWF0cml4NF9kZWZhdWx0LmdldE1hdHJpeDModHJhbnNmb3JtMiwgc2NyYXRjaEhQUk1hdHJpeDMpOwogICAgICAgIHJldHVybiBRdWF0ZXJuaW9uX2RlZmF1bHQuZnJvbVJvdGF0aW9uTWF0cml4KHJvdGF0aW9uLCByZXN1bHQpOwogICAgICB9OwogICAgICBub1NjYWxlID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgxLCAxLCAxKTsKICAgICAgaHByQ2VudGVyU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZmZTY3JhdGNoID0gbmV3IE1hdHJpeDRfZGVmYXVsdCgpOwogICAgICBocHJUcmFuc2Zvcm1TY3JhdGNoID0gbmV3IE1hdHJpeDRfZGVmYXVsdCgpOwogICAgICBocHJSb3RhdGlvblNjcmF0Y2ggPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIGhwclF1YXRlcm5pb25TY3JhdGNoID0gbmV3IFF1YXRlcm5pb25fZGVmYXVsdCgpOwogICAgICBUcmFuc2Zvcm1zLmZpeGVkRnJhbWVUb0hlYWRpbmdQaXRjaFJvbGwgPSBmdW5jdGlvbih0cmFuc2Zvcm0yLCBlbGxpcHNvaWQsIGZpeGVkRnJhbWVUcmFuc2Zvcm0sIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidHJhbnNmb3JtIiwgdHJhbnNmb3JtMik7CiAgICAgICAgZWxsaXBzb2lkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NCk7CiAgICAgICAgZml4ZWRGcmFtZVRyYW5zZm9ybSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICAgICAgZml4ZWRGcmFtZVRyYW5zZm9ybSwKICAgICAgICAgIFRyYW5zZm9ybXMuZWFzdE5vcnRoVXBUb0ZpeGVkRnJhbWUKICAgICAgICApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBIZWFkaW5nUGl0Y2hSb2xsX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgY2VudGVyID0gTWF0cml4NF9kZWZhdWx0LmdldFRyYW5zbGF0aW9uKHRyYW5zZm9ybTIsIGhwckNlbnRlclNjcmF0Y2gpOwogICAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzKGNlbnRlciwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pKSB7CiAgICAgICAgICByZXN1bHQuaGVhZGluZyA9IDA7CiAgICAgICAgICByZXN1bHQucGl0Y2ggPSAwOwogICAgICAgICAgcmVzdWx0LnJvbGwgPSAwOwogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgbGV0IHRvRml4ZWRGcmFtZSA9IE1hdHJpeDRfZGVmYXVsdC5pbnZlcnNlVHJhbnNmb3JtYXRpb24oCiAgICAgICAgICBmaXhlZEZyYW1lVHJhbnNmb3JtKGNlbnRlciwgZWxsaXBzb2lkLCBmZlNjcmF0Y2gpLAogICAgICAgICAgZmZTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBsZXQgdHJhbnNmb3JtQ29weSA9IE1hdHJpeDRfZGVmYXVsdC5zZXRTY2FsZSh0cmFuc2Zvcm0yLCBub1NjYWxlLCBocHJUcmFuc2Zvcm1TY3JhdGNoKTsKICAgICAgICB0cmFuc2Zvcm1Db3B5ID0gTWF0cml4NF9kZWZhdWx0LnNldFRyYW5zbGF0aW9uKAogICAgICAgICAgdHJhbnNmb3JtQ29weSwKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLAogICAgICAgICAgdHJhbnNmb3JtQ29weQogICAgICAgICk7CiAgICAgICAgdG9GaXhlZEZyYW1lID0gTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5KHRvRml4ZWRGcmFtZSwgdHJhbnNmb3JtQ29weSwgdG9GaXhlZEZyYW1lKTsKICAgICAgICBsZXQgcXVhdGVybmlvblJvdGF0aW9uID0gUXVhdGVybmlvbl9kZWZhdWx0LmZyb21Sb3RhdGlvbk1hdHJpeCgKICAgICAgICAgIE1hdHJpeDRfZGVmYXVsdC5nZXRNYXRyaXgzKHRvRml4ZWRGcmFtZSwgaHByUm90YXRpb25TY3JhdGNoKSwKICAgICAgICAgIGhwclF1YXRlcm5pb25TY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBxdWF0ZXJuaW9uUm90YXRpb24gPSBRdWF0ZXJuaW9uX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgcXVhdGVybmlvblJvdGF0aW9uLAogICAgICAgICAgcXVhdGVybmlvblJvdGF0aW9uCiAgICAgICAgKTsKICAgICAgICByZXR1cm4gSGVhZGluZ1BpdGNoUm9sbF9kZWZhdWx0LmZyb21RdWF0ZXJuaW9uKHF1YXRlcm5pb25Sb3RhdGlvbiwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgZ21zdENvbnN0YW50MCA9IDYgKiAzNjAwICsgNDEgKiA2MCArIDUwLjU0ODQxOwogICAgICBnbXN0Q29uc3RhbnQxID0gODY0MDE4NDgxMjg2NmUtNjsKICAgICAgZ21zdENvbnN0YW50MiA9IDAuMDkzMTA0OwogICAgICBnbXN0Q29uc3RhbnQzID0gLTYyZS03OwogICAgICByYXRlQ29lZiA9IDExNzcyNzU4Mzg0NjY4ZS0zMjsKICAgICAgd2dzODRXUlByZWNlc3NpbmcgPSA3MjkyMTE1ODU1M2UtMTU7CiAgICAgIHR3b1BpT3ZlclNlY29uZHNJbkRheSA9IE1hdGhfZGVmYXVsdC5UV09fUEkgLyA4NjQwMDsKICAgICAgZGF0ZUluVXRjID0gbmV3IEp1bGlhbkRhdGVfZGVmYXVsdCgpOwogICAgICBUcmFuc2Zvcm1zLmNvbXB1dGVUZW1lVG9Qc2V1ZG9GaXhlZE1hdHJpeCA9IGZ1bmN0aW9uKGRhdGUsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGRhdGUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZGF0ZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgZGF0ZUluVXRjID0gSnVsaWFuRGF0ZV9kZWZhdWx0LmFkZFNlY29uZHMoCiAgICAgICAgICBkYXRlLAogICAgICAgICAgLUp1bGlhbkRhdGVfZGVmYXVsdC5jb21wdXRlVGFpTWludXNVdGMoZGF0ZSksCiAgICAgICAgICBkYXRlSW5VdGMKICAgICAgICApOwogICAgICAgIGNvbnN0IHV0Y0RheU51bWJlciA9IGRhdGVJblV0Yy5kYXlOdW1iZXI7CiAgICAgICAgY29uc3QgdXRjU2Vjb25kc0ludG9EYXkgPSBkYXRlSW5VdGMuc2Vjb25kc09mRGF5OwogICAgICAgIGxldCB0OwogICAgICAgIGNvbnN0IGRpZmZEYXlzID0gdXRjRGF5TnVtYmVyIC0gMjQ1MTU0NTsKICAgICAgICBpZiAodXRjU2Vjb25kc0ludG9EYXkgPj0gNDMyMDApIHsKICAgICAgICAgIHQgPSAoZGlmZkRheXMgKyAwLjUpIC8gVGltZUNvbnN0YW50c19kZWZhdWx0LkRBWVNfUEVSX0pVTElBTl9DRU5UVVJZOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0ID0gKGRpZmZEYXlzIC0gMC41KSAvIFRpbWVDb25zdGFudHNfZGVmYXVsdC5EQVlTX1BFUl9KVUxJQU5fQ0VOVFVSWTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZ21zdDAgPSBnbXN0Q29uc3RhbnQwICsgdCAqIChnbXN0Q29uc3RhbnQxICsgdCAqIChnbXN0Q29uc3RhbnQyICsgdCAqIGdtc3RDb25zdGFudDMpKTsKICAgICAgICBjb25zdCBhbmdsZSA9IGdtc3QwICogdHdvUGlPdmVyU2Vjb25kc0luRGF5ICUgTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICBjb25zdCByYXRpbyA9IHdnczg0V1JQcmVjZXNzaW5nICsgcmF0ZUNvZWYgKiAodXRjRGF5TnVtYmVyIC0gMjQ1MTU0NTVlLTEpOwogICAgICAgIGNvbnN0IHNlY29uZHNTaW5jZU1pZG5pZ2h0ID0gKHV0Y1NlY29uZHNJbnRvRGF5ICsgVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX0RBWSAqIDAuNSkgJSBUaW1lQ29uc3RhbnRzX2RlZmF1bHQuU0VDT05EU19QRVJfREFZOwogICAgICAgIGNvbnN0IGdoYSA9IGFuZ2xlICsgcmF0aW8gKiBzZWNvbmRzU2luY2VNaWRuaWdodDsKICAgICAgICBjb25zdCBjb3NHaGEgPSBNYXRoLmNvcyhnaGEpOwogICAgICAgIGNvbnN0IHNpbkdoYSA9IE1hdGguc2luKGdoYSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgzX2RlZmF1bHQoCiAgICAgICAgICAgIGNvc0doYSwKICAgICAgICAgICAgc2luR2hhLAogICAgICAgICAgICAwLAogICAgICAgICAgICAtc2luR2hhLAogICAgICAgICAgICBjb3NHaGEsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDEKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IGNvc0doYTsKICAgICAgICByZXN1bHRbMV0gPSAtc2luR2hhOwogICAgICAgIHJlc3VsdFsyXSA9IDA7CiAgICAgICAgcmVzdWx0WzNdID0gc2luR2hhOwogICAgICAgIHJlc3VsdFs0XSA9IGNvc0doYTsKICAgICAgICByZXN1bHRbNV0gPSAwOwogICAgICAgIHJlc3VsdFs2XSA9IDA7CiAgICAgICAgcmVzdWx0WzddID0gMDsKICAgICAgICByZXN1bHRbOF0gPSAxOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFRyYW5zZm9ybXMuaWF1MjAwNlh5c0RhdGEgPSBuZXcgSWF1MjAwNlh5c0RhdGFfZGVmYXVsdCgpOwogICAgICBUcmFuc2Zvcm1zLmVhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzID0gRWFydGhPcmllbnRhdGlvblBhcmFtZXRlcnNfZGVmYXVsdC5OT05FOwogICAgICB0dE1pbnVzVGFpID0gMzIuMTg0OwogICAgICBqMjAwMHR0RGF5cyA9IDI0NTE1NDU7CiAgICAgIFRyYW5zZm9ybXMucHJlbG9hZEljcmZGaXhlZCA9IGZ1bmN0aW9uKHRpbWVJbnRlcnZhbCkgewogICAgICAgIGNvbnN0IHN0YXJ0RGF5VFQgPSB0aW1lSW50ZXJ2YWwuc3RhcnQuZGF5TnVtYmVyOwogICAgICAgIGNvbnN0IHN0YXJ0U2Vjb25kVFQgPSB0aW1lSW50ZXJ2YWwuc3RhcnQuc2Vjb25kc09mRGF5ICsgdHRNaW51c1RhaTsKICAgICAgICBjb25zdCBzdG9wRGF5VFQgPSB0aW1lSW50ZXJ2YWwuc3RvcC5kYXlOdW1iZXI7CiAgICAgICAgY29uc3Qgc3RvcFNlY29uZFRUID0gdGltZUludGVydmFsLnN0b3Auc2Vjb25kc09mRGF5ICsgdHRNaW51c1RhaTsKICAgICAgICByZXR1cm4gVHJhbnNmb3Jtcy5pYXUyMDA2WHlzRGF0YS5wcmVsb2FkKAogICAgICAgICAgc3RhcnREYXlUVCwKICAgICAgICAgIHN0YXJ0U2Vjb25kVFQsCiAgICAgICAgICBzdG9wRGF5VFQsCiAgICAgICAgICBzdG9wU2Vjb25kVFQKICAgICAgICApOwogICAgICB9OwogICAgICBUcmFuc2Zvcm1zLmNvbXB1dGVJY3JmVG9GaXhlZE1hdHJpeCA9IGZ1bmN0aW9uKGRhdGUsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGRhdGUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZGF0ZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBmaXhlZFRvSWNyZk10eCA9IFRyYW5zZm9ybXMuY29tcHV0ZUZpeGVkVG9JY3JmTWF0cml4KGRhdGUsIHJlc3VsdCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZml4ZWRUb0ljcmZNdHgpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICByZXR1cm4gTWF0cml4M19kZWZhdWx0LnRyYW5zcG9zZShmaXhlZFRvSWNyZk10eCwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgeHlzU2NyYXRjaCA9IG5ldyBJYXUyMDA2WHlzU2FtcGxlX2RlZmF1bHQoMCwgMCwgMCk7CiAgICAgIGVvcFNjcmF0Y2ggPSBuZXcgRWFydGhPcmllbnRhdGlvblBhcmFtZXRlcnNTYW1wbGVfZGVmYXVsdCgKICAgICAgICAwLAogICAgICAgIDAsCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIDAsCiAgICAgICAgMAogICAgICApOwogICAgICByb3RhdGlvbjFTY3JhdGNoID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICByb3RhdGlvbjJTY3JhdGNoID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICBUcmFuc2Zvcm1zLmNvbXB1dGVGaXhlZFRvSWNyZk1hdHJpeCA9IGZ1bmN0aW9uKGRhdGUsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGRhdGUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZGF0ZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBlb3AgPSBUcmFuc2Zvcm1zLmVhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzLmNvbXB1dGUoZGF0ZSwgZW9wU2NyYXRjaCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZW9wKSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgY29uc3QgZGF5VFQgPSBkYXRlLmRheU51bWJlcjsKICAgICAgICBjb25zdCBzZWNvbmRUVCA9IGRhdGUuc2Vjb25kc09mRGF5ICsgdHRNaW51c1RhaTsKICAgICAgICBjb25zdCB4eXMgPSBUcmFuc2Zvcm1zLmlhdTIwMDZYeXNEYXRhLmNvbXB1dGVYeXNSYWRpYW5zKAogICAgICAgICAgZGF5VFQsCiAgICAgICAgICBzZWNvbmRUVCwKICAgICAgICAgIHh5c1NjcmF0Y2gKICAgICAgICApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHh5cykpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHggPSB4eXMueCArIGVvcC54UG9sZU9mZnNldDsKICAgICAgICBjb25zdCB5ID0geHlzLnkgKyBlb3AueVBvbGVPZmZzZXQ7CiAgICAgICAgY29uc3QgYTMgPSAxIC8gKDEgKyBNYXRoLnNxcnQoMSAtIHggKiB4IC0geSAqIHkpKTsKICAgICAgICBjb25zdCByb3RhdGlvbjEgPSByb3RhdGlvbjFTY3JhdGNoOwogICAgICAgIHJvdGF0aW9uMVswXSA9IDEgLSBhMyAqIHggKiB4OwogICAgICAgIHJvdGF0aW9uMVszXSA9IC1hMyAqIHggKiB5OwogICAgICAgIHJvdGF0aW9uMVs2XSA9IHg7CiAgICAgICAgcm90YXRpb24xWzFdID0gLWEzICogeCAqIHk7CiAgICAgICAgcm90YXRpb24xWzRdID0gMSAtIGEzICogeSAqIHk7CiAgICAgICAgcm90YXRpb24xWzddID0geTsKICAgICAgICByb3RhdGlvbjFbMl0gPSAteDsKICAgICAgICByb3RhdGlvbjFbNV0gPSAteTsKICAgICAgICByb3RhdGlvbjFbOF0gPSAxIC0gYTMgKiAoeCAqIHggKyB5ICogeSk7CiAgICAgICAgY29uc3Qgcm90YXRpb24yID0gTWF0cml4M19kZWZhdWx0LmZyb21Sb3RhdGlvblooLXh5cy5zLCByb3RhdGlvbjJTY3JhdGNoKTsKICAgICAgICBjb25zdCBtYXRyaXhRID0gTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5KHJvdGF0aW9uMSwgcm90YXRpb24yLCByb3RhdGlvbjFTY3JhdGNoKTsKICAgICAgICBjb25zdCBkYXRlVXQxZGF5ID0gZGF0ZS5kYXlOdW1iZXI7CiAgICAgICAgY29uc3QgZGF0ZVV0MXNlYyA9IGRhdGUuc2Vjb25kc09mRGF5IC0gSnVsaWFuRGF0ZV9kZWZhdWx0LmNvbXB1dGVUYWlNaW51c1V0YyhkYXRlKSArIGVvcC51dDFNaW51c1V0YzsKICAgICAgICBjb25zdCBkYXlzU2luY2VKMjAwMCA9IGRhdGVVdDFkYXkgLSAyNDUxNTQ1OwogICAgICAgIGNvbnN0IGZyYWN0aW9uT2ZEYXkgPSBkYXRlVXQxc2VjIC8gVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX0RBWTsKICAgICAgICBsZXQgZXJhID0gMC43NzkwNTcyNzMyNjQgKyBmcmFjdGlvbk9mRGF5ICsgMC4wMDI3Mzc4MTE5MTEzNTQ0OCAqIChkYXlzU2luY2VKMjAwMCArIGZyYWN0aW9uT2ZEYXkpOwogICAgICAgIGVyYSA9IGVyYSAlIDEgKiBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgIGNvbnN0IGVhcnRoUm90YXRpb24gPSBNYXRyaXgzX2RlZmF1bHQuZnJvbVJvdGF0aW9uWihlcmEsIHJvdGF0aW9uMlNjcmF0Y2gpOwogICAgICAgIGNvbnN0IHBmVG9JY3JmID0gTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5KG1hdHJpeFEsIGVhcnRoUm90YXRpb24sIHJvdGF0aW9uMVNjcmF0Y2gpOwogICAgICAgIGNvbnN0IGNvc3hwID0gTWF0aC5jb3MoZW9wLnhQb2xlV2FuZGVyKTsKICAgICAgICBjb25zdCBjb3N5cCA9IE1hdGguY29zKGVvcC55UG9sZVdhbmRlcik7CiAgICAgICAgY29uc3Qgc2lueHAgPSBNYXRoLnNpbihlb3AueFBvbGVXYW5kZXIpOwogICAgICAgIGNvbnN0IHNpbnlwID0gTWF0aC5zaW4oZW9wLnlQb2xlV2FuZGVyKTsKICAgICAgICBsZXQgdHR0ID0gZGF5VFQgLSBqMjAwMHR0RGF5cyArIHNlY29uZFRUIC8gVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX0RBWTsKICAgICAgICB0dHQgLz0gMzY1MjU7CiAgICAgICAgY29uc3Qgc3AgPSAtNDdlLTYgKiB0dHQgKiBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFIC8gMzYwMDsKICAgICAgICBjb25zdCBjb3NzcCA9IE1hdGguY29zKHNwKTsKICAgICAgICBjb25zdCBzaW5zcCA9IE1hdGguc2luKHNwKTsKICAgICAgICBjb25zdCBmVG9QZk10eCA9IHJvdGF0aW9uMlNjcmF0Y2g7CiAgICAgICAgZlRvUGZNdHhbMF0gPSBjb3N4cCAqIGNvc3NwOwogICAgICAgIGZUb1BmTXR4WzFdID0gY29zeHAgKiBzaW5zcDsKICAgICAgICBmVG9QZk10eFsyXSA9IHNpbnhwOwogICAgICAgIGZUb1BmTXR4WzNdID0gLWNvc3lwICogc2luc3AgKyBzaW55cCAqIHNpbnhwICogY29zc3A7CiAgICAgICAgZlRvUGZNdHhbNF0gPSBjb3N5cCAqIGNvc3NwICsgc2lueXAgKiBzaW54cCAqIHNpbnNwOwogICAgICAgIGZUb1BmTXR4WzVdID0gLXNpbnlwICogY29zeHA7CiAgICAgICAgZlRvUGZNdHhbNl0gPSAtc2lueXAgKiBzaW5zcCAtIGNvc3lwICogc2lueHAgKiBjb3NzcDsKICAgICAgICBmVG9QZk10eFs3XSA9IHNpbnlwICogY29zc3AgLSBjb3N5cCAqIHNpbnhwICogc2luc3A7CiAgICAgICAgZlRvUGZNdHhbOF0gPSBjb3N5cCAqIGNvc3hwOwogICAgICAgIHJldHVybiBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHkocGZUb0ljcmYsIGZUb1BmTXR4LCByZXN1bHQpOwogICAgICB9OwogICAgICBwb2ludFRvV2luZG93Q29vcmRpbmF0ZXNUZW1wID0gbmV3IENhcnRlc2lhbjRfZGVmYXVsdCgpOwogICAgICBUcmFuc2Zvcm1zLnBvaW50VG9XaW5kb3dDb29yZGluYXRlcyA9IGZ1bmN0aW9uKG1vZGVsVmlld1Byb2plY3Rpb25NYXRyaXgsIHZpZXdwb3J0VHJhbnNmb3JtYXRpb24sIHBvaW50LCByZXN1bHQpIHsKICAgICAgICByZXN1bHQgPSBUcmFuc2Zvcm1zLnBvaW50VG9HTFdpbmRvd0Nvb3JkaW5hdGVzKAogICAgICAgICAgbW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeCwKICAgICAgICAgIHZpZXdwb3J0VHJhbnNmb3JtYXRpb24sCiAgICAgICAgICBwb2ludCwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgICAgcmVzdWx0LnkgPSAyICogdmlld3BvcnRUcmFuc2Zvcm1hdGlvbls1XSAtIHJlc3VsdC55OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFRyYW5zZm9ybXMucG9pbnRUb0dMV2luZG93Q29vcmRpbmF0ZXMgPSBmdW5jdGlvbihtb2RlbFZpZXdQcm9qZWN0aW9uTWF0cml4LCB2aWV3cG9ydFRyYW5zZm9ybWF0aW9uLCBwb2ludCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQobW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJtb2RlbFZpZXdQcm9qZWN0aW9uTWF0cml4IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh2aWV3cG9ydFRyYW5zZm9ybWF0aW9uKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInZpZXdwb3J0VHJhbnNmb3JtYXRpb24gaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBvaW50KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInBvaW50IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHRtcDIgPSBwb2ludFRvV2luZG93Q29vcmRpbmF0ZXNUZW1wOwogICAgICAgIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKAogICAgICAgICAgbW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeCwKICAgICAgICAgIENhcnRlc2lhbjRfZGVmYXVsdC5mcm9tRWxlbWVudHMocG9pbnQueCwgcG9pbnQueSwgcG9pbnQueiwgMSwgdG1wMiksCiAgICAgICAgICB0bXAyCiAgICAgICAgKTsKICAgICAgICBDYXJ0ZXNpYW40X2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcih0bXAyLCAxIC8gdG1wMi53LCB0bXAyKTsKICAgICAgICBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVZlY3Rvcih2aWV3cG9ydFRyYW5zZm9ybWF0aW9uLCB0bXAyLCB0bXAyKTsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuMl9kZWZhdWx0LmZyb21DYXJ0ZXNpYW40KHRtcDIsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIG5vcm1hbFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHJpZ2h0U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgdXBTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBUcmFuc2Zvcm1zLnJvdGF0aW9uTWF0cml4RnJvbVBvc2l0aW9uVmVsb2NpdHkgPSBmdW5jdGlvbihwb3NpdGlvbiwgdmVsb2NpdHksIGVsbGlwc29pZCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb24pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicG9zaXRpb24gaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHZlbG9jaXR5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInZlbG9jaXR5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBub3JtYWwyID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NCkuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKAogICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICBub3JtYWxTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBsZXQgcmlnaHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3ModmVsb2NpdHksIG5vcm1hbDIsIHJpZ2h0U2NyYXRjaCk7CiAgICAgICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKHJpZ2h0LCBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgTWF0aF9kZWZhdWx0LkVQU0lMT042KSkgewogICAgICAgICAgcmlnaHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWCwgcmlnaHQpOwogICAgICAgIH0KICAgICAgICBjb25zdCB1cCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhyaWdodCwgdmVsb2NpdHksIHVwU2NyYXRjaCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSh1cCwgdXApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyh2ZWxvY2l0eSwgdXAsIHJpZ2h0KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKHJpZ2h0LCByaWdodCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShyaWdodCwgcmlnaHQpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gdmVsb2NpdHkueDsKICAgICAgICByZXN1bHRbMV0gPSB2ZWxvY2l0eS55OwogICAgICAgIHJlc3VsdFsyXSA9IHZlbG9jaXR5Lno7CiAgICAgICAgcmVzdWx0WzNdID0gcmlnaHQueDsKICAgICAgICByZXN1bHRbNF0gPSByaWdodC55OwogICAgICAgIHJlc3VsdFs1XSA9IHJpZ2h0Lno7CiAgICAgICAgcmVzdWx0WzZdID0gdXAueDsKICAgICAgICByZXN1bHRbN10gPSB1cC55OwogICAgICAgIHJlc3VsdFs4XSA9IHVwLno7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc3dpenpsZU1hdHJpeCA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIDEsCiAgICAgICAgMCwKICAgICAgICAxLAogICAgICAgIDAsCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIDAsCiAgICAgICAgMSwKICAgICAgICAwLAogICAgICAgIDAsCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIDAsCiAgICAgICAgMQogICAgICApOwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zUHJvamVjdGlvbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENlbnRlciA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFJvdGF0aW9uID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoRnJvbUVOVSA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFRvRU5VID0gbmV3IE1hdHJpeDRfZGVmYXVsdCgpOwogICAgICBUcmFuc2Zvcm1zLmJhc2lzVG8yRCA9IGZ1bmN0aW9uKHByb2plY3Rpb24sIG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocHJvamVjdGlvbikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwcm9qZWN0aW9uIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChtYXRyaXgpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibWF0cml4IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmVzdWx0IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBydGNDZW50ZXIgPSBNYXRyaXg0X2RlZmF1bHQuZ2V0VHJhbnNsYXRpb24obWF0cml4LCBzY3JhdGNoQ2VudGVyKTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBwcm9qZWN0aW9uLmVsbGlwc29pZDsKICAgICAgICBjb25zdCBjYXJ0b2dyYXBoaWMyID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKAogICAgICAgICAgcnRjQ2VudGVyLAogICAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYwogICAgICAgICk7CiAgICAgICAgY29uc3QgcHJvamVjdGVkUG9zaXRpb24gPSBwcm9qZWN0aW9uLnByb2plY3QoCiAgICAgICAgICBjYXJ0b2dyYXBoaWMyLAogICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjNQcm9qZWN0aW9uCiAgICAgICAgKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUVsZW1lbnRzKAogICAgICAgICAgcHJvamVjdGVkUG9zaXRpb24ueiwKICAgICAgICAgIHByb2plY3RlZFBvc2l0aW9uLngsCiAgICAgICAgICBwcm9qZWN0ZWRQb3NpdGlvbi55LAogICAgICAgICAgcHJvamVjdGVkUG9zaXRpb24KICAgICAgICApOwogICAgICAgIGNvbnN0IGZyb21FTlUgPSBUcmFuc2Zvcm1zLmVhc3ROb3J0aFVwVG9GaXhlZEZyYW1lKAogICAgICAgICAgcnRjQ2VudGVyLAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgc2NyYXRjaEZyb21FTlUKICAgICAgICApOwogICAgICAgIGNvbnN0IHRvRU5VID0gTWF0cml4NF9kZWZhdWx0LmludmVyc2VUcmFuc2Zvcm1hdGlvbihmcm9tRU5VLCBzY3JhdGNoVG9FTlUpOwogICAgICAgIGNvbnN0IHJvdGF0aW9uID0gTWF0cml4NF9kZWZhdWx0LmdldE1hdHJpeDMobWF0cml4LCBzY3JhdGNoUm90YXRpb24pOwogICAgICAgIGNvbnN0IGxvY2FsID0gTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlNYXRyaXgzKHRvRU5VLCByb3RhdGlvbiwgcmVzdWx0KTsKICAgICAgICBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHkoc3dpenpsZU1hdHJpeCwgbG9jYWwsIHJlc3VsdCk7CiAgICAgICAgTWF0cml4NF9kZWZhdWx0LnNldFRyYW5zbGF0aW9uKHJlc3VsdCwgcHJvamVjdGVkUG9zaXRpb24sIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgVHJhbnNmb3Jtcy53Z3M4NFRvMkRNb2RlbE1hdHJpeCA9IGZ1bmN0aW9uKHByb2plY3Rpb24sIGNlbnRlciwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocHJvamVjdGlvbikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwcm9qZWN0aW9uIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChjZW50ZXIpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiY2VudGVyIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmVzdWx0IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBwcm9qZWN0aW9uLmVsbGlwc29pZDsKICAgICAgICBjb25zdCBmcm9tRU5VID0gVHJhbnNmb3Jtcy5lYXN0Tm9ydGhVcFRvRml4ZWRGcmFtZSgKICAgICAgICAgIGNlbnRlciwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHNjcmF0Y2hGcm9tRU5VCiAgICAgICAgKTsKICAgICAgICBjb25zdCB0b0VOVSA9IE1hdHJpeDRfZGVmYXVsdC5pbnZlcnNlVHJhbnNmb3JtYXRpb24oZnJvbUVOVSwgc2NyYXRjaFRvRU5VKTsKICAgICAgICBjb25zdCBjYXJ0b2dyYXBoaWMyID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKAogICAgICAgICAgY2VudGVyLAogICAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYwogICAgICAgICk7CiAgICAgICAgY29uc3QgcHJvamVjdGVkUG9zaXRpb24gPSBwcm9qZWN0aW9uLnByb2plY3QoCiAgICAgICAgICBjYXJ0b2dyYXBoaWMyLAogICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjNQcm9qZWN0aW9uCiAgICAgICAgKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUVsZW1lbnRzKAogICAgICAgICAgcHJvamVjdGVkUG9zaXRpb24ueiwKICAgICAgICAgIHByb2plY3RlZFBvc2l0aW9uLngsCiAgICAgICAgICBwcm9qZWN0ZWRQb3NpdGlvbi55LAogICAgICAgICAgcHJvamVjdGVkUG9zaXRpb24KICAgICAgICApOwogICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uMiA9IE1hdHJpeDRfZGVmYXVsdC5mcm9tVHJhbnNsYXRpb24oCiAgICAgICAgICBwcm9qZWN0ZWRQb3NpdGlvbiwKICAgICAgICAgIHNjcmF0Y2hGcm9tRU5VCiAgICAgICAgKTsKICAgICAgICBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHkoc3dpenpsZU1hdHJpeCwgdG9FTlUsIHJlc3VsdCk7CiAgICAgICAgTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5KHRyYW5zbGF0aW9uMiwgcmVzdWx0LCByZXN1bHQpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFRyYW5zZm9ybXNfZGVmYXVsdCA9IFRyYW5zZm9ybXM7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9HZW9tZXRyeS5qcwogIGZ1bmN0aW9uIEdlb21ldHJ5KG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJvcHRpb25zLmF0dHJpYnV0ZXMiLCBvcHRpb25zLmF0dHJpYnV0ZXMpOwogICAgdGhpcy5hdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzOwogICAgdGhpcy5pbmRpY2VzID0gb3B0aW9ucy5pbmRpY2VzOwogICAgdGhpcy5wcmltaXRpdmVUeXBlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgIG9wdGlvbnMucHJpbWl0aXZlVHlwZSwKICAgICAgUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlRSSUFOR0xFUwogICAgKTsKICAgIHRoaXMuYm91bmRpbmdTcGhlcmUgPSBvcHRpb25zLmJvdW5kaW5nU3BoZXJlOwogICAgdGhpcy5nZW9tZXRyeVR5cGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmdlb21ldHJ5VHlwZSwgR2VvbWV0cnlUeXBlX2RlZmF1bHQuTk9ORSk7CiAgICB0aGlzLmJvdW5kaW5nU3BoZXJlQ1YgPSBvcHRpb25zLmJvdW5kaW5nU3BoZXJlQ1Y7CiAgICB0aGlzLm9mZnNldEF0dHJpYnV0ZSA9IG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlOwogIH0KICB2YXIgcmVjdGFuZ2xlQ2VudGVyU2NyYXRjaCwgZW51Q2VudGVyU2NyYXRjaCwgZml4ZWRGcmFtZVRvRW51U2NyYXRjaCwgYm91bmRpbmdSZWN0YW5nbGVQb2ludHNDYXJ0b2dyYXBoaWNTY3JhdGNoLCBib3VuZGluZ1JlY3RhbmdsZVBvaW50c0VudVNjcmF0Y2gsIHBvaW50czJEU2NyYXRjaCwgcG9pbnRFbnVTY3JhdGNoLCBlbnVSb3RhdGlvblNjcmF0Y2gsIGVudVJvdGF0aW9uTWF0cml4U2NyYXRjaCwgcm90YXRpb24yRFNjcmF0Y2gsIEdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfR2VvbWV0cnlUeXBlKCk7CiAgICAgIGluaXRfTWF0cml4MigpOwogICAgICBpbml0X01hdHJpeDMoKTsKICAgICAgaW5pdF9NYXRyaXg0KCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBpbml0X1F1YXRlcm5pb24oKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgaW5pdF9UcmFuc2Zvcm1zKCk7CiAgICAgIEdlb21ldHJ5LmNvbXB1dGVOdW1iZXJPZlZlcnRpY2VzID0gZnVuY3Rpb24oZ2VvbWV0cnkpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImdlb21ldHJ5IiwgZ2VvbWV0cnkpOwogICAgICAgIGxldCBudW1iZXJPZlZlcnRpY2VzID0gLTE7CiAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBnZW9tZXRyeS5hdHRyaWJ1dGVzKSB7CiAgICAgICAgICBpZiAoZ2VvbWV0cnkuYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkgJiYgZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmF0dHJpYnV0ZXNbcHJvcGVydHldKSAmJiBkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkuYXR0cmlidXRlc1twcm9wZXJ0eV0udmFsdWVzKSkgewogICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzW3Byb3BlcnR5XTsKICAgICAgICAgICAgY29uc3QgbnVtID0gYXR0cmlidXRlLnZhbHVlcy5sZW5ndGggLyBhdHRyaWJ1dGUuY29tcG9uZW50c1BlckF0dHJpYnV0ZTsKICAgICAgICAgICAgaWYgKG51bWJlck9mVmVydGljZXMgIT09IG51bSAmJiBudW1iZXJPZlZlcnRpY2VzICE9PSAtMSkgewogICAgICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAgICAgIkFsbCBhdHRyaWJ1dGUgbGlzdHMgbXVzdCBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBhdHRyaWJ1dGVzLiIKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG51bWJlck9mVmVydGljZXMgPSBudW07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBudW1iZXJPZlZlcnRpY2VzOwogICAgICB9OwogICAgICByZWN0YW5nbGVDZW50ZXJTY3JhdGNoID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIGVudUNlbnRlclNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZpeGVkRnJhbWVUb0VudVNjcmF0Y2ggPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgICAgIGJvdW5kaW5nUmVjdGFuZ2xlUG9pbnRzQ2FydG9ncmFwaGljU2NyYXRjaCA9IFsKICAgICAgICBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKSwKICAgICAgICBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKSwKICAgICAgICBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKQogICAgICBdOwogICAgICBib3VuZGluZ1JlY3RhbmdsZVBvaW50c0VudVNjcmF0Y2ggPSBbCiAgICAgICAgbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpLAogICAgICAgIG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKSwKICAgICAgICBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCkKICAgICAgXTsKICAgICAgcG9pbnRzMkRTY3JhdGNoID0gW25ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKSwgbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpLCBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCldOwogICAgICBwb2ludEVudVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGVudVJvdGF0aW9uU2NyYXRjaCA9IG5ldyBRdWF0ZXJuaW9uX2RlZmF1bHQoKTsKICAgICAgZW51Um90YXRpb25NYXRyaXhTY3JhdGNoID0gbmV3IE1hdHJpeDRfZGVmYXVsdCgpOwogICAgICByb3RhdGlvbjJEU2NyYXRjaCA9IG5ldyBNYXRyaXgyX2RlZmF1bHQoKTsKICAgICAgR2VvbWV0cnkuX3RleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHMgPSBmdW5jdGlvbihwb3NpdGlvbnMsIHN0Um90YXRpb24sIGVsbGlwc29pZCwgYm91bmRpbmdSZWN0YW5nbGUpIHsKICAgICAgICBsZXQgaTsKICAgICAgICBjb25zdCByZWN0YW5nbGVDZW50ZXIgPSBSZWN0YW5nbGVfZGVmYXVsdC5jZW50ZXIoCiAgICAgICAgICBib3VuZGluZ1JlY3RhbmdsZSwKICAgICAgICAgIHJlY3RhbmdsZUNlbnRlclNjcmF0Y2gKICAgICAgICApOwogICAgICAgIGNvbnN0IGVudUNlbnRlciA9IENhcnRvZ3JhcGhpY19kZWZhdWx0LnRvQ2FydGVzaWFuKAogICAgICAgICAgcmVjdGFuZ2xlQ2VudGVyLAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgZW51Q2VudGVyU2NyYXRjaAogICAgICAgICk7CiAgICAgICAgY29uc3QgZW51VG9GaXhlZEZyYW1lID0gVHJhbnNmb3Jtc19kZWZhdWx0LmVhc3ROb3J0aFVwVG9GaXhlZEZyYW1lKAogICAgICAgICAgZW51Q2VudGVyLAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgZml4ZWRGcmFtZVRvRW51U2NyYXRjaAogICAgICAgICk7CiAgICAgICAgY29uc3QgZml4ZWRGcmFtZVRvRW51ID0gTWF0cml4NF9kZWZhdWx0LmludmVyc2UoCiAgICAgICAgICBlbnVUb0ZpeGVkRnJhbWUsCiAgICAgICAgICBmaXhlZEZyYW1lVG9FbnVTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBjb25zdCBib3VuZGluZ1BvaW50c0VudSA9IGJvdW5kaW5nUmVjdGFuZ2xlUG9pbnRzRW51U2NyYXRjaDsKICAgICAgICBjb25zdCBib3VuZGluZ1BvaW50c0NhcnRvID0gYm91bmRpbmdSZWN0YW5nbGVQb2ludHNDYXJ0b2dyYXBoaWNTY3JhdGNoOwogICAgICAgIGJvdW5kaW5nUG9pbnRzQ2FydG9bMF0ubG9uZ2l0dWRlID0gYm91bmRpbmdSZWN0YW5nbGUud2VzdDsKICAgICAgICBib3VuZGluZ1BvaW50c0NhcnRvWzBdLmxhdGl0dWRlID0gYm91bmRpbmdSZWN0YW5nbGUuc291dGg7CiAgICAgICAgYm91bmRpbmdQb2ludHNDYXJ0b1sxXS5sb25naXR1ZGUgPSBib3VuZGluZ1JlY3RhbmdsZS53ZXN0OwogICAgICAgIGJvdW5kaW5nUG9pbnRzQ2FydG9bMV0ubGF0aXR1ZGUgPSBib3VuZGluZ1JlY3RhbmdsZS5ub3J0aDsKICAgICAgICBib3VuZGluZ1BvaW50c0NhcnRvWzJdLmxvbmdpdHVkZSA9IGJvdW5kaW5nUmVjdGFuZ2xlLmVhc3Q7CiAgICAgICAgYm91bmRpbmdQb2ludHNDYXJ0b1syXS5sYXRpdHVkZSA9IGJvdW5kaW5nUmVjdGFuZ2xlLnNvdXRoOwogICAgICAgIGxldCBwb3NFbnUgPSBwb2ludEVudVNjcmF0Y2g7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IDM7IGkrKykgewogICAgICAgICAgQ2FydG9ncmFwaGljX2RlZmF1bHQudG9DYXJ0ZXNpYW4oYm91bmRpbmdQb2ludHNDYXJ0b1tpXSwgZWxsaXBzb2lkLCBwb3NFbnUpOwogICAgICAgICAgcG9zRW51ID0gTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlQb2ludEFzVmVjdG9yKGZpeGVkRnJhbWVUb0VudSwgcG9zRW51LCBwb3NFbnUpOwogICAgICAgICAgYm91bmRpbmdQb2ludHNFbnVbaV0ueCA9IHBvc0VudS54OwogICAgICAgICAgYm91bmRpbmdQb2ludHNFbnVbaV0ueSA9IHBvc0VudS55OwogICAgICAgIH0KICAgICAgICBjb25zdCByb3RhdGlvbiA9IFF1YXRlcm5pb25fZGVmYXVsdC5mcm9tQXhpc0FuZ2xlKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWiwKICAgICAgICAgIC1zdFJvdGF0aW9uLAogICAgICAgICAgZW51Um90YXRpb25TY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBjb25zdCB0ZXh0dXJlTWF0cml4ID0gTWF0cml4M19kZWZhdWx0LmZyb21RdWF0ZXJuaW9uKAogICAgICAgICAgcm90YXRpb24sCiAgICAgICAgICBlbnVSb3RhdGlvbk1hdHJpeFNjcmF0Y2gKICAgICAgICApOwogICAgICAgIGNvbnN0IHBvc2l0aW9uc0xlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgbGV0IGVudU1pblggPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CiAgICAgICAgbGV0IGVudU1pblkgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CiAgICAgICAgbGV0IGVudU1heFggPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CiAgICAgICAgbGV0IGVudU1heFkgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBvc2l0aW9uc0xlbmd0aDsgaSsrKSB7CiAgICAgICAgICBwb3NFbnUgPSBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVBvaW50QXNWZWN0b3IoCiAgICAgICAgICAgIGZpeGVkRnJhbWVUb0VudSwKICAgICAgICAgICAgcG9zaXRpb25zW2ldLAogICAgICAgICAgICBwb3NFbnUKICAgICAgICAgICk7CiAgICAgICAgICBwb3NFbnUgPSBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVZlY3Rvcih0ZXh0dXJlTWF0cml4LCBwb3NFbnUsIHBvc0VudSk7CiAgICAgICAgICBlbnVNaW5YID0gTWF0aC5taW4oZW51TWluWCwgcG9zRW51LngpOwogICAgICAgICAgZW51TWluWSA9IE1hdGgubWluKGVudU1pblksIHBvc0VudS55KTsKICAgICAgICAgIGVudU1heFggPSBNYXRoLm1heChlbnVNYXhYLCBwb3NFbnUueCk7CiAgICAgICAgICBlbnVNYXhZID0gTWF0aC5tYXgoZW51TWF4WSwgcG9zRW51LnkpOwogICAgICAgIH0KICAgICAgICBjb25zdCB0b0Rlc2lyZWRJbkNvbXB1dGVkID0gTWF0cml4Ml9kZWZhdWx0LmZyb21Sb3RhdGlvbigKICAgICAgICAgIHN0Um90YXRpb24sCiAgICAgICAgICByb3RhdGlvbjJEU2NyYXRjaAogICAgICAgICk7CiAgICAgICAgY29uc3QgcG9pbnRzMkQgPSBwb2ludHMyRFNjcmF0Y2g7CiAgICAgICAgcG9pbnRzMkRbMF0ueCA9IGVudU1pblg7CiAgICAgICAgcG9pbnRzMkRbMF0ueSA9IGVudU1pblk7CiAgICAgICAgcG9pbnRzMkRbMV0ueCA9IGVudU1pblg7CiAgICAgICAgcG9pbnRzMkRbMV0ueSA9IGVudU1heFk7CiAgICAgICAgcG9pbnRzMkRbMl0ueCA9IGVudU1heFg7CiAgICAgICAgcG9pbnRzMkRbMl0ueSA9IGVudU1pblk7CiAgICAgICAgY29uc3QgYm91bmRpbmdFbnVNaW4gPSBib3VuZGluZ1BvaW50c0VudVswXTsKICAgICAgICBjb25zdCBib3VuZGluZ1BvaW50c1dpZHRoID0gYm91bmRpbmdQb2ludHNFbnVbMl0ueCAtIGJvdW5kaW5nRW51TWluLng7CiAgICAgICAgY29uc3QgYm91bmRpbmdQb2ludHNIZWlnaHQgPSBib3VuZGluZ1BvaW50c0VudVsxXS55IC0gYm91bmRpbmdFbnVNaW4ueTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7CiAgICAgICAgICBjb25zdCBwb2ludDJEID0gcG9pbnRzMkRbaV07CiAgICAgICAgICBNYXRyaXgyX2RlZmF1bHQubXVsdGlwbHlCeVZlY3Rvcih0b0Rlc2lyZWRJbkNvbXB1dGVkLCBwb2ludDJELCBwb2ludDJEKTsKICAgICAgICAgIHBvaW50MkQueCA9IChwb2ludDJELnggLSBib3VuZGluZ0VudU1pbi54KSAvIGJvdW5kaW5nUG9pbnRzV2lkdGg7CiAgICAgICAgICBwb2ludDJELnkgPSAocG9pbnQyRC55IC0gYm91bmRpbmdFbnVNaW4ueSkgLyBib3VuZGluZ1BvaW50c0hlaWdodDsKICAgICAgICB9CiAgICAgICAgY29uc3QgbWluWFlDb3JuZXIgPSBwb2ludHMyRFswXTsKICAgICAgICBjb25zdCBtYXhZQ29ybmVyID0gcG9pbnRzMkRbMV07CiAgICAgICAgY29uc3QgbWF4WENvcm5lciA9IHBvaW50czJEWzJdOwogICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheSg2KTsKICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQucGFjayhtaW5YWUNvcm5lciwgcmVzdWx0KTsKICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQucGFjayhtYXhZQ29ybmVyLCByZXN1bHQsIDIpOwogICAgICAgIENhcnRlc2lhbjJfZGVmYXVsdC5wYWNrKG1heFhDb3JuZXIsIHJlc3VsdCwgNCk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgR2VvbWV0cnlfZGVmYXVsdCA9IEdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvR2VvbWV0cnlBdHRyaWJ1dGUuanMKICBmdW5jdGlvbiBHZW9tZXRyeUF0dHJpYnV0ZShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMuY29tcG9uZW50RGF0YXR5cGUpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJvcHRpb25zLmNvbXBvbmVudERhdGF0eXBlIGlzIHJlcXVpcmVkLiIpOwogICAgfQogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5jb21wb25lbnRzUGVyQXR0cmlidXRlKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy5jb21wb25lbnRzUGVyQXR0cmlidXRlIGlzIHJlcXVpcmVkLiIpOwogICAgfQogICAgaWYgKG9wdGlvbnMuY29tcG9uZW50c1BlckF0dHJpYnV0ZSA8IDEgfHwgb3B0aW9ucy5jb21wb25lbnRzUGVyQXR0cmlidXRlID4gNCkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAib3B0aW9ucy5jb21wb25lbnRzUGVyQXR0cmlidXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA0LiIKICAgICAgKTsKICAgIH0KICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMudmFsdWVzKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy52YWx1ZXMgaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICB0aGlzLmNvbXBvbmVudERhdGF0eXBlID0gb3B0aW9ucy5jb21wb25lbnREYXRhdHlwZTsKICAgIHRoaXMuY29tcG9uZW50c1BlckF0dHJpYnV0ZSA9IG9wdGlvbnMuY29tcG9uZW50c1BlckF0dHJpYnV0ZTsKICAgIHRoaXMubm9ybWFsaXplID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5ub3JtYWxpemUsIGZhbHNlKTsKICAgIHRoaXMudmFsdWVzID0gb3B0aW9ucy52YWx1ZXM7CiAgfQogIHZhciBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0OwogIHZhciBpbml0X0dlb21ldHJ5QXR0cmlidXRlID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9HZW9tZXRyeUF0dHJpYnV0ZS5qcyIoKSB7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQgPSBHZW9tZXRyeUF0dHJpYnV0ZTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dlb21ldHJ5QXR0cmlidXRlcy5qcwogIGZ1bmN0aW9uIEdlb21ldHJ5QXR0cmlidXRlcyhvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIHRoaXMucG9zaXRpb24gPSBvcHRpb25zLnBvc2l0aW9uOwogICAgdGhpcy5ub3JtYWwgPSBvcHRpb25zLm5vcm1hbDsKICAgIHRoaXMuc3QgPSBvcHRpb25zLnN0OwogICAgdGhpcy5iaXRhbmdlbnQgPSBvcHRpb25zLmJpdGFuZ2VudDsKICAgIHRoaXMudGFuZ2VudCA9IG9wdGlvbnMudGFuZ2VudDsKICAgIHRoaXMuY29sb3IgPSBvcHRpb25zLmNvbG9yOwogIH0KICB2YXIgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQ7CiAgdmFyIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9HZW9tZXRyeUF0dHJpYnV0ZXMuanMiKCkgewogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCA9IEdlb21ldHJ5QXR0cmlidXRlczsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9TY2VuZS9BdHRyaWJ1dGVUeXBlLmpzCiAgdmFyIEF0dHJpYnV0ZVR5cGUsIEF0dHJpYnV0ZVR5cGVfZGVmYXVsdDsKICB2YXIgaW5pdF9BdHRyaWJ1dGVUeXBlID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvU2NlbmUvQXR0cmlidXRlVHlwZS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW40KCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X01hdHJpeDIoKTsKICAgICAgaW5pdF9NYXRyaXgzKCk7CiAgICAgIGluaXRfTWF0cml4NCgpOwogICAgICBBdHRyaWJ1dGVUeXBlID0gewogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBhdHRyaWJ1dGUgaXMgYSBzaW5nbGUgY29tcG9uZW50LgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge3N0cmluZ30KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBTQ0FMQVI6ICJTQ0FMQVIiLAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBhdHRyaWJ1dGUgaXMgYSB0d28tY29tcG9uZW50IHZlY3Rvci4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgVkVDMjogIlZFQzIiLAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBhdHRyaWJ1dGUgaXMgYSB0aHJlZS1jb21wb25lbnQgdmVjdG9yLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge3N0cmluZ30KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBWRUMzOiAiVkVDMyIsCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIGF0dHJpYnV0ZSBpcyBhIGZvdXItY29tcG9uZW50IHZlY3Rvci4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgVkVDNDogIlZFQzQiLAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBhdHRyaWJ1dGUgaXMgYSAyeDIgbWF0cml4LgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge3N0cmluZ30KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBNQVQyOiAiTUFUMiIsCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIGF0dHJpYnV0ZSBpcyBhIDN4MyBtYXRyaXguCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIE1BVDM6ICJNQVQzIiwKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgYXR0cmlidXRlIGlzIGEgNHg0IG1hdHJpeC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgTUFUNDogIk1BVDQiCiAgICAgIH07CiAgICAgIEF0dHJpYnV0ZVR5cGUuZ2V0TWF0aFR5cGUgPSBmdW5jdGlvbihhdHRyaWJ1dGVUeXBlKSB7CiAgICAgICAgc3dpdGNoIChhdHRyaWJ1dGVUeXBlKSB7CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuU0NBTEFSOgogICAgICAgICAgICByZXR1cm4gTnVtYmVyOwogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLlZFQzI6CiAgICAgICAgICAgIHJldHVybiBDYXJ0ZXNpYW4yX2RlZmF1bHQ7CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuVkVDMzoKICAgICAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdDsKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5WRUM0OgogICAgICAgICAgICByZXR1cm4gQ2FydGVzaWFuNF9kZWZhdWx0OwogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLk1BVDI6CiAgICAgICAgICAgIHJldHVybiBNYXRyaXgyX2RlZmF1bHQ7CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuTUFUMzoKICAgICAgICAgICAgcmV0dXJuIE1hdHJpeDNfZGVmYXVsdDsKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5NQVQ0OgogICAgICAgICAgICByZXR1cm4gTWF0cml4NF9kZWZhdWx0OwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImF0dHJpYnV0ZVR5cGUgaXMgbm90IGEgdmFsaWQgdmFsdWUuIik7CiAgICAgICAgfQogICAgICB9OwogICAgICBBdHRyaWJ1dGVUeXBlLmdldE51bWJlck9mQ29tcG9uZW50cyA9IGZ1bmN0aW9uKGF0dHJpYnV0ZVR5cGUpIHsKICAgICAgICBzd2l0Y2ggKGF0dHJpYnV0ZVR5cGUpIHsKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5TQ0FMQVI6CiAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLlZFQzI6CiAgICAgICAgICAgIHJldHVybiAyOwogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLlZFQzM6CiAgICAgICAgICAgIHJldHVybiAzOwogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLlZFQzQ6CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuTUFUMjoKICAgICAgICAgICAgcmV0dXJuIDQ7CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuTUFUMzoKICAgICAgICAgICAgcmV0dXJuIDk7CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuTUFUNDoKICAgICAgICAgICAgcmV0dXJuIDE2OwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImF0dHJpYnV0ZVR5cGUgaXMgbm90IGEgdmFsaWQgdmFsdWUuIik7CiAgICAgICAgfQogICAgICB9OwogICAgICBBdHRyaWJ1dGVUeXBlLmdldEF0dHJpYnV0ZUxvY2F0aW9uQ291bnQgPSBmdW5jdGlvbihhdHRyaWJ1dGVUeXBlKSB7CiAgICAgICAgc3dpdGNoIChhdHRyaWJ1dGVUeXBlKSB7CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuU0NBTEFSOgogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLlZFQzI6CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuVkVDMzoKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5WRUM0OgogICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5NQVQyOgogICAgICAgICAgICByZXR1cm4gMjsKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5NQVQzOgogICAgICAgICAgICByZXR1cm4gMzsKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5NQVQ0OgogICAgICAgICAgICByZXR1cm4gNDsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhdHRyaWJ1dGVUeXBlIGlzIG5vdCBhIHZhbGlkIHZhbHVlLiIpOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQXR0cmlidXRlVHlwZS5nZXRHbHNsVHlwZSA9IGZ1bmN0aW9uKGF0dHJpYnV0ZVR5cGUpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5zdHJpbmcoImF0dHJpYnV0ZVR5cGUiLCBhdHRyaWJ1dGVUeXBlKTsKICAgICAgICBzd2l0Y2ggKGF0dHJpYnV0ZVR5cGUpIHsKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5TQ0FMQVI6CiAgICAgICAgICAgIHJldHVybiAiZmxvYXQiOwogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLlZFQzI6CiAgICAgICAgICAgIHJldHVybiAidmVjMiI7CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuVkVDMzoKICAgICAgICAgICAgcmV0dXJuICJ2ZWMzIjsKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5WRUM0OgogICAgICAgICAgICByZXR1cm4gInZlYzQiOwogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLk1BVDI6CiAgICAgICAgICAgIHJldHVybiAibWF0MiI7CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuTUFUMzoKICAgICAgICAgICAgcmV0dXJuICJtYXQzIjsKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5NQVQ0OgogICAgICAgICAgICByZXR1cm4gIm1hdDQiOwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImF0dHJpYnV0ZVR5cGUgaXMgbm90IGEgdmFsaWQgdmFsdWUuIik7CiAgICAgICAgfQogICAgICB9OwogICAgICBBdHRyaWJ1dGVUeXBlX2RlZmF1bHQgPSBPYmplY3QuZnJlZXplKEF0dHJpYnV0ZVR5cGUpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQXR0cmlidXRlQ29tcHJlc3Npb24uanMKICBmdW5jdGlvbiBmb3JjZVVpbnQ4KHZhbHVlKSB7CiAgICB1aW50OEZvcmNlQXJyYXlbMF0gPSB2YWx1ZTsKICAgIHJldHVybiB1aW50OEZvcmNlQXJyYXlbMF07CiAgfQogIGZ1bmN0aW9uIHppZ1phZ0RlY29kZSh2YWx1ZSkgewogICAgcmV0dXJuIHZhbHVlID4+IDEgXiAtKHZhbHVlICYgMSk7CiAgfQogIHZhciBSSUdIVF9TSElGVCwgTEVGVF9TSElGVCwgQXR0cmlidXRlQ29tcHJlc3Npb24sIG9jdEVuY29kZVNjcmF0Y2gsIHVpbnQ4Rm9yY2VBcnJheSwgc2NyYXRjaEVuY29kZUNhcnQyLCBBdHRyaWJ1dGVDb21wcmVzc2lvbl9kZWZhdWx0OwogIHZhciBpbml0X0F0dHJpYnV0ZUNvbXByZXNzaW9uID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9BdHRyaWJ1dGVDb21wcmVzc2lvbi5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X0F0dHJpYnV0ZVR5cGUoKTsKICAgICAgUklHSFRfU0hJRlQgPSAxIC8gMjU2OwogICAgICBMRUZUX1NISUZUID0gMjU2OwogICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbiA9IHt9OwogICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbi5vY3RFbmNvZGVJblJhbmdlID0gZnVuY3Rpb24odmVjdG9yLCByYW5nZU1heCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJ2ZWN0b3IiLCB2ZWN0b3IpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBtYWdTcXVhcmVkID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZVNxdWFyZWQodmVjdG9yKTsKICAgICAgICBpZiAoTWF0aC5hYnMobWFnU3F1YXJlZCAtIDEpID4gTWF0aF9kZWZhdWx0LkVQU0lMT042KSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgidmVjdG9yIG11c3QgYmUgbm9ybWFsaXplZC4iKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSB2ZWN0b3IueCAvIChNYXRoLmFicyh2ZWN0b3IueCkgKyBNYXRoLmFicyh2ZWN0b3IueSkgKyBNYXRoLmFicyh2ZWN0b3IueikpOwogICAgICAgIHJlc3VsdC55ID0gdmVjdG9yLnkgLyAoTWF0aC5hYnModmVjdG9yLngpICsgTWF0aC5hYnModmVjdG9yLnkpICsgTWF0aC5hYnModmVjdG9yLnopKTsKICAgICAgICBpZiAodmVjdG9yLnogPCAwKSB7CiAgICAgICAgICBjb25zdCB4ID0gcmVzdWx0Lng7CiAgICAgICAgICBjb25zdCB5ID0gcmVzdWx0Lnk7CiAgICAgICAgICByZXN1bHQueCA9ICgxIC0gTWF0aC5hYnMoeSkpICogTWF0aF9kZWZhdWx0LnNpZ25Ob3RaZXJvKHgpOwogICAgICAgICAgcmVzdWx0LnkgPSAoMSAtIE1hdGguYWJzKHgpKSAqIE1hdGhfZGVmYXVsdC5zaWduTm90WmVybyh5KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSBNYXRoX2RlZmF1bHQudG9TTm9ybShyZXN1bHQueCwgcmFuZ2VNYXgpOwogICAgICAgIHJlc3VsdC55ID0gTWF0aF9kZWZhdWx0LnRvU05vcm0ocmVzdWx0LnksIHJhbmdlTWF4KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbi5vY3RFbmNvZGUgPSBmdW5jdGlvbih2ZWN0b3IsIHJlc3VsdCkgewogICAgICAgIHJldHVybiBBdHRyaWJ1dGVDb21wcmVzc2lvbi5vY3RFbmNvZGVJblJhbmdlKHZlY3RvciwgMjU1LCByZXN1bHQpOwogICAgICB9OwogICAgICBvY3RFbmNvZGVTY3JhdGNoID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICB1aW50OEZvcmNlQXJyYXkgPSBuZXcgVWludDhBcnJheSgxKTsKICAgICAgQXR0cmlidXRlQ29tcHJlc3Npb24ub2N0RW5jb2RlVG9DYXJ0ZXNpYW40ID0gZnVuY3Rpb24odmVjdG9yLCByZXN1bHQpIHsKICAgICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbi5vY3RFbmNvZGVJblJhbmdlKHZlY3RvciwgNjU1MzUsIG9jdEVuY29kZVNjcmF0Y2gpOwogICAgICAgIHJlc3VsdC54ID0gZm9yY2VVaW50OChvY3RFbmNvZGVTY3JhdGNoLnggKiBSSUdIVF9TSElGVCk7CiAgICAgICAgcmVzdWx0LnkgPSBmb3JjZVVpbnQ4KG9jdEVuY29kZVNjcmF0Y2gueCk7CiAgICAgICAgcmVzdWx0LnogPSBmb3JjZVVpbnQ4KG9jdEVuY29kZVNjcmF0Y2gueSAqIFJJR0hUX1NISUZUKTsKICAgICAgICByZXN1bHQudyA9IGZvcmNlVWludDgob2N0RW5jb2RlU2NyYXRjaC55KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbi5vY3REZWNvZGVJblJhbmdlID0gZnVuY3Rpb24oeCwgeSwgcmFuZ2VNYXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBpZiAoeCA8IDAgfHwgeCA+IHJhbmdlTWF4IHx8IHkgPCAwIHx8IHkgPiByYW5nZU1heCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgIGB4IGFuZCB5IG11c3QgYmUgdW5zaWduZWQgbm9ybWFsaXplZCBpbnRlZ2VycyBiZXR3ZWVuIDAgYW5kICR7cmFuZ2VNYXh9YAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSBNYXRoX2RlZmF1bHQuZnJvbVNOb3JtKHgsIHJhbmdlTWF4KTsKICAgICAgICByZXN1bHQueSA9IE1hdGhfZGVmYXVsdC5mcm9tU05vcm0oeSwgcmFuZ2VNYXgpOwogICAgICAgIHJlc3VsdC56ID0gMSAtIChNYXRoLmFicyhyZXN1bHQueCkgKyBNYXRoLmFicyhyZXN1bHQueSkpOwogICAgICAgIGlmIChyZXN1bHQueiA8IDApIHsKICAgICAgICAgIGNvbnN0IG9sZFZYID0gcmVzdWx0Lng7CiAgICAgICAgICByZXN1bHQueCA9ICgxIC0gTWF0aC5hYnMocmVzdWx0LnkpKSAqIE1hdGhfZGVmYXVsdC5zaWduTm90WmVybyhvbGRWWCk7CiAgICAgICAgICByZXN1bHQueSA9ICgxIC0gTWF0aC5hYnMob2xkVlgpKSAqIE1hdGhfZGVmYXVsdC5zaWduTm90WmVybyhyZXN1bHQueSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHJlc3VsdCwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgQXR0cmlidXRlQ29tcHJlc3Npb24ub2N0RGVjb2RlID0gZnVuY3Rpb24oeCwgeSwgcmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdERlY29kZUluUmFuZ2UoeCwgeSwgMjU1LCByZXN1bHQpOwogICAgICB9OwogICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbi5vY3REZWNvZGVGcm9tQ2FydGVzaWFuNCA9IGZ1bmN0aW9uKGVuY29kZWQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZW5jb2RlZCIsIGVuY29kZWQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCB4ID0gZW5jb2RlZC54OwogICAgICAgIGNvbnN0IHkgPSBlbmNvZGVkLnk7CiAgICAgICAgY29uc3QgeiA9IGVuY29kZWQuejsKICAgICAgICBjb25zdCB3ID0gZW5jb2RlZC53OwogICAgICAgIGlmICh4IDwgMCB8fCB4ID4gMjU1IHx8IHkgPCAwIHx8IHkgPiAyNTUgfHwgeiA8IDAgfHwgeiA+IDI1NSB8fCB3IDwgMCB8fCB3ID4gMjU1KSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgIngsIHksIHosIGFuZCB3IG11c3QgYmUgdW5zaWduZWQgbm9ybWFsaXplZCBpbnRlZ2VycyBiZXR3ZWVuIDAgYW5kIDI1NSIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHhPY3QxNiA9IHggKiBMRUZUX1NISUZUICsgeTsKICAgICAgICBjb25zdCB5T2N0MTYgPSB6ICogTEVGVF9TSElGVCArIHc7CiAgICAgICAgcmV0dXJuIEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdERlY29kZUluUmFuZ2UoeE9jdDE2LCB5T2N0MTYsIDY1NTM1LCByZXN1bHQpOwogICAgICB9OwogICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbi5vY3RQYWNrRmxvYXQgPSBmdW5jdGlvbihlbmNvZGVkKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJlbmNvZGVkIiwgZW5jb2RlZCk7CiAgICAgICAgcmV0dXJuIDI1NiAqIGVuY29kZWQueCArIGVuY29kZWQueTsKICAgICAgfTsKICAgICAgc2NyYXRjaEVuY29kZUNhcnQyID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbi5vY3RFbmNvZGVGbG9hdCA9IGZ1bmN0aW9uKHZlY3RvcikgewogICAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdEVuY29kZSh2ZWN0b3IsIHNjcmF0Y2hFbmNvZGVDYXJ0Mik7CiAgICAgICAgcmV0dXJuIEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdFBhY2tGbG9hdChzY3JhdGNoRW5jb2RlQ2FydDIpOwogICAgICB9OwogICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbi5vY3REZWNvZGVGbG9hdCA9IGZ1bmN0aW9uKHZhbHVlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIGNvbnN0IHRlbXAgPSB2YWx1ZSAvIDI1NjsKICAgICAgICBjb25zdCB4ID0gTWF0aC5mbG9vcih0ZW1wKTsKICAgICAgICBjb25zdCB5ID0gKHRlbXAgLSB4KSAqIDI1NjsKICAgICAgICByZXR1cm4gQXR0cmlidXRlQ29tcHJlc3Npb24ub2N0RGVjb2RlKHgsIHksIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdFBhY2sgPSBmdW5jdGlvbih2MTIsIHYyMiwgdjMsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidjEiLCB2MTIpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidjIiLCB2MjIpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidjMiLCB2Myk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IGVuY29kZWQxID0gQXR0cmlidXRlQ29tcHJlc3Npb24ub2N0RW5jb2RlRmxvYXQodjEyKTsKICAgICAgICBjb25zdCBlbmNvZGVkMiA9IEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdEVuY29kZUZsb2F0KHYyMik7CiAgICAgICAgY29uc3QgZW5jb2RlZDMgPSBBdHRyaWJ1dGVDb21wcmVzc2lvbi5vY3RFbmNvZGUodjMsIHNjcmF0Y2hFbmNvZGVDYXJ0Mik7CiAgICAgICAgcmVzdWx0LnggPSA2NTUzNiAqIGVuY29kZWQzLnggKyBlbmNvZGVkMTsKICAgICAgICByZXN1bHQueSA9IDY1NTM2ICogZW5jb2RlZDMueSArIGVuY29kZWQyOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdFVucGFjayA9IGZ1bmN0aW9uKHBhY2tlZCwgdjEyLCB2MjIsIHYzKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJwYWNrZWQiLCBwYWNrZWQpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidjEiLCB2MTIpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidjIiLCB2MjIpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidjMiLCB2Myk7CiAgICAgICAgbGV0IHRlbXAgPSBwYWNrZWQueCAvIDY1NTM2OwogICAgICAgIGNvbnN0IHggPSBNYXRoLmZsb29yKHRlbXApOwogICAgICAgIGNvbnN0IGVuY29kZWRGbG9hdDEgPSAodGVtcCAtIHgpICogNjU1MzY7CiAgICAgICAgdGVtcCA9IHBhY2tlZC55IC8gNjU1MzY7CiAgICAgICAgY29uc3QgeSA9IE1hdGguZmxvb3IodGVtcCk7CiAgICAgICAgY29uc3QgZW5jb2RlZEZsb2F0MiA9ICh0ZW1wIC0geSkgKiA2NTUzNjsKICAgICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbi5vY3REZWNvZGVGbG9hdChlbmNvZGVkRmxvYXQxLCB2MTIpOwogICAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdERlY29kZUZsb2F0KGVuY29kZWRGbG9hdDIsIHYyMik7CiAgICAgICAgQXR0cmlidXRlQ29tcHJlc3Npb24ub2N0RGVjb2RlKHgsIHksIHYzKTsKICAgICAgfTsKICAgICAgQXR0cmlidXRlQ29tcHJlc3Npb24uY29tcHJlc3NUZXh0dXJlQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbih0ZXh0dXJlQ29vcmRpbmF0ZXMpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInRleHR1cmVDb29yZGluYXRlcyIsIHRleHR1cmVDb29yZGluYXRlcyk7CiAgICAgICAgY29uc3QgeCA9IHRleHR1cmVDb29yZGluYXRlcy54ICogNDA5NSB8IDA7CiAgICAgICAgY29uc3QgeSA9IHRleHR1cmVDb29yZGluYXRlcy55ICogNDA5NSB8IDA7CiAgICAgICAgcmV0dXJuIDQwOTYgKiB4ICsgeTsKICAgICAgfTsKICAgICAgQXR0cmlidXRlQ29tcHJlc3Npb24uZGVjb21wcmVzc1RleHR1cmVDb29yZGluYXRlcyA9IGZ1bmN0aW9uKGNvbXByZXNzZWQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY29tcHJlc3NlZCIsIGNvbXByZXNzZWQpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCB0ZW1wID0gY29tcHJlc3NlZCAvIDQwOTY7CiAgICAgICAgY29uc3QgeFplcm9UbzQwOTUgPSBNYXRoLmZsb29yKHRlbXApOwogICAgICAgIHJlc3VsdC54ID0geFplcm9UbzQwOTUgLyA0MDk1OwogICAgICAgIHJlc3VsdC55ID0gKGNvbXByZXNzZWQgLSB4WmVyb1RvNDA5NSAqIDQwOTYpIC8gNDA5NTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbi56aWdaYWdEZWx0YURlY29kZSA9IGZ1bmN0aW9uKHVCdWZmZXIsIHZCdWZmZXIsIGhlaWdodEJ1ZmZlcikgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidUJ1ZmZlciIsIHVCdWZmZXIpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidkJ1ZmZlciIsIHZCdWZmZXIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5lcXVhbHMoCiAgICAgICAgICAidUJ1ZmZlci5sZW5ndGgiLAogICAgICAgICAgInZCdWZmZXIubGVuZ3RoIiwKICAgICAgICAgIHVCdWZmZXIubGVuZ3RoLAogICAgICAgICAgdkJ1ZmZlci5sZW5ndGgKICAgICAgICApOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaGVpZ2h0QnVmZmVyKSkgewogICAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmVxdWFscygKICAgICAgICAgICAgInVCdWZmZXIubGVuZ3RoIiwKICAgICAgICAgICAgImhlaWdodEJ1ZmZlci5sZW5ndGgiLAogICAgICAgICAgICB1QnVmZmVyLmxlbmd0aCwKICAgICAgICAgICAgaGVpZ2h0QnVmZmVyLmxlbmd0aAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgY291bnQgPSB1QnVmZmVyLmxlbmd0aDsKICAgICAgICBsZXQgdTMgPSAwOwogICAgICAgIGxldCB2MyA9IDA7CiAgICAgICAgbGV0IGhlaWdodCA9IDA7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7CiAgICAgICAgICB1MyArPSB6aWdaYWdEZWNvZGUodUJ1ZmZlcltpXSk7CiAgICAgICAgICB2MyArPSB6aWdaYWdEZWNvZGUodkJ1ZmZlcltpXSk7CiAgICAgICAgICB1QnVmZmVyW2ldID0gdTM7CiAgICAgICAgICB2QnVmZmVyW2ldID0gdjM7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGhlaWdodEJ1ZmZlcikpIHsKICAgICAgICAgICAgaGVpZ2h0ICs9IHppZ1phZ0RlY29kZShoZWlnaHRCdWZmZXJbaV0pOwogICAgICAgICAgICBoZWlnaHRCdWZmZXJbaV0gPSBoZWlnaHQ7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwogICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbi5kZXF1YW50aXplID0gZnVuY3Rpb24odHlwZWRBcnJheSwgY29tcG9uZW50RGF0YXR5cGUsIHR5cGUsIGNvdW50KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJ0eXBlZEFycmF5IiwgdHlwZWRBcnJheSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJjb21wb25lbnREYXRhdHlwZSIsIGNvbXBvbmVudERhdGF0eXBlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInR5cGUiLCB0eXBlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImNvdW50IiwgY291bnQpOwogICAgICAgIGNvbnN0IGNvbXBvbmVudHNQZXJBdHRyaWJ1dGUgPSBBdHRyaWJ1dGVUeXBlX2RlZmF1bHQuZ2V0TnVtYmVyT2ZDb21wb25lbnRzKHR5cGUpOwogICAgICAgIGxldCBkaXZpc29yOwogICAgICAgIHN3aXRjaCAoY29tcG9uZW50RGF0YXR5cGUpIHsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5CWVRFOgogICAgICAgICAgICBkaXZpc29yID0gMTI3OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFOgogICAgICAgICAgICBkaXZpc29yID0gMjU1OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5TSE9SVDoKICAgICAgICAgICAgZGl2aXNvciA9IDMyNzY3OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9TSE9SVDoKICAgICAgICAgICAgZGl2aXNvciA9IDY1NTM1OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5JTlQ6CiAgICAgICAgICAgIGRpdmlzb3IgPSAyMTQ3NDgzNjQ3OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9JTlQ6CiAgICAgICAgICAgIGRpdmlzb3IgPSA0Mjk0OTY3Mjk1OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAgIGBDYW5ub3QgZGVxdWFudGl6ZSBjb21wb25lbnQgZGF0YXR5cGU6ICR7Y29tcG9uZW50RGF0YXR5cGV9YAogICAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCBkZXF1YW50aXplZFR5cGVkQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KAogICAgICAgICAgY291bnQgKiBjb21wb25lbnRzUGVyQXR0cmlidXRlCiAgICAgICAgKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHsKICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29tcG9uZW50c1BlckF0dHJpYnV0ZTsgaisrKSB7CiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gaSAqIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGUgKyBqOwogICAgICAgICAgICBkZXF1YW50aXplZFR5cGVkQXJyYXlbaW5kZXhdID0gTWF0aC5tYXgoCiAgICAgICAgICAgICAgdHlwZWRBcnJheVtpbmRleF0gLyBkaXZpc29yLAogICAgICAgICAgICAgIC0xCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBkZXF1YW50aXplZFR5cGVkQXJyYXk7CiAgICAgIH07CiAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uLmRlY29kZVJHQjU2NSA9IGZ1bmN0aW9uKHR5cGVkQXJyYXksIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidHlwZWRBcnJheSIsIHR5cGVkQXJyYXkpOwogICAgICAgIGNvbnN0IGV4cGVjdGVkTGVuZ3RoID0gdHlwZWRBcnJheS5sZW5ndGggKiAzOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmVxdWFscygKICAgICAgICAgICAgInJlc3VsdC5sZW5ndGgiLAogICAgICAgICAgICAidHlwZWRBcnJheS5sZW5ndGggKiAzIiwKICAgICAgICAgICAgcmVzdWx0Lmxlbmd0aCwKICAgICAgICAgICAgZXhwZWN0ZWRMZW5ndGgKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGNvdW50ID0gdHlwZWRBcnJheS5sZW5ndGg7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEZsb2F0MzJBcnJheShjb3VudCAqIDMpOwogICAgICAgIH0KICAgICAgICBjb25zdCBtYXNrNSA9ICgxIDw8IDUpIC0gMTsKICAgICAgICBjb25zdCBtYXNrNiA9ICgxIDw8IDYpIC0gMTsKICAgICAgICBjb25zdCBub3JtYWxpemU1ID0gMSAvIDMxOwogICAgICAgIGNvbnN0IG5vcm1hbGl6ZTYgPSAxIC8gNjM7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7CiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHR5cGVkQXJyYXlbaV07CiAgICAgICAgICBjb25zdCByZWQgPSB2YWx1ZSA+PiAxMTsKICAgICAgICAgIGNvbnN0IGdyZWVuID0gdmFsdWUgPj4gNSAmIG1hc2s2OwogICAgICAgICAgY29uc3QgYmx1ZSA9IHZhbHVlICYgbWFzazU7CiAgICAgICAgICBjb25zdCBvZmZzZXQgPSAzICogaTsKICAgICAgICAgIHJlc3VsdFtvZmZzZXRdID0gcmVkICogbm9ybWFsaXplNTsKICAgICAgICAgIHJlc3VsdFtvZmZzZXQgKyAxXSA9IGdyZWVuICogbm9ybWFsaXplNjsKICAgICAgICAgIHJlc3VsdFtvZmZzZXQgKyAyXSA9IGJsdWUgKiBub3JtYWxpemU1OwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbl9kZWZhdWx0ID0gQXR0cmlidXRlQ29tcHJlc3Npb247CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9iYXJ5Y2VudHJpY0Nvb3JkaW5hdGVzLmpzCiAgZnVuY3Rpb24gYmFyeWNlbnRyaWNDb29yZGluYXRlcyhwb2ludCwgcDAsIHAxLCBwMiwgcmVzdWx0KSB7CiAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInBvaW50IiwgcG9pbnQpOwogICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJwMCIsIHAwKTsKICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgicDEiLCBwMSk7CiAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInAyIiwgcDIpOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICB9CiAgICBsZXQgdjAyOwogICAgbGV0IHYxMjsKICAgIGxldCB2MjI7CiAgICBsZXQgZG90MDA7CiAgICBsZXQgZG90MDE7CiAgICBsZXQgZG90MDI7CiAgICBsZXQgZG90MTE7CiAgICBsZXQgZG90MTI7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwMC56KSkgewogICAgICBpZiAoQ2FydGVzaWFuMl9kZWZhdWx0LmVxdWFsc0Vwc2lsb24ocG9pbnQsIHAwLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjE0KSkgewogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWCwgcmVzdWx0KTsKICAgICAgfQogICAgICBpZiAoQ2FydGVzaWFuMl9kZWZhdWx0LmVxdWFsc0Vwc2lsb24ocG9pbnQsIHAxLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjE0KSkgewogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWSwgcmVzdWx0KTsKICAgICAgfQogICAgICBpZiAoQ2FydGVzaWFuMl9kZWZhdWx0LmVxdWFsc0Vwc2lsb24ocG9pbnQsIHAyLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjE0KSkgewogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWiwgcmVzdWx0KTsKICAgICAgfQogICAgICB2MDIgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuc3VidHJhY3QocDEsIHAwLCBzY3JhdGNoQ2FydGVzaWFuMSk7CiAgICAgIHYxMiA9IENhcnRlc2lhbjJfZGVmYXVsdC5zdWJ0cmFjdChwMiwgcDAsIHNjcmF0Y2hDYXJ0ZXNpYW4yKTsKICAgICAgdjIyID0gQ2FydGVzaWFuMl9kZWZhdWx0LnN1YnRyYWN0KHBvaW50LCBwMCwgc2NyYXRjaENhcnRlc2lhbjMyKTsKICAgICAgZG90MDAgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuZG90KHYwMiwgdjAyKTsKICAgICAgZG90MDEgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuZG90KHYwMiwgdjEyKTsKICAgICAgZG90MDIgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuZG90KHYwMiwgdjIyKTsKICAgICAgZG90MTEgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuZG90KHYxMiwgdjEyKTsKICAgICAgZG90MTIgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuZG90KHYxMiwgdjIyKTsKICAgIH0gZWxzZSB7CiAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihwb2ludCwgcDAsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTQpKSB7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9YLCByZXN1bHQpOwogICAgICB9CiAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihwb2ludCwgcDEsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTQpKSB7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9ZLCByZXN1bHQpOwogICAgICB9CiAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihwb2ludCwgcDIsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTQpKSB7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9aLCByZXN1bHQpOwogICAgICB9CiAgICAgIHYwMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChwMSwgcDAsIHNjcmF0Y2hDYXJ0ZXNpYW4xKTsKICAgICAgdjEyID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHAyLCBwMCwgc2NyYXRjaENhcnRlc2lhbjIpOwogICAgICB2MjIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocG9pbnQsIHAwLCBzY3JhdGNoQ2FydGVzaWFuMzIpOwogICAgICBkb3QwMCA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodjAyLCB2MDIpOwogICAgICBkb3QwMSA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodjAyLCB2MTIpOwogICAgICBkb3QwMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodjAyLCB2MjIpOwogICAgICBkb3QxMSA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodjEyLCB2MTIpOwogICAgICBkb3QxMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodjEyLCB2MjIpOwogICAgfQogICAgcmVzdWx0LnkgPSBkb3QxMSAqIGRvdDAyIC0gZG90MDEgKiBkb3QxMjsKICAgIHJlc3VsdC56ID0gZG90MDAgKiBkb3QxMiAtIGRvdDAxICogZG90MDI7CiAgICBjb25zdCBxID0gZG90MDAgKiBkb3QxMSAtIGRvdDAxICogZG90MDE7CiAgICBpZiAocSA9PT0gMCkgewogICAgICByZXR1cm4gdm9pZCAwOwogICAgfQogICAgcmVzdWx0LnkgLz0gcTsKICAgIHJlc3VsdC56IC89IHE7CiAgICByZXN1bHQueCA9IDEgLSByZXN1bHQueSAtIHJlc3VsdC56OwogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgdmFyIHNjcmF0Y2hDYXJ0ZXNpYW4xLCBzY3JhdGNoQ2FydGVzaWFuMiwgc2NyYXRjaENhcnRlc2lhbjMyLCBiYXJ5Y2VudHJpY0Nvb3JkaW5hdGVzX2RlZmF1bHQ7CiAgdmFyIGluaXRfYmFyeWNlbnRyaWNDb29yZGluYXRlcyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvYmFyeWNlbnRyaWNDb29yZGluYXRlcy5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjMyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBiYXJ5Y2VudHJpY0Nvb3JkaW5hdGVzX2RlZmF1bHQgPSBiYXJ5Y2VudHJpY0Nvb3JkaW5hdGVzOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRW5jb2RlZENhcnRlc2lhbjMuanMKICBmdW5jdGlvbiBFbmNvZGVkQ2FydGVzaWFuMygpIHsKICAgIHRoaXMuaGlnaCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTyk7CiAgICB0aGlzLmxvdyA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTyk7CiAgfQogIHZhciBzY3JhdGNoRW5jb2RlLCBlbmNvZGVkUCwgRW5jb2RlZENhcnRlc2lhbjNfZGVmYXVsdDsKICB2YXIgaW5pdF9FbmNvZGVkQ2FydGVzaWFuMyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRW5jb2RlZENhcnRlc2lhbjMuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgRW5jb2RlZENhcnRlc2lhbjMuZW5jb2RlID0gZnVuY3Rpb24odmFsdWUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gewogICAgICAgICAgICBoaWdoOiAwLAogICAgICAgICAgICBsb3c6IDAKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIGxldCBkb3VibGVIaWdoOwogICAgICAgIGlmICh2YWx1ZSA+PSAwKSB7CiAgICAgICAgICBkb3VibGVIaWdoID0gTWF0aC5mbG9vcih2YWx1ZSAvIDY1NTM2KSAqIDY1NTM2OwogICAgICAgICAgcmVzdWx0LmhpZ2ggPSBkb3VibGVIaWdoOwogICAgICAgICAgcmVzdWx0LmxvdyA9IHZhbHVlIC0gZG91YmxlSGlnaDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZG91YmxlSGlnaCA9IE1hdGguZmxvb3IoLXZhbHVlIC8gNjU1MzYpICogNjU1MzY7CiAgICAgICAgICByZXN1bHQuaGlnaCA9IC1kb3VibGVIaWdoOwogICAgICAgICAgcmVzdWx0LmxvdyA9IHZhbHVlICsgZG91YmxlSGlnaDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NyYXRjaEVuY29kZSA9IHsKICAgICAgICBoaWdoOiAwLAogICAgICAgIGxvdzogMAogICAgICB9OwogICAgICBFbmNvZGVkQ2FydGVzaWFuMy5mcm9tQ2FydGVzaWFuID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBFbmNvZGVkQ2FydGVzaWFuMygpOwogICAgICAgIH0KICAgICAgICBjb25zdCBoaWdoID0gcmVzdWx0LmhpZ2g7CiAgICAgICAgY29uc3QgbG93ID0gcmVzdWx0LmxvdzsKICAgICAgICBFbmNvZGVkQ2FydGVzaWFuMy5lbmNvZGUoY2FydGVzaWFuMTEueCwgc2NyYXRjaEVuY29kZSk7CiAgICAgICAgaGlnaC54ID0gc2NyYXRjaEVuY29kZS5oaWdoOwogICAgICAgIGxvdy54ID0gc2NyYXRjaEVuY29kZS5sb3c7CiAgICAgICAgRW5jb2RlZENhcnRlc2lhbjMuZW5jb2RlKGNhcnRlc2lhbjExLnksIHNjcmF0Y2hFbmNvZGUpOwogICAgICAgIGhpZ2gueSA9IHNjcmF0Y2hFbmNvZGUuaGlnaDsKICAgICAgICBsb3cueSA9IHNjcmF0Y2hFbmNvZGUubG93OwogICAgICAgIEVuY29kZWRDYXJ0ZXNpYW4zLmVuY29kZShjYXJ0ZXNpYW4xMS56LCBzY3JhdGNoRW5jb2RlKTsKICAgICAgICBoaWdoLnogPSBzY3JhdGNoRW5jb2RlLmhpZ2g7CiAgICAgICAgbG93LnogPSBzY3JhdGNoRW5jb2RlLmxvdzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBlbmNvZGVkUCA9IG5ldyBFbmNvZGVkQ2FydGVzaWFuMygpOwogICAgICBFbmNvZGVkQ2FydGVzaWFuMy53cml0ZUVsZW1lbnRzID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIGNhcnRlc2lhbkFycmF5LCBpbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY2FydGVzaWFuQXJyYXkiLCBjYXJ0ZXNpYW5BcnJheSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJpbmRleCIsIGluZGV4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMCk7CiAgICAgICAgRW5jb2RlZENhcnRlc2lhbjMuZnJvbUNhcnRlc2lhbihjYXJ0ZXNpYW4xMSwgZW5jb2RlZFApOwogICAgICAgIGNvbnN0IGhpZ2ggPSBlbmNvZGVkUC5oaWdoOwogICAgICAgIGNvbnN0IGxvdyA9IGVuY29kZWRQLmxvdzsKICAgICAgICBjYXJ0ZXNpYW5BcnJheVtpbmRleF0gPSBoaWdoLng7CiAgICAgICAgY2FydGVzaWFuQXJyYXlbaW5kZXggKyAxXSA9IGhpZ2gueTsKICAgICAgICBjYXJ0ZXNpYW5BcnJheVtpbmRleCArIDJdID0gaGlnaC56OwogICAgICAgIGNhcnRlc2lhbkFycmF5W2luZGV4ICsgM10gPSBsb3cueDsKICAgICAgICBjYXJ0ZXNpYW5BcnJheVtpbmRleCArIDRdID0gbG93Lnk7CiAgICAgICAgY2FydGVzaWFuQXJyYXlbaW5kZXggKyA1XSA9IGxvdy56OwogICAgICB9OwogICAgICBFbmNvZGVkQ2FydGVzaWFuM19kZWZhdWx0ID0gRW5jb2RlZENhcnRlc2lhbjM7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9JbmRleERhdGF0eXBlLmpzCiAgdmFyIEluZGV4RGF0YXR5cGUsIEluZGV4RGF0YXR5cGVfZGVmYXVsdDsKICB2YXIgaW5pdF9JbmRleERhdGF0eXBlID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9JbmRleERhdGF0eXBlLmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfV2ViR0xDb25zdGFudHMoKTsKICAgICAgSW5kZXhEYXRhdHlwZSA9IHsKICAgICAgICAvKioKICAgICAgICAgKiA4LWJpdCB1bnNpZ25lZCBieXRlIGNvcnJlc3BvbmRpbmcgdG8gPGNvZGU+VU5TSUdORURfQllURTwvY29kZT4gYW5kIHRoZSB0eXBlCiAgICAgICAgICogb2YgYW4gZWxlbWVudCBpbiA8Y29kZT5VaW50OEFycmF5PC9jb2RlPi4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgVU5TSUdORURfQllURTogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgIC8qKgogICAgICAgICAqIDE2LWJpdCB1bnNpZ25lZCBzaG9ydCBjb3JyZXNwb25kaW5nIHRvIDxjb2RlPlVOU0lHTkVEX1NIT1JUPC9jb2RlPiBhbmQgdGhlIHR5cGUKICAgICAgICAgKiBvZiBhbiBlbGVtZW50IGluIDxjb2RlPlVpbnQxNkFycmF5PC9jb2RlPi4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgVU5TSUdORURfU0hPUlQ6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuVU5TSUdORURfU0hPUlQsCiAgICAgICAgLyoqCiAgICAgICAgICogMzItYml0IHVuc2lnbmVkIGludCBjb3JyZXNwb25kaW5nIHRvIDxjb2RlPlVOU0lHTkVEX0lOVDwvY29kZT4gYW5kIHRoZSB0eXBlCiAgICAgICAgICogb2YgYW4gZWxlbWVudCBpbiA8Y29kZT5VaW50MzJBcnJheTwvY29kZT4uCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFVOU0lHTkVEX0lOVDogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5VTlNJR05FRF9JTlQKICAgICAgfTsKICAgICAgSW5kZXhEYXRhdHlwZS5nZXRTaXplSW5CeXRlcyA9IGZ1bmN0aW9uKGluZGV4RGF0YXR5cGUpIHsKICAgICAgICBzd2l0Y2ggKGluZGV4RGF0YXR5cGUpIHsKICAgICAgICAgIGNhc2UgSW5kZXhEYXRhdHlwZS5VTlNJR05FRF9CWVRFOgogICAgICAgICAgICByZXR1cm4gVWludDhBcnJheS5CWVRFU19QRVJfRUxFTUVOVDsKICAgICAgICAgIGNhc2UgSW5kZXhEYXRhdHlwZS5VTlNJR05FRF9TSE9SVDoKICAgICAgICAgICAgcmV0dXJuIFVpbnQxNkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UOwogICAgICAgICAgY2FzZSBJbmRleERhdGF0eXBlLlVOU0lHTkVEX0lOVDoKICAgICAgICAgICAgcmV0dXJuIFVpbnQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UOwogICAgICAgIH0KICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICJpbmRleERhdGF0eXBlIGlzIHJlcXVpcmVkIGFuZCBtdXN0IGJlIGEgdmFsaWQgSW5kZXhEYXRhdHlwZSBjb25zdGFudC4iCiAgICAgICAgKTsKICAgICAgfTsKICAgICAgSW5kZXhEYXRhdHlwZS5mcm9tU2l6ZUluQnl0ZXMgPSBmdW5jdGlvbihzaXplSW5CeXRlcykgewogICAgICAgIHN3aXRjaCAoc2l6ZUluQnl0ZXMpIHsKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgcmV0dXJuIEluZGV4RGF0YXR5cGUuVU5TSUdORURfU0hPUlQ7CiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIHJldHVybiBJbmRleERhdGF0eXBlLlVOU0lHTkVEX0lOVDsKICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgcmV0dXJuIEluZGV4RGF0YXR5cGUuVU5TSUdORURfQllURTsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAgICJTaXplIGluIGJ5dGVzIGNhbm5vdCBiZSBtYXBwZWQgdG8gYW4gSW5kZXhEYXRhdHlwZSIKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIEluZGV4RGF0YXR5cGUudmFsaWRhdGUgPSBmdW5jdGlvbihpbmRleERhdGF0eXBlKSB7CiAgICAgICAgcmV0dXJuIGRlZmluZWRfZGVmYXVsdChpbmRleERhdGF0eXBlKSAmJiAoaW5kZXhEYXRhdHlwZSA9PT0gSW5kZXhEYXRhdHlwZS5VTlNJR05FRF9CWVRFIHx8IGluZGV4RGF0YXR5cGUgPT09IEluZGV4RGF0YXR5cGUuVU5TSUdORURfU0hPUlQgfHwgaW5kZXhEYXRhdHlwZSA9PT0gSW5kZXhEYXRhdHlwZS5VTlNJR05FRF9JTlQpOwogICAgICB9OwogICAgICBJbmRleERhdGF0eXBlLmNyZWF0ZVR5cGVkQXJyYXkgPSBmdW5jdGlvbihudW1iZXJPZlZlcnRpY2VzLCBpbmRpY2VzTGVuZ3RoT3JBcnJheSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG51bWJlck9mVmVydGljZXMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibnVtYmVyT2ZWZXJ0aWNlcyBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKG51bWJlck9mVmVydGljZXMgPj0gTWF0aF9kZWZhdWx0LlNJWFRZX0ZPVVJfS0lMT0JZVEVTKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFVpbnQzMkFycmF5KGluZGljZXNMZW5ndGhPckFycmF5KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBVaW50MTZBcnJheShpbmRpY2VzTGVuZ3RoT3JBcnJheSk7CiAgICAgIH07CiAgICAgIEluZGV4RGF0YXR5cGUuY3JlYXRlVHlwZWRBcnJheUZyb21BcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKG51bWJlck9mVmVydGljZXMsIHNvdXJjZUFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChudW1iZXJPZlZlcnRpY2VzKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm51bWJlck9mVmVydGljZXMgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHNvdXJjZUFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInNvdXJjZUFycmF5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChieXRlT2Zmc2V0KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImJ5dGVPZmZzZXQgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmIChudW1iZXJPZlZlcnRpY2VzID49IE1hdGhfZGVmYXVsdC5TSVhUWV9GT1VSX0tJTE9CWVRFUykgewogICAgICAgICAgcmV0dXJuIG5ldyBVaW50MzJBcnJheShzb3VyY2VBcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBVaW50MTZBcnJheShzb3VyY2VBcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICAgICAgfTsKICAgICAgSW5kZXhEYXRhdHlwZS5mcm9tVHlwZWRBcnJheSA9IGZ1bmN0aW9uKGFycmF5KSB7CiAgICAgICAgaWYgKGFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSkgewogICAgICAgICAgcmV0dXJuIEluZGV4RGF0YXR5cGUuVU5TSUdORURfQllURTsKICAgICAgICB9CiAgICAgICAgaWYgKGFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkpIHsKICAgICAgICAgIHJldHVybiBJbmRleERhdGF0eXBlLlVOU0lHTkVEX1NIT1JUOwogICAgICAgIH0KICAgICAgICBpZiAoYXJyYXkgaW5zdGFuY2VvZiBVaW50MzJBcnJheSkgewogICAgICAgICAgcmV0dXJuIEluZGV4RGF0YXR5cGUuVU5TSUdORURfSU5UOwogICAgICAgIH0KICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICJhcnJheSBtdXN0IGJlIGEgVWludDhBcnJheSwgVWludDE2QXJyYXksIG9yIFVpbnQzMkFycmF5LiIKICAgICAgICApOwogICAgICB9OwogICAgICBJbmRleERhdGF0eXBlX2RlZmF1bHQgPSBPYmplY3QuZnJlZXplKEluZGV4RGF0YXR5cGUpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUXVhZHJhdGljUmVhbFBvbHlub21pYWwuanMKICBmdW5jdGlvbiBhZGRXaXRoQ2FuY2VsbGF0aW9uQ2hlY2sobGVmdCwgcmlnaHQsIHRvbGVyYW5jZSkgewogICAgY29uc3QgZGlmZmVyZW5jZSA9IGxlZnQgKyByaWdodDsKICAgIGlmIChNYXRoX2RlZmF1bHQuc2lnbihsZWZ0KSAhPT0gTWF0aF9kZWZhdWx0LnNpZ24ocmlnaHQpICYmIE1hdGguYWJzKGRpZmZlcmVuY2UgLyBNYXRoLm1heChNYXRoLmFicyhsZWZ0KSwgTWF0aC5hYnMocmlnaHQpKSkgPCB0b2xlcmFuY2UpIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICByZXR1cm4gZGlmZmVyZW5jZTsKICB9CiAgdmFyIFF1YWRyYXRpY1JlYWxQb2x5bm9taWFsLCBRdWFkcmF0aWNSZWFsUG9seW5vbWlhbF9kZWZhdWx0OwogIHZhciBpbml0X1F1YWRyYXRpY1JlYWxQb2x5bm9taWFsID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9RdWFkcmF0aWNSZWFsUG9seW5vbWlhbC5qcyIoKSB7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIFF1YWRyYXRpY1JlYWxQb2x5bm9taWFsID0ge307CiAgICAgIFF1YWRyYXRpY1JlYWxQb2x5bm9taWFsLmNvbXB1dGVEaXNjcmltaW5hbnQgPSBmdW5jdGlvbihhMywgYiwgYykgewogICAgICAgIGlmICh0eXBlb2YgYTMgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYSBpcyBhIHJlcXVpcmVkIG51bWJlci4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSAibnVtYmVyIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImIgaXMgYSByZXF1aXJlZCBudW1iZXIuIik7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgYyAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJjIGlzIGEgcmVxdWlyZWQgbnVtYmVyLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBkaXNjcmltaW5hbnQgPSBiICogYiAtIDQgKiBhMyAqIGM7CiAgICAgICAgcmV0dXJuIGRpc2NyaW1pbmFudDsKICAgICAgfTsKICAgICAgUXVhZHJhdGljUmVhbFBvbHlub21pYWwuY29tcHV0ZVJlYWxSb290cyA9IGZ1bmN0aW9uKGEzLCBiLCBjKSB7CiAgICAgICAgaWYgKHR5cGVvZiBhMyAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhIGlzIGEgcmVxdWlyZWQgbnVtYmVyLiIpOwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIGIgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYiBpcyBhIHJlcXVpcmVkIG51bWJlci4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBjICE9PSAibnVtYmVyIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImMgaXMgYSByZXF1aXJlZCBudW1iZXIuIik7CiAgICAgICAgfQogICAgICAgIGxldCByYXRpbzsKICAgICAgICBpZiAoYTMgPT09IDApIHsKICAgICAgICAgIGlmIChiID09PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBbLWMgLyBiXTsKICAgICAgICB9IGVsc2UgaWYgKGIgPT09IDApIHsKICAgICAgICAgIGlmIChjID09PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBbMCwgMF07CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBjTWFnbml0dWRlID0gTWF0aC5hYnMoYyk7CiAgICAgICAgICBjb25zdCBhTWFnbml0dWRlID0gTWF0aC5hYnMoYTMpOwogICAgICAgICAgaWYgKGNNYWduaXR1ZGUgPCBhTWFnbml0dWRlICYmIGNNYWduaXR1ZGUgLyBhTWFnbml0dWRlIDwgTWF0aF9kZWZhdWx0LkVQU0lMT04xNCkgewogICAgICAgICAgICByZXR1cm4gWzAsIDBdOwogICAgICAgICAgfSBlbHNlIGlmIChjTWFnbml0dWRlID4gYU1hZ25pdHVkZSAmJiBhTWFnbml0dWRlIC8gY01hZ25pdHVkZSA8IE1hdGhfZGVmYXVsdC5FUFNJTE9OMTQpIHsKICAgICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgICAgfQogICAgICAgICAgcmF0aW8gPSAtYyAvIGEzOwogICAgICAgICAgaWYgKHJhdGlvIDwgMCkgewogICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCByb290ID0gTWF0aC5zcXJ0KHJhdGlvKTsKICAgICAgICAgIHJldHVybiBbLXJvb3QsIHJvb3RdOwogICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gMCkgewogICAgICAgICAgcmF0aW8gPSAtYiAvIGEzOwogICAgICAgICAgaWYgKHJhdGlvIDwgMCkgewogICAgICAgICAgICByZXR1cm4gW3JhdGlvLCAwXTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBbMCwgcmF0aW9dOwogICAgICAgIH0KICAgICAgICBjb25zdCBiMiA9IGIgKiBiOwogICAgICAgIGNvbnN0IGZvdXJfYWMgPSA0ICogYTMgKiBjOwogICAgICAgIGNvbnN0IHJhZGljYW5kID0gYWRkV2l0aENhbmNlbGxhdGlvbkNoZWNrKGIyLCAtZm91cl9hYywgTWF0aF9kZWZhdWx0LkVQU0lMT04xNCk7CiAgICAgICAgaWYgKHJhZGljYW5kIDwgMCkgewogICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgIH0KICAgICAgICBjb25zdCBxID0gLTAuNSAqIGFkZFdpdGhDYW5jZWxsYXRpb25DaGVjaygKICAgICAgICAgIGIsCiAgICAgICAgICBNYXRoX2RlZmF1bHQuc2lnbihiKSAqIE1hdGguc3FydChyYWRpY2FuZCksCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjE0CiAgICAgICAgKTsKICAgICAgICBpZiAoYiA+IDApIHsKICAgICAgICAgIHJldHVybiBbcSAvIGEzLCBjIC8gcV07CiAgICAgICAgfQogICAgICAgIHJldHVybiBbYyAvIHEsIHEgLyBhM107CiAgICAgIH07CiAgICAgIFF1YWRyYXRpY1JlYWxQb2x5bm9taWFsX2RlZmF1bHQgPSBRdWFkcmF0aWNSZWFsUG9seW5vbWlhbDsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0N1YmljUmVhbFBvbHlub21pYWwuanMKICBmdW5jdGlvbiBjb21wdXRlUmVhbFJvb3RzKGEzLCBiLCBjLCBkKSB7CiAgICBjb25zdCBBID0gYTM7CiAgICBjb25zdCBCID0gYiAvIDM7CiAgICBjb25zdCBDID0gYyAvIDM7CiAgICBjb25zdCBEID0gZDsKICAgIGNvbnN0IEFDID0gQSAqIEM7CiAgICBjb25zdCBCRCA9IEIgKiBEOwogICAgY29uc3QgQjIgPSBCICogQjsKICAgIGNvbnN0IEMyID0gQyAqIEM7CiAgICBjb25zdCBkZWx0YTEgPSBBICogQyAtIEIyOwogICAgY29uc3QgZGVsdGEyID0gQSAqIEQgLSBCICogQzsKICAgIGNvbnN0IGRlbHRhMyA9IEIgKiBEIC0gQzI7CiAgICBjb25zdCBkaXNjcmltaW5hbnQgPSA0ICogZGVsdGExICogZGVsdGEzIC0gZGVsdGEyICogZGVsdGEyOwogICAgbGV0IHRlbXA7CiAgICBsZXQgdGVtcDE7CiAgICBpZiAoZGlzY3JpbWluYW50IDwgMCkgewogICAgICBsZXQgQUJhcjsKICAgICAgbGV0IENCYXI7CiAgICAgIGxldCBEQmFyOwogICAgICBpZiAoQjIgKiBCRCA+PSBBQyAqIEMyKSB7CiAgICAgICAgQUJhciA9IEE7CiAgICAgICAgQ0JhciA9IGRlbHRhMTsKICAgICAgICBEQmFyID0gLTIgKiBCICogZGVsdGExICsgQSAqIGRlbHRhMjsKICAgICAgfSBlbHNlIHsKICAgICAgICBBQmFyID0gRDsKICAgICAgICBDQmFyID0gZGVsdGEzOwogICAgICAgIERCYXIgPSAtRCAqIGRlbHRhMiArIDIgKiBDICogZGVsdGEzOwogICAgICB9CiAgICAgIGNvbnN0IHMgPSBEQmFyIDwgMCA/IC0xIDogMTsKICAgICAgY29uc3QgdGVtcDAgPSAtcyAqIE1hdGguYWJzKEFCYXIpICogTWF0aC5zcXJ0KC1kaXNjcmltaW5hbnQpOwogICAgICB0ZW1wMSA9IC1EQmFyICsgdGVtcDA7CiAgICAgIGNvbnN0IHggPSB0ZW1wMSAvIDI7CiAgICAgIGNvbnN0IHAgPSB4IDwgMCA/IC1NYXRoLnBvdygteCwgMSAvIDMpIDogTWF0aC5wb3coeCwgMSAvIDMpOwogICAgICBjb25zdCBxID0gdGVtcDEgPT09IHRlbXAwID8gLXAgOiAtQ0JhciAvIHA7CiAgICAgIHRlbXAgPSBDQmFyIDw9IDAgPyBwICsgcSA6IC1EQmFyIC8gKHAgKiBwICsgcSAqIHEgKyBDQmFyKTsKICAgICAgaWYgKEIyICogQkQgPj0gQUMgKiBDMikgewogICAgICAgIHJldHVybiBbKHRlbXAgLSBCKSAvIEFdOwogICAgICB9CiAgICAgIHJldHVybiBbLUQgLyAodGVtcCArIEMpXTsKICAgIH0KICAgIGNvbnN0IENCYXJBID0gZGVsdGExOwogICAgY29uc3QgREJhckEgPSAtMiAqIEIgKiBkZWx0YTEgKyBBICogZGVsdGEyOwogICAgY29uc3QgQ0JhckQgPSBkZWx0YTM7CiAgICBjb25zdCBEQmFyRCA9IC1EICogZGVsdGEyICsgMiAqIEMgKiBkZWx0YTM7CiAgICBjb25zdCBzcXVhcmVSb290T2ZEaXNjcmltaW5hbnQgPSBNYXRoLnNxcnQoZGlzY3JpbWluYW50KTsKICAgIGNvbnN0IGhhbGZTcXVhcmVSb290T2YzID0gTWF0aC5zcXJ0KDMpIC8gMjsKICAgIGxldCB0aGV0YSA9IE1hdGguYWJzKE1hdGguYXRhbjIoQSAqIHNxdWFyZVJvb3RPZkRpc2NyaW1pbmFudCwgLURCYXJBKSAvIDMpOwogICAgdGVtcCA9IDIgKiBNYXRoLnNxcnQoLUNCYXJBKTsKICAgIGxldCBjb3NpbmUgPSBNYXRoLmNvcyh0aGV0YSk7CiAgICB0ZW1wMSA9IHRlbXAgKiBjb3NpbmU7CiAgICBsZXQgdGVtcDMgPSB0ZW1wICogKC1jb3NpbmUgLyAyIC0gaGFsZlNxdWFyZVJvb3RPZjMgKiBNYXRoLnNpbih0aGV0YSkpOwogICAgY29uc3QgbnVtZXJhdG9yTGFyZ2UgPSB0ZW1wMSArIHRlbXAzID4gMiAqIEIgPyB0ZW1wMSAtIEIgOiB0ZW1wMyAtIEI7CiAgICBjb25zdCBkZW5vbWluYXRvckxhcmdlID0gQTsKICAgIGNvbnN0IHJvb3QxID0gbnVtZXJhdG9yTGFyZ2UgLyBkZW5vbWluYXRvckxhcmdlOwogICAgdGhldGEgPSBNYXRoLmFicyhNYXRoLmF0YW4yKEQgKiBzcXVhcmVSb290T2ZEaXNjcmltaW5hbnQsIC1EQmFyRCkgLyAzKTsKICAgIHRlbXAgPSAyICogTWF0aC5zcXJ0KC1DQmFyRCk7CiAgICBjb3NpbmUgPSBNYXRoLmNvcyh0aGV0YSk7CiAgICB0ZW1wMSA9IHRlbXAgKiBjb3NpbmU7CiAgICB0ZW1wMyA9IHRlbXAgKiAoLWNvc2luZSAvIDIgLSBoYWxmU3F1YXJlUm9vdE9mMyAqIE1hdGguc2luKHRoZXRhKSk7CiAgICBjb25zdCBudW1lcmF0b3JTbWFsbCA9IC1EOwogICAgY29uc3QgZGVub21pbmF0b3JTbWFsbCA9IHRlbXAxICsgdGVtcDMgPCAyICogQyA/IHRlbXAxICsgQyA6IHRlbXAzICsgQzsKICAgIGNvbnN0IHJvb3QzID0gbnVtZXJhdG9yU21hbGwgLyBkZW5vbWluYXRvclNtYWxsOwogICAgY29uc3QgRSA9IGRlbm9taW5hdG9yTGFyZ2UgKiBkZW5vbWluYXRvclNtYWxsOwogICAgY29uc3QgRiA9IC1udW1lcmF0b3JMYXJnZSAqIGRlbm9taW5hdG9yU21hbGwgLSBkZW5vbWluYXRvckxhcmdlICogbnVtZXJhdG9yU21hbGw7CiAgICBjb25zdCBHID0gbnVtZXJhdG9yTGFyZ2UgKiBudW1lcmF0b3JTbWFsbDsKICAgIGNvbnN0IHJvb3QyID0gKEMgKiBGIC0gQiAqIEcpIC8gKC1CICogRiArIEMgKiBFKTsKICAgIGlmIChyb290MSA8PSByb290MikgewogICAgICBpZiAocm9vdDEgPD0gcm9vdDMpIHsKICAgICAgICBpZiAocm9vdDIgPD0gcm9vdDMpIHsKICAgICAgICAgIHJldHVybiBbcm9vdDEsIHJvb3QyLCByb290M107CiAgICAgICAgfQogICAgICAgIHJldHVybiBbcm9vdDEsIHJvb3QzLCByb290Ml07CiAgICAgIH0KICAgICAgcmV0dXJuIFtyb290Mywgcm9vdDEsIHJvb3QyXTsKICAgIH0KICAgIGlmIChyb290MSA8PSByb290MykgewogICAgICByZXR1cm4gW3Jvb3QyLCByb290MSwgcm9vdDNdOwogICAgfQogICAgaWYgKHJvb3QyIDw9IHJvb3QzKSB7CiAgICAgIHJldHVybiBbcm9vdDIsIHJvb3QzLCByb290MV07CiAgICB9CiAgICByZXR1cm4gW3Jvb3QzLCByb290Miwgcm9vdDFdOwogIH0KICB2YXIgQ3ViaWNSZWFsUG9seW5vbWlhbCwgQ3ViaWNSZWFsUG9seW5vbWlhbF9kZWZhdWx0OwogIHZhciBpbml0X0N1YmljUmVhbFBvbHlub21pYWwgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0N1YmljUmVhbFBvbHlub21pYWwuanMiKCkgewogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfUXVhZHJhdGljUmVhbFBvbHlub21pYWwoKTsKICAgICAgQ3ViaWNSZWFsUG9seW5vbWlhbCA9IHt9OwogICAgICBDdWJpY1JlYWxQb2x5bm9taWFsLmNvbXB1dGVEaXNjcmltaW5hbnQgPSBmdW5jdGlvbihhMywgYiwgYywgZCkgewogICAgICAgIGlmICh0eXBlb2YgYTMgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYSBpcyBhIHJlcXVpcmVkIG51bWJlci4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSAibnVtYmVyIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImIgaXMgYSByZXF1aXJlZCBudW1iZXIuIik7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgYyAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJjIGlzIGEgcmVxdWlyZWQgbnVtYmVyLiIpOwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIGQgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZCBpcyBhIHJlcXVpcmVkIG51bWJlci4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgYTIyID0gYTMgKiBhMzsKICAgICAgICBjb25zdCBiMiA9IGIgKiBiOwogICAgICAgIGNvbnN0IGMyID0gYyAqIGM7CiAgICAgICAgY29uc3QgZDIgPSBkICogZDsKICAgICAgICBjb25zdCBkaXNjcmltaW5hbnQgPSAxOCAqIGEzICogYiAqIGMgKiBkICsgYjIgKiBjMiAtIDI3ICogYTIyICogZDIgLSA0ICogKGEzICogYzIgKiBjICsgYjIgKiBiICogZCk7CiAgICAgICAgcmV0dXJuIGRpc2NyaW1pbmFudDsKICAgICAgfTsKICAgICAgQ3ViaWNSZWFsUG9seW5vbWlhbC5jb21wdXRlUmVhbFJvb3RzID0gZnVuY3Rpb24oYTMsIGIsIGMsIGQpIHsKICAgICAgICBpZiAodHlwZW9mIGEzICE9PSAibnVtYmVyIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImEgaXMgYSByZXF1aXJlZCBudW1iZXIuIik7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgYiAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJiIGlzIGEgcmVxdWlyZWQgbnVtYmVyLiIpOwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIGMgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYyBpcyBhIHJlcXVpcmVkIG51bWJlci4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBkICE9PSAibnVtYmVyIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImQgaXMgYSByZXF1aXJlZCBudW1iZXIuIik7CiAgICAgICAgfQogICAgICAgIGxldCByb290czsKICAgICAgICBsZXQgcmF0aW87CiAgICAgICAgaWYgKGEzID09PSAwKSB7CiAgICAgICAgICByZXR1cm4gUXVhZHJhdGljUmVhbFBvbHlub21pYWxfZGVmYXVsdC5jb21wdXRlUmVhbFJvb3RzKGIsIGMsIGQpOwogICAgICAgIH0gZWxzZSBpZiAoYiA9PT0gMCkgewogICAgICAgICAgaWYgKGMgPT09IDApIHsKICAgICAgICAgICAgaWYgKGQgPT09IDApIHsKICAgICAgICAgICAgICByZXR1cm4gWzAsIDAsIDBdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJhdGlvID0gLWQgLyBhMzsKICAgICAgICAgICAgY29uc3Qgcm9vdCA9IHJhdGlvIDwgMCA/IC1NYXRoLnBvdygtcmF0aW8sIDEgLyAzKSA6IE1hdGgucG93KHJhdGlvLCAxIC8gMyk7CiAgICAgICAgICAgIHJldHVybiBbcm9vdCwgcm9vdCwgcm9vdF07CiAgICAgICAgICB9IGVsc2UgaWYgKGQgPT09IDApIHsKICAgICAgICAgICAgcm9vdHMgPSBRdWFkcmF0aWNSZWFsUG9seW5vbWlhbF9kZWZhdWx0LmNvbXB1dGVSZWFsUm9vdHMoYTMsIDAsIGMpOwogICAgICAgICAgICBpZiAocm9vdHMuTGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIFswXTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gW3Jvb3RzWzBdLCAwLCByb290c1sxXV07CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gY29tcHV0ZVJlYWxSb290cyhhMywgMCwgYywgZCk7CiAgICAgICAgfSBlbHNlIGlmIChjID09PSAwKSB7CiAgICAgICAgICBpZiAoZCA9PT0gMCkgewogICAgICAgICAgICByYXRpbyA9IC1iIC8gYTM7CiAgICAgICAgICAgIGlmIChyYXRpbyA8IDApIHsKICAgICAgICAgICAgICByZXR1cm4gW3JhdGlvLCAwLCAwXTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gWzAsIDAsIHJhdGlvXTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBjb21wdXRlUmVhbFJvb3RzKGEzLCBiLCAwLCBkKTsKICAgICAgICB9IGVsc2UgaWYgKGQgPT09IDApIHsKICAgICAgICAgIHJvb3RzID0gUXVhZHJhdGljUmVhbFBvbHlub21pYWxfZGVmYXVsdC5jb21wdXRlUmVhbFJvb3RzKGEzLCBiLCBjKTsKICAgICAgICAgIGlmIChyb290cy5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgcmV0dXJuIFswXTsKICAgICAgICAgIH0gZWxzZSBpZiAocm9vdHNbMV0gPD0gMCkgewogICAgICAgICAgICByZXR1cm4gW3Jvb3RzWzBdLCByb290c1sxXSwgMF07CiAgICAgICAgICB9IGVsc2UgaWYgKHJvb3RzWzBdID49IDApIHsKICAgICAgICAgICAgcmV0dXJuIFswLCByb290c1swXSwgcm9vdHNbMV1dOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIFtyb290c1swXSwgMCwgcm9vdHNbMV1dOwogICAgICAgIH0KICAgICAgICByZXR1cm4gY29tcHV0ZVJlYWxSb290cyhhMywgYiwgYywgZCk7CiAgICAgIH07CiAgICAgIEN1YmljUmVhbFBvbHlub21pYWxfZGVmYXVsdCA9IEN1YmljUmVhbFBvbHlub21pYWw7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9RdWFydGljUmVhbFBvbHlub21pYWwuanMKICBmdW5jdGlvbiBvcmlnaW5hbChhMywgYTIyLCBhMSwgYTApIHsKICAgIGNvbnN0IGEzU3F1YXJlZCA9IGEzICogYTM7CiAgICBjb25zdCBwID0gYTIyIC0gMyAqIGEzU3F1YXJlZCAvIDg7CiAgICBjb25zdCBxID0gYTEgLSBhMjIgKiBhMyAvIDIgKyBhM1NxdWFyZWQgKiBhMyAvIDg7CiAgICBjb25zdCByID0gYTAgLSBhMSAqIGEzIC8gNCArIGEyMiAqIGEzU3F1YXJlZCAvIDE2IC0gMyAqIGEzU3F1YXJlZCAqIGEzU3F1YXJlZCAvIDI1NjsKICAgIGNvbnN0IGN1YmljUm9vdHMgPSBDdWJpY1JlYWxQb2x5bm9taWFsX2RlZmF1bHQuY29tcHV0ZVJlYWxSb290cygKICAgICAgMSwKICAgICAgMiAqIHAsCiAgICAgIHAgKiBwIC0gNCAqIHIsCiAgICAgIC1xICogcQogICAgKTsKICAgIGlmIChjdWJpY1Jvb3RzLmxlbmd0aCA+IDApIHsKICAgICAgY29uc3QgdGVtcCA9IC1hMyAvIDQ7CiAgICAgIGNvbnN0IGhTcXVhcmVkID0gY3ViaWNSb290c1tjdWJpY1Jvb3RzLmxlbmd0aCAtIDFdOwogICAgICBpZiAoTWF0aC5hYnMoaFNxdWFyZWQpIDwgTWF0aF9kZWZhdWx0LkVQU0lMT04xNCkgewogICAgICAgIGNvbnN0IHJvb3RzID0gUXVhZHJhdGljUmVhbFBvbHlub21pYWxfZGVmYXVsdC5jb21wdXRlUmVhbFJvb3RzKDEsIHAsIHIpOwogICAgICAgIGlmIChyb290cy5sZW5ndGggPT09IDIpIHsKICAgICAgICAgIGNvbnN0IHJvb3QwID0gcm9vdHNbMF07CiAgICAgICAgICBjb25zdCByb290MSA9IHJvb3RzWzFdOwogICAgICAgICAgbGV0IHk7CiAgICAgICAgICBpZiAocm9vdDAgPj0gMCAmJiByb290MSA+PSAwKSB7CiAgICAgICAgICAgIGNvbnN0IHkwID0gTWF0aC5zcXJ0KHJvb3QwKTsKICAgICAgICAgICAgY29uc3QgeTEgPSBNYXRoLnNxcnQocm9vdDEpOwogICAgICAgICAgICByZXR1cm4gW3RlbXAgLSB5MSwgdGVtcCAtIHkwLCB0ZW1wICsgeTAsIHRlbXAgKyB5MV07CiAgICAgICAgICB9IGVsc2UgaWYgKHJvb3QwID49IDAgJiYgcm9vdDEgPCAwKSB7CiAgICAgICAgICAgIHkgPSBNYXRoLnNxcnQocm9vdDApOwogICAgICAgICAgICByZXR1cm4gW3RlbXAgLSB5LCB0ZW1wICsgeV07CiAgICAgICAgICB9IGVsc2UgaWYgKHJvb3QwIDwgMCAmJiByb290MSA+PSAwKSB7CiAgICAgICAgICAgIHkgPSBNYXRoLnNxcnQocm9vdDEpOwogICAgICAgICAgICByZXR1cm4gW3RlbXAgLSB5LCB0ZW1wICsgeV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBbXTsKICAgICAgfSBlbHNlIGlmIChoU3F1YXJlZCA+IDApIHsKICAgICAgICBjb25zdCBoID0gTWF0aC5zcXJ0KGhTcXVhcmVkKTsKICAgICAgICBjb25zdCBtID0gKHAgKyBoU3F1YXJlZCAtIHEgLyBoKSAvIDI7CiAgICAgICAgY29uc3QgbiA9IChwICsgaFNxdWFyZWQgKyBxIC8gaCkgLyAyOwogICAgICAgIGNvbnN0IHJvb3RzMSA9IFF1YWRyYXRpY1JlYWxQb2x5bm9taWFsX2RlZmF1bHQuY29tcHV0ZVJlYWxSb290cygxLCBoLCBtKTsKICAgICAgICBjb25zdCByb290czIgPSBRdWFkcmF0aWNSZWFsUG9seW5vbWlhbF9kZWZhdWx0LmNvbXB1dGVSZWFsUm9vdHMoMSwgLWgsIG4pOwogICAgICAgIGlmIChyb290czEubGVuZ3RoICE9PSAwKSB7CiAgICAgICAgICByb290czFbMF0gKz0gdGVtcDsKICAgICAgICAgIHJvb3RzMVsxXSArPSB0ZW1wOwogICAgICAgICAgaWYgKHJvb3RzMi5sZW5ndGggIT09IDApIHsKICAgICAgICAgICAgcm9vdHMyWzBdICs9IHRlbXA7CiAgICAgICAgICAgIHJvb3RzMlsxXSArPSB0ZW1wOwogICAgICAgICAgICBpZiAocm9vdHMxWzFdIDw9IHJvb3RzMlswXSkgewogICAgICAgICAgICAgIHJldHVybiBbcm9vdHMxWzBdLCByb290czFbMV0sIHJvb3RzMlswXSwgcm9vdHMyWzFdXTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyb290czJbMV0gPD0gcm9vdHMxWzBdKSB7CiAgICAgICAgICAgICAgcmV0dXJuIFtyb290czJbMF0sIHJvb3RzMlsxXSwgcm9vdHMxWzBdLCByb290czFbMV1dOwogICAgICAgICAgICB9IGVsc2UgaWYgKHJvb3RzMVswXSA+PSByb290czJbMF0gJiYgcm9vdHMxWzFdIDw9IHJvb3RzMlsxXSkgewogICAgICAgICAgICAgIHJldHVybiBbcm9vdHMyWzBdLCByb290czFbMF0sIHJvb3RzMVsxXSwgcm9vdHMyWzFdXTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyb290czJbMF0gPj0gcm9vdHMxWzBdICYmIHJvb3RzMlsxXSA8PSByb290czFbMV0pIHsKICAgICAgICAgICAgICByZXR1cm4gW3Jvb3RzMVswXSwgcm9vdHMyWzBdLCByb290czJbMV0sIHJvb3RzMVsxXV07CiAgICAgICAgICAgIH0gZWxzZSBpZiAocm9vdHMxWzBdID4gcm9vdHMyWzBdICYmIHJvb3RzMVswXSA8IHJvb3RzMlsxXSkgewogICAgICAgICAgICAgIHJldHVybiBbcm9vdHMyWzBdLCByb290czFbMF0sIHJvb3RzMlsxXSwgcm9vdHMxWzFdXTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gW3Jvb3RzMVswXSwgcm9vdHMyWzBdLCByb290czFbMV0sIHJvb3RzMlsxXV07CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gcm9vdHMxOwogICAgICAgIH0KICAgICAgICBpZiAocm9vdHMyLmxlbmd0aCAhPT0gMCkgewogICAgICAgICAgcm9vdHMyWzBdICs9IHRlbXA7CiAgICAgICAgICByb290czJbMV0gKz0gdGVtcDsKICAgICAgICAgIHJldHVybiByb290czI7CiAgICAgICAgfQogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIFtdOwogIH0KICBmdW5jdGlvbiBuZXVtYXJrKGEzLCBhMjIsIGExLCBhMCkgewogICAgY29uc3QgYTFTcXVhcmVkID0gYTEgKiBhMTsKICAgIGNvbnN0IGEyU3F1YXJlZCA9IGEyMiAqIGEyMjsKICAgIGNvbnN0IGEzU3F1YXJlZCA9IGEzICogYTM7CiAgICBjb25zdCBwID0gLTIgKiBhMjI7CiAgICBjb25zdCBxID0gYTEgKiBhMyArIGEyU3F1YXJlZCAtIDQgKiBhMDsKICAgIGNvbnN0IHIgPSBhM1NxdWFyZWQgKiBhMCAtIGExICogYTIyICogYTMgKyBhMVNxdWFyZWQ7CiAgICBjb25zdCBjdWJpY1Jvb3RzID0gQ3ViaWNSZWFsUG9seW5vbWlhbF9kZWZhdWx0LmNvbXB1dGVSZWFsUm9vdHMoMSwgcCwgcSwgcik7CiAgICBpZiAoY3ViaWNSb290cy5sZW5ndGggPiAwKSB7CiAgICAgIGNvbnN0IHkgPSBjdWJpY1Jvb3RzWzBdOwogICAgICBjb25zdCB0ZW1wID0gYTIyIC0geTsKICAgICAgY29uc3QgdGVtcFNxdWFyZWQgPSB0ZW1wICogdGVtcDsKICAgICAgY29uc3QgZzEgPSBhMyAvIDI7CiAgICAgIGNvbnN0IGgxID0gdGVtcCAvIDI7CiAgICAgIGNvbnN0IG0gPSB0ZW1wU3F1YXJlZCAtIDQgKiBhMDsKICAgICAgY29uc3QgbUVycm9yID0gdGVtcFNxdWFyZWQgKyA0ICogTWF0aC5hYnMoYTApOwogICAgICBjb25zdCBuID0gYTNTcXVhcmVkIC0gNCAqIHk7CiAgICAgIGNvbnN0IG5FcnJvciA9IGEzU3F1YXJlZCArIDQgKiBNYXRoLmFicyh5KTsKICAgICAgbGV0IGcyOwogICAgICBsZXQgaDI7CiAgICAgIGlmICh5IDwgMCB8fCBtICogbkVycm9yIDwgbiAqIG1FcnJvcikgewogICAgICAgIGNvbnN0IHNxdWFyZVJvb3RPZk4gPSBNYXRoLnNxcnQobik7CiAgICAgICAgZzIgPSBzcXVhcmVSb290T2ZOIC8gMjsKICAgICAgICBoMiA9IHNxdWFyZVJvb3RPZk4gPT09IDAgPyAwIDogKGEzICogaDEgLSBhMSkgLyBzcXVhcmVSb290T2ZOOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnN0IHNxdWFyZVJvb3RPZk0gPSBNYXRoLnNxcnQobSk7CiAgICAgICAgZzIgPSBzcXVhcmVSb290T2ZNID09PSAwID8gMCA6IChhMyAqIGgxIC0gYTEpIC8gc3F1YXJlUm9vdE9mTTsKICAgICAgICBoMiA9IHNxdWFyZVJvb3RPZk0gLyAyOwogICAgICB9CiAgICAgIGxldCBHOwogICAgICBsZXQgZzsKICAgICAgaWYgKGcxID09PSAwICYmIGcyID09PSAwKSB7CiAgICAgICAgRyA9IDA7CiAgICAgICAgZyA9IDA7CiAgICAgIH0gZWxzZSBpZiAoTWF0aF9kZWZhdWx0LnNpZ24oZzEpID09PSBNYXRoX2RlZmF1bHQuc2lnbihnMikpIHsKICAgICAgICBHID0gZzEgKyBnMjsKICAgICAgICBnID0geSAvIEc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZyA9IGcxIC0gZzI7CiAgICAgICAgRyA9IHkgLyBnOwogICAgICB9CiAgICAgIGxldCBIOwogICAgICBsZXQgaDsKICAgICAgaWYgKGgxID09PSAwICYmIGgyID09PSAwKSB7CiAgICAgICAgSCA9IDA7CiAgICAgICAgaCA9IDA7CiAgICAgIH0gZWxzZSBpZiAoTWF0aF9kZWZhdWx0LnNpZ24oaDEpID09PSBNYXRoX2RlZmF1bHQuc2lnbihoMikpIHsKICAgICAgICBIID0gaDEgKyBoMjsKICAgICAgICBoID0gYTAgLyBIOwogICAgICB9IGVsc2UgewogICAgICAgIGggPSBoMSAtIGgyOwogICAgICAgIEggPSBhMCAvIGg7CiAgICAgIH0KICAgICAgY29uc3Qgcm9vdHMxID0gUXVhZHJhdGljUmVhbFBvbHlub21pYWxfZGVmYXVsdC5jb21wdXRlUmVhbFJvb3RzKDEsIEcsIEgpOwogICAgICBjb25zdCByb290czIgPSBRdWFkcmF0aWNSZWFsUG9seW5vbWlhbF9kZWZhdWx0LmNvbXB1dGVSZWFsUm9vdHMoMSwgZywgaCk7CiAgICAgIGlmIChyb290czEubGVuZ3RoICE9PSAwKSB7CiAgICAgICAgaWYgKHJvb3RzMi5sZW5ndGggIT09IDApIHsKICAgICAgICAgIGlmIChyb290czFbMV0gPD0gcm9vdHMyWzBdKSB7CiAgICAgICAgICAgIHJldHVybiBbcm9vdHMxWzBdLCByb290czFbMV0sIHJvb3RzMlswXSwgcm9vdHMyWzFdXTsKICAgICAgICAgIH0gZWxzZSBpZiAocm9vdHMyWzFdIDw9IHJvb3RzMVswXSkgewogICAgICAgICAgICByZXR1cm4gW3Jvb3RzMlswXSwgcm9vdHMyWzFdLCByb290czFbMF0sIHJvb3RzMVsxXV07CiAgICAgICAgICB9IGVsc2UgaWYgKHJvb3RzMVswXSA+PSByb290czJbMF0gJiYgcm9vdHMxWzFdIDw9IHJvb3RzMlsxXSkgewogICAgICAgICAgICByZXR1cm4gW3Jvb3RzMlswXSwgcm9vdHMxWzBdLCByb290czFbMV0sIHJvb3RzMlsxXV07CiAgICAgICAgICB9IGVsc2UgaWYgKHJvb3RzMlswXSA+PSByb290czFbMF0gJiYgcm9vdHMyWzFdIDw9IHJvb3RzMVsxXSkgewogICAgICAgICAgICByZXR1cm4gW3Jvb3RzMVswXSwgcm9vdHMyWzBdLCByb290czJbMV0sIHJvb3RzMVsxXV07CiAgICAgICAgICB9IGVsc2UgaWYgKHJvb3RzMVswXSA+IHJvb3RzMlswXSAmJiByb290czFbMF0gPCByb290czJbMV0pIHsKICAgICAgICAgICAgcmV0dXJuIFtyb290czJbMF0sIHJvb3RzMVswXSwgcm9vdHMyWzFdLCByb290czFbMV1dOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIFtyb290czFbMF0sIHJvb3RzMlswXSwgcm9vdHMxWzFdLCByb290czJbMV1dOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcm9vdHMxOwogICAgICB9CiAgICAgIGlmIChyb290czIubGVuZ3RoICE9PSAwKSB7CiAgICAgICAgcmV0dXJuIHJvb3RzMjsKICAgICAgfQogICAgfQogICAgcmV0dXJuIFtdOwogIH0KICB2YXIgUXVhcnRpY1JlYWxQb2x5bm9taWFsLCBRdWFydGljUmVhbFBvbHlub21pYWxfZGVmYXVsdDsKICB2YXIgaW5pdF9RdWFydGljUmVhbFBvbHlub21pYWwgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1F1YXJ0aWNSZWFsUG9seW5vbWlhbC5qcyIoKSB7CiAgICAgIGluaXRfQ3ViaWNSZWFsUG9seW5vbWlhbCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X1F1YWRyYXRpY1JlYWxQb2x5bm9taWFsKCk7CiAgICAgIFF1YXJ0aWNSZWFsUG9seW5vbWlhbCA9IHt9OwogICAgICBRdWFydGljUmVhbFBvbHlub21pYWwuY29tcHV0ZURpc2NyaW1pbmFudCA9IGZ1bmN0aW9uKGEzLCBiLCBjLCBkLCBlKSB7CiAgICAgICAgaWYgKHR5cGVvZiBhMyAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhIGlzIGEgcmVxdWlyZWQgbnVtYmVyLiIpOwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIGIgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYiBpcyBhIHJlcXVpcmVkIG51bWJlci4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBjICE9PSAibnVtYmVyIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImMgaXMgYSByZXF1aXJlZCBudW1iZXIuIik7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgZCAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJkIGlzIGEgcmVxdWlyZWQgbnVtYmVyLiIpOwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIGUgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZSBpcyBhIHJlcXVpcmVkIG51bWJlci4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgYTIyID0gYTMgKiBhMzsKICAgICAgICBjb25zdCBhMzIgPSBhMjIgKiBhMzsKICAgICAgICBjb25zdCBiMiA9IGIgKiBiOwogICAgICAgIGNvbnN0IGIzID0gYjIgKiBiOwogICAgICAgIGNvbnN0IGMyID0gYyAqIGM7CiAgICAgICAgY29uc3QgYzMyID0gYzIgKiBjOwogICAgICAgIGNvbnN0IGQyID0gZCAqIGQ7CiAgICAgICAgY29uc3QgZDMgPSBkMiAqIGQ7CiAgICAgICAgY29uc3QgZTIgPSBlICogZTsKICAgICAgICBjb25zdCBlMyA9IGUyICogZTsKICAgICAgICBjb25zdCBkaXNjcmltaW5hbnQgPSBiMiAqIGMyICogZDIgLSA0ICogYjMgKiBkMyAtIDQgKiBhMyAqIGMzMiAqIGQyICsgMTggKiBhMyAqIGIgKiBjICogZDMgLSAyNyAqIGEyMiAqIGQyICogZDIgKyAyNTYgKiBhMzIgKiBlMyArIGUgKiAoMTggKiBiMyAqIGMgKiBkIC0gNCAqIGIyICogYzMyICsgMTYgKiBhMyAqIGMyICogYzIgLSA4MCAqIGEzICogYiAqIGMyICogZCAtIDYgKiBhMyAqIGIyICogZDIgKyAxNDQgKiBhMjIgKiBjICogZDIpICsgZTIgKiAoMTQ0ICogYTMgKiBiMiAqIGMgLSAyNyAqIGIyICogYjIgLSAxMjggKiBhMjIgKiBjMiAtIDE5MiAqIGEyMiAqIGIgKiBkKTsKICAgICAgICByZXR1cm4gZGlzY3JpbWluYW50OwogICAgICB9OwogICAgICBRdWFydGljUmVhbFBvbHlub21pYWwuY29tcHV0ZVJlYWxSb290cyA9IGZ1bmN0aW9uKGEzLCBiLCBjLCBkLCBlKSB7CiAgICAgICAgaWYgKHR5cGVvZiBhMyAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhIGlzIGEgcmVxdWlyZWQgbnVtYmVyLiIpOwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIGIgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYiBpcyBhIHJlcXVpcmVkIG51bWJlci4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBjICE9PSAibnVtYmVyIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImMgaXMgYSByZXF1aXJlZCBudW1iZXIuIik7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgZCAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJkIGlzIGEgcmVxdWlyZWQgbnVtYmVyLiIpOwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIGUgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZSBpcyBhIHJlcXVpcmVkIG51bWJlci4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKE1hdGguYWJzKGEzKSA8IE1hdGhfZGVmYXVsdC5FUFNJTE9OMTUpIHsKICAgICAgICAgIHJldHVybiBDdWJpY1JlYWxQb2x5bm9taWFsX2RlZmF1bHQuY29tcHV0ZVJlYWxSb290cyhiLCBjLCBkLCBlKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgYTMyID0gYiAvIGEzOwogICAgICAgIGNvbnN0IGEyMiA9IGMgLyBhMzsKICAgICAgICBjb25zdCBhMSA9IGQgLyBhMzsKICAgICAgICBjb25zdCBhMCA9IGUgLyBhMzsKICAgICAgICBsZXQgayA9IGEzMiA8IDAgPyAxIDogMDsKICAgICAgICBrICs9IGEyMiA8IDAgPyBrICsgMSA6IGs7CiAgICAgICAgayArPSBhMSA8IDAgPyBrICsgMSA6IGs7CiAgICAgICAgayArPSBhMCA8IDAgPyBrICsgMSA6IGs7CiAgICAgICAgc3dpdGNoIChrKSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbChhMzIsIGEyMiwgYTEsIGEwKTsKICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgcmV0dXJuIG5ldW1hcmsoYTMyLCBhMjIsIGExLCBhMCk7CiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHJldHVybiBuZXVtYXJrKGEzMiwgYTIyLCBhMSwgYTApOwogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwoYTMyLCBhMjIsIGExLCBhMCk7CiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbChhMzIsIGEyMiwgYTEsIGEwKTsKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgcmV0dXJuIG5ldW1hcmsoYTMyLCBhMjIsIGExLCBhMCk7CiAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbChhMzIsIGEyMiwgYTEsIGEwKTsKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsKGEzMiwgYTIyLCBhMSwgYTApOwogICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICByZXR1cm4gbmV1bWFyayhhMzIsIGEyMiwgYTEsIGEwKTsKICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsKGEzMiwgYTIyLCBhMSwgYTApOwogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsKGEzMiwgYTIyLCBhMSwgYTApOwogICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgcmV0dXJuIG5ldW1hcmsoYTMyLCBhMjIsIGExLCBhMCk7CiAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwoYTMyLCBhMjIsIGExLCBhMCk7CiAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwoYTMyLCBhMjIsIGExLCBhMCk7CiAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwoYTMyLCBhMjIsIGExLCBhMCk7CiAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwoYTMyLCBhMjIsIGExLCBhMCk7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgfTsKICAgICAgUXVhcnRpY1JlYWxQb2x5bm9taWFsX2RlZmF1bHQgPSBRdWFydGljUmVhbFBvbHlub21pYWw7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9SYXkuanMKICBmdW5jdGlvbiBSYXkob3JpZ2luLCBkaXJlY3Rpb24yKSB7CiAgICBkaXJlY3Rpb24yID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGRpcmVjdGlvbjIsIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPKSk7CiAgICBpZiAoIUNhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHMoZGlyZWN0aW9uMiwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pKSB7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoZGlyZWN0aW9uMiwgZGlyZWN0aW9uMik7CiAgICB9CiAgICB0aGlzLm9yaWdpbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShkZWZhdWx0VmFsdWVfZGVmYXVsdChvcmlnaW4sIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPKSk7CiAgICB0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjI7CiAgfQogIHZhciBSYXlfZGVmYXVsdDsKICB2YXIgaW5pdF9SYXkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1JheS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBSYXkuY2xvbmUgPSBmdW5jdGlvbihyYXksIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJheSkpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgUmF5KHJheS5vcmlnaW4sIHJheS5kaXJlY3Rpb24pOwogICAgICAgIH0KICAgICAgICByZXN1bHQub3JpZ2luID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHJheS5vcmlnaW4pOwogICAgICAgIHJlc3VsdC5kaXJlY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocmF5LmRpcmVjdGlvbik7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUmF5LmdldFBvaW50ID0gZnVuY3Rpb24ocmF5LCB0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJheSIsIHJheSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJ0IiwgdCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihyYXkuZGlyZWN0aW9uLCB0LCByZXN1bHQpOwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHJheS5vcmlnaW4sIHJlc3VsdCwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgUmF5X2RlZmF1bHQgPSBSYXk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9JbnRlcnNlY3Rpb25UZXN0cy5qcwogIGZ1bmN0aW9uIHNvbHZlUXVhZHJhdGljKGEzLCBiLCBjLCByZXN1bHQpIHsKICAgIGNvbnN0IGRldCA9IGIgKiBiIC0gNCAqIGEzICogYzsKICAgIGlmIChkZXQgPCAwKSB7CiAgICAgIHJldHVybiB2b2lkIDA7CiAgICB9IGVsc2UgaWYgKGRldCA+IDApIHsKICAgICAgY29uc3QgZGVub20gPSAxIC8gKDIgKiBhMyk7CiAgICAgIGNvbnN0IGRpc2MgPSBNYXRoLnNxcnQoZGV0KTsKICAgICAgY29uc3Qgcm9vdDAgPSAoLWIgKyBkaXNjKSAqIGRlbm9tOwogICAgICBjb25zdCByb290MSA9ICgtYiAtIGRpc2MpICogZGVub207CiAgICAgIGlmIChyb290MCA8IHJvb3QxKSB7CiAgICAgICAgcmVzdWx0LnJvb3QwID0gcm9vdDA7CiAgICAgICAgcmVzdWx0LnJvb3QxID0gcm9vdDE7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVzdWx0LnJvb3QwID0gcm9vdDE7CiAgICAgICAgcmVzdWx0LnJvb3QxID0gcm9vdDA7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICAgIGNvbnN0IHJvb3QgPSAtYiAvICgyICogYTMpOwogICAgaWYgKHJvb3QgPT09IDApIHsKICAgICAgcmV0dXJuIHZvaWQgMDsKICAgIH0KICAgIHJlc3VsdC5yb290MCA9IHJlc3VsdC5yb290MSA9IHJvb3Q7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICBmdW5jdGlvbiByYXlTcGhlcmUocmF5LCBzcGhlcmUsIHJlc3VsdCkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICByZXN1bHQgPSBuZXcgSW50ZXJ2YWxfZGVmYXVsdCgpOwogICAgfQogICAgY29uc3Qgb3JpZ2luID0gcmF5Lm9yaWdpbjsKICAgIGNvbnN0IGRpcmVjdGlvbjIgPSByYXkuZGlyZWN0aW9uOwogICAgY29uc3QgY2VudGVyID0gc3BoZXJlLmNlbnRlcjsKICAgIGNvbnN0IHJhZGl1c1NxdWFyZWQgPSBzcGhlcmUucmFkaXVzICogc3BoZXJlLnJhZGl1czsKICAgIGNvbnN0IGRpZmYgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3Qob3JpZ2luLCBjZW50ZXIsIHNjcmF0Y2hQVmVjKTsKICAgIGNvbnN0IGEzID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChkaXJlY3Rpb24yLCBkaXJlY3Rpb24yKTsKICAgIGNvbnN0IGIgPSAyICogQ2FydGVzaWFuM19kZWZhdWx0LmRvdChkaXJlY3Rpb24yLCBkaWZmKTsKICAgIGNvbnN0IGMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZChkaWZmKSAtIHJhZGl1c1NxdWFyZWQ7CiAgICBjb25zdCByb290cyA9IHNvbHZlUXVhZHJhdGljKGEzLCBiLCBjLCByYXlTcGhlcmVSb290cyk7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyb290cykpIHsKICAgICAgcmV0dXJuIHZvaWQgMDsKICAgIH0KICAgIHJlc3VsdC5zdGFydCA9IHJvb3RzLnJvb3QwOwogICAgcmVzdWx0LnN0b3AgPSByb290cy5yb290MTsKICAgIHJldHVybiByZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIGFkZFdpdGhDYW5jZWxsYXRpb25DaGVjazIobGVmdCwgcmlnaHQsIHRvbGVyYW5jZSkgewogICAgY29uc3QgZGlmZmVyZW5jZSA9IGxlZnQgKyByaWdodDsKICAgIGlmIChNYXRoX2RlZmF1bHQuc2lnbihsZWZ0KSAhPT0gTWF0aF9kZWZhdWx0LnNpZ24ocmlnaHQpICYmIE1hdGguYWJzKGRpZmZlcmVuY2UgLyBNYXRoLm1heChNYXRoLmFicyhsZWZ0KSwgTWF0aC5hYnMocmlnaHQpKSkgPCB0b2xlcmFuY2UpIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICByZXR1cm4gZGlmZmVyZW5jZTsKICB9CiAgZnVuY3Rpb24gcXVhZHJhdGljVmVjdG9yRXhwcmVzc2lvbihBLCBiLCBjLCB4LCB3KSB7CiAgICBjb25zdCB4U3F1YXJlZCA9IHggKiB4OwogICAgY29uc3Qgd1NxdWFyZWQgPSB3ICogdzsKICAgIGNvbnN0IGwyID0gKEFbTWF0cml4M19kZWZhdWx0LkNPTFVNTjFST1cxXSAtIEFbTWF0cml4M19kZWZhdWx0LkNPTFVNTjJST1cyXSkgKiB3U3F1YXJlZDsKICAgIGNvbnN0IGwxID0gdyAqICh4ICogYWRkV2l0aENhbmNlbGxhdGlvbkNoZWNrMigKICAgICAgQVtNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMVJPVzBdLAogICAgICBBW01hdHJpeDNfZGVmYXVsdC5DT0xVTU4wUk9XMV0sCiAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTUKICAgICkgKyBiLnkpOwogICAgY29uc3QgbDAgPSBBW01hdHJpeDNfZGVmYXVsdC5DT0xVTU4wUk9XMF0gKiB4U3F1YXJlZCArIEFbTWF0cml4M19kZWZhdWx0LkNPTFVNTjJST1cyXSAqIHdTcXVhcmVkICsgeCAqIGIueCArIGM7CiAgICBjb25zdCByMSA9IHdTcXVhcmVkICogYWRkV2l0aENhbmNlbGxhdGlvbkNoZWNrMigKICAgICAgQVtNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMlJPVzFdLAogICAgICBBW01hdHJpeDNfZGVmYXVsdC5DT0xVTU4xUk9XMl0sCiAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTUKICAgICk7CiAgICBjb25zdCByMCA9IHcgKiAoeCAqIGFkZFdpdGhDYW5jZWxsYXRpb25DaGVjazIoQVtNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMlJPVzBdLCBBW01hdHJpeDNfZGVmYXVsdC5DT0xVTU4wUk9XMl0pICsgYi56KTsKICAgIGxldCBjb3NpbmVzOwogICAgY29uc3Qgc29sdXRpb25zID0gW107CiAgICBpZiAocjAgPT09IDAgJiYgcjEgPT09IDApIHsKICAgICAgY29zaW5lcyA9IFF1YWRyYXRpY1JlYWxQb2x5bm9taWFsX2RlZmF1bHQuY29tcHV0ZVJlYWxSb290cyhsMiwgbDEsIGwwKTsKICAgICAgaWYgKGNvc2luZXMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgcmV0dXJuIHNvbHV0aW9uczsKICAgICAgfQogICAgICBjb25zdCBjb3NpbmUwID0gY29zaW5lc1swXTsKICAgICAgY29uc3Qgc2luZTAgPSBNYXRoLnNxcnQoTWF0aC5tYXgoMSAtIGNvc2luZTAgKiBjb3NpbmUwLCAwKSk7CiAgICAgIHNvbHV0aW9ucy5wdXNoKG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoeCwgdyAqIGNvc2luZTAsIHcgKiAtc2luZTApKTsKICAgICAgc29sdXRpb25zLnB1c2gobmV3IENhcnRlc2lhbjNfZGVmYXVsdCh4LCB3ICogY29zaW5lMCwgdyAqIHNpbmUwKSk7CiAgICAgIGlmIChjb3NpbmVzLmxlbmd0aCA9PT0gMikgewogICAgICAgIGNvbnN0IGNvc2luZTEgPSBjb3NpbmVzWzFdOwogICAgICAgIGNvbnN0IHNpbmUxID0gTWF0aC5zcXJ0KE1hdGgubWF4KDEgLSBjb3NpbmUxICogY29zaW5lMSwgMCkpOwogICAgICAgIHNvbHV0aW9ucy5wdXNoKG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoeCwgdyAqIGNvc2luZTEsIHcgKiAtc2luZTEpKTsKICAgICAgICBzb2x1dGlvbnMucHVzaChuZXcgQ2FydGVzaWFuM19kZWZhdWx0KHgsIHcgKiBjb3NpbmUxLCB3ICogc2luZTEpKTsKICAgICAgfQogICAgICByZXR1cm4gc29sdXRpb25zOwogICAgfQogICAgY29uc3QgcjBTcXVhcmVkID0gcjAgKiByMDsKICAgIGNvbnN0IHIxU3F1YXJlZCA9IHIxICogcjE7CiAgICBjb25zdCBsMlNxdWFyZWQgPSBsMiAqIGwyOwogICAgY29uc3QgcjByMSA9IHIwICogcjE7CiAgICBjb25zdCBjNCA9IGwyU3F1YXJlZCArIHIxU3F1YXJlZDsKICAgIGNvbnN0IGMzMiA9IDIgKiAobDEgKiBsMiArIHIwcjEpOwogICAgY29uc3QgYzIgPSAyICogbDAgKiBsMiArIGwxICogbDEgLSByMVNxdWFyZWQgKyByMFNxdWFyZWQ7CiAgICBjb25zdCBjMSA9IDIgKiAobDAgKiBsMSAtIHIwcjEpOwogICAgY29uc3QgYzAgPSBsMCAqIGwwIC0gcjBTcXVhcmVkOwogICAgaWYgKGM0ID09PSAwICYmIGMzMiA9PT0gMCAmJiBjMiA9PT0gMCAmJiBjMSA9PT0gMCkgewogICAgICByZXR1cm4gc29sdXRpb25zOwogICAgfQogICAgY29zaW5lcyA9IFF1YXJ0aWNSZWFsUG9seW5vbWlhbF9kZWZhdWx0LmNvbXB1dGVSZWFsUm9vdHMoYzQsIGMzMiwgYzIsIGMxLCBjMCk7CiAgICBjb25zdCBsZW5ndGggPSBjb3NpbmVzLmxlbmd0aDsKICAgIGlmIChsZW5ndGggPT09IDApIHsKICAgICAgcmV0dXJuIHNvbHV0aW9uczsKICAgIH0KICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgY29uc3QgY29zaW5lID0gY29zaW5lc1tpXTsKICAgICAgY29uc3QgY29zaW5lU3F1YXJlZCA9IGNvc2luZSAqIGNvc2luZTsKICAgICAgY29uc3Qgc2luZVNxdWFyZWQgPSBNYXRoLm1heCgxIC0gY29zaW5lU3F1YXJlZCwgMCk7CiAgICAgIGNvbnN0IHNpbmUgPSBNYXRoLnNxcnQoc2luZVNxdWFyZWQpOwogICAgICBsZXQgbGVmdDsKICAgICAgaWYgKE1hdGhfZGVmYXVsdC5zaWduKGwyKSA9PT0gTWF0aF9kZWZhdWx0LnNpZ24obDApKSB7CiAgICAgICAgbGVmdCA9IGFkZFdpdGhDYW5jZWxsYXRpb25DaGVjazIoCiAgICAgICAgICBsMiAqIGNvc2luZVNxdWFyZWQgKyBsMCwKICAgICAgICAgIGwxICogY29zaW5lLAogICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT04xMgogICAgICAgICk7CiAgICAgIH0gZWxzZSBpZiAoTWF0aF9kZWZhdWx0LnNpZ24obDApID09PSBNYXRoX2RlZmF1bHQuc2lnbihsMSAqIGNvc2luZSkpIHsKICAgICAgICBsZWZ0ID0gYWRkV2l0aENhbmNlbGxhdGlvbkNoZWNrMigKICAgICAgICAgIGwyICogY29zaW5lU3F1YXJlZCwKICAgICAgICAgIGwxICogY29zaW5lICsgbDAsCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjEyCiAgICAgICAgKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBsZWZ0ID0gYWRkV2l0aENhbmNlbGxhdGlvbkNoZWNrMigKICAgICAgICAgIGwyICogY29zaW5lU3F1YXJlZCArIGwxICogY29zaW5lLAogICAgICAgICAgbDAsCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjEyCiAgICAgICAgKTsKICAgICAgfQogICAgICBjb25zdCByaWdodCA9IGFkZFdpdGhDYW5jZWxsYXRpb25DaGVjazIoCiAgICAgICAgcjEgKiBjb3NpbmUsCiAgICAgICAgcjAsCiAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT04xNQogICAgICApOwogICAgICBjb25zdCBwcm9kdWN0ID0gbGVmdCAqIHJpZ2h0OwogICAgICBpZiAocHJvZHVjdCA8IDApIHsKICAgICAgICBzb2x1dGlvbnMucHVzaChuZXcgQ2FydGVzaWFuM19kZWZhdWx0KHgsIHcgKiBjb3NpbmUsIHcgKiBzaW5lKSk7CiAgICAgIH0gZWxzZSBpZiAocHJvZHVjdCA+IDApIHsKICAgICAgICBzb2x1dGlvbnMucHVzaChuZXcgQ2FydGVzaWFuM19kZWZhdWx0KHgsIHcgKiBjb3NpbmUsIHcgKiAtc2luZSkpOwogICAgICB9IGVsc2UgaWYgKHNpbmUgIT09IDApIHsKICAgICAgICBzb2x1dGlvbnMucHVzaChuZXcgQ2FydGVzaWFuM19kZWZhdWx0KHgsIHcgKiBjb3NpbmUsIHcgKiAtc2luZSkpOwogICAgICAgIHNvbHV0aW9ucy5wdXNoKG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoeCwgdyAqIGNvc2luZSwgdyAqIHNpbmUpKTsKICAgICAgICArK2k7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc29sdXRpb25zLnB1c2gobmV3IENhcnRlc2lhbjNfZGVmYXVsdCh4LCB3ICogY29zaW5lLCB3ICogc2luZSkpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gc29sdXRpb25zOwogIH0KICB2YXIgSW50ZXJzZWN0aW9uVGVzdHMsIHNjcmF0Y2hFZGdlMCwgc2NyYXRjaEVkZ2UxLCBzY3JhdGNoUFZlYywgc2NyYXRjaFRWZWMsIHNjcmF0Y2hRVmVjLCBzY3JhdGNoTGluZVNlZ21lbnRUcmlhbmdsZVJheSwgcmF5U3BoZXJlUm9vdHMsIHNjcmF0Y2hMaW5lU2VnbWVudFJheSwgc2NyYXRjaFEsIHNjcmF0Y2hXLCBmaXJzdEF4aXNTY3JhdGNoLCBzZWNvbmRBeGlzU2NyYXRjaCwgdGhpcmRBeGlzU2NyYXRjaCwgcmVmZXJlbmNlU2NyYXRjaCwgYkNhcnQsIGJTY3JhdGNoLCBidFNjcmF0Y2gsIGRpU2NyYXRjaCwgZFNjcmF0Y2gsIGNTY3JhdGNoLCB0ZW1wTWF0cml4LCBhU2NyYXRjaCwgc1NjcmF0Y2gsIGNsb3Nlc3RTY3JhdGNoLCBzdXJmUG9pbnRTY3JhdGNoLCBsaW5lU2VnbWVudFBsYW5lRGlmZmVyZW5jZSwgSW50ZXJzZWN0aW9uVGVzdHNfZGVmYXVsdDsKICB2YXIgaW5pdF9JbnRlcnNlY3Rpb25UZXN0cyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSW50ZXJzZWN0aW9uVGVzdHMuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9JbnRlcnZhbCgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9NYXRyaXgzKCk7CiAgICAgIGluaXRfUXVhZHJhdGljUmVhbFBvbHlub21pYWwoKTsKICAgICAgaW5pdF9RdWFydGljUmVhbFBvbHlub21pYWwoKTsKICAgICAgaW5pdF9SYXkoKTsKICAgICAgSW50ZXJzZWN0aW9uVGVzdHMgPSB7fTsKICAgICAgSW50ZXJzZWN0aW9uVGVzdHMucmF5UGxhbmUgPSBmdW5jdGlvbihyYXksIHBsYW5lLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmF5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwbGFuZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwbGFuZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBvcmlnaW4gPSByYXkub3JpZ2luOwogICAgICAgIGNvbnN0IGRpcmVjdGlvbjIgPSByYXkuZGlyZWN0aW9uOwogICAgICAgIGNvbnN0IG5vcm1hbDIgPSBwbGFuZS5ub3JtYWw7CiAgICAgICAgY29uc3QgZGVub21pbmF0b3IgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KG5vcm1hbDIsIGRpcmVjdGlvbjIpOwogICAgICAgIGlmIChNYXRoLmFicyhkZW5vbWluYXRvcikgPCBNYXRoX2RlZmF1bHQuRVBTSUxPTjE1KSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBjb25zdCB0ID0gKC1wbGFuZS5kaXN0YW5jZSAtIENhcnRlc2lhbjNfZGVmYXVsdC5kb3Qobm9ybWFsMiwgb3JpZ2luKSkgLyBkZW5vbWluYXRvcjsKICAgICAgICBpZiAodCA8IDApIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIHJlc3VsdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGRpcmVjdGlvbjIsIHQsIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQob3JpZ2luLCByZXN1bHQsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hFZGdlMCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEVkZ2UxID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUFZlYyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFRWZWMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hRVmVjID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBJbnRlcnNlY3Rpb25UZXN0cy5yYXlUcmlhbmdsZVBhcmFtZXRyaWMgPSBmdW5jdGlvbihyYXksIHAwLCBwMSwgcDIsIGN1bGxCYWNrRmFjZXMpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmF5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwMCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwMCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocDEpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicDEgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHAyKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInAyIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjdWxsQmFja0ZhY2VzID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY3VsbEJhY2tGYWNlcywgZmFsc2UpOwogICAgICAgIGNvbnN0IG9yaWdpbiA9IHJheS5vcmlnaW47CiAgICAgICAgY29uc3QgZGlyZWN0aW9uMiA9IHJheS5kaXJlY3Rpb247CiAgICAgICAgY29uc3QgZWRnZTAgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocDEsIHAwLCBzY3JhdGNoRWRnZTApOwogICAgICAgIGNvbnN0IGVkZ2UxID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHAyLCBwMCwgc2NyYXRjaEVkZ2UxKTsKICAgICAgICBjb25zdCBwID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKGRpcmVjdGlvbjIsIGVkZ2UxLCBzY3JhdGNoUFZlYyk7CiAgICAgICAgY29uc3QgZGV0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChlZGdlMCwgcCk7CiAgICAgICAgbGV0IHR2ZWM7CiAgICAgICAgbGV0IHE7CiAgICAgICAgbGV0IHUzOwogICAgICAgIGxldCB2MzsKICAgICAgICBsZXQgdDsKICAgICAgICBpZiAoY3VsbEJhY2tGYWNlcykgewogICAgICAgICAgaWYgKGRldCA8IE1hdGhfZGVmYXVsdC5FUFNJTE9ONikgewogICAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgICAgfQogICAgICAgICAgdHZlYyA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChvcmlnaW4sIHAwLCBzY3JhdGNoVFZlYyk7CiAgICAgICAgICB1MyA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodHZlYywgcCk7CiAgICAgICAgICBpZiAodTMgPCAwIHx8IHUzID4gZGV0KSB7CiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgICB9CiAgICAgICAgICBxID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHR2ZWMsIGVkZ2UwLCBzY3JhdGNoUVZlYyk7CiAgICAgICAgICB2MyA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QoZGlyZWN0aW9uMiwgcSk7CiAgICAgICAgICBpZiAodjMgPCAwIHx8IHUzICsgdjMgPiBkZXQpIHsKICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICAgIH0KICAgICAgICAgIHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGVkZ2UxLCBxKSAvIGRldDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKE1hdGguYWJzKGRldCkgPCBNYXRoX2RlZmF1bHQuRVBTSUxPTjYpIHsKICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGludkRldCA9IDEgLyBkZXQ7CiAgICAgICAgICB0dmVjID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KG9yaWdpbiwgcDAsIHNjcmF0Y2hUVmVjKTsKICAgICAgICAgIHUzID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh0dmVjLCBwKSAqIGludkRldDsKICAgICAgICAgIGlmICh1MyA8IDAgfHwgdTMgPiAxKSB7CiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgICB9CiAgICAgICAgICBxID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHR2ZWMsIGVkZ2UwLCBzY3JhdGNoUVZlYyk7CiAgICAgICAgICB2MyA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QoZGlyZWN0aW9uMiwgcSkgKiBpbnZEZXQ7CiAgICAgICAgICBpZiAodjMgPCAwIHx8IHUzICsgdjMgPiAxKSB7CiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgICB9CiAgICAgICAgICB0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChlZGdlMSwgcSkgKiBpbnZEZXQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgICB9OwogICAgICBJbnRlcnNlY3Rpb25UZXN0cy5yYXlUcmlhbmdsZSA9IGZ1bmN0aW9uKHJheSwgcDAsIHAxLCBwMiwgY3VsbEJhY2tGYWNlcywgcmVzdWx0KSB7CiAgICAgICAgY29uc3QgdCA9IEludGVyc2VjdGlvblRlc3RzLnJheVRyaWFuZ2xlUGFyYW1ldHJpYygKICAgICAgICAgIHJheSwKICAgICAgICAgIHAwLAogICAgICAgICAgcDEsCiAgICAgICAgICBwMiwKICAgICAgICAgIGN1bGxCYWNrRmFjZXMKICAgICAgICApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHQpIHx8IHQgPCAwKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHJheS5kaXJlY3Rpb24sIHQsIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocmF5Lm9yaWdpbiwgcmVzdWx0LCByZXN1bHQpOwogICAgICB9OwogICAgICBzY3JhdGNoTGluZVNlZ21lbnRUcmlhbmdsZVJheSA9IG5ldyBSYXlfZGVmYXVsdCgpOwogICAgICBJbnRlcnNlY3Rpb25UZXN0cy5saW5lU2VnbWVudFRyaWFuZ2xlID0gZnVuY3Rpb24odjAyLCB2MTIsIHAwLCBwMSwgcDIsIGN1bGxCYWNrRmFjZXMsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHYwMikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ2MCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodjEyKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInYxIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwMCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwMCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocDEpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicDEgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHAyKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInAyIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCByYXkgPSBzY3JhdGNoTGluZVNlZ21lbnRUcmlhbmdsZVJheTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUodjAyLCByYXkub3JpZ2luKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QodjEyLCB2MDIsIHJheS5kaXJlY3Rpb24pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUocmF5LmRpcmVjdGlvbiwgcmF5LmRpcmVjdGlvbik7CiAgICAgICAgY29uc3QgdCA9IEludGVyc2VjdGlvblRlc3RzLnJheVRyaWFuZ2xlUGFyYW1ldHJpYygKICAgICAgICAgIHJheSwKICAgICAgICAgIHAwLAogICAgICAgICAgcDEsCiAgICAgICAgICBwMiwKICAgICAgICAgIGN1bGxCYWNrRmFjZXMKICAgICAgICApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHQpIHx8IHQgPCAwIHx8IHQgPiBDYXJ0ZXNpYW4zX2RlZmF1bHQuZGlzdGFuY2UodjAyLCB2MTIpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHJheS5kaXJlY3Rpb24sIHQsIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocmF5Lm9yaWdpbiwgcmVzdWx0LCByZXN1bHQpOwogICAgICB9OwogICAgICByYXlTcGhlcmVSb290cyA9IHsKICAgICAgICByb290MDogMCwKICAgICAgICByb290MTogMAogICAgICB9OwogICAgICBJbnRlcnNlY3Rpb25UZXN0cy5yYXlTcGhlcmUgPSBmdW5jdGlvbihyYXksIHNwaGVyZSwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInJheSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoc3BoZXJlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInNwaGVyZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0ID0gcmF5U3BoZXJlKHJheSwgc3BoZXJlLCByZXN1bHQpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkgfHwgcmVzdWx0LnN0b3AgPCAwKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICByZXN1bHQuc3RhcnQgPSBNYXRoLm1heChyZXN1bHQuc3RhcnQsIDApOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hMaW5lU2VnbWVudFJheSA9IG5ldyBSYXlfZGVmYXVsdCgpOwogICAgICBJbnRlcnNlY3Rpb25UZXN0cy5saW5lU2VnbWVudFNwaGVyZSA9IGZ1bmN0aW9uKHAwLCBwMSwgc3BoZXJlLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwMCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwMCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocDEpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicDEgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHNwaGVyZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJzcGhlcmUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJheSA9IHNjcmF0Y2hMaW5lU2VnbWVudFJheTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocDAsIHJheS5vcmlnaW4pOwogICAgICAgIGNvbnN0IGRpcmVjdGlvbjIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocDEsIHAwLCByYXkuZGlyZWN0aW9uKTsKICAgICAgICBjb25zdCBtYXhUID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZShkaXJlY3Rpb24yKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGRpcmVjdGlvbjIsIGRpcmVjdGlvbjIpOwogICAgICAgIHJlc3VsdCA9IHJheVNwaGVyZShyYXksIHNwaGVyZSwgcmVzdWx0KTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpIHx8IHJlc3VsdC5zdG9wIDwgMCB8fCByZXN1bHQuc3RhcnQgPiBtYXhUKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICByZXN1bHQuc3RhcnQgPSBNYXRoLm1heChyZXN1bHQuc3RhcnQsIDApOwogICAgICAgIHJlc3VsdC5zdG9wID0gTWF0aC5taW4ocmVzdWx0LnN0b3AsIG1heFQpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hRID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoVyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgSW50ZXJzZWN0aW9uVGVzdHMucmF5RWxsaXBzb2lkID0gZnVuY3Rpb24ocmF5LCBlbGxpcHNvaWQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmF5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChlbGxpcHNvaWQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZWxsaXBzb2lkIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBpbnZlcnNlUmFkaWkgPSBlbGxpcHNvaWQub25lT3ZlclJhZGlpOwogICAgICAgIGNvbnN0IHEgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlDb21wb25lbnRzKGludmVyc2VSYWRpaSwgcmF5Lm9yaWdpbiwgc2NyYXRjaFEpOwogICAgICAgIGNvbnN0IHcgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlDb21wb25lbnRzKAogICAgICAgICAgaW52ZXJzZVJhZGlpLAogICAgICAgICAgcmF5LmRpcmVjdGlvbiwKICAgICAgICAgIHNjcmF0Y2hXCiAgICAgICAgKTsKICAgICAgICBjb25zdCBxMjIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZChxKTsKICAgICAgICBjb25zdCBxdyA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QocSwgdyk7CiAgICAgICAgbGV0IGRpZmZlcmVuY2UsIHcyLCBwcm9kdWN0LCBkaXNjcmltaW5hbnQsIHRlbXA7CiAgICAgICAgaWYgKHEyMiA+IDEpIHsKICAgICAgICAgIGlmIChxdyA+PSAwKSB7CiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBxdzIgPSBxdyAqIHF3OwogICAgICAgICAgZGlmZmVyZW5jZSA9IHEyMiAtIDE7CiAgICAgICAgICB3MiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGVTcXVhcmVkKHcpOwogICAgICAgICAgcHJvZHVjdCA9IHcyICogZGlmZmVyZW5jZTsKICAgICAgICAgIGlmIChxdzIgPCBwcm9kdWN0KSB7CiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgICB9IGVsc2UgaWYgKHF3MiA+IHByb2R1Y3QpIHsKICAgICAgICAgICAgZGlzY3JpbWluYW50ID0gcXcgKiBxdyAtIHByb2R1Y3Q7CiAgICAgICAgICAgIHRlbXAgPSAtcXcgKyBNYXRoLnNxcnQoZGlzY3JpbWluYW50KTsKICAgICAgICAgICAgY29uc3Qgcm9vdDAgPSB0ZW1wIC8gdzI7CiAgICAgICAgICAgIGNvbnN0IHJvb3QxID0gZGlmZmVyZW5jZSAvIHRlbXA7CiAgICAgICAgICAgIGlmIChyb290MCA8IHJvb3QxKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnRlcnZhbF9kZWZhdWx0KHJvb3QwLCByb290MSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICBzdGFydDogcm9vdDEsCiAgICAgICAgICAgICAgc3RvcDogcm9vdDAKICAgICAgICAgICAgfTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IHJvb3QgPSBNYXRoLnNxcnQoZGlmZmVyZW5jZSAvIHcyKTsKICAgICAgICAgIHJldHVybiBuZXcgSW50ZXJ2YWxfZGVmYXVsdChyb290LCByb290KTsKICAgICAgICB9IGVsc2UgaWYgKHEyMiA8IDEpIHsKICAgICAgICAgIGRpZmZlcmVuY2UgPSBxMjIgLSAxOwogICAgICAgICAgdzIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCh3KTsKICAgICAgICAgIHByb2R1Y3QgPSB3MiAqIGRpZmZlcmVuY2U7CiAgICAgICAgICBkaXNjcmltaW5hbnQgPSBxdyAqIHF3IC0gcHJvZHVjdDsKICAgICAgICAgIHRlbXAgPSAtcXcgKyBNYXRoLnNxcnQoZGlzY3JpbWluYW50KTsKICAgICAgICAgIHJldHVybiBuZXcgSW50ZXJ2YWxfZGVmYXVsdCgwLCB0ZW1wIC8gdzIpOwogICAgICAgIH0KICAgICAgICBpZiAocXcgPCAwKSB7CiAgICAgICAgICB3MiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGVTcXVhcmVkKHcpOwogICAgICAgICAgcmV0dXJuIG5ldyBJbnRlcnZhbF9kZWZhdWx0KDAsIC1xdyAvIHcyKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgfTsKICAgICAgZmlyc3RBeGlzU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2Vjb25kQXhpc1NjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHRoaXJkQXhpc1NjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHJlZmVyZW5jZVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGJDYXJ0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBiU2NyYXRjaCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgYnRTY3JhdGNoID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICBkaVNjcmF0Y2ggPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIGRTY3JhdGNoID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICBjU2NyYXRjaCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgdGVtcE1hdHJpeCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgYVNjcmF0Y2ggPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIHNTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjbG9zZXN0U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc3VyZlBvaW50U2NyYXRjaCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBJbnRlcnNlY3Rpb25UZXN0cy5ncmF6aW5nQWx0aXR1ZGVMb2NhdGlvbiA9IGZ1bmN0aW9uKHJheSwgZWxsaXBzb2lkKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInJheSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZWxsaXBzb2lkKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImVsbGlwc29pZCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgcG9zaXRpb24gPSByYXkub3JpZ2luOwogICAgICAgIGNvbnN0IGRpcmVjdGlvbjIgPSByYXkuZGlyZWN0aW9uOwogICAgICAgIGlmICghQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFscyhwb3NpdGlvbiwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pKSB7CiAgICAgICAgICBjb25zdCBub3JtYWwyID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwb3NpdGlvbiwgZmlyc3RBeGlzU2NyYXRjaCk7CiAgICAgICAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmRvdChkaXJlY3Rpb24yLCBub3JtYWwyKSA+PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgaW50ZXJzZWN0cyA9IGRlZmluZWRfZGVmYXVsdCh0aGlzLnJheUVsbGlwc29pZChyYXksIGVsbGlwc29pZCkpOwogICAgICAgIGNvbnN0IGYgPSBlbGxpcHNvaWQudHJhbnNmb3JtUG9zaXRpb25Ub1NjYWxlZFNwYWNlKAogICAgICAgICAgZGlyZWN0aW9uMiwKICAgICAgICAgIGZpcnN0QXhpc1NjcmF0Y2gKICAgICAgICApOwogICAgICAgIGNvbnN0IGZpcnN0QXhpcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoZiwgZik7CiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1vc3RPcnRob2dvbmFsQXhpcyhmLCByZWZlcmVuY2VTY3JhdGNoKTsKICAgICAgICBjb25zdCBzZWNvbmRBeGlzID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhyZWZlcmVuY2UsIGZpcnN0QXhpcywgc2Vjb25kQXhpc1NjcmF0Y2gpLAogICAgICAgICAgc2Vjb25kQXhpc1NjcmF0Y2gKICAgICAgICApOwogICAgICAgIGNvbnN0IHRoaXJkQXhpcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoZmlyc3RBeGlzLCBzZWNvbmRBeGlzLCB0aGlyZEF4aXNTY3JhdGNoKSwKICAgICAgICAgIHRoaXJkQXhpc1NjcmF0Y2gKICAgICAgICApOwogICAgICAgIGNvbnN0IEIgPSBiU2NyYXRjaDsKICAgICAgICBCWzBdID0gZmlyc3RBeGlzLng7CiAgICAgICAgQlsxXSA9IGZpcnN0QXhpcy55OwogICAgICAgIEJbMl0gPSBmaXJzdEF4aXMuejsKICAgICAgICBCWzNdID0gc2Vjb25kQXhpcy54OwogICAgICAgIEJbNF0gPSBzZWNvbmRBeGlzLnk7CiAgICAgICAgQls1XSA9IHNlY29uZEF4aXMuejsKICAgICAgICBCWzZdID0gdGhpcmRBeGlzLng7CiAgICAgICAgQls3XSA9IHRoaXJkQXhpcy55OwogICAgICAgIEJbOF0gPSB0aGlyZEF4aXMuejsKICAgICAgICBjb25zdCBCX1QgPSBNYXRyaXgzX2RlZmF1bHQudHJhbnNwb3NlKEIsIGJ0U2NyYXRjaCk7CiAgICAgICAgY29uc3QgRF9JID0gTWF0cml4M19kZWZhdWx0LmZyb21TY2FsZShlbGxpcHNvaWQucmFkaWksIGRpU2NyYXRjaCk7CiAgICAgICAgY29uc3QgRCA9IE1hdHJpeDNfZGVmYXVsdC5mcm9tU2NhbGUoZWxsaXBzb2lkLm9uZU92ZXJSYWRpaSwgZFNjcmF0Y2gpOwogICAgICAgIGNvbnN0IEMgPSBjU2NyYXRjaDsKICAgICAgICBDWzBdID0gMDsKICAgICAgICBDWzFdID0gLWRpcmVjdGlvbjIuejsKICAgICAgICBDWzJdID0gZGlyZWN0aW9uMi55OwogICAgICAgIENbM10gPSBkaXJlY3Rpb24yLno7CiAgICAgICAgQ1s0XSA9IDA7CiAgICAgICAgQ1s1XSA9IC1kaXJlY3Rpb24yLng7CiAgICAgICAgQ1s2XSA9IC1kaXJlY3Rpb24yLnk7CiAgICAgICAgQ1s3XSA9IGRpcmVjdGlvbjIueDsKICAgICAgICBDWzhdID0gMDsKICAgICAgICBjb25zdCB0ZW1wID0gTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5KAogICAgICAgICAgTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5KEJfVCwgRCwgdGVtcE1hdHJpeCksCiAgICAgICAgICBDLAogICAgICAgICAgdGVtcE1hdHJpeAogICAgICAgICk7CiAgICAgICAgY29uc3QgQSA9IE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseSgKICAgICAgICAgIE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseSh0ZW1wLCBEX0ksIGFTY3JhdGNoKSwKICAgICAgICAgIEIsCiAgICAgICAgICBhU2NyYXRjaAogICAgICAgICk7CiAgICAgICAgY29uc3QgYiA9IE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKHRlbXAsIHBvc2l0aW9uLCBiQ2FydCk7CiAgICAgICAgY29uc3Qgc29sdXRpb25zID0gcXVhZHJhdGljVmVjdG9yRXhwcmVzc2lvbigKICAgICAgICAgIEEsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGIsIGZpcnN0QXhpc1NjcmF0Y2gpLAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICAxCiAgICAgICAgKTsKICAgICAgICBsZXQgczsKICAgICAgICBsZXQgYWx0aXR1ZGU7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gc29sdXRpb25zLmxlbmd0aDsKICAgICAgICBpZiAobGVuZ3RoID4gMCkgewogICAgICAgICAgbGV0IGNsb3Nlc3QgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIGNsb3Nlc3RTY3JhdGNoKTsKICAgICAgICAgIGxldCBtYXhpbXVtVmFsdWUgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIHMgPSBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVZlY3RvcigKICAgICAgICAgICAgICBEX0ksCiAgICAgICAgICAgICAgTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IoQiwgc29sdXRpb25zW2ldLCBzU2NyYXRjaCksCiAgICAgICAgICAgICAgc1NjcmF0Y2gKICAgICAgICAgICAgKTsKICAgICAgICAgICAgY29uc3QgdjMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChzLCBwb3NpdGlvbiwgcmVmZXJlbmNlU2NyYXRjaCksCiAgICAgICAgICAgICAgcmVmZXJlbmNlU2NyYXRjaAogICAgICAgICAgICApOwogICAgICAgICAgICBjb25zdCBkb3RQcm9kdWN0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh2MywgZGlyZWN0aW9uMik7CiAgICAgICAgICAgIGlmIChkb3RQcm9kdWN0ID4gbWF4aW11bVZhbHVlKSB7CiAgICAgICAgICAgICAgbWF4aW11bVZhbHVlID0gZG90UHJvZHVjdDsKICAgICAgICAgICAgICBjbG9zZXN0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHMsIGNsb3Nlc3QpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBzdXJmYWNlUG9pbnQgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoCiAgICAgICAgICAgIGNsb3Nlc3QsCiAgICAgICAgICAgIHN1cmZQb2ludFNjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgICBtYXhpbXVtVmFsdWUgPSBNYXRoX2RlZmF1bHQuY2xhbXAobWF4aW11bVZhbHVlLCAwLCAxKTsKICAgICAgICAgIGFsdGl0dWRlID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSgKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNsb3Nlc3QsIHBvc2l0aW9uLCByZWZlcmVuY2VTY3JhdGNoKQogICAgICAgICAgKSAqIE1hdGguc3FydCgxIC0gbWF4aW11bVZhbHVlICogbWF4aW11bVZhbHVlKTsKICAgICAgICAgIGFsdGl0dWRlID0gaW50ZXJzZWN0cyA/IC1hbHRpdHVkZSA6IGFsdGl0dWRlOwogICAgICAgICAgc3VyZmFjZVBvaW50LmhlaWdodCA9IGFsdGl0dWRlOwogICAgICAgICAgcmV0dXJuIGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihzdXJmYWNlUG9pbnQsIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgIH07CiAgICAgIGxpbmVTZWdtZW50UGxhbmVEaWZmZXJlbmNlID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBJbnRlcnNlY3Rpb25UZXN0cy5saW5lU2VnbWVudFBsYW5lID0gZnVuY3Rpb24oZW5kUG9pbnQwLCBlbmRQb2ludDEsIHBsYW5lLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChlbmRQb2ludDApKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZW5kUG9pbnQwIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChlbmRQb2ludDEpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZW5kUG9pbnQxIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwbGFuZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwbGFuZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBkaWZmZXJlbmNlID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgICAgZW5kUG9pbnQxLAogICAgICAgICAgZW5kUG9pbnQwLAogICAgICAgICAgbGluZVNlZ21lbnRQbGFuZURpZmZlcmVuY2UKICAgICAgICApOwogICAgICAgIGNvbnN0IG5vcm1hbDIgPSBwbGFuZS5ub3JtYWw7CiAgICAgICAgY29uc3QgbkRvdERpZmYgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KG5vcm1hbDIsIGRpZmZlcmVuY2UpOwogICAgICAgIGlmIChNYXRoLmFicyhuRG90RGlmZikgPCBNYXRoX2RlZmF1bHQuRVBTSUxPTjYpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG5Eb3RQMCA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3Qobm9ybWFsMiwgZW5kUG9pbnQwKTsKICAgICAgICBjb25zdCB0ID0gLShwbGFuZS5kaXN0YW5jZSArIG5Eb3RQMCkgLyBuRG90RGlmZjsKICAgICAgICBpZiAodCA8IDAgfHwgdCA+IDEpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGRpZmZlcmVuY2UsIHQsIHJlc3VsdCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChlbmRQb2ludDAsIHJlc3VsdCwgcmVzdWx0KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBJbnRlcnNlY3Rpb25UZXN0cy50cmlhbmdsZVBsYW5lSW50ZXJzZWN0aW9uID0gZnVuY3Rpb24ocDAsIHAxLCBwMiwgcGxhbmUpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwMCkgfHwgIWRlZmluZWRfZGVmYXVsdChwMSkgfHwgIWRlZmluZWRfZGVmYXVsdChwMikgfHwgIWRlZmluZWRfZGVmYXVsdChwbGFuZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwMCwgcDEsIHAyLCBhbmQgcGxhbmUgYXJlIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBwbGFuZU5vcm1hbCA9IHBsYW5lLm5vcm1hbDsKICAgICAgICBjb25zdCBwbGFuZUQgPSBwbGFuZS5kaXN0YW5jZTsKICAgICAgICBjb25zdCBwMEJlaGluZCA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QocGxhbmVOb3JtYWwsIHAwKSArIHBsYW5lRCA8IDA7CiAgICAgICAgY29uc3QgcDFCZWhpbmQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KHBsYW5lTm9ybWFsLCBwMSkgKyBwbGFuZUQgPCAwOwogICAgICAgIGNvbnN0IHAyQmVoaW5kID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChwbGFuZU5vcm1hbCwgcDIpICsgcGxhbmVEIDwgMDsKICAgICAgICBsZXQgbnVtQmVoaW5kID0gMDsKICAgICAgICBudW1CZWhpbmQgKz0gcDBCZWhpbmQgPyAxIDogMDsKICAgICAgICBudW1CZWhpbmQgKz0gcDFCZWhpbmQgPyAxIDogMDsKICAgICAgICBudW1CZWhpbmQgKz0gcDJCZWhpbmQgPyAxIDogMDsKICAgICAgICBsZXQgdTEyLCB1MjI7CiAgICAgICAgaWYgKG51bUJlaGluZCA9PT0gMSB8fCBudW1CZWhpbmQgPT09IDIpIHsKICAgICAgICAgIHUxMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgICAgIHUyMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgaWYgKG51bUJlaGluZCA9PT0gMSkgewogICAgICAgICAgaWYgKHAwQmVoaW5kKSB7CiAgICAgICAgICAgIEludGVyc2VjdGlvblRlc3RzLmxpbmVTZWdtZW50UGxhbmUocDAsIHAxLCBwbGFuZSwgdTEyKTsKICAgICAgICAgICAgSW50ZXJzZWN0aW9uVGVzdHMubGluZVNlZ21lbnRQbGFuZShwMCwgcDIsIHBsYW5lLCB1MjIpOwogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIHBvc2l0aW9uczogW3AwLCBwMSwgcDIsIHUxMiwgdTIyXSwKICAgICAgICAgICAgICBpbmRpY2VzOiBbCiAgICAgICAgICAgICAgICAvLyBCZWhpbmQKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICAzLAogICAgICAgICAgICAgICAgNCwKICAgICAgICAgICAgICAgIC8vIEluIGZyb250CiAgICAgICAgICAgICAgICAxLAogICAgICAgICAgICAgICAgMiwKICAgICAgICAgICAgICAgIDQsCiAgICAgICAgICAgICAgICAxLAogICAgICAgICAgICAgICAgNCwKICAgICAgICAgICAgICAgIDMKICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH07CiAgICAgICAgICB9IGVsc2UgaWYgKHAxQmVoaW5kKSB7CiAgICAgICAgICAgIEludGVyc2VjdGlvblRlc3RzLmxpbmVTZWdtZW50UGxhbmUocDEsIHAyLCBwbGFuZSwgdTEyKTsKICAgICAgICAgICAgSW50ZXJzZWN0aW9uVGVzdHMubGluZVNlZ21lbnRQbGFuZShwMSwgcDAsIHBsYW5lLCB1MjIpOwogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIHBvc2l0aW9uczogW3AwLCBwMSwgcDIsIHUxMiwgdTIyXSwKICAgICAgICAgICAgICBpbmRpY2VzOiBbCiAgICAgICAgICAgICAgICAvLyBCZWhpbmQKICAgICAgICAgICAgICAgIDEsCiAgICAgICAgICAgICAgICAzLAogICAgICAgICAgICAgICAgNCwKICAgICAgICAgICAgICAgIC8vIEluIGZyb250CiAgICAgICAgICAgICAgICAyLAogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIDQsCiAgICAgICAgICAgICAgICAyLAogICAgICAgICAgICAgICAgNCwKICAgICAgICAgICAgICAgIDMKICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH07CiAgICAgICAgICB9IGVsc2UgaWYgKHAyQmVoaW5kKSB7CiAgICAgICAgICAgIEludGVyc2VjdGlvblRlc3RzLmxpbmVTZWdtZW50UGxhbmUocDIsIHAwLCBwbGFuZSwgdTEyKTsKICAgICAgICAgICAgSW50ZXJzZWN0aW9uVGVzdHMubGluZVNlZ21lbnRQbGFuZShwMiwgcDEsIHBsYW5lLCB1MjIpOwogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIHBvc2l0aW9uczogW3AwLCBwMSwgcDIsIHUxMiwgdTIyXSwKICAgICAgICAgICAgICBpbmRpY2VzOiBbCiAgICAgICAgICAgICAgICAvLyBCZWhpbmQKICAgICAgICAgICAgICAgIDIsCiAgICAgICAgICAgICAgICAzLAogICAgICAgICAgICAgICAgNCwKICAgICAgICAgICAgICAgIC8vIEluIGZyb250CiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgMSwKICAgICAgICAgICAgICAgIDQsCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgNCwKICAgICAgICAgICAgICAgIDMKICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChudW1CZWhpbmQgPT09IDIpIHsKICAgICAgICAgIGlmICghcDBCZWhpbmQpIHsKICAgICAgICAgICAgSW50ZXJzZWN0aW9uVGVzdHMubGluZVNlZ21lbnRQbGFuZShwMSwgcDAsIHBsYW5lLCB1MTIpOwogICAgICAgICAgICBJbnRlcnNlY3Rpb25UZXN0cy5saW5lU2VnbWVudFBsYW5lKHAyLCBwMCwgcGxhbmUsIHUyMik7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgcG9zaXRpb25zOiBbcDAsIHAxLCBwMiwgdTEyLCB1MjJdLAogICAgICAgICAgICAgIGluZGljZXM6IFsKICAgICAgICAgICAgICAgIC8vIEJlaGluZAogICAgICAgICAgICAgICAgMSwKICAgICAgICAgICAgICAgIDIsCiAgICAgICAgICAgICAgICA0LAogICAgICAgICAgICAgICAgMSwKICAgICAgICAgICAgICAgIDQsCiAgICAgICAgICAgICAgICAzLAogICAgICAgICAgICAgICAgLy8gSW4gZnJvbnQKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICAzLAogICAgICAgICAgICAgICAgNAogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfTsKICAgICAgICAgIH0gZWxzZSBpZiAoIXAxQmVoaW5kKSB7CiAgICAgICAgICAgIEludGVyc2VjdGlvblRlc3RzLmxpbmVTZWdtZW50UGxhbmUocDIsIHAxLCBwbGFuZSwgdTEyKTsKICAgICAgICAgICAgSW50ZXJzZWN0aW9uVGVzdHMubGluZVNlZ21lbnRQbGFuZShwMCwgcDEsIHBsYW5lLCB1MjIpOwogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIHBvc2l0aW9uczogW3AwLCBwMSwgcDIsIHUxMiwgdTIyXSwKICAgICAgICAgICAgICBpbmRpY2VzOiBbCiAgICAgICAgICAgICAgICAvLyBCZWhpbmQKICAgICAgICAgICAgICAgIDIsCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgNCwKICAgICAgICAgICAgICAgIDIsCiAgICAgICAgICAgICAgICA0LAogICAgICAgICAgICAgICAgMywKICAgICAgICAgICAgICAgIC8vIEluIGZyb250CiAgICAgICAgICAgICAgICAxLAogICAgICAgICAgICAgICAgMywKICAgICAgICAgICAgICAgIDQKICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH07CiAgICAgICAgICB9IGVsc2UgaWYgKCFwMkJlaGluZCkgewogICAgICAgICAgICBJbnRlcnNlY3Rpb25UZXN0cy5saW5lU2VnbWVudFBsYW5lKHAwLCBwMiwgcGxhbmUsIHUxMik7CiAgICAgICAgICAgIEludGVyc2VjdGlvblRlc3RzLmxpbmVTZWdtZW50UGxhbmUocDEsIHAyLCBwbGFuZSwgdTIyKTsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICBwb3NpdGlvbnM6IFtwMCwgcDEsIHAyLCB1MTIsIHUyMl0sCiAgICAgICAgICAgICAgaW5kaWNlczogWwogICAgICAgICAgICAgICAgLy8gQmVoaW5kCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgMSwKICAgICAgICAgICAgICAgIDQsCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgNCwKICAgICAgICAgICAgICAgIDMsCiAgICAgICAgICAgICAgICAvLyBJbiBmcm9udAogICAgICAgICAgICAgICAgMiwKICAgICAgICAgICAgICAgIDMsCiAgICAgICAgICAgICAgICA0CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICB9OwogICAgICBJbnRlcnNlY3Rpb25UZXN0c19kZWZhdWx0ID0gSW50ZXJzZWN0aW9uVGVzdHM7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9QbGFuZS5qcwogIGZ1bmN0aW9uIFBsYW5lKG5vcm1hbDIsIGRpc3RhbmNlKSB7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm5vcm1hbCIsIG5vcm1hbDIpOwogICAgaWYgKCFNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZShub3JtYWwyKSwKICAgICAgMSwKICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT042CiAgICApKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJub3JtYWwgbXVzdCBiZSBub3JtYWxpemVkLiIpOwogICAgfQogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJkaXN0YW5jZSIsIGRpc3RhbmNlKTsKICAgIHRoaXMubm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG5vcm1hbDIpOwogICAgdGhpcy5kaXN0YW5jZSA9IGRpc3RhbmNlOwogIH0KICB2YXIgc2NyYXRjaE5vcm1hbCwgc2NyYXRjaENhcnRlc2lhbiwgc2NyYXRjaEludmVyc2VUcmFuc3Bvc2UsIHNjcmF0Y2hQbGFuZUNhcnRlc2lhbjQsIHNjcmF0Y2hUcmFuc2Zvcm1Ob3JtYWwsIFBsYW5lX2RlZmF1bHQ7CiAgdmFyIGluaXRfUGxhbmUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BsYW5lLmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuNCgpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDQoKTsKICAgICAgUGxhbmUuZnJvbVBvaW50Tm9ybWFsID0gZnVuY3Rpb24ocG9pbnQsIG5vcm1hbDIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicG9pbnQiLCBwb2ludCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJub3JtYWwiLCBub3JtYWwyKTsKICAgICAgICBpZiAoIU1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZShub3JtYWwyKSwKICAgICAgICAgIDEsCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjYKICAgICAgICApKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibm9ybWFsIG11c3QgYmUgbm9ybWFsaXplZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSAtQ2FydGVzaWFuM19kZWZhdWx0LmRvdChub3JtYWwyLCBwb2ludCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBQbGFuZShub3JtYWwyLCBkaXN0YW5jZSk7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShub3JtYWwyLCByZXN1bHQubm9ybWFsKTsKICAgICAgICByZXN1bHQuZGlzdGFuY2UgPSBkaXN0YW5jZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY3JhdGNoTm9ybWFsID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBQbGFuZS5mcm9tQ2FydGVzaWFuNCA9IGZ1bmN0aW9uKGNvZWZmaWNpZW50cywgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjb2VmZmljaWVudHMiLCBjb2VmZmljaWVudHMpOwogICAgICAgIGNvbnN0IG5vcm1hbDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUNhcnRlc2lhbjQoY29lZmZpY2llbnRzLCBzY3JhdGNoTm9ybWFsKTsKICAgICAgICBjb25zdCBkaXN0YW5jZSA9IGNvZWZmaWNpZW50cy53OwogICAgICAgIGlmICghTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKG5vcm1hbDIpLAogICAgICAgICAgMSwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9ONgogICAgICAgICkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJub3JtYWwgbXVzdCBiZSBub3JtYWxpemVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFBsYW5lKG5vcm1hbDIsIGRpc3RhbmNlKTsKICAgICAgICB9CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG5vcm1hbDIsIHJlc3VsdC5ub3JtYWwpOwogICAgICAgIHJlc3VsdC5kaXN0YW5jZSA9IGRpc3RhbmNlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFBsYW5lLmdldFBvaW50RGlzdGFuY2UgPSBmdW5jdGlvbihwbGFuZSwgcG9pbnQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInBsYW5lIiwgcGxhbmUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicG9pbnQiLCBwb2ludCk7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5kb3QocGxhbmUubm9ybWFsLCBwb2ludCkgKyBwbGFuZS5kaXN0YW5jZTsKICAgICAgfTsKICAgICAgc2NyYXRjaENhcnRlc2lhbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgUGxhbmUucHJvamVjdFBvaW50T250b1BsYW5lID0gZnVuY3Rpb24ocGxhbmUsIHBvaW50LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInBsYW5lIiwgcGxhbmUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicG9pbnQiLCBwb2ludCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBwb2ludERpc3RhbmNlID0gUGxhbmUuZ2V0UG9pbnREaXN0YW5jZShwbGFuZSwgcG9pbnQpOwogICAgICAgIGNvbnN0IHNjYWxlZE5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgcGxhbmUubm9ybWFsLAogICAgICAgICAgcG9pbnREaXN0YW5jZSwKICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4KICAgICAgICApOwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocG9pbnQsIHNjYWxlZE5vcm1hbCwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgc2NyYXRjaEludmVyc2VUcmFuc3Bvc2UgPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQbGFuZUNhcnRlc2lhbjQgPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hUcmFuc2Zvcm1Ob3JtYWwgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIFBsYW5lLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKHBsYW5lLCB0cmFuc2Zvcm0yLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInBsYW5lIiwgcGxhbmUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidHJhbnNmb3JtIiwgdHJhbnNmb3JtMik7CiAgICAgICAgY29uc3Qgbm9ybWFsMiA9IHBsYW5lLm5vcm1hbDsKICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHBsYW5lLmRpc3RhbmNlOwogICAgICAgIGNvbnN0IGludmVyc2VUcmFuc3Bvc2UyID0gTWF0cml4NF9kZWZhdWx0LmludmVyc2VUcmFuc3Bvc2UoCiAgICAgICAgICB0cmFuc2Zvcm0yLAogICAgICAgICAgc2NyYXRjaEludmVyc2VUcmFuc3Bvc2UKICAgICAgICApOwogICAgICAgIGxldCBwbGFuZUFzQ2FydGVzaWFuNCA9IENhcnRlc2lhbjRfZGVmYXVsdC5mcm9tRWxlbWVudHMoCiAgICAgICAgICBub3JtYWwyLngsCiAgICAgICAgICBub3JtYWwyLnksCiAgICAgICAgICBub3JtYWwyLnosCiAgICAgICAgICBkaXN0YW5jZSwKICAgICAgICAgIHNjcmF0Y2hQbGFuZUNhcnRlc2lhbjQKICAgICAgICApOwogICAgICAgIHBsYW5lQXNDYXJ0ZXNpYW40ID0gTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IoCiAgICAgICAgICBpbnZlcnNlVHJhbnNwb3NlMiwKICAgICAgICAgIHBsYW5lQXNDYXJ0ZXNpYW40LAogICAgICAgICAgcGxhbmVBc0NhcnRlc2lhbjQKICAgICAgICApOwogICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkTm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21DYXJ0ZXNpYW40KAogICAgICAgICAgcGxhbmVBc0NhcnRlc2lhbjQsCiAgICAgICAgICBzY3JhdGNoVHJhbnNmb3JtTm9ybWFsCiAgICAgICAgKTsKICAgICAgICBwbGFuZUFzQ2FydGVzaWFuNCA9IENhcnRlc2lhbjRfZGVmYXVsdC5kaXZpZGVCeVNjYWxhcigKICAgICAgICAgIHBsYW5lQXNDYXJ0ZXNpYW40LAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSh0cmFuc2Zvcm1lZE5vcm1hbCksCiAgICAgICAgICBwbGFuZUFzQ2FydGVzaWFuNAogICAgICAgICk7CiAgICAgICAgcmV0dXJuIFBsYW5lLmZyb21DYXJ0ZXNpYW40KHBsYW5lQXNDYXJ0ZXNpYW40LCByZXN1bHQpOwogICAgICB9OwogICAgICBQbGFuZS5jbG9uZSA9IGZ1bmN0aW9uKHBsYW5lLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInBsYW5lIiwgcGxhbmUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgUGxhbmUocGxhbmUubm9ybWFsLCBwbGFuZS5kaXN0YW5jZSk7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShwbGFuZS5ub3JtYWwsIHJlc3VsdC5ub3JtYWwpOwogICAgICAgIHJlc3VsdC5kaXN0YW5jZSA9IHBsYW5lLmRpc3RhbmNlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFBsYW5lLmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICByZXR1cm4gbGVmdC5kaXN0YW5jZSA9PT0gcmlnaHQuZGlzdGFuY2UgJiYgQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFscyhsZWZ0Lm5vcm1hbCwgcmlnaHQubm9ybWFsKTsKICAgICAgfTsKICAgICAgUGxhbmUuT1JJR0lOX1hZX1BMQU5FID0gT2JqZWN0LmZyZWV6ZShuZXcgUGxhbmUoQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWiwgMCkpOwogICAgICBQbGFuZS5PUklHSU5fWVpfUExBTkUgPSBPYmplY3QuZnJlZXplKG5ldyBQbGFuZShDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9YLCAwKSk7CiAgICAgIFBsYW5lLk9SSUdJTl9aWF9QTEFORSA9IE9iamVjdC5mcmVlemUobmV3IFBsYW5lKENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1ksIDApKTsKICAgICAgUGxhbmVfZGVmYXVsdCA9IFBsYW5lOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVGlwc2lmeS5qcwogIHZhciBUaXBzaWZ5LCBUaXBzaWZ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfVGlwc2lmeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVGlwc2lmeS5qcyIoKSB7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIFRpcHNpZnkgPSB7fTsKICAgICAgVGlwc2lmeS5jYWxjdWxhdGVBQ01SID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgICAgIGNvbnN0IGluZGljZXMgPSBvcHRpb25zLmluZGljZXM7CiAgICAgICAgbGV0IG1heGltdW1JbmRleCA9IG9wdGlvbnMubWF4aW11bUluZGV4OwogICAgICAgIGNvbnN0IGNhY2hlU2l6ZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuY2FjaGVTaXplLCAyNCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaW5kaWNlcykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJpbmRpY2VzIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBudW1JbmRpY2VzID0gaW5kaWNlcy5sZW5ndGg7CiAgICAgICAgaWYgKG51bUluZGljZXMgPCAzIHx8IG51bUluZGljZXMgJSAzICE9PSAwKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiaW5kaWNlcyBsZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIHRocmVlLiIpOwogICAgICAgIH0KICAgICAgICBpZiAobWF4aW11bUluZGV4IDw9IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJtYXhpbXVtSW5kZXggbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyby4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKGNhY2hlU2l6ZSA8IDMpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJjYWNoZVNpemUgbXVzdCBiZSBncmVhdGVyIHRoYW4gdHdvLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChtYXhpbXVtSW5kZXgpKSB7CiAgICAgICAgICBtYXhpbXVtSW5kZXggPSAwOwogICAgICAgICAgbGV0IGN1cnJlbnRJbmRleCA9IDA7CiAgICAgICAgICBsZXQgaW50b0luZGljZXMgPSBpbmRpY2VzW2N1cnJlbnRJbmRleF07CiAgICAgICAgICB3aGlsZSAoY3VycmVudEluZGV4IDwgbnVtSW5kaWNlcykgewogICAgICAgICAgICBpZiAoaW50b0luZGljZXMgPiBtYXhpbXVtSW5kZXgpIHsKICAgICAgICAgICAgICBtYXhpbXVtSW5kZXggPSBpbnRvSW5kaWNlczsKICAgICAgICAgICAgfQogICAgICAgICAgICArK2N1cnJlbnRJbmRleDsKICAgICAgICAgICAgaW50b0luZGljZXMgPSBpbmRpY2VzW2N1cnJlbnRJbmRleF07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IHZlcnRleFRpbWVTdGFtcHMgPSBbXTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1heGltdW1JbmRleCArIDE7IGkrKykgewogICAgICAgICAgdmVydGV4VGltZVN0YW1wc1tpXSA9IDA7CiAgICAgICAgfQogICAgICAgIGxldCBzID0gY2FjaGVTaXplICsgMTsKICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG51bUluZGljZXM7ICsraikgewogICAgICAgICAgaWYgKHMgLSB2ZXJ0ZXhUaW1lU3RhbXBzW2luZGljZXNbal1dID4gY2FjaGVTaXplKSB7CiAgICAgICAgICAgIHZlcnRleFRpbWVTdGFtcHNbaW5kaWNlc1tqXV0gPSBzOwogICAgICAgICAgICArK3M7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiAocyAtIGNhY2hlU2l6ZSArIDEpIC8gKG51bUluZGljZXMgLyAzKTsKICAgICAgfTsKICAgICAgVGlwc2lmeS50aXBzaWZ5ID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgICAgIGNvbnN0IGluZGljZXMgPSBvcHRpb25zLmluZGljZXM7CiAgICAgICAgY29uc3QgbWF4aW11bUluZGV4ID0gb3B0aW9ucy5tYXhpbXVtSW5kZXg7CiAgICAgICAgY29uc3QgY2FjaGVTaXplID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5jYWNoZVNpemUsIDI0KTsKICAgICAgICBsZXQgY3Vyc29yOwogICAgICAgIGZ1bmN0aW9uIHNraXBEZWFkRW5kKHZlcnRpY2VzMiwgZGVhZEVuZDIsIGluZGljZXMyLCBtYXhpbXVtSW5kZXhQbHVzT25lMikgewogICAgICAgICAgd2hpbGUgKGRlYWRFbmQyLmxlbmd0aCA+PSAxKSB7CiAgICAgICAgICAgIGNvbnN0IGQgPSBkZWFkRW5kMltkZWFkRW5kMi5sZW5ndGggLSAxXTsKICAgICAgICAgICAgZGVhZEVuZDIuc3BsaWNlKGRlYWRFbmQyLmxlbmd0aCAtIDEsIDEpOwogICAgICAgICAgICBpZiAodmVydGljZXMyW2RdLm51bUxpdmVUcmlhbmdsZXMgPiAwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGQ7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHdoaWxlIChjdXJzb3IgPCBtYXhpbXVtSW5kZXhQbHVzT25lMikgewogICAgICAgICAgICBpZiAodmVydGljZXMyW2N1cnNvcl0ubnVtTGl2ZVRyaWFuZ2xlcyA+IDApIHsKICAgICAgICAgICAgICArK2N1cnNvcjsKICAgICAgICAgICAgICByZXR1cm4gY3Vyc29yIC0gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICArK2N1cnNvcjsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZ2V0TmV4dFZlcnRleChpbmRpY2VzMiwgY2FjaGVTaXplMiwgb25lUmluZzIsIHZlcnRpY2VzMiwgczIsIGRlYWRFbmQyLCBtYXhpbXVtSW5kZXhQbHVzT25lMikgewogICAgICAgICAgbGV0IG4gPSAtMTsKICAgICAgICAgIGxldCBwOwogICAgICAgICAgbGV0IG0gPSAtMTsKICAgICAgICAgIGxldCBpdE9uZVJpbmcgPSAwOwogICAgICAgICAgd2hpbGUgKGl0T25lUmluZyA8IG9uZVJpbmcyLmxlbmd0aCkgewogICAgICAgICAgICBjb25zdCBpbmRleDIgPSBvbmVSaW5nMltpdE9uZVJpbmddOwogICAgICAgICAgICBpZiAodmVydGljZXMyW2luZGV4Ml0ubnVtTGl2ZVRyaWFuZ2xlcykgewogICAgICAgICAgICAgIHAgPSAwOwogICAgICAgICAgICAgIGlmIChzMiAtIHZlcnRpY2VzMltpbmRleDJdLnRpbWVTdGFtcCArIDIgKiB2ZXJ0aWNlczJbaW5kZXgyXS5udW1MaXZlVHJpYW5nbGVzIDw9IGNhY2hlU2l6ZTIpIHsKICAgICAgICAgICAgICAgIHAgPSBzMiAtIHZlcnRpY2VzMltpbmRleDJdLnRpbWVTdGFtcDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHAgPiBtIHx8IG0gPT09IC0xKSB7CiAgICAgICAgICAgICAgICBtID0gcDsKICAgICAgICAgICAgICAgIG4gPSBpbmRleDI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICsraXRPbmVSaW5nOwogICAgICAgICAgfQogICAgICAgICAgaWYgKG4gPT09IC0xKSB7CiAgICAgICAgICAgIHJldHVybiBza2lwRGVhZEVuZCh2ZXJ0aWNlczIsIGRlYWRFbmQyLCBpbmRpY2VzMiwgbWF4aW11bUluZGV4UGx1c09uZTIpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIG47CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGluZGljZXMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiaW5kaWNlcyBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbnVtSW5kaWNlcyA9IGluZGljZXMubGVuZ3RoOwogICAgICAgIGlmIChudW1JbmRpY2VzIDwgMyB8fCBudW1JbmRpY2VzICUgMyAhPT0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImluZGljZXMgbGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiB0aHJlZS4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKG1heGltdW1JbmRleCA8PSAwKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibWF4aW11bUluZGV4IG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uIik7CiAgICAgICAgfQogICAgICAgIGlmIChjYWNoZVNpemUgPCAzKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiY2FjaGVTaXplIG11c3QgYmUgZ3JlYXRlciB0aGFuIHR3by4iKTsKICAgICAgICB9CiAgICAgICAgbGV0IG1heGltdW1JbmRleFBsdXNPbmUgPSAwOwogICAgICAgIGxldCBjdXJyZW50SW5kZXggPSAwOwogICAgICAgIGxldCBpbnRvSW5kaWNlcyA9IGluZGljZXNbY3VycmVudEluZGV4XTsKICAgICAgICBjb25zdCBlbmRJbmRleCA9IG51bUluZGljZXM7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChtYXhpbXVtSW5kZXgpKSB7CiAgICAgICAgICBtYXhpbXVtSW5kZXhQbHVzT25lID0gbWF4aW11bUluZGV4ICsgMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgd2hpbGUgKGN1cnJlbnRJbmRleCA8IGVuZEluZGV4KSB7CiAgICAgICAgICAgIGlmIChpbnRvSW5kaWNlcyA+IG1heGltdW1JbmRleFBsdXNPbmUpIHsKICAgICAgICAgICAgICBtYXhpbXVtSW5kZXhQbHVzT25lID0gaW50b0luZGljZXM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgKytjdXJyZW50SW5kZXg7CiAgICAgICAgICAgIGludG9JbmRpY2VzID0gaW5kaWNlc1tjdXJyZW50SW5kZXhdOwogICAgICAgICAgfQogICAgICAgICAgaWYgKG1heGltdW1JbmRleFBsdXNPbmUgPT09IC0xKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgfQogICAgICAgICAgKyttYXhpbXVtSW5kZXhQbHVzT25lOwogICAgICAgIH0KICAgICAgICBjb25zdCB2ZXJ0aWNlcyA9IFtdOwogICAgICAgIGxldCBpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBtYXhpbXVtSW5kZXhQbHVzT25lOyBpKyspIHsKICAgICAgICAgIHZlcnRpY2VzW2ldID0gewogICAgICAgICAgICBudW1MaXZlVHJpYW5nbGVzOiAwLAogICAgICAgICAgICB0aW1lU3RhbXA6IDAsCiAgICAgICAgICAgIHZlcnRleFRyaWFuZ2xlczogW10KICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIGN1cnJlbnRJbmRleCA9IDA7CiAgICAgICAgbGV0IHRyaWFuZ2xlID0gMDsKICAgICAgICB3aGlsZSAoY3VycmVudEluZGV4IDwgZW5kSW5kZXgpIHsKICAgICAgICAgIHZlcnRpY2VzW2luZGljZXNbY3VycmVudEluZGV4XV0udmVydGV4VHJpYW5nbGVzLnB1c2godHJpYW5nbGUpOwogICAgICAgICAgKyt2ZXJ0aWNlc1tpbmRpY2VzW2N1cnJlbnRJbmRleF1dLm51bUxpdmVUcmlhbmdsZXM7CiAgICAgICAgICB2ZXJ0aWNlc1tpbmRpY2VzW2N1cnJlbnRJbmRleCArIDFdXS52ZXJ0ZXhUcmlhbmdsZXMucHVzaCh0cmlhbmdsZSk7CiAgICAgICAgICArK3ZlcnRpY2VzW2luZGljZXNbY3VycmVudEluZGV4ICsgMV1dLm51bUxpdmVUcmlhbmdsZXM7CiAgICAgICAgICB2ZXJ0aWNlc1tpbmRpY2VzW2N1cnJlbnRJbmRleCArIDJdXS52ZXJ0ZXhUcmlhbmdsZXMucHVzaCh0cmlhbmdsZSk7CiAgICAgICAgICArK3ZlcnRpY2VzW2luZGljZXNbY3VycmVudEluZGV4ICsgMl1dLm51bUxpdmVUcmlhbmdsZXM7CiAgICAgICAgICArK3RyaWFuZ2xlOwogICAgICAgICAgY3VycmVudEluZGV4ICs9IDM7CiAgICAgICAgfQogICAgICAgIGxldCBmID0gMDsKICAgICAgICBsZXQgcyA9IGNhY2hlU2l6ZSArIDE7CiAgICAgICAgY3Vyc29yID0gMTsKICAgICAgICBsZXQgb25lUmluZyA9IFtdOwogICAgICAgIGNvbnN0IGRlYWRFbmQgPSBbXTsKICAgICAgICBsZXQgdmVydGV4OwogICAgICAgIGxldCBpbnRvVmVydGljZXM7CiAgICAgICAgbGV0IGN1cnJlbnRPdXRwdXRJbmRleCA9IDA7CiAgICAgICAgY29uc3Qgb3V0cHV0SW5kaWNlcyA9IFtdOwogICAgICAgIGNvbnN0IG51bVRyaWFuZ2xlcyA9IG51bUluZGljZXMgLyAzOwogICAgICAgIGNvbnN0IHRyaWFuZ2xlRW1pdHRlZCA9IFtdOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1UcmlhbmdsZXM7IGkrKykgewogICAgICAgICAgdHJpYW5nbGVFbWl0dGVkW2ldID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGxldCBpbmRleDsKICAgICAgICBsZXQgbGltaXQ7CiAgICAgICAgd2hpbGUgKGYgIT09IC0xKSB7CiAgICAgICAgICBvbmVSaW5nID0gW107CiAgICAgICAgICBpbnRvVmVydGljZXMgPSB2ZXJ0aWNlc1tmXTsKICAgICAgICAgIGxpbWl0ID0gaW50b1ZlcnRpY2VzLnZlcnRleFRyaWFuZ2xlcy5sZW5ndGg7CiAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGxpbWl0OyArK2spIHsKICAgICAgICAgICAgdHJpYW5nbGUgPSBpbnRvVmVydGljZXMudmVydGV4VHJpYW5nbGVzW2tdOwogICAgICAgICAgICBpZiAoIXRyaWFuZ2xlRW1pdHRlZFt0cmlhbmdsZV0pIHsKICAgICAgICAgICAgICB0cmlhbmdsZUVtaXR0ZWRbdHJpYW5nbGVdID0gdHJ1ZTsKICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSB0cmlhbmdsZSArIHRyaWFuZ2xlICsgdHJpYW5nbGU7CiAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAzOyArK2opIHsKICAgICAgICAgICAgICAgIGluZGV4ID0gaW5kaWNlc1tjdXJyZW50SW5kZXhdOwogICAgICAgICAgICAgICAgb25lUmluZy5wdXNoKGluZGV4KTsKICAgICAgICAgICAgICAgIGRlYWRFbmQucHVzaChpbmRleCk7CiAgICAgICAgICAgICAgICBvdXRwdXRJbmRpY2VzW2N1cnJlbnRPdXRwdXRJbmRleF0gPSBpbmRleDsKICAgICAgICAgICAgICAgICsrY3VycmVudE91dHB1dEluZGV4OwogICAgICAgICAgICAgICAgdmVydGV4ID0gdmVydGljZXNbaW5kZXhdOwogICAgICAgICAgICAgICAgLS12ZXJ0ZXgubnVtTGl2ZVRyaWFuZ2xlczsKICAgICAgICAgICAgICAgIGlmIChzIC0gdmVydGV4LnRpbWVTdGFtcCA+IGNhY2hlU2l6ZSkgewogICAgICAgICAgICAgICAgICB2ZXJ0ZXgudGltZVN0YW1wID0gczsKICAgICAgICAgICAgICAgICAgKytzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKytjdXJyZW50SW5kZXg7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmID0gZ2V0TmV4dFZlcnRleCgKICAgICAgICAgICAgaW5kaWNlcywKICAgICAgICAgICAgY2FjaGVTaXplLAogICAgICAgICAgICBvbmVSaW5nLAogICAgICAgICAgICB2ZXJ0aWNlcywKICAgICAgICAgICAgcywKICAgICAgICAgICAgZGVhZEVuZCwKICAgICAgICAgICAgbWF4aW11bUluZGV4UGx1c09uZQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG91dHB1dEluZGljZXM7CiAgICAgIH07CiAgICAgIFRpcHNpZnlfZGVmYXVsdCA9IFRpcHNpZnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9HZW9tZXRyeVBpcGVsaW5lLmpzCiAgZnVuY3Rpb24gYWRkVHJpYW5nbGUobGluZXMsIGluZGV4LCBpMCwgaTEsIGkyKSB7CiAgICBsaW5lc1tpbmRleCsrXSA9IGkwOwogICAgbGluZXNbaW5kZXgrK10gPSBpMTsKICAgIGxpbmVzW2luZGV4KytdID0gaTE7CiAgICBsaW5lc1tpbmRleCsrXSA9IGkyOwogICAgbGluZXNbaW5kZXgrK10gPSBpMjsKICAgIGxpbmVzW2luZGV4XSA9IGkwOwogIH0KICBmdW5jdGlvbiB0cmlhbmdsZXNUb0xpbmVzKHRyaWFuZ2xlcykgewogICAgY29uc3QgY291bnQgPSB0cmlhbmdsZXMubGVuZ3RoOwogICAgY29uc3Qgc2l6ZSA9IGNvdW50IC8gMyAqIDY7CiAgICBjb25zdCBsaW5lcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KGNvdW50LCBzaXplKTsKICAgIGxldCBpbmRleCA9IDA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpICs9IDMsIGluZGV4ICs9IDYpIHsKICAgICAgYWRkVHJpYW5nbGUobGluZXMsIGluZGV4LCB0cmlhbmdsZXNbaV0sIHRyaWFuZ2xlc1tpICsgMV0sIHRyaWFuZ2xlc1tpICsgMl0pOwogICAgfQogICAgcmV0dXJuIGxpbmVzOwogIH0KICBmdW5jdGlvbiB0cmlhbmdsZVN0cmlwVG9MaW5lcyh0cmlhbmdsZXMpIHsKICAgIGNvbnN0IGNvdW50ID0gdHJpYW5nbGVzLmxlbmd0aDsKICAgIGlmIChjb3VudCA+PSAzKSB7CiAgICAgIGNvbnN0IHNpemUgPSAoY291bnQgLSAyKSAqIDY7CiAgICAgIGNvbnN0IGxpbmVzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoY291bnQsIHNpemUpOwogICAgICBhZGRUcmlhbmdsZShsaW5lcywgMCwgdHJpYW5nbGVzWzBdLCB0cmlhbmdsZXNbMV0sIHRyaWFuZ2xlc1syXSk7CiAgICAgIGxldCBpbmRleCA9IDY7CiAgICAgIGZvciAobGV0IGkgPSAzOyBpIDwgY291bnQ7ICsraSwgaW5kZXggKz0gNikgewogICAgICAgIGFkZFRyaWFuZ2xlKAogICAgICAgICAgbGluZXMsCiAgICAgICAgICBpbmRleCwKICAgICAgICAgIHRyaWFuZ2xlc1tpIC0gMV0sCiAgICAgICAgICB0cmlhbmdsZXNbaV0sCiAgICAgICAgICB0cmlhbmdsZXNbaSAtIDJdCiAgICAgICAgKTsKICAgICAgfQogICAgICByZXR1cm4gbGluZXM7CiAgICB9CiAgICByZXR1cm4gbmV3IFVpbnQxNkFycmF5KCk7CiAgfQogIGZ1bmN0aW9uIHRyaWFuZ2xlRmFuVG9MaW5lcyh0cmlhbmdsZXMpIHsKICAgIGlmICh0cmlhbmdsZXMubGVuZ3RoID4gMCkgewogICAgICBjb25zdCBjb3VudCA9IHRyaWFuZ2xlcy5sZW5ndGggLSAxOwogICAgICBjb25zdCBzaXplID0gKGNvdW50IC0gMSkgKiA2OwogICAgICBjb25zdCBsaW5lcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KGNvdW50LCBzaXplKTsKICAgICAgY29uc3QgYmFzZSA9IHRyaWFuZ2xlc1swXTsKICAgICAgbGV0IGluZGV4ID0gMDsKICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBjb3VudDsgKytpLCBpbmRleCArPSA2KSB7CiAgICAgICAgYWRkVHJpYW5nbGUobGluZXMsIGluZGV4LCBiYXNlLCB0cmlhbmdsZXNbaV0sIHRyaWFuZ2xlc1tpICsgMV0pOwogICAgICB9CiAgICAgIHJldHVybiBsaW5lczsKICAgIH0KICAgIHJldHVybiBuZXcgVWludDE2QXJyYXkoKTsKICB9CiAgZnVuY3Rpb24gY29weUF0dHJpYnV0ZXNEZXNjcmlwdGlvbnMoYXR0cmlidXRlcykgewogICAgY29uc3QgbmV3QXR0cmlidXRlcyA9IHt9OwogICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgaW4gYXR0cmlidXRlcykgewogICAgICBpZiAoYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShhdHRyaWJ1dGUpICYmIGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzW2F0dHJpYnV0ZV0pICYmIGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzW2F0dHJpYnV0ZV0udmFsdWVzKSkgewogICAgICAgIGNvbnN0IGF0dHIgPSBhdHRyaWJ1dGVzW2F0dHJpYnV0ZV07CiAgICAgICAgbmV3QXR0cmlidXRlc1thdHRyaWJ1dGVdID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IGF0dHIuY29tcG9uZW50RGF0YXR5cGUsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiBhdHRyLmNvbXBvbmVudHNQZXJBdHRyaWJ1dGUsCiAgICAgICAgICBub3JtYWxpemU6IGF0dHIubm9ybWFsaXplLAogICAgICAgICAgdmFsdWVzOiBbXQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gbmV3QXR0cmlidXRlczsKICB9CiAgZnVuY3Rpb24gY29weVZlcnRleChkZXN0aW5hdGlvbkF0dHJpYnV0ZXMsIHNvdXJjZUF0dHJpYnV0ZXMsIGluZGV4KSB7CiAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBpbiBzb3VyY2VBdHRyaWJ1dGVzKSB7CiAgICAgIGlmIChzb3VyY2VBdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGF0dHJpYnV0ZSkgJiYgZGVmaW5lZF9kZWZhdWx0KHNvdXJjZUF0dHJpYnV0ZXNbYXR0cmlidXRlXSkgJiYgZGVmaW5lZF9kZWZhdWx0KHNvdXJjZUF0dHJpYnV0ZXNbYXR0cmlidXRlXS52YWx1ZXMpKSB7CiAgICAgICAgY29uc3QgYXR0ciA9IHNvdXJjZUF0dHJpYnV0ZXNbYXR0cmlidXRlXTsKICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGF0dHIuY29tcG9uZW50c1BlckF0dHJpYnV0ZTsgKytrKSB7CiAgICAgICAgICBkZXN0aW5hdGlvbkF0dHJpYnV0ZXNbYXR0cmlidXRlXS52YWx1ZXMucHVzaCgKICAgICAgICAgICAgYXR0ci52YWx1ZXNbaW5kZXggKiBhdHRyLmNvbXBvbmVudHNQZXJBdHRyaWJ1dGUgKyBrXQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CiAgZnVuY3Rpb24gdHJhbnNmb3JtUG9pbnQobWF0cml4LCBhdHRyaWJ1dGUpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlKSkgewogICAgICBjb25zdCB2YWx1ZXMgPSBhdHRyaWJ1dGUudmFsdWVzOwogICAgICBjb25zdCBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoOwogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAzKSB7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayh2YWx1ZXMsIGksIHNjcmF0Y2hDYXJ0ZXNpYW4zMyk7CiAgICAgICAgTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlQb2ludChtYXRyaXgsIHNjcmF0Y2hDYXJ0ZXNpYW4zMywgc2NyYXRjaENhcnRlc2lhbjMzKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhzY3JhdGNoQ2FydGVzaWFuMzMsIHZhbHVlcywgaSk7CiAgICAgIH0KICAgIH0KICB9CiAgZnVuY3Rpb24gdHJhbnNmb3JtVmVjdG9yKG1hdHJpeCwgYXR0cmlidXRlKSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZSkpIHsKICAgICAgY29uc3QgdmFsdWVzID0gYXR0cmlidXRlLnZhbHVlczsKICAgICAgY29uc3QgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aDsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMykgewogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2sodmFsdWVzLCBpLCBzY3JhdGNoQ2FydGVzaWFuMzMpOwogICAgICAgIE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKG1hdHJpeCwgc2NyYXRjaENhcnRlc2lhbjMzLCBzY3JhdGNoQ2FydGVzaWFuMzMpOwogICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zMyA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuMzMsCiAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuMzMKICAgICAgICApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHNjcmF0Y2hDYXJ0ZXNpYW4zMywgdmFsdWVzLCBpKTsKICAgICAgfQogICAgfQogIH0KICBmdW5jdGlvbiBmaW5kQXR0cmlidXRlc0luQWxsR2VvbWV0cmllcyhpbnN0YW5jZXMsIHByb3BlcnR5TmFtZSkgewogICAgY29uc3QgbGVuZ3RoID0gaW5zdGFuY2VzLmxlbmd0aDsKICAgIGNvbnN0IGF0dHJpYnV0ZXNJbkFsbEdlb21ldHJpZXMgPSB7fTsKICAgIGNvbnN0IGF0dHJpYnV0ZXMwID0gaW5zdGFuY2VzWzBdW3Byb3BlcnR5TmFtZV0uYXR0cmlidXRlczsKICAgIGxldCBuYW1lOwogICAgZm9yIChuYW1lIGluIGF0dHJpYnV0ZXMwKSB7CiAgICAgIGlmIChhdHRyaWJ1dGVzMC5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlczBbbmFtZV0pICYmIGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzMFtuYW1lXS52YWx1ZXMpKSB7CiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlczBbbmFtZV07CiAgICAgICAgbGV0IG51bWJlck9mQ29tcG9uZW50cyA9IGF0dHJpYnV0ZS52YWx1ZXMubGVuZ3RoOwogICAgICAgIGxldCBpbkFsbEdlb21ldHJpZXMgPSB0cnVlOwogICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgIGNvbnN0IG90aGVyQXR0cmlidXRlID0gaW5zdGFuY2VzW2ldW3Byb3BlcnR5TmFtZV0uYXR0cmlidXRlc1tuYW1lXTsKICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG90aGVyQXR0cmlidXRlKSB8fCBhdHRyaWJ1dGUuY29tcG9uZW50RGF0YXR5cGUgIT09IG90aGVyQXR0cmlidXRlLmNvbXBvbmVudERhdGF0eXBlIHx8IGF0dHJpYnV0ZS5jb21wb25lbnRzUGVyQXR0cmlidXRlICE9PSBvdGhlckF0dHJpYnV0ZS5jb21wb25lbnRzUGVyQXR0cmlidXRlIHx8IGF0dHJpYnV0ZS5ub3JtYWxpemUgIT09IG90aGVyQXR0cmlidXRlLm5vcm1hbGl6ZSkgewogICAgICAgICAgICBpbkFsbEdlb21ldHJpZXMgPSBmYWxzZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBudW1iZXJPZkNvbXBvbmVudHMgKz0gb3RoZXJBdHRyaWJ1dGUudmFsdWVzLmxlbmd0aDsKICAgICAgICB9CiAgICAgICAgaWYgKGluQWxsR2VvbWV0cmllcykgewogICAgICAgICAgYXR0cmlidXRlc0luQWxsR2VvbWV0cmllc1tuYW1lXSA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IGF0dHJpYnV0ZS5jb21wb25lbnREYXRhdHlwZSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogYXR0cmlidXRlLmNvbXBvbmVudHNQZXJBdHRyaWJ1dGUsCiAgICAgICAgICAgIG5vcm1hbGl6ZTogYXR0cmlidXRlLm5vcm1hbGl6ZSwKICAgICAgICAgICAgdmFsdWVzOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgICAgICAgICAgYXR0cmlidXRlLmNvbXBvbmVudERhdGF0eXBlLAogICAgICAgICAgICAgIG51bWJlck9mQ29tcG9uZW50cwogICAgICAgICAgICApCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBhdHRyaWJ1dGVzSW5BbGxHZW9tZXRyaWVzOwogIH0KICBmdW5jdGlvbiBjb21iaW5lR2VvbWV0cmllcyhpbnN0YW5jZXMsIHByb3BlcnR5TmFtZSkgewogICAgY29uc3QgbGVuZ3RoID0gaW5zdGFuY2VzLmxlbmd0aDsKICAgIGxldCBuYW1lOwogICAgbGV0IGk7CiAgICBsZXQgajsKICAgIGxldCBrOwogICAgY29uc3QgbSA9IGluc3RhbmNlc1swXS5tb2RlbE1hdHJpeDsKICAgIGNvbnN0IGhhdmVJbmRpY2VzID0gZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlc1swXVtwcm9wZXJ0eU5hbWVdLmluZGljZXMpOwogICAgY29uc3QgcHJpbWl0aXZlVHlwZSA9IGluc3RhbmNlc1swXVtwcm9wZXJ0eU5hbWVdLnByaW1pdGl2ZVR5cGU7CiAgICBmb3IgKGkgPSAxOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgaWYgKCFNYXRyaXg0X2RlZmF1bHQuZXF1YWxzKGluc3RhbmNlc1tpXS5tb2RlbE1hdHJpeCwgbSkpIHsKICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiQWxsIGluc3RhbmNlcyBtdXN0IGhhdmUgdGhlIHNhbWUgbW9kZWxNYXRyaXguIik7CiAgICAgIH0KICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbnN0YW5jZXNbaV1bcHJvcGVydHlOYW1lXS5pbmRpY2VzKSAhPT0gaGF2ZUluZGljZXMpIHsKICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICJBbGwgaW5zdGFuY2UgZ2VvbWV0cmllcyBtdXN0IGhhdmUgYW4gaW5kaWNlcyBvciBub3QgaGF2ZSBvbmUuIgogICAgICAgICk7CiAgICAgIH0KICAgICAgaWYgKGluc3RhbmNlc1tpXVtwcm9wZXJ0eU5hbWVdLnByaW1pdGl2ZVR5cGUgIT09IHByaW1pdGl2ZVR5cGUpIHsKICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICJBbGwgaW5zdGFuY2UgZ2VvbWV0cmllcyBtdXN0IGhhdmUgdGhlIHNhbWUgcHJpbWl0aXZlVHlwZS4iCiAgICAgICAgKTsKICAgICAgfQogICAgfQogICAgY29uc3QgYXR0cmlidXRlcyA9IGZpbmRBdHRyaWJ1dGVzSW5BbGxHZW9tZXRyaWVzKGluc3RhbmNlcywgcHJvcGVydHlOYW1lKTsKICAgIGxldCB2YWx1ZXM7CiAgICBsZXQgc291cmNlVmFsdWVzOwogICAgbGV0IHNvdXJjZVZhbHVlc0xlbmd0aDsKICAgIGZvciAobmFtZSBpbiBhdHRyaWJ1dGVzKSB7CiAgICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgdmFsdWVzID0gYXR0cmlidXRlc1tuYW1lXS52YWx1ZXM7CiAgICAgICAgayA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICBzb3VyY2VWYWx1ZXMgPSBpbnN0YW5jZXNbaV1bcHJvcGVydHlOYW1lXS5hdHRyaWJ1dGVzW25hbWVdLnZhbHVlczsKICAgICAgICAgIHNvdXJjZVZhbHVlc0xlbmd0aCA9IHNvdXJjZVZhbHVlcy5sZW5ndGg7CiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgc291cmNlVmFsdWVzTGVuZ3RoOyArK2opIHsKICAgICAgICAgICAgdmFsdWVzW2srK10gPSBzb3VyY2VWYWx1ZXNbal07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBsZXQgaW5kaWNlczsKICAgIGlmIChoYXZlSW5kaWNlcykgewogICAgICBsZXQgbnVtYmVyT2ZJbmRpY2VzID0gMDsKICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgbnVtYmVyT2ZJbmRpY2VzICs9IGluc3RhbmNlc1tpXVtwcm9wZXJ0eU5hbWVdLmluZGljZXMubGVuZ3RoOwogICAgICB9CiAgICAgIGNvbnN0IG51bWJlck9mVmVydGljZXMgPSBHZW9tZXRyeV9kZWZhdWx0LmNvbXB1dGVOdW1iZXJPZlZlcnRpY2VzKAogICAgICAgIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuUE9JTlRTCiAgICAgICAgfSkKICAgICAgKTsKICAgICAgY29uc3QgZGVzdEluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgICBudW1iZXJPZlZlcnRpY2VzLAogICAgICAgIG51bWJlck9mSW5kaWNlcwogICAgICApOwogICAgICBsZXQgZGVzdE9mZnNldCA9IDA7CiAgICAgIGxldCBvZmZzZXQgPSAwOwogICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICBjb25zdCBzb3VyY2VJbmRpY2VzID0gaW5zdGFuY2VzW2ldW3Byb3BlcnR5TmFtZV0uaW5kaWNlczsKICAgICAgICBjb25zdCBzb3VyY2VJbmRpY2VzTGVuID0gc291cmNlSW5kaWNlcy5sZW5ndGg7CiAgICAgICAgZm9yIChrID0gMDsgayA8IHNvdXJjZUluZGljZXNMZW47ICsraykgewogICAgICAgICAgZGVzdEluZGljZXNbZGVzdE9mZnNldCsrXSA9IG9mZnNldCArIHNvdXJjZUluZGljZXNba107CiAgICAgICAgfQogICAgICAgIG9mZnNldCArPSBHZW9tZXRyeV9kZWZhdWx0LmNvbXB1dGVOdW1iZXJPZlZlcnRpY2VzKGluc3RhbmNlc1tpXVtwcm9wZXJ0eU5hbWVdKTsKICAgICAgfQogICAgICBpbmRpY2VzID0gZGVzdEluZGljZXM7CiAgICB9CiAgICBsZXQgY2VudGVyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgbGV0IHJhZGl1cyA9IDA7CiAgICBsZXQgYnM7CiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgYnMgPSBpbnN0YW5jZXNbaV1bcHJvcGVydHlOYW1lXS5ib3VuZGluZ1NwaGVyZTsKICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYnMpKSB7CiAgICAgICAgY2VudGVyID0gdm9pZCAwOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoYnMuY2VudGVyLCBjZW50ZXIsIGNlbnRlcik7CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGNlbnRlcikpIHsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmRpdmlkZUJ5U2NhbGFyKGNlbnRlciwgbGVuZ3RoLCBjZW50ZXIpOwogICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICBicyA9IGluc3RhbmNlc1tpXVtwcm9wZXJ0eU5hbWVdLmJvdW5kaW5nU3BoZXJlOwogICAgICAgIGNvbnN0IHRlbXBSYWRpdXMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGJzLmNlbnRlciwgY2VudGVyLCB0ZW1wU2NyYXRjaCkKICAgICAgICApICsgYnMucmFkaXVzOwogICAgICAgIGlmICh0ZW1wUmFkaXVzID4gcmFkaXVzKSB7CiAgICAgICAgICByYWRpdXMgPSB0ZW1wUmFkaXVzOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgYXR0cmlidXRlcywKICAgICAgaW5kaWNlcywKICAgICAgcHJpbWl0aXZlVHlwZSwKICAgICAgYm91bmRpbmdTcGhlcmU6IGRlZmluZWRfZGVmYXVsdChjZW50ZXIpID8gbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQoY2VudGVyLCByYWRpdXMpIDogdm9pZCAwCiAgICB9KTsKICB9CiAgZnVuY3Rpb24gaW5kZXhUcmlhbmdsZXMoZ2VvbWV0cnkpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkuaW5kaWNlcykpIHsKICAgICAgcmV0dXJuIGdlb21ldHJ5OwogICAgfQogICAgY29uc3QgbnVtYmVyT2ZWZXJ0aWNlcyA9IEdlb21ldHJ5X2RlZmF1bHQuY29tcHV0ZU51bWJlck9mVmVydGljZXMoZ2VvbWV0cnkpOwogICAgaWYgKG51bWJlck9mVmVydGljZXMgPCAzKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJUaGUgbnVtYmVyIG9mIHZlcnRpY2VzIG11c3QgYmUgYXQgbGVhc3QgdGhyZWUuIik7CiAgICB9CiAgICBpZiAobnVtYmVyT2ZWZXJ0aWNlcyAlIDMgIT09IDApIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIlRoZSBudW1iZXIgb2YgdmVydGljZXMgbXVzdCBiZSBhIG11bHRpcGxlIG9mIHRocmVlLiIKICAgICAgKTsKICAgIH0KICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgbnVtYmVyT2ZWZXJ0aWNlcywKICAgICAgbnVtYmVyT2ZWZXJ0aWNlcwogICAgKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZWZXJ0aWNlczsgKytpKSB7CiAgICAgIGluZGljZXNbaV0gPSBpOwogICAgfQogICAgZ2VvbWV0cnkuaW5kaWNlcyA9IGluZGljZXM7CiAgICByZXR1cm4gZ2VvbWV0cnk7CiAgfQogIGZ1bmN0aW9uIGluZGV4VHJpYW5nbGVGYW4oZ2VvbWV0cnkpIHsKICAgIGNvbnN0IG51bWJlck9mVmVydGljZXMgPSBHZW9tZXRyeV9kZWZhdWx0LmNvbXB1dGVOdW1iZXJPZlZlcnRpY2VzKGdlb21ldHJ5KTsKICAgIGlmIChudW1iZXJPZlZlcnRpY2VzIDwgMykgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiVGhlIG51bWJlciBvZiB2ZXJ0aWNlcyBtdXN0IGJlIGF0IGxlYXN0IHRocmVlLiIpOwogICAgfQogICAgY29uc3QgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICBudW1iZXJPZlZlcnRpY2VzLAogICAgICAobnVtYmVyT2ZWZXJ0aWNlcyAtIDIpICogMwogICAgKTsKICAgIGluZGljZXNbMF0gPSAxOwogICAgaW5kaWNlc1sxXSA9IDA7CiAgICBpbmRpY2VzWzJdID0gMjsKICAgIGxldCBpbmRpY2VzSW5kZXggPSAzOwogICAgZm9yIChsZXQgaSA9IDM7IGkgPCBudW1iZXJPZlZlcnRpY2VzOyArK2kpIHsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpIC0gMTsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSAwOwogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGk7CiAgICB9CiAgICBnZW9tZXRyeS5pbmRpY2VzID0gaW5kaWNlczsKICAgIGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgPSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTOwogICAgcmV0dXJuIGdlb21ldHJ5OwogIH0KICBmdW5jdGlvbiBpbmRleFRyaWFuZ2xlU3RyaXAoZ2VvbWV0cnkpIHsKICAgIGNvbnN0IG51bWJlck9mVmVydGljZXMgPSBHZW9tZXRyeV9kZWZhdWx0LmNvbXB1dGVOdW1iZXJPZlZlcnRpY2VzKGdlb21ldHJ5KTsKICAgIGlmIChudW1iZXJPZlZlcnRpY2VzIDwgMykgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiVGhlIG51bWJlciBvZiB2ZXJ0aWNlcyBtdXN0IGJlIGF0IGxlYXN0IDMuIik7CiAgICB9CiAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgIG51bWJlck9mVmVydGljZXMsCiAgICAgIChudW1iZXJPZlZlcnRpY2VzIC0gMikgKiAzCiAgICApOwogICAgaW5kaWNlc1swXSA9IDA7CiAgICBpbmRpY2VzWzFdID0gMTsKICAgIGluZGljZXNbMl0gPSAyOwogICAgaWYgKG51bWJlck9mVmVydGljZXMgPiAzKSB7CiAgICAgIGluZGljZXNbM10gPSAwOwogICAgICBpbmRpY2VzWzRdID0gMjsKICAgICAgaW5kaWNlc1s1XSA9IDM7CiAgICB9CiAgICBsZXQgaW5kaWNlc0luZGV4ID0gNjsKICAgIGZvciAobGV0IGkgPSAzOyBpIDwgbnVtYmVyT2ZWZXJ0aWNlcyAtIDE7IGkgKz0gMikgewogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGk7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gaSAtIDE7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gaSArIDE7CiAgICAgIGlmIChpICsgMiA8IG51bWJlck9mVmVydGljZXMpIHsKICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGk7CiAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpICsgMTsKICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGkgKyAyOwogICAgICB9CiAgICB9CiAgICBnZW9tZXRyeS5pbmRpY2VzID0gaW5kaWNlczsKICAgIGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgPSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTOwogICAgcmV0dXJuIGdlb21ldHJ5OwogIH0KICBmdW5jdGlvbiBpbmRleExpbmVzKGdlb21ldHJ5KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmluZGljZXMpKSB7CiAgICAgIHJldHVybiBnZW9tZXRyeTsKICAgIH0KICAgIGNvbnN0IG51bWJlck9mVmVydGljZXMgPSBHZW9tZXRyeV9kZWZhdWx0LmNvbXB1dGVOdW1iZXJPZlZlcnRpY2VzKGdlb21ldHJ5KTsKICAgIGlmIChudW1iZXJPZlZlcnRpY2VzIDwgMikgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiVGhlIG51bWJlciBvZiB2ZXJ0aWNlcyBtdXN0IGJlIGF0IGxlYXN0IHR3by4iKTsKICAgIH0KICAgIGlmIChudW1iZXJPZlZlcnRpY2VzICUgMiAhPT0gMCkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiVGhlIG51bWJlciBvZiB2ZXJ0aWNlcyBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMi4iKTsKICAgIH0KICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgbnVtYmVyT2ZWZXJ0aWNlcywKICAgICAgbnVtYmVyT2ZWZXJ0aWNlcwogICAgKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZWZXJ0aWNlczsgKytpKSB7CiAgICAgIGluZGljZXNbaV0gPSBpOwogICAgfQogICAgZ2VvbWV0cnkuaW5kaWNlcyA9IGluZGljZXM7CiAgICByZXR1cm4gZ2VvbWV0cnk7CiAgfQogIGZ1bmN0aW9uIGluZGV4TGluZVN0cmlwKGdlb21ldHJ5KSB7CiAgICBjb25zdCBudW1iZXJPZlZlcnRpY2VzID0gR2VvbWV0cnlfZGVmYXVsdC5jb21wdXRlTnVtYmVyT2ZWZXJ0aWNlcyhnZW9tZXRyeSk7CiAgICBpZiAobnVtYmVyT2ZWZXJ0aWNlcyA8IDIpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIlRoZSBudW1iZXIgb2YgdmVydGljZXMgbXVzdCBiZSBhdCBsZWFzdCB0d28uIik7CiAgICB9CiAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgIG51bWJlck9mVmVydGljZXMsCiAgICAgIChudW1iZXJPZlZlcnRpY2VzIC0gMSkgKiAyCiAgICApOwogICAgaW5kaWNlc1swXSA9IDA7CiAgICBpbmRpY2VzWzFdID0gMTsKICAgIGxldCBpbmRpY2VzSW5kZXggPSAyOwogICAgZm9yIChsZXQgaSA9IDI7IGkgPCBudW1iZXJPZlZlcnRpY2VzOyArK2kpIHsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpIC0gMTsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpOwogICAgfQogICAgZ2VvbWV0cnkuaW5kaWNlcyA9IGluZGljZXM7CiAgICBnZW9tZXRyeS5wcmltaXRpdmVUeXBlID0gUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVTOwogICAgcmV0dXJuIGdlb21ldHJ5OwogIH0KICBmdW5jdGlvbiBpbmRleExpbmVMb29wKGdlb21ldHJ5KSB7CiAgICBjb25zdCBudW1iZXJPZlZlcnRpY2VzID0gR2VvbWV0cnlfZGVmYXVsdC5jb21wdXRlTnVtYmVyT2ZWZXJ0aWNlcyhnZW9tZXRyeSk7CiAgICBpZiAobnVtYmVyT2ZWZXJ0aWNlcyA8IDIpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIlRoZSBudW1iZXIgb2YgdmVydGljZXMgbXVzdCBiZSBhdCBsZWFzdCB0d28uIik7CiAgICB9CiAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgIG51bWJlck9mVmVydGljZXMsCiAgICAgIG51bWJlck9mVmVydGljZXMgKiAyCiAgICApOwogICAgaW5kaWNlc1swXSA9IDA7CiAgICBpbmRpY2VzWzFdID0gMTsKICAgIGxldCBpbmRpY2VzSW5kZXggPSAyOwogICAgZm9yIChsZXQgaSA9IDI7IGkgPCBudW1iZXJPZlZlcnRpY2VzOyArK2kpIHsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpIC0gMTsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpOwogICAgfQogICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBudW1iZXJPZlZlcnRpY2VzIC0gMTsKICAgIGluZGljZXNbaW5kaWNlc0luZGV4XSA9IDA7CiAgICBnZW9tZXRyeS5pbmRpY2VzID0gaW5kaWNlczsKICAgIGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgPSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuTElORVM7CiAgICByZXR1cm4gZ2VvbWV0cnk7CiAgfQogIGZ1bmN0aW9uIGluZGV4UHJpbWl0aXZlKGdlb21ldHJ5KSB7CiAgICBzd2l0Y2ggKGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUpIHsKICAgICAgY2FzZSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVfRkFOOgogICAgICAgIHJldHVybiBpbmRleFRyaWFuZ2xlRmFuKGdlb21ldHJ5KTsKICAgICAgY2FzZSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVfU1RSSVA6CiAgICAgICAgcmV0dXJuIGluZGV4VHJpYW5nbGVTdHJpcChnZW9tZXRyeSk7CiAgICAgIGNhc2UgUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlRSSUFOR0xFUzoKICAgICAgICByZXR1cm4gaW5kZXhUcmlhbmdsZXMoZ2VvbWV0cnkpOwogICAgICBjYXNlIFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5MSU5FX1NUUklQOgogICAgICAgIHJldHVybiBpbmRleExpbmVTdHJpcChnZW9tZXRyeSk7CiAgICAgIGNhc2UgUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVfTE9PUDoKICAgICAgICByZXR1cm4gaW5kZXhMaW5lTG9vcChnZW9tZXRyeSk7CiAgICAgIGNhc2UgUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVTOgogICAgICAgIHJldHVybiBpbmRleExpbmVzKGdlb21ldHJ5KTsKICAgIH0KICAgIHJldHVybiBnZW9tZXRyeTsKICB9CiAgZnVuY3Rpb24gb2Zmc2V0UG9pbnRGcm9tWFpQbGFuZShwLCBpc0JlaGluZCkgewogICAgaWYgKE1hdGguYWJzKHAueSkgPCBNYXRoX2RlZmF1bHQuRVBTSUxPTjYpIHsKICAgICAgaWYgKGlzQmVoaW5kKSB7CiAgICAgICAgcC55ID0gLU1hdGhfZGVmYXVsdC5FUFNJTE9ONjsKICAgICAgfSBlbHNlIHsKICAgICAgICBwLnkgPSBNYXRoX2RlZmF1bHQuRVBTSUxPTjY7CiAgICAgIH0KICAgIH0KICB9CiAgZnVuY3Rpb24gb2Zmc2V0VHJpYW5nbGVGcm9tWFpQbGFuZShwMCwgcDEsIHAyKSB7CiAgICBpZiAocDAueSAhPT0gMCAmJiBwMS55ICE9PSAwICYmIHAyLnkgIT09IDApIHsKICAgICAgb2Zmc2V0UG9pbnRGcm9tWFpQbGFuZShwMCwgcDAueSA8IDApOwogICAgICBvZmZzZXRQb2ludEZyb21YWlBsYW5lKHAxLCBwMS55IDwgMCk7CiAgICAgIG9mZnNldFBvaW50RnJvbVhaUGxhbmUocDIsIHAyLnkgPCAwKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgcDB5ID0gTWF0aC5hYnMocDAueSk7CiAgICBjb25zdCBwMXkgPSBNYXRoLmFicyhwMS55KTsKICAgIGNvbnN0IHAyeSA9IE1hdGguYWJzKHAyLnkpOwogICAgbGV0IHNpZ24yOwogICAgaWYgKHAweSA+IHAxeSkgewogICAgICBpZiAocDB5ID4gcDJ5KSB7CiAgICAgICAgc2lnbjIgPSBNYXRoX2RlZmF1bHQuc2lnbihwMC55KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzaWduMiA9IE1hdGhfZGVmYXVsdC5zaWduKHAyLnkpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKHAxeSA+IHAyeSkgewogICAgICBzaWduMiA9IE1hdGhfZGVmYXVsdC5zaWduKHAxLnkpOwogICAgfSBlbHNlIHsKICAgICAgc2lnbjIgPSBNYXRoX2RlZmF1bHQuc2lnbihwMi55KTsKICAgIH0KICAgIGNvbnN0IGlzQmVoaW5kID0gc2lnbjIgPCAwOwogICAgb2Zmc2V0UG9pbnRGcm9tWFpQbGFuZShwMCwgaXNCZWhpbmQpOwogICAgb2Zmc2V0UG9pbnRGcm9tWFpQbGFuZShwMSwgaXNCZWhpbmQpOwogICAgb2Zmc2V0UG9pbnRGcm9tWFpQbGFuZShwMiwgaXNCZWhpbmQpOwogIH0KICBmdW5jdGlvbiBnZXRYWkludGVyc2VjdGlvbk9mZnNldFBvaW50cyhwLCBwMSwgdTEyLCB2MTIpIHsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgIHAsCiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChwMSwgcCwgYzMpLAogICAgICAgIHAueSAvIChwLnkgLSBwMS55KSwKICAgICAgICBjMwogICAgICApLAogICAgICB1MTIKICAgICk7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUodTEyLCB2MTIpOwogICAgb2Zmc2V0UG9pbnRGcm9tWFpQbGFuZSh1MTIsIHRydWUpOwogICAgb2Zmc2V0UG9pbnRGcm9tWFpQbGFuZSh2MTIsIGZhbHNlKTsKICB9CiAgZnVuY3Rpb24gc3BsaXRUcmlhbmdsZShwMCwgcDEsIHAyKSB7CiAgICBpZiAocDAueCA+PSAwIHx8IHAxLnggPj0gMCB8fCBwMi54ID49IDApIHsKICAgICAgcmV0dXJuIHZvaWQgMDsKICAgIH0KICAgIG9mZnNldFRyaWFuZ2xlRnJvbVhaUGxhbmUocDAsIHAxLCBwMik7CiAgICBjb25zdCBwMEJlaGluZCA9IHAwLnkgPCAwOwogICAgY29uc3QgcDFCZWhpbmQgPSBwMS55IDwgMDsKICAgIGNvbnN0IHAyQmVoaW5kID0gcDIueSA8IDA7CiAgICBsZXQgbnVtQmVoaW5kID0gMDsKICAgIG51bUJlaGluZCArPSBwMEJlaGluZCA/IDEgOiAwOwogICAgbnVtQmVoaW5kICs9IHAxQmVoaW5kID8gMSA6IDA7CiAgICBudW1CZWhpbmQgKz0gcDJCZWhpbmQgPyAxIDogMDsKICAgIGNvbnN0IGluZGljZXMgPSBzcGxpdFRyaWFuZ2xlUmVzdWx0LmluZGljZXM7CiAgICBpZiAobnVtQmVoaW5kID09PSAxKSB7CiAgICAgIGluZGljZXNbMV0gPSAzOwogICAgICBpbmRpY2VzWzJdID0gNDsKICAgICAgaW5kaWNlc1s1XSA9IDY7CiAgICAgIGluZGljZXNbN10gPSA2OwogICAgICBpbmRpY2VzWzhdID0gNTsKICAgICAgaWYgKHAwQmVoaW5kKSB7CiAgICAgICAgZ2V0WFpJbnRlcnNlY3Rpb25PZmZzZXRQb2ludHMocDAsIHAxLCB1MSwgcTEpOwogICAgICAgIGdldFhaSW50ZXJzZWN0aW9uT2Zmc2V0UG9pbnRzKHAwLCBwMiwgdTIsIHEyKTsKICAgICAgICBpbmRpY2VzWzBdID0gMDsKICAgICAgICBpbmRpY2VzWzNdID0gMTsKICAgICAgICBpbmRpY2VzWzRdID0gMjsKICAgICAgICBpbmRpY2VzWzZdID0gMTsKICAgICAgfSBlbHNlIGlmIChwMUJlaGluZCkgewogICAgICAgIGdldFhaSW50ZXJzZWN0aW9uT2Zmc2V0UG9pbnRzKHAxLCBwMiwgdTEsIHExKTsKICAgICAgICBnZXRYWkludGVyc2VjdGlvbk9mZnNldFBvaW50cyhwMSwgcDAsIHUyLCBxMik7CiAgICAgICAgaW5kaWNlc1swXSA9IDE7CiAgICAgICAgaW5kaWNlc1szXSA9IDI7CiAgICAgICAgaW5kaWNlc1s0XSA9IDA7CiAgICAgICAgaW5kaWNlc1s2XSA9IDI7CiAgICAgIH0gZWxzZSBpZiAocDJCZWhpbmQpIHsKICAgICAgICBnZXRYWkludGVyc2VjdGlvbk9mZnNldFBvaW50cyhwMiwgcDAsIHUxLCBxMSk7CiAgICAgICAgZ2V0WFpJbnRlcnNlY3Rpb25PZmZzZXRQb2ludHMocDIsIHAxLCB1MiwgcTIpOwogICAgICAgIGluZGljZXNbMF0gPSAyOwogICAgICAgIGluZGljZXNbM10gPSAwOwogICAgICAgIGluZGljZXNbNF0gPSAxOwogICAgICAgIGluZGljZXNbNl0gPSAwOwogICAgICB9CiAgICB9IGVsc2UgaWYgKG51bUJlaGluZCA9PT0gMikgewogICAgICBpbmRpY2VzWzJdID0gNDsKICAgICAgaW5kaWNlc1s0XSA9IDQ7CiAgICAgIGluZGljZXNbNV0gPSAzOwogICAgICBpbmRpY2VzWzddID0gNTsKICAgICAgaW5kaWNlc1s4XSA9IDY7CiAgICAgIGlmICghcDBCZWhpbmQpIHsKICAgICAgICBnZXRYWkludGVyc2VjdGlvbk9mZnNldFBvaW50cyhwMCwgcDEsIHUxLCBxMSk7CiAgICAgICAgZ2V0WFpJbnRlcnNlY3Rpb25PZmZzZXRQb2ludHMocDAsIHAyLCB1MiwgcTIpOwogICAgICAgIGluZGljZXNbMF0gPSAxOwogICAgICAgIGluZGljZXNbMV0gPSAyOwogICAgICAgIGluZGljZXNbM10gPSAxOwogICAgICAgIGluZGljZXNbNl0gPSAwOwogICAgICB9IGVsc2UgaWYgKCFwMUJlaGluZCkgewogICAgICAgIGdldFhaSW50ZXJzZWN0aW9uT2Zmc2V0UG9pbnRzKHAxLCBwMiwgdTEsIHExKTsKICAgICAgICBnZXRYWkludGVyc2VjdGlvbk9mZnNldFBvaW50cyhwMSwgcDAsIHUyLCBxMik7CiAgICAgICAgaW5kaWNlc1swXSA9IDI7CiAgICAgICAgaW5kaWNlc1sxXSA9IDA7CiAgICAgICAgaW5kaWNlc1szXSA9IDI7CiAgICAgICAgaW5kaWNlc1s2XSA9IDE7CiAgICAgIH0gZWxzZSBpZiAoIXAyQmVoaW5kKSB7CiAgICAgICAgZ2V0WFpJbnRlcnNlY3Rpb25PZmZzZXRQb2ludHMocDIsIHAwLCB1MSwgcTEpOwogICAgICAgIGdldFhaSW50ZXJzZWN0aW9uT2Zmc2V0UG9pbnRzKHAyLCBwMSwgdTIsIHEyKTsKICAgICAgICBpbmRpY2VzWzBdID0gMDsKICAgICAgICBpbmRpY2VzWzFdID0gMTsKICAgICAgICBpbmRpY2VzWzNdID0gMDsKICAgICAgICBpbmRpY2VzWzZdID0gMjsKICAgICAgfQogICAgfQogICAgY29uc3QgcG9zaXRpb25zID0gc3BsaXRUcmlhbmdsZVJlc3VsdC5wb3NpdGlvbnM7CiAgICBwb3NpdGlvbnNbMF0gPSBwMDsKICAgIHBvc2l0aW9uc1sxXSA9IHAxOwogICAgcG9zaXRpb25zWzJdID0gcDI7CiAgICBwb3NpdGlvbnMubGVuZ3RoID0gMzsKICAgIGlmIChudW1CZWhpbmQgPT09IDEgfHwgbnVtQmVoaW5kID09PSAyKSB7CiAgICAgIHBvc2l0aW9uc1szXSA9IHUxOwogICAgICBwb3NpdGlvbnNbNF0gPSB1MjsKICAgICAgcG9zaXRpb25zWzVdID0gcTE7CiAgICAgIHBvc2l0aW9uc1s2XSA9IHEyOwogICAgICBwb3NpdGlvbnMubGVuZ3RoID0gNzsKICAgIH0KICAgIHJldHVybiBzcGxpdFRyaWFuZ2xlUmVzdWx0OwogIH0KICBmdW5jdGlvbiB1cGRhdGVHZW9tZXRyeUFmdGVyU3BsaXQoZ2VvbWV0cnksIGNvbXB1dGVCb3VuZGluZ1NwaGVyZSkgewogICAgY29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICBpZiAoYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMubGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybiB2b2lkIDA7CiAgICB9CiAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIGF0dHJpYnV0ZXMpIHsKICAgICAgaWYgKGF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmIGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzW3Byb3BlcnR5XSkgJiYgZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXNbcHJvcGVydHldLnZhbHVlcykpIHsKICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW3Byb3BlcnR5XTsKICAgICAgICBhdHRyaWJ1dGUudmFsdWVzID0gQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICAgICAgYXR0cmlidXRlLmNvbXBvbmVudERhdGF0eXBlLAogICAgICAgICAgYXR0cmlidXRlLnZhbHVlcwogICAgICAgICk7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IG51bWJlck9mVmVydGljZXMgPSBHZW9tZXRyeV9kZWZhdWx0LmNvbXB1dGVOdW1iZXJPZlZlcnRpY2VzKGdlb21ldHJ5KTsKICAgIGdlb21ldHJ5LmluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgbnVtYmVyT2ZWZXJ0aWNlcywKICAgICAgZ2VvbWV0cnkuaW5kaWNlcwogICAgKTsKICAgIGlmIChjb21wdXRlQm91bmRpbmdTcGhlcmUpIHsKICAgICAgZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmZyb21WZXJ0aWNlcygKICAgICAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcwogICAgICApOwogICAgfQogICAgcmV0dXJuIGdlb21ldHJ5OwogIH0KICBmdW5jdGlvbiBjb3B5R2VvbWV0cnlGb3JTcGxpdChnZW9tZXRyeSkgewogICAgY29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICBjb25zdCBjb3BpZWRBdHRyaWJ1dGVzID0ge307CiAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIGF0dHJpYnV0ZXMpIHsKICAgICAgaWYgKGF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmIGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzW3Byb3BlcnR5XSkgJiYgZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXNbcHJvcGVydHldLnZhbHVlcykpIHsKICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW3Byb3BlcnR5XTsKICAgICAgICBjb3BpZWRBdHRyaWJ1dGVzW3Byb3BlcnR5XSA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBhdHRyaWJ1dGUuY29tcG9uZW50RGF0YXR5cGUsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiBhdHRyaWJ1dGUuY29tcG9uZW50c1BlckF0dHJpYnV0ZSwKICAgICAgICAgIG5vcm1hbGl6ZTogYXR0cmlidXRlLm5vcm1hbGl6ZSwKICAgICAgICAgIHZhbHVlczogW10KICAgICAgICB9KTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgYXR0cmlidXRlczogY29waWVkQXR0cmlidXRlcywKICAgICAgaW5kaWNlczogW10sCiAgICAgIHByaW1pdGl2ZVR5cGU6IGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUKICAgIH0pOwogIH0KICBmdW5jdGlvbiB1cGRhdGVJbnN0YW5jZUFmdGVyU3BsaXQoaW5zdGFuY2UsIHdlc3RHZW9tZXRyeSwgZWFzdEdlb21ldHJ5KSB7CiAgICBjb25zdCBjb21wdXRlQm91bmRpbmdTcGhlcmUgPSBkZWZpbmVkX2RlZmF1bHQoaW5zdGFuY2UuZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUpOwogICAgd2VzdEdlb21ldHJ5ID0gdXBkYXRlR2VvbWV0cnlBZnRlclNwbGl0KHdlc3RHZW9tZXRyeSwgY29tcHV0ZUJvdW5kaW5nU3BoZXJlKTsKICAgIGVhc3RHZW9tZXRyeSA9IHVwZGF0ZUdlb21ldHJ5QWZ0ZXJTcGxpdChlYXN0R2VvbWV0cnksIGNvbXB1dGVCb3VuZGluZ1NwaGVyZSk7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGVhc3RHZW9tZXRyeSkgJiYgIWRlZmluZWRfZGVmYXVsdCh3ZXN0R2VvbWV0cnkpKSB7CiAgICAgIGluc3RhbmNlLmdlb21ldHJ5ID0gZWFzdEdlb21ldHJ5OwogICAgfSBlbHNlIGlmICghZGVmaW5lZF9kZWZhdWx0KGVhc3RHZW9tZXRyeSkgJiYgZGVmaW5lZF9kZWZhdWx0KHdlc3RHZW9tZXRyeSkpIHsKICAgICAgaW5zdGFuY2UuZ2VvbWV0cnkgPSB3ZXN0R2VvbWV0cnk7CiAgICB9IGVsc2UgewogICAgICBpbnN0YW5jZS53ZXN0SGVtaXNwaGVyZUdlb21ldHJ5ID0gd2VzdEdlb21ldHJ5OwogICAgICBpbnN0YW5jZS5lYXN0SGVtaXNwaGVyZUdlb21ldHJ5ID0gZWFzdEdlb21ldHJ5OwogICAgICBpbnN0YW5jZS5nZW9tZXRyeSA9IHZvaWQgMDsKICAgIH0KICB9CiAgZnVuY3Rpb24gZ2VuZXJhdGVCYXJ5Y2VudHJpY0ludGVycG9sYXRlRnVuY3Rpb24oQ2FydGVzaWFuVHlwZSwgbnVtYmVyT2ZDb21wb25lbnRzKSB7CiAgICBjb25zdCB2MFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuVHlwZSgpOwogICAgY29uc3QgdjFTY3JhdGNoMiA9IG5ldyBDYXJ0ZXNpYW5UeXBlKCk7CiAgICBjb25zdCB2MlNjcmF0Y2gyID0gbmV3IENhcnRlc2lhblR5cGUoKTsKICAgIHJldHVybiBmdW5jdGlvbihpMCwgaTEsIGkyLCBjb29yZHMsIHNvdXJjZVZhbHVlcywgY3VycmVudFZhbHVlcywgaW5zZXJ0ZWRJbmRleCwgbm9ybWFsaXplKSB7CiAgICAgIGNvbnN0IHYwMiA9IENhcnRlc2lhblR5cGUuZnJvbUFycmF5KAogICAgICAgIHNvdXJjZVZhbHVlcywKICAgICAgICBpMCAqIG51bWJlck9mQ29tcG9uZW50cywKICAgICAgICB2MFNjcmF0Y2gKICAgICAgKTsKICAgICAgY29uc3QgdjEyID0gQ2FydGVzaWFuVHlwZS5mcm9tQXJyYXkoCiAgICAgICAgc291cmNlVmFsdWVzLAogICAgICAgIGkxICogbnVtYmVyT2ZDb21wb25lbnRzLAogICAgICAgIHYxU2NyYXRjaDIKICAgICAgKTsKICAgICAgY29uc3QgdjIyID0gQ2FydGVzaWFuVHlwZS5mcm9tQXJyYXkoCiAgICAgICAgc291cmNlVmFsdWVzLAogICAgICAgIGkyICogbnVtYmVyT2ZDb21wb25lbnRzLAogICAgICAgIHYyU2NyYXRjaDIKICAgICAgKTsKICAgICAgQ2FydGVzaWFuVHlwZS5tdWx0aXBseUJ5U2NhbGFyKHYwMiwgY29vcmRzLngsIHYwMik7CiAgICAgIENhcnRlc2lhblR5cGUubXVsdGlwbHlCeVNjYWxhcih2MTIsIGNvb3Jkcy55LCB2MTIpOwogICAgICBDYXJ0ZXNpYW5UeXBlLm11bHRpcGx5QnlTY2FsYXIodjIyLCBjb29yZHMueiwgdjIyKTsKICAgICAgY29uc3QgdmFsdWUgPSBDYXJ0ZXNpYW5UeXBlLmFkZCh2MDIsIHYxMiwgdjAyKTsKICAgICAgQ2FydGVzaWFuVHlwZS5hZGQodmFsdWUsIHYyMiwgdmFsdWUpOwogICAgICBpZiAobm9ybWFsaXplKSB7CiAgICAgICAgQ2FydGVzaWFuVHlwZS5ub3JtYWxpemUodmFsdWUsIHZhbHVlKTsKICAgICAgfQogICAgICBDYXJ0ZXNpYW5UeXBlLnBhY2soCiAgICAgICAgdmFsdWUsCiAgICAgICAgY3VycmVudFZhbHVlcywKICAgICAgICBpbnNlcnRlZEluZGV4ICogbnVtYmVyT2ZDb21wb25lbnRzCiAgICAgICk7CiAgICB9OwogIH0KICBmdW5jdGlvbiBjb21wdXRlVHJpYW5nbGVBdHRyaWJ1dGVzKGkwLCBpMSwgaTIsIHBvaW50LCBwb3NpdGlvbnMsIG5vcm1hbHMsIHRhbmdlbnRzLCBiaXRhbmdlbnRzLCB0ZXhDb29yZHMsIGV4dHJ1ZGVEaXJlY3Rpb25zLCBhcHBseU9mZnNldCwgY3VycmVudEF0dHJpYnV0ZXMsIGN1c3RvbUF0dHJpYnV0ZU5hbWVzLCBjdXN0b21BdHRyaWJ1dGVzTGVuZ3RoLCBhbGxBdHRyaWJ1dGVzLCBpbnNlcnRlZEluZGV4KSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChub3JtYWxzKSAmJiAhZGVmaW5lZF9kZWZhdWx0KHRhbmdlbnRzKSAmJiAhZGVmaW5lZF9kZWZhdWx0KGJpdGFuZ2VudHMpICYmICFkZWZpbmVkX2RlZmF1bHQodGV4Q29vcmRzKSAmJiAhZGVmaW5lZF9kZWZhdWx0KGV4dHJ1ZGVEaXJlY3Rpb25zKSAmJiBjdXN0b21BdHRyaWJ1dGVzTGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IHAwID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGkwICogMywgcDBTY3JhdGNoKTsKICAgIGNvbnN0IHAxID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGkxICogMywgcDFTY3JhdGNoKTsKICAgIGNvbnN0IHAyID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGkyICogMywgcDJTY3JhdGNoKTsKICAgIGNvbnN0IGNvb3JkcyA9IGJhcnljZW50cmljQ29vcmRpbmF0ZXNfZGVmYXVsdChwb2ludCwgcDAsIHAxLCBwMiwgYmFyeWNlbnRyaWNTY3JhdGNoKTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNvb3JkcykpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdChub3JtYWxzKSkgewogICAgICBpbnRlcnBvbGF0ZUFuZFBhY2tDYXJ0ZXNpYW4zKAogICAgICAgIGkwLAogICAgICAgIGkxLAogICAgICAgIGkyLAogICAgICAgIGNvb3JkcywKICAgICAgICBub3JtYWxzLAogICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLm5vcm1hbC52YWx1ZXMsCiAgICAgICAgaW5zZXJ0ZWRJbmRleCwKICAgICAgICB0cnVlCiAgICAgICk7CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGV4dHJ1ZGVEaXJlY3Rpb25zKSkgewogICAgICBjb25zdCBkMCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoZXh0cnVkZURpcmVjdGlvbnMsIGkwICogMywgcDBTY3JhdGNoKTsKICAgICAgY29uc3QgZDEgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGV4dHJ1ZGVEaXJlY3Rpb25zLCBpMSAqIDMsIHAxU2NyYXRjaCk7CiAgICAgIGNvbnN0IGQyID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShleHRydWRlRGlyZWN0aW9ucywgaTIgKiAzLCBwMlNjcmF0Y2gpOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihkMCwgY29vcmRzLngsIGQwKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoZDEsIGNvb3Jkcy55LCBkMSk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGQyLCBjb29yZHMueiwgZDIpOwogICAgICBsZXQgZGlyZWN0aW9uMjsKICAgICAgaWYgKCFDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzKGQwLCBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTykgfHwgIUNhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHMoZDEsIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPKSB8fCAhQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFscyhkMiwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pKSB7CiAgICAgICAgZGlyZWN0aW9uMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoZDAsIGQxLCBkMCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChkaXJlY3Rpb24yLCBkMiwgZGlyZWN0aW9uMik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShkaXJlY3Rpb24yLCBkaXJlY3Rpb24yKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBkaXJlY3Rpb24yID0gcDBTY3JhdGNoOwogICAgICAgIGRpcmVjdGlvbjIueCA9IDA7CiAgICAgICAgZGlyZWN0aW9uMi55ID0gMDsKICAgICAgICBkaXJlY3Rpb24yLnogPSAwOwogICAgICB9CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKAogICAgICAgIGRpcmVjdGlvbjIsCiAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMuZXh0cnVkZURpcmVjdGlvbi52YWx1ZXMsCiAgICAgICAgaW5zZXJ0ZWRJbmRleCAqIDMKICAgICAgKTsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYXBwbHlPZmZzZXQpKSB7CiAgICAgIGludGVycG9sYXRlQW5kUGFja0Jvb2xlYW4oCiAgICAgICAgaTAsCiAgICAgICAgaTEsCiAgICAgICAgaTIsCiAgICAgICAgY29vcmRzLAogICAgICAgIGFwcGx5T2Zmc2V0LAogICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0LnZhbHVlcywKICAgICAgICBpbnNlcnRlZEluZGV4CiAgICAgICk7CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHRhbmdlbnRzKSkgewogICAgICBpbnRlcnBvbGF0ZUFuZFBhY2tDYXJ0ZXNpYW4zKAogICAgICAgIGkwLAogICAgICAgIGkxLAogICAgICAgIGkyLAogICAgICAgIGNvb3JkcywKICAgICAgICB0YW5nZW50cywKICAgICAgICBjdXJyZW50QXR0cmlidXRlcy50YW5nZW50LnZhbHVlcywKICAgICAgICBpbnNlcnRlZEluZGV4LAogICAgICAgIHRydWUKICAgICAgKTsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYml0YW5nZW50cykpIHsKICAgICAgaW50ZXJwb2xhdGVBbmRQYWNrQ2FydGVzaWFuMygKICAgICAgICBpMCwKICAgICAgICBpMSwKICAgICAgICBpMiwKICAgICAgICBjb29yZHMsCiAgICAgICAgYml0YW5nZW50cywKICAgICAgICBjdXJyZW50QXR0cmlidXRlcy5iaXRhbmdlbnQudmFsdWVzLAogICAgICAgIGluc2VydGVkSW5kZXgsCiAgICAgICAgdHJ1ZQogICAgICApOwogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdCh0ZXhDb29yZHMpKSB7CiAgICAgIGludGVycG9sYXRlQW5kUGFja0NhcnRlc2lhbjIoCiAgICAgICAgaTAsCiAgICAgICAgaTEsCiAgICAgICAgaTIsCiAgICAgICAgY29vcmRzLAogICAgICAgIHRleENvb3JkcywKICAgICAgICBjdXJyZW50QXR0cmlidXRlcy5zdC52YWx1ZXMsCiAgICAgICAgaW5zZXJ0ZWRJbmRleAogICAgICApOwogICAgfQogICAgaWYgKGN1c3RvbUF0dHJpYnV0ZXNMZW5ndGggPiAwKSB7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VzdG9tQXR0cmlidXRlc0xlbmd0aDsgaSsrKSB7CiAgICAgICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IGN1c3RvbUF0dHJpYnV0ZU5hbWVzW2ldOwogICAgICAgIGdlbmVyaWNJbnRlcnBvbGF0ZSgKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBpMiwKICAgICAgICAgIGNvb3JkcywKICAgICAgICAgIGluc2VydGVkSW5kZXgsCiAgICAgICAgICBhbGxBdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdLAogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0KICAgICAgICApOwogICAgICB9CiAgICB9CiAgfQogIGZ1bmN0aW9uIGdlbmVyaWNJbnRlcnBvbGF0ZShpMCwgaTEsIGkyLCBjb29yZHMsIGluc2VydGVkSW5kZXgsIHNvdXJjZUF0dHJpYnV0ZSwgY3VycmVudEF0dHJpYnV0ZSkgewogICAgY29uc3QgY29tcG9uZW50c1BlckF0dHJpYnV0ZSA9IHNvdXJjZUF0dHJpYnV0ZS5jb21wb25lbnRzUGVyQXR0cmlidXRlOwogICAgY29uc3Qgc291cmNlVmFsdWVzID0gc291cmNlQXR0cmlidXRlLnZhbHVlczsKICAgIGNvbnN0IGN1cnJlbnRWYWx1ZXMgPSBjdXJyZW50QXR0cmlidXRlLnZhbHVlczsKICAgIHN3aXRjaCAoY29tcG9uZW50c1BlckF0dHJpYnV0ZSkgewogICAgICBjYXNlIDQ6CiAgICAgICAgaW50ZXJwb2xhdGVBbmRQYWNrQ2FydGVzaWFuNCgKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBpMiwKICAgICAgICAgIGNvb3JkcywKICAgICAgICAgIHNvdXJjZVZhbHVlcywKICAgICAgICAgIGN1cnJlbnRWYWx1ZXMsCiAgICAgICAgICBpbnNlcnRlZEluZGV4LAogICAgICAgICAgZmFsc2UKICAgICAgICApOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDM6CiAgICAgICAgaW50ZXJwb2xhdGVBbmRQYWNrQ2FydGVzaWFuMygKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBpMiwKICAgICAgICAgIGNvb3JkcywKICAgICAgICAgIHNvdXJjZVZhbHVlcywKICAgICAgICAgIGN1cnJlbnRWYWx1ZXMsCiAgICAgICAgICBpbnNlcnRlZEluZGV4LAogICAgICAgICAgZmFsc2UKICAgICAgICApOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDI6CiAgICAgICAgaW50ZXJwb2xhdGVBbmRQYWNrQ2FydGVzaWFuMigKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBpMiwKICAgICAgICAgIGNvb3JkcywKICAgICAgICAgIHNvdXJjZVZhbHVlcywKICAgICAgICAgIGN1cnJlbnRWYWx1ZXMsCiAgICAgICAgICBpbnNlcnRlZEluZGV4LAogICAgICAgICAgZmFsc2UKICAgICAgICApOwogICAgICAgIGJyZWFrOwogICAgICBkZWZhdWx0OgogICAgICAgIGN1cnJlbnRWYWx1ZXNbaW5zZXJ0ZWRJbmRleF0gPSBzb3VyY2VWYWx1ZXNbaTBdICogY29vcmRzLnggKyBzb3VyY2VWYWx1ZXNbaTFdICogY29vcmRzLnkgKyBzb3VyY2VWYWx1ZXNbaTJdICogY29vcmRzLno7CiAgICB9CiAgfQogIGZ1bmN0aW9uIGluc2VydFNwbGl0UG9pbnQoY3VycmVudEF0dHJpYnV0ZXMsIGN1cnJlbnRJbmRpY2VzLCBjdXJyZW50SW5kZXhNYXAsIGluZGljZXMsIGN1cnJlbnRJbmRleCwgcG9pbnQpIHsKICAgIGNvbnN0IGluc2VydEluZGV4ID0gY3VycmVudEF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLmxlbmd0aCAvIDM7CiAgICBpZiAoY3VycmVudEluZGV4ICE9PSAtMSkgewogICAgICBjb25zdCBwcmV2SW5kZXggPSBpbmRpY2VzW2N1cnJlbnRJbmRleF07CiAgICAgIGNvbnN0IG5ld0luZGV4ID0gY3VycmVudEluZGV4TWFwW3ByZXZJbmRleF07CiAgICAgIGlmIChuZXdJbmRleCA9PT0gLTEpIHsKICAgICAgICBjdXJyZW50SW5kZXhNYXBbcHJldkluZGV4XSA9IGluc2VydEluZGV4OwogICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5wdXNoKHBvaW50LngsIHBvaW50LnksIHBvaW50LnopOwogICAgICAgIGN1cnJlbnRJbmRpY2VzLnB1c2goaW5zZXJ0SW5kZXgpOwogICAgICAgIHJldHVybiBpbnNlcnRJbmRleDsKICAgICAgfQogICAgICBjdXJyZW50SW5kaWNlcy5wdXNoKG5ld0luZGV4KTsKICAgICAgcmV0dXJuIG5ld0luZGV4OwogICAgfQogICAgY3VycmVudEF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLnB1c2gocG9pbnQueCwgcG9pbnQueSwgcG9pbnQueik7CiAgICBjdXJyZW50SW5kaWNlcy5wdXNoKGluc2VydEluZGV4KTsKICAgIHJldHVybiBpbnNlcnRJbmRleDsKICB9CiAgZnVuY3Rpb24gc3BsaXRMb25naXR1ZGVUcmlhbmdsZXMoaW5zdGFuY2UpIHsKICAgIGNvbnN0IGdlb21ldHJ5ID0gaW5zdGFuY2UuZ2VvbWV0cnk7CiAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlczsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzOwogICAgY29uc3Qgbm9ybWFscyA9IGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzLm5vcm1hbCkgPyBhdHRyaWJ1dGVzLm5vcm1hbC52YWx1ZXMgOiB2b2lkIDA7CiAgICBjb25zdCBiaXRhbmdlbnRzID0gZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMuYml0YW5nZW50KSA/IGF0dHJpYnV0ZXMuYml0YW5nZW50LnZhbHVlcyA6IHZvaWQgMDsKICAgIGNvbnN0IHRhbmdlbnRzID0gZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMudGFuZ2VudCkgPyBhdHRyaWJ1dGVzLnRhbmdlbnQudmFsdWVzIDogdm9pZCAwOwogICAgY29uc3QgdGV4Q29vcmRzID0gZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMuc3QpID8gYXR0cmlidXRlcy5zdC52YWx1ZXMgOiB2b2lkIDA7CiAgICBjb25zdCBleHRydWRlRGlyZWN0aW9ucyA9IGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzLmV4dHJ1ZGVEaXJlY3Rpb24pID8gYXR0cmlidXRlcy5leHRydWRlRGlyZWN0aW9uLnZhbHVlcyA6IHZvaWQgMDsKICAgIGNvbnN0IGFwcGx5T2Zmc2V0ID0gZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQpID8gYXR0cmlidXRlcy5hcHBseU9mZnNldC52YWx1ZXMgOiB2b2lkIDA7CiAgICBjb25zdCBpbmRpY2VzID0gZ2VvbWV0cnkuaW5kaWNlczsKICAgIGNvbnN0IGN1c3RvbUF0dHJpYnV0ZU5hbWVzID0gW107CiAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZU5hbWUgaW4gYXR0cmlidXRlcykgewogICAgICBpZiAoYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShhdHRyaWJ1dGVOYW1lKSAmJiAhTkFNRURfQVRUUklCVVRFU1thdHRyaWJ1dGVOYW1lXSAmJiBkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSkpIHsKICAgICAgICBjdXN0b21BdHRyaWJ1dGVOYW1lcy5wdXNoKGF0dHJpYnV0ZU5hbWUpOwogICAgICB9CiAgICB9CiAgICBjb25zdCBjdXN0b21BdHRyaWJ1dGVzTGVuZ3RoID0gY3VzdG9tQXR0cmlidXRlTmFtZXMubGVuZ3RoOwogICAgY29uc3QgZWFzdEdlb21ldHJ5ID0gY29weUdlb21ldHJ5Rm9yU3BsaXQoZ2VvbWV0cnkpOwogICAgY29uc3Qgd2VzdEdlb21ldHJ5ID0gY29weUdlb21ldHJ5Rm9yU3BsaXQoZ2VvbWV0cnkpOwogICAgbGV0IGN1cnJlbnRBdHRyaWJ1dGVzOwogICAgbGV0IGN1cnJlbnRJbmRpY2VzOwogICAgbGV0IGN1cnJlbnRJbmRleE1hcDsKICAgIGxldCBpbnNlcnRlZEluZGV4OwogICAgbGV0IGk7CiAgICBjb25zdCB3ZXN0R2VvbWV0cnlJbmRleE1hcCA9IFtdOwogICAgd2VzdEdlb21ldHJ5SW5kZXhNYXAubGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICBjb25zdCBlYXN0R2VvbWV0cnlJbmRleE1hcCA9IFtdOwogICAgZWFzdEdlb21ldHJ5SW5kZXhNYXAubGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICBmb3IgKGkgPSAwOyBpIDwgd2VzdEdlb21ldHJ5SW5kZXhNYXAubGVuZ3RoOyArK2kpIHsKICAgICAgd2VzdEdlb21ldHJ5SW5kZXhNYXBbaV0gPSAtMTsKICAgICAgZWFzdEdlb21ldHJ5SW5kZXhNYXBbaV0gPSAtMTsKICAgIH0KICAgIGNvbnN0IGxlbiA9IGluZGljZXMubGVuZ3RoOwogICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAzKSB7CiAgICAgIGNvbnN0IGkwID0gaW5kaWNlc1tpXTsKICAgICAgY29uc3QgaTEgPSBpbmRpY2VzW2kgKyAxXTsKICAgICAgY29uc3QgaTIgPSBpbmRpY2VzW2kgKyAyXTsKICAgICAgbGV0IHAwID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGkwICogMyk7CiAgICAgIGxldCBwMSA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCBpMSAqIDMpOwogICAgICBsZXQgcDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHBvc2l0aW9ucywgaTIgKiAzKTsKICAgICAgY29uc3QgcmVzdWx0ID0gc3BsaXRUcmlhbmdsZShwMCwgcDEsIHAyKTsKICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZXN1bHQpICYmIHJlc3VsdC5wb3NpdGlvbnMubGVuZ3RoID4gMykgewogICAgICAgIGNvbnN0IHJlc3VsdFBvc2l0aW9ucyA9IHJlc3VsdC5wb3NpdGlvbnM7CiAgICAgICAgY29uc3QgcmVzdWx0SW5kaWNlcyA9IHJlc3VsdC5pbmRpY2VzOwogICAgICAgIGNvbnN0IHJlc3VsdExlbmd0aCA9IHJlc3VsdEluZGljZXMubGVuZ3RoOwogICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcmVzdWx0TGVuZ3RoOyArK2opIHsKICAgICAgICAgIGNvbnN0IHJlc3VsdEluZGV4ID0gcmVzdWx0SW5kaWNlc1tqXTsKICAgICAgICAgIGNvbnN0IHBvaW50ID0gcmVzdWx0UG9zaXRpb25zW3Jlc3VsdEluZGV4XTsKICAgICAgICAgIGlmIChwb2ludC55IDwgMCkgewogICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcyA9IHdlc3RHZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICAgICAgICBjdXJyZW50SW5kaWNlcyA9IHdlc3RHZW9tZXRyeS5pbmRpY2VzOwogICAgICAgICAgICBjdXJyZW50SW5kZXhNYXAgPSB3ZXN0R2VvbWV0cnlJbmRleE1hcDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzID0gZWFzdEdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICAgICAgICAgIGN1cnJlbnRJbmRpY2VzID0gZWFzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgICAgIGN1cnJlbnRJbmRleE1hcCA9IGVhc3RHZW9tZXRyeUluZGV4TWFwOwogICAgICAgICAgfQogICAgICAgICAgaW5zZXJ0ZWRJbmRleCA9IGluc2VydFNwbGl0UG9pbnQoCiAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLAogICAgICAgICAgICBjdXJyZW50SW5kaWNlcywKICAgICAgICAgICAgY3VycmVudEluZGV4TWFwLAogICAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgICByZXN1bHRJbmRleCA8IDMgPyBpICsgcmVzdWx0SW5kZXggOiAtMSwKICAgICAgICAgICAgcG9pbnQKICAgICAgICAgICk7CiAgICAgICAgICBjb21wdXRlVHJpYW5nbGVBdHRyaWJ1dGVzKAogICAgICAgICAgICBpMCwKICAgICAgICAgICAgaTEsCiAgICAgICAgICAgIGkyLAogICAgICAgICAgICBwb2ludCwKICAgICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgICBub3JtYWxzLAogICAgICAgICAgICB0YW5nZW50cywKICAgICAgICAgICAgYml0YW5nZW50cywKICAgICAgICAgICAgdGV4Q29vcmRzLAogICAgICAgICAgICBleHRydWRlRGlyZWN0aW9ucywKICAgICAgICAgICAgYXBwbHlPZmZzZXQsCiAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLAogICAgICAgICAgICBjdXN0b21BdHRyaWJ1dGVOYW1lcywKICAgICAgICAgICAgY3VzdG9tQXR0cmlidXRlc0xlbmd0aCwKICAgICAgICAgICAgYXR0cmlidXRlcywKICAgICAgICAgICAgaW5zZXJ0ZWRJbmRleAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBwMCA9IHJlc3VsdC5wb3NpdGlvbnNbMF07CiAgICAgICAgICBwMSA9IHJlc3VsdC5wb3NpdGlvbnNbMV07CiAgICAgICAgICBwMiA9IHJlc3VsdC5wb3NpdGlvbnNbMl07CiAgICAgICAgfQogICAgICAgIGlmIChwMC55IDwgMCkgewogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMgPSB3ZXN0R2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICAgIGN1cnJlbnRJbmRpY2VzID0gd2VzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgICBjdXJyZW50SW5kZXhNYXAgPSB3ZXN0R2VvbWV0cnlJbmRleE1hcDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMgPSBlYXN0R2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICAgIGN1cnJlbnRJbmRpY2VzID0gZWFzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgICBjdXJyZW50SW5kZXhNYXAgPSBlYXN0R2VvbWV0cnlJbmRleE1hcDsKICAgICAgICB9CiAgICAgICAgaW5zZXJ0ZWRJbmRleCA9IGluc2VydFNwbGl0UG9pbnQoCiAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcywKICAgICAgICAgIGN1cnJlbnRJbmRpY2VzLAogICAgICAgICAgY3VycmVudEluZGV4TWFwLAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIGksCiAgICAgICAgICBwMAogICAgICAgICk7CiAgICAgICAgY29tcHV0ZVRyaWFuZ2xlQXR0cmlidXRlcygKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBpMiwKICAgICAgICAgIHAwLAogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgbm9ybWFscywKICAgICAgICAgIHRhbmdlbnRzLAogICAgICAgICAgYml0YW5nZW50cywKICAgICAgICAgIHRleENvb3JkcywKICAgICAgICAgIGV4dHJ1ZGVEaXJlY3Rpb25zLAogICAgICAgICAgYXBwbHlPZmZzZXQsCiAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcywKICAgICAgICAgIGN1c3RvbUF0dHJpYnV0ZU5hbWVzLAogICAgICAgICAgY3VzdG9tQXR0cmlidXRlc0xlbmd0aCwKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBpbnNlcnRlZEluZGV4CiAgICAgICAgKTsKICAgICAgICBpbnNlcnRlZEluZGV4ID0gaW5zZXJ0U3BsaXRQb2ludCgKICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLAogICAgICAgICAgY3VycmVudEluZGljZXMsCiAgICAgICAgICBjdXJyZW50SW5kZXhNYXAsCiAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgaSArIDEsCiAgICAgICAgICBwMQogICAgICAgICk7CiAgICAgICAgY29tcHV0ZVRyaWFuZ2xlQXR0cmlidXRlcygKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBpMiwKICAgICAgICAgIHAxLAogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgbm9ybWFscywKICAgICAgICAgIHRhbmdlbnRzLAogICAgICAgICAgYml0YW5nZW50cywKICAgICAgICAgIHRleENvb3JkcywKICAgICAgICAgIGV4dHJ1ZGVEaXJlY3Rpb25zLAogICAgICAgICAgYXBwbHlPZmZzZXQsCiAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcywKICAgICAgICAgIGN1c3RvbUF0dHJpYnV0ZU5hbWVzLAogICAgICAgICAgY3VzdG9tQXR0cmlidXRlc0xlbmd0aCwKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBpbnNlcnRlZEluZGV4CiAgICAgICAgKTsKICAgICAgICBpbnNlcnRlZEluZGV4ID0gaW5zZXJ0U3BsaXRQb2ludCgKICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLAogICAgICAgICAgY3VycmVudEluZGljZXMsCiAgICAgICAgICBjdXJyZW50SW5kZXhNYXAsCiAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgaSArIDIsCiAgICAgICAgICBwMgogICAgICAgICk7CiAgICAgICAgY29tcHV0ZVRyaWFuZ2xlQXR0cmlidXRlcygKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBpMiwKICAgICAgICAgIHAyLAogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgbm9ybWFscywKICAgICAgICAgIHRhbmdlbnRzLAogICAgICAgICAgYml0YW5nZW50cywKICAgICAgICAgIHRleENvb3JkcywKICAgICAgICAgIGV4dHJ1ZGVEaXJlY3Rpb25zLAogICAgICAgICAgYXBwbHlPZmZzZXQsCiAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcywKICAgICAgICAgIGN1c3RvbUF0dHJpYnV0ZU5hbWVzLAogICAgICAgICAgY3VzdG9tQXR0cmlidXRlc0xlbmd0aCwKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBpbnNlcnRlZEluZGV4CiAgICAgICAgKTsKICAgICAgfQogICAgfQogICAgdXBkYXRlSW5zdGFuY2VBZnRlclNwbGl0KGluc3RhbmNlLCB3ZXN0R2VvbWV0cnksIGVhc3RHZW9tZXRyeSk7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVMaW5lQXR0cmlidXRlcyhpMCwgaTEsIHBvaW50LCBwb3NpdGlvbnMsIGluc2VydEluZGV4LCBjdXJyZW50QXR0cmlidXRlcywgYXBwbHlPZmZzZXQpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFwcGx5T2Zmc2V0KSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBwMCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCBpMCAqIDMsIHAwU2NyYXRjaCk7CiAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24ocDAsIHBvaW50LCBNYXRoX2RlZmF1bHQuRVBTSUxPTjEwKSkgewogICAgICBjdXJyZW50QXR0cmlidXRlcy5hcHBseU9mZnNldC52YWx1ZXNbaW5zZXJ0SW5kZXhdID0gYXBwbHlPZmZzZXRbaTBdOwogICAgfSBlbHNlIHsKICAgICAgY3VycmVudEF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQudmFsdWVzW2luc2VydEluZGV4XSA9IGFwcGx5T2Zmc2V0W2kxXTsKICAgIH0KICB9CiAgZnVuY3Rpb24gc3BsaXRMb25naXR1ZGVMaW5lcyhpbnN0YW5jZSkgewogICAgY29uc3QgZ2VvbWV0cnkgPSBpbnN0YW5jZS5nZW9tZXRyeTsKICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgY29uc3QgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXM7CiAgICBjb25zdCBhcHBseU9mZnNldCA9IGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0KSA/IGF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQudmFsdWVzIDogdm9pZCAwOwogICAgY29uc3QgaW5kaWNlcyA9IGdlb21ldHJ5LmluZGljZXM7CiAgICBjb25zdCBlYXN0R2VvbWV0cnkgPSBjb3B5R2VvbWV0cnlGb3JTcGxpdChnZW9tZXRyeSk7CiAgICBjb25zdCB3ZXN0R2VvbWV0cnkgPSBjb3B5R2VvbWV0cnlGb3JTcGxpdChnZW9tZXRyeSk7CiAgICBsZXQgaTsKICAgIGNvbnN0IGxlbmd0aCA9IGluZGljZXMubGVuZ3RoOwogICAgY29uc3Qgd2VzdEdlb21ldHJ5SW5kZXhNYXAgPSBbXTsKICAgIHdlc3RHZW9tZXRyeUluZGV4TWFwLmxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGggLyAzOwogICAgY29uc3QgZWFzdEdlb21ldHJ5SW5kZXhNYXAgPSBbXTsKICAgIGVhc3RHZW9tZXRyeUluZGV4TWFwLmxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGggLyAzOwogICAgZm9yIChpID0gMDsgaSA8IHdlc3RHZW9tZXRyeUluZGV4TWFwLmxlbmd0aDsgKytpKSB7CiAgICAgIHdlc3RHZW9tZXRyeUluZGV4TWFwW2ldID0gLTE7CiAgICAgIGVhc3RHZW9tZXRyeUluZGV4TWFwW2ldID0gLTE7CiAgICB9CiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDIpIHsKICAgICAgY29uc3QgaTAgPSBpbmRpY2VzW2ldOwogICAgICBjb25zdCBpMSA9IGluZGljZXNbaSArIDFdOwogICAgICBjb25zdCBwMCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCBpMCAqIDMsIHAwU2NyYXRjaCk7CiAgICAgIGNvbnN0IHAxID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGkxICogMywgcDFTY3JhdGNoKTsKICAgICAgbGV0IGluc2VydEluZGV4OwogICAgICBpZiAoTWF0aC5hYnMocDAueSkgPCBNYXRoX2RlZmF1bHQuRVBTSUxPTjYpIHsKICAgICAgICBpZiAocDAueSA8IDApIHsKICAgICAgICAgIHAwLnkgPSAtTWF0aF9kZWZhdWx0LkVQU0lMT042OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBwMC55ID0gTWF0aF9kZWZhdWx0LkVQU0lMT042OwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoTWF0aC5hYnMocDEueSkgPCBNYXRoX2RlZmF1bHQuRVBTSUxPTjYpIHsKICAgICAgICBpZiAocDEueSA8IDApIHsKICAgICAgICAgIHAxLnkgPSAtTWF0aF9kZWZhdWx0LkVQU0lMT042OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBwMS55ID0gTWF0aF9kZWZhdWx0LkVQU0lMT042OwogICAgICAgIH0KICAgICAgfQogICAgICBsZXQgcDBBdHRyaWJ1dGVzID0gZWFzdEdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICAgIGxldCBwMEluZGljZXMgPSBlYXN0R2VvbWV0cnkuaW5kaWNlczsKICAgICAgbGV0IHAwSW5kZXhNYXAgPSBlYXN0R2VvbWV0cnlJbmRleE1hcDsKICAgICAgbGV0IHAxQXR0cmlidXRlcyA9IHdlc3RHZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICBsZXQgcDFJbmRpY2VzID0gd2VzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgIGxldCBwMUluZGV4TWFwID0gd2VzdEdlb21ldHJ5SW5kZXhNYXA7CiAgICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IEludGVyc2VjdGlvblRlc3RzX2RlZmF1bHQubGluZVNlZ21lbnRQbGFuZSgKICAgICAgICBwMCwKICAgICAgICBwMSwKICAgICAgICB4elBsYW5lLAogICAgICAgIHAyU2NyYXRjaAogICAgICApOwogICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGludGVyc2VjdGlvbikpIHsKICAgICAgICBjb25zdCBvZmZzZXQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1ksCiAgICAgICAgICA1ICogTWF0aF9kZWZhdWx0LkVQU0lMT045LAogICAgICAgICAgb2Zmc2V0U2NyYXRjaAogICAgICAgICk7CiAgICAgICAgaWYgKHAwLnkgPCAwKSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKG9mZnNldCwgb2Zmc2V0KTsKICAgICAgICAgIHAwQXR0cmlidXRlcyA9IHdlc3RHZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICAgICAgcDBJbmRpY2VzID0gd2VzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgICBwMEluZGV4TWFwID0gd2VzdEdlb21ldHJ5SW5kZXhNYXA7CiAgICAgICAgICBwMUF0dHJpYnV0ZXMgPSBlYXN0R2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICAgIHAxSW5kaWNlcyA9IGVhc3RHZW9tZXRyeS5pbmRpY2VzOwogICAgICAgICAgcDFJbmRleE1hcCA9IGVhc3RHZW9tZXRyeUluZGV4TWFwOwogICAgICAgIH0KICAgICAgICBjb25zdCBvZmZzZXRQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICBpbnRlcnNlY3Rpb24sCiAgICAgICAgICBvZmZzZXQsCiAgICAgICAgICBvZmZzZXRQb2ludFNjcmF0Y2gKICAgICAgICApOwogICAgICAgIGluc2VydEluZGV4ID0gaW5zZXJ0U3BsaXRQb2ludCgKICAgICAgICAgIHAwQXR0cmlidXRlcywKICAgICAgICAgIHAwSW5kaWNlcywKICAgICAgICAgIHAwSW5kZXhNYXAsCiAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgaSwKICAgICAgICAgIHAwCiAgICAgICAgKTsKICAgICAgICBjb21wdXRlTGluZUF0dHJpYnV0ZXMoCiAgICAgICAgICBpMCwKICAgICAgICAgIGkxLAogICAgICAgICAgcDAsCiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICBpbnNlcnRJbmRleCwKICAgICAgICAgIHAwQXR0cmlidXRlcywKICAgICAgICAgIGFwcGx5T2Zmc2V0CiAgICAgICAgKTsKICAgICAgICBpbnNlcnRJbmRleCA9IGluc2VydFNwbGl0UG9pbnQoCiAgICAgICAgICBwMEF0dHJpYnV0ZXMsCiAgICAgICAgICBwMEluZGljZXMsCiAgICAgICAgICBwMEluZGV4TWFwLAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIC0xLAogICAgICAgICAgb2Zmc2V0UG9pbnQKICAgICAgICApOwogICAgICAgIGNvbXB1dGVMaW5lQXR0cmlidXRlcygKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBvZmZzZXRQb2ludCwKICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgIGluc2VydEluZGV4LAogICAgICAgICAgcDBBdHRyaWJ1dGVzLAogICAgICAgICAgYXBwbHlPZmZzZXQKICAgICAgICApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUob2Zmc2V0LCBvZmZzZXQpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoaW50ZXJzZWN0aW9uLCBvZmZzZXQsIG9mZnNldFBvaW50KTsKICAgICAgICBpbnNlcnRJbmRleCA9IGluc2VydFNwbGl0UG9pbnQoCiAgICAgICAgICBwMUF0dHJpYnV0ZXMsCiAgICAgICAgICBwMUluZGljZXMsCiAgICAgICAgICBwMUluZGV4TWFwLAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIC0xLAogICAgICAgICAgb2Zmc2V0UG9pbnQKICAgICAgICApOwogICAgICAgIGNvbXB1dGVMaW5lQXR0cmlidXRlcygKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBvZmZzZXRQb2ludCwKICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgIGluc2VydEluZGV4LAogICAgICAgICAgcDFBdHRyaWJ1dGVzLAogICAgICAgICAgYXBwbHlPZmZzZXQKICAgICAgICApOwogICAgICAgIGluc2VydEluZGV4ID0gaW5zZXJ0U3BsaXRQb2ludCgKICAgICAgICAgIHAxQXR0cmlidXRlcywKICAgICAgICAgIHAxSW5kaWNlcywKICAgICAgICAgIHAxSW5kZXhNYXAsCiAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgaSArIDEsCiAgICAgICAgICBwMQogICAgICAgICk7CiAgICAgICAgY29tcHV0ZUxpbmVBdHRyaWJ1dGVzKAogICAgICAgICAgaTAsCiAgICAgICAgICBpMSwKICAgICAgICAgIHAxLAogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgaW5zZXJ0SW5kZXgsCiAgICAgICAgICBwMUF0dHJpYnV0ZXMsCiAgICAgICAgICBhcHBseU9mZnNldAogICAgICAgICk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbGV0IGN1cnJlbnRBdHRyaWJ1dGVzOwogICAgICAgIGxldCBjdXJyZW50SW5kaWNlczsKICAgICAgICBsZXQgY3VycmVudEluZGV4TWFwOwogICAgICAgIGlmIChwMC55IDwgMCkgewogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMgPSB3ZXN0R2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICAgIGN1cnJlbnRJbmRpY2VzID0gd2VzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgICBjdXJyZW50SW5kZXhNYXAgPSB3ZXN0R2VvbWV0cnlJbmRleE1hcDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMgPSBlYXN0R2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICAgIGN1cnJlbnRJbmRpY2VzID0gZWFzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgICBjdXJyZW50SW5kZXhNYXAgPSBlYXN0R2VvbWV0cnlJbmRleE1hcDsKICAgICAgICB9CiAgICAgICAgaW5zZXJ0SW5kZXggPSBpbnNlcnRTcGxpdFBvaW50KAogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMsCiAgICAgICAgICBjdXJyZW50SW5kaWNlcywKICAgICAgICAgIGN1cnJlbnRJbmRleE1hcCwKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBpLAogICAgICAgICAgcDAKICAgICAgICApOwogICAgICAgIGNvbXB1dGVMaW5lQXR0cmlidXRlcygKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBwMCwKICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgIGluc2VydEluZGV4LAogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMsCiAgICAgICAgICBhcHBseU9mZnNldAogICAgICAgICk7CiAgICAgICAgaW5zZXJ0SW5kZXggPSBpbnNlcnRTcGxpdFBvaW50KAogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMsCiAgICAgICAgICBjdXJyZW50SW5kaWNlcywKICAgICAgICAgIGN1cnJlbnRJbmRleE1hcCwKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBpICsgMSwKICAgICAgICAgIHAxCiAgICAgICAgKTsKICAgICAgICBjb21wdXRlTGluZUF0dHJpYnV0ZXMoCiAgICAgICAgICBpMCwKICAgICAgICAgIGkxLAogICAgICAgICAgcDEsCiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICBpbnNlcnRJbmRleCwKICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLAogICAgICAgICAgYXBwbHlPZmZzZXQKICAgICAgICApOwogICAgICB9CiAgICB9CiAgICB1cGRhdGVJbnN0YW5jZUFmdGVyU3BsaXQoaW5zdGFuY2UsIHdlc3RHZW9tZXRyeSwgZWFzdEdlb21ldHJ5KTsKICB9CiAgZnVuY3Rpb24gdXBkYXRlQWRqYWNlbmN5QWZ0ZXJTcGxpdChnZW9tZXRyeSkgewogICAgY29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlczsKICAgIGNvbnN0IHByZXZQb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnByZXZQb3NpdGlvbi52YWx1ZXM7CiAgICBjb25zdCBuZXh0UG9zaXRpb25zID0gYXR0cmlidXRlcy5uZXh0UG9zaXRpb24udmFsdWVzOwogICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGVuZ3RoOyBqICs9IDMpIHsKICAgICAgY29uc3QgcG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKHBvc2l0aW9ucywgaiwgY2FydGVzaWFuM1NjcmF0Y2gwKTsKICAgICAgaWYgKHBvc2l0aW9uLnggPiAwKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3QgcHJldlBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICBwcmV2UG9zaXRpb25zLAogICAgICAgIGosCiAgICAgICAgY2FydGVzaWFuM1NjcmF0Y2gyCiAgICAgICk7CiAgICAgIGlmIChwb3NpdGlvbi55IDwgMCAmJiBwcmV2UG9zaXRpb24ueSA+IDAgfHwgcG9zaXRpb24ueSA+IDAgJiYgcHJldlBvc2l0aW9uLnkgPCAwKSB7CiAgICAgICAgaWYgKGogLSAzID4gMCkgewogICAgICAgICAgcHJldlBvc2l0aW9uc1tqXSA9IHBvc2l0aW9uc1tqIC0gM107CiAgICAgICAgICBwcmV2UG9zaXRpb25zW2ogKyAxXSA9IHBvc2l0aW9uc1tqIC0gMl07CiAgICAgICAgICBwcmV2UG9zaXRpb25zW2ogKyAyXSA9IHBvc2l0aW9uc1tqIC0gMV07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHBvc2l0aW9uLCBwcmV2UG9zaXRpb25zLCBqKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgY29uc3QgbmV4dFBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICBuZXh0UG9zaXRpb25zLAogICAgICAgIGosCiAgICAgICAgY2FydGVzaWFuM1NjcmF0Y2gzCiAgICAgICk7CiAgICAgIGlmIChwb3NpdGlvbi55IDwgMCAmJiBuZXh0UG9zaXRpb24ueSA+IDAgfHwgcG9zaXRpb24ueSA+IDAgJiYgbmV4dFBvc2l0aW9uLnkgPCAwKSB7CiAgICAgICAgaWYgKGogKyAzIDwgbGVuZ3RoKSB7CiAgICAgICAgICBuZXh0UG9zaXRpb25zW2pdID0gcG9zaXRpb25zW2ogKyAzXTsKICAgICAgICAgIG5leHRQb3NpdGlvbnNbaiArIDFdID0gcG9zaXRpb25zW2ogKyA0XTsKICAgICAgICAgIG5leHRQb3NpdGlvbnNbaiArIDJdID0gcG9zaXRpb25zW2ogKyA1XTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2socG9zaXRpb24sIG5leHRQb3NpdGlvbnMsIGopOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KICBmdW5jdGlvbiBzcGxpdExvbmdpdHVkZVBvbHlsaW5lKGluc3RhbmNlKSB7CiAgICBjb25zdCBnZW9tZXRyeSA9IGluc3RhbmNlLmdlb21ldHJ5OwogICAgY29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlczsKICAgIGNvbnN0IHByZXZQb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnByZXZQb3NpdGlvbi52YWx1ZXM7CiAgICBjb25zdCBuZXh0UG9zaXRpb25zID0gYXR0cmlidXRlcy5uZXh0UG9zaXRpb24udmFsdWVzOwogICAgY29uc3QgZXhwYW5kQW5kV2lkdGhzID0gYXR0cmlidXRlcy5leHBhbmRBbmRXaWR0aC52YWx1ZXM7CiAgICBjb25zdCB0ZXhDb29yZHMgPSBkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlcy5zdCkgPyBhdHRyaWJ1dGVzLnN0LnZhbHVlcyA6IHZvaWQgMDsKICAgIGNvbnN0IGNvbG9ycyA9IGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzLmNvbG9yKSA/IGF0dHJpYnV0ZXMuY29sb3IudmFsdWVzIDogdm9pZCAwOwogICAgY29uc3QgZWFzdEdlb21ldHJ5ID0gY29weUdlb21ldHJ5Rm9yU3BsaXQoZ2VvbWV0cnkpOwogICAgY29uc3Qgd2VzdEdlb21ldHJ5ID0gY29weUdlb21ldHJ5Rm9yU3BsaXQoZ2VvbWV0cnkpOwogICAgbGV0IGk7CiAgICBsZXQgajsKICAgIGxldCBpbmRleDsKICAgIGxldCBpbnRlcnNlY3Rpb25Gb3VuZCA9IGZhbHNlOwogICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDQpIHsKICAgICAgY29uc3QgaTAgPSBpOwogICAgICBjb25zdCBpMiA9IGkgKyAyOwogICAgICBjb25zdCBwMCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCBpMCAqIDMsIGNhcnRlc2lhbjNTY3JhdGNoMCk7CiAgICAgIGNvbnN0IHAyID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGkyICogMywgY2FydGVzaWFuM1NjcmF0Y2gyKTsKICAgICAgaWYgKE1hdGguYWJzKHAwLnkpIDwgY29wbGFuYXJPZmZzZXQpIHsKICAgICAgICBwMC55ID0gY29wbGFuYXJPZmZzZXQgKiAocDIueSA8IDAgPyAtMSA6IDEpOwogICAgICAgIHBvc2l0aW9uc1tpICogMyArIDFdID0gcDAueTsKICAgICAgICBwb3NpdGlvbnNbKGkgKyAxKSAqIDMgKyAxXSA9IHAwLnk7CiAgICAgICAgZm9yIChqID0gaTAgKiAzOyBqIDwgaTAgKiAzICsgNCAqIDM7IGogKz0gMykgewogICAgICAgICAgcHJldlBvc2l0aW9uc1tqXSA9IHBvc2l0aW9uc1tpICogM107CiAgICAgICAgICBwcmV2UG9zaXRpb25zW2ogKyAxXSA9IHBvc2l0aW9uc1tpICogMyArIDFdOwogICAgICAgICAgcHJldlBvc2l0aW9uc1tqICsgMl0gPSBwb3NpdGlvbnNbaSAqIDMgKyAyXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKE1hdGguYWJzKHAyLnkpIDwgY29wbGFuYXJPZmZzZXQpIHsKICAgICAgICBwMi55ID0gY29wbGFuYXJPZmZzZXQgKiAocDAueSA8IDAgPyAtMSA6IDEpOwogICAgICAgIHBvc2l0aW9uc1soaSArIDIpICogMyArIDFdID0gcDIueTsKICAgICAgICBwb3NpdGlvbnNbKGkgKyAzKSAqIDMgKyAxXSA9IHAyLnk7CiAgICAgICAgZm9yIChqID0gaTAgKiAzOyBqIDwgaTAgKiAzICsgNCAqIDM7IGogKz0gMykgewogICAgICAgICAgbmV4dFBvc2l0aW9uc1tqXSA9IHBvc2l0aW9uc1soaSArIDIpICogM107CiAgICAgICAgICBuZXh0UG9zaXRpb25zW2ogKyAxXSA9IHBvc2l0aW9uc1soaSArIDIpICogMyArIDFdOwogICAgICAgICAgbmV4dFBvc2l0aW9uc1tqICsgMl0gPSBwb3NpdGlvbnNbKGkgKyAyKSAqIDMgKyAyXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgbGV0IHAwQXR0cmlidXRlcyA9IGVhc3RHZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICBsZXQgcDBJbmRpY2VzID0gZWFzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgIGxldCBwMkF0dHJpYnV0ZXMgPSB3ZXN0R2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgbGV0IHAySW5kaWNlcyA9IHdlc3RHZW9tZXRyeS5pbmRpY2VzOwogICAgICBjb25zdCBpbnRlcnNlY3Rpb24gPSBJbnRlcnNlY3Rpb25UZXN0c19kZWZhdWx0LmxpbmVTZWdtZW50UGxhbmUoCiAgICAgICAgcDAsCiAgICAgICAgcDIsCiAgICAgICAgeHpQbGFuZSwKICAgICAgICBjYXJ0ZXNpYW4zU2NyYXRjaDQKICAgICAgKTsKICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbnRlcnNlY3Rpb24pKSB7CiAgICAgICAgaW50ZXJzZWN0aW9uRm91bmQgPSB0cnVlOwogICAgICAgIGNvbnN0IG9mZnNldCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWSwKICAgICAgICAgIG9mZnNldFNjYWxhciwKICAgICAgICAgIGNhcnRlc2lhbjNTY3JhdGNoNQogICAgICAgICk7CiAgICAgICAgaWYgKHAwLnkgPCAwKSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKG9mZnNldCwgb2Zmc2V0KTsKICAgICAgICAgIHAwQXR0cmlidXRlcyA9IHdlc3RHZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICAgICAgcDBJbmRpY2VzID0gd2VzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgICBwMkF0dHJpYnV0ZXMgPSBlYXN0R2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICAgIHAySW5kaWNlcyA9IGVhc3RHZW9tZXRyeS5pbmRpY2VzOwogICAgICAgIH0KICAgICAgICBjb25zdCBvZmZzZXRQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICBpbnRlcnNlY3Rpb24sCiAgICAgICAgICBvZmZzZXQsCiAgICAgICAgICBjYXJ0ZXNpYW4zU2NyYXRjaDYKICAgICAgICApOwogICAgICAgIHAwQXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMucHVzaChwMC54LCBwMC55LCBwMC56LCBwMC54LCBwMC55LCBwMC56KTsKICAgICAgICBwMEF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAwQXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMucHVzaCgKICAgICAgICAgIG9mZnNldFBvaW50LngsCiAgICAgICAgICBvZmZzZXRQb2ludC55LAogICAgICAgICAgb2Zmc2V0UG9pbnQuegogICAgICAgICk7CiAgICAgICAgcDBBdHRyaWJ1dGVzLnByZXZQb3NpdGlvbi52YWx1ZXMucHVzaCgKICAgICAgICAgIHByZXZQb3NpdGlvbnNbaTAgKiAzXSwKICAgICAgICAgIHByZXZQb3NpdGlvbnNbaTAgKiAzICsgMV0sCiAgICAgICAgICBwcmV2UG9zaXRpb25zW2kwICogMyArIDJdCiAgICAgICAgKTsKICAgICAgICBwMEF0dHJpYnV0ZXMucHJldlBvc2l0aW9uLnZhbHVlcy5wdXNoKAogICAgICAgICAgcHJldlBvc2l0aW9uc1tpMCAqIDMgKyAzXSwKICAgICAgICAgIHByZXZQb3NpdGlvbnNbaTAgKiAzICsgNF0sCiAgICAgICAgICBwcmV2UG9zaXRpb25zW2kwICogMyArIDVdCiAgICAgICAgKTsKICAgICAgICBwMEF0dHJpYnV0ZXMucHJldlBvc2l0aW9uLnZhbHVlcy5wdXNoKHAwLngsIHAwLnksIHAwLnosIHAwLngsIHAwLnksIHAwLnopOwogICAgICAgIHAwQXR0cmlidXRlcy5uZXh0UG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAwQXR0cmlidXRlcy5uZXh0UG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAwQXR0cmlidXRlcy5uZXh0UG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAwQXR0cmlidXRlcy5uZXh0UG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUob2Zmc2V0LCBvZmZzZXQpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoaW50ZXJzZWN0aW9uLCBvZmZzZXQsIG9mZnNldFBvaW50KTsKICAgICAgICBwMkF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAyQXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMucHVzaCgKICAgICAgICAgIG9mZnNldFBvaW50LngsCiAgICAgICAgICBvZmZzZXRQb2ludC55LAogICAgICAgICAgb2Zmc2V0UG9pbnQuegogICAgICAgICk7CiAgICAgICAgcDJBdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5wdXNoKHAyLngsIHAyLnksIHAyLnosIHAyLngsIHAyLnksIHAyLnopOwogICAgICAgIHAyQXR0cmlidXRlcy5wcmV2UG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAyQXR0cmlidXRlcy5wcmV2UG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAyQXR0cmlidXRlcy5wcmV2UG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAyQXR0cmlidXRlcy5wcmV2UG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAyQXR0cmlidXRlcy5uZXh0UG9zaXRpb24udmFsdWVzLnB1c2gocDIueCwgcDIueSwgcDIueiwgcDIueCwgcDIueSwgcDIueik7CiAgICAgICAgcDJBdHRyaWJ1dGVzLm5leHRQb3NpdGlvbi52YWx1ZXMucHVzaCgKICAgICAgICAgIG5leHRQb3NpdGlvbnNbaTIgKiAzXSwKICAgICAgICAgIG5leHRQb3NpdGlvbnNbaTIgKiAzICsgMV0sCiAgICAgICAgICBuZXh0UG9zaXRpb25zW2kyICogMyArIDJdCiAgICAgICAgKTsKICAgICAgICBwMkF0dHJpYnV0ZXMubmV4dFBvc2l0aW9uLnZhbHVlcy5wdXNoKAogICAgICAgICAgbmV4dFBvc2l0aW9uc1tpMiAqIDMgKyAzXSwKICAgICAgICAgIG5leHRQb3NpdGlvbnNbaTIgKiAzICsgNF0sCiAgICAgICAgICBuZXh0UG9zaXRpb25zW2kyICogMyArIDVdCiAgICAgICAgKTsKICAgICAgICBjb25zdCBldzAgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgZXhwYW5kQW5kV2lkdGhzLAogICAgICAgICAgaTAgKiAyLAogICAgICAgICAgY2FydGVzaWFuMlNjcmF0Y2gwCiAgICAgICAgKTsKICAgICAgICBjb25zdCB3aWR0aCA9IE1hdGguYWJzKGV3MC55KTsKICAgICAgICBwMEF0dHJpYnV0ZXMuZXhwYW5kQW5kV2lkdGgudmFsdWVzLnB1c2goLTEsIHdpZHRoLCAxLCB3aWR0aCk7CiAgICAgICAgcDBBdHRyaWJ1dGVzLmV4cGFuZEFuZFdpZHRoLnZhbHVlcy5wdXNoKC0xLCAtd2lkdGgsIDEsIC13aWR0aCk7CiAgICAgICAgcDJBdHRyaWJ1dGVzLmV4cGFuZEFuZFdpZHRoLnZhbHVlcy5wdXNoKC0xLCB3aWR0aCwgMSwgd2lkdGgpOwogICAgICAgIHAyQXR0cmlidXRlcy5leHBhbmRBbmRXaWR0aC52YWx1ZXMucHVzaCgtMSwgLXdpZHRoLCAxLCAtd2lkdGgpOwogICAgICAgIGxldCB0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZVNxdWFyZWQoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoaW50ZXJzZWN0aW9uLCBwMCwgY2FydGVzaWFuM1NjcmF0Y2gzKQogICAgICAgICk7CiAgICAgICAgdCAvPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChwMiwgcDAsIGNhcnRlc2lhbjNTY3JhdGNoMykKICAgICAgICApOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSkgewogICAgICAgICAgY29uc3QgYzAgPSBDYXJ0ZXNpYW40X2RlZmF1bHQuZnJvbUFycmF5KGNvbG9ycywgaTAgKiA0LCBjYXJ0ZXNpYW40U2NyYXRjaDApOwogICAgICAgICAgY29uc3QgYzIgPSBDYXJ0ZXNpYW40X2RlZmF1bHQuZnJvbUFycmF5KGNvbG9ycywgaTIgKiA0LCBjYXJ0ZXNpYW40U2NyYXRjaDApOwogICAgICAgICAgY29uc3QgciA9IE1hdGhfZGVmYXVsdC5sZXJwKGMwLngsIGMyLngsIHQpOwogICAgICAgICAgY29uc3QgZyA9IE1hdGhfZGVmYXVsdC5sZXJwKGMwLnksIGMyLnksIHQpOwogICAgICAgICAgY29uc3QgYiA9IE1hdGhfZGVmYXVsdC5sZXJwKGMwLnosIGMyLnosIHQpOwogICAgICAgICAgY29uc3QgYTMgPSBNYXRoX2RlZmF1bHQubGVycChjMC53LCBjMi53LCB0KTsKICAgICAgICAgIGZvciAoaiA9IGkwICogNDsgaiA8IGkwICogNCArIDIgKiA0OyArK2opIHsKICAgICAgICAgICAgcDBBdHRyaWJ1dGVzLmNvbG9yLnZhbHVlcy5wdXNoKGNvbG9yc1tqXSk7CiAgICAgICAgICB9CiAgICAgICAgICBwMEF0dHJpYnV0ZXMuY29sb3IudmFsdWVzLnB1c2gociwgZywgYiwgYTMpOwogICAgICAgICAgcDBBdHRyaWJ1dGVzLmNvbG9yLnZhbHVlcy5wdXNoKHIsIGcsIGIsIGEzKTsKICAgICAgICAgIHAyQXR0cmlidXRlcy5jb2xvci52YWx1ZXMucHVzaChyLCBnLCBiLCBhMyk7CiAgICAgICAgICBwMkF0dHJpYnV0ZXMuY29sb3IudmFsdWVzLnB1c2gociwgZywgYiwgYTMpOwogICAgICAgICAgZm9yIChqID0gaTIgKiA0OyBqIDwgaTIgKiA0ICsgMiAqIDQ7ICsraikgewogICAgICAgICAgICBwMkF0dHJpYnV0ZXMuY29sb3IudmFsdWVzLnB1c2goY29sb3JzW2pdKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh0ZXhDb29yZHMpKSB7CiAgICAgICAgICBjb25zdCBzMCA9IENhcnRlc2lhbjJfZGVmYXVsdC5mcm9tQXJyYXkodGV4Q29vcmRzLCBpMCAqIDIsIGNhcnRlc2lhbjJTY3JhdGNoMCk7CiAgICAgICAgICBjb25zdCBzMyA9IENhcnRlc2lhbjJfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgIHRleENvb3JkcywKICAgICAgICAgICAgKGkgKyAzKSAqIDIsCiAgICAgICAgICAgIGNhcnRlc2lhbjJTY3JhdGNoMQogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHN4ID0gTWF0aF9kZWZhdWx0LmxlcnAoczAueCwgczMueCwgdCk7CiAgICAgICAgICBmb3IgKGogPSBpMCAqIDI7IGogPCBpMCAqIDIgKyAyICogMjsgKytqKSB7CiAgICAgICAgICAgIHAwQXR0cmlidXRlcy5zdC52YWx1ZXMucHVzaCh0ZXhDb29yZHNbal0pOwogICAgICAgICAgfQogICAgICAgICAgcDBBdHRyaWJ1dGVzLnN0LnZhbHVlcy5wdXNoKHN4LCBzMC55KTsKICAgICAgICAgIHAwQXR0cmlidXRlcy5zdC52YWx1ZXMucHVzaChzeCwgczMueSk7CiAgICAgICAgICBwMkF0dHJpYnV0ZXMuc3QudmFsdWVzLnB1c2goc3gsIHMwLnkpOwogICAgICAgICAgcDJBdHRyaWJ1dGVzLnN0LnZhbHVlcy5wdXNoKHN4LCBzMy55KTsKICAgICAgICAgIGZvciAoaiA9IGkyICogMjsgaiA8IGkyICogMiArIDIgKiAyOyArK2opIHsKICAgICAgICAgICAgcDJBdHRyaWJ1dGVzLnN0LnZhbHVlcy5wdXNoKHRleENvb3Jkc1tqXSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGluZGV4ID0gcDBBdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGggLyAzIC0gNDsKICAgICAgICBwMEluZGljZXMucHVzaChpbmRleCwgaW5kZXggKyAyLCBpbmRleCArIDEpOwogICAgICAgIHAwSW5kaWNlcy5wdXNoKGluZGV4ICsgMSwgaW5kZXggKyAyLCBpbmRleCArIDMpOwogICAgICAgIGluZGV4ID0gcDJBdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGggLyAzIC0gNDsKICAgICAgICBwMkluZGljZXMucHVzaChpbmRleCwgaW5kZXggKyAyLCBpbmRleCArIDEpOwogICAgICAgIHAySW5kaWNlcy5wdXNoKGluZGV4ICsgMSwgaW5kZXggKyAyLCBpbmRleCArIDMpOwogICAgICB9IGVsc2UgewogICAgICAgIGxldCBjdXJyZW50QXR0cmlidXRlczsKICAgICAgICBsZXQgY3VycmVudEluZGljZXM7CiAgICAgICAgaWYgKHAwLnkgPCAwKSB7CiAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcyA9IHdlc3RHZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICAgICAgY3VycmVudEluZGljZXMgPSB3ZXN0R2VvbWV0cnkuaW5kaWNlczsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMgPSBlYXN0R2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICAgIGN1cnJlbnRJbmRpY2VzID0gZWFzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgfQogICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5wdXNoKHAwLngsIHAwLnksIHAwLnopOwogICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5wdXNoKHAwLngsIHAwLnksIHAwLnopOwogICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5wdXNoKHAyLngsIHAyLnksIHAyLnopOwogICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5wdXNoKHAyLngsIHAyLnksIHAyLnopOwogICAgICAgIGZvciAoaiA9IGkgKiAzOyBqIDwgaSAqIDMgKyA0ICogMzsgKytqKSB7CiAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcy5wcmV2UG9zaXRpb24udmFsdWVzLnB1c2gocHJldlBvc2l0aW9uc1tqXSk7CiAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcy5uZXh0UG9zaXRpb24udmFsdWVzLnB1c2gobmV4dFBvc2l0aW9uc1tqXSk7CiAgICAgICAgfQogICAgICAgIGZvciAoaiA9IGkgKiAyOyBqIDwgaSAqIDIgKyA0ICogMjsgKytqKSB7CiAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcy5leHBhbmRBbmRXaWR0aC52YWx1ZXMucHVzaChleHBhbmRBbmRXaWR0aHNbal0pOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh0ZXhDb29yZHMpKSB7CiAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLnN0LnZhbHVlcy5wdXNoKHRleENvb3Jkc1tqXSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSkgewogICAgICAgICAgZm9yIChqID0gaSAqIDQ7IGogPCBpICogNCArIDQgKiA0OyArK2opIHsKICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMuY29sb3IudmFsdWVzLnB1c2goY29sb3JzW2pdKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaW5kZXggPSBjdXJyZW50QXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMubGVuZ3RoIC8gMyAtIDQ7CiAgICAgICAgY3VycmVudEluZGljZXMucHVzaChpbmRleCwgaW5kZXggKyAyLCBpbmRleCArIDEpOwogICAgICAgIGN1cnJlbnRJbmRpY2VzLnB1c2goaW5kZXggKyAxLCBpbmRleCArIDIsIGluZGV4ICsgMyk7CiAgICAgIH0KICAgIH0KICAgIGlmIChpbnRlcnNlY3Rpb25Gb3VuZCkgewogICAgICB1cGRhdGVBZGphY2VuY3lBZnRlclNwbGl0KHdlc3RHZW9tZXRyeSk7CiAgICAgIHVwZGF0ZUFkamFjZW5jeUFmdGVyU3BsaXQoZWFzdEdlb21ldHJ5KTsKICAgIH0KICAgIHVwZGF0ZUluc3RhbmNlQWZ0ZXJTcGxpdChpbnN0YW5jZSwgd2VzdEdlb21ldHJ5LCBlYXN0R2VvbWV0cnkpOwogIH0KICB2YXIgR2VvbWV0cnlQaXBlbGluZSwgc2NyYXRjaFByb2plY3RUbzJEQ2FydGVzaWFuMywgc2NyYXRjaFByb2plY3RUbzJEQ2FydG9ncmFwaGljLCBlbmNvZGVkUmVzdWx0LCBzY3JhdGNoQ2FydGVzaWFuMzMsIGludmVyc2VUcmFuc3Bvc2UsIG5vcm1hbE1hdHJpeCwgdGVtcFNjcmF0Y2gsIG5vcm1hbCwgdjAsIHYxLCB2Miwgbm9ybWFsU2NyYXRjaDIsIG5vcm1hbFNjYWxlLCB0U2NyYXRjaCwgc2NyYXRjaENhcnRlc2lhbjIyLCB0b0VuY29kZTEsIHRvRW5jb2RlMiwgdG9FbmNvZGUzLCBlbmNvZGVSZXN1bHQyLCBjMywgdTEsIHUyLCBxMSwgcTIsIHNwbGl0VHJpYW5nbGVSZXN1bHQsIGludGVycG9sYXRlQW5kUGFja0NhcnRlc2lhbjQsIGludGVycG9sYXRlQW5kUGFja0NhcnRlc2lhbjMsIGludGVycG9sYXRlQW5kUGFja0NhcnRlc2lhbjIsIGludGVycG9sYXRlQW5kUGFja0Jvb2xlYW4sIHAwU2NyYXRjaCwgcDFTY3JhdGNoLCBwMlNjcmF0Y2gsIGJhcnljZW50cmljU2NyYXRjaCwgTkFNRURfQVRUUklCVVRFUywgeHpQbGFuZSwgb2Zmc2V0U2NyYXRjaCwgb2Zmc2V0UG9pbnRTY3JhdGNoLCBjYXJ0ZXNpYW4yU2NyYXRjaDAsIGNhcnRlc2lhbjJTY3JhdGNoMSwgY2FydGVzaWFuM1NjcmF0Y2gwLCBjYXJ0ZXNpYW4zU2NyYXRjaDIsIGNhcnRlc2lhbjNTY3JhdGNoMywgY2FydGVzaWFuM1NjcmF0Y2g0LCBjYXJ0ZXNpYW4zU2NyYXRjaDUsIGNhcnRlc2lhbjNTY3JhdGNoNiwgY2FydGVzaWFuNFNjcmF0Y2gwLCBvZmZzZXRTY2FsYXIsIGNvcGxhbmFyT2Zmc2V0LCBHZW9tZXRyeVBpcGVsaW5lX2RlZmF1bHQ7CiAgdmFyIGluaXRfR2VvbWV0cnlQaXBlbGluZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvR2VvbWV0cnlQaXBlbGluZS5qcyIoKSB7CiAgICAgIGluaXRfQXR0cmlidXRlQ29tcHJlc3Npb24oKTsKICAgICAgaW5pdF9iYXJ5Y2VudHJpY0Nvb3JkaW5hdGVzKCk7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRlc2lhbjQoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VuY29kZWRDYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfR2VvZ3JhcGhpY1Byb2plY3Rpb24oKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlUeXBlKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X0ludGVyc2VjdCgpOwogICAgICBpbml0X0ludGVyc2VjdGlvblRlc3RzKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDMoKTsKICAgICAgaW5pdF9NYXRyaXg0KCk7CiAgICAgIGluaXRfUGxhbmUoKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIGluaXRfVGlwc2lmeSgpOwogICAgICBHZW9tZXRyeVBpcGVsaW5lID0ge307CiAgICAgIEdlb21ldHJ5UGlwZWxpbmUudG9XaXJlZnJhbWUgPSBmdW5jdGlvbihnZW9tZXRyeSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImdlb21ldHJ5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBpbmRpY2VzID0gZ2VvbWV0cnkuaW5kaWNlczsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGluZGljZXMpKSB7CiAgICAgICAgICBzd2l0Y2ggKGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUpIHsKICAgICAgICAgICAgY2FzZSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTOgogICAgICAgICAgICAgIGdlb21ldHJ5LmluZGljZXMgPSB0cmlhbmdsZXNUb0xpbmVzKGluZGljZXMpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5UUklBTkdMRV9TVFJJUDoKICAgICAgICAgICAgICBnZW9tZXRyeS5pbmRpY2VzID0gdHJpYW5nbGVTdHJpcFRvTGluZXMoaW5kaWNlcyk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlRSSUFOR0xFX0ZBTjoKICAgICAgICAgICAgICBnZW9tZXRyeS5pbmRpY2VzID0gdHJpYW5nbGVGYW5Ub0xpbmVzKGluZGljZXMpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAgICAgImdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgbXVzdCBiZSBUUklBTkdMRVMsIFRSSUFOR0xFX1NUUklQLCBvciBUUklBTkdMRV9GQU4uIgogICAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgICBnZW9tZXRyeS5wcmltaXRpdmVUeXBlID0gUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVTOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZ2VvbWV0cnk7CiAgICAgIH07CiAgICAgIEdlb21ldHJ5UGlwZWxpbmUuY3JlYXRlTGluZVNlZ21lbnRzRm9yVmVjdG9ycyA9IGZ1bmN0aW9uKGdlb21ldHJ5LCBhdHRyaWJ1dGVOYW1lLCBsZW5ndGgpIHsKICAgICAgICBhdHRyaWJ1dGVOYW1lID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoYXR0cmlidXRlTmFtZSwgIm5vcm1hbCIpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImdlb21ldHJ5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24gaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgYGdlb21ldHJ5LmF0dHJpYnV0ZXMgbXVzdCBoYXZlIGFuIGF0dHJpYnV0ZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGF0dHJpYnV0ZU5hbWUgcGFyYW1ldGVyLCAke2F0dHJpYnV0ZU5hbWV9LmAKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGxlbmd0aCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGxlbmd0aCwgMWU0KTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlczsKICAgICAgICBjb25zdCB2ZWN0b3JzID0gZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXS52YWx1ZXM7CiAgICAgICAgY29uc3QgcG9zaXRpb25zTGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBjb25zdCBuZXdQb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KDIgKiBwb3NpdGlvbnNMZW5ndGgpOwogICAgICAgIGxldCBqID0gMDsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9uc0xlbmd0aDsgaSArPSAzKSB7CiAgICAgICAgICBuZXdQb3NpdGlvbnNbaisrXSA9IHBvc2l0aW9uc1tpXTsKICAgICAgICAgIG5ld1Bvc2l0aW9uc1tqKytdID0gcG9zaXRpb25zW2kgKyAxXTsKICAgICAgICAgIG5ld1Bvc2l0aW9uc1tqKytdID0gcG9zaXRpb25zW2kgKyAyXTsKICAgICAgICAgIG5ld1Bvc2l0aW9uc1tqKytdID0gcG9zaXRpb25zW2ldICsgdmVjdG9yc1tpXSAqIGxlbmd0aDsKICAgICAgICAgIG5ld1Bvc2l0aW9uc1tqKytdID0gcG9zaXRpb25zW2kgKyAxXSArIHZlY3RvcnNbaSArIDFdICogbGVuZ3RoOwogICAgICAgICAgbmV3UG9zaXRpb25zW2orK10gPSBwb3NpdGlvbnNbaSArIDJdICsgdmVjdG9yc1tpICsgMl0gKiBsZW5ndGg7CiAgICAgICAgfQogICAgICAgIGxldCBuZXdCb3VuZGluZ1NwaGVyZTsKICAgICAgICBjb25zdCBicyA9IGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYnMpKSB7CiAgICAgICAgICBuZXdCb3VuZGluZ1NwaGVyZSA9IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KGJzLmNlbnRlciwgYnMucmFkaXVzICsgbGVuZ3RoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICAgICAgcG9zaXRpb246IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgICB2YWx1ZXM6IG5ld1Bvc2l0aW9ucwogICAgICAgICAgICB9KQogICAgICAgICAgfSwKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5MSU5FUywKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlOiBuZXdCb3VuZGluZ1NwaGVyZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBHZW9tZXRyeVBpcGVsaW5lLmNyZWF0ZUF0dHJpYnV0ZUxvY2F0aW9ucyA9IGZ1bmN0aW9uKGdlb21ldHJ5KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZ2VvbWV0cnkgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHNlbWFudGljcyA9IFsKICAgICAgICAgICJwb3NpdGlvbiIsCiAgICAgICAgICAicG9zaXRpb25IaWdoIiwKICAgICAgICAgICJwb3NpdGlvbkxvdyIsCiAgICAgICAgICAvLyBGcm9tIFZlcnRleEZvcm1hdC5wb3NpdGlvbiAtIGFmdGVyIDJEIHByb2plY3Rpb24gYW5kIGhpZ2gtcHJlY2lzaW9uIGVuY29kaW5nCiAgICAgICAgICAicG9zaXRpb24zREhpZ2giLAogICAgICAgICAgInBvc2l0aW9uM0RMb3ciLAogICAgICAgICAgInBvc2l0aW9uMkRIaWdoIiwKICAgICAgICAgICJwb3NpdGlvbjJETG93IiwKICAgICAgICAgIC8vIEZyb20gUHJpbWl0aXZlCiAgICAgICAgICAicGlja0NvbG9yIiwKICAgICAgICAgIC8vIEZyb20gVmVydGV4Rm9ybWF0CiAgICAgICAgICAibm9ybWFsIiwKICAgICAgICAgICJzdCIsCiAgICAgICAgICAidGFuZ2VudCIsCiAgICAgICAgICAiYml0YW5nZW50IiwKICAgICAgICAgIC8vIEZvciBzaGFkb3cgdm9sdW1lcwogICAgICAgICAgImV4dHJ1ZGVEaXJlY3Rpb24iLAogICAgICAgICAgLy8gRnJvbSBjb21wcmVzc2luZyB0ZXh0dXJlIGNvb3JkaW5hdGVzIGFuZCBub3JtYWxzCiAgICAgICAgICAiY29tcHJlc3NlZEF0dHJpYnV0ZXMiCiAgICAgICAgXTsKICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICBjb25zdCBpbmRpY2VzID0ge307CiAgICAgICAgbGV0IGogPSAwOwogICAgICAgIGxldCBpOwogICAgICAgIGNvbnN0IGxlbiA9IHNlbWFudGljcy5sZW5ndGg7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7CiAgICAgICAgICBjb25zdCBzZW1hbnRpYyA9IHNlbWFudGljc1tpXTsKICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlc1tzZW1hbnRpY10pKSB7CiAgICAgICAgICAgIGluZGljZXNbc2VtYW50aWNdID0gaisrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gYXR0cmlidXRlcykgewogICAgICAgICAgaWYgKGF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgIWRlZmluZWRfZGVmYXVsdChpbmRpY2VzW25hbWVdKSkgewogICAgICAgICAgICBpbmRpY2VzW25hbWVdID0gaisrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gaW5kaWNlczsKICAgICAgfTsKICAgICAgR2VvbWV0cnlQaXBlbGluZS5yZW9yZGVyRm9yUHJlVmVydGV4Q2FjaGUgPSBmdW5jdGlvbihnZW9tZXRyeSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImdlb21ldHJ5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBudW1WZXJ0aWNlcyA9IEdlb21ldHJ5X2RlZmF1bHQuY29tcHV0ZU51bWJlck9mVmVydGljZXMoZ2VvbWV0cnkpOwogICAgICAgIGNvbnN0IGluZGljZXMgPSBnZW9tZXRyeS5pbmRpY2VzOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaW5kaWNlcykpIHsKICAgICAgICAgIGNvbnN0IGluZGV4Q3Jvc3NSZWZlcmVuY2VPbGRUb05ldyA9IG5ldyBJbnQzMkFycmF5KG51bVZlcnRpY2VzKTsKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVmVydGljZXM7IGkrKykgewogICAgICAgICAgICBpbmRleENyb3NzUmVmZXJlbmNlT2xkVG9OZXdbaV0gPSAtMTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGluZGljZXNJbiA9IGluZGljZXM7CiAgICAgICAgICBjb25zdCBudW1JbmRpY2VzID0gaW5kaWNlc0luLmxlbmd0aDsKICAgICAgICAgIGNvbnN0IGluZGljZXNPdXQgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShudW1WZXJ0aWNlcywgbnVtSW5kaWNlcyk7CiAgICAgICAgICBsZXQgaW50b0luZGljZXNJbiA9IDA7CiAgICAgICAgICBsZXQgaW50b0luZGljZXNPdXQgPSAwOwogICAgICAgICAgbGV0IG5leHRJbmRleCA9IDA7CiAgICAgICAgICBsZXQgdGVtcEluZGV4OwogICAgICAgICAgd2hpbGUgKGludG9JbmRpY2VzSW4gPCBudW1JbmRpY2VzKSB7CiAgICAgICAgICAgIHRlbXBJbmRleCA9IGluZGV4Q3Jvc3NSZWZlcmVuY2VPbGRUb05ld1tpbmRpY2VzSW5baW50b0luZGljZXNJbl1dOwogICAgICAgICAgICBpZiAodGVtcEluZGV4ICE9PSAtMSkgewogICAgICAgICAgICAgIGluZGljZXNPdXRbaW50b0luZGljZXNPdXRdID0gdGVtcEluZGV4OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRlbXBJbmRleCA9IGluZGljZXNJbltpbnRvSW5kaWNlc0luXTsKICAgICAgICAgICAgICBpbmRleENyb3NzUmVmZXJlbmNlT2xkVG9OZXdbdGVtcEluZGV4XSA9IG5leHRJbmRleDsKICAgICAgICAgICAgICBpbmRpY2VzT3V0W2ludG9JbmRpY2VzT3V0XSA9IG5leHRJbmRleDsKICAgICAgICAgICAgICArK25leHRJbmRleDsKICAgICAgICAgICAgfQogICAgICAgICAgICArK2ludG9JbmRpY2VzSW47CiAgICAgICAgICAgICsraW50b0luZGljZXNPdXQ7CiAgICAgICAgICB9CiAgICAgICAgICBnZW9tZXRyeS5pbmRpY2VzID0gaW5kaWNlc091dDsKICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBhdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSAmJiBkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlc1twcm9wZXJ0eV0pICYmIGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzW3Byb3BlcnR5XS52YWx1ZXMpKSB7CiAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1twcm9wZXJ0eV07CiAgICAgICAgICAgICAgY29uc3QgZWxlbWVudHNJbiA9IGF0dHJpYnV0ZS52YWx1ZXM7CiAgICAgICAgICAgICAgbGV0IGludG9FbGVtZW50c0luID0gMDsKICAgICAgICAgICAgICBjb25zdCBudW1Db21wb25lbnRzID0gYXR0cmlidXRlLmNvbXBvbmVudHNQZXJBdHRyaWJ1dGU7CiAgICAgICAgICAgICAgY29uc3QgZWxlbWVudHNPdXQgPSBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgICAgICAgICAgICBhdHRyaWJ1dGUuY29tcG9uZW50RGF0YXR5cGUsCiAgICAgICAgICAgICAgICBuZXh0SW5kZXggKiBudW1Db21wb25lbnRzCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICB3aGlsZSAoaW50b0VsZW1lbnRzSW4gPCBudW1WZXJ0aWNlcykgewogICAgICAgICAgICAgICAgY29uc3QgdGVtcCA9IGluZGV4Q3Jvc3NSZWZlcmVuY2VPbGRUb05ld1tpbnRvRWxlbWVudHNJbl07CiAgICAgICAgICAgICAgICBpZiAodGVtcCAhPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBudW1Db21wb25lbnRzOyBqKyspIHsKICAgICAgICAgICAgICAgICAgICBlbGVtZW50c091dFtudW1Db21wb25lbnRzICogdGVtcCArIGpdID0gZWxlbWVudHNJbltudW1Db21wb25lbnRzICogaW50b0VsZW1lbnRzSW4gKyBqXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKytpbnRvRWxlbWVudHNJbjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYXR0cmlidXRlLnZhbHVlcyA9IGVsZW1lbnRzT3V0OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBnZW9tZXRyeTsKICAgICAgfTsKICAgICAgR2VvbWV0cnlQaXBlbGluZS5yZW9yZGVyRm9yUG9zdFZlcnRleENhY2hlID0gZnVuY3Rpb24oZ2VvbWV0cnksIGNhY2hlQ2FwYWNpdHkpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChnZW9tZXRyeSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJnZW9tZXRyeSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgaW5kaWNlcyA9IGdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgaWYgKGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgPT09IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5UUklBTkdMRVMgJiYgZGVmaW5lZF9kZWZhdWx0KGluZGljZXMpKSB7CiAgICAgICAgICBjb25zdCBudW1JbmRpY2VzID0gaW5kaWNlcy5sZW5ndGg7CiAgICAgICAgICBsZXQgbWF4aW11bUluZGV4ID0gMDsKICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbnVtSW5kaWNlczsgaisrKSB7CiAgICAgICAgICAgIGlmIChpbmRpY2VzW2pdID4gbWF4aW11bUluZGV4KSB7CiAgICAgICAgICAgICAgbWF4aW11bUluZGV4ID0gaW5kaWNlc1tqXTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZ2VvbWV0cnkuaW5kaWNlcyA9IFRpcHNpZnlfZGVmYXVsdC50aXBzaWZ5KHsKICAgICAgICAgICAgaW5kaWNlcywKICAgICAgICAgICAgbWF4aW11bUluZGV4LAogICAgICAgICAgICBjYWNoZVNpemU6IGNhY2hlQ2FwYWNpdHkKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZ2VvbWV0cnk7CiAgICAgIH07CiAgICAgIEdlb21ldHJ5UGlwZWxpbmUuZml0VG9VbnNpZ25lZFNob3J0SW5kaWNlcyA9IGZ1bmN0aW9uKGdlb21ldHJ5KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZ2VvbWV0cnkgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkuaW5kaWNlcykgJiYgZ2VvbWV0cnkucHJpbWl0aXZlVHlwZSAhPT0gUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlRSSUFOR0xFUyAmJiBnZW9tZXRyeS5wcmltaXRpdmVUeXBlICE9PSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuTElORVMgJiYgZ2VvbWV0cnkucHJpbWl0aXZlVHlwZSAhPT0gUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlBPSU5UUykgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJnZW9tZXRyeS5wcmltaXRpdmVUeXBlIG11c3QgZXF1YWwgdG8gUHJpbWl0aXZlVHlwZS5UUklBTkdMRVMsIFByaW1pdGl2ZVR5cGUuTElORVMsIG9yIFByaW1pdGl2ZVR5cGUuUE9JTlRTLiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdlb21ldHJpZXMgPSBbXTsKICAgICAgICBjb25zdCBudW1iZXJPZlZlcnRpY2VzID0gR2VvbWV0cnlfZGVmYXVsdC5jb21wdXRlTnVtYmVyT2ZWZXJ0aWNlcyhnZW9tZXRyeSk7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChnZW9tZXRyeS5pbmRpY2VzKSAmJiBudW1iZXJPZlZlcnRpY2VzID49IE1hdGhfZGVmYXVsdC5TSVhUWV9GT1VSX0tJTE9CWVRFUykgewogICAgICAgICAgbGV0IG9sZFRvTmV3SW5kZXggPSBbXTsKICAgICAgICAgIGxldCBuZXdJbmRpY2VzID0gW107CiAgICAgICAgICBsZXQgY3VycmVudEluZGV4ID0gMDsKICAgICAgICAgIGxldCBuZXdBdHRyaWJ1dGVzID0gY29weUF0dHJpYnV0ZXNEZXNjcmlwdGlvbnMoZ2VvbWV0cnkuYXR0cmlidXRlcyk7CiAgICAgICAgICBjb25zdCBvcmlnaW5hbEluZGljZXMgPSBnZW9tZXRyeS5pbmRpY2VzOwogICAgICAgICAgY29uc3QgbnVtYmVyT2ZJbmRpY2VzID0gb3JpZ2luYWxJbmRpY2VzLmxlbmd0aDsKICAgICAgICAgIGxldCBpbmRpY2VzUGVyUHJpbWl0aXZlOwogICAgICAgICAgaWYgKGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgPT09IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5UUklBTkdMRVMpIHsKICAgICAgICAgICAgaW5kaWNlc1BlclByaW1pdGl2ZSA9IDM7CiAgICAgICAgICB9IGVsc2UgaWYgKGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgPT09IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5MSU5FUykgewogICAgICAgICAgICBpbmRpY2VzUGVyUHJpbWl0aXZlID0gMjsKICAgICAgICAgIH0gZWxzZSBpZiAoZ2VvbWV0cnkucHJpbWl0aXZlVHlwZSA9PT0gUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlBPSU5UUykgewogICAgICAgICAgICBpbmRpY2VzUGVyUHJpbWl0aXZlID0gMTsKICAgICAgICAgIH0KICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbnVtYmVyT2ZJbmRpY2VzOyBqICs9IGluZGljZXNQZXJQcmltaXRpdmUpIHsKICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBpbmRpY2VzUGVyUHJpbWl0aXZlOyArK2spIHsKICAgICAgICAgICAgICBjb25zdCB4ID0gb3JpZ2luYWxJbmRpY2VzW2ogKyBrXTsKICAgICAgICAgICAgICBsZXQgaSA9IG9sZFRvTmV3SW5kZXhbeF07CiAgICAgICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaSkpIHsKICAgICAgICAgICAgICAgIGkgPSBjdXJyZW50SW5kZXgrKzsKICAgICAgICAgICAgICAgIG9sZFRvTmV3SW5kZXhbeF0gPSBpOwogICAgICAgICAgICAgICAgY29weVZlcnRleChuZXdBdHRyaWJ1dGVzLCBnZW9tZXRyeS5hdHRyaWJ1dGVzLCB4KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgbmV3SW5kaWNlcy5wdXNoKGkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggKyBpbmRpY2VzUGVyUHJpbWl0aXZlID49IE1hdGhfZGVmYXVsdC5TSVhUWV9GT1VSX0tJTE9CWVRFUykgewogICAgICAgICAgICAgIGdlb21ldHJpZXMucHVzaCgKICAgICAgICAgICAgICAgIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogbmV3QXR0cmlidXRlcywKICAgICAgICAgICAgICAgICAgaW5kaWNlczogbmV3SW5kaWNlcywKICAgICAgICAgICAgICAgICAgcHJpbWl0aXZlVHlwZTogZ2VvbWV0cnkucHJpbWl0aXZlVHlwZSwKICAgICAgICAgICAgICAgICAgYm91bmRpbmdTcGhlcmU6IGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLAogICAgICAgICAgICAgICAgICBib3VuZGluZ1NwaGVyZUNWOiBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZUNWCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgb2xkVG9OZXdJbmRleCA9IFtdOwogICAgICAgICAgICAgIG5ld0luZGljZXMgPSBbXTsKICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSAwOwogICAgICAgICAgICAgIG5ld0F0dHJpYnV0ZXMgPSBjb3B5QXR0cmlidXRlc0Rlc2NyaXB0aW9ucyhnZW9tZXRyeS5hdHRyaWJ1dGVzKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKG5ld0luZGljZXMubGVuZ3RoICE9PSAwKSB7CiAgICAgICAgICAgIGdlb21ldHJpZXMucHVzaCgKICAgICAgICAgICAgICBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBuZXdBdHRyaWJ1dGVzLAogICAgICAgICAgICAgICAgaW5kaWNlczogbmV3SW5kaWNlcywKICAgICAgICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUsCiAgICAgICAgICAgICAgICBib3VuZGluZ1NwaGVyZTogZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUsCiAgICAgICAgICAgICAgICBib3VuZGluZ1NwaGVyZUNWOiBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZUNWCiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgZ2VvbWV0cmllcy5wdXNoKGdlb21ldHJ5KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGdlb21ldHJpZXM7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hQcm9qZWN0VG8yRENhcnRlc2lhbjMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQcm9qZWN0VG8yRENhcnRvZ3JhcGhpYyA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBHZW9tZXRyeVBpcGVsaW5lLnByb2plY3RUbzJEID0gZnVuY3Rpb24oZ2VvbWV0cnksIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZU5hbWUzRCwgYXR0cmlidXRlTmFtZTJELCBwcm9qZWN0aW9uKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZ2VvbWV0cnkgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZU5hbWUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXR0cmlidXRlTmFtZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlTmFtZTNEKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImF0dHJpYnV0ZU5hbWUzRCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlTmFtZTJEKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImF0dHJpYnV0ZU5hbWUyRCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICBgZ2VvbWV0cnkgbXVzdCBoYXZlIGF0dHJpYnV0ZSBtYXRjaGluZyB0aGUgYXR0cmlidXRlTmFtZSBhcmd1bWVudDogJHthdHRyaWJ1dGVOYW1lfS5gCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBpZiAoZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXS5jb21wb25lbnREYXRhdHlwZSAhPT0gQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiVGhlIGF0dHJpYnV0ZSBjb21wb25lbnREYXRhdHlwZSBtdXN0IGJlIENvbXBvbmVudERhdGF0eXBlLkRPVUJMRS4iCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdOwogICAgICAgIHByb2plY3Rpb24gPSBkZWZpbmVkX2RlZmF1bHQocHJvamVjdGlvbikgPyBwcm9qZWN0aW9uIDogbmV3IEdlb2dyYXBoaWNQcm9qZWN0aW9uX2RlZmF1bHQoKTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBwcm9qZWN0aW9uLmVsbGlwc29pZDsKICAgICAgICBjb25zdCB2YWx1ZXMzRCA9IGF0dHJpYnV0ZS52YWx1ZXM7CiAgICAgICAgY29uc3QgcHJvamVjdGVkVmFsdWVzID0gbmV3IEZsb2F0NjRBcnJheSh2YWx1ZXMzRC5sZW5ndGgpOwogICAgICAgIGxldCBpbmRleCA9IDA7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMzRC5sZW5ndGg7IGkgKz0gMykgewogICAgICAgICAgY29uc3QgdmFsdWUgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICB2YWx1ZXMzRCwKICAgICAgICAgICAgaSwKICAgICAgICAgICAgc2NyYXRjaFByb2plY3RUbzJEQ2FydGVzaWFuMwogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IGxvbkxhdCA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYygKICAgICAgICAgICAgdmFsdWUsCiAgICAgICAgICAgIHNjcmF0Y2hQcm9qZWN0VG8yRENhcnRvZ3JhcGhpYwogICAgICAgICAgKTsKICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGxvbkxhdCkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICAgYENvdWxkIG5vdCBwcm9qZWN0IHBvaW50ICgke3ZhbHVlLnh9LCAke3ZhbHVlLnl9LCAke3ZhbHVlLnp9KSB0byAyRC5gCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBwcm9qZWN0ZWRMb25MYXQgPSBwcm9qZWN0aW9uLnByb2plY3QoCiAgICAgICAgICAgIGxvbkxhdCwKICAgICAgICAgICAgc2NyYXRjaFByb2plY3RUbzJEQ2FydGVzaWFuMwogICAgICAgICAgKTsKICAgICAgICAgIHByb2plY3RlZFZhbHVlc1tpbmRleCsrXSA9IHByb2plY3RlZExvbkxhdC54OwogICAgICAgICAgcHJvamVjdGVkVmFsdWVzW2luZGV4KytdID0gcHJvamVjdGVkTG9uTGF0Lnk7CiAgICAgICAgICBwcm9qZWN0ZWRWYWx1ZXNbaW5kZXgrK10gPSBwcm9qZWN0ZWRMb25MYXQuejsKICAgICAgICB9CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lM0RdID0gYXR0cmlidXRlOwogICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZTJEXSA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICB2YWx1ZXM6IHByb2plY3RlZFZhbHVlcwogICAgICAgIH0pOwogICAgICAgIGRlbGV0ZSBnZW9tZXRyeS5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdOwogICAgICAgIHJldHVybiBnZW9tZXRyeTsKICAgICAgfTsKICAgICAgZW5jb2RlZFJlc3VsdCA9IHsKICAgICAgICBoaWdoOiAwLAogICAgICAgIGxvdzogMAogICAgICB9OwogICAgICBHZW9tZXRyeVBpcGVsaW5lLmVuY29kZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uKGdlb21ldHJ5LCBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVIaWdoTmFtZSwgYXR0cmlidXRlTG93TmFtZSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImdlb21ldHJ5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVOYW1lKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImF0dHJpYnV0ZU5hbWUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZUhpZ2hOYW1lKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImF0dHJpYnV0ZUhpZ2hOYW1lIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVMb3dOYW1lKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImF0dHJpYnV0ZUxvd05hbWUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgYGdlb21ldHJ5IG11c3QgaGF2ZSBhdHRyaWJ1dGUgbWF0Y2hpbmcgdGhlIGF0dHJpYnV0ZU5hbWUgYXJndW1lbnQ6ICR7YXR0cmlidXRlTmFtZX0uYAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgaWYgKGdlb21ldHJ5LmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0uY29tcG9uZW50RGF0YXR5cGUgIT09IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgIlRoZSBhdHRyaWJ1dGUgY29tcG9uZW50RGF0YXR5cGUgbXVzdCBiZSBDb21wb25lbnREYXRhdHlwZS5ET1VCTEUuIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXTsKICAgICAgICBjb25zdCB2YWx1ZXMgPSBhdHRyaWJ1dGUudmFsdWVzOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IHZhbHVlcy5sZW5ndGg7CiAgICAgICAgY29uc3QgaGlnaFZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkobGVuZ3RoKTsKICAgICAgICBjb25zdCBsb3dWYWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCk7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgRW5jb2RlZENhcnRlc2lhbjNfZGVmYXVsdC5lbmNvZGUodmFsdWVzW2ldLCBlbmNvZGVkUmVzdWx0KTsKICAgICAgICAgIGhpZ2hWYWx1ZXNbaV0gPSBlbmNvZGVkUmVzdWx0LmhpZ2g7CiAgICAgICAgICBsb3dWYWx1ZXNbaV0gPSBlbmNvZGVkUmVzdWx0LmxvdzsKICAgICAgICB9CiAgICAgICAgY29uc3QgY29tcG9uZW50c1BlckF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS5jb21wb25lbnRzUGVyQXR0cmlidXRlOwogICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXNbYXR0cmlidXRlSGlnaE5hbWVdID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlLAogICAgICAgICAgdmFsdWVzOiBoaWdoVmFsdWVzCiAgICAgICAgfSk7CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVMb3dOYW1lXSA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZSwKICAgICAgICAgIHZhbHVlczogbG93VmFsdWVzCiAgICAgICAgfSk7CiAgICAgICAgZGVsZXRlIGdlb21ldHJ5LmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV07CiAgICAgICAgcmV0dXJuIGdlb21ldHJ5OwogICAgICB9OwogICAgICBzY3JhdGNoQ2FydGVzaWFuMzMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGludmVyc2VUcmFuc3Bvc2UgPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgICAgIG5vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgR2VvbWV0cnlQaXBlbGluZS50cmFuc2Zvcm1Ub1dvcmxkQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbihpbnN0YW5jZSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImluc3RhbmNlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBtb2RlbE1hdHJpeCA9IGluc3RhbmNlLm1vZGVsTWF0cml4OwogICAgICAgIGlmIChNYXRyaXg0X2RlZmF1bHQuZXF1YWxzKG1vZGVsTWF0cml4LCBNYXRyaXg0X2RlZmF1bHQuSURFTlRJVFkpKSB7CiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBpbnN0YW5jZS5nZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICAgIHRyYW5zZm9ybVBvaW50KG1vZGVsTWF0cml4LCBhdHRyaWJ1dGVzLnBvc2l0aW9uKTsKICAgICAgICB0cmFuc2Zvcm1Qb2ludChtb2RlbE1hdHJpeCwgYXR0cmlidXRlcy5wcmV2UG9zaXRpb24pOwogICAgICAgIHRyYW5zZm9ybVBvaW50KG1vZGVsTWF0cml4LCBhdHRyaWJ1dGVzLm5leHRQb3NpdGlvbik7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzLm5vcm1hbCkgfHwgZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMudGFuZ2VudCkgfHwgZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMuYml0YW5nZW50KSkgewogICAgICAgICAgTWF0cml4NF9kZWZhdWx0LmludmVyc2UobW9kZWxNYXRyaXgsIGludmVyc2VUcmFuc3Bvc2UpOwogICAgICAgICAgTWF0cml4NF9kZWZhdWx0LnRyYW5zcG9zZShpbnZlcnNlVHJhbnNwb3NlLCBpbnZlcnNlVHJhbnNwb3NlKTsKICAgICAgICAgIE1hdHJpeDRfZGVmYXVsdC5nZXRNYXRyaXgzKGludmVyc2VUcmFuc3Bvc2UsIG5vcm1hbE1hdHJpeCk7CiAgICAgICAgICB0cmFuc2Zvcm1WZWN0b3Iobm9ybWFsTWF0cml4LCBhdHRyaWJ1dGVzLm5vcm1hbCk7CiAgICAgICAgICB0cmFuc2Zvcm1WZWN0b3Iobm9ybWFsTWF0cml4LCBhdHRyaWJ1dGVzLnRhbmdlbnQpOwogICAgICAgICAgdHJhbnNmb3JtVmVjdG9yKG5vcm1hbE1hdHJpeCwgYXR0cmlidXRlcy5iaXRhbmdlbnQpOwogICAgICAgIH0KICAgICAgICBjb25zdCBib3VuZGluZ1NwaGVyZSA9IGluc3RhbmNlLmdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYm91bmRpbmdTcGhlcmUpKSB7CiAgICAgICAgICBpbnN0YW5jZS5nZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQudHJhbnNmb3JtKAogICAgICAgICAgICBib3VuZGluZ1NwaGVyZSwKICAgICAgICAgICAgbW9kZWxNYXRyaXgsCiAgICAgICAgICAgIGJvdW5kaW5nU3BoZXJlCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBpbnN0YW5jZS5tb2RlbE1hdHJpeCA9IE1hdHJpeDRfZGVmYXVsdC5jbG9uZShNYXRyaXg0X2RlZmF1bHQuSURFTlRJVFkpOwogICAgICAgIHJldHVybiBpbnN0YW5jZTsKICAgICAgfTsKICAgICAgdGVtcFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEdlb21ldHJ5UGlwZWxpbmUuY29tYmluZUluc3RhbmNlcyA9IGZ1bmN0aW9uKGluc3RhbmNlcykgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlcykgfHwgaW5zdGFuY2VzLmxlbmd0aCA8IDEpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiaW5zdGFuY2VzIGlzIHJlcXVpcmVkIGFuZCBtdXN0IGhhdmUgbGVuZ3RoIGdyZWF0ZXIgdGhhbiB6ZXJvLiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGluc3RhbmNlR2VvbWV0cnkgPSBbXTsKICAgICAgICBjb25zdCBpbnN0YW5jZVNwbGl0R2VvbWV0cnkgPSBbXTsKICAgICAgICBjb25zdCBsZW5ndGggPSBpbnN0YW5jZXMubGVuZ3RoOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gaW5zdGFuY2VzW2ldOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbnN0YW5jZS5nZW9tZXRyeSkpIHsKICAgICAgICAgICAgaW5zdGFuY2VHZW9tZXRyeS5wdXNoKGluc3RhbmNlKTsKICAgICAgICAgIH0gZWxzZSBpZiAoZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlLndlc3RIZW1pc3BoZXJlR2VvbWV0cnkpICYmIGRlZmluZWRfZGVmYXVsdChpbnN0YW5jZS5lYXN0SGVtaXNwaGVyZUdlb21ldHJ5KSkgewogICAgICAgICAgICBpbnN0YW5jZVNwbGl0R2VvbWV0cnkucHVzaChpbnN0YW5jZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdlb21ldHJpZXMgPSBbXTsKICAgICAgICBpZiAoaW5zdGFuY2VHZW9tZXRyeS5sZW5ndGggPiAwKSB7CiAgICAgICAgICBnZW9tZXRyaWVzLnB1c2goY29tYmluZUdlb21ldHJpZXMoaW5zdGFuY2VHZW9tZXRyeSwgImdlb21ldHJ5IikpOwogICAgICAgIH0KICAgICAgICBpZiAoaW5zdGFuY2VTcGxpdEdlb21ldHJ5Lmxlbmd0aCA+IDApIHsKICAgICAgICAgIGdlb21ldHJpZXMucHVzaCgKICAgICAgICAgICAgY29tYmluZUdlb21ldHJpZXMoaW5zdGFuY2VTcGxpdEdlb21ldHJ5LCAid2VzdEhlbWlzcGhlcmVHZW9tZXRyeSIpCiAgICAgICAgICApOwogICAgICAgICAgZ2VvbWV0cmllcy5wdXNoKAogICAgICAgICAgICBjb21iaW5lR2VvbWV0cmllcyhpbnN0YW5jZVNwbGl0R2VvbWV0cnksICJlYXN0SGVtaXNwaGVyZUdlb21ldHJ5IikKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBnZW9tZXRyaWVzOwogICAgICB9OwogICAgICBub3JtYWwgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHYwID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB2MSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgdjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEdlb21ldHJ5UGlwZWxpbmUuY29tcHV0ZU5vcm1hbCA9IGZ1bmN0aW9uKGdlb21ldHJ5KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZ2VvbWV0cnkgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24pIHx8ICFkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgImdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzIGlzIHJlcXVpcmVkLiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmluZGljZXMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZ2VvbWV0cnkuaW5kaWNlcyBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKGdlb21ldHJ5LmluZGljZXMubGVuZ3RoIDwgMiB8fCBnZW9tZXRyeS5pbmRpY2VzLmxlbmd0aCAlIDMgIT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiZ2VvbWV0cnkuaW5kaWNlcyBsZW5ndGggbXVzdCBiZSBncmVhdGVyIHRoYW4gMCBhbmQgYmUgYSBtdWx0aXBsZSBvZiAzLiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGlmIChnZW9tZXRyeS5wcmltaXRpdmVUeXBlICE9PSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgImdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgbXVzdCBiZSBQcmltaXRpdmVUeXBlLlRSSUFOR0xFUy4iCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCBpbmRpY2VzID0gZ2VvbWV0cnkuaW5kaWNlczsKICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICBjb25zdCB2ZXJ0aWNlcyA9IGF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzOwogICAgICAgIGNvbnN0IG51bVZlcnRpY2VzID0gYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMubGVuZ3RoIC8gMzsKICAgICAgICBjb25zdCBudW1JbmRpY2VzID0gaW5kaWNlcy5sZW5ndGg7CiAgICAgICAgY29uc3Qgbm9ybWFsc1BlclZlcnRleCA9IG5ldyBBcnJheShudW1WZXJ0aWNlcyk7CiAgICAgICAgY29uc3Qgbm9ybWFsc1BlclRyaWFuZ2xlID0gbmV3IEFycmF5KG51bUluZGljZXMgLyAzKTsKICAgICAgICBjb25zdCBub3JtYWxJbmRpY2VzID0gbmV3IEFycmF5KG51bUluZGljZXMpOwogICAgICAgIGxldCBpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1WZXJ0aWNlczsgaSsrKSB7CiAgICAgICAgICBub3JtYWxzUGVyVmVydGV4W2ldID0gewogICAgICAgICAgICBpbmRleE9mZnNldDogMCwKICAgICAgICAgICAgY291bnQ6IDAsCiAgICAgICAgICAgIGN1cnJlbnRDb3VudDogMAogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgICAgbGV0IGogPSAwOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1JbmRpY2VzOyBpICs9IDMpIHsKICAgICAgICAgIGNvbnN0IGkwID0gaW5kaWNlc1tpXTsKICAgICAgICAgIGNvbnN0IGkxID0gaW5kaWNlc1tpICsgMV07CiAgICAgICAgICBjb25zdCBpMiA9IGluZGljZXNbaSArIDJdOwogICAgICAgICAgY29uc3QgaTAzID0gaTAgKiAzOwogICAgICAgICAgY29uc3QgaTEzID0gaTEgKiAzOwogICAgICAgICAgY29uc3QgaTIzID0gaTIgKiAzOwogICAgICAgICAgdjAueCA9IHZlcnRpY2VzW2kwM107CiAgICAgICAgICB2MC55ID0gdmVydGljZXNbaTAzICsgMV07CiAgICAgICAgICB2MC56ID0gdmVydGljZXNbaTAzICsgMl07CiAgICAgICAgICB2MS54ID0gdmVydGljZXNbaTEzXTsKICAgICAgICAgIHYxLnkgPSB2ZXJ0aWNlc1tpMTMgKyAxXTsKICAgICAgICAgIHYxLnogPSB2ZXJ0aWNlc1tpMTMgKyAyXTsKICAgICAgICAgIHYyLnggPSB2ZXJ0aWNlc1tpMjNdOwogICAgICAgICAgdjIueSA9IHZlcnRpY2VzW2kyMyArIDFdOwogICAgICAgICAgdjIueiA9IHZlcnRpY2VzW2kyMyArIDJdOwogICAgICAgICAgbm9ybWFsc1BlclZlcnRleFtpMF0uY291bnQrKzsKICAgICAgICAgIG5vcm1hbHNQZXJWZXJ0ZXhbaTFdLmNvdW50Kys7CiAgICAgICAgICBub3JtYWxzUGVyVmVydGV4W2kyXS5jb3VudCsrOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHYxLCB2MCwgdjEpOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHYyLCB2MCwgdjIpOwogICAgICAgICAgbm9ybWFsc1BlclRyaWFuZ2xlW2pdID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHYxLCB2MiwgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpKTsKICAgICAgICAgIGorKzsKICAgICAgICB9CiAgICAgICAgbGV0IGluZGV4T2Zmc2V0ID0gMDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtVmVydGljZXM7IGkrKykgewogICAgICAgICAgbm9ybWFsc1BlclZlcnRleFtpXS5pbmRleE9mZnNldCArPSBpbmRleE9mZnNldDsKICAgICAgICAgIGluZGV4T2Zmc2V0ICs9IG5vcm1hbHNQZXJWZXJ0ZXhbaV0uY291bnQ7CiAgICAgICAgfQogICAgICAgIGogPSAwOwogICAgICAgIGxldCB2ZXJ0ZXhOb3JtYWxEYXRhOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1JbmRpY2VzOyBpICs9IDMpIHsKICAgICAgICAgIHZlcnRleE5vcm1hbERhdGEgPSBub3JtYWxzUGVyVmVydGV4W2luZGljZXNbaV1dOwogICAgICAgICAgbGV0IGluZGV4ID0gdmVydGV4Tm9ybWFsRGF0YS5pbmRleE9mZnNldCArIHZlcnRleE5vcm1hbERhdGEuY3VycmVudENvdW50OwogICAgICAgICAgbm9ybWFsSW5kaWNlc1tpbmRleF0gPSBqOwogICAgICAgICAgdmVydGV4Tm9ybWFsRGF0YS5jdXJyZW50Q291bnQrKzsKICAgICAgICAgIHZlcnRleE5vcm1hbERhdGEgPSBub3JtYWxzUGVyVmVydGV4W2luZGljZXNbaSArIDFdXTsKICAgICAgICAgIGluZGV4ID0gdmVydGV4Tm9ybWFsRGF0YS5pbmRleE9mZnNldCArIHZlcnRleE5vcm1hbERhdGEuY3VycmVudENvdW50OwogICAgICAgICAgbm9ybWFsSW5kaWNlc1tpbmRleF0gPSBqOwogICAgICAgICAgdmVydGV4Tm9ybWFsRGF0YS5jdXJyZW50Q291bnQrKzsKICAgICAgICAgIHZlcnRleE5vcm1hbERhdGEgPSBub3JtYWxzUGVyVmVydGV4W2luZGljZXNbaSArIDJdXTsKICAgICAgICAgIGluZGV4ID0gdmVydGV4Tm9ybWFsRGF0YS5pbmRleE9mZnNldCArIHZlcnRleE5vcm1hbERhdGEuY3VycmVudENvdW50OwogICAgICAgICAgbm9ybWFsSW5kaWNlc1tpbmRleF0gPSBqOwogICAgICAgICAgdmVydGV4Tm9ybWFsRGF0YS5jdXJyZW50Q291bnQrKzsKICAgICAgICAgIGorKzsKICAgICAgICB9CiAgICAgICAgY29uc3Qgbm9ybWFsVmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheShudW1WZXJ0aWNlcyAqIDMpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1WZXJ0aWNlczsgaSsrKSB7CiAgICAgICAgICBjb25zdCBpMyA9IGkgKiAzOwogICAgICAgICAgdmVydGV4Tm9ybWFsRGF0YSA9IG5vcm1hbHNQZXJWZXJ0ZXhbaV07CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIG5vcm1hbCk7CiAgICAgICAgICBpZiAodmVydGV4Tm9ybWFsRGF0YS5jb3VudCA+IDApIHsKICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHZlcnRleE5vcm1hbERhdGEuY291bnQ7IGorKykgewogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICAgICAgICBub3JtYWwsCiAgICAgICAgICAgICAgICBub3JtYWxzUGVyVHJpYW5nbGVbbm9ybWFsSW5kaWNlc1t2ZXJ0ZXhOb3JtYWxEYXRhLmluZGV4T2Zmc2V0ICsgal1dLAogICAgICAgICAgICAgICAgbm9ybWFsCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24oQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIG5vcm1hbCwgTWF0aF9kZWZhdWx0LkVQU0lMT04xMCkpIHsKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoCiAgICAgICAgICAgICAgICBub3JtYWxzUGVyVHJpYW5nbGVbbm9ybWFsSW5kaWNlc1t2ZXJ0ZXhOb3JtYWxEYXRhLmluZGV4T2Zmc2V0XV0sCiAgICAgICAgICAgICAgICBub3JtYWwKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24oQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIG5vcm1hbCwgTWF0aF9kZWZhdWx0LkVQU0lMT04xMCkpIHsKICAgICAgICAgICAgbm9ybWFsLnogPSAxOwogICAgICAgICAgfQogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShub3JtYWwsIG5vcm1hbCk7CiAgICAgICAgICBub3JtYWxWYWx1ZXNbaTNdID0gbm9ybWFsLng7CiAgICAgICAgICBub3JtYWxWYWx1ZXNbaTMgKyAxXSA9IG5vcm1hbC55OwogICAgICAgICAgbm9ybWFsVmFsdWVzW2kzICsgMl0gPSBub3JtYWwuejsKICAgICAgICB9CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWwgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICB2YWx1ZXM6IG5vcm1hbFZhbHVlcwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBnZW9tZXRyeTsKICAgICAgfTsKICAgICAgbm9ybWFsU2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIG5vcm1hbFNjYWxlID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB0U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgR2VvbWV0cnlQaXBlbGluZS5jb21wdXRlVGFuZ2VudEFuZEJpdGFuZ2VudCA9IGZ1bmN0aW9uKGdlb21ldHJ5KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZ2VvbWV0cnkgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICAgIGNvbnN0IGluZGljZXMgPSBnZW9tZXRyeS5pbmRpY2VzOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMucG9zaXRpb24pIHx8ICFkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgImdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzIGlzIHJlcXVpcmVkLiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMubm9ybWFsKSB8fCAhZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMubm9ybWFsLnZhbHVlcykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJnZW9tZXRyeS5hdHRyaWJ1dGVzLm5vcm1hbC52YWx1ZXMgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMuc3QpIHx8ICFkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlcy5zdC52YWx1ZXMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZ2VvbWV0cnkuYXR0cmlidXRlcy5zdC52YWx1ZXMgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGluZGljZXMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZ2VvbWV0cnkuaW5kaWNlcyBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKGluZGljZXMubGVuZ3RoIDwgMiB8fCBpbmRpY2VzLmxlbmd0aCAlIDMgIT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiZ2VvbWV0cnkuaW5kaWNlcyBsZW5ndGggbXVzdCBiZSBncmVhdGVyIHRoYW4gMCBhbmQgYmUgYSBtdWx0aXBsZSBvZiAzLiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGlmIChnZW9tZXRyeS5wcmltaXRpdmVUeXBlICE9PSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgImdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgbXVzdCBiZSBQcmltaXRpdmVUeXBlLlRSSUFOR0xFUy4iCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCB2ZXJ0aWNlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzOwogICAgICAgIGNvbnN0IG5vcm1hbHMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLm5vcm1hbC52YWx1ZXM7CiAgICAgICAgY29uc3Qgc3QgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnN0LnZhbHVlczsKICAgICAgICBjb25zdCBudW1WZXJ0aWNlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLmxlbmd0aCAvIDM7CiAgICAgICAgY29uc3QgbnVtSW5kaWNlcyA9IGluZGljZXMubGVuZ3RoOwogICAgICAgIGNvbnN0IHRhbjEgPSBuZXcgQXJyYXkobnVtVmVydGljZXMgKiAzKTsKICAgICAgICBsZXQgaTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGFuMS5sZW5ndGg7IGkrKykgewogICAgICAgICAgdGFuMVtpXSA9IDA7CiAgICAgICAgfQogICAgICAgIGxldCBpMDM7CiAgICAgICAgbGV0IGkxMzsKICAgICAgICBsZXQgaTIzOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1JbmRpY2VzOyBpICs9IDMpIHsKICAgICAgICAgIGNvbnN0IGkwID0gaW5kaWNlc1tpXTsKICAgICAgICAgIGNvbnN0IGkxID0gaW5kaWNlc1tpICsgMV07CiAgICAgICAgICBjb25zdCBpMiA9IGluZGljZXNbaSArIDJdOwogICAgICAgICAgaTAzID0gaTAgKiAzOwogICAgICAgICAgaTEzID0gaTEgKiAzOwogICAgICAgICAgaTIzID0gaTIgKiAzOwogICAgICAgICAgY29uc3QgaTAyID0gaTAgKiAyOwogICAgICAgICAgY29uc3QgaTEyID0gaTEgKiAyOwogICAgICAgICAgY29uc3QgaTIyID0gaTIgKiAyOwogICAgICAgICAgY29uc3QgdXggPSB2ZXJ0aWNlc1tpMDNdOwogICAgICAgICAgY29uc3QgdXkgPSB2ZXJ0aWNlc1tpMDMgKyAxXTsKICAgICAgICAgIGNvbnN0IHV6ID0gdmVydGljZXNbaTAzICsgMl07CiAgICAgICAgICBjb25zdCB3eCA9IHN0W2kwMl07CiAgICAgICAgICBjb25zdCB3eSA9IHN0W2kwMiArIDFdOwogICAgICAgICAgY29uc3QgdDEgPSBzdFtpMTIgKyAxXSAtIHd5OwogICAgICAgICAgY29uc3QgdDIgPSBzdFtpMjIgKyAxXSAtIHd5OwogICAgICAgICAgY29uc3QgciA9IDEgLyAoKHN0W2kxMl0gLSB3eCkgKiB0MiAtIChzdFtpMjJdIC0gd3gpICogdDEpOwogICAgICAgICAgY29uc3Qgc2RpcnggPSAodDIgKiAodmVydGljZXNbaTEzXSAtIHV4KSAtIHQxICogKHZlcnRpY2VzW2kyM10gLSB1eCkpICogcjsKICAgICAgICAgIGNvbnN0IHNkaXJ5ID0gKHQyICogKHZlcnRpY2VzW2kxMyArIDFdIC0gdXkpIC0gdDEgKiAodmVydGljZXNbaTIzICsgMV0gLSB1eSkpICogcjsKICAgICAgICAgIGNvbnN0IHNkaXJ6ID0gKHQyICogKHZlcnRpY2VzW2kxMyArIDJdIC0gdXopIC0gdDEgKiAodmVydGljZXNbaTIzICsgMl0gLSB1eikpICogcjsKICAgICAgICAgIHRhbjFbaTAzXSArPSBzZGlyeDsKICAgICAgICAgIHRhbjFbaTAzICsgMV0gKz0gc2Rpcnk7CiAgICAgICAgICB0YW4xW2kwMyArIDJdICs9IHNkaXJ6OwogICAgICAgICAgdGFuMVtpMTNdICs9IHNkaXJ4OwogICAgICAgICAgdGFuMVtpMTMgKyAxXSArPSBzZGlyeTsKICAgICAgICAgIHRhbjFbaTEzICsgMl0gKz0gc2Rpcno7CiAgICAgICAgICB0YW4xW2kyM10gKz0gc2Rpcng7CiAgICAgICAgICB0YW4xW2kyMyArIDFdICs9IHNkaXJ5OwogICAgICAgICAgdGFuMVtpMjMgKyAyXSArPSBzZGlyejsKICAgICAgICB9CiAgICAgICAgY29uc3QgdGFuZ2VudFZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkobnVtVmVydGljZXMgKiAzKTsKICAgICAgICBjb25zdCBiaXRhbmdlbnRWYWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KG51bVZlcnRpY2VzICogMyk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bVZlcnRpY2VzOyBpKyspIHsKICAgICAgICAgIGkwMyA9IGkgKiAzOwogICAgICAgICAgaTEzID0gaTAzICsgMTsKICAgICAgICAgIGkyMyA9IGkwMyArIDI7CiAgICAgICAgICBjb25zdCBuID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShub3JtYWxzLCBpMDMsIG5vcm1hbFNjcmF0Y2gyKTsKICAgICAgICAgIGNvbnN0IHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHRhbjEsIGkwMywgdFNjcmF0Y2gpOwogICAgICAgICAgY29uc3Qgc2NhbGFyID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChuLCB0KTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKG4sIHNjYWxhciwgbm9ybWFsU2NhbGUpOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QodCwgbm9ybWFsU2NhbGUsIHQpLCB0KTsKICAgICAgICAgIHRhbmdlbnRWYWx1ZXNbaTAzXSA9IHQueDsKICAgICAgICAgIHRhbmdlbnRWYWx1ZXNbaTEzXSA9IHQueTsKICAgICAgICAgIHRhbmdlbnRWYWx1ZXNbaTIzXSA9IHQuejsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKG4sIHQsIHQpLCB0KTsKICAgICAgICAgIGJpdGFuZ2VudFZhbHVlc1tpMDNdID0gdC54OwogICAgICAgICAgYml0YW5nZW50VmFsdWVzW2kxM10gPSB0Lnk7CiAgICAgICAgICBiaXRhbmdlbnRWYWx1ZXNbaTIzXSA9IHQuejsKICAgICAgICB9CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy50YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgdmFsdWVzOiB0YW5nZW50VmFsdWVzCiAgICAgICAgfSk7CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5iaXRhbmdlbnQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICB2YWx1ZXM6IGJpdGFuZ2VudFZhbHVlcwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBnZW9tZXRyeTsKICAgICAgfTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjIyID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICB0b0VuY29kZTEgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHRvRW5jb2RlMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgdG9FbmNvZGUzID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBlbmNvZGVSZXN1bHQyID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBHZW9tZXRyeVBpcGVsaW5lLmNvbXByZXNzVmVydGljZXMgPSBmdW5jdGlvbihnZW9tZXRyeSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImdlb21ldHJ5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBleHRydWRlQXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5leHRydWRlRGlyZWN0aW9uOwogICAgICAgIGxldCBpOwogICAgICAgIGxldCBudW1WZXJ0aWNlczsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGV4dHJ1ZGVBdHRyaWJ1dGUpKSB7CiAgICAgICAgICBjb25zdCBleHRydWRlRGlyZWN0aW9ucyA9IGV4dHJ1ZGVBdHRyaWJ1dGUudmFsdWVzOwogICAgICAgICAgbnVtVmVydGljZXMgPSBleHRydWRlRGlyZWN0aW9ucy5sZW5ndGggLyAzOwogICAgICAgICAgY29uc3QgY29tcHJlc3NlZERpcmVjdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KG51bVZlcnRpY2VzICogMik7CiAgICAgICAgICBsZXQgaTIgPSAwOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bVZlcnRpY2VzOyArK2kpIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShleHRydWRlRGlyZWN0aW9ucywgaSAqIDMsIHRvRW5jb2RlMSk7CiAgICAgICAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzKHRvRW5jb2RlMSwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pKSB7CiAgICAgICAgICAgICAgaTIgKz0gMjsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbmNvZGVSZXN1bHQyID0gQXR0cmlidXRlQ29tcHJlc3Npb25fZGVmYXVsdC5vY3RFbmNvZGVJblJhbmdlKAogICAgICAgICAgICAgIHRvRW5jb2RlMSwKICAgICAgICAgICAgICA2NTUzNSwKICAgICAgICAgICAgICBlbmNvZGVSZXN1bHQyCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGNvbXByZXNzZWREaXJlY3Rpb25zW2kyKytdID0gZW5jb2RlUmVzdWx0Mi54OwogICAgICAgICAgICBjb21wcmVzc2VkRGlyZWN0aW9uc1tpMisrXSA9IGVuY29kZVJlc3VsdDIueTsKICAgICAgICAgIH0KICAgICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMuY29tcHJlc3NlZEF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgICAgICB2YWx1ZXM6IGNvbXByZXNzZWREaXJlY3Rpb25zCiAgICAgICAgICB9KTsKICAgICAgICAgIGRlbGV0ZSBnZW9tZXRyeS5hdHRyaWJ1dGVzLmV4dHJ1ZGVEaXJlY3Rpb247CiAgICAgICAgICByZXR1cm4gZ2VvbWV0cnk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG5vcm1hbEF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsOwogICAgICAgIGNvbnN0IHN0QXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5zdDsKICAgICAgICBjb25zdCBoYXNOb3JtYWwgPSBkZWZpbmVkX2RlZmF1bHQobm9ybWFsQXR0cmlidXRlKTsKICAgICAgICBjb25zdCBoYXNTdCA9IGRlZmluZWRfZGVmYXVsdChzdEF0dHJpYnV0ZSk7CiAgICAgICAgaWYgKCFoYXNOb3JtYWwgJiYgIWhhc1N0KSB7CiAgICAgICAgICByZXR1cm4gZ2VvbWV0cnk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHRhbmdlbnRBdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnRhbmdlbnQ7CiAgICAgICAgY29uc3QgYml0YW5nZW50QXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5iaXRhbmdlbnQ7CiAgICAgICAgY29uc3QgaGFzVGFuZ2VudCA9IGRlZmluZWRfZGVmYXVsdCh0YW5nZW50QXR0cmlidXRlKTsKICAgICAgICBjb25zdCBoYXNCaXRhbmdlbnQgPSBkZWZpbmVkX2RlZmF1bHQoYml0YW5nZW50QXR0cmlidXRlKTsKICAgICAgICBsZXQgbm9ybWFsczsKICAgICAgICBsZXQgc3Q7CiAgICAgICAgbGV0IHRhbmdlbnRzOwogICAgICAgIGxldCBiaXRhbmdlbnRzOwogICAgICAgIGlmIChoYXNOb3JtYWwpIHsKICAgICAgICAgIG5vcm1hbHMgPSBub3JtYWxBdHRyaWJ1dGUudmFsdWVzOwogICAgICAgIH0KICAgICAgICBpZiAoaGFzU3QpIHsKICAgICAgICAgIHN0ID0gc3RBdHRyaWJ1dGUudmFsdWVzOwogICAgICAgIH0KICAgICAgICBpZiAoaGFzVGFuZ2VudCkgewogICAgICAgICAgdGFuZ2VudHMgPSB0YW5nZW50QXR0cmlidXRlLnZhbHVlczsKICAgICAgICB9CiAgICAgICAgaWYgKGhhc0JpdGFuZ2VudCkgewogICAgICAgICAgYml0YW5nZW50cyA9IGJpdGFuZ2VudEF0dHJpYnV0ZS52YWx1ZXM7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxlbmd0aCA9IGhhc05vcm1hbCA/IG5vcm1hbHMubGVuZ3RoIDogc3QubGVuZ3RoOwogICAgICAgIGNvbnN0IG51bUNvbXBvbmVudHMgPSBoYXNOb3JtYWwgPyAzIDogMjsKICAgICAgICBudW1WZXJ0aWNlcyA9IGxlbmd0aCAvIG51bUNvbXBvbmVudHM7CiAgICAgICAgbGV0IGNvbXByZXNzZWRMZW5ndGggPSBudW1WZXJ0aWNlczsKICAgICAgICBsZXQgbnVtQ29tcHJlc3NlZENvbXBvbmVudHMgPSBoYXNTdCAmJiBoYXNOb3JtYWwgPyAyIDogMTsKICAgICAgICBudW1Db21wcmVzc2VkQ29tcG9uZW50cyArPSBoYXNUYW5nZW50IHx8IGhhc0JpdGFuZ2VudCA/IDEgOiAwOwogICAgICAgIGNvbXByZXNzZWRMZW5ndGggKj0gbnVtQ29tcHJlc3NlZENvbXBvbmVudHM7CiAgICAgICAgY29uc3QgY29tcHJlc3NlZEF0dHJpYnV0ZXMgPSBuZXcgRmxvYXQzMkFycmF5KGNvbXByZXNzZWRMZW5ndGgpOwogICAgICAgIGxldCBub3JtYWxJbmRleCA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bVZlcnRpY2VzOyArK2kpIHsKICAgICAgICAgIGlmIChoYXNTdCkgewogICAgICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUFycmF5KHN0LCBpICogMiwgc2NyYXRjaENhcnRlc2lhbjIyKTsKICAgICAgICAgICAgY29tcHJlc3NlZEF0dHJpYnV0ZXNbbm9ybWFsSW5kZXgrK10gPSBBdHRyaWJ1dGVDb21wcmVzc2lvbl9kZWZhdWx0LmNvbXByZXNzVGV4dHVyZUNvb3JkaW5hdGVzKHNjcmF0Y2hDYXJ0ZXNpYW4yMik7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBpbmRleCA9IGkgKiAzOwogICAgICAgICAgaWYgKGhhc05vcm1hbCAmJiBkZWZpbmVkX2RlZmF1bHQodGFuZ2VudHMpICYmIGRlZmluZWRfZGVmYXVsdChiaXRhbmdlbnRzKSkgewogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KG5vcm1hbHMsIGluZGV4LCB0b0VuY29kZTEpOwogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHRhbmdlbnRzLCBpbmRleCwgdG9FbmNvZGUyKTsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShiaXRhbmdlbnRzLCBpbmRleCwgdG9FbmNvZGUzKTsKICAgICAgICAgICAgQXR0cmlidXRlQ29tcHJlc3Npb25fZGVmYXVsdC5vY3RQYWNrKAogICAgICAgICAgICAgIHRvRW5jb2RlMSwKICAgICAgICAgICAgICB0b0VuY29kZTIsCiAgICAgICAgICAgICAgdG9FbmNvZGUzLAogICAgICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4yMgogICAgICAgICAgICApOwogICAgICAgICAgICBjb21wcmVzc2VkQXR0cmlidXRlc1tub3JtYWxJbmRleCsrXSA9IHNjcmF0Y2hDYXJ0ZXNpYW4yMi54OwogICAgICAgICAgICBjb21wcmVzc2VkQXR0cmlidXRlc1tub3JtYWxJbmRleCsrXSA9IHNjcmF0Y2hDYXJ0ZXNpYW4yMi55OwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKGhhc05vcm1hbCkgewogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkobm9ybWFscywgaW5kZXgsIHRvRW5jb2RlMSk7CiAgICAgICAgICAgICAgY29tcHJlc3NlZEF0dHJpYnV0ZXNbbm9ybWFsSW5kZXgrK10gPSBBdHRyaWJ1dGVDb21wcmVzc2lvbl9kZWZhdWx0Lm9jdEVuY29kZUZsb2F0KHRvRW5jb2RlMSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGhhc1RhbmdlbnQpIHsKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHRhbmdlbnRzLCBpbmRleCwgdG9FbmNvZGUxKTsKICAgICAgICAgICAgICBjb21wcmVzc2VkQXR0cmlidXRlc1tub3JtYWxJbmRleCsrXSA9IEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQub2N0RW5jb2RlRmxvYXQodG9FbmNvZGUxKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoaGFzQml0YW5nZW50KSB7CiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShiaXRhbmdlbnRzLCBpbmRleCwgdG9FbmNvZGUxKTsKICAgICAgICAgICAgICBjb21wcmVzc2VkQXR0cmlidXRlc1tub3JtYWxJbmRleCsrXSA9IEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQub2N0RW5jb2RlRmxvYXQodG9FbmNvZGUxKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbXByZXNzZWRBdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiBudW1Db21wcmVzc2VkQ29tcG9uZW50cywKICAgICAgICAgIHZhbHVlczogY29tcHJlc3NlZEF0dHJpYnV0ZXMKICAgICAgICB9KTsKICAgICAgICBpZiAoaGFzTm9ybWFsKSB7CiAgICAgICAgICBkZWxldGUgZ2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWw7CiAgICAgICAgfQogICAgICAgIGlmIChoYXNTdCkgewogICAgICAgICAgZGVsZXRlIGdlb21ldHJ5LmF0dHJpYnV0ZXMuc3Q7CiAgICAgICAgfQogICAgICAgIGlmIChoYXNCaXRhbmdlbnQpIHsKICAgICAgICAgIGRlbGV0ZSBnZW9tZXRyeS5hdHRyaWJ1dGVzLmJpdGFuZ2VudDsKICAgICAgICB9CiAgICAgICAgaWYgKGhhc1RhbmdlbnQpIHsKICAgICAgICAgIGRlbGV0ZSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnRhbmdlbnQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBnZW9tZXRyeTsKICAgICAgfTsKICAgICAgYzMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHUxID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB1MiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcTEgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHEyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzcGxpdFRyaWFuZ2xlUmVzdWx0ID0gewogICAgICAgIHBvc2l0aW9uczogbmV3IEFycmF5KDcpLAogICAgICAgIGluZGljZXM6IG5ldyBBcnJheSgzICogMykKICAgICAgfTsKICAgICAgaW50ZXJwb2xhdGVBbmRQYWNrQ2FydGVzaWFuNCA9IGdlbmVyYXRlQmFyeWNlbnRyaWNJbnRlcnBvbGF0ZUZ1bmN0aW9uKAogICAgICAgIENhcnRlc2lhbjRfZGVmYXVsdCwKICAgICAgICA0CiAgICAgICk7CiAgICAgIGludGVycG9sYXRlQW5kUGFja0NhcnRlc2lhbjMgPSBnZW5lcmF0ZUJhcnljZW50cmljSW50ZXJwb2xhdGVGdW5jdGlvbigKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQsCiAgICAgICAgMwogICAgICApOwogICAgICBpbnRlcnBvbGF0ZUFuZFBhY2tDYXJ0ZXNpYW4yID0gZ2VuZXJhdGVCYXJ5Y2VudHJpY0ludGVycG9sYXRlRnVuY3Rpb24oCiAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0LAogICAgICAgIDIKICAgICAgKTsKICAgICAgaW50ZXJwb2xhdGVBbmRQYWNrQm9vbGVhbiA9IGZ1bmN0aW9uKGkwLCBpMSwgaTIsIGNvb3Jkcywgc291cmNlVmFsdWVzLCBjdXJyZW50VmFsdWVzLCBpbnNlcnRlZEluZGV4KSB7CiAgICAgICAgY29uc3QgdjEyID0gc291cmNlVmFsdWVzW2kwXSAqIGNvb3Jkcy54OwogICAgICAgIGNvbnN0IHYyMiA9IHNvdXJjZVZhbHVlc1tpMV0gKiBjb29yZHMueTsKICAgICAgICBjb25zdCB2MyA9IHNvdXJjZVZhbHVlc1tpMl0gKiBjb29yZHMuejsKICAgICAgICBjdXJyZW50VmFsdWVzW2luc2VydGVkSW5kZXhdID0gdjEyICsgdjIyICsgdjMgPiBNYXRoX2RlZmF1bHQuRVBTSUxPTjYgPyAxIDogMDsKICAgICAgfTsKICAgICAgcDBTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBwMVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHAyU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgYmFyeWNlbnRyaWNTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBOQU1FRF9BVFRSSUJVVEVTID0gewogICAgICAgIHBvc2l0aW9uOiB0cnVlLAogICAgICAgIG5vcm1hbDogdHJ1ZSwKICAgICAgICBiaXRhbmdlbnQ6IHRydWUsCiAgICAgICAgdGFuZ2VudDogdHJ1ZSwKICAgICAgICBzdDogdHJ1ZSwKICAgICAgICBleHRydWRlRGlyZWN0aW9uOiB0cnVlLAogICAgICAgIGFwcGx5T2Zmc2V0OiB0cnVlCiAgICAgIH07CiAgICAgIHh6UGxhbmUgPSBQbGFuZV9kZWZhdWx0LmZyb21Qb2ludE5vcm1hbChDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWSk7CiAgICAgIG9mZnNldFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIG9mZnNldFBvaW50U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuMlNjcmF0Y2gwID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBjYXJ0ZXNpYW4yU2NyYXRjaDEgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhbjNTY3JhdGNoMCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuM1NjcmF0Y2gyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjYXJ0ZXNpYW4zU2NyYXRjaDMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhbjNTY3JhdGNoNCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuM1NjcmF0Y2g1ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjYXJ0ZXNpYW4zU2NyYXRjaDYgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhbjRTY3JhdGNoMCA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoKTsKICAgICAgb2Zmc2V0U2NhbGFyID0gNSAqIE1hdGhfZGVmYXVsdC5FUFNJTE9OOTsKICAgICAgY29wbGFuYXJPZmZzZXQgPSBNYXRoX2RlZmF1bHQuRVBTSUxPTjY7CiAgICAgIEdlb21ldHJ5UGlwZWxpbmUuc3BsaXRMb25naXR1ZGUgPSBmdW5jdGlvbihpbnN0YW5jZSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImluc3RhbmNlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBnZW9tZXRyeSA9IGluc3RhbmNlLmdlb21ldHJ5OwogICAgICAgIGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmU7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChib3VuZGluZ1NwaGVyZSkpIHsKICAgICAgICAgIGNvbnN0IG1pblggPSBib3VuZGluZ1NwaGVyZS5jZW50ZXIueCAtIGJvdW5kaW5nU3BoZXJlLnJhZGl1czsKICAgICAgICAgIGlmIChtaW5YID4gMCB8fCBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmludGVyc2VjdFBsYW5lKGJvdW5kaW5nU3BoZXJlLCBQbGFuZV9kZWZhdWx0Lk9SSUdJTl9aWF9QTEFORSkgIT09IEludGVyc2VjdF9kZWZhdWx0LklOVEVSU0VDVElORykgewogICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChnZW9tZXRyeS5nZW9tZXRyeVR5cGUgIT09IEdlb21ldHJ5VHlwZV9kZWZhdWx0Lk5PTkUpIHsKICAgICAgICAgIHN3aXRjaCAoZ2VvbWV0cnkuZ2VvbWV0cnlUeXBlKSB7CiAgICAgICAgICAgIGNhc2UgR2VvbWV0cnlUeXBlX2RlZmF1bHQuUE9MWUxJTkVTOgogICAgICAgICAgICAgIHNwbGl0TG9uZ2l0dWRlUG9seWxpbmUoaW5zdGFuY2UpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIEdlb21ldHJ5VHlwZV9kZWZhdWx0LlRSSUFOR0xFUzoKICAgICAgICAgICAgICBzcGxpdExvbmdpdHVkZVRyaWFuZ2xlcyhpbnN0YW5jZSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgR2VvbWV0cnlUeXBlX2RlZmF1bHQuTElORVM6CiAgICAgICAgICAgICAgc3BsaXRMb25naXR1ZGVMaW5lcyhpbnN0YW5jZSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGluZGV4UHJpbWl0aXZlKGdlb21ldHJ5KTsKICAgICAgICAgIGlmIChnZW9tZXRyeS5wcmltaXRpdmVUeXBlID09PSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTKSB7CiAgICAgICAgICAgIHNwbGl0TG9uZ2l0dWRlVHJpYW5nbGVzKGluc3RhbmNlKTsKICAgICAgICAgIH0gZWxzZSBpZiAoZ2VvbWV0cnkucHJpbWl0aXZlVHlwZSA9PT0gUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVTKSB7CiAgICAgICAgICAgIHNwbGl0TG9uZ2l0dWRlTGluZXMoaW5zdGFuY2UpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gaW5zdGFuY2U7CiAgICAgIH07CiAgICAgIEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdCA9IEdlb21ldHJ5UGlwZWxpbmU7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9PZmZzZXRHZW9tZXRyeUluc3RhbmNlQXR0cmlidXRlLmpzCiAgZnVuY3Rpb24gT2Zmc2V0R2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZSh4LCB5LCB6KSB7CiAgICB4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoeCwgMCk7CiAgICB5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoeSwgMCk7CiAgICB6ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoeiwgMCk7CiAgICB0aGlzLnZhbHVlID0gbmV3IEZsb2F0MzJBcnJheShbeCwgeSwgel0pOwogIH0KICB2YXIgT2Zmc2V0R2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZV9kZWZhdWx0OwogIHZhciBpbml0X09mZnNldEdlb21ldHJ5SW5zdGFuY2VBdHRyaWJ1dGUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL09mZnNldEdlb21ldHJ5SW5zdGFuY2VBdHRyaWJ1dGUuanMiKCkgewogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE9mZnNldEdlb21ldHJ5SW5zdGFuY2VBdHRyaWJ1dGUucHJvdG90eXBlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIGRhdGF0eXBlIG9mIGVhY2ggY29tcG9uZW50IGluIHRoZSBhdHRyaWJ1dGUsIGUuZy4sIGluZGl2aWR1YWwgZWxlbWVudHMgaW4KICAgICAgICAgKiB7QGxpbmsgT2Zmc2V0R2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZSN2YWx1ZX0uCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgT2Zmc2V0R2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZS5wcm90b3R5cGUKICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtDb21wb25lbnREYXRhdHlwZX0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKgogICAgICAgICAqIEBkZWZhdWx0IHtAbGluayBDb21wb25lbnREYXRhdHlwZS5GTE9BVH0KICAgICAgICAgKi8KICAgICAgICBjb21wb25lbnREYXRhdHlwZTogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQ7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIGNvbXBvbmVudHMgaW4gdGhlIGF0dHJpYnV0ZXMsIGkuZS4sIHtAbGluayBPZmZzZXRHZW9tZXRyeUluc3RhbmNlQXR0cmlidXRlI3ZhbHVlfS4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJvZiBPZmZzZXRHZW9tZXRyeUluc3RhbmNlQXR0cmlidXRlLnByb3RvdHlwZQogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKgogICAgICAgICAqIEBkZWZhdWx0IDMKICAgICAgICAgKi8KICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gMzsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIFdoZW4gPGNvZGU+dHJ1ZTwvY29kZT4gYW5kIDxjb2RlPmNvbXBvbmVudERhdGF0eXBlPC9jb2RlPiBpcyBhbiBpbnRlZ2VyIGZvcm1hdCwKICAgICAgICAgKiBpbmRpY2F0ZSB0aGF0IHRoZSBjb21wb25lbnRzIHNob3VsZCBiZSBtYXBwZWQgdG8gdGhlIHJhbmdlIFswLCAxXSAodW5zaWduZWQpCiAgICAgICAgICogb3IgWy0xLCAxXSAoc2lnbmVkKSB3aGVuIHRoZXkgYXJlIGFjY2Vzc2VkIGFzIGZsb2F0aW5nLXBvaW50IGZvciByZW5kZXJpbmcuCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgT2Zmc2V0R2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZS5wcm90b3R5cGUKICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtib29sZWFufQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqCiAgICAgICAgICogQGRlZmF1bHQgZmFsc2UKICAgICAgICAgKi8KICAgICAgICBub3JtYWxpemU6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBPZmZzZXRHZW9tZXRyeUluc3RhbmNlQXR0cmlidXRlLmZyb21DYXJ0ZXNpYW4zID0gZnVuY3Rpb24ob2Zmc2V0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJvZmZzZXQiLCBvZmZzZXQpOwogICAgICAgIHJldHVybiBuZXcgT2Zmc2V0R2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZShvZmZzZXQueCwgb2Zmc2V0LnksIG9mZnNldC56KTsKICAgICAgfTsKICAgICAgT2Zmc2V0R2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZS50b1ZhbHVlID0gZnVuY3Rpb24ob2Zmc2V0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoIm9mZnNldCIsIG9mZnNldCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEZsb2F0MzJBcnJheShbb2Zmc2V0LngsIG9mZnNldC55LCBvZmZzZXQuel0pOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBvZmZzZXQueDsKICAgICAgICByZXN1bHRbMV0gPSBvZmZzZXQueTsKICAgICAgICByZXN1bHRbMl0gPSBvZmZzZXQuejsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBPZmZzZXRHZW9tZXRyeUluc3RhbmNlQXR0cmlidXRlX2RlZmF1bHQgPSBPZmZzZXRHZW9tZXRyeUluc3RhbmNlQXR0cmlidXRlOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvV2ViTWVyY2F0b3JQcm9qZWN0aW9uLmpzCiAgZnVuY3Rpb24gV2ViTWVyY2F0b3JQcm9qZWN0aW9uKGVsbGlwc29pZCkgewogICAgdGhpcy5fZWxsaXBzb2lkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NCk7CiAgICB0aGlzLl9zZW1pbWFqb3JBeGlzID0gdGhpcy5fZWxsaXBzb2lkLm1heGltdW1SYWRpdXM7CiAgICB0aGlzLl9vbmVPdmVyU2VtaW1ham9yQXhpcyA9IDEgLyB0aGlzLl9zZW1pbWFqb3JBeGlzOwogIH0KICB2YXIgV2ViTWVyY2F0b3JQcm9qZWN0aW9uX2RlZmF1bHQ7CiAgdmFyIGluaXRfV2ViTWVyY2F0b3JQcm9qZWN0aW9uID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9XZWJNZXJjYXRvclByb2plY3Rpb24uanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFdlYk1lcmNhdG9yUHJvamVjdGlvbi5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSB7QGxpbmsgRWxsaXBzb2lkfS4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJvZiBXZWJNZXJjYXRvclByb2plY3Rpb24ucHJvdG90eXBlCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7RWxsaXBzb2lkfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIGVsbGlwc29pZDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsbGlwc29pZDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBXZWJNZXJjYXRvclByb2plY3Rpb24ubWVyY2F0b3JBbmdsZVRvR2VvZGV0aWNMYXRpdHVkZSA9IGZ1bmN0aW9uKG1lcmNhdG9yQW5nbGUpIHsKICAgICAgICByZXR1cm4gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPIC0gMiAqIE1hdGguYXRhbihNYXRoLmV4cCgtbWVyY2F0b3JBbmdsZSkpOwogICAgICB9OwogICAgICBXZWJNZXJjYXRvclByb2plY3Rpb24uZ2VvZGV0aWNMYXRpdHVkZVRvTWVyY2F0b3JBbmdsZSA9IGZ1bmN0aW9uKGxhdGl0dWRlKSB7CiAgICAgICAgaWYgKGxhdGl0dWRlID4gV2ViTWVyY2F0b3JQcm9qZWN0aW9uLk1heGltdW1MYXRpdHVkZSkgewogICAgICAgICAgbGF0aXR1ZGUgPSBXZWJNZXJjYXRvclByb2plY3Rpb24uTWF4aW11bUxhdGl0dWRlOwogICAgICAgIH0gZWxzZSBpZiAobGF0aXR1ZGUgPCAtV2ViTWVyY2F0b3JQcm9qZWN0aW9uLk1heGltdW1MYXRpdHVkZSkgewogICAgICAgICAgbGF0aXR1ZGUgPSAtV2ViTWVyY2F0b3JQcm9qZWN0aW9uLk1heGltdW1MYXRpdHVkZTsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc2luTGF0aXR1ZGUgPSBNYXRoLnNpbihsYXRpdHVkZSk7CiAgICAgICAgcmV0dXJuIDAuNSAqIE1hdGgubG9nKCgxICsgc2luTGF0aXR1ZGUpIC8gKDEgLSBzaW5MYXRpdHVkZSkpOwogICAgICB9OwogICAgICBXZWJNZXJjYXRvclByb2plY3Rpb24uTWF4aW11bUxhdGl0dWRlID0gV2ViTWVyY2F0b3JQcm9qZWN0aW9uLm1lcmNhdG9yQW5nbGVUb0dlb2RldGljTGF0aXR1ZGUoCiAgICAgICAgTWF0aC5QSQogICAgICApOwogICAgICBXZWJNZXJjYXRvclByb2plY3Rpb24ucHJvdG90eXBlLnByb2plY3QgPSBmdW5jdGlvbihjYXJ0b2dyYXBoaWMyLCByZXN1bHQpIHsKICAgICAgICBjb25zdCBzZW1pbWFqb3JBeGlzID0gdGhpcy5fc2VtaW1ham9yQXhpczsKICAgICAgICBjb25zdCB4ID0gY2FydG9ncmFwaGljMi5sb25naXR1ZGUgKiBzZW1pbWFqb3JBeGlzOwogICAgICAgIGNvbnN0IHkgPSBXZWJNZXJjYXRvclByb2plY3Rpb24uZ2VvZGV0aWNMYXRpdHVkZVRvTWVyY2F0b3JBbmdsZSgKICAgICAgICAgIGNhcnRvZ3JhcGhpYzIubGF0aXR1ZGUKICAgICAgICApICogc2VtaW1ham9yQXhpczsKICAgICAgICBjb25zdCB6ID0gY2FydG9ncmFwaGljMi5oZWlnaHQ7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoeCwgeSwgeik7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmVzdWx0LnogPSB6OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFdlYk1lcmNhdG9yUHJvamVjdGlvbi5wcm90b3R5cGUudW5wcm9qZWN0ID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNhcnRlc2lhbjExKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImNhcnRlc2lhbiBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBvbmVPdmVyRWFydGhTZW1pbWFqb3JBeGlzID0gdGhpcy5fb25lT3ZlclNlbWltYWpvckF4aXM7CiAgICAgICAgY29uc3QgbG9uZ2l0dWRlID0gY2FydGVzaWFuMTEueCAqIG9uZU92ZXJFYXJ0aFNlbWltYWpvckF4aXM7CiAgICAgICAgY29uc3QgbGF0aXR1ZGUgPSBXZWJNZXJjYXRvclByb2plY3Rpb24ubWVyY2F0b3JBbmdsZVRvR2VvZGV0aWNMYXRpdHVkZSgKICAgICAgICAgIGNhcnRlc2lhbjExLnkgKiBvbmVPdmVyRWFydGhTZW1pbWFqb3JBeGlzCiAgICAgICAgKTsKICAgICAgICBjb25zdCBoZWlnaHQgPSBjYXJ0ZXNpYW4xMS56OwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQobG9uZ2l0dWRlLCBsYXRpdHVkZSwgaGVpZ2h0KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LmxvbmdpdHVkZSA9IGxvbmdpdHVkZTsKICAgICAgICByZXN1bHQubGF0aXR1ZGUgPSBsYXRpdHVkZTsKICAgICAgICByZXN1bHQuaGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFdlYk1lcmNhdG9yUHJvamVjdGlvbl9kZWZhdWx0ID0gV2ViTWVyY2F0b3JQcm9qZWN0aW9uOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1NjZW5lL1ByaW1pdGl2ZVBpcGVsaW5lLmpzCiAgZnVuY3Rpb24gdHJhbnNmb3JtVG9Xb3JsZENvb3JkaW5hdGVzKGluc3RhbmNlcywgcHJpbWl0aXZlTW9kZWxNYXRyaXgsIHNjZW5lM0RPbmx5KSB7CiAgICBsZXQgdG9Xb3JsZCA9ICFzY2VuZTNET25seTsKICAgIGNvbnN0IGxlbmd0aCA9IGluc3RhbmNlcy5sZW5ndGg7CiAgICBsZXQgaTsKICAgIGlmICghdG9Xb3JsZCAmJiBsZW5ndGggPiAxKSB7CiAgICAgIGNvbnN0IG1vZGVsTWF0cml4ID0gaW5zdGFuY2VzWzBdLm1vZGVsTWF0cml4OwogICAgICBmb3IgKGkgPSAxOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICBpZiAoIU1hdHJpeDRfZGVmYXVsdC5lcXVhbHMobW9kZWxNYXRyaXgsIGluc3RhbmNlc1tpXS5tb2RlbE1hdHJpeCkpIHsKICAgICAgICAgIHRvV29ybGQgPSB0cnVlOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAodG9Xb3JsZCkgewogICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlc1tpXS5nZW9tZXRyeSkpIHsKICAgICAgICAgIEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC50cmFuc2Zvcm1Ub1dvcmxkQ29vcmRpbmF0ZXMoaW5zdGFuY2VzW2ldKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseVRyYW5zZm9ybWF0aW9uKAogICAgICAgIHByaW1pdGl2ZU1vZGVsTWF0cml4LAogICAgICAgIGluc3RhbmNlc1swXS5tb2RlbE1hdHJpeCwKICAgICAgICBwcmltaXRpdmVNb2RlbE1hdHJpeAogICAgICApOwogICAgfQogIH0KICBmdW5jdGlvbiBhZGRHZW9tZXRyeUJhdGNoSWQoZ2VvbWV0cnksIGJhdGNoSWQpIHsKICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgY29uc3QgcG9zaXRpb25BdHRyID0gYXR0cmlidXRlcy5wb3NpdGlvbjsKICAgIGNvbnN0IG51bWJlck9mQ29tcG9uZW50cyA9IHBvc2l0aW9uQXR0ci52YWx1ZXMubGVuZ3RoIC8gcG9zaXRpb25BdHRyLmNvbXBvbmVudHNQZXJBdHRyaWJ1dGU7CiAgICBhdHRyaWJ1dGVzLmJhdGNoSWQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAxLAogICAgICB2YWx1ZXM6IG5ldyBGbG9hdDMyQXJyYXkobnVtYmVyT2ZDb21wb25lbnRzKQogICAgfSk7CiAgICBjb25zdCB2YWx1ZXMgPSBhdHRyaWJ1dGVzLmJhdGNoSWQudmFsdWVzOwogICAgZm9yIChsZXQgaiA9IDA7IGogPCBudW1iZXJPZkNvbXBvbmVudHM7ICsraikgewogICAgICB2YWx1ZXNbal0gPSBiYXRjaElkOwogICAgfQogIH0KICBmdW5jdGlvbiBhZGRCYXRjaElkcyhpbnN0YW5jZXMpIHsKICAgIGNvbnN0IGxlbmd0aCA9IGluc3RhbmNlcy5sZW5ndGg7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgIGNvbnN0IGluc3RhbmNlID0gaW5zdGFuY2VzW2ldOwogICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlLmdlb21ldHJ5KSkgewogICAgICAgIGFkZEdlb21ldHJ5QmF0Y2hJZChpbnN0YW5jZS5nZW9tZXRyeSwgaSk7CiAgICAgIH0gZWxzZSBpZiAoZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlLndlc3RIZW1pc3BoZXJlR2VvbWV0cnkpICYmIGRlZmluZWRfZGVmYXVsdChpbnN0YW5jZS5lYXN0SGVtaXNwaGVyZUdlb21ldHJ5KSkgewogICAgICAgIGFkZEdlb21ldHJ5QmF0Y2hJZChpbnN0YW5jZS53ZXN0SGVtaXNwaGVyZUdlb21ldHJ5LCBpKTsKICAgICAgICBhZGRHZW9tZXRyeUJhdGNoSWQoaW5zdGFuY2UuZWFzdEhlbWlzcGhlcmVHZW9tZXRyeSwgaSk7CiAgICAgIH0KICAgIH0KICB9CiAgZnVuY3Rpb24gZ2VvbWV0cnlQaXBlbGluZShwYXJhbWV0ZXJzKSB7CiAgICBjb25zdCBpbnN0YW5jZXMgPSBwYXJhbWV0ZXJzLmluc3RhbmNlczsKICAgIGNvbnN0IHByb2plY3Rpb24gPSBwYXJhbWV0ZXJzLnByb2plY3Rpb247CiAgICBjb25zdCB1aW50SW5kZXhTdXBwb3J0ID0gcGFyYW1ldGVycy5lbGVtZW50SW5kZXhVaW50U3VwcG9ydGVkOwogICAgY29uc3Qgc2NlbmUzRE9ubHkgPSBwYXJhbWV0ZXJzLnNjZW5lM0RPbmx5OwogICAgY29uc3QgdmVydGV4Q2FjaGVPcHRpbWl6ZSA9IHBhcmFtZXRlcnMudmVydGV4Q2FjaGVPcHRpbWl6ZTsKICAgIGNvbnN0IGNvbXByZXNzVmVydGljZXMgPSBwYXJhbWV0ZXJzLmNvbXByZXNzVmVydGljZXM7CiAgICBjb25zdCBtb2RlbE1hdHJpeCA9IHBhcmFtZXRlcnMubW9kZWxNYXRyaXg7CiAgICBsZXQgaTsKICAgIGxldCBnZW9tZXRyeTsKICAgIGxldCBwcmltaXRpdmVUeXBlOwogICAgbGV0IGxlbmd0aCA9IGluc3RhbmNlcy5sZW5ndGg7CiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbnN0YW5jZXNbaV0uZ2VvbWV0cnkpKSB7CiAgICAgICAgcHJpbWl0aXZlVHlwZSA9IGluc3RhbmNlc1tpXS5nZW9tZXRyeS5wcmltaXRpdmVUeXBlOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgICBmb3IgKGkgPSAxOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbnN0YW5jZXNbaV0uZ2VvbWV0cnkpICYmIGluc3RhbmNlc1tpXS5nZW9tZXRyeS5wcmltaXRpdmVUeXBlICE9PSBwcmltaXRpdmVUeXBlKSB7CiAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAiQWxsIGluc3RhbmNlIGdlb21ldHJpZXMgbXVzdCBoYXZlIHRoZSBzYW1lIHByaW1pdGl2ZVR5cGUuIgogICAgICAgICk7CiAgICAgIH0KICAgIH0KICAgIHRyYW5zZm9ybVRvV29ybGRDb29yZGluYXRlcyhpbnN0YW5jZXMsIG1vZGVsTWF0cml4LCBzY2VuZTNET25seSk7CiAgICBpZiAoIXNjZW5lM0RPbmx5KSB7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaW5zdGFuY2VzW2ldLmdlb21ldHJ5KSkgewogICAgICAgICAgR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LnNwbGl0TG9uZ2l0dWRlKGluc3RhbmNlc1tpXSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBhZGRCYXRjaElkcyhpbnN0YW5jZXMpOwogICAgaWYgKHZlcnRleENhY2hlT3B0aW1pemUpIHsKICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBpbnN0YW5jZXNbaV07CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbnN0YW5jZS5nZW9tZXRyeSkpIHsKICAgICAgICAgIEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5yZW9yZGVyRm9yUG9zdFZlcnRleENhY2hlKGluc3RhbmNlLmdlb21ldHJ5KTsKICAgICAgICAgIEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5yZW9yZGVyRm9yUHJlVmVydGV4Q2FjaGUoaW5zdGFuY2UuZ2VvbWV0cnkpOwogICAgICAgIH0gZWxzZSBpZiAoZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlLndlc3RIZW1pc3BoZXJlR2VvbWV0cnkpICYmIGRlZmluZWRfZGVmYXVsdChpbnN0YW5jZS5lYXN0SGVtaXNwaGVyZUdlb21ldHJ5KSkgewogICAgICAgICAgR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LnJlb3JkZXJGb3JQb3N0VmVydGV4Q2FjaGUoCiAgICAgICAgICAgIGluc3RhbmNlLndlc3RIZW1pc3BoZXJlR2VvbWV0cnkKICAgICAgICAgICk7CiAgICAgICAgICBHZW9tZXRyeVBpcGVsaW5lX2RlZmF1bHQucmVvcmRlckZvclByZVZlcnRleENhY2hlKAogICAgICAgICAgICBpbnN0YW5jZS53ZXN0SGVtaXNwaGVyZUdlb21ldHJ5CiAgICAgICAgICApOwogICAgICAgICAgR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LnJlb3JkZXJGb3JQb3N0VmVydGV4Q2FjaGUoCiAgICAgICAgICAgIGluc3RhbmNlLmVhc3RIZW1pc3BoZXJlR2VvbWV0cnkKICAgICAgICAgICk7CiAgICAgICAgICBHZW9tZXRyeVBpcGVsaW5lX2RlZmF1bHQucmVvcmRlckZvclByZVZlcnRleENhY2hlKAogICAgICAgICAgICBpbnN0YW5jZS5lYXN0SGVtaXNwaGVyZUdlb21ldHJ5CiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgbGV0IGdlb21ldHJpZXMgPSBHZW9tZXRyeVBpcGVsaW5lX2RlZmF1bHQuY29tYmluZUluc3RhbmNlcyhpbnN0YW5jZXMpOwogICAgbGVuZ3RoID0gZ2VvbWV0cmllcy5sZW5ndGg7CiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgZ2VvbWV0cnkgPSBnZW9tZXRyaWVzW2ldOwogICAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgaWYgKCFzY2VuZTNET25seSkgewogICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBhdHRyaWJ1dGVzKSB7CiAgICAgICAgICBpZiAoYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBhdHRyaWJ1dGVzW25hbWVdLmNvbXBvbmVudERhdGF0eXBlID09PSBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSkgewogICAgICAgICAgICBjb25zdCBuYW1lM0QgPSBgJHtuYW1lfTNEYDsKICAgICAgICAgICAgY29uc3QgbmFtZTJEID0gYCR7bmFtZX0yRGA7CiAgICAgICAgICAgIEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5wcm9qZWN0VG8yRCgKICAgICAgICAgICAgICBnZW9tZXRyeSwKICAgICAgICAgICAgICBuYW1lLAogICAgICAgICAgICAgIG5hbWUzRCwKICAgICAgICAgICAgICBuYW1lMkQsCiAgICAgICAgICAgICAgcHJvamVjdGlvbgogICAgICAgICAgICApOwogICAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlKSAmJiBuYW1lID09PSAicG9zaXRpb24iKSB7CiAgICAgICAgICAgICAgZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmVDViA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVZlcnRpY2VzKAogICAgICAgICAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjJELnZhbHVlcwogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LmVuY29kZUF0dHJpYnV0ZSgKICAgICAgICAgICAgICBnZW9tZXRyeSwKICAgICAgICAgICAgICBuYW1lM0QsCiAgICAgICAgICAgICAgYCR7bmFtZTNEfUhpZ2hgLAogICAgICAgICAgICAgIGAke25hbWUzRH1Mb3dgCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5lbmNvZGVBdHRyaWJ1dGUoCiAgICAgICAgICAgICAgZ2VvbWV0cnksCiAgICAgICAgICAgICAgbmFtZTJELAogICAgICAgICAgICAgIGAke25hbWUyRH1IaWdoYCwKICAgICAgICAgICAgICBgJHtuYW1lMkR9TG93YAogICAgICAgICAgICApOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gYXR0cmlidXRlcykgewogICAgICAgICAgaWYgKGF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgYXR0cmlidXRlc1tuYW1lXS5jb21wb25lbnREYXRhdHlwZSA9PT0gQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUpIHsKICAgICAgICAgICAgR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LmVuY29kZUF0dHJpYnV0ZSgKICAgICAgICAgICAgICBnZW9tZXRyeSwKICAgICAgICAgICAgICBuYW1lLAogICAgICAgICAgICAgIGAke25hbWV9M0RIaWdoYCwKICAgICAgICAgICAgICBgJHtuYW1lfTNETG93YAogICAgICAgICAgICApOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoY29tcHJlc3NWZXJ0aWNlcykgewogICAgICAgIEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5jb21wcmVzc1ZlcnRpY2VzKGdlb21ldHJ5KTsKICAgICAgfQogICAgfQogICAgaWYgKCF1aW50SW5kZXhTdXBwb3J0KSB7CiAgICAgIGxldCBzcGxpdEdlb21ldHJpZXMgPSBbXTsKICAgICAgbGVuZ3RoID0gZ2VvbWV0cmllcy5sZW5ndGg7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgIGdlb21ldHJ5ID0gZ2VvbWV0cmllc1tpXTsKICAgICAgICBzcGxpdEdlb21ldHJpZXMgPSBzcGxpdEdlb21ldHJpZXMuY29uY2F0KAogICAgICAgICAgR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LmZpdFRvVW5zaWduZWRTaG9ydEluZGljZXMoZ2VvbWV0cnkpCiAgICAgICAgKTsKICAgICAgfQogICAgICBnZW9tZXRyaWVzID0gc3BsaXRHZW9tZXRyaWVzOwogICAgfQogICAgcmV0dXJuIGdlb21ldHJpZXM7CiAgfQogIGZ1bmN0aW9uIGNyZWF0ZVBpY2tPZmZzZXRzKGluc3RhbmNlcywgZ2VvbWV0cnlOYW1lLCBnZW9tZXRyaWVzLCBwaWNrT2Zmc2V0cykgewogICAgbGV0IG9mZnNldDsKICAgIGxldCBpbmRleENvdW50OwogICAgbGV0IGdlb21ldHJ5SW5kZXg7CiAgICBjb25zdCBvZmZzZXRJbmRleCA9IHBpY2tPZmZzZXRzLmxlbmd0aCAtIDE7CiAgICBpZiAob2Zmc2V0SW5kZXggPj0gMCkgewogICAgICBjb25zdCBwaWNrT2Zmc2V0ID0gcGlja09mZnNldHNbb2Zmc2V0SW5kZXhdOwogICAgICBvZmZzZXQgPSBwaWNrT2Zmc2V0Lm9mZnNldCArIHBpY2tPZmZzZXQuY291bnQ7CiAgICAgIGdlb21ldHJ5SW5kZXggPSBwaWNrT2Zmc2V0LmluZGV4OwogICAgICBpbmRleENvdW50ID0gZ2VvbWV0cmllc1tnZW9tZXRyeUluZGV4XS5pbmRpY2VzLmxlbmd0aDsKICAgIH0gZWxzZSB7CiAgICAgIG9mZnNldCA9IDA7CiAgICAgIGdlb21ldHJ5SW5kZXggPSAwOwogICAgICBpbmRleENvdW50ID0gZ2VvbWV0cmllc1tnZW9tZXRyeUluZGV4XS5pbmRpY2VzLmxlbmd0aDsKICAgIH0KICAgIGNvbnN0IGxlbmd0aCA9IGluc3RhbmNlcy5sZW5ndGg7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgIGNvbnN0IGluc3RhbmNlID0gaW5zdGFuY2VzW2ldOwogICAgICBjb25zdCBnZW9tZXRyeSA9IGluc3RhbmNlW2dlb21ldHJ5TmFtZV07CiAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5KSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbnN0IGNvdW50ID0gZ2VvbWV0cnkuaW5kaWNlcy5sZW5ndGg7CiAgICAgIGlmIChvZmZzZXQgKyBjb3VudCA+IGluZGV4Q291bnQpIHsKICAgICAgICBvZmZzZXQgPSAwOwogICAgICAgIGluZGV4Q291bnQgPSBnZW9tZXRyaWVzWysrZ2VvbWV0cnlJbmRleF0uaW5kaWNlcy5sZW5ndGg7CiAgICAgIH0KICAgICAgcGlja09mZnNldHMucHVzaCh7CiAgICAgICAgaW5kZXg6IGdlb21ldHJ5SW5kZXgsCiAgICAgICAgb2Zmc2V0LAogICAgICAgIGNvdW50CiAgICAgIH0pOwogICAgICBvZmZzZXQgKz0gY291bnQ7CiAgICB9CiAgfQogIGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlUGlja09mZnNldHMoaW5zdGFuY2VzLCBnZW9tZXRyaWVzKSB7CiAgICBjb25zdCBwaWNrT2Zmc2V0cyA9IFtdOwogICAgY3JlYXRlUGlja09mZnNldHMoaW5zdGFuY2VzLCAiZ2VvbWV0cnkiLCBnZW9tZXRyaWVzLCBwaWNrT2Zmc2V0cyk7CiAgICBjcmVhdGVQaWNrT2Zmc2V0cygKICAgICAgaW5zdGFuY2VzLAogICAgICAid2VzdEhlbWlzcGhlcmVHZW9tZXRyeSIsCiAgICAgIGdlb21ldHJpZXMsCiAgICAgIHBpY2tPZmZzZXRzCiAgICApOwogICAgY3JlYXRlUGlja09mZnNldHMoCiAgICAgIGluc3RhbmNlcywKICAgICAgImVhc3RIZW1pc3BoZXJlR2VvbWV0cnkiLAogICAgICBnZW9tZXRyaWVzLAogICAgICBwaWNrT2Zmc2V0cwogICAgKTsKICAgIHJldHVybiBwaWNrT2Zmc2V0czsKICB9CiAgZnVuY3Rpb24gdHJhbnNmZXJHZW9tZXRyeShnZW9tZXRyeSwgdHJhbnNmZXJhYmxlT2JqZWN0cykgewogICAgY29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gYXR0cmlidXRlcykgewogICAgICBpZiAoYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbbmFtZV07CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGUpICYmIGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGUudmFsdWVzKSkgewogICAgICAgICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKGF0dHJpYnV0ZS52YWx1ZXMuYnVmZmVyKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkuaW5kaWNlcykpIHsKICAgICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKGdlb21ldHJ5LmluZGljZXMuYnVmZmVyKTsKICAgIH0KICB9CiAgZnVuY3Rpb24gdHJhbnNmZXJHZW9tZXRyaWVzKGdlb21ldHJpZXMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIGNvbnN0IGxlbmd0aCA9IGdlb21ldHJpZXMubGVuZ3RoOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICB0cmFuc2Zlckdlb21ldHJ5KGdlb21ldHJpZXNbaV0sIHRyYW5zZmVyYWJsZU9iamVjdHMpOwogICAgfQogIH0KICBmdW5jdGlvbiBjb3VudENyZWF0ZUdlb21ldHJ5UmVzdWx0cyhpdGVtcykgewogICAgbGV0IGNvdW50ID0gMTsKICAgIGNvbnN0IGxlbmd0aCA9IGl0ZW1zLmxlbmd0aDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgY29uc3QgZ2VvbWV0cnkgPSBpdGVtc1tpXTsKICAgICAgKytjb3VudDsKICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkpKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICAgIGNvdW50ICs9IDcgKyAyICogQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyAoZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmluZGljZXMpID8gZ2VvbWV0cnkuaW5kaWNlcy5sZW5ndGggOiAwKTsKICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBhdHRyaWJ1dGVzKSB7CiAgICAgICAgaWYgKGF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmIGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzW3Byb3BlcnR5XSkpIHsKICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbcHJvcGVydHldOwogICAgICAgICAgY291bnQgKz0gNSArIGF0dHJpYnV0ZS52YWx1ZXMubGVuZ3RoOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmV0dXJuIGNvdW50OwogIH0KICBmdW5jdGlvbiBwYWNrSW5zdGFuY2VzRm9yQ29tYmluZShpbnN0YW5jZXMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIGNvbnN0IGxlbmd0aCA9IGluc3RhbmNlcy5sZW5ndGg7CiAgICBjb25zdCBwYWNrZWREYXRhID0gbmV3IEZsb2F0NjRBcnJheSgxICsgbGVuZ3RoICogMTkpOwogICAgbGV0IGNvdW50ID0gMDsKICAgIHBhY2tlZERhdGFbY291bnQrK10gPSBsZW5ndGg7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgIGNvbnN0IGluc3RhbmNlID0gaW5zdGFuY2VzW2ldOwogICAgICBNYXRyaXg0X2RlZmF1bHQucGFjayhpbnN0YW5jZS5tb2RlbE1hdHJpeCwgcGFja2VkRGF0YSwgY291bnQpOwogICAgICBjb3VudCArPSBNYXRyaXg0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlLmF0dHJpYnV0ZXMpICYmIGRlZmluZWRfZGVmYXVsdChpbnN0YW5jZS5hdHRyaWJ1dGVzLm9mZnNldCkpIHsKICAgICAgICBjb25zdCB2YWx1ZXMgPSBpbnN0YW5jZS5hdHRyaWJ1dGVzLm9mZnNldC52YWx1ZTsKICAgICAgICBwYWNrZWREYXRhW2NvdW50XSA9IHZhbHVlc1swXTsKICAgICAgICBwYWNrZWREYXRhW2NvdW50ICsgMV0gPSB2YWx1ZXNbMV07CiAgICAgICAgcGFja2VkRGF0YVtjb3VudCArIDJdID0gdmFsdWVzWzJdOwogICAgICB9CiAgICAgIGNvdW50ICs9IDM7CiAgICB9CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2gocGFja2VkRGF0YS5idWZmZXIpOwogICAgcmV0dXJuIHBhY2tlZERhdGE7CiAgfQogIGZ1bmN0aW9uIHVucGFja0luc3RhbmNlc0ZvckNvbWJpbmUoZGF0YSkgewogICAgY29uc3QgcGFja2VkSW5zdGFuY2VzID0gZGF0YTsKICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheShwYWNrZWRJbnN0YW5jZXNbMF0pOwogICAgbGV0IGNvdW50ID0gMDsKICAgIGxldCBpID0gMTsKICAgIHdoaWxlIChpIDwgcGFja2VkSW5zdGFuY2VzLmxlbmd0aCkgewogICAgICBjb25zdCBtb2RlbE1hdHJpeCA9IE1hdHJpeDRfZGVmYXVsdC51bnBhY2socGFja2VkSW5zdGFuY2VzLCBpKTsKICAgICAgbGV0IGF0dHJpYnV0ZXM7CiAgICAgIGkgKz0gTWF0cml4NF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChwYWNrZWRJbnN0YW5jZXNbaV0pKSB7CiAgICAgICAgYXR0cmlidXRlcyA9IHsKICAgICAgICAgIG9mZnNldDogbmV3IE9mZnNldEdlb21ldHJ5SW5zdGFuY2VBdHRyaWJ1dGVfZGVmYXVsdCgKICAgICAgICAgICAgcGFja2VkSW5zdGFuY2VzW2ldLAogICAgICAgICAgICBwYWNrZWRJbnN0YW5jZXNbaSArIDFdLAogICAgICAgICAgICBwYWNrZWRJbnN0YW5jZXNbaSArIDJdCiAgICAgICAgICApCiAgICAgICAgfTsKICAgICAgfQogICAgICBpICs9IDM7CiAgICAgIHJlc3VsdFtjb3VudCsrXSA9IHsKICAgICAgICBtb2RlbE1hdHJpeCwKICAgICAgICBhdHRyaWJ1dGVzCiAgICAgIH07CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICBmdW5jdGlvbiBwYWNrQm91bmRpbmdTcGhlcmVzKGJvdW5kaW5nU3BoZXJlcykgewogICAgY29uc3QgbGVuZ3RoID0gYm91bmRpbmdTcGhlcmVzLmxlbmd0aDsKICAgIGNvbnN0IGJ1ZmZlckxlbmd0aCA9IDEgKyAoQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyAxKSAqIGxlbmd0aDsKICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyTGVuZ3RoKTsKICAgIGxldCBidWZmZXJJbmRleCA9IDA7CiAgICBidWZmZXJbYnVmZmVySW5kZXgrK10gPSBsZW5ndGg7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgIGNvbnN0IGJzID0gYm91bmRpbmdTcGhlcmVzW2ldOwogICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChicykpIHsKICAgICAgICBidWZmZXJbYnVmZmVySW5kZXgrK10gPSAwOwogICAgICB9IGVsc2UgewogICAgICAgIGJ1ZmZlcltidWZmZXJJbmRleCsrXSA9IDE7CiAgICAgICAgQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5wYWNrKGJvdW5kaW5nU3BoZXJlc1tpXSwgYnVmZmVyLCBidWZmZXJJbmRleCk7CiAgICAgIH0KICAgICAgYnVmZmVySW5kZXggKz0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICB9CiAgICByZXR1cm4gYnVmZmVyOwogIH0KICBmdW5jdGlvbiB1bnBhY2tCb3VuZGluZ1NwaGVyZXMoYnVmZmVyKSB7CiAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkoYnVmZmVyWzBdKTsKICAgIGxldCBjb3VudCA9IDA7CiAgICBsZXQgaSA9IDE7CiAgICB3aGlsZSAoaSA8IGJ1ZmZlci5sZW5ndGgpIHsKICAgICAgaWYgKGJ1ZmZlcltpKytdID09PSAxKSB7CiAgICAgICAgcmVzdWx0W2NvdW50XSA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQudW5wYWNrKGJ1ZmZlciwgaSk7CiAgICAgIH0KICAgICAgKytjb3VudDsKICAgICAgaSArPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQogIHZhciBQcmltaXRpdmVQaXBlbGluZSwgUHJpbWl0aXZlUGlwZWxpbmVfZGVmYXVsdDsKICB2YXIgaW5pdF9QcmltaXRpdmVQaXBlbGluZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1NjZW5lL1ByaW1pdGl2ZVBpcGVsaW5lLmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfR2VvZ3JhcGhpY1Byb2plY3Rpb24oKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfR2VvbWV0cnlQaXBlbGluZSgpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9NYXRyaXg0KCk7CiAgICAgIGluaXRfT2Zmc2V0R2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZSgpOwogICAgICBpbml0X1dlYk1lcmNhdG9yUHJvamVjdGlvbigpOwogICAgICBQcmltaXRpdmVQaXBlbGluZSA9IHt9OwogICAgICBQcmltaXRpdmVQaXBlbGluZS5jb21iaW5lR2VvbWV0cnkgPSBmdW5jdGlvbihwYXJhbWV0ZXJzKSB7CiAgICAgICAgbGV0IGdlb21ldHJpZXM7CiAgICAgICAgbGV0IGF0dHJpYnV0ZUxvY2F0aW9uczsKICAgICAgICBjb25zdCBpbnN0YW5jZXMgPSBwYXJhbWV0ZXJzLmluc3RhbmNlczsKICAgICAgICBjb25zdCBsZW5ndGggPSBpbnN0YW5jZXMubGVuZ3RoOwogICAgICAgIGxldCBwaWNrT2Zmc2V0czsKICAgICAgICBsZXQgb2Zmc2V0SW5zdGFuY2VFeHRlbmQ7CiAgICAgICAgbGV0IGhhc09mZnNldCA9IGZhbHNlOwogICAgICAgIGlmIChsZW5ndGggPiAwKSB7CiAgICAgICAgICBnZW9tZXRyaWVzID0gZ2VvbWV0cnlQaXBlbGluZShwYXJhbWV0ZXJzKTsKICAgICAgICAgIGlmIChnZW9tZXRyaWVzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgYXR0cmlidXRlTG9jYXRpb25zID0gR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LmNyZWF0ZUF0dHJpYnV0ZUxvY2F0aW9ucygKICAgICAgICAgICAgICBnZW9tZXRyaWVzWzBdCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLmNyZWF0ZVBpY2tPZmZzZXRzKSB7CiAgICAgICAgICAgICAgcGlja09mZnNldHMgPSBjcmVhdGVJbnN0YW5jZVBpY2tPZmZzZXRzKGluc3RhbmNlcywgZ2VvbWV0cmllcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaW5zdGFuY2VzWzBdLmF0dHJpYnV0ZXMpICYmIGRlZmluZWRfZGVmYXVsdChpbnN0YW5jZXNbMF0uYXR0cmlidXRlcy5vZmZzZXQpKSB7CiAgICAgICAgICAgIG9mZnNldEluc3RhbmNlRXh0ZW5kID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICAgICAgICAgIGhhc09mZnNldCA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGJvdW5kaW5nU3BoZXJlcyA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgICAgIGNvbnN0IGJvdW5kaW5nU3BoZXJlc0NWID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBpbnN0YW5jZXNbaV07CiAgICAgICAgICBjb25zdCBnZW9tZXRyeSA9IGluc3RhbmNlLmdlb21ldHJ5OwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChnZW9tZXRyeSkpIHsKICAgICAgICAgICAgYm91bmRpbmdTcGhlcmVzW2ldID0gZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmU7CiAgICAgICAgICAgIGJvdW5kaW5nU3BoZXJlc0NWW2ldID0gZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmVDVjsKICAgICAgICAgICAgaWYgKGhhc09mZnNldCkgewogICAgICAgICAgICAgIG9mZnNldEluc3RhbmNlRXh0ZW5kW2ldID0gaW5zdGFuY2UuZ2VvbWV0cnkub2Zmc2V0QXR0cmlidXRlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBlYXN0SGVtaXNwaGVyZUdlb21ldHJ5ID0gaW5zdGFuY2UuZWFzdEhlbWlzcGhlcmVHZW9tZXRyeTsKICAgICAgICAgIGNvbnN0IHdlc3RIZW1pc3BoZXJlR2VvbWV0cnkgPSBpbnN0YW5jZS53ZXN0SGVtaXNwaGVyZUdlb21ldHJ5OwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChlYXN0SGVtaXNwaGVyZUdlb21ldHJ5KSAmJiBkZWZpbmVkX2RlZmF1bHQod2VzdEhlbWlzcGhlcmVHZW9tZXRyeSkpIHsKICAgICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChlYXN0SGVtaXNwaGVyZUdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlKSAmJiBkZWZpbmVkX2RlZmF1bHQod2VzdEhlbWlzcGhlcmVHZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSkpIHsKICAgICAgICAgICAgICBib3VuZGluZ1NwaGVyZXNbaV0gPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnVuaW9uKAogICAgICAgICAgICAgICAgZWFzdEhlbWlzcGhlcmVHZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSwKICAgICAgICAgICAgICAgIHdlc3RIZW1pc3BoZXJlR2VvbWV0cnkuYm91bmRpbmdTcGhlcmUKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZWFzdEhlbWlzcGhlcmVHZW9tZXRyeS5ib3VuZGluZ1NwaGVyZUNWKSAmJiBkZWZpbmVkX2RlZmF1bHQod2VzdEhlbWlzcGhlcmVHZW9tZXRyeS5ib3VuZGluZ1NwaGVyZUNWKSkgewogICAgICAgICAgICAgIGJvdW5kaW5nU3BoZXJlc0NWW2ldID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC51bmlvbigKICAgICAgICAgICAgICAgIGVhc3RIZW1pc3BoZXJlR2VvbWV0cnkuYm91bmRpbmdTcGhlcmVDViwKICAgICAgICAgICAgICAgIHdlc3RIZW1pc3BoZXJlR2VvbWV0cnkuYm91bmRpbmdTcGhlcmVDVgogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGdlb21ldHJpZXMsCiAgICAgICAgICBtb2RlbE1hdHJpeDogcGFyYW1ldGVycy5tb2RlbE1hdHJpeCwKICAgICAgICAgIGF0dHJpYnV0ZUxvY2F0aW9ucywKICAgICAgICAgIHBpY2tPZmZzZXRzLAogICAgICAgICAgb2Zmc2V0SW5zdGFuY2VFeHRlbmQsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZXMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZXNDVgogICAgICAgIH07CiAgICAgIH07CiAgICAgIFByaW1pdGl2ZVBpcGVsaW5lLnBhY2tDcmVhdGVHZW9tZXRyeVJlc3VsdHMgPSBmdW5jdGlvbihpdGVtcywgdHJhbnNmZXJhYmxlT2JqZWN0cykgewogICAgICAgIGNvbnN0IHBhY2tlZERhdGEgPSBuZXcgRmxvYXQ2NEFycmF5KGNvdW50Q3JlYXRlR2VvbWV0cnlSZXN1bHRzKGl0ZW1zKSk7CiAgICAgICAgY29uc3Qgc3RyaW5nVGFibGUgPSBbXTsKICAgICAgICBjb25zdCBzdHJpbmdIYXNoID0ge307CiAgICAgICAgY29uc3QgbGVuZ3RoID0gaXRlbXMubGVuZ3RoOwogICAgICAgIGxldCBjb3VudCA9IDA7CiAgICAgICAgcGFja2VkRGF0YVtjb3VudCsrXSA9IGxlbmd0aDsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBjb25zdCBnZW9tZXRyeSA9IGl0ZW1zW2ldOwogICAgICAgICAgY29uc3QgdmFsaWRHZW9tZXRyeSA9IGRlZmluZWRfZGVmYXVsdChnZW9tZXRyeSk7CiAgICAgICAgICBwYWNrZWREYXRhW2NvdW50KytdID0gdmFsaWRHZW9tZXRyeSA/IDEgOiAwOwogICAgICAgICAgaWYgKCF2YWxpZEdlb21ldHJ5KSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgcGFja2VkRGF0YVtjb3VudCsrXSA9IGdlb21ldHJ5LnByaW1pdGl2ZVR5cGU7CiAgICAgICAgICBwYWNrZWREYXRhW2NvdW50KytdID0gZ2VvbWV0cnkuZ2VvbWV0cnlUeXBlOwogICAgICAgICAgcGFja2VkRGF0YVtjb3VudCsrXSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGdlb21ldHJ5Lm9mZnNldEF0dHJpYnV0ZSwgLTEpOwogICAgICAgICAgY29uc3QgdmFsaWRCb3VuZGluZ1NwaGVyZSA9IGRlZmluZWRfZGVmYXVsdChnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSkgPyAxIDogMDsKICAgICAgICAgIHBhY2tlZERhdGFbY291bnQrK10gPSB2YWxpZEJvdW5kaW5nU3BoZXJlOwogICAgICAgICAgaWYgKHZhbGlkQm91bmRpbmdTcGhlcmUpIHsKICAgICAgICAgICAgQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5wYWNrKGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLCBwYWNrZWREYXRhLCBjb3VudCk7CiAgICAgICAgICB9CiAgICAgICAgICBjb3VudCArPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICAgIGNvbnN0IHZhbGlkQm91bmRpbmdTcGhlcmVDViA9IGRlZmluZWRfZGVmYXVsdChnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZUNWKSA/IDEgOiAwOwogICAgICAgICAgcGFja2VkRGF0YVtjb3VudCsrXSA9IHZhbGlkQm91bmRpbmdTcGhlcmVDVjsKICAgICAgICAgIGlmICh2YWxpZEJvdW5kaW5nU3BoZXJlQ1YpIHsKICAgICAgICAgICAgQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5wYWNrKGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlQ1YsIHBhY2tlZERhdGEsIGNvdW50KTsKICAgICAgICAgIH0KICAgICAgICAgIGNvdW50ICs9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzVG9Xcml0ZSA9IFtdOwogICAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBhdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSAmJiBkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlc1twcm9wZXJ0eV0pKSB7CiAgICAgICAgICAgICAgYXR0cmlidXRlc1RvV3JpdGUucHVzaChwcm9wZXJ0eSk7CiAgICAgICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoc3RyaW5nSGFzaFtwcm9wZXJ0eV0pKSB7CiAgICAgICAgICAgICAgICBzdHJpbmdIYXNoW3Byb3BlcnR5XSA9IHN0cmluZ1RhYmxlLmxlbmd0aDsKICAgICAgICAgICAgICAgIHN0cmluZ1RhYmxlLnB1c2gocHJvcGVydHkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcGFja2VkRGF0YVtjb3VudCsrXSA9IGF0dHJpYnV0ZXNUb1dyaXRlLmxlbmd0aDsKICAgICAgICAgIGZvciAobGV0IHEgPSAwOyBxIDwgYXR0cmlidXRlc1RvV3JpdGUubGVuZ3RoOyBxKyspIHsKICAgICAgICAgICAgY29uc3QgbmFtZSA9IGF0dHJpYnV0ZXNUb1dyaXRlW3FdOwogICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW25hbWVdOwogICAgICAgICAgICBwYWNrZWREYXRhW2NvdW50KytdID0gc3RyaW5nSGFzaFtuYW1lXTsKICAgICAgICAgICAgcGFja2VkRGF0YVtjb3VudCsrXSA9IGF0dHJpYnV0ZS5jb21wb25lbnREYXRhdHlwZTsKICAgICAgICAgICAgcGFja2VkRGF0YVtjb3VudCsrXSA9IGF0dHJpYnV0ZS5jb21wb25lbnRzUGVyQXR0cmlidXRlOwogICAgICAgICAgICBwYWNrZWREYXRhW2NvdW50KytdID0gYXR0cmlidXRlLm5vcm1hbGl6ZSA/IDEgOiAwOwogICAgICAgICAgICBwYWNrZWREYXRhW2NvdW50KytdID0gYXR0cmlidXRlLnZhbHVlcy5sZW5ndGg7CiAgICAgICAgICAgIHBhY2tlZERhdGEuc2V0KGF0dHJpYnV0ZS52YWx1ZXMsIGNvdW50KTsKICAgICAgICAgICAgY291bnQgKz0gYXR0cmlidXRlLnZhbHVlcy5sZW5ndGg7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBpbmRpY2VzTGVuZ3RoID0gZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmluZGljZXMpID8gZ2VvbWV0cnkuaW5kaWNlcy5sZW5ndGggOiAwOwogICAgICAgICAgcGFja2VkRGF0YVtjb3VudCsrXSA9IGluZGljZXNMZW5ndGg7CiAgICAgICAgICBpZiAoaW5kaWNlc0xlbmd0aCA+IDApIHsKICAgICAgICAgICAgcGFja2VkRGF0YS5zZXQoZ2VvbWV0cnkuaW5kaWNlcywgY291bnQpOwogICAgICAgICAgICBjb3VudCArPSBpbmRpY2VzTGVuZ3RoOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2gocGFja2VkRGF0YS5idWZmZXIpOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICBzdHJpbmdUYWJsZSwKICAgICAgICAgIHBhY2tlZERhdGEKICAgICAgICB9OwogICAgICB9OwogICAgICBQcmltaXRpdmVQaXBlbGluZS51bnBhY2tDcmVhdGVHZW9tZXRyeVJlc3VsdHMgPSBmdW5jdGlvbihjcmVhdGVHZW9tZXRyeVJlc3VsdCkgewogICAgICAgIGNvbnN0IHN0cmluZ1RhYmxlID0gY3JlYXRlR2VvbWV0cnlSZXN1bHQuc3RyaW5nVGFibGU7CiAgICAgICAgY29uc3QgcGFja2VkR2VvbWV0cnkgPSBjcmVhdGVHZW9tZXRyeVJlc3VsdC5wYWNrZWREYXRhOwogICAgICAgIGxldCBpOwogICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheShwYWNrZWRHZW9tZXRyeVswXSk7CiAgICAgICAgbGV0IHJlc3VsdEluZGV4ID0gMDsKICAgICAgICBsZXQgcGFja2VkR2VvbWV0cnlJbmRleCA9IDE7CiAgICAgICAgd2hpbGUgKHBhY2tlZEdlb21ldHJ5SW5kZXggPCBwYWNrZWRHZW9tZXRyeS5sZW5ndGgpIHsKICAgICAgICAgIGNvbnN0IHZhbGlkID0gcGFja2VkR2VvbWV0cnlbcGFja2VkR2VvbWV0cnlJbmRleCsrXSA9PT0gMTsKICAgICAgICAgIGlmICghdmFsaWQpIHsKICAgICAgICAgICAgcmVzdWx0W3Jlc3VsdEluZGV4KytdID0gdm9pZCAwOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IHByaW1pdGl2ZVR5cGUgPSBwYWNrZWRHZW9tZXRyeVtwYWNrZWRHZW9tZXRyeUluZGV4KytdOwogICAgICAgICAgY29uc3QgZ2VvbWV0cnlUeXBlID0gcGFja2VkR2VvbWV0cnlbcGFja2VkR2VvbWV0cnlJbmRleCsrXTsKICAgICAgICAgIGxldCBvZmZzZXRBdHRyaWJ1dGUgPSBwYWNrZWRHZW9tZXRyeVtwYWNrZWRHZW9tZXRyeUluZGV4KytdOwogICAgICAgICAgaWYgKG9mZnNldEF0dHJpYnV0ZSA9PT0gLTEpIHsKICAgICAgICAgICAgb2Zmc2V0QXR0cmlidXRlID0gdm9pZCAwOwogICAgICAgICAgfQogICAgICAgICAgbGV0IGJvdW5kaW5nU3BoZXJlOwogICAgICAgICAgbGV0IGJvdW5kaW5nU3BoZXJlQ1Y7CiAgICAgICAgICBjb25zdCB2YWxpZEJvdW5kaW5nU3BoZXJlID0gcGFja2VkR2VvbWV0cnlbcGFja2VkR2VvbWV0cnlJbmRleCsrXSA9PT0gMTsKICAgICAgICAgIGlmICh2YWxpZEJvdW5kaW5nU3BoZXJlKSB7CiAgICAgICAgICAgIGJvdW5kaW5nU3BoZXJlID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICAgICAgcGFja2VkR2VvbWV0cnksCiAgICAgICAgICAgICAgcGFja2VkR2VvbWV0cnlJbmRleAogICAgICAgICAgICApOwogICAgICAgICAgfQogICAgICAgICAgcGFja2VkR2VvbWV0cnlJbmRleCArPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICAgIGNvbnN0IHZhbGlkQm91bmRpbmdTcGhlcmVDViA9IHBhY2tlZEdlb21ldHJ5W3BhY2tlZEdlb21ldHJ5SW5kZXgrK10gPT09IDE7CiAgICAgICAgICBpZiAodmFsaWRCb3VuZGluZ1NwaGVyZUNWKSB7CiAgICAgICAgICAgIGJvdW5kaW5nU3BoZXJlQ1YgPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnVucGFjaygKICAgICAgICAgICAgICBwYWNrZWRHZW9tZXRyeSwKICAgICAgICAgICAgICBwYWNrZWRHZW9tZXRyeUluZGV4CiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgICBwYWNrZWRHZW9tZXRyeUluZGV4ICs9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgICAgbGV0IGxlbmd0aDsKICAgICAgICAgIGxldCB2YWx1ZXM7CiAgICAgICAgICBsZXQgY29tcG9uZW50c1BlckF0dHJpYnV0ZTsKICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoKTsKICAgICAgICAgIGNvbnN0IG51bUF0dHJpYnV0ZXMgPSBwYWNrZWRHZW9tZXRyeVtwYWNrZWRHZW9tZXRyeUluZGV4KytdOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bUF0dHJpYnV0ZXM7IGkrKykgewogICAgICAgICAgICBjb25zdCBuYW1lID0gc3RyaW5nVGFibGVbcGFja2VkR2VvbWV0cnlbcGFja2VkR2VvbWV0cnlJbmRleCsrXV07CiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudERhdGF0eXBlID0gcGFja2VkR2VvbWV0cnlbcGFja2VkR2VvbWV0cnlJbmRleCsrXTsKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZSA9IHBhY2tlZEdlb21ldHJ5W3BhY2tlZEdlb21ldHJ5SW5kZXgrK107CiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZSA9IHBhY2tlZEdlb21ldHJ5W3BhY2tlZEdlb21ldHJ5SW5kZXgrK10gIT09IDA7CiAgICAgICAgICAgIGxlbmd0aCA9IHBhY2tlZEdlb21ldHJ5W3BhY2tlZEdlb21ldHJ5SW5kZXgrK107CiAgICAgICAgICAgIHZhbHVlcyA9IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShjb21wb25lbnREYXRhdHlwZSwgbGVuZ3RoKTsKICAgICAgICAgICAgZm9yIChsZXQgdmFsdWVzSW5kZXggPSAwOyB2YWx1ZXNJbmRleCA8IGxlbmd0aDsgdmFsdWVzSW5kZXgrKykgewogICAgICAgICAgICAgIHZhbHVlc1t2YWx1ZXNJbmRleF0gPSBwYWNrZWRHZW9tZXRyeVtwYWNrZWRHZW9tZXRyeUluZGV4KytdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGF0dHJpYnV0ZXNbbmFtZV0gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGUsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZSwKICAgICAgICAgICAgICBub3JtYWxpemUsCiAgICAgICAgICAgICAgdmFsdWVzCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgbGV0IGluZGljZXM7CiAgICAgICAgICBsZW5ndGggPSBwYWNrZWRHZW9tZXRyeVtwYWNrZWRHZW9tZXRyeUluZGV4KytdOwogICAgICAgICAgaWYgKGxlbmd0aCA+IDApIHsKICAgICAgICAgICAgY29uc3QgbnVtYmVyT2ZWZXJ0aWNlcyA9IHZhbHVlcy5sZW5ndGggLyBjb21wb25lbnRzUGVyQXR0cmlidXRlOwogICAgICAgICAgICBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkobnVtYmVyT2ZWZXJ0aWNlcywgbGVuZ3RoKTsKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgaW5kaWNlc1tpXSA9IHBhY2tlZEdlb21ldHJ5W3BhY2tlZEdlb21ldHJ5SW5kZXgrK107CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJlc3VsdFtyZXN1bHRJbmRleCsrXSA9IG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgICAgcHJpbWl0aXZlVHlwZSwKICAgICAgICAgICAgZ2VvbWV0cnlUeXBlLAogICAgICAgICAgICBib3VuZGluZ1NwaGVyZSwKICAgICAgICAgICAgYm91bmRpbmdTcGhlcmVDViwKICAgICAgICAgICAgaW5kaWNlcywKICAgICAgICAgICAgYXR0cmlidXRlcywKICAgICAgICAgICAgb2Zmc2V0QXR0cmlidXRlCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUHJpbWl0aXZlUGlwZWxpbmUucGFja0NvbWJpbmVHZW9tZXRyeVBhcmFtZXRlcnMgPSBmdW5jdGlvbihwYXJhbWV0ZXJzLCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICAgICAgY29uc3QgY3JlYXRlR2VvbWV0cnlSZXN1bHRzID0gcGFyYW1ldGVycy5jcmVhdGVHZW9tZXRyeVJlc3VsdHM7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gY3JlYXRlR2VvbWV0cnlSZXN1bHRzLmxlbmd0aDsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goY3JlYXRlR2VvbWV0cnlSZXN1bHRzW2ldLnBhY2tlZERhdGEuYnVmZmVyKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGNyZWF0ZUdlb21ldHJ5UmVzdWx0czogcGFyYW1ldGVycy5jcmVhdGVHZW9tZXRyeVJlc3VsdHMsCiAgICAgICAgICBwYWNrZWRJbnN0YW5jZXM6IHBhY2tJbnN0YW5jZXNGb3JDb21iaW5lKAogICAgICAgICAgICBwYXJhbWV0ZXJzLmluc3RhbmNlcywKICAgICAgICAgICAgdHJhbnNmZXJhYmxlT2JqZWN0cwogICAgICAgICAgKSwKICAgICAgICAgIGVsbGlwc29pZDogcGFyYW1ldGVycy5lbGxpcHNvaWQsCiAgICAgICAgICBpc0dlb2dyYXBoaWM6IHBhcmFtZXRlcnMucHJvamVjdGlvbiBpbnN0YW5jZW9mIEdlb2dyYXBoaWNQcm9qZWN0aW9uX2RlZmF1bHQsCiAgICAgICAgICBlbGVtZW50SW5kZXhVaW50U3VwcG9ydGVkOiBwYXJhbWV0ZXJzLmVsZW1lbnRJbmRleFVpbnRTdXBwb3J0ZWQsCiAgICAgICAgICBzY2VuZTNET25seTogcGFyYW1ldGVycy5zY2VuZTNET25seSwKICAgICAgICAgIHZlcnRleENhY2hlT3B0aW1pemU6IHBhcmFtZXRlcnMudmVydGV4Q2FjaGVPcHRpbWl6ZSwKICAgICAgICAgIGNvbXByZXNzVmVydGljZXM6IHBhcmFtZXRlcnMuY29tcHJlc3NWZXJ0aWNlcywKICAgICAgICAgIG1vZGVsTWF0cml4OiBwYXJhbWV0ZXJzLm1vZGVsTWF0cml4LAogICAgICAgICAgY3JlYXRlUGlja09mZnNldHM6IHBhcmFtZXRlcnMuY3JlYXRlUGlja09mZnNldHMKICAgICAgICB9OwogICAgICB9OwogICAgICBQcmltaXRpdmVQaXBlbGluZS51bnBhY2tDb21iaW5lR2VvbWV0cnlQYXJhbWV0ZXJzID0gZnVuY3Rpb24ocGFja2VkUGFyYW1ldGVycykgewogICAgICAgIGNvbnN0IGluc3RhbmNlcyA9IHVucGFja0luc3RhbmNlc0ZvckNvbWJpbmUocGFja2VkUGFyYW1ldGVycy5wYWNrZWRJbnN0YW5jZXMpOwogICAgICAgIGNvbnN0IGNyZWF0ZUdlb21ldHJ5UmVzdWx0cyA9IHBhY2tlZFBhcmFtZXRlcnMuY3JlYXRlR2VvbWV0cnlSZXN1bHRzOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IGNyZWF0ZUdlb21ldHJ5UmVzdWx0cy5sZW5ndGg7CiAgICAgICAgbGV0IGluc3RhbmNlSW5kZXggPSAwOwogICAgICAgIGZvciAobGV0IHJlc3VsdEluZGV4ID0gMDsgcmVzdWx0SW5kZXggPCBsZW5ndGg7IHJlc3VsdEluZGV4KyspIHsKICAgICAgICAgIGNvbnN0IGdlb21ldHJpZXMgPSBQcmltaXRpdmVQaXBlbGluZS51bnBhY2tDcmVhdGVHZW9tZXRyeVJlc3VsdHMoCiAgICAgICAgICAgIGNyZWF0ZUdlb21ldHJ5UmVzdWx0c1tyZXN1bHRJbmRleF0KICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBnZW9tZXRyaWVzTGVuZ3RoID0gZ2VvbWV0cmllcy5sZW5ndGg7CiAgICAgICAgICBmb3IgKGxldCBnZW9tZXRyeUluZGV4ID0gMDsgZ2VvbWV0cnlJbmRleCA8IGdlb21ldHJpZXNMZW5ndGg7IGdlb21ldHJ5SW5kZXgrKykgewogICAgICAgICAgICBjb25zdCBnZW9tZXRyeSA9IGdlb21ldHJpZXNbZ2VvbWV0cnlJbmRleF07CiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gaW5zdGFuY2VzW2luc3RhbmNlSW5kZXhdOwogICAgICAgICAgICBpbnN0YW5jZS5nZW9tZXRyeSA9IGdlb21ldHJ5OwogICAgICAgICAgICArK2luc3RhbmNlSW5kZXg7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKHBhY2tlZFBhcmFtZXRlcnMuZWxsaXBzb2lkKTsKICAgICAgICBjb25zdCBwcm9qZWN0aW9uID0gcGFja2VkUGFyYW1ldGVycy5pc0dlb2dyYXBoaWMgPyBuZXcgR2VvZ3JhcGhpY1Byb2plY3Rpb25fZGVmYXVsdChlbGxpcHNvaWQpIDogbmV3IFdlYk1lcmNhdG9yUHJvamVjdGlvbl9kZWZhdWx0KGVsbGlwc29pZCk7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGluc3RhbmNlcywKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHByb2plY3Rpb24sCiAgICAgICAgICBlbGVtZW50SW5kZXhVaW50U3VwcG9ydGVkOiBwYWNrZWRQYXJhbWV0ZXJzLmVsZW1lbnRJbmRleFVpbnRTdXBwb3J0ZWQsCiAgICAgICAgICBzY2VuZTNET25seTogcGFja2VkUGFyYW1ldGVycy5zY2VuZTNET25seSwKICAgICAgICAgIHZlcnRleENhY2hlT3B0aW1pemU6IHBhY2tlZFBhcmFtZXRlcnMudmVydGV4Q2FjaGVPcHRpbWl6ZSwKICAgICAgICAgIGNvbXByZXNzVmVydGljZXM6IHBhY2tlZFBhcmFtZXRlcnMuY29tcHJlc3NWZXJ0aWNlcywKICAgICAgICAgIG1vZGVsTWF0cml4OiBNYXRyaXg0X2RlZmF1bHQuY2xvbmUocGFja2VkUGFyYW1ldGVycy5tb2RlbE1hdHJpeCksCiAgICAgICAgICBjcmVhdGVQaWNrT2Zmc2V0czogcGFja2VkUGFyYW1ldGVycy5jcmVhdGVQaWNrT2Zmc2V0cwogICAgICAgIH07CiAgICAgIH07CiAgICAgIFByaW1pdGl2ZVBpcGVsaW5lLnBhY2tDb21iaW5lR2VvbWV0cnlSZXN1bHRzID0gZnVuY3Rpb24ocmVzdWx0cywgdHJhbnNmZXJhYmxlT2JqZWN0cykgewogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQocmVzdWx0cy5nZW9tZXRyaWVzKSkgewogICAgICAgICAgdHJhbnNmZXJHZW9tZXRyaWVzKHJlc3VsdHMuZ2VvbWV0cmllcywgdHJhbnNmZXJhYmxlT2JqZWN0cyk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHBhY2tlZEJvdW5kaW5nU3BoZXJlcyA9IHBhY2tCb3VuZGluZ1NwaGVyZXMocmVzdWx0cy5ib3VuZGluZ1NwaGVyZXMpOwogICAgICAgIGNvbnN0IHBhY2tlZEJvdW5kaW5nU3BoZXJlc0NWID0gcGFja0JvdW5kaW5nU3BoZXJlcygKICAgICAgICAgIHJlc3VsdHMuYm91bmRpbmdTcGhlcmVzQ1YKICAgICAgICApOwogICAgICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaCgKICAgICAgICAgIHBhY2tlZEJvdW5kaW5nU3BoZXJlcy5idWZmZXIsCiAgICAgICAgICBwYWNrZWRCb3VuZGluZ1NwaGVyZXNDVi5idWZmZXIKICAgICAgICApOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICBnZW9tZXRyaWVzOiByZXN1bHRzLmdlb21ldHJpZXMsCiAgICAgICAgICBhdHRyaWJ1dGVMb2NhdGlvbnM6IHJlc3VsdHMuYXR0cmlidXRlTG9jYXRpb25zLAogICAgICAgICAgbW9kZWxNYXRyaXg6IHJlc3VsdHMubW9kZWxNYXRyaXgsCiAgICAgICAgICBwaWNrT2Zmc2V0czogcmVzdWx0cy5waWNrT2Zmc2V0cywKICAgICAgICAgIG9mZnNldEluc3RhbmNlRXh0ZW5kOiByZXN1bHRzLm9mZnNldEluc3RhbmNlRXh0ZW5kLAogICAgICAgICAgYm91bmRpbmdTcGhlcmVzOiBwYWNrZWRCb3VuZGluZ1NwaGVyZXMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZXNDVjogcGFja2VkQm91bmRpbmdTcGhlcmVzQ1YKICAgICAgICB9OwogICAgICB9OwogICAgICBQcmltaXRpdmVQaXBlbGluZS51bnBhY2tDb21iaW5lR2VvbWV0cnlSZXN1bHRzID0gZnVuY3Rpb24ocGFja2VkUmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGdlb21ldHJpZXM6IHBhY2tlZFJlc3VsdC5nZW9tZXRyaWVzLAogICAgICAgICAgYXR0cmlidXRlTG9jYXRpb25zOiBwYWNrZWRSZXN1bHQuYXR0cmlidXRlTG9jYXRpb25zLAogICAgICAgICAgbW9kZWxNYXRyaXg6IHBhY2tlZFJlc3VsdC5tb2RlbE1hdHJpeCwKICAgICAgICAgIHBpY2tPZmZzZXRzOiBwYWNrZWRSZXN1bHQucGlja09mZnNldHMsCiAgICAgICAgICBvZmZzZXRJbnN0YW5jZUV4dGVuZDogcGFja2VkUmVzdWx0Lm9mZnNldEluc3RhbmNlRXh0ZW5kLAogICAgICAgICAgYm91bmRpbmdTcGhlcmVzOiB1bnBhY2tCb3VuZGluZ1NwaGVyZXMocGFja2VkUmVzdWx0LmJvdW5kaW5nU3BoZXJlcyksCiAgICAgICAgICBib3VuZGluZ1NwaGVyZXNDVjogdW5wYWNrQm91bmRpbmdTcGhlcmVzKHBhY2tlZFJlc3VsdC5ib3VuZGluZ1NwaGVyZXNDVikKICAgICAgICB9OwogICAgICB9OwogICAgICBQcmltaXRpdmVQaXBlbGluZV9kZWZhdWx0ID0gUHJpbWl0aXZlUGlwZWxpbmU7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9mb3JtYXRFcnJvci5qcwogIGZ1bmN0aW9uIGZvcm1hdEVycm9yKG9iamVjdCkgewogICAgbGV0IHJlc3VsdDsKICAgIGNvbnN0IG5hbWUgPSBvYmplY3QubmFtZTsKICAgIGNvbnN0IG1lc3NhZ2UgPSBvYmplY3QubWVzc2FnZTsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobmFtZSkgJiYgZGVmaW5lZF9kZWZhdWx0KG1lc3NhZ2UpKSB7CiAgICAgIHJlc3VsdCA9IGAke25hbWV9OiAke21lc3NhZ2V9YDsKICAgIH0gZWxzZSB7CiAgICAgIHJlc3VsdCA9IG9iamVjdC50b1N0cmluZygpOwogICAgfQogICAgY29uc3Qgc3RhY2sgPSBvYmplY3Quc3RhY2s7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHN0YWNrKSkgewogICAgICByZXN1bHQgKz0gYAoke3N0YWNrfWA7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICB2YXIgZm9ybWF0RXJyb3JfZGVmYXVsdDsKICB2YXIgaW5pdF9mb3JtYXRFcnJvciA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvZm9ybWF0RXJyb3IuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgZm9ybWF0RXJyb3JfZGVmYXVsdCA9IGZvcm1hdEVycm9yOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlci5qcwogIHZhciBjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyX2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyX2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXJfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXIod29ya2VyRnVuY3Rpb24pIHsKICAgIGFzeW5jIGZ1bmN0aW9uIG9uTWVzc2FnZUhhbmRsZXIoeyBkYXRhIH0pIHsKICAgICAgY29uc3QgdHJhbnNmZXJhYmxlT2JqZWN0cyA9IFtdOwogICAgICBjb25zdCByZXNwb25zZU1lc3NhZ2UgPSB7CiAgICAgICAgaWQ6IGRhdGEuaWQsCiAgICAgICAgcmVzdWx0OiB2b2lkIDAsCiAgICAgICAgZXJyb3I6IHZvaWQgMAogICAgICB9OwogICAgICBzZWxmLkNFU0lVTV9CQVNFX1VSTCA9IGRhdGEuYmFzZVVybDsKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB3b3JrZXJGdW5jdGlvbihkYXRhLnBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpOwogICAgICAgIHJlc3BvbnNlTWVzc2FnZS5yZXN1bHQgPSByZXN1bHQ7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHsKICAgICAgICAgIHJlc3BvbnNlTWVzc2FnZS5lcnJvciA9IHsKICAgICAgICAgICAgbmFtZTogZXJyb3IubmFtZSwKICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSwKICAgICAgICAgICAgc3RhY2s6IGVycm9yLnN0YWNrCiAgICAgICAgICB9OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXNwb25zZU1lc3NhZ2UuZXJyb3IgPSBlcnJvcjsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKCFkYXRhLmNhblRyYW5zZmVyQXJyYXlCdWZmZXIpIHsKICAgICAgICB0cmFuc2ZlcmFibGVPYmplY3RzLmxlbmd0aCA9IDA7CiAgICAgIH0KICAgICAgdHJ5IHsKICAgICAgICBwb3N0TWVzc2FnZShyZXNwb25zZU1lc3NhZ2UsIHRyYW5zZmVyYWJsZU9iamVjdHMpOwogICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIHJlc3BvbnNlTWVzc2FnZS5yZXN1bHQgPSB2b2lkIDA7CiAgICAgICAgcmVzcG9uc2VNZXNzYWdlLmVycm9yID0gYHBvc3RNZXNzYWdlIGZhaWxlZCB3aXRoIGVycm9yOiAke2Zvcm1hdEVycm9yX2RlZmF1bHQoCiAgICAgICAgICBlcnJvcgogICAgICAgICl9CiAgd2l0aCByZXNwb25zZU1lc3NhZ2U6ICR7SlNPTi5zdHJpbmdpZnkocmVzcG9uc2VNZXNzYWdlKX1gOwogICAgICAgIHBvc3RNZXNzYWdlKHJlc3BvbnNlTWVzc2FnZSk7CiAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIG9uTWVzc2FnZUVycm9ySGFuZGxlcihldmVudCkgewogICAgICBwb3N0TWVzc2FnZSh7CiAgICAgICAgaWQ6IGV2ZW50LmRhdGE/LmlkLAogICAgICAgIGVycm9yOiBgcG9zdE1lc3NhZ2UgZmFpbGVkIHdpdGggZXJyb3I6ICR7SlNPTi5zdHJpbmdpZnkoZXZlbnQpfWAKICAgICAgfSk7CiAgICB9CiAgICBzZWxmLm9ubWVzc2FnZSA9IG9uTWVzc2FnZUhhbmRsZXI7CiAgICBzZWxmLm9ubWVzc2FnZWVycm9yID0gb25NZXNzYWdlRXJyb3JIYW5kbGVyOwogICAgcmV0dXJuIHNlbGY7CiAgfQogIHZhciBjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyX2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlVGFza1Byb2Nlc3NvcldvcmtlciA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlci5qcyIoKSB7CiAgICAgIGluaXRfZm9ybWF0RXJyb3IoKTsKICAgICAgY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3NvcldvcmtlcjsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NvbWJpbmVHZW9tZXRyeS5qcwogIHZhciBjb21iaW5lR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNvbWJpbmVHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjb21iaW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNvbWJpbmVHZW9tZXRyeShwYWNrZWRQYXJhbWV0ZXJzLCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICBjb25zdCBwYXJhbWV0ZXJzID0gUHJpbWl0aXZlUGlwZWxpbmVfZGVmYXVsdC51bnBhY2tDb21iaW5lR2VvbWV0cnlQYXJhbWV0ZXJzKAogICAgICBwYWNrZWRQYXJhbWV0ZXJzCiAgICApOwogICAgY29uc3QgcmVzdWx0cyA9IFByaW1pdGl2ZVBpcGVsaW5lX2RlZmF1bHQuY29tYmluZUdlb21ldHJ5KHBhcmFtZXRlcnMpOwogICAgcmV0dXJuIFByaW1pdGl2ZVBpcGVsaW5lX2RlZmF1bHQucGFja0NvbWJpbmVHZW9tZXRyeVJlc3VsdHMoCiAgICAgIHJlc3VsdHMsCiAgICAgIHRyYW5zZmVyYWJsZU9iamVjdHMKICAgICk7CiAgfQogIHZhciBjb21iaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jb21iaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NvbWJpbmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfUHJpbWl0aXZlUGlwZWxpbmUoKTsKICAgICAgaW5pdF9jcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyKCk7CiAgICAgIGNvbWJpbmVHZW9tZXRyeV9kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0KGNvbWJpbmVHZW9tZXRyeSk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9HZW9tZXRyeU9mZnNldEF0dHJpYnV0ZS5qcwogIHZhciBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZSwgR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdDsKICB2YXIgaW5pdF9HZW9tZXRyeU9mZnNldEF0dHJpYnV0ZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGUuanMiKCkgewogICAgICBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZSA9IHsKICAgICAgICBOT05FOiAwLAogICAgICAgIFRPUDogMSwKICAgICAgICBBTEw6IDIKICAgICAgfTsKICAgICAgR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdCA9IE9iamVjdC5mcmVlemUoR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGUpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVmVydGV4Rm9ybWF0LmpzCiAgZnVuY3Rpb24gVmVydGV4Rm9ybWF0KG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgdGhpcy5wb3NpdGlvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMucG9zaXRpb24sIGZhbHNlKTsKICAgIHRoaXMubm9ybWFsID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5ub3JtYWwsIGZhbHNlKTsKICAgIHRoaXMuc3QgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnN0LCBmYWxzZSk7CiAgICB0aGlzLmJpdGFuZ2VudCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuYml0YW5nZW50LCBmYWxzZSk7CiAgICB0aGlzLnRhbmdlbnQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnRhbmdlbnQsIGZhbHNlKTsKICAgIHRoaXMuY29sb3IgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmNvbG9yLCBmYWxzZSk7CiAgfQogIHZhciBWZXJ0ZXhGb3JtYXRfZGVmYXVsdDsKICB2YXIgaW5pdF9WZXJ0ZXhGb3JtYXQgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1ZlcnRleEZvcm1hdC5qcyIoKSB7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIFZlcnRleEZvcm1hdC5QT1NJVElPTl9PTkxZID0gT2JqZWN0LmZyZWV6ZSgKICAgICAgICBuZXcgVmVydGV4Rm9ybWF0KHsKICAgICAgICAgIHBvc2l0aW9uOiB0cnVlCiAgICAgICAgfSkKICAgICAgKTsKICAgICAgVmVydGV4Rm9ybWF0LlBPU0lUSU9OX0FORF9OT1JNQUwgPSBPYmplY3QuZnJlZXplKAogICAgICAgIG5ldyBWZXJ0ZXhGb3JtYXQoewogICAgICAgICAgcG9zaXRpb246IHRydWUsCiAgICAgICAgICBub3JtYWw6IHRydWUKICAgICAgICB9KQogICAgICApOwogICAgICBWZXJ0ZXhGb3JtYXQuUE9TSVRJT05fTk9STUFMX0FORF9TVCA9IE9iamVjdC5mcmVlemUoCiAgICAgICAgbmV3IFZlcnRleEZvcm1hdCh7CiAgICAgICAgICBwb3NpdGlvbjogdHJ1ZSwKICAgICAgICAgIG5vcm1hbDogdHJ1ZSwKICAgICAgICAgIHN0OiB0cnVlCiAgICAgICAgfSkKICAgICAgKTsKICAgICAgVmVydGV4Rm9ybWF0LlBPU0lUSU9OX0FORF9TVCA9IE9iamVjdC5mcmVlemUoCiAgICAgICAgbmV3IFZlcnRleEZvcm1hdCh7CiAgICAgICAgICBwb3NpdGlvbjogdHJ1ZSwKICAgICAgICAgIHN0OiB0cnVlCiAgICAgICAgfSkKICAgICAgKTsKICAgICAgVmVydGV4Rm9ybWF0LlBPU0lUSU9OX0FORF9DT0xPUiA9IE9iamVjdC5mcmVlemUoCiAgICAgICAgbmV3IFZlcnRleEZvcm1hdCh7CiAgICAgICAgICBwb3NpdGlvbjogdHJ1ZSwKICAgICAgICAgIGNvbG9yOiB0cnVlCiAgICAgICAgfSkKICAgICAgKTsKICAgICAgVmVydGV4Rm9ybWF0LkFMTCA9IE9iamVjdC5mcmVlemUoCiAgICAgICAgbmV3IFZlcnRleEZvcm1hdCh7CiAgICAgICAgICBwb3NpdGlvbjogdHJ1ZSwKICAgICAgICAgIG5vcm1hbDogdHJ1ZSwKICAgICAgICAgIHN0OiB0cnVlLAogICAgICAgICAgdGFuZ2VudDogdHJ1ZSwKICAgICAgICAgIGJpdGFuZ2VudDogdHJ1ZQogICAgICAgIH0pCiAgICAgICk7CiAgICAgIFZlcnRleEZvcm1hdC5ERUZBVUxUID0gVmVydGV4Rm9ybWF0LlBPU0lUSU9OX05PUk1BTF9BTkRfU1Q7CiAgICAgIFZlcnRleEZvcm1hdC5wYWNrZWRMZW5ndGggPSA2OwogICAgICBWZXJ0ZXhGb3JtYXQucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHZhbHVlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInZhbHVlIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUucG9zaXRpb24gPyAxIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUubm9ybWFsID8gMSA6IDA7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLnN0ID8gMSA6IDA7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLnRhbmdlbnQgPyAxIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuYml0YW5nZW50ID8gMSA6IDA7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSB2YWx1ZS5jb2xvciA/IDEgOiAwOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgVmVydGV4Rm9ybWF0LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhcnJheSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IFZlcnRleEZvcm1hdCgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQucG9zaXRpb24gPSBhcnJheVtzdGFydGluZ0luZGV4KytdID09PSAxOwogICAgICAgIHJlc3VsdC5ub3JtYWwgPSBhcnJheVtzdGFydGluZ0luZGV4KytdID09PSAxOwogICAgICAgIHJlc3VsdC5zdCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPT09IDE7CiAgICAgICAgcmVzdWx0LnRhbmdlbnQgPSBhcnJheVtzdGFydGluZ0luZGV4KytdID09PSAxOwogICAgICAgIHJlc3VsdC5iaXRhbmdlbnQgPSBhcnJheVtzdGFydGluZ0luZGV4KytdID09PSAxOwogICAgICAgIHJlc3VsdC5jb2xvciA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdID09PSAxOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFZlcnRleEZvcm1hdC5jbG9uZSA9IGZ1bmN0aW9uKHZlcnRleEZvcm1hdCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodmVydGV4Rm9ybWF0KSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IFZlcnRleEZvcm1hdCgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQucG9zaXRpb24gPSB2ZXJ0ZXhGb3JtYXQucG9zaXRpb247CiAgICAgICAgcmVzdWx0Lm5vcm1hbCA9IHZlcnRleEZvcm1hdC5ub3JtYWw7CiAgICAgICAgcmVzdWx0LnN0ID0gdmVydGV4Rm9ybWF0LnN0OwogICAgICAgIHJlc3VsdC50YW5nZW50ID0gdmVydGV4Rm9ybWF0LnRhbmdlbnQ7CiAgICAgICAgcmVzdWx0LmJpdGFuZ2VudCA9IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQ7CiAgICAgICAgcmVzdWx0LmNvbG9yID0gdmVydGV4Rm9ybWF0LmNvbG9yOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFZlcnRleEZvcm1hdF9kZWZhdWx0ID0gVmVydGV4Rm9ybWF0OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQm94R2VvbWV0cnkuanMKICBmdW5jdGlvbiBCb3hHZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IG1pbjMgPSBvcHRpb25zLm1pbmltdW07CiAgICBjb25zdCBtYXgzID0gb3B0aW9ucy5tYXhpbXVtOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtaW4iLCBtaW4zKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF4IiwgbWF4Myk7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlKSAmJiBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5UT1ApIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIkdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlLlRPUCBpcyBub3QgYSBzdXBwb3J0ZWQgb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUgZm9yIHRoaXMgZ2VvbWV0cnkuIgogICAgICApOwogICAgfQogICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy52ZXJ0ZXhGb3JtYXQsIFZlcnRleEZvcm1hdF9kZWZhdWx0LkRFRkFVTFQpOwogICAgdGhpcy5fbWluaW11bSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShtaW4zKTsKICAgIHRoaXMuX21heGltdW0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUobWF4Myk7CiAgICB0aGlzLl92ZXJ0ZXhGb3JtYXQgPSB2ZXJ0ZXhGb3JtYXQ7CiAgICB0aGlzLl9vZmZzZXRBdHRyaWJ1dGUgPSBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlQm94R2VvbWV0cnkiOwogIH0KICB2YXIgZGlmZlNjcmF0Y2gsIHNjcmF0Y2hNaW4sIHNjcmF0Y2hNYXgsIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQsIHNjcmF0Y2hPcHRpb25zLCB1bml0Qm94R2VvbWV0cnksIEJveEdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfQm94R2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0JveEdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X0dlb21ldHJ5T2Zmc2V0QXR0cmlidXRlKCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBpbml0X1ZlcnRleEZvcm1hdCgpOwogICAgICBkaWZmU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgQm94R2VvbWV0cnkuZnJvbURpbWVuc2lvbnMgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICAgICAgY29uc3QgZGltZW5zaW9ucyA9IG9wdGlvbnMuZGltZW5zaW9uczsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImRpbWVuc2lvbnMiLCBkaW1lbnNpb25zKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiZGltZW5zaW9ucy54IiwgZGltZW5zaW9ucy54LCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiZGltZW5zaW9ucy55IiwgZGltZW5zaW9ucy55LCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiZGltZW5zaW9ucy56IiwgZGltZW5zaW9ucy56LCAwKTsKICAgICAgICBjb25zdCBjb3JuZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihkaW1lbnNpb25zLCAwLjUsIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSk7CiAgICAgICAgcmV0dXJuIG5ldyBCb3hHZW9tZXRyeSh7CiAgICAgICAgICBtaW5pbXVtOiBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGNvcm5lciwgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpKSwKICAgICAgICAgIG1heGltdW06IGNvcm5lciwKICAgICAgICAgIHZlcnRleEZvcm1hdDogb3B0aW9ucy52ZXJ0ZXhGb3JtYXQsCiAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIEJveEdlb21ldHJ5LmZyb21BeGlzQWxpZ25lZEJvdW5kaW5nQm94ID0gZnVuY3Rpb24oYm91bmRpbmdCb3gpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImJvdW5kaW5nQm94IiwgYm91bmRpbmdCb3gpOwogICAgICAgIHJldHVybiBuZXcgQm94R2VvbWV0cnkoewogICAgICAgICAgbWluaW11bTogYm91bmRpbmdCb3gubWluaW11bSwKICAgICAgICAgIG1heGltdW06IGJvdW5kaW5nQm94Lm1heGltdW0KICAgICAgICB9KTsKICAgICAgfTsKICAgICAgQm94R2VvbWV0cnkucGFja2VkTGVuZ3RoID0gMiAqIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyAxOwogICAgICBCb3hHZW9tZXRyeS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayh2YWx1ZS5fbWluaW11bSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKAogICAgICAgICAgdmFsdWUuX21heGltdW0sCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXggKyBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoCiAgICAgICAgKTsKICAgICAgICBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrKAogICAgICAgICAgdmFsdWUuX3ZlcnRleEZvcm1hdCwKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCArIDIgKiBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoCiAgICAgICAgKTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4ICsgMiAqIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGhdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQodmFsdWUuX29mZnNldEF0dHJpYnV0ZSwgLTEpOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaE1pbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE1heCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdCA9IG5ldyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoT3B0aW9ucyA9IHsKICAgICAgICBtaW5pbXVtOiBzY3JhdGNoTWluLAogICAgICAgIG1heGltdW06IHNjcmF0Y2hNYXgsCiAgICAgICAgdmVydGV4Rm9ybWF0OiBzY3JhdGNoVmVydGV4Rm9ybWF0LAogICAgICAgIG9mZnNldEF0dHJpYnV0ZTogdm9pZCAwCiAgICAgIH07CiAgICAgIEJveEdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCBtaW4zID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgc2NyYXRjaE1pbik7CiAgICAgICAgY29uc3QgbWF4MyA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXggKyBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoLAogICAgICAgICAgc2NyYXRjaE1heAogICAgICAgICk7CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4ICsgMiAqIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgsCiAgICAgICAgICBzY3JhdGNoVmVydGV4Rm9ybWF0CiAgICAgICAgKTsKICAgICAgICBjb25zdCBvZmZzZXRBdHRyaWJ1dGUgPSBhcnJheVtzdGFydGluZ0luZGV4ICsgMiAqIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGhdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zLm9mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZSA9PT0gLTEgPyB2b2lkIDAgOiBvZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgICByZXR1cm4gbmV3IEJveEdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Ll9taW5pbXVtID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG1pbjMsIHJlc3VsdC5fbWluaW11bSk7CiAgICAgICAgcmVzdWx0Ll9tYXhpbXVtID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG1heDMsIHJlc3VsdC5fbWF4aW11bSk7CiAgICAgICAgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSh2ZXJ0ZXhGb3JtYXQsIHJlc3VsdC5fdmVydGV4Rm9ybWF0KTsKICAgICAgICByZXN1bHQuX29mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZSA9PT0gLTEgPyB2b2lkIDAgOiBvZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQm94R2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihib3hHZW9tZXRyeSkgewogICAgICAgIGNvbnN0IG1pbjMgPSBib3hHZW9tZXRyeS5fbWluaW11bTsKICAgICAgICBjb25zdCBtYXgzID0gYm94R2VvbWV0cnkuX21heGltdW07CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gYm94R2VvbWV0cnkuX3ZlcnRleEZvcm1hdDsKICAgICAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFscyhtaW4zLCBtYXgzKSkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KCk7CiAgICAgICAgbGV0IGluZGljZXM7CiAgICAgICAgbGV0IHBvc2l0aW9uczsKICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnBvc2l0aW9uICYmICh2ZXJ0ZXhGb3JtYXQuc3QgfHwgdmVydGV4Rm9ybWF0Lm5vcm1hbCB8fCB2ZXJ0ZXhGb3JtYXQudGFuZ2VudCB8fCB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSkgewogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5wb3NpdGlvbikgewogICAgICAgICAgICBwb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KDYgKiA0ICogMyk7CiAgICAgICAgICAgIHBvc2l0aW9uc1swXSA9IG1pbjMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzFdID0gbWluMy55OwogICAgICAgICAgICBwb3NpdGlvbnNbMl0gPSBtYXgzLno7CiAgICAgICAgICAgIHBvc2l0aW9uc1szXSA9IG1heDMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzRdID0gbWluMy55OwogICAgICAgICAgICBwb3NpdGlvbnNbNV0gPSBtYXgzLno7CiAgICAgICAgICAgIHBvc2l0aW9uc1s2XSA9IG1heDMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzddID0gbWF4My55OwogICAgICAgICAgICBwb3NpdGlvbnNbOF0gPSBtYXgzLno7CiAgICAgICAgICAgIHBvc2l0aW9uc1s5XSA9IG1pbjMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzEwXSA9IG1heDMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzExXSA9IG1heDMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzEyXSA9IG1pbjMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzEzXSA9IG1pbjMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzE0XSA9IG1pbjMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzE1XSA9IG1heDMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzE2XSA9IG1pbjMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzE3XSA9IG1pbjMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzE4XSA9IG1heDMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzE5XSA9IG1heDMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzIwXSA9IG1pbjMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzIxXSA9IG1pbjMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzIyXSA9IG1heDMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzIzXSA9IG1pbjMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzI0XSA9IG1heDMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzI1XSA9IG1pbjMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzI2XSA9IG1pbjMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzI3XSA9IG1heDMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzI4XSA9IG1heDMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzI5XSA9IG1pbjMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzMwXSA9IG1heDMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzMxXSA9IG1heDMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzMyXSA9IG1heDMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzMzXSA9IG1heDMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzM0XSA9IG1pbjMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzM1XSA9IG1heDMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzM2XSA9IG1pbjMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzM3XSA9IG1pbjMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzM4XSA9IG1pbjMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzM5XSA9IG1pbjMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzQwXSA9IG1heDMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzQxXSA9IG1pbjMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzQyXSA9IG1pbjMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzQzXSA9IG1heDMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzQ0XSA9IG1heDMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzQ1XSA9IG1pbjMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzQ2XSA9IG1pbjMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzQ3XSA9IG1heDMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzQ4XSA9IG1pbjMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzQ5XSA9IG1heDMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzUwXSA9IG1pbjMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzUxXSA9IG1heDMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzUyXSA9IG1heDMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzUzXSA9IG1pbjMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzU0XSA9IG1heDMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzU1XSA9IG1heDMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzU2XSA9IG1heDMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzU3XSA9IG1pbjMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzU4XSA9IG1heDMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzU5XSA9IG1heDMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzYwXSA9IG1pbjMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzYxXSA9IG1pbjMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzYyXSA9IG1pbjMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzYzXSA9IG1heDMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzY0XSA9IG1pbjMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzY1XSA9IG1pbjMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzY2XSA9IG1heDMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzY3XSA9IG1pbjMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzY4XSA9IG1heDMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzY5XSA9IG1pbjMueDsKICAgICAgICAgICAgcG9zaXRpb25zWzcwXSA9IG1pbjMueTsKICAgICAgICAgICAgcG9zaXRpb25zWzcxXSA9IG1heDMuejsKICAgICAgICAgICAgYXR0cmlidXRlcy5wb3NpdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgICB2YWx1ZXM6IHBvc2l0aW9ucwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgICAgICAgIGNvbnN0IG5vcm1hbHMgPSBuZXcgRmxvYXQzMkFycmF5KDYgKiA0ICogMyk7CiAgICAgICAgICAgIG5vcm1hbHNbMF0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzFdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1syXSA9IDE7CiAgICAgICAgICAgIG5vcm1hbHNbM10gPSAwOwogICAgICAgICAgICBub3JtYWxzWzRdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1s1XSA9IDE7CiAgICAgICAgICAgIG5vcm1hbHNbNl0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzddID0gMDsKICAgICAgICAgICAgbm9ybWFsc1s4XSA9IDE7CiAgICAgICAgICAgIG5vcm1hbHNbOV0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzEwXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMTFdID0gMTsKICAgICAgICAgICAgbm9ybWFsc1sxMl0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzEzXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMTRdID0gLTE7CiAgICAgICAgICAgIG5vcm1hbHNbMTVdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1sxNl0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzE3XSA9IC0xOwogICAgICAgICAgICBub3JtYWxzWzE4XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMTldID0gMDsKICAgICAgICAgICAgbm9ybWFsc1syMF0gPSAtMTsKICAgICAgICAgICAgbm9ybWFsc1syMV0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzIyXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMjNdID0gLTE7CiAgICAgICAgICAgIG5vcm1hbHNbMjRdID0gMTsKICAgICAgICAgICAgbm9ybWFsc1syNV0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzI2XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMjddID0gMTsKICAgICAgICAgICAgbm9ybWFsc1syOF0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzI5XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMzBdID0gMTsKICAgICAgICAgICAgbm9ybWFsc1szMV0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzMyXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMzNdID0gMTsKICAgICAgICAgICAgbm9ybWFsc1szNF0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzM1XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMzZdID0gLTE7CiAgICAgICAgICAgIG5vcm1hbHNbMzddID0gMDsKICAgICAgICAgICAgbm9ybWFsc1szOF0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzM5XSA9IC0xOwogICAgICAgICAgICBub3JtYWxzWzQwXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNDFdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1s0Ml0gPSAtMTsKICAgICAgICAgICAgbm9ybWFsc1s0M10gPSAwOwogICAgICAgICAgICBub3JtYWxzWzQ0XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNDVdID0gLTE7CiAgICAgICAgICAgIG5vcm1hbHNbNDZdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1s0N10gPSAwOwogICAgICAgICAgICBub3JtYWxzWzQ4XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNDldID0gMTsKICAgICAgICAgICAgbm9ybWFsc1s1MF0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzUxXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNTJdID0gMTsKICAgICAgICAgICAgbm9ybWFsc1s1M10gPSAwOwogICAgICAgICAgICBub3JtYWxzWzU0XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNTVdID0gMTsKICAgICAgICAgICAgbm9ybWFsc1s1Nl0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzU3XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNThdID0gMTsKICAgICAgICAgICAgbm9ybWFsc1s1OV0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzYwXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNjFdID0gLTE7CiAgICAgICAgICAgIG5vcm1hbHNbNjJdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1s2M10gPSAwOwogICAgICAgICAgICBub3JtYWxzWzY0XSA9IC0xOwogICAgICAgICAgICBub3JtYWxzWzY1XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNjZdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1s2N10gPSAtMTsKICAgICAgICAgICAgbm9ybWFsc1s2OF0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzY5XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNzBdID0gLTE7CiAgICAgICAgICAgIG5vcm1hbHNbNzFdID0gMDsKICAgICAgICAgICAgYXR0cmlidXRlcy5ub3JtYWwgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgICB2YWx1ZXM6IG5vcm1hbHMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgICAgICAgIGNvbnN0IHRleENvb3JkcyA9IG5ldyBGbG9hdDMyQXJyYXkoNiAqIDQgKiAyKTsKICAgICAgICAgICAgdGV4Q29vcmRzWzBdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzFdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzJdID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzNdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzRdID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzVdID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzZdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzddID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzhdID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzldID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzEwXSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1sxMV0gPSAwOwogICAgICAgICAgICB0ZXhDb29yZHNbMTJdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzEzXSA9IDE7CiAgICAgICAgICAgIHRleENvb3Jkc1sxNF0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbMTVdID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzE2XSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1sxN10gPSAwOwogICAgICAgICAgICB0ZXhDb29yZHNbMThdID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzE5XSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1syMF0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbMjFdID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzIyXSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1syM10gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbMjRdID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzI1XSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1syNl0gPSAwOwogICAgICAgICAgICB0ZXhDb29yZHNbMjddID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzI4XSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1syOV0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbMzBdID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzMxXSA9IDE7CiAgICAgICAgICAgIHRleENvb3Jkc1szMl0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbMzNdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzM0XSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1szNV0gPSAwOwogICAgICAgICAgICB0ZXhDb29yZHNbMzZdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzM3XSA9IDE7CiAgICAgICAgICAgIHRleENvb3Jkc1szOF0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbMzldID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzQwXSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1s0MV0gPSAwOwogICAgICAgICAgICB0ZXhDb29yZHNbNDJdID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzQzXSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1s0NF0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbNDVdID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzQ2XSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1s0N10gPSAxOwogICAgICAgICAgICBhdHRyaWJ1dGVzLnN0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDIsCiAgICAgICAgICAgICAgdmFsdWVzOiB0ZXhDb29yZHMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgICAgICAgY29uc3QgdGFuZ2VudHMgPSBuZXcgRmxvYXQzMkFycmF5KDYgKiA0ICogMyk7CiAgICAgICAgICAgIHRhbmdlbnRzWzBdID0gMTsKICAgICAgICAgICAgdGFuZ2VudHNbMV0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1syXSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzNdID0gMTsKICAgICAgICAgICAgdGFuZ2VudHNbNF0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s1XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzZdID0gMTsKICAgICAgICAgICAgdGFuZ2VudHNbN10gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s4XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzldID0gMTsKICAgICAgICAgICAgdGFuZ2VudHNbMTBdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMTFdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMTJdID0gLTE7CiAgICAgICAgICAgIHRhbmdlbnRzWzEzXSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzE0XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzE1XSA9IC0xOwogICAgICAgICAgICB0YW5nZW50c1sxNl0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1sxN10gPSAwOwogICAgICAgICAgICB0YW5nZW50c1sxOF0gPSAtMTsKICAgICAgICAgICAgdGFuZ2VudHNbMTldID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMjBdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMjFdID0gLTE7CiAgICAgICAgICAgIHRhbmdlbnRzWzIyXSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzIzXSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzI0XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzI1XSA9IDE7CiAgICAgICAgICAgIHRhbmdlbnRzWzI2XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzI3XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzI4XSA9IDE7CiAgICAgICAgICAgIHRhbmdlbnRzWzI5XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzMwXSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzMxXSA9IDE7CiAgICAgICAgICAgIHRhbmdlbnRzWzMyXSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzMzXSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzM0XSA9IDE7CiAgICAgICAgICAgIHRhbmdlbnRzWzM1XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzM2XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzM3XSA9IC0xOwogICAgICAgICAgICB0YW5nZW50c1szOF0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1szOV0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s0MF0gPSAtMTsKICAgICAgICAgICAgdGFuZ2VudHNbNDFdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNDJdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNDNdID0gLTE7CiAgICAgICAgICAgIHRhbmdlbnRzWzQ0XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzQ1XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzQ2XSA9IC0xOwogICAgICAgICAgICB0YW5nZW50c1s0N10gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s0OF0gPSAtMTsKICAgICAgICAgICAgdGFuZ2VudHNbNDldID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNTBdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNTFdID0gLTE7CiAgICAgICAgICAgIHRhbmdlbnRzWzUyXSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzUzXSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzU0XSA9IC0xOwogICAgICAgICAgICB0YW5nZW50c1s1NV0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s1Nl0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s1N10gPSAtMTsKICAgICAgICAgICAgdGFuZ2VudHNbNThdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNTldID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNjBdID0gMTsKICAgICAgICAgICAgdGFuZ2VudHNbNjFdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNjJdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNjNdID0gMTsKICAgICAgICAgICAgdGFuZ2VudHNbNjRdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNjVdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNjZdID0gMTsKICAgICAgICAgICAgdGFuZ2VudHNbNjddID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNjhdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNjldID0gMTsKICAgICAgICAgICAgdGFuZ2VudHNbNzBdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNzFdID0gMDsKICAgICAgICAgICAgYXR0cmlidXRlcy50YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICAgICAgdmFsdWVzOiB0YW5nZW50cwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgICAgIGNvbnN0IGJpdGFuZ2VudHMgPSBuZXcgRmxvYXQzMkFycmF5KDYgKiA0ICogMyk7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMF0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzFdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1syXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbM10gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzRdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1s1XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNl0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzddID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1s4XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbOV0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzEwXSA9IDE7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMTFdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1sxMl0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzEzXSA9IDE7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMTRdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1sxNV0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzE2XSA9IDE7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMTddID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1sxOF0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzE5XSA9IDE7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMjBdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1syMV0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzIyXSA9IDE7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMjNdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1syNF0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzI1XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMjZdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1syN10gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzI4XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMjldID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1szMF0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzMxXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMzJdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1szM10gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzM0XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMzVdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1szNl0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzM3XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMzhdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1szOV0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzQwXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNDFdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1s0Ml0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzQzXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNDRdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1s0NV0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzQ2XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNDddID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1s0OF0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzQ5XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNTBdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1s1MV0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzUyXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNTNdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1s1NF0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzU1XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNTZdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1s1N10gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzU4XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNTldID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1s2MF0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzYxXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNjJdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1s2M10gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzY0XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNjVdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1s2Nl0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzY3XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNjhdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1s2OV0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzcwXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNzFdID0gMTsKICAgICAgICAgICAgYXR0cmlidXRlcy5iaXRhbmdlbnQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgICB2YWx1ZXM6IGJpdGFuZ2VudHMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBpbmRpY2VzID0gbmV3IFVpbnQxNkFycmF5KDYgKiAyICogMyk7CiAgICAgICAgICBpbmRpY2VzWzBdID0gMDsKICAgICAgICAgIGluZGljZXNbMV0gPSAxOwogICAgICAgICAgaW5kaWNlc1syXSA9IDI7CiAgICAgICAgICBpbmRpY2VzWzNdID0gMDsKICAgICAgICAgIGluZGljZXNbNF0gPSAyOwogICAgICAgICAgaW5kaWNlc1s1XSA9IDM7CiAgICAgICAgICBpbmRpY2VzWzZdID0gNCArIDI7CiAgICAgICAgICBpbmRpY2VzWzddID0gNCArIDE7CiAgICAgICAgICBpbmRpY2VzWzhdID0gNCArIDA7CiAgICAgICAgICBpbmRpY2VzWzldID0gNCArIDM7CiAgICAgICAgICBpbmRpY2VzWzEwXSA9IDQgKyAyOwogICAgICAgICAgaW5kaWNlc1sxMV0gPSA0ICsgMDsKICAgICAgICAgIGluZGljZXNbMTJdID0gOCArIDA7CiAgICAgICAgICBpbmRpY2VzWzEzXSA9IDggKyAxOwogICAgICAgICAgaW5kaWNlc1sxNF0gPSA4ICsgMjsKICAgICAgICAgIGluZGljZXNbMTVdID0gOCArIDA7CiAgICAgICAgICBpbmRpY2VzWzE2XSA9IDggKyAyOwogICAgICAgICAgaW5kaWNlc1sxN10gPSA4ICsgMzsKICAgICAgICAgIGluZGljZXNbMThdID0gMTIgKyAyOwogICAgICAgICAgaW5kaWNlc1sxOV0gPSAxMiArIDE7CiAgICAgICAgICBpbmRpY2VzWzIwXSA9IDEyICsgMDsKICAgICAgICAgIGluZGljZXNbMjFdID0gMTIgKyAzOwogICAgICAgICAgaW5kaWNlc1syMl0gPSAxMiArIDI7CiAgICAgICAgICBpbmRpY2VzWzIzXSA9IDEyICsgMDsKICAgICAgICAgIGluZGljZXNbMjRdID0gMTYgKyAyOwogICAgICAgICAgaW5kaWNlc1syNV0gPSAxNiArIDE7CiAgICAgICAgICBpbmRpY2VzWzI2XSA9IDE2ICsgMDsKICAgICAgICAgIGluZGljZXNbMjddID0gMTYgKyAzOwogICAgICAgICAgaW5kaWNlc1syOF0gPSAxNiArIDI7CiAgICAgICAgICBpbmRpY2VzWzI5XSA9IDE2ICsgMDsKICAgICAgICAgIGluZGljZXNbMzBdID0gMjAgKyAwOwogICAgICAgICAgaW5kaWNlc1szMV0gPSAyMCArIDE7CiAgICAgICAgICBpbmRpY2VzWzMyXSA9IDIwICsgMjsKICAgICAgICAgIGluZGljZXNbMzNdID0gMjAgKyAwOwogICAgICAgICAgaW5kaWNlc1szNF0gPSAyMCArIDI7CiAgICAgICAgICBpbmRpY2VzWzM1XSA9IDIwICsgMzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheSg4ICogMyk7CiAgICAgICAgICBwb3NpdGlvbnNbMF0gPSBtaW4zLng7CiAgICAgICAgICBwb3NpdGlvbnNbMV0gPSBtaW4zLnk7CiAgICAgICAgICBwb3NpdGlvbnNbMl0gPSBtaW4zLno7CiAgICAgICAgICBwb3NpdGlvbnNbM10gPSBtYXgzLng7CiAgICAgICAgICBwb3NpdGlvbnNbNF0gPSBtaW4zLnk7CiAgICAgICAgICBwb3NpdGlvbnNbNV0gPSBtaW4zLno7CiAgICAgICAgICBwb3NpdGlvbnNbNl0gPSBtYXgzLng7CiAgICAgICAgICBwb3NpdGlvbnNbN10gPSBtYXgzLnk7CiAgICAgICAgICBwb3NpdGlvbnNbOF0gPSBtaW4zLno7CiAgICAgICAgICBwb3NpdGlvbnNbOV0gPSBtaW4zLng7CiAgICAgICAgICBwb3NpdGlvbnNbMTBdID0gbWF4My55OwogICAgICAgICAgcG9zaXRpb25zWzExXSA9IG1pbjMuejsKICAgICAgICAgIHBvc2l0aW9uc1sxMl0gPSBtaW4zLng7CiAgICAgICAgICBwb3NpdGlvbnNbMTNdID0gbWluMy55OwogICAgICAgICAgcG9zaXRpb25zWzE0XSA9IG1heDMuejsKICAgICAgICAgIHBvc2l0aW9uc1sxNV0gPSBtYXgzLng7CiAgICAgICAgICBwb3NpdGlvbnNbMTZdID0gbWluMy55OwogICAgICAgICAgcG9zaXRpb25zWzE3XSA9IG1heDMuejsKICAgICAgICAgIHBvc2l0aW9uc1sxOF0gPSBtYXgzLng7CiAgICAgICAgICBwb3NpdGlvbnNbMTldID0gbWF4My55OwogICAgICAgICAgcG9zaXRpb25zWzIwXSA9IG1heDMuejsKICAgICAgICAgIHBvc2l0aW9uc1syMV0gPSBtaW4zLng7CiAgICAgICAgICBwb3NpdGlvbnNbMjJdID0gbWF4My55OwogICAgICAgICAgcG9zaXRpb25zWzIzXSA9IG1heDMuejsKICAgICAgICAgIGF0dHJpYnV0ZXMucG9zaXRpb24gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgdmFsdWVzOiBwb3NpdGlvbnMKICAgICAgICAgIH0pOwogICAgICAgICAgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheSg2ICogMiAqIDMpOwogICAgICAgICAgaW5kaWNlc1swXSA9IDQ7CiAgICAgICAgICBpbmRpY2VzWzFdID0gNTsKICAgICAgICAgIGluZGljZXNbMl0gPSA2OwogICAgICAgICAgaW5kaWNlc1szXSA9IDQ7CiAgICAgICAgICBpbmRpY2VzWzRdID0gNjsKICAgICAgICAgIGluZGljZXNbNV0gPSA3OwogICAgICAgICAgaW5kaWNlc1s2XSA9IDE7CiAgICAgICAgICBpbmRpY2VzWzddID0gMDsKICAgICAgICAgIGluZGljZXNbOF0gPSAzOwogICAgICAgICAgaW5kaWNlc1s5XSA9IDE7CiAgICAgICAgICBpbmRpY2VzWzEwXSA9IDM7CiAgICAgICAgICBpbmRpY2VzWzExXSA9IDI7CiAgICAgICAgICBpbmRpY2VzWzEyXSA9IDE7CiAgICAgICAgICBpbmRpY2VzWzEzXSA9IDY7CiAgICAgICAgICBpbmRpY2VzWzE0XSA9IDU7CiAgICAgICAgICBpbmRpY2VzWzE1XSA9IDE7CiAgICAgICAgICBpbmRpY2VzWzE2XSA9IDI7CiAgICAgICAgICBpbmRpY2VzWzE3XSA9IDY7CiAgICAgICAgICBpbmRpY2VzWzE4XSA9IDI7CiAgICAgICAgICBpbmRpY2VzWzE5XSA9IDM7CiAgICAgICAgICBpbmRpY2VzWzIwXSA9IDc7CiAgICAgICAgICBpbmRpY2VzWzIxXSA9IDI7CiAgICAgICAgICBpbmRpY2VzWzIyXSA9IDc7CiAgICAgICAgICBpbmRpY2VzWzIzXSA9IDY7CiAgICAgICAgICBpbmRpY2VzWzI0XSA9IDM7CiAgICAgICAgICBpbmRpY2VzWzI1XSA9IDA7CiAgICAgICAgICBpbmRpY2VzWzI2XSA9IDQ7CiAgICAgICAgICBpbmRpY2VzWzI3XSA9IDM7CiAgICAgICAgICBpbmRpY2VzWzI4XSA9IDQ7CiAgICAgICAgICBpbmRpY2VzWzI5XSA9IDc7CiAgICAgICAgICBpbmRpY2VzWzMwXSA9IDA7CiAgICAgICAgICBpbmRpY2VzWzMxXSA9IDE7CiAgICAgICAgICBpbmRpY2VzWzMyXSA9IDU7CiAgICAgICAgICBpbmRpY2VzWzMzXSA9IDA7CiAgICAgICAgICBpbmRpY2VzWzM0XSA9IDU7CiAgICAgICAgICBpbmRpY2VzWzM1XSA9IDQ7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGRpZmYgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QobWF4MywgbWluMywgZGlmZlNjcmF0Y2gpOwogICAgICAgIGNvbnN0IHJhZGl1cyA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUoZGlmZikgKiAwLjU7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChib3hHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlKSkgewogICAgICAgICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICAgIGNvbnN0IG9mZnNldFZhbHVlID0gYm94R2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5OT05FID8gMCA6IDE7CiAgICAgICAgICBjb25zdCBhcHBseU9mZnNldCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCAvIDMpLmZpbGwob2Zmc2V0VmFsdWUpOwogICAgICAgICAgYXR0cmlidXRlcy5hcHBseU9mZnNldCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICAgICAgdmFsdWVzOiBhcHBseU9mZnNldAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgICBhdHRyaWJ1dGVzLAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5UUklBTkdMRVMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZTogbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQoQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIHJhZGl1cyksCiAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IGJveEdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgQm94R2VvbWV0cnkuZ2V0VW5pdEJveCA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHVuaXRCb3hHZW9tZXRyeSkpIHsKICAgICAgICAgIHVuaXRCb3hHZW9tZXRyeSA9IEJveEdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5KAogICAgICAgICAgICBCb3hHZW9tZXRyeS5mcm9tRGltZW5zaW9ucyh7CiAgICAgICAgICAgICAgZGltZW5zaW9uczogbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgxLCAxLCAxKSwKICAgICAgICAgICAgICB2ZXJ0ZXhGb3JtYXQ6IFZlcnRleEZvcm1hdF9kZWZhdWx0LlBPU0lUSU9OX09OTFkKICAgICAgICAgICAgfSkKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB1bml0Qm94R2VvbWV0cnk7CiAgICAgIH07CiAgICAgIEJveEdlb21ldHJ5X2RlZmF1bHQgPSBCb3hHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUJveEdlb21ldHJ5LmpzCiAgdmFyIGNyZWF0ZUJveEdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVCb3hHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVCb3hHZW9tZXRyeV9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY3JlYXRlQm94R2VvbWV0cnkoYm94R2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIGJveEdlb21ldHJ5ID0gQm94R2VvbWV0cnlfZGVmYXVsdC51bnBhY2soYm94R2VvbWV0cnksIG9mZnNldCk7CiAgICB9CiAgICByZXR1cm4gQm94R2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShib3hHZW9tZXRyeSk7CiAgfQogIHZhciBjcmVhdGVCb3hHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZUJveEdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVCb3hHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQm94R2VvbWV0cnkoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGNyZWF0ZUJveEdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVCb3hHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0JveE91dGxpbmVHZW9tZXRyeS5qcwogIGZ1bmN0aW9uIEJveE91dGxpbmVHZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IG1pbjMgPSBvcHRpb25zLm1pbmltdW07CiAgICBjb25zdCBtYXgzID0gb3B0aW9ucy5tYXhpbXVtOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtaW4iLCBtaW4zKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF4IiwgbWF4Myk7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlKSAmJiBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5UT1ApIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIkdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlLlRPUCBpcyBub3QgYSBzdXBwb3J0ZWQgb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUgZm9yIHRoaXMgZ2VvbWV0cnkuIgogICAgICApOwogICAgfQogICAgdGhpcy5fbWluID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG1pbjMpOwogICAgdGhpcy5fbWF4ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG1heDMpOwogICAgdGhpcy5fb2Zmc2V0QXR0cmlidXRlID0gb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGU7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZUJveE91dGxpbmVHZW9tZXRyeSI7CiAgfQogIHZhciBkaWZmU2NyYXRjaDIsIHNjcmF0Y2hNaW4yLCBzY3JhdGNoTWF4Miwgc2NyYXRjaE9wdGlvbnMyLCBCb3hPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9Cb3hPdXRsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0JveE91dGxpbmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9HZW9tZXRyeU9mZnNldEF0dHJpYnV0ZSgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgZGlmZlNjcmF0Y2gyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBCb3hPdXRsaW5lR2VvbWV0cnkuZnJvbURpbWVuc2lvbnMgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICAgICAgY29uc3QgZGltZW5zaW9ucyA9IG9wdGlvbnMuZGltZW5zaW9uczsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImRpbWVuc2lvbnMiLCBkaW1lbnNpb25zKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiZGltZW5zaW9ucy54IiwgZGltZW5zaW9ucy54LCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiZGltZW5zaW9ucy55IiwgZGltZW5zaW9ucy55LCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiZGltZW5zaW9ucy56IiwgZGltZW5zaW9ucy56LCAwKTsKICAgICAgICBjb25zdCBjb3JuZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihkaW1lbnNpb25zLCAwLjUsIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSk7CiAgICAgICAgcmV0dXJuIG5ldyBCb3hPdXRsaW5lR2VvbWV0cnkoewogICAgICAgICAgbWluaW11bTogQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShjb3JuZXIsIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSksCiAgICAgICAgICBtYXhpbXVtOiBjb3JuZXIsCiAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIEJveE91dGxpbmVHZW9tZXRyeS5mcm9tQXhpc0FsaWduZWRCb3VuZGluZ0JveCA9IGZ1bmN0aW9uKGJvdW5kaW5nQm94KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJib3VuZGluZEJveCIsIGJvdW5kaW5nQm94KTsKICAgICAgICByZXR1cm4gbmV3IEJveE91dGxpbmVHZW9tZXRyeSh7CiAgICAgICAgICBtaW5pbXVtOiBib3VuZGluZ0JveC5taW5pbXVtLAogICAgICAgICAgbWF4aW11bTogYm91bmRpbmdCb3gubWF4aW11bQogICAgICAgIH0pOwogICAgICB9OwogICAgICBCb3hPdXRsaW5lR2VvbWV0cnkucGFja2VkTGVuZ3RoID0gMiAqIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyAxOwogICAgICBCb3hPdXRsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2sodmFsdWUuX21pbiwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHZhbHVlLl9tYXgsIGFycmF5LCBzdGFydGluZ0luZGV4ICsgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCArIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGggKiAyXSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICAgICAgdmFsdWUuX29mZnNldEF0dHJpYnV0ZSwKICAgICAgICAgIC0xCiAgICAgICAgKTsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hNaW4yID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTWF4MiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE9wdGlvbnMyID0gewogICAgICAgIG1pbmltdW06IHNjcmF0Y2hNaW4yLAogICAgICAgIG1heGltdW06IHNjcmF0Y2hNYXgyLAogICAgICAgIG9mZnNldEF0dHJpYnV0ZTogdm9pZCAwCiAgICAgIH07CiAgICAgIEJveE91dGxpbmVHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgbWluMyA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hNaW4yKTsKICAgICAgICBjb25zdCBtYXgzID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCArIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgsCiAgICAgICAgICBzY3JhdGNoTWF4MgogICAgICAgICk7CiAgICAgICAgY29uc3Qgb2Zmc2V0QXR0cmlidXRlID0gYXJyYXlbc3RhcnRpbmdJbmRleCArIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGggKiAyXTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczIub2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICAgIHJldHVybiBuZXcgQm94T3V0bGluZUdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zMik7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fbWluID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG1pbjMsIHJlc3VsdC5fbWluKTsKICAgICAgICByZXN1bHQuX21heCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShtYXgzLCByZXN1bHQuX21heCk7CiAgICAgICAgcmVzdWx0Ll9vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEJveE91dGxpbmVHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKGJveEdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgbWluMyA9IGJveEdlb21ldHJ5Ll9taW47CiAgICAgICAgY29uc3QgbWF4MyA9IGJveEdlb21ldHJ5Ll9tYXg7CiAgICAgICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHMobWluMywgbWF4MykpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCgpOwogICAgICAgIGNvbnN0IGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoMTIgKiAyKTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KDggKiAzKTsKICAgICAgICBwb3NpdGlvbnNbMF0gPSBtaW4zLng7CiAgICAgICAgcG9zaXRpb25zWzFdID0gbWluMy55OwogICAgICAgIHBvc2l0aW9uc1syXSA9IG1pbjMuejsKICAgICAgICBwb3NpdGlvbnNbM10gPSBtYXgzLng7CiAgICAgICAgcG9zaXRpb25zWzRdID0gbWluMy55OwogICAgICAgIHBvc2l0aW9uc1s1XSA9IG1pbjMuejsKICAgICAgICBwb3NpdGlvbnNbNl0gPSBtYXgzLng7CiAgICAgICAgcG9zaXRpb25zWzddID0gbWF4My55OwogICAgICAgIHBvc2l0aW9uc1s4XSA9IG1pbjMuejsKICAgICAgICBwb3NpdGlvbnNbOV0gPSBtaW4zLng7CiAgICAgICAgcG9zaXRpb25zWzEwXSA9IG1heDMueTsKICAgICAgICBwb3NpdGlvbnNbMTFdID0gbWluMy56OwogICAgICAgIHBvc2l0aW9uc1sxMl0gPSBtaW4zLng7CiAgICAgICAgcG9zaXRpb25zWzEzXSA9IG1pbjMueTsKICAgICAgICBwb3NpdGlvbnNbMTRdID0gbWF4My56OwogICAgICAgIHBvc2l0aW9uc1sxNV0gPSBtYXgzLng7CiAgICAgICAgcG9zaXRpb25zWzE2XSA9IG1pbjMueTsKICAgICAgICBwb3NpdGlvbnNbMTddID0gbWF4My56OwogICAgICAgIHBvc2l0aW9uc1sxOF0gPSBtYXgzLng7CiAgICAgICAgcG9zaXRpb25zWzE5XSA9IG1heDMueTsKICAgICAgICBwb3NpdGlvbnNbMjBdID0gbWF4My56OwogICAgICAgIHBvc2l0aW9uc1syMV0gPSBtaW4zLng7CiAgICAgICAgcG9zaXRpb25zWzIyXSA9IG1heDMueTsKICAgICAgICBwb3NpdGlvbnNbMjNdID0gbWF4My56OwogICAgICAgIGF0dHJpYnV0ZXMucG9zaXRpb24gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgdmFsdWVzOiBwb3NpdGlvbnMKICAgICAgICB9KTsKICAgICAgICBpbmRpY2VzWzBdID0gNDsKICAgICAgICBpbmRpY2VzWzFdID0gNTsKICAgICAgICBpbmRpY2VzWzJdID0gNTsKICAgICAgICBpbmRpY2VzWzNdID0gNjsKICAgICAgICBpbmRpY2VzWzRdID0gNjsKICAgICAgICBpbmRpY2VzWzVdID0gNzsKICAgICAgICBpbmRpY2VzWzZdID0gNzsKICAgICAgICBpbmRpY2VzWzddID0gNDsKICAgICAgICBpbmRpY2VzWzhdID0gMDsKICAgICAgICBpbmRpY2VzWzldID0gMTsKICAgICAgICBpbmRpY2VzWzEwXSA9IDE7CiAgICAgICAgaW5kaWNlc1sxMV0gPSAyOwogICAgICAgIGluZGljZXNbMTJdID0gMjsKICAgICAgICBpbmRpY2VzWzEzXSA9IDM7CiAgICAgICAgaW5kaWNlc1sxNF0gPSAzOwogICAgICAgIGluZGljZXNbMTVdID0gMDsKICAgICAgICBpbmRpY2VzWzE2XSA9IDA7CiAgICAgICAgaW5kaWNlc1sxN10gPSA0OwogICAgICAgIGluZGljZXNbMThdID0gMTsKICAgICAgICBpbmRpY2VzWzE5XSA9IDU7CiAgICAgICAgaW5kaWNlc1syMF0gPSAyOwogICAgICAgIGluZGljZXNbMjFdID0gNjsKICAgICAgICBpbmRpY2VzWzIyXSA9IDM7CiAgICAgICAgaW5kaWNlc1syM10gPSA3OwogICAgICAgIGNvbnN0IGRpZmYgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QobWF4MywgbWluMywgZGlmZlNjcmF0Y2gyKTsKICAgICAgICBjb25zdCByYWRpdXMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKGRpZmYpICogMC41OwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYm94R2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSkpIHsKICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgICBjb25zdCBvZmZzZXRWYWx1ZSA9IGJveEdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuTk9ORSA/IDAgOiAxOwogICAgICAgICAgY29uc3QgYXBwbHlPZmZzZXQgPSBuZXcgVWludDhBcnJheShsZW5ndGggLyAzKS5maWxsKG9mZnNldFZhbHVlKTsKICAgICAgICAgIGF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDEsCiAgICAgICAgICAgIHZhbHVlczogYXBwbHlPZmZzZXQKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuTElORVMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZTogbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQoQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIHJhZGl1cyksCiAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IGJveEdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgQm94T3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBCb3hPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVCb3hPdXRsaW5lR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlQm94T3V0bGluZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVCb3hPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlQm94T3V0bGluZUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVCb3hPdXRsaW5lR2VvbWV0cnkoYm94R2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIGJveEdlb21ldHJ5ID0gQm94T3V0bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKGJveEdlb21ldHJ5LCBvZmZzZXQpOwogICAgfQogICAgcmV0dXJuIEJveE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KGJveEdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZUJveE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZUJveE91dGxpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlQm94T3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3hPdXRsaW5lR2VvbWV0cnkoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGNyZWF0ZUJveE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0ID0gY3JlYXRlQm94T3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRWxsaXBzZUdlb21ldHJ5TGlicmFyeS5qcwogIGZ1bmN0aW9uIHBvaW50T25FbGxpcHNvaWQodGhldGEsIHJvdGF0aW9uLCBub3J0aFZlYywgZWFzdFZlYywgYVNxciwgYWIsIGJTcXIsIG1hZywgdW5pdFBvcywgcmVzdWx0KSB7CiAgICBjb25zdCBhemltdXRoID0gdGhldGEgKyByb3RhdGlvbjsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGVhc3RWZWMsIE1hdGguY29zKGF6aW11dGgpLCByb3RBeGlzKTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKG5vcnRoVmVjLCBNYXRoLnNpbihhemltdXRoKSwgdGVtcFZlYyk7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHJvdEF4aXMsIHRlbXBWZWMsIHJvdEF4aXMpOwogICAgbGV0IGNvc1RoZXRhU3F1YXJlZCA9IE1hdGguY29zKHRoZXRhKTsKICAgIGNvc1RoZXRhU3F1YXJlZCA9IGNvc1RoZXRhU3F1YXJlZCAqIGNvc1RoZXRhU3F1YXJlZDsKICAgIGxldCBzaW5UaGV0YVNxdWFyZWQgPSBNYXRoLnNpbih0aGV0YSk7CiAgICBzaW5UaGV0YVNxdWFyZWQgPSBzaW5UaGV0YVNxdWFyZWQgKiBzaW5UaGV0YVNxdWFyZWQ7CiAgICBjb25zdCByYWRpdXMgPSBhYiAvIE1hdGguc3FydChiU3FyICogY29zVGhldGFTcXVhcmVkICsgYVNxciAqIHNpblRoZXRhU3F1YXJlZCk7CiAgICBjb25zdCBhbmdsZSA9IHJhZGl1cyAvIG1hZzsKICAgIFF1YXRlcm5pb25fZGVmYXVsdC5mcm9tQXhpc0FuZ2xlKHJvdEF4aXMsIGFuZ2xlLCB1bml0UXVhdCk7CiAgICBNYXRyaXgzX2RlZmF1bHQuZnJvbVF1YXRlcm5pb24odW5pdFF1YXQsIHJvdE10eCk7CiAgICBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVZlY3Rvcihyb3RNdHgsIHVuaXRQb3MsIHJlc3VsdCk7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHJlc3VsdCwgcmVzdWx0KTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHJlc3VsdCwgbWFnLCByZXN1bHQpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgdmFyIEVsbGlwc2VHZW9tZXRyeUxpYnJhcnksIHJvdEF4aXMsIHRlbXBWZWMsIHVuaXRRdWF0LCByb3RNdHgsIHNjcmF0Y2hDYXJ0ZXNpYW4xMiwgc2NyYXRjaENhcnRlc2lhbjIzLCBzY3JhdGNoQ2FydGVzaWFuMzQsIHNjcmF0Y2hOb3JtYWwyLCB1bml0UG9zU2NyYXRjaCwgZWFzdFZlY1NjcmF0Y2gsIG5vcnRoVmVjU2NyYXRjaCwgRWxsaXBzZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0OwogIHZhciBpbml0X0VsbGlwc2VHZW9tZXRyeUxpYnJhcnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0VsbGlwc2VHZW9tZXRyeUxpYnJhcnkuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfTWF0cml4MygpOwogICAgICBpbml0X1F1YXRlcm5pb24oKTsKICAgICAgRWxsaXBzZUdlb21ldHJ5TGlicmFyeSA9IHt9OwogICAgICByb3RBeGlzID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB0ZW1wVmVjID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB1bml0UXVhdCA9IG5ldyBRdWF0ZXJuaW9uX2RlZmF1bHQoKTsKICAgICAgcm90TXR4ID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuMTIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4yMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjM0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTm9ybWFsMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgRWxsaXBzZUdlb21ldHJ5TGlicmFyeS5yYWlzZVBvc2l0aW9uc1RvSGVpZ2h0ID0gZnVuY3Rpb24ocG9zaXRpb25zLCBvcHRpb25zLCBleHRydWRlKSB7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gb3B0aW9ucy5lbGxpcHNvaWQ7CiAgICAgICAgY29uc3QgaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQ7CiAgICAgICAgY29uc3QgZXh0cnVkZWRIZWlnaHQgPSBvcHRpb25zLmV4dHJ1ZGVkSGVpZ2h0OwogICAgICAgIGNvbnN0IHNpemUgPSBleHRydWRlID8gcG9zaXRpb25zLmxlbmd0aCAvIDMgKiAyIDogcG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICAgICAgY29uc3QgZmluYWxQb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KHNpemUgKiAzKTsKICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGNvbnN0IGJvdHRvbU9mZnNldCA9IGV4dHJ1ZGUgPyBsZW5ndGggOiAwOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDMpIHsKICAgICAgICAgIGNvbnN0IGkxID0gaSArIDE7CiAgICAgICAgICBjb25zdCBpMiA9IGkgKyAyOwogICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHBvc2l0aW9ucywgaSwgc2NyYXRjaENhcnRlc2lhbjEyKTsKICAgICAgICAgIGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKHBvc2l0aW9uLCBwb3NpdGlvbik7CiAgICAgICAgICBjb25zdCBleHRydWRlZFBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHBvc2l0aW9uLCBzY3JhdGNoQ2FydGVzaWFuMjMpOwogICAgICAgICAgY29uc3Qgbm9ybWFsMiA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwocG9zaXRpb24sIHNjcmF0Y2hOb3JtYWwyKTsKICAgICAgICAgIGNvbnN0IHNjYWxlZE5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgICBub3JtYWwyLAogICAgICAgICAgICBoZWlnaHQsCiAgICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zNAogICAgICAgICAgKTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocG9zaXRpb24sIHNjYWxlZE5vcm1hbCwgcG9zaXRpb24pOwogICAgICAgICAgaWYgKGV4dHJ1ZGUpIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobm9ybWFsMiwgZXh0cnVkZWRIZWlnaHQsIHNjYWxlZE5vcm1hbCk7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoZXh0cnVkZWRQb3NpdGlvbiwgc2NhbGVkTm9ybWFsLCBleHRydWRlZFBvc2l0aW9uKTsKICAgICAgICAgICAgZmluYWxQb3NpdGlvbnNbaSArIGJvdHRvbU9mZnNldF0gPSBleHRydWRlZFBvc2l0aW9uLng7CiAgICAgICAgICAgIGZpbmFsUG9zaXRpb25zW2kxICsgYm90dG9tT2Zmc2V0XSA9IGV4dHJ1ZGVkUG9zaXRpb24ueTsKICAgICAgICAgICAgZmluYWxQb3NpdGlvbnNbaTIgKyBib3R0b21PZmZzZXRdID0gZXh0cnVkZWRQb3NpdGlvbi56OwogICAgICAgICAgfQogICAgICAgICAgZmluYWxQb3NpdGlvbnNbaV0gPSBwb3NpdGlvbi54OwogICAgICAgICAgZmluYWxQb3NpdGlvbnNbaTFdID0gcG9zaXRpb24ueTsKICAgICAgICAgIGZpbmFsUG9zaXRpb25zW2kyXSA9IHBvc2l0aW9uLno7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmaW5hbFBvc2l0aW9uczsKICAgICAgfTsKICAgICAgdW5pdFBvc1NjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGVhc3RWZWNTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBub3J0aFZlY1NjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEVsbGlwc2VHZW9tZXRyeUxpYnJhcnkuY29tcHV0ZUVsbGlwc2VQb3NpdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zLCBhZGRGaWxsUG9zaXRpb25zLCBhZGRFZGdlUG9zaXRpb25zKSB7CiAgICAgICAgY29uc3Qgc2VtaU1pbm9yQXhpcyA9IG9wdGlvbnMuc2VtaU1pbm9yQXhpczsKICAgICAgICBjb25zdCBzZW1pTWFqb3JBeGlzID0gb3B0aW9ucy5zZW1pTWFqb3JBeGlzOwogICAgICAgIGNvbnN0IHJvdGF0aW9uID0gb3B0aW9ucy5yb3RhdGlvbjsKICAgICAgICBjb25zdCBjZW50ZXIgPSBvcHRpb25zLmNlbnRlcjsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IG9wdGlvbnMuZ3JhbnVsYXJpdHkgKiA4OwogICAgICAgIGNvbnN0IGFTcXIgPSBzZW1pTWlub3JBeGlzICogc2VtaU1pbm9yQXhpczsKICAgICAgICBjb25zdCBiU3FyID0gc2VtaU1ham9yQXhpcyAqIHNlbWlNYWpvckF4aXM7CiAgICAgICAgY29uc3QgYWIgPSBzZW1pTWFqb3JBeGlzICogc2VtaU1pbm9yQXhpczsKICAgICAgICBjb25zdCBtYWcgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKGNlbnRlcik7CiAgICAgICAgY29uc3QgdW5pdFBvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoY2VudGVyLCB1bml0UG9zU2NyYXRjaCk7CiAgICAgICAgbGV0IGVhc3RWZWMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWiwgY2VudGVyLCBlYXN0VmVjU2NyYXRjaCk7CiAgICAgICAgZWFzdFZlYyA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoZWFzdFZlYywgZWFzdFZlYyk7CiAgICAgICAgY29uc3Qgbm9ydGhWZWMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3ModW5pdFBvcywgZWFzdFZlYywgbm9ydGhWZWNTY3JhdGNoKTsKICAgICAgICBsZXQgbnVtUHRzID0gMSArIE1hdGguY2VpbChNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gLyBncmFudWxhcml0eSk7CiAgICAgICAgY29uc3QgZGVsdGFUaGV0YSA9IE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyAvIChudW1QdHMgLSAxKTsKICAgICAgICBsZXQgdGhldGEgPSBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gLSBudW1QdHMgKiBkZWx0YVRoZXRhOwogICAgICAgIGlmICh0aGV0YSA8IDApIHsKICAgICAgICAgIG51bVB0cyAtPSBNYXRoLmNlaWwoTWF0aC5hYnModGhldGEpIC8gZGVsdGFUaGV0YSk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHNpemUgPSAyICogKG51bVB0cyAqIChudW1QdHMgKyAyKSk7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gYWRkRmlsbFBvc2l0aW9ucyA/IG5ldyBBcnJheShzaXplICogMykgOiB2b2lkIDA7CiAgICAgICAgbGV0IHBvc2l0aW9uSW5kZXggPSAwOwogICAgICAgIGxldCBwb3NpdGlvbiA9IHNjcmF0Y2hDYXJ0ZXNpYW4xMjsKICAgICAgICBsZXQgcmVmbGVjdGVkUG9zaXRpb24gPSBzY3JhdGNoQ2FydGVzaWFuMjM7CiAgICAgICAgY29uc3Qgb3V0ZXJQb3NpdGlvbnNMZW5ndGggPSBudW1QdHMgKiA0ICogMzsKICAgICAgICBsZXQgb3V0ZXJSaWdodEluZGV4ID0gb3V0ZXJQb3NpdGlvbnNMZW5ndGggLSAxOwogICAgICAgIGxldCBvdXRlckxlZnRJbmRleCA9IDA7CiAgICAgICAgY29uc3Qgb3V0ZXJQb3NpdGlvbnMgPSBhZGRFZGdlUG9zaXRpb25zID8gbmV3IEFycmF5KG91dGVyUG9zaXRpb25zTGVuZ3RoKSA6IHZvaWQgMDsKICAgICAgICBsZXQgaTsKICAgICAgICBsZXQgajsKICAgICAgICBsZXQgbnVtSW50ZXJpb3I7CiAgICAgICAgbGV0IHQ7CiAgICAgICAgbGV0IGludGVyaW9yUG9zaXRpb247CiAgICAgICAgdGhldGEgPSBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV087CiAgICAgICAgcG9zaXRpb24gPSBwb2ludE9uRWxsaXBzb2lkKAogICAgICAgICAgdGhldGEsCiAgICAgICAgICByb3RhdGlvbiwKICAgICAgICAgIG5vcnRoVmVjLAogICAgICAgICAgZWFzdFZlYywKICAgICAgICAgIGFTcXIsCiAgICAgICAgICBhYiwKICAgICAgICAgIGJTcXIsCiAgICAgICAgICBtYWcsCiAgICAgICAgICB1bml0UG9zLAogICAgICAgICAgcG9zaXRpb24KICAgICAgICApOwogICAgICAgIGlmIChhZGRGaWxsUG9zaXRpb25zKSB7CiAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHBvc2l0aW9uLng7CiAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHBvc2l0aW9uLnk7CiAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHBvc2l0aW9uLno7CiAgICAgICAgfQogICAgICAgIGlmIChhZGRFZGdlUG9zaXRpb25zKSB7CiAgICAgICAgICBvdXRlclBvc2l0aW9uc1tvdXRlclJpZ2h0SW5kZXgtLV0gPSBwb3NpdGlvbi56OwogICAgICAgICAgb3V0ZXJQb3NpdGlvbnNbb3V0ZXJSaWdodEluZGV4LS1dID0gcG9zaXRpb24ueTsKICAgICAgICAgIG91dGVyUG9zaXRpb25zW291dGVyUmlnaHRJbmRleC0tXSA9IHBvc2l0aW9uLng7CiAgICAgICAgfQogICAgICAgIHRoZXRhID0gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPIC0gZGVsdGFUaGV0YTsKICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbnVtUHRzICsgMTsgKytpKSB7CiAgICAgICAgICBwb3NpdGlvbiA9IHBvaW50T25FbGxpcHNvaWQoCiAgICAgICAgICAgIHRoZXRhLAogICAgICAgICAgICByb3RhdGlvbiwKICAgICAgICAgICAgbm9ydGhWZWMsCiAgICAgICAgICAgIGVhc3RWZWMsCiAgICAgICAgICAgIGFTcXIsCiAgICAgICAgICAgIGFiLAogICAgICAgICAgICBiU3FyLAogICAgICAgICAgICBtYWcsCiAgICAgICAgICAgIHVuaXRQb3MsCiAgICAgICAgICAgIHBvc2l0aW9uCiAgICAgICAgICApOwogICAgICAgICAgcmVmbGVjdGVkUG9zaXRpb24gPSBwb2ludE9uRWxsaXBzb2lkKAogICAgICAgICAgICBNYXRoLlBJIC0gdGhldGEsCiAgICAgICAgICAgIHJvdGF0aW9uLAogICAgICAgICAgICBub3J0aFZlYywKICAgICAgICAgICAgZWFzdFZlYywKICAgICAgICAgICAgYVNxciwKICAgICAgICAgICAgYWIsCiAgICAgICAgICAgIGJTcXIsCiAgICAgICAgICAgIG1hZywKICAgICAgICAgICAgdW5pdFBvcywKICAgICAgICAgICAgcmVmbGVjdGVkUG9zaXRpb24KICAgICAgICAgICk7CiAgICAgICAgICBpZiAoYWRkRmlsbFBvc2l0aW9ucykgewogICAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHBvc2l0aW9uLng7CiAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gcG9zaXRpb24ueTsKICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBwb3NpdGlvbi56OwogICAgICAgICAgICBudW1JbnRlcmlvciA9IDIgKiBpICsgMjsKICAgICAgICAgICAgZm9yIChqID0gMTsgaiA8IG51bUludGVyaW9yIC0gMTsgKytqKSB7CiAgICAgICAgICAgICAgdCA9IGogLyAobnVtSW50ZXJpb3IgLSAxKTsKICAgICAgICAgICAgICBpbnRlcmlvclBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmxlcnAoCiAgICAgICAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgICAgICAgIHJlZmxlY3RlZFBvc2l0aW9uLAogICAgICAgICAgICAgICAgdCwKICAgICAgICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zNAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBpbnRlcmlvclBvc2l0aW9uLng7CiAgICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBpbnRlcmlvclBvc2l0aW9uLnk7CiAgICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBpbnRlcmlvclBvc2l0aW9uLno7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSByZWZsZWN0ZWRQb3NpdGlvbi54OwogICAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHJlZmxlY3RlZFBvc2l0aW9uLnk7CiAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gcmVmbGVjdGVkUG9zaXRpb24uejsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChhZGRFZGdlUG9zaXRpb25zKSB7CiAgICAgICAgICAgIG91dGVyUG9zaXRpb25zW291dGVyUmlnaHRJbmRleC0tXSA9IHBvc2l0aW9uLno7CiAgICAgICAgICAgIG91dGVyUG9zaXRpb25zW291dGVyUmlnaHRJbmRleC0tXSA9IHBvc2l0aW9uLnk7CiAgICAgICAgICAgIG91dGVyUG9zaXRpb25zW291dGVyUmlnaHRJbmRleC0tXSA9IHBvc2l0aW9uLng7CiAgICAgICAgICAgIG91dGVyUG9zaXRpb25zW291dGVyTGVmdEluZGV4KytdID0gcmVmbGVjdGVkUG9zaXRpb24ueDsKICAgICAgICAgICAgb3V0ZXJQb3NpdGlvbnNbb3V0ZXJMZWZ0SW5kZXgrK10gPSByZWZsZWN0ZWRQb3NpdGlvbi55OwogICAgICAgICAgICBvdXRlclBvc2l0aW9uc1tvdXRlckxlZnRJbmRleCsrXSA9IHJlZmxlY3RlZFBvc2l0aW9uLno7CiAgICAgICAgICB9CiAgICAgICAgICB0aGV0YSA9IE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyAtIChpICsgMSkgKiBkZWx0YVRoZXRhOwogICAgICAgIH0KICAgICAgICBmb3IgKGkgPSBudW1QdHM7IGkgPiAxOyAtLWkpIHsKICAgICAgICAgIHRoZXRhID0gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPIC0gKGkgLSAxKSAqIGRlbHRhVGhldGE7CiAgICAgICAgICBwb3NpdGlvbiA9IHBvaW50T25FbGxpcHNvaWQoCiAgICAgICAgICAgIC10aGV0YSwKICAgICAgICAgICAgcm90YXRpb24sCiAgICAgICAgICAgIG5vcnRoVmVjLAogICAgICAgICAgICBlYXN0VmVjLAogICAgICAgICAgICBhU3FyLAogICAgICAgICAgICBhYiwKICAgICAgICAgICAgYlNxciwKICAgICAgICAgICAgbWFnLAogICAgICAgICAgICB1bml0UG9zLAogICAgICAgICAgICBwb3NpdGlvbgogICAgICAgICAgKTsKICAgICAgICAgIHJlZmxlY3RlZFBvc2l0aW9uID0gcG9pbnRPbkVsbGlwc29pZCgKICAgICAgICAgICAgdGhldGEgKyBNYXRoLlBJLAogICAgICAgICAgICByb3RhdGlvbiwKICAgICAgICAgICAgbm9ydGhWZWMsCiAgICAgICAgICAgIGVhc3RWZWMsCiAgICAgICAgICAgIGFTcXIsCiAgICAgICAgICAgIGFiLAogICAgICAgICAgICBiU3FyLAogICAgICAgICAgICBtYWcsCiAgICAgICAgICAgIHVuaXRQb3MsCiAgICAgICAgICAgIHJlZmxlY3RlZFBvc2l0aW9uCiAgICAgICAgICApOwogICAgICAgICAgaWYgKGFkZEZpbGxQb3NpdGlvbnMpIHsKICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBwb3NpdGlvbi54OwogICAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHBvc2l0aW9uLnk7CiAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gcG9zaXRpb24uejsKICAgICAgICAgICAgbnVtSW50ZXJpb3IgPSAyICogKGkgLSAxKSArIDI7CiAgICAgICAgICAgIGZvciAoaiA9IDE7IGogPCBudW1JbnRlcmlvciAtIDE7ICsraikgewogICAgICAgICAgICAgIHQgPSBqIC8gKG51bUludGVyaW9yIC0gMSk7CiAgICAgICAgICAgICAgaW50ZXJpb3JQb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5sZXJwKAogICAgICAgICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICAgICAgICByZWZsZWN0ZWRQb3NpdGlvbiwKICAgICAgICAgICAgICAgIHQsCiAgICAgICAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuMzQKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gaW50ZXJpb3JQb3NpdGlvbi54OwogICAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gaW50ZXJpb3JQb3NpdGlvbi55OwogICAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gaW50ZXJpb3JQb3NpdGlvbi56OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gcmVmbGVjdGVkUG9zaXRpb24ueDsKICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSByZWZsZWN0ZWRQb3NpdGlvbi55OwogICAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHJlZmxlY3RlZFBvc2l0aW9uLno7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoYWRkRWRnZVBvc2l0aW9ucykgewogICAgICAgICAgICBvdXRlclBvc2l0aW9uc1tvdXRlclJpZ2h0SW5kZXgtLV0gPSBwb3NpdGlvbi56OwogICAgICAgICAgICBvdXRlclBvc2l0aW9uc1tvdXRlclJpZ2h0SW5kZXgtLV0gPSBwb3NpdGlvbi55OwogICAgICAgICAgICBvdXRlclBvc2l0aW9uc1tvdXRlclJpZ2h0SW5kZXgtLV0gPSBwb3NpdGlvbi54OwogICAgICAgICAgICBvdXRlclBvc2l0aW9uc1tvdXRlckxlZnRJbmRleCsrXSA9IHJlZmxlY3RlZFBvc2l0aW9uLng7CiAgICAgICAgICAgIG91dGVyUG9zaXRpb25zW291dGVyTGVmdEluZGV4KytdID0gcmVmbGVjdGVkUG9zaXRpb24ueTsKICAgICAgICAgICAgb3V0ZXJQb3NpdGlvbnNbb3V0ZXJMZWZ0SW5kZXgrK10gPSByZWZsZWN0ZWRQb3NpdGlvbi56OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGV0YSA9IE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTzsKICAgICAgICBwb3NpdGlvbiA9IHBvaW50T25FbGxpcHNvaWQoCiAgICAgICAgICAtdGhldGEsCiAgICAgICAgICByb3RhdGlvbiwKICAgICAgICAgIG5vcnRoVmVjLAogICAgICAgICAgZWFzdFZlYywKICAgICAgICAgIGFTcXIsCiAgICAgICAgICBhYiwKICAgICAgICAgIGJTcXIsCiAgICAgICAgICBtYWcsCiAgICAgICAgICB1bml0UG9zLAogICAgICAgICAgcG9zaXRpb24KICAgICAgICApOwogICAgICAgIGNvbnN0IHIgPSB7fTsKICAgICAgICBpZiAoYWRkRmlsbFBvc2l0aW9ucykgewogICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBwb3NpdGlvbi54OwogICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBwb3NpdGlvbi55OwogICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBwb3NpdGlvbi56OwogICAgICAgICAgci5wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICAgICAgICByLm51bVB0cyA9IG51bVB0czsKICAgICAgICB9CiAgICAgICAgaWYgKGFkZEVkZ2VQb3NpdGlvbnMpIHsKICAgICAgICAgIG91dGVyUG9zaXRpb25zW291dGVyUmlnaHRJbmRleC0tXSA9IHBvc2l0aW9uLno7CiAgICAgICAgICBvdXRlclBvc2l0aW9uc1tvdXRlclJpZ2h0SW5kZXgtLV0gPSBwb3NpdGlvbi55OwogICAgICAgICAgb3V0ZXJQb3NpdGlvbnNbb3V0ZXJSaWdodEluZGV4LS1dID0gcG9zaXRpb24ueDsKICAgICAgICAgIHIub3V0ZXJQb3NpdGlvbnMgPSBvdXRlclBvc2l0aW9uczsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHI7CiAgICAgIH07CiAgICAgIEVsbGlwc2VHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdCA9IEVsbGlwc2VHZW9tZXRyeUxpYnJhcnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9HZW9tZXRyeUluc3RhbmNlLmpzCiAgZnVuY3Rpb24gR2VvbWV0cnlJbnN0YW5jZShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMuZ2VvbWV0cnkpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJvcHRpb25zLmdlb21ldHJ5IGlzIHJlcXVpcmVkLiIpOwogICAgfQogICAgdGhpcy5nZW9tZXRyeSA9IG9wdGlvbnMuZ2VvbWV0cnk7CiAgICB0aGlzLm1vZGVsTWF0cml4ID0gTWF0cml4NF9kZWZhdWx0LmNsb25lKAogICAgICBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLm1vZGVsTWF0cml4LCBNYXRyaXg0X2RlZmF1bHQuSURFTlRJVFkpCiAgICApOwogICAgdGhpcy5pZCA9IG9wdGlvbnMuaWQ7CiAgICB0aGlzLnBpY2tQcmltaXRpdmUgPSBvcHRpb25zLnBpY2tQcmltaXRpdmU7CiAgICB0aGlzLmF0dHJpYnV0ZXMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmF0dHJpYnV0ZXMsIHt9KTsKICAgIHRoaXMud2VzdEhlbWlzcGhlcmVHZW9tZXRyeSA9IHZvaWQgMDsKICAgIHRoaXMuZWFzdEhlbWlzcGhlcmVHZW9tZXRyeSA9IHZvaWQgMDsKICB9CiAgdmFyIEdlb21ldHJ5SW5zdGFuY2VfZGVmYXVsdDsKICB2YXIgaW5pdF9HZW9tZXRyeUluc3RhbmNlID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9HZW9tZXRyeUluc3RhbmNlLmpzIigpIHsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9NYXRyaXg0KCk7CiAgICAgIEdlb21ldHJ5SW5zdGFuY2VfZGVmYXVsdCA9IEdlb21ldHJ5SW5zdGFuY2U7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbGxpcHNlR2VvbWV0cnkuanMKICBmdW5jdGlvbiBjb21wdXRlVG9wQm90dG9tQXR0cmlidXRlcyhwb3NpdGlvbnMsIG9wdGlvbnMsIGV4dHJ1ZGUpIHsKICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IG9wdGlvbnMudmVydGV4Rm9ybWF0OwogICAgY29uc3QgY2VudGVyID0gb3B0aW9ucy5jZW50ZXI7CiAgICBjb25zdCBzZW1pTWFqb3JBeGlzID0gb3B0aW9ucy5zZW1pTWFqb3JBeGlzOwogICAgY29uc3Qgc2VtaU1pbm9yQXhpcyA9IG9wdGlvbnMuc2VtaU1pbm9yQXhpczsKICAgIGNvbnN0IGVsbGlwc29pZCA9IG9wdGlvbnMuZWxsaXBzb2lkOwogICAgY29uc3Qgc3RSb3RhdGlvbiA9IG9wdGlvbnMuc3RSb3RhdGlvbjsKICAgIGNvbnN0IHNpemUgPSBleHRydWRlID8gcG9zaXRpb25zLmxlbmd0aCAvIDMgKiAyIDogcG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICBjb25zdCBzaGFkb3dWb2x1bWUgPSBvcHRpb25zLnNoYWRvd1ZvbHVtZTsKICAgIGNvbnN0IHRleHR1cmVDb29yZGluYXRlcyA9IHZlcnRleEZvcm1hdC5zdCA/IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDIpIDogdm9pZCAwOwogICAgY29uc3Qgbm9ybWFscyA9IHZlcnRleEZvcm1hdC5ub3JtYWwgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiAzKSA6IHZvaWQgMDsKICAgIGNvbnN0IHRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LnRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiAzKSA6IHZvaWQgMDsKICAgIGNvbnN0IGJpdGFuZ2VudHMgPSB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50ID8gbmV3IEZsb2F0MzJBcnJheShzaXplICogMykgOiB2b2lkIDA7CiAgICBjb25zdCBleHRydWRlTm9ybWFscyA9IHNoYWRvd1ZvbHVtZSA/IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDMpIDogdm9pZCAwOwogICAgbGV0IHRleHR1cmVDb29yZEluZGV4ID0gMDsKICAgIGxldCBub3JtYWwyID0gc2NyYXRjaE5vcm1hbDM7CiAgICBsZXQgdGFuZ2VudCA9IHNjcmF0Y2hUYW5nZW50OwogICAgbGV0IGJpdGFuZ2VudCA9IHNjcmF0Y2hCaXRhbmdlbnQ7CiAgICBjb25zdCBwcm9qZWN0aW9uID0gbmV3IEdlb2dyYXBoaWNQcm9qZWN0aW9uX2RlZmF1bHQoZWxsaXBzb2lkKTsKICAgIGNvbnN0IHByb2plY3RlZENlbnRlciA9IHByb2plY3Rpb24ucHJvamVjdCgKICAgICAgZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKGNlbnRlciwgc2NyYXRjaENhcnRvZ3JhcGhpYzIpLAogICAgICBwcm9qZWN0ZWRDZW50ZXJTY3JhdGNoCiAgICApOwogICAgY29uc3QgZ2VvZGV0aWNOb3JtYWwgPSBlbGxpcHNvaWQuc2NhbGVUb0dlb2RldGljU3VyZmFjZSgKICAgICAgY2VudGVyLAogICAgICBzY3JhdGNoQ2FydGVzaWFuMTMKICAgICk7CiAgICBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKGdlb2RldGljTm9ybWFsLCBnZW9kZXRpY05vcm1hbCk7CiAgICBsZXQgdGV4dHVyZU1hdHJpeCA9IHRleHR1cmVNYXRyaXhTY3JhdGNoOwogICAgbGV0IHRhbmdlbnRNYXRyaXggPSB0YW5nZW50TWF0cml4U2NyYXRjaDsKICAgIGlmIChzdFJvdGF0aW9uICE9PSAwKSB7CiAgICAgIGxldCByb3RhdGlvbiA9IFF1YXRlcm5pb25fZGVmYXVsdC5mcm9tQXhpc0FuZ2xlKAogICAgICAgIGdlb2RldGljTm9ybWFsLAogICAgICAgIHN0Um90YXRpb24sCiAgICAgICAgcXVhdGVybmlvblNjcmF0Y2gKICAgICAgKTsKICAgICAgdGV4dHVyZU1hdHJpeCA9IE1hdHJpeDNfZGVmYXVsdC5mcm9tUXVhdGVybmlvbihyb3RhdGlvbiwgdGV4dHVyZU1hdHJpeCk7CiAgICAgIHJvdGF0aW9uID0gUXVhdGVybmlvbl9kZWZhdWx0LmZyb21BeGlzQW5nbGUoCiAgICAgICAgZ2VvZGV0aWNOb3JtYWwsCiAgICAgICAgLXN0Um90YXRpb24sCiAgICAgICAgcXVhdGVybmlvblNjcmF0Y2gKICAgICAgKTsKICAgICAgdGFuZ2VudE1hdHJpeCA9IE1hdHJpeDNfZGVmYXVsdC5mcm9tUXVhdGVybmlvbihyb3RhdGlvbiwgdGFuZ2VudE1hdHJpeCk7CiAgICB9IGVsc2UgewogICAgICB0ZXh0dXJlTWF0cml4ID0gTWF0cml4M19kZWZhdWx0LmNsb25lKE1hdHJpeDNfZGVmYXVsdC5JREVOVElUWSwgdGV4dHVyZU1hdHJpeCk7CiAgICAgIHRhbmdlbnRNYXRyaXggPSBNYXRyaXgzX2RlZmF1bHQuY2xvbmUoTWF0cml4M19kZWZhdWx0LklERU5USVRZLCB0YW5nZW50TWF0cml4KTsKICAgIH0KICAgIGNvbnN0IG1pblRleENvb3JkID0gQ2FydGVzaWFuMl9kZWZhdWx0LmZyb21FbGVtZW50cygKICAgICAgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLAogICAgICBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksCiAgICAgIHNjcmF0Y2hNaW5UZXhDb29yZAogICAgKTsKICAgIGNvbnN0IG1heFRleENvb3JkID0gQ2FydGVzaWFuMl9kZWZhdWx0LmZyb21FbGVtZW50cygKICAgICAgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLAogICAgICBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksCiAgICAgIHNjcmF0Y2hNYXhUZXhDb29yZAogICAgKTsKICAgIGxldCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgY29uc3QgYm90dG9tT2Zmc2V0ID0gZXh0cnVkZSA/IGxlbmd0aCA6IDA7CiAgICBjb25zdCBzdE9mZnNldCA9IGJvdHRvbU9mZnNldCAvIDMgKiAyOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMykgewogICAgICBjb25zdCBpMSA9IGkgKyAxOwogICAgICBjb25zdCBpMiA9IGkgKyAyOwogICAgICBjb25zdCBwb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCBpLCBzY3JhdGNoQ2FydGVzaWFuMTMpOwogICAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgICAgY29uc3Qgcm90YXRlZFBvaW50ID0gTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IoCiAgICAgICAgICB0ZXh0dXJlTWF0cml4LAogICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuMjQKICAgICAgICApOwogICAgICAgIGNvbnN0IHByb2plY3RlZFBvaW50ID0gcHJvamVjdGlvbi5wcm9qZWN0KAogICAgICAgICAgZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKHJvdGF0ZWRQb2ludCwgc2NyYXRjaENhcnRvZ3JhcGhpYzIpLAogICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjM1CiAgICAgICAgKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocHJvamVjdGVkUG9pbnQsIHByb2plY3RlZENlbnRlciwgcHJvamVjdGVkUG9pbnQpOwogICAgICAgIHRleENvb3JkU2NyYXRjaC54ID0gKHByb2plY3RlZFBvaW50LnggKyBzZW1pTWFqb3JBeGlzKSAvICgyICogc2VtaU1ham9yQXhpcyk7CiAgICAgICAgdGV4Q29vcmRTY3JhdGNoLnkgPSAocHJvamVjdGVkUG9pbnQueSArIHNlbWlNaW5vckF4aXMpIC8gKDIgKiBzZW1pTWlub3JBeGlzKTsKICAgICAgICBtaW5UZXhDb29yZC54ID0gTWF0aC5taW4odGV4Q29vcmRTY3JhdGNoLngsIG1pblRleENvb3JkLngpOwogICAgICAgIG1pblRleENvb3JkLnkgPSBNYXRoLm1pbih0ZXhDb29yZFNjcmF0Y2gueSwgbWluVGV4Q29vcmQueSk7CiAgICAgICAgbWF4VGV4Q29vcmQueCA9IE1hdGgubWF4KHRleENvb3JkU2NyYXRjaC54LCBtYXhUZXhDb29yZC54KTsKICAgICAgICBtYXhUZXhDb29yZC55ID0gTWF0aC5tYXgodGV4Q29vcmRTY3JhdGNoLnksIG1heFRleENvb3JkLnkpOwogICAgICAgIGlmIChleHRydWRlKSB7CiAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbdGV4dHVyZUNvb3JkSW5kZXggKyBzdE9mZnNldF0gPSB0ZXhDb29yZFNjcmF0Y2gueDsKICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlc1t0ZXh0dXJlQ29vcmRJbmRleCArIDEgKyBzdE9mZnNldF0gPSB0ZXhDb29yZFNjcmF0Y2gueTsKICAgICAgICB9CiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW3RleHR1cmVDb29yZEluZGV4KytdID0gdGV4Q29vcmRTY3JhdGNoLng7CiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW3RleHR1cmVDb29yZEluZGV4KytdID0gdGV4Q29vcmRTY3JhdGNoLnk7CiAgICAgIH0KICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwgfHwgdmVydGV4Rm9ybWF0LnRhbmdlbnQgfHwgdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCB8fCBzaGFkb3dWb2x1bWUpIHsKICAgICAgICBub3JtYWwyID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwb3NpdGlvbiwgbm9ybWFsMik7CiAgICAgICAgaWYgKHNoYWRvd1ZvbHVtZSkgewogICAgICAgICAgZXh0cnVkZU5vcm1hbHNbaSArIGJvdHRvbU9mZnNldF0gPSAtbm9ybWFsMi54OwogICAgICAgICAgZXh0cnVkZU5vcm1hbHNbaTEgKyBib3R0b21PZmZzZXRdID0gLW5vcm1hbDIueTsKICAgICAgICAgIGV4dHJ1ZGVOb3JtYWxzW2kyICsgYm90dG9tT2Zmc2V0XSA9IC1ub3JtYWwyLno7CiAgICAgICAgfQogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsIHx8IHZlcnRleEZvcm1hdC50YW5nZW50IHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCB8fCB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgICAgIHRhbmdlbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9aLCBub3JtYWwyLCB0YW5nZW50KSwKICAgICAgICAgICAgICB0YW5nZW50CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKHRhbmdlbnRNYXRyaXgsIHRhbmdlbnQsIHRhbmdlbnQpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgICAgICAgbm9ybWFsc1tpXSA9IG5vcm1hbDIueDsKICAgICAgICAgICAgbm9ybWFsc1tpMV0gPSBub3JtYWwyLnk7CiAgICAgICAgICAgIG5vcm1hbHNbaTJdID0gbm9ybWFsMi56OwogICAgICAgICAgICBpZiAoZXh0cnVkZSkgewogICAgICAgICAgICAgIG5vcm1hbHNbaSArIGJvdHRvbU9mZnNldF0gPSAtbm9ybWFsMi54OwogICAgICAgICAgICAgIG5vcm1hbHNbaTEgKyBib3R0b21PZmZzZXRdID0gLW5vcm1hbDIueTsKICAgICAgICAgICAgICBub3JtYWxzW2kyICsgYm90dG9tT2Zmc2V0XSA9IC1ub3JtYWwyLno7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICAgICAgICB0YW5nZW50c1tpXSA9IHRhbmdlbnQueDsKICAgICAgICAgICAgdGFuZ2VudHNbaTFdID0gdGFuZ2VudC55OwogICAgICAgICAgICB0YW5nZW50c1tpMl0gPSB0YW5nZW50Lno7CiAgICAgICAgICAgIGlmIChleHRydWRlKSB7CiAgICAgICAgICAgICAgdGFuZ2VudHNbaSArIGJvdHRvbU9mZnNldF0gPSAtdGFuZ2VudC54OwogICAgICAgICAgICAgIHRhbmdlbnRzW2kxICsgYm90dG9tT2Zmc2V0XSA9IC10YW5nZW50Lnk7CiAgICAgICAgICAgICAgdGFuZ2VudHNbaTIgKyBib3R0b21PZmZzZXRdID0gLXRhbmdlbnQuejsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgICAgYml0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3Mobm9ybWFsMiwgdGFuZ2VudCwgYml0YW5nZW50KSwKICAgICAgICAgICAgICBiaXRhbmdlbnQKICAgICAgICAgICAgKTsKICAgICAgICAgICAgYml0YW5nZW50c1tpXSA9IGJpdGFuZ2VudC54OwogICAgICAgICAgICBiaXRhbmdlbnRzW2kxXSA9IGJpdGFuZ2VudC55OwogICAgICAgICAgICBiaXRhbmdlbnRzW2kyXSA9IGJpdGFuZ2VudC56OwogICAgICAgICAgICBpZiAoZXh0cnVkZSkgewogICAgICAgICAgICAgIGJpdGFuZ2VudHNbaSArIGJvdHRvbU9mZnNldF0gPSBiaXRhbmdlbnQueDsKICAgICAgICAgICAgICBiaXRhbmdlbnRzW2kxICsgYm90dG9tT2Zmc2V0XSA9IGJpdGFuZ2VudC55OwogICAgICAgICAgICAgIGJpdGFuZ2VudHNbaTIgKyBib3R0b21PZmZzZXRdID0gYml0YW5nZW50Lno7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgbGVuZ3RoID0gdGV4dHVyZUNvb3JkaW5hdGVzLmxlbmd0aDsKICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBsZW5ndGg7IGsgKz0gMikgewogICAgICAgIHRleHR1cmVDb29yZGluYXRlc1trXSA9ICh0ZXh0dXJlQ29vcmRpbmF0ZXNba10gLSBtaW5UZXhDb29yZC54KSAvIChtYXhUZXhDb29yZC54IC0gbWluVGV4Q29vcmQueCk7CiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW2sgKyAxXSA9ICh0ZXh0dXJlQ29vcmRpbmF0ZXNbayArIDFdIC0gbWluVGV4Q29vcmQueSkgLyAobWF4VGV4Q29vcmQueSAtIG1pblRleENvb3JkLnkpOwogICAgICB9CiAgICB9CiAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KCk7CiAgICBpZiAodmVydGV4Rm9ybWF0LnBvc2l0aW9uKSB7CiAgICAgIGNvbnN0IGZpbmFsUG9zaXRpb25zID0gRWxsaXBzZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnJhaXNlUG9zaXRpb25zVG9IZWlnaHQoCiAgICAgICAgcG9zaXRpb25zLAogICAgICAgIG9wdGlvbnMsCiAgICAgICAgZXh0cnVkZQogICAgICApOwogICAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgIHZhbHVlczogZmluYWxQb3NpdGlvbnMKICAgICAgfSk7CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgIGF0dHJpYnV0ZXMuc3QgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMiwKICAgICAgICB2YWx1ZXM6IHRleHR1cmVDb29yZGluYXRlcwogICAgICB9KTsKICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgIGF0dHJpYnV0ZXMubm9ybWFsID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBub3JtYWxzCiAgICAgIH0pOwogICAgfQogICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgIGF0dHJpYnV0ZXMudGFuZ2VudCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgIHZhbHVlczogdGFuZ2VudHMKICAgICAgfSk7CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICBhdHRyaWJ1dGVzLmJpdGFuZ2VudCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgIHZhbHVlczogYml0YW5nZW50cwogICAgICB9KTsKICAgIH0KICAgIGlmIChzaGFkb3dWb2x1bWUpIHsKICAgICAgYXR0cmlidXRlcy5leHRydWRlRGlyZWN0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBleHRydWRlTm9ybWFscwogICAgICB9KTsKICAgIH0KICAgIGlmIChleHRydWRlICYmIGRlZmluZWRfZGVmYXVsdChvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSkpIHsKICAgICAgbGV0IG9mZnNldEF0dHJpYnV0ZSA9IG5ldyBVaW50OEFycmF5KHNpemUpOwogICAgICBpZiAob3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuVE9QKSB7CiAgICAgICAgb2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlLmZpbGwoMSwgMCwgc2l6ZSAvIDIpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnN0IG9mZnNldFZhbHVlID0gb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuTk9ORSA/IDAgOiAxOwogICAgICAgIG9mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZS5maWxsKG9mZnNldFZhbHVlKTsKICAgICAgfQogICAgICBhdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICB2YWx1ZXM6IG9mZnNldEF0dHJpYnV0ZQogICAgICB9KTsKICAgIH0KICAgIHJldHVybiBhdHRyaWJ1dGVzOwogIH0KICBmdW5jdGlvbiB0b3BJbmRpY2VzKG51bVB0cykgewogICAgY29uc3QgaW5kaWNlcyA9IG5ldyBBcnJheSgxMiAqIChudW1QdHMgKiAobnVtUHRzICsgMSkpIC0gNik7CiAgICBsZXQgaW5kaWNlc0luZGV4ID0gMDsKICAgIGxldCBwcmV2SW5kZXg7CiAgICBsZXQgbnVtSW50ZXJpb3I7CiAgICBsZXQgcG9zaXRpb25JbmRleDsKICAgIGxldCBpOwogICAgbGV0IGo7CiAgICBwcmV2SW5kZXggPSAwOwogICAgcG9zaXRpb25JbmRleCA9IDE7CiAgICBmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcG9zaXRpb25JbmRleCsrOwogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHByZXZJbmRleDsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwb3NpdGlvbkluZGV4OwogICAgfQogICAgZm9yIChpID0gMjsgaSA8IG51bVB0cyArIDE7ICsraSkgewogICAgICBwb3NpdGlvbkluZGV4ID0gaSAqIChpICsgMSkgLSAxOwogICAgICBwcmV2SW5kZXggPSAoaSAtIDEpICogaSAtIDE7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcG9zaXRpb25JbmRleCsrOwogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHByZXZJbmRleDsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwb3NpdGlvbkluZGV4OwogICAgICBudW1JbnRlcmlvciA9IDIgKiBpOwogICAgICBmb3IgKGogPSAwOyBqIDwgbnVtSW50ZXJpb3IgLSAxOyArK2opIHsKICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHBvc2l0aW9uSW5kZXg7CiAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwcmV2SW5kZXgrKzsKICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHByZXZJbmRleDsKICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHBvc2l0aW9uSW5kZXgrKzsKICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHByZXZJbmRleDsKICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHBvc2l0aW9uSW5kZXg7CiAgICAgIH0KICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwb3NpdGlvbkluZGV4Kys7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcHJldkluZGV4OwogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHBvc2l0aW9uSW5kZXg7CiAgICB9CiAgICBudW1JbnRlcmlvciA9IG51bVB0cyAqIDI7CiAgICArK3Bvc2l0aW9uSW5kZXg7CiAgICArK3ByZXZJbmRleDsKICAgIGZvciAoaSA9IDA7IGkgPCBudW1JbnRlcmlvciAtIDE7ICsraSkgewogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHBvc2l0aW9uSW5kZXg7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcHJldkluZGV4Kys7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcHJldkluZGV4OwogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHBvc2l0aW9uSW5kZXgrKzsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwcmV2SW5kZXg7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcG9zaXRpb25JbmRleDsKICAgIH0KICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcG9zaXRpb25JbmRleDsKICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcHJldkluZGV4Kys7CiAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHByZXZJbmRleDsKICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcG9zaXRpb25JbmRleCsrOwogICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwcmV2SW5kZXgrKzsKICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcHJldkluZGV4OwogICAgKytwcmV2SW5kZXg7CiAgICBmb3IgKGkgPSBudW1QdHMgLSAxOyBpID4gMTsgLS1pKSB7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcHJldkluZGV4Kys7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcHJldkluZGV4OwogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHBvc2l0aW9uSW5kZXg7CiAgICAgIG51bUludGVyaW9yID0gMiAqIGk7CiAgICAgIGZvciAoaiA9IDA7IGogPCBudW1JbnRlcmlvciAtIDE7ICsraikgewogICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcG9zaXRpb25JbmRleDsKICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHByZXZJbmRleCsrOwogICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcHJldkluZGV4OwogICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcG9zaXRpb25JbmRleCsrOwogICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcHJldkluZGV4OwogICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcG9zaXRpb25JbmRleDsKICAgICAgfQogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHByZXZJbmRleCsrOwogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHByZXZJbmRleCsrOwogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHBvc2l0aW9uSW5kZXgrKzsKICAgIH0KICAgIGZvciAoaSA9IDA7IGkgPCAzOyBpKyspIHsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwcmV2SW5kZXgrKzsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwcmV2SW5kZXg7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcG9zaXRpb25JbmRleDsKICAgIH0KICAgIHJldHVybiBpbmRpY2VzOwogIH0KICBmdW5jdGlvbiBjb21wdXRlRWxsaXBzZShvcHRpb25zKSB7CiAgICBjb25zdCBjZW50ZXIgPSBvcHRpb25zLmNlbnRlcjsKICAgIGJvdW5kaW5nU3BoZXJlQ2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgIG9wdGlvbnMuZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChjZW50ZXIsIGJvdW5kaW5nU3BoZXJlQ2VudGVyKSwKICAgICAgb3B0aW9ucy5oZWlnaHQsCiAgICAgIGJvdW5kaW5nU3BoZXJlQ2VudGVyCiAgICApOwogICAgYm91bmRpbmdTcGhlcmVDZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICBjZW50ZXIsCiAgICAgIGJvdW5kaW5nU3BoZXJlQ2VudGVyLAogICAgICBib3VuZGluZ1NwaGVyZUNlbnRlcgogICAgKTsKICAgIGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQoCiAgICAgIGJvdW5kaW5nU3BoZXJlQ2VudGVyLAogICAgICBvcHRpb25zLnNlbWlNYWpvckF4aXMKICAgICk7CiAgICBjb25zdCBjZXAgPSBFbGxpcHNlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZUVsbGlwc2VQb3NpdGlvbnMoCiAgICAgIG9wdGlvbnMsCiAgICAgIHRydWUsCiAgICAgIGZhbHNlCiAgICApOwogICAgY29uc3QgcG9zaXRpb25zID0gY2VwLnBvc2l0aW9uczsKICAgIGNvbnN0IG51bVB0cyA9IGNlcC5udW1QdHM7CiAgICBjb25zdCBhdHRyaWJ1dGVzID0gY29tcHV0ZVRvcEJvdHRvbUF0dHJpYnV0ZXMocG9zaXRpb25zLCBvcHRpb25zLCBmYWxzZSk7CiAgICBsZXQgaW5kaWNlcyA9IHRvcEluZGljZXMobnVtUHRzKTsKICAgIGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShwb3NpdGlvbnMubGVuZ3RoIC8gMywgaW5kaWNlcyk7CiAgICByZXR1cm4gewogICAgICBib3VuZGluZ1NwaGVyZSwKICAgICAgYXR0cmlidXRlcywKICAgICAgaW5kaWNlcwogICAgfTsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZVdhbGxBdHRyaWJ1dGVzKHBvc2l0aW9ucywgb3B0aW9ucykgewogICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gb3B0aW9ucy52ZXJ0ZXhGb3JtYXQ7CiAgICBjb25zdCBjZW50ZXIgPSBvcHRpb25zLmNlbnRlcjsKICAgIGNvbnN0IHNlbWlNYWpvckF4aXMgPSBvcHRpb25zLnNlbWlNYWpvckF4aXM7CiAgICBjb25zdCBzZW1pTWlub3JBeGlzID0gb3B0aW9ucy5zZW1pTWlub3JBeGlzOwogICAgY29uc3QgZWxsaXBzb2lkID0gb3B0aW9ucy5lbGxpcHNvaWQ7CiAgICBjb25zdCBoZWlnaHQgPSBvcHRpb25zLmhlaWdodDsKICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gb3B0aW9ucy5leHRydWRlZEhlaWdodDsKICAgIGNvbnN0IHN0Um90YXRpb24gPSBvcHRpb25zLnN0Um90YXRpb247CiAgICBjb25zdCBzaXplID0gcG9zaXRpb25zLmxlbmd0aCAvIDMgKiAyOwogICAgY29uc3QgZmluYWxQb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KHNpemUgKiAzKTsKICAgIGNvbnN0IHRleHR1cmVDb29yZGluYXRlcyA9IHZlcnRleEZvcm1hdC5zdCA/IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDIpIDogdm9pZCAwOwogICAgY29uc3Qgbm9ybWFscyA9IHZlcnRleEZvcm1hdC5ub3JtYWwgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiAzKSA6IHZvaWQgMDsKICAgIGNvbnN0IHRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LnRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiAzKSA6IHZvaWQgMDsKICAgIGNvbnN0IGJpdGFuZ2VudHMgPSB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50ID8gbmV3IEZsb2F0MzJBcnJheShzaXplICogMykgOiB2b2lkIDA7CiAgICBjb25zdCBzaGFkb3dWb2x1bWUgPSBvcHRpb25zLnNoYWRvd1ZvbHVtZTsKICAgIGNvbnN0IGV4dHJ1ZGVOb3JtYWxzID0gc2hhZG93Vm9sdW1lID8gbmV3IEZsb2F0MzJBcnJheShzaXplICogMykgOiB2b2lkIDA7CiAgICBsZXQgdGV4dHVyZUNvb3JkSW5kZXggPSAwOwogICAgbGV0IG5vcm1hbDIgPSBzY3JhdGNoTm9ybWFsMzsKICAgIGxldCB0YW5nZW50ID0gc2NyYXRjaFRhbmdlbnQ7CiAgICBsZXQgYml0YW5nZW50ID0gc2NyYXRjaEJpdGFuZ2VudDsKICAgIGNvbnN0IHByb2plY3Rpb24gPSBuZXcgR2VvZ3JhcGhpY1Byb2plY3Rpb25fZGVmYXVsdChlbGxpcHNvaWQpOwogICAgY29uc3QgcHJvamVjdGVkQ2VudGVyID0gcHJvamVjdGlvbi5wcm9qZWN0KAogICAgICBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoY2VudGVyLCBzY3JhdGNoQ2FydG9ncmFwaGljMiksCiAgICAgIHByb2plY3RlZENlbnRlclNjcmF0Y2gKICAgICk7CiAgICBjb25zdCBnZW9kZXRpY05vcm1hbCA9IGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKAogICAgICBjZW50ZXIsCiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xMwogICAgKTsKICAgIGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwoZ2VvZGV0aWNOb3JtYWwsIGdlb2RldGljTm9ybWFsKTsKICAgIGNvbnN0IHJvdGF0aW9uID0gUXVhdGVybmlvbl9kZWZhdWx0LmZyb21BeGlzQW5nbGUoCiAgICAgIGdlb2RldGljTm9ybWFsLAogICAgICBzdFJvdGF0aW9uLAogICAgICBxdWF0ZXJuaW9uU2NyYXRjaAogICAgKTsKICAgIGNvbnN0IHRleHR1cmVNYXRyaXggPSBNYXRyaXgzX2RlZmF1bHQuZnJvbVF1YXRlcm5pb24ocm90YXRpb24sIHRleHR1cmVNYXRyaXhTY3JhdGNoKTsKICAgIGNvbnN0IG1pblRleENvb3JkID0gQ2FydGVzaWFuMl9kZWZhdWx0LmZyb21FbGVtZW50cygKICAgICAgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLAogICAgICBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksCiAgICAgIHNjcmF0Y2hNaW5UZXhDb29yZAogICAgKTsKICAgIGNvbnN0IG1heFRleENvb3JkID0gQ2FydGVzaWFuMl9kZWZhdWx0LmZyb21FbGVtZW50cygKICAgICAgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLAogICAgICBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksCiAgICAgIHNjcmF0Y2hNYXhUZXhDb29yZAogICAgKTsKICAgIGxldCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgY29uc3Qgc3RPZmZzZXQgPSBsZW5ndGggLyAzICogMjsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDMpIHsKICAgICAgY29uc3QgaTEgPSBpICsgMTsKICAgICAgY29uc3QgaTIgPSBpICsgMjsKICAgICAgbGV0IHBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGksIHNjcmF0Y2hDYXJ0ZXNpYW4xMyk7CiAgICAgIGxldCBleHRydWRlZFBvc2l0aW9uOwogICAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgICAgY29uc3Qgcm90YXRlZFBvaW50ID0gTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IoCiAgICAgICAgICB0ZXh0dXJlTWF0cml4LAogICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuMjQKICAgICAgICApOwogICAgICAgIGNvbnN0IHByb2plY3RlZFBvaW50ID0gcHJvamVjdGlvbi5wcm9qZWN0KAogICAgICAgICAgZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKHJvdGF0ZWRQb2ludCwgc2NyYXRjaENhcnRvZ3JhcGhpYzIpLAogICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjM1CiAgICAgICAgKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocHJvamVjdGVkUG9pbnQsIHByb2plY3RlZENlbnRlciwgcHJvamVjdGVkUG9pbnQpOwogICAgICAgIHRleENvb3JkU2NyYXRjaC54ID0gKHByb2plY3RlZFBvaW50LnggKyBzZW1pTWFqb3JBeGlzKSAvICgyICogc2VtaU1ham9yQXhpcyk7CiAgICAgICAgdGV4Q29vcmRTY3JhdGNoLnkgPSAocHJvamVjdGVkUG9pbnQueSArIHNlbWlNaW5vckF4aXMpIC8gKDIgKiBzZW1pTWlub3JBeGlzKTsKICAgICAgICBtaW5UZXhDb29yZC54ID0gTWF0aC5taW4odGV4Q29vcmRTY3JhdGNoLngsIG1pblRleENvb3JkLngpOwogICAgICAgIG1pblRleENvb3JkLnkgPSBNYXRoLm1pbih0ZXhDb29yZFNjcmF0Y2gueSwgbWluVGV4Q29vcmQueSk7CiAgICAgICAgbWF4VGV4Q29vcmQueCA9IE1hdGgubWF4KHRleENvb3JkU2NyYXRjaC54LCBtYXhUZXhDb29yZC54KTsKICAgICAgICBtYXhUZXhDb29yZC55ID0gTWF0aC5tYXgodGV4Q29vcmRTY3JhdGNoLnksIG1heFRleENvb3JkLnkpOwogICAgICAgIHRleHR1cmVDb29yZGluYXRlc1t0ZXh0dXJlQ29vcmRJbmRleCArIHN0T2Zmc2V0XSA9IHRleENvb3JkU2NyYXRjaC54OwogICAgICAgIHRleHR1cmVDb29yZGluYXRlc1t0ZXh0dXJlQ29vcmRJbmRleCArIDEgKyBzdE9mZnNldF0gPSB0ZXhDb29yZFNjcmF0Y2gueTsKICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbdGV4dHVyZUNvb3JkSW5kZXgrK10gPSB0ZXhDb29yZFNjcmF0Y2gueDsKICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbdGV4dHVyZUNvb3JkSW5kZXgrK10gPSB0ZXhDb29yZFNjcmF0Y2gueTsKICAgICAgfQogICAgICBwb3NpdGlvbiA9IGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKHBvc2l0aW9uLCBwb3NpdGlvbik7CiAgICAgIGV4dHJ1ZGVkUG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocG9zaXRpb24sIHNjcmF0Y2hDYXJ0ZXNpYW4yNCk7CiAgICAgIG5vcm1hbDIgPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKHBvc2l0aW9uLCBub3JtYWwyKTsKICAgICAgaWYgKHNoYWRvd1ZvbHVtZSkgewogICAgICAgIGV4dHJ1ZGVOb3JtYWxzW2kgKyBsZW5ndGhdID0gLW5vcm1hbDIueDsKICAgICAgICBleHRydWRlTm9ybWFsc1tpMSArIGxlbmd0aF0gPSAtbm9ybWFsMi55OwogICAgICAgIGV4dHJ1ZGVOb3JtYWxzW2kyICsgbGVuZ3RoXSA9IC1ub3JtYWwyLno7CiAgICAgIH0KICAgICAgbGV0IHNjYWxlZE5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgIG5vcm1hbDIsCiAgICAgICAgaGVpZ2h0LAogICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW40CiAgICAgICk7CiAgICAgIHBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZChwb3NpdGlvbiwgc2NhbGVkTm9ybWFsLCBwb3NpdGlvbik7CiAgICAgIHNjYWxlZE5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgIG5vcm1hbDIsCiAgICAgICAgZXh0cnVkZWRIZWlnaHQsCiAgICAgICAgc2NhbGVkTm9ybWFsCiAgICAgICk7CiAgICAgIGV4dHJ1ZGVkUG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICAgIGV4dHJ1ZGVkUG9zaXRpb24sCiAgICAgICAgc2NhbGVkTm9ybWFsLAogICAgICAgIGV4dHJ1ZGVkUG9zaXRpb24KICAgICAgKTsKICAgICAgaWYgKHZlcnRleEZvcm1hdC5wb3NpdGlvbikgewogICAgICAgIGZpbmFsUG9zaXRpb25zW2kgKyBsZW5ndGhdID0gZXh0cnVkZWRQb3NpdGlvbi54OwogICAgICAgIGZpbmFsUG9zaXRpb25zW2kxICsgbGVuZ3RoXSA9IGV4dHJ1ZGVkUG9zaXRpb24ueTsKICAgICAgICBmaW5hbFBvc2l0aW9uc1tpMiArIGxlbmd0aF0gPSBleHRydWRlZFBvc2l0aW9uLno7CiAgICAgICAgZmluYWxQb3NpdGlvbnNbaV0gPSBwb3NpdGlvbi54OwogICAgICAgIGZpbmFsUG9zaXRpb25zW2kxXSA9IHBvc2l0aW9uLnk7CiAgICAgICAgZmluYWxQb3NpdGlvbnNbaTJdID0gcG9zaXRpb24uejsKICAgICAgfQogICAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCB8fCB2ZXJ0ZXhGb3JtYXQudGFuZ2VudCB8fCB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgYml0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG5vcm1hbDIsIGJpdGFuZ2VudCk7CiAgICAgICAgY29uc3QgbmV4dCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICAoaSArIDMpICUgbGVuZ3RoLAogICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjQKICAgICAgICApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChuZXh0LCBwb3NpdGlvbiwgbmV4dCk7CiAgICAgICAgY29uc3QgYm90dG9tID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgICAgZXh0cnVkZWRQb3NpdGlvbiwKICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjM1CiAgICAgICAgKTsKICAgICAgICBub3JtYWwyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhib3R0b20sIG5leHQsIG5vcm1hbDIpLAogICAgICAgICAgbm9ybWFsMgogICAgICAgICk7CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgICAgIG5vcm1hbHNbaV0gPSBub3JtYWwyLng7CiAgICAgICAgICBub3JtYWxzW2kxXSA9IG5vcm1hbDIueTsKICAgICAgICAgIG5vcm1hbHNbaTJdID0gbm9ybWFsMi56OwogICAgICAgICAgbm9ybWFsc1tpICsgbGVuZ3RoXSA9IG5vcm1hbDIueDsKICAgICAgICAgIG5vcm1hbHNbaTEgKyBsZW5ndGhdID0gbm9ybWFsMi55OwogICAgICAgICAgbm9ybWFsc1tpMiArIGxlbmd0aF0gPSBub3JtYWwyLno7CiAgICAgICAgfQogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICAgICAgdGFuZ2VudCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhiaXRhbmdlbnQsIG5vcm1hbDIsIHRhbmdlbnQpLAogICAgICAgICAgICB0YW5nZW50CiAgICAgICAgICApOwogICAgICAgICAgdGFuZ2VudHNbaV0gPSB0YW5nZW50Lng7CiAgICAgICAgICB0YW5nZW50c1tpMV0gPSB0YW5nZW50Lnk7CiAgICAgICAgICB0YW5nZW50c1tpMl0gPSB0YW5nZW50Lno7CiAgICAgICAgICB0YW5nZW50c1tpICsgbGVuZ3RoXSA9IHRhbmdlbnQueDsKICAgICAgICAgIHRhbmdlbnRzW2kgKyAxICsgbGVuZ3RoXSA9IHRhbmdlbnQueTsKICAgICAgICAgIHRhbmdlbnRzW2kgKyAyICsgbGVuZ3RoXSA9IHRhbmdlbnQuejsKICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgIGJpdGFuZ2VudHNbaV0gPSBiaXRhbmdlbnQueDsKICAgICAgICAgIGJpdGFuZ2VudHNbaTFdID0gYml0YW5nZW50Lnk7CiAgICAgICAgICBiaXRhbmdlbnRzW2kyXSA9IGJpdGFuZ2VudC56OwogICAgICAgICAgYml0YW5nZW50c1tpICsgbGVuZ3RoXSA9IGJpdGFuZ2VudC54OwogICAgICAgICAgYml0YW5nZW50c1tpMSArIGxlbmd0aF0gPSBiaXRhbmdlbnQueTsKICAgICAgICAgIGJpdGFuZ2VudHNbaTIgKyBsZW5ndGhdID0gYml0YW5nZW50Lno7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgIGxlbmd0aCA9IHRleHR1cmVDb29yZGluYXRlcy5sZW5ndGg7CiAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgbGVuZ3RoOyBrICs9IDIpIHsKICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNba10gPSAodGV4dHVyZUNvb3JkaW5hdGVzW2tdIC0gbWluVGV4Q29vcmQueCkgLyAobWF4VGV4Q29vcmQueCAtIG1pblRleENvb3JkLngpOwogICAgICAgIHRleHR1cmVDb29yZGluYXRlc1trICsgMV0gPSAodGV4dHVyZUNvb3JkaW5hdGVzW2sgKyAxXSAtIG1pblRleENvb3JkLnkpIC8gKG1heFRleENvb3JkLnkgLSBtaW5UZXhDb29yZC55KTsKICAgICAgfQogICAgfQogICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCgpOwogICAgaWYgKHZlcnRleEZvcm1hdC5wb3NpdGlvbikgewogICAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgIHZhbHVlczogZmluYWxQb3NpdGlvbnMKICAgICAgfSk7CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgIGF0dHJpYnV0ZXMuc3QgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMiwKICAgICAgICB2YWx1ZXM6IHRleHR1cmVDb29yZGluYXRlcwogICAgICB9KTsKICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgIGF0dHJpYnV0ZXMubm9ybWFsID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBub3JtYWxzCiAgICAgIH0pOwogICAgfQogICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgIGF0dHJpYnV0ZXMudGFuZ2VudCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgIHZhbHVlczogdGFuZ2VudHMKICAgICAgfSk7CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICBhdHRyaWJ1dGVzLmJpdGFuZ2VudCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgIHZhbHVlczogYml0YW5nZW50cwogICAgICB9KTsKICAgIH0KICAgIGlmIChzaGFkb3dWb2x1bWUpIHsKICAgICAgYXR0cmlidXRlcy5leHRydWRlRGlyZWN0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBleHRydWRlTm9ybWFscwogICAgICB9KTsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUpKSB7CiAgICAgIGxldCBvZmZzZXRBdHRyaWJ1dGUgPSBuZXcgVWludDhBcnJheShzaXplKTsKICAgICAgaWYgKG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0LlRPUCkgewogICAgICAgIG9mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZS5maWxsKDEsIDAsIHNpemUgLyAyKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zdCBvZmZzZXRWYWx1ZSA9IG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0Lk5PTkUgPyAwIDogMTsKICAgICAgICBvZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUuZmlsbChvZmZzZXRWYWx1ZSk7CiAgICAgIH0KICAgICAgYXR0cmlidXRlcy5hcHBseU9mZnNldCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDEsCiAgICAgICAgdmFsdWVzOiBvZmZzZXRBdHRyaWJ1dGUKICAgICAgfSk7CiAgICB9CiAgICByZXR1cm4gYXR0cmlidXRlczsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZVdhbGxJbmRpY2VzKHBvc2l0aW9ucykgewogICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkobGVuZ3RoLCBsZW5ndGggKiA2KTsKICAgIGxldCBpbmRleCA9IDA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgIGNvbnN0IFVMID0gaTsKICAgICAgY29uc3QgTEwgPSBpICsgbGVuZ3RoOwogICAgICBjb25zdCBVUiA9IChVTCArIDEpICUgbGVuZ3RoOwogICAgICBjb25zdCBMUiA9IFVSICsgbGVuZ3RoOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gVUw7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMTDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IFVSOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gVVI7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMTDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IExSOwogICAgfQogICAgcmV0dXJuIGluZGljZXM7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVFeHRydWRlZEVsbGlwc2Uob3B0aW9ucykgewogICAgY29uc3QgY2VudGVyID0gb3B0aW9ucy5jZW50ZXI7CiAgICBjb25zdCBlbGxpcHNvaWQgPSBvcHRpb25zLmVsbGlwc29pZDsKICAgIGNvbnN0IHNlbWlNYWpvckF4aXMgPSBvcHRpb25zLnNlbWlNYWpvckF4aXM7CiAgICBsZXQgc2NhbGVkTm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgIGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwoY2VudGVyLCBzY3JhdGNoQ2FydGVzaWFuMTMpLAogICAgICBvcHRpb25zLmhlaWdodCwKICAgICAgc2NyYXRjaENhcnRlc2lhbjEzCiAgICApOwogICAgdG9wQm91bmRpbmdTcGhlcmUuY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZCgKICAgICAgY2VudGVyLAogICAgICBzY2FsZWROb3JtYWwsCiAgICAgIHRvcEJvdW5kaW5nU3BoZXJlLmNlbnRlcgogICAgKTsKICAgIHRvcEJvdW5kaW5nU3BoZXJlLnJhZGl1cyA9IHNlbWlNYWpvckF4aXM7CiAgICBzY2FsZWROb3JtYWwgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChjZW50ZXIsIHNjYWxlZE5vcm1hbCksCiAgICAgIG9wdGlvbnMuZXh0cnVkZWRIZWlnaHQsCiAgICAgIHNjYWxlZE5vcm1hbAogICAgKTsKICAgIGJvdHRvbUJvdW5kaW5nU3BoZXJlLmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgIGNlbnRlciwKICAgICAgc2NhbGVkTm9ybWFsLAogICAgICBib3R0b21Cb3VuZGluZ1NwaGVyZS5jZW50ZXIKICAgICk7CiAgICBib3R0b21Cb3VuZGluZ1NwaGVyZS5yYWRpdXMgPSBzZW1pTWFqb3JBeGlzOwogICAgY29uc3QgY2VwID0gRWxsaXBzZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVFbGxpcHNlUG9zaXRpb25zKAogICAgICBvcHRpb25zLAogICAgICB0cnVlLAogICAgICB0cnVlCiAgICApOwogICAgY29uc3QgcG9zaXRpb25zID0gY2VwLnBvc2l0aW9uczsKICAgIGNvbnN0IG51bVB0cyA9IGNlcC5udW1QdHM7CiAgICBjb25zdCBvdXRlclBvc2l0aW9ucyA9IGNlcC5vdXRlclBvc2l0aW9uczsKICAgIGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC51bmlvbigKICAgICAgdG9wQm91bmRpbmdTcGhlcmUsCiAgICAgIGJvdHRvbUJvdW5kaW5nU3BoZXJlCiAgICApOwogICAgY29uc3QgdG9wQm90dG9tQXR0cmlidXRlcyA9IGNvbXB1dGVUb3BCb3R0b21BdHRyaWJ1dGVzKAogICAgICBwb3NpdGlvbnMsCiAgICAgIG9wdGlvbnMsCiAgICAgIHRydWUKICAgICk7CiAgICBsZXQgaW5kaWNlcyA9IHRvcEluZGljZXMobnVtUHRzKTsKICAgIGNvbnN0IGxlbmd0aCA9IGluZGljZXMubGVuZ3RoOwogICAgaW5kaWNlcy5sZW5ndGggPSBsZW5ndGggKiAyOwogICAgY29uc3QgcG9zTGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAzKSB7CiAgICAgIGluZGljZXNbaSArIGxlbmd0aF0gPSBpbmRpY2VzW2kgKyAyXSArIHBvc0xlbmd0aDsKICAgICAgaW5kaWNlc1tpICsgMSArIGxlbmd0aF0gPSBpbmRpY2VzW2kgKyAxXSArIHBvc0xlbmd0aDsKICAgICAgaW5kaWNlc1tpICsgMiArIGxlbmd0aF0gPSBpbmRpY2VzW2ldICsgcG9zTGVuZ3RoOwogICAgfQogICAgY29uc3QgdG9wQm90dG9tSW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICBwb3NMZW5ndGggKiAyIC8gMywKICAgICAgaW5kaWNlcwogICAgKTsKICAgIGNvbnN0IHRvcEJvdHRvbUdlbyA9IG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgYXR0cmlidXRlczogdG9wQm90dG9tQXR0cmlidXRlcywKICAgICAgaW5kaWNlczogdG9wQm90dG9tSW5kaWNlcywKICAgICAgcHJpbWl0aXZlVHlwZTogUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlRSSUFOR0xFUwogICAgfSk7CiAgICBjb25zdCB3YWxsQXR0cmlidXRlcyA9IGNvbXB1dGVXYWxsQXR0cmlidXRlcyhvdXRlclBvc2l0aW9ucywgb3B0aW9ucyk7CiAgICBpbmRpY2VzID0gY29tcHV0ZVdhbGxJbmRpY2VzKG91dGVyUG9zaXRpb25zKTsKICAgIGNvbnN0IHdhbGxJbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgIG91dGVyUG9zaXRpb25zLmxlbmd0aCAqIDIgLyAzLAogICAgICBpbmRpY2VzCiAgICApOwogICAgY29uc3Qgd2FsbEdlbyA9IG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgYXR0cmlidXRlczogd2FsbEF0dHJpYnV0ZXMsCiAgICAgIGluZGljZXM6IHdhbGxJbmRpY2VzLAogICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTCiAgICB9KTsKICAgIGNvbnN0IGdlbyA9IEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5jb21iaW5lSW5zdGFuY2VzKFsKICAgICAgbmV3IEdlb21ldHJ5SW5zdGFuY2VfZGVmYXVsdCh7CiAgICAgICAgZ2VvbWV0cnk6IHRvcEJvdHRvbUdlbwogICAgICB9KSwKICAgICAgbmV3IEdlb21ldHJ5SW5zdGFuY2VfZGVmYXVsdCh7CiAgICAgICAgZ2VvbWV0cnk6IHdhbGxHZW8KICAgICAgfSkKICAgIF0pOwogICAgcmV0dXJuIHsKICAgICAgYm91bmRpbmdTcGhlcmUsCiAgICAgIGF0dHJpYnV0ZXM6IGdlb1swXS5hdHRyaWJ1dGVzLAogICAgICBpbmRpY2VzOiBnZW9bMF0uaW5kaWNlcwogICAgfTsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZVJlY3RhbmdsZShjZW50ZXIsIHNlbWlNYWpvckF4aXMsIHNlbWlNaW5vckF4aXMsIHJvdGF0aW9uLCBncmFudWxhcml0eSwgZWxsaXBzb2lkLCByZXN1bHQpIHsKICAgIGNvbnN0IGNlcCA9IEVsbGlwc2VHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlRWxsaXBzZVBvc2l0aW9ucygKICAgICAgewogICAgICAgIGNlbnRlciwKICAgICAgICBzZW1pTWFqb3JBeGlzLAogICAgICAgIHNlbWlNaW5vckF4aXMsCiAgICAgICAgcm90YXRpb24sCiAgICAgICAgZ3JhbnVsYXJpdHkKICAgICAgfSwKICAgICAgZmFsc2UsCiAgICAgIHRydWUKICAgICk7CiAgICBjb25zdCBwb3NpdGlvbnNGbGF0ID0gY2VwLm91dGVyUG9zaXRpb25zOwogICAgY29uc3QgcG9zaXRpb25zQ291bnQgPSBwb3NpdGlvbnNGbGF0Lmxlbmd0aCAvIDM7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgQXJyYXkocG9zaXRpb25zQ291bnQpOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbnNDb3VudDsgKytpKSB7CiAgICAgIHBvc2l0aW9uc1tpXSA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zRmxhdCwgaSAqIDMpOwogICAgfQogICAgY29uc3QgcmVjdGFuZ2xlID0gUmVjdGFuZ2xlX2RlZmF1bHQuZnJvbUNhcnRlc2lhbkFycmF5KHBvc2l0aW9ucywgZWxsaXBzb2lkLCByZXN1bHQpOwogICAgaWYgKHJlY3RhbmdsZS53aWR0aCA+IE1hdGhfZGVmYXVsdC5QSSkgewogICAgICByZWN0YW5nbGUubm9ydGggPSByZWN0YW5nbGUubm9ydGggPiAwID8gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPIC0gTWF0aF9kZWZhdWx0LkVQU0lMT043IDogcmVjdGFuZ2xlLm5vcnRoOwogICAgICByZWN0YW5nbGUuc291dGggPSByZWN0YW5nbGUuc291dGggPCAwID8gTWF0aF9kZWZhdWx0LkVQU0lMT043IC0gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPIDogcmVjdGFuZ2xlLnNvdXRoOwogICAgICByZWN0YW5nbGUuZWFzdCA9IE1hdGhfZGVmYXVsdC5QSTsKICAgICAgcmVjdGFuZ2xlLndlc3QgPSAtTWF0aF9kZWZhdWx0LlBJOwogICAgfQogICAgcmV0dXJuIHJlY3RhbmdsZTsKICB9CiAgZnVuY3Rpb24gRWxsaXBzZUdlb21ldHJ5KG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgY29uc3QgY2VudGVyID0gb3B0aW9ucy5jZW50ZXI7CiAgICBjb25zdCBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuV0dTODQpOwogICAgY29uc3Qgc2VtaU1ham9yQXhpcyA9IG9wdGlvbnMuc2VtaU1ham9yQXhpczsKICAgIGNvbnN0IHNlbWlNaW5vckF4aXMgPSBvcHRpb25zLnNlbWlNaW5vckF4aXM7CiAgICBjb25zdCBncmFudWxhcml0eSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFCiAgICApOwogICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy52ZXJ0ZXhGb3JtYXQsIFZlcnRleEZvcm1hdF9kZWZhdWx0LkRFRkFVTFQpOwogICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJvcHRpb25zLmNlbnRlciIsIGNlbnRlcik7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoIm9wdGlvbnMuc2VtaU1ham9yQXhpcyIsIHNlbWlNYWpvckF4aXMpOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJvcHRpb25zLnNlbWlNaW5vckF4aXMiLCBzZW1pTWlub3JBeGlzKTsKICAgIGlmIChzZW1pTWFqb3JBeGlzIDwgc2VtaU1pbm9yQXhpcykgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAic2VtaU1ham9yQXhpcyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgc2VtaU1pbm9yQXhpcy4iCiAgICAgICk7CiAgICB9CiAgICBpZiAoZ3JhbnVsYXJpdHkgPD0gMCkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZ3JhbnVsYXJpdHkgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyby4iKTsKICAgIH0KICAgIGNvbnN0IGhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuaGVpZ2h0LCAwKTsKICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5leHRydWRlZEhlaWdodCwgaGVpZ2h0KTsKICAgIHRoaXMuX2NlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjZW50ZXIpOwogICAgdGhpcy5fc2VtaU1ham9yQXhpcyA9IHNlbWlNYWpvckF4aXM7CiAgICB0aGlzLl9zZW1pTWlub3JBeGlzID0gc2VtaU1pbm9yQXhpczsKICAgIHRoaXMuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKGVsbGlwc29pZCk7CiAgICB0aGlzLl9yb3RhdGlvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMucm90YXRpb24sIDApOwogICAgdGhpcy5fc3RSb3RhdGlvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuc3RSb3RhdGlvbiwgMCk7CiAgICB0aGlzLl9oZWlnaHQgPSBNYXRoLm1heChleHRydWRlZEhlaWdodCwgaGVpZ2h0KTsKICAgIHRoaXMuX2dyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICB0aGlzLl92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSh2ZXJ0ZXhGb3JtYXQpOwogICAgdGhpcy5fZXh0cnVkZWRIZWlnaHQgPSBNYXRoLm1pbihleHRydWRlZEhlaWdodCwgaGVpZ2h0KTsKICAgIHRoaXMuX3NoYWRvd1ZvbHVtZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuc2hhZG93Vm9sdW1lLCBmYWxzZSk7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZUVsbGlwc2VHZW9tZXRyeSI7CiAgICB0aGlzLl9vZmZzZXRBdHRyaWJ1dGUgPSBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZTsKICAgIHRoaXMuX3JlY3RhbmdsZSA9IHZvaWQgMDsKICAgIHRoaXMuX3RleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHMgPSB2b2lkIDA7CiAgfQogIGZ1bmN0aW9uIHRleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHMoZWxsaXBzZUdlb21ldHJ5KSB7CiAgICBjb25zdCBzdFJvdGF0aW9uID0gLWVsbGlwc2VHZW9tZXRyeS5fc3RSb3RhdGlvbjsKICAgIGlmIChzdFJvdGF0aW9uID09PSAwKSB7CiAgICAgIHJldHVybiBbMCwgMCwgMCwgMSwgMSwgMF07CiAgICB9CiAgICBjb25zdCBjZXAgPSBFbGxpcHNlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZUVsbGlwc2VQb3NpdGlvbnMoCiAgICAgIHsKICAgICAgICBjZW50ZXI6IGVsbGlwc2VHZW9tZXRyeS5fY2VudGVyLAogICAgICAgIHNlbWlNYWpvckF4aXM6IGVsbGlwc2VHZW9tZXRyeS5fc2VtaU1ham9yQXhpcywKICAgICAgICBzZW1pTWlub3JBeGlzOiBlbGxpcHNlR2VvbWV0cnkuX3NlbWlNaW5vckF4aXMsCiAgICAgICAgcm90YXRpb246IGVsbGlwc2VHZW9tZXRyeS5fcm90YXRpb24sCiAgICAgICAgZ3JhbnVsYXJpdHk6IGVsbGlwc2VHZW9tZXRyeS5fZ3JhbnVsYXJpdHkKICAgICAgfSwKICAgICAgZmFsc2UsCiAgICAgIHRydWUKICAgICk7CiAgICBjb25zdCBwb3NpdGlvbnNGbGF0ID0gY2VwLm91dGVyUG9zaXRpb25zOwogICAgY29uc3QgcG9zaXRpb25zQ291bnQgPSBwb3NpdGlvbnNGbGF0Lmxlbmd0aCAvIDM7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgQXJyYXkocG9zaXRpb25zQ291bnQpOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbnNDb3VudDsgKytpKSB7CiAgICAgIHBvc2l0aW9uc1tpXSA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zRmxhdCwgaSAqIDMpOwogICAgfQogICAgY29uc3QgZWxsaXBzb2lkID0gZWxsaXBzZUdlb21ldHJ5Ll9lbGxpcHNvaWQ7CiAgICBjb25zdCBib3VuZGluZ1JlY3RhbmdsZSA9IGVsbGlwc2VHZW9tZXRyeS5yZWN0YW5nbGU7CiAgICByZXR1cm4gR2VvbWV0cnlfZGVmYXVsdC5fdGV4dHVyZUNvb3JkaW5hdGVSb3RhdGlvblBvaW50cygKICAgICAgcG9zaXRpb25zLAogICAgICBzdFJvdGF0aW9uLAogICAgICBlbGxpcHNvaWQsCiAgICAgIGJvdW5kaW5nUmVjdGFuZ2xlCiAgICApOwogIH0KICB2YXIgc2NyYXRjaENhcnRlc2lhbjEzLCBzY3JhdGNoQ2FydGVzaWFuMjQsIHNjcmF0Y2hDYXJ0ZXNpYW4zNSwgc2NyYXRjaENhcnRlc2lhbjQsIHRleENvb3JkU2NyYXRjaCwgdGV4dHVyZU1hdHJpeFNjcmF0Y2gsIHRhbmdlbnRNYXRyaXhTY3JhdGNoLCBxdWF0ZXJuaW9uU2NyYXRjaCwgc2NyYXRjaE5vcm1hbDMsIHNjcmF0Y2hUYW5nZW50LCBzY3JhdGNoQml0YW5nZW50LCBzY3JhdGNoQ2FydG9ncmFwaGljMiwgcHJvamVjdGVkQ2VudGVyU2NyYXRjaCwgc2NyYXRjaE1pblRleENvb3JkLCBzY3JhdGNoTWF4VGV4Q29vcmQsIGJvdW5kaW5nU3BoZXJlQ2VudGVyLCB0b3BCb3VuZGluZ1NwaGVyZSwgYm90dG9tQm91bmRpbmdTcGhlcmUsIHNjcmF0Y2hDZW50ZXIyLCBzY3JhdGNoRWxsaXBzb2lkLCBzY3JhdGNoVmVydGV4Rm9ybWF0Miwgc2NyYXRjaE9wdGlvbnMzLCBFbGxpcHNlR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9FbGxpcHNlR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0VsbGlwc2VHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9FbGxpcHNlR2VvbWV0cnlMaWJyYXJ5KCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfR2VvZ3JhcGhpY1Byb2plY3Rpb24oKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfR2VvbWV0cnlJbnN0YW5jZSgpOwogICAgICBpbml0X0dlb21ldHJ5T2Zmc2V0QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlQaXBlbGluZSgpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfTWF0cml4MygpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgaW5pdF9RdWF0ZXJuaW9uKCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfVmVydGV4Rm9ybWF0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjI0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuMzUgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW40ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB0ZXhDb29yZFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIHRleHR1cmVNYXRyaXhTY3JhdGNoID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICB0YW5nZW50TWF0cml4U2NyYXRjaCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgcXVhdGVybmlvblNjcmF0Y2ggPSBuZXcgUXVhdGVybmlvbl9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hOb3JtYWwzID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoVGFuZ2VudCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEJpdGFuZ2VudCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYzIgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgcHJvamVjdGVkQ2VudGVyU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE1pblRleENvb3JkID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTWF4VGV4Q29vcmQgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIGJvdW5kaW5nU3BoZXJlQ2VudGVyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB0b3BCb3VuZGluZ1NwaGVyZSA9IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KCk7CiAgICAgIGJvdHRvbUJvdW5kaW5nU3BoZXJlID0gbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQoKTsKICAgICAgRWxsaXBzZUdlb21ldHJ5LnBhY2tlZExlbmd0aCA9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyA5OwogICAgICBFbGxpcHNlR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2sodmFsdWUuX2NlbnRlciwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrKHZhbHVlLl9lbGxpcHNvaWQsIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrKHZhbHVlLl92ZXJ0ZXhGb3JtYXQsIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3NlbWlNYWpvckF4aXM7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9zZW1pTWlub3JBeGlzOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fcm90YXRpb247CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9zdFJvdGF0aW9uOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5faGVpZ2h0OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fZ3JhbnVsYXJpdHk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9leHRydWRlZEhlaWdodDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3NoYWRvd1ZvbHVtZSA/IDEgOiAwOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQodmFsdWUuX29mZnNldEF0dHJpYnV0ZSwgLTEpOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaENlbnRlcjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hFbGxpcHNvaWQgPSBuZXcgRWxsaXBzb2lkX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdDIgPSBuZXcgVmVydGV4Rm9ybWF0X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE9wdGlvbnMzID0gewogICAgICAgIGNlbnRlcjogc2NyYXRjaENlbnRlcjIsCiAgICAgICAgZWxsaXBzb2lkOiBzY3JhdGNoRWxsaXBzb2lkLAogICAgICAgIHZlcnRleEZvcm1hdDogc2NyYXRjaFZlcnRleEZvcm1hdDIsCiAgICAgICAgc2VtaU1ham9yQXhpczogdm9pZCAwLAogICAgICAgIHNlbWlNaW5vckF4aXM6IHZvaWQgMCwKICAgICAgICByb3RhdGlvbjogdm9pZCAwLAogICAgICAgIHN0Um90YXRpb246IHZvaWQgMCwKICAgICAgICBoZWlnaHQ6IHZvaWQgMCwKICAgICAgICBncmFudWxhcml0eTogdm9pZCAwLAogICAgICAgIGV4dHJ1ZGVkSGVpZ2h0OiB2b2lkIDAsCiAgICAgICAgc2hhZG93Vm9sdW1lOiB2b2lkIDAsCiAgICAgICAgb2Zmc2V0QXR0cmlidXRlOiB2b2lkIDAKICAgICAgfTsKICAgICAgRWxsaXBzZUdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCBjZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4LCBzY3JhdGNoQ2VudGVyMik7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgc2NyYXRjaEVsbGlwc29pZCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdDIKICAgICAgICApOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IHNlbWlNYWpvckF4aXMgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHNlbWlNaW5vckF4aXMgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHJvdGF0aW9uID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBzdFJvdGF0aW9uID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBoZWlnaHQgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgc2hhZG93Vm9sdW1lID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9PT0gMTsKICAgICAgICBjb25zdCBvZmZzZXRBdHRyaWJ1dGUgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczMuaGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMzLmV4dHJ1ZGVkSGVpZ2h0ID0gZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczMuZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMy5zdFJvdGF0aW9uID0gc3RSb3RhdGlvbjsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMy5yb3RhdGlvbiA9IHJvdGF0aW9uOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMzLnNlbWlNYWpvckF4aXMgPSBzZW1pTWFqb3JBeGlzOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMzLnNlbWlNaW5vckF4aXMgPSBzZW1pTWlub3JBeGlzOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMzLnNoYWRvd1ZvbHVtZSA9IHNoYWRvd1ZvbHVtZTsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMy5vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgICAgcmV0dXJuIG5ldyBFbGxpcHNlR2VvbWV0cnkoc2NyYXRjaE9wdGlvbnMzKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Ll9jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY2VudGVyLCByZXN1bHQuX2NlbnRlcik7CiAgICAgICAgcmVzdWx0Ll9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWQsIHJlc3VsdC5fZWxsaXBzb2lkKTsKICAgICAgICByZXN1bHQuX3ZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LmNsb25lKHZlcnRleEZvcm1hdCwgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQpOwogICAgICAgIHJlc3VsdC5fc2VtaU1ham9yQXhpcyA9IHNlbWlNYWpvckF4aXM7CiAgICAgICAgcmVzdWx0Ll9zZW1pTWlub3JBeGlzID0gc2VtaU1pbm9yQXhpczsKICAgICAgICByZXN1bHQuX3JvdGF0aW9uID0gcm90YXRpb247CiAgICAgICAgcmVzdWx0Ll9zdFJvdGF0aW9uID0gc3RSb3RhdGlvbjsKICAgICAgICByZXN1bHQuX2hlaWdodCA9IGhlaWdodDsKICAgICAgICByZXN1bHQuX2dyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICAgICAgcmVzdWx0Ll9leHRydWRlZEhlaWdodCA9IGV4dHJ1ZGVkSGVpZ2h0OwogICAgICAgIHJlc3VsdC5fc2hhZG93Vm9sdW1lID0gc2hhZG93Vm9sdW1lOwogICAgICAgIHJlc3VsdC5fb2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBFbGxpcHNlR2VvbWV0cnkuY29tcHV0ZVJlY3RhbmdsZSA9IGZ1bmN0aW9uKG9wdGlvbnMsIHJlc3VsdCkgewogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgICAgIGNvbnN0IGNlbnRlciA9IG9wdGlvbnMuY2VudGVyOwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NCk7CiAgICAgICAgY29uc3Qgc2VtaU1ham9yQXhpcyA9IG9wdGlvbnMuc2VtaU1ham9yQXhpczsKICAgICAgICBjb25zdCBzZW1pTWlub3JBeGlzID0gb3B0aW9ucy5zZW1pTWlub3JBeGlzOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgICAgICBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICAgICAgTWF0aF9kZWZhdWx0LlJBRElBTlNfUEVSX0RFR1JFRQogICAgICAgICk7CiAgICAgICAgY29uc3Qgcm90YXRpb24gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnJvdGF0aW9uLCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoIm9wdGlvbnMuY2VudGVyIiwgY2VudGVyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoIm9wdGlvbnMuc2VtaU1ham9yQXhpcyIsIHNlbWlNYWpvckF4aXMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigib3B0aW9ucy5zZW1pTWlub3JBeGlzIiwgc2VtaU1pbm9yQXhpcyk7CiAgICAgICAgaWYgKHNlbWlNYWpvckF4aXMgPCBzZW1pTWlub3JBeGlzKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgInNlbWlNYWpvckF4aXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHNlbWlNaW5vckF4aXMuIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgaWYgKGdyYW51bGFyaXR5IDw9IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJncmFudWxhcml0eSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvLiIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gY29tcHV0ZVJlY3RhbmdsZSgKICAgICAgICAgIGNlbnRlciwKICAgICAgICAgIHNlbWlNYWpvckF4aXMsCiAgICAgICAgICBzZW1pTWlub3JBeGlzLAogICAgICAgICAgcm90YXRpb24sCiAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIEVsbGlwc2VHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKGVsbGlwc2VHZW9tZXRyeSkgewogICAgICAgIGlmIChlbGxpcHNlR2VvbWV0cnkuX3NlbWlNYWpvckF4aXMgPD0gMCB8fCBlbGxpcHNlR2VvbWV0cnkuX3NlbWlNaW5vckF4aXMgPD0gMCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBoZWlnaHQgPSBlbGxpcHNlR2VvbWV0cnkuX2hlaWdodDsKICAgICAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IGVsbGlwc2VHZW9tZXRyeS5fZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgY29uc3QgZXh0cnVkZSA9ICFNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIGhlaWdodCwKICAgICAgICAgIGV4dHJ1ZGVkSGVpZ2h0LAogICAgICAgICAgMCwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMgogICAgICAgICk7CiAgICAgICAgZWxsaXBzZUdlb21ldHJ5Ll9jZW50ZXIgPSBlbGxpcHNlR2VvbWV0cnkuX2VsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKAogICAgICAgICAgZWxsaXBzZUdlb21ldHJ5Ll9jZW50ZXIsCiAgICAgICAgICBlbGxpcHNlR2VvbWV0cnkuX2NlbnRlcgogICAgICAgICk7CiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsKICAgICAgICAgIGNlbnRlcjogZWxsaXBzZUdlb21ldHJ5Ll9jZW50ZXIsCiAgICAgICAgICBzZW1pTWFqb3JBeGlzOiBlbGxpcHNlR2VvbWV0cnkuX3NlbWlNYWpvckF4aXMsCiAgICAgICAgICBzZW1pTWlub3JBeGlzOiBlbGxpcHNlR2VvbWV0cnkuX3NlbWlNaW5vckF4aXMsCiAgICAgICAgICBlbGxpcHNvaWQ6IGVsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkLAogICAgICAgICAgcm90YXRpb246IGVsbGlwc2VHZW9tZXRyeS5fcm90YXRpb24sCiAgICAgICAgICBoZWlnaHQsCiAgICAgICAgICBncmFudWxhcml0eTogZWxsaXBzZUdlb21ldHJ5Ll9ncmFudWxhcml0eSwKICAgICAgICAgIHZlcnRleEZvcm1hdDogZWxsaXBzZUdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQsCiAgICAgICAgICBzdFJvdGF0aW9uOiBlbGxpcHNlR2VvbWV0cnkuX3N0Um90YXRpb24KICAgICAgICB9OwogICAgICAgIGxldCBnZW9tZXRyeTsKICAgICAgICBpZiAoZXh0cnVkZSkgewogICAgICAgICAgb3B0aW9ucy5leHRydWRlZEhlaWdodCA9IGV4dHJ1ZGVkSGVpZ2h0OwogICAgICAgICAgb3B0aW9ucy5zaGFkb3dWb2x1bWUgPSBlbGxpcHNlR2VvbWV0cnkuX3NoYWRvd1ZvbHVtZTsKICAgICAgICAgIG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlID0gZWxsaXBzZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgICBnZW9tZXRyeSA9IGNvbXB1dGVFeHRydWRlZEVsbGlwc2Uob3B0aW9ucyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGdlb21ldHJ5ID0gY29tcHV0ZUVsbGlwc2Uob3B0aW9ucyk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGVsbGlwc2VHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlKSkgewogICAgICAgICAgICBjb25zdCBsZW5ndGggPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGg7CiAgICAgICAgICAgIGNvbnN0IG9mZnNldFZhbHVlID0gZWxsaXBzZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuTk9ORSA/IDAgOiAxOwogICAgICAgICAgICBjb25zdCBhcHBseU9mZnNldCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCAvIDMpLmZpbGwob2Zmc2V0VmFsdWUpOwogICAgICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICAgICAgICB2YWx1ZXM6IGFwcGx5T2Zmc2V0CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlczogZ2VvbWV0cnkuYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXM6IGdlb21ldHJ5LmluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTLAogICAgICAgICAgYm91bmRpbmdTcGhlcmU6IGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLAogICAgICAgICAgb2Zmc2V0QXR0cmlidXRlOiBlbGxpcHNlR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBFbGxpcHNlR2VvbWV0cnkuY3JlYXRlU2hhZG93Vm9sdW1lID0gZnVuY3Rpb24oZWxsaXBzZUdlb21ldHJ5LCBtaW5IZWlnaHRGdW5jLCBtYXhIZWlnaHRGdW5jKSB7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBlbGxpcHNlR2VvbWV0cnkuX2dyYW51bGFyaXR5OwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IGVsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkOwogICAgICAgIGNvbnN0IG1pbkhlaWdodCA9IG1pbkhlaWdodEZ1bmMoZ3JhbnVsYXJpdHksIGVsbGlwc29pZCk7CiAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gbWF4SGVpZ2h0RnVuYyhncmFudWxhcml0eSwgZWxsaXBzb2lkKTsKICAgICAgICByZXR1cm4gbmV3IEVsbGlwc2VHZW9tZXRyeSh7CiAgICAgICAgICBjZW50ZXI6IGVsbGlwc2VHZW9tZXRyeS5fY2VudGVyLAogICAgICAgICAgc2VtaU1ham9yQXhpczogZWxsaXBzZUdlb21ldHJ5Ll9zZW1pTWFqb3JBeGlzLAogICAgICAgICAgc2VtaU1pbm9yQXhpczogZWxsaXBzZUdlb21ldHJ5Ll9zZW1pTWlub3JBeGlzLAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgcm90YXRpb246IGVsbGlwc2VHZW9tZXRyeS5fcm90YXRpb24sCiAgICAgICAgICBzdFJvdGF0aW9uOiBlbGxpcHNlR2VvbWV0cnkuX3N0Um90YXRpb24sCiAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgIGV4dHJ1ZGVkSGVpZ2h0OiBtaW5IZWlnaHQsCiAgICAgICAgICBoZWlnaHQ6IG1heEhlaWdodCwKICAgICAgICAgIHZlcnRleEZvcm1hdDogVmVydGV4Rm9ybWF0X2RlZmF1bHQuUE9TSVRJT05fT05MWSwKICAgICAgICAgIHNoYWRvd1ZvbHVtZTogdHJ1ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhFbGxpcHNlR2VvbWV0cnkucHJvdG90eXBlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKi8KICAgICAgICByZWN0YW5nbGU6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHRoaXMuX3JlY3RhbmdsZSkpIHsKICAgICAgICAgICAgICB0aGlzLl9yZWN0YW5nbGUgPSBjb21wdXRlUmVjdGFuZ2xlKAogICAgICAgICAgICAgICAgdGhpcy5fY2VudGVyLAogICAgICAgICAgICAgICAgdGhpcy5fc2VtaU1ham9yQXhpcywKICAgICAgICAgICAgICAgIHRoaXMuX3NlbWlNaW5vckF4aXMsCiAgICAgICAgICAgICAgICB0aGlzLl9yb3RhdGlvbiwKICAgICAgICAgICAgICAgIHRoaXMuX2dyYW51bGFyaXR5LAogICAgICAgICAgICAgICAgdGhpcy5fZWxsaXBzb2lkCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjdGFuZ2xlOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogRm9yIHJlbWFwcGluZyB0ZXh0dXJlIGNvb3JkaW5hdGVzIHdoZW4gcmVuZGVyaW5nIEVsbGlwc2VHZW9tZXRyaWVzIGFzIEdyb3VuZFByaW1pdGl2ZXMuCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKi8KICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh0aGlzLl90ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzKSkgewogICAgICAgICAgICAgIHRoaXMuX3RleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHMgPSB0ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzKAogICAgICAgICAgICAgICAgdGhpcwogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHM7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgRWxsaXBzZUdlb21ldHJ5X2RlZmF1bHQgPSBFbGxpcHNlR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9DaXJjbGVHZW9tZXRyeS5qcwogIGZ1bmN0aW9uIENpcmNsZUdlb21ldHJ5KG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgY29uc3QgcmFkaXVzID0gb3B0aW9ucy5yYWRpdXM7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInJhZGl1cyIsIHJhZGl1cyk7CiAgICBjb25zdCBlbGxpcHNlR2VvbWV0cnlPcHRpb25zID0gewogICAgICBjZW50ZXI6IG9wdGlvbnMuY2VudGVyLAogICAgICBzZW1pTWFqb3JBeGlzOiByYWRpdXMsCiAgICAgIHNlbWlNaW5vckF4aXM6IHJhZGl1cywKICAgICAgZWxsaXBzb2lkOiBvcHRpb25zLmVsbGlwc29pZCwKICAgICAgaGVpZ2h0OiBvcHRpb25zLmhlaWdodCwKICAgICAgZXh0cnVkZWRIZWlnaHQ6IG9wdGlvbnMuZXh0cnVkZWRIZWlnaHQsCiAgICAgIGdyYW51bGFyaXR5OiBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICB2ZXJ0ZXhGb3JtYXQ6IG9wdGlvbnMudmVydGV4Rm9ybWF0LAogICAgICBzdFJvdGF0aW9uOiBvcHRpb25zLnN0Um90YXRpb24sCiAgICAgIHNoYWRvd1ZvbHVtZTogb3B0aW9ucy5zaGFkb3dWb2x1bWUKICAgIH07CiAgICB0aGlzLl9lbGxpcHNlR2VvbWV0cnkgPSBuZXcgRWxsaXBzZUdlb21ldHJ5X2RlZmF1bHQoZWxsaXBzZUdlb21ldHJ5T3B0aW9ucyk7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZUNpcmNsZUdlb21ldHJ5IjsKICB9CiAgdmFyIHNjcmF0Y2hFbGxpcHNlR2VvbWV0cnksIHNjcmF0Y2hPcHRpb25zNCwgQ2lyY2xlR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9DaXJjbGVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ2lyY2xlR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNlR2VvbWV0cnkoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9WZXJ0ZXhGb3JtYXQoKTsKICAgICAgQ2lyY2xlR2VvbWV0cnkucGFja2VkTGVuZ3RoID0gRWxsaXBzZUdlb21ldHJ5X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICBDaXJjbGVHZW9tZXRyeS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICByZXR1cm4gRWxsaXBzZUdlb21ldHJ5X2RlZmF1bHQucGFjayh2YWx1ZS5fZWxsaXBzZUdlb21ldHJ5LCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hFbGxpcHNlR2VvbWV0cnkgPSBuZXcgRWxsaXBzZUdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgIGNlbnRlcjogbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLAogICAgICAgIHNlbWlNYWpvckF4aXM6IDEsCiAgICAgICAgc2VtaU1pbm9yQXhpczogMQogICAgICB9KTsKICAgICAgc2NyYXRjaE9wdGlvbnM0ID0gewogICAgICAgIGNlbnRlcjogbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLAogICAgICAgIHJhZGl1czogdm9pZCAwLAogICAgICAgIGVsbGlwc29pZDogRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoRWxsaXBzb2lkX2RlZmF1bHQuVU5JVF9TUEhFUkUpLAogICAgICAgIGhlaWdodDogdm9pZCAwLAogICAgICAgIGV4dHJ1ZGVkSGVpZ2h0OiB2b2lkIDAsCiAgICAgICAgZ3JhbnVsYXJpdHk6IHZvaWQgMCwKICAgICAgICB2ZXJ0ZXhGb3JtYXQ6IG5ldyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdCgpLAogICAgICAgIHN0Um90YXRpb246IHZvaWQgMCwKICAgICAgICBzZW1pTWFqb3JBeGlzOiB2b2lkIDAsCiAgICAgICAgc2VtaU1pbm9yQXhpczogdm9pZCAwLAogICAgICAgIHNoYWRvd1ZvbHVtZTogdm9pZCAwCiAgICAgIH07CiAgICAgIENpcmNsZUdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBjb25zdCBlbGxpcHNlR2VvbWV0cnkgPSBFbGxpcHNlR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBzY3JhdGNoRWxsaXBzZUdlb21ldHJ5CiAgICAgICAgKTsKICAgICAgICBzY3JhdGNoT3B0aW9uczQuY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKAogICAgICAgICAgZWxsaXBzZUdlb21ldHJ5Ll9jZW50ZXIsCiAgICAgICAgICBzY3JhdGNoT3B0aW9uczQuY2VudGVyCiAgICAgICAgKTsKICAgICAgICBzY3JhdGNoT3B0aW9uczQuZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoCiAgICAgICAgICBlbGxpcHNlR2VvbWV0cnkuX2VsbGlwc29pZCwKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zNC5lbGxpcHNvaWQKICAgICAgICApOwogICAgICAgIHNjcmF0Y2hPcHRpb25zNC5oZWlnaHQgPSBlbGxpcHNlR2VvbWV0cnkuX2hlaWdodDsKICAgICAgICBzY3JhdGNoT3B0aW9uczQuZXh0cnVkZWRIZWlnaHQgPSBlbGxpcHNlR2VvbWV0cnkuX2V4dHJ1ZGVkSGVpZ2h0OwogICAgICAgIHNjcmF0Y2hPcHRpb25zNC5ncmFudWxhcml0eSA9IGVsbGlwc2VHZW9tZXRyeS5fZ3JhbnVsYXJpdHk7CiAgICAgICAgc2NyYXRjaE9wdGlvbnM0LnZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LmNsb25lKAogICAgICAgICAgZWxsaXBzZUdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQsCiAgICAgICAgICBzY3JhdGNoT3B0aW9uczQudmVydGV4Rm9ybWF0CiAgICAgICAgKTsKICAgICAgICBzY3JhdGNoT3B0aW9uczQuc3RSb3RhdGlvbiA9IGVsbGlwc2VHZW9tZXRyeS5fc3RSb3RhdGlvbjsKICAgICAgICBzY3JhdGNoT3B0aW9uczQuc2hhZG93Vm9sdW1lID0gZWxsaXBzZUdlb21ldHJ5Ll9zaGFkb3dWb2x1bWU7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgc2NyYXRjaE9wdGlvbnM0LnJhZGl1cyA9IGVsbGlwc2VHZW9tZXRyeS5fc2VtaU1ham9yQXhpczsKICAgICAgICAgIHJldHVybiBuZXcgQ2lyY2xlR2VvbWV0cnkoc2NyYXRjaE9wdGlvbnM0KTsKICAgICAgICB9CiAgICAgICAgc2NyYXRjaE9wdGlvbnM0LnNlbWlNYWpvckF4aXMgPSBlbGxpcHNlR2VvbWV0cnkuX3NlbWlNYWpvckF4aXM7CiAgICAgICAgc2NyYXRjaE9wdGlvbnM0LnNlbWlNaW5vckF4aXMgPSBlbGxpcHNlR2VvbWV0cnkuX3NlbWlNaW5vckF4aXM7CiAgICAgICAgcmVzdWx0Ll9lbGxpcHNlR2VvbWV0cnkgPSBuZXcgRWxsaXBzZUdlb21ldHJ5X2RlZmF1bHQoc2NyYXRjaE9wdGlvbnM0KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDaXJjbGVHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKGNpcmNsZUdlb21ldHJ5KSB7CiAgICAgICAgcmV0dXJuIEVsbGlwc2VHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KGNpcmNsZUdlb21ldHJ5Ll9lbGxpcHNlR2VvbWV0cnkpOwogICAgICB9OwogICAgICBDaXJjbGVHZW9tZXRyeS5jcmVhdGVTaGFkb3dWb2x1bWUgPSBmdW5jdGlvbihjaXJjbGVHZW9tZXRyeSwgbWluSGVpZ2h0RnVuYywgbWF4SGVpZ2h0RnVuYykgewogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gY2lyY2xlR2VvbWV0cnkuX2VsbGlwc2VHZW9tZXRyeS5fZ3JhbnVsYXJpdHk7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gY2lyY2xlR2VvbWV0cnkuX2VsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkOwogICAgICAgIGNvbnN0IG1pbkhlaWdodCA9IG1pbkhlaWdodEZ1bmMoZ3JhbnVsYXJpdHksIGVsbGlwc29pZCk7CiAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gbWF4SGVpZ2h0RnVuYyhncmFudWxhcml0eSwgZWxsaXBzb2lkKTsKICAgICAgICByZXR1cm4gbmV3IENpcmNsZUdlb21ldHJ5KHsKICAgICAgICAgIGNlbnRlcjogY2lyY2xlR2VvbWV0cnkuX2VsbGlwc2VHZW9tZXRyeS5fY2VudGVyLAogICAgICAgICAgcmFkaXVzOiBjaXJjbGVHZW9tZXRyeS5fZWxsaXBzZUdlb21ldHJ5Ll9zZW1pTWFqb3JBeGlzLAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgc3RSb3RhdGlvbjogY2lyY2xlR2VvbWV0cnkuX2VsbGlwc2VHZW9tZXRyeS5fc3RSb3RhdGlvbiwKICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgZXh0cnVkZWRIZWlnaHQ6IG1pbkhlaWdodCwKICAgICAgICAgIGhlaWdodDogbWF4SGVpZ2h0LAogICAgICAgICAgdmVydGV4Rm9ybWF0OiBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5QT1NJVElPTl9PTkxZLAogICAgICAgICAgc2hhZG93Vm9sdW1lOiB0cnVlCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKENpcmNsZUdlb21ldHJ5LnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICovCiAgICAgICAgcmVjdGFuZ2xlOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fZWxsaXBzZUdlb21ldHJ5LnJlY3RhbmdsZTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEZvciByZW1hcHBpbmcgdGV4dHVyZSBjb29yZGluYXRlcyB3aGVuIHJlbmRlcmluZyBDaXJjbGVHZW9tZXRyaWVzIGFzIEdyb3VuZFByaW1pdGl2ZXMuCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKi8KICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fZWxsaXBzZUdlb21ldHJ5LnRleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHM7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgQ2lyY2xlR2VvbWV0cnlfZGVmYXVsdCA9IENpcmNsZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlQ2lyY2xlR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlQ2lyY2xlR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZUNpcmNsZUdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZUNpcmNsZUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVDaXJjbGVHZW9tZXRyeShjaXJjbGVHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgY2lyY2xlR2VvbWV0cnkgPSBDaXJjbGVHZW9tZXRyeV9kZWZhdWx0LnVucGFjayhjaXJjbGVHZW9tZXRyeSwgb2Zmc2V0KTsKICAgIH0KICAgIGNpcmNsZUdlb21ldHJ5Ll9lbGxpcHNlR2VvbWV0cnkuX2NlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZSgKICAgICAgY2lyY2xlR2VvbWV0cnkuX2VsbGlwc2VHZW9tZXRyeS5fY2VudGVyCiAgICApOwogICAgY2lyY2xlR2VvbWV0cnkuX2VsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoCiAgICAgIGNpcmNsZUdlb21ldHJ5Ll9lbGxpcHNlR2VvbWV0cnkuX2VsbGlwc29pZAogICAgKTsKICAgIHJldHVybiBDaXJjbGVHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KGNpcmNsZUdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZUNpcmNsZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlQ2lyY2xlR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUNpcmNsZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2lyY2xlR2VvbWV0cnkoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGNyZWF0ZUNpcmNsZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVDaXJjbGVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0VsbGlwc2VPdXRsaW5lR2VvbWV0cnkuanMKICBmdW5jdGlvbiBjb21wdXRlRWxsaXBzZTIob3B0aW9ucykgewogICAgY29uc3QgY2VudGVyID0gb3B0aW9ucy5jZW50ZXI7CiAgICBib3VuZGluZ1NwaGVyZUNlbnRlcjIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgb3B0aW9ucy5lbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKGNlbnRlciwgYm91bmRpbmdTcGhlcmVDZW50ZXIyKSwKICAgICAgb3B0aW9ucy5oZWlnaHQsCiAgICAgIGJvdW5kaW5nU3BoZXJlQ2VudGVyMgogICAgKTsKICAgIGJvdW5kaW5nU3BoZXJlQ2VudGVyMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgIGNlbnRlciwKICAgICAgYm91bmRpbmdTcGhlcmVDZW50ZXIyLAogICAgICBib3VuZGluZ1NwaGVyZUNlbnRlcjIKICAgICk7CiAgICBjb25zdCBib3VuZGluZ1NwaGVyZSA9IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KAogICAgICBib3VuZGluZ1NwaGVyZUNlbnRlcjIsCiAgICAgIG9wdGlvbnMuc2VtaU1ham9yQXhpcwogICAgKTsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IEVsbGlwc2VHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlRWxsaXBzZVBvc2l0aW9ucygKICAgICAgb3B0aW9ucywKICAgICAgZmFsc2UsCiAgICAgIHRydWUKICAgICkub3V0ZXJQb3NpdGlvbnM7CiAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KHsKICAgICAgcG9zaXRpb246IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IEVsbGlwc2VHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5yYWlzZVBvc2l0aW9uc1RvSGVpZ2h0KAogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgb3B0aW9ucywKICAgICAgICAgIGZhbHNlCiAgICAgICAgKQogICAgICB9KQogICAgfSk7CiAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoIC8gMzsKICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShsZW5ndGgsIGxlbmd0aCAqIDIpOwogICAgbGV0IGluZGV4ID0gMDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGk7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSAoaSArIDEpICUgbGVuZ3RoOwogICAgfQogICAgcmV0dXJuIHsKICAgICAgYm91bmRpbmdTcGhlcmUsCiAgICAgIGF0dHJpYnV0ZXMsCiAgICAgIGluZGljZXMKICAgIH07CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVFeHRydWRlZEVsbGlwc2UyKG9wdGlvbnMpIHsKICAgIGNvbnN0IGNlbnRlciA9IG9wdGlvbnMuY2VudGVyOwogICAgY29uc3QgZWxsaXBzb2lkID0gb3B0aW9ucy5lbGxpcHNvaWQ7CiAgICBjb25zdCBzZW1pTWFqb3JBeGlzID0gb3B0aW9ucy5zZW1pTWFqb3JBeGlzOwogICAgbGV0IHNjYWxlZE5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKGNlbnRlciwgc2NyYXRjaENhcnRlc2lhbjE0KSwKICAgICAgb3B0aW9ucy5oZWlnaHQsCiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xNAogICAgKTsKICAgIHRvcEJvdW5kaW5nU3BoZXJlMi5jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICBjZW50ZXIsCiAgICAgIHNjYWxlZE5vcm1hbCwKICAgICAgdG9wQm91bmRpbmdTcGhlcmUyLmNlbnRlcgogICAgKTsKICAgIHRvcEJvdW5kaW5nU3BoZXJlMi5yYWRpdXMgPSBzZW1pTWFqb3JBeGlzOwogICAgc2NhbGVkTm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgIGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwoY2VudGVyLCBzY2FsZWROb3JtYWwpLAogICAgICBvcHRpb25zLmV4dHJ1ZGVkSGVpZ2h0LAogICAgICBzY2FsZWROb3JtYWwKICAgICk7CiAgICBib3R0b21Cb3VuZGluZ1NwaGVyZTIuY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZCgKICAgICAgY2VudGVyLAogICAgICBzY2FsZWROb3JtYWwsCiAgICAgIGJvdHRvbUJvdW5kaW5nU3BoZXJlMi5jZW50ZXIKICAgICk7CiAgICBib3R0b21Cb3VuZGluZ1NwaGVyZTIucmFkaXVzID0gc2VtaU1ham9yQXhpczsKICAgIGxldCBwb3NpdGlvbnMgPSBFbGxpcHNlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZUVsbGlwc2VQb3NpdGlvbnMoCiAgICAgIG9wdGlvbnMsCiAgICAgIGZhbHNlLAogICAgICB0cnVlCiAgICApLm91dGVyUG9zaXRpb25zOwogICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCh7CiAgICAgIHBvc2l0aW9uOiBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBFbGxpcHNlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQucmFpc2VQb3NpdGlvbnNUb0hlaWdodCgKICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgIG9wdGlvbnMsCiAgICAgICAgICB0cnVlCiAgICAgICAgKQogICAgICB9KQogICAgfSk7CiAgICBwb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlczsKICAgIGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC51bmlvbigKICAgICAgdG9wQm91bmRpbmdTcGhlcmUyLAogICAgICBib3R0b21Cb3VuZGluZ1NwaGVyZTIKICAgICk7CiAgICBsZXQgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlKSkgewogICAgICBsZXQgYXBwbHlPZmZzZXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpOwogICAgICBpZiAob3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuVE9QKSB7CiAgICAgICAgYXBwbHlPZmZzZXQgPSBhcHBseU9mZnNldC5maWxsKDEsIDAsIGxlbmd0aCAvIDIpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnN0IG9mZnNldFZhbHVlID0gb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuTk9ORSA/IDAgOiAxOwogICAgICAgIGFwcGx5T2Zmc2V0ID0gYXBwbHlPZmZzZXQuZmlsbChvZmZzZXRWYWx1ZSk7CiAgICAgIH0KICAgICAgYXR0cmlidXRlcy5hcHBseU9mZnNldCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDEsCiAgICAgICAgdmFsdWVzOiBhcHBseU9mZnNldAogICAgICB9KTsKICAgIH0KICAgIGxldCBudW1iZXJPZlZlcnRpY2FsTGluZXMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLm51bWJlck9mVmVydGljYWxMaW5lcywgMTYpOwogICAgbnVtYmVyT2ZWZXJ0aWNhbExpbmVzID0gTWF0aF9kZWZhdWx0LmNsYW1wKAogICAgICBudW1iZXJPZlZlcnRpY2FsTGluZXMsCiAgICAgIDAsCiAgICAgIGxlbmd0aCAvIDIKICAgICk7CiAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgIGxlbmd0aCwKICAgICAgbGVuZ3RoICogMiArIG51bWJlck9mVmVydGljYWxMaW5lcyAqIDIKICAgICk7CiAgICBsZW5ndGggLz0gMjsKICAgIGxldCBpbmRleCA9IDA7CiAgICBsZXQgaTsKICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICBpbmRpY2VzW2luZGV4KytdID0gaTsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IChpICsgMSkgJSBsZW5ndGg7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpICsgbGVuZ3RoOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gKGkgKyAxKSAlIGxlbmd0aCArIGxlbmd0aDsKICAgIH0KICAgIGxldCBudW1TaWRlOwogICAgaWYgKG51bWJlck9mVmVydGljYWxMaW5lcyA+IDApIHsKICAgICAgY29uc3QgbnVtU2lkZUxpbmVzID0gTWF0aC5taW4obnVtYmVyT2ZWZXJ0aWNhbExpbmVzLCBsZW5ndGgpOwogICAgICBudW1TaWRlID0gTWF0aC5yb3VuZChsZW5ndGggLyBudW1TaWRlTGluZXMpOwogICAgICBjb25zdCBtYXhJID0gTWF0aC5taW4obnVtU2lkZSAqIG51bWJlck9mVmVydGljYWxMaW5lcywgbGVuZ3RoKTsKICAgICAgZm9yIChpID0gMDsgaSA8IG1heEk7IGkgKz0gbnVtU2lkZSkgewogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpICsgbGVuZ3RoOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gewogICAgICBib3VuZGluZ1NwaGVyZSwKICAgICAgYXR0cmlidXRlcywKICAgICAgaW5kaWNlcwogICAgfTsKICB9CiAgZnVuY3Rpb24gRWxsaXBzZU91dGxpbmVHZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IGNlbnRlciA9IG9wdGlvbnMuY2VudGVyOwogICAgY29uc3QgZWxsaXBzb2lkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5lbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LldHUzg0KTsKICAgIGNvbnN0IHNlbWlNYWpvckF4aXMgPSBvcHRpb25zLnNlbWlNYWpvckF4aXM7CiAgICBjb25zdCBzZW1pTWlub3JBeGlzID0gb3B0aW9ucy5zZW1pTWlub3JBeGlzOwogICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgb3B0aW9ucy5ncmFudWxhcml0eSwKICAgICAgTWF0aF9kZWZhdWx0LlJBRElBTlNfUEVSX0RFR1JFRQogICAgKTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNlbnRlcikpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImNlbnRlciBpcyByZXF1aXJlZC4iKTsKICAgIH0KICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHNlbWlNYWpvckF4aXMpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJzZW1pTWFqb3JBeGlzIGlzIHJlcXVpcmVkLiIpOwogICAgfQogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoc2VtaU1pbm9yQXhpcykpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInNlbWlNaW5vckF4aXMgaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICBpZiAoc2VtaU1ham9yQXhpcyA8IHNlbWlNaW5vckF4aXMpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgInNlbWlNYWpvckF4aXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHNlbWlNaW5vckF4aXMuIgogICAgICApOwogICAgfQogICAgaWYgKGdyYW51bGFyaXR5IDw9IDApIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImdyYW51bGFyaXR5IG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uIik7CiAgICB9CiAgICBjb25zdCBoZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmhlaWdodCwgMCk7CiAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZXh0cnVkZWRIZWlnaHQsIGhlaWdodCk7CiAgICB0aGlzLl9jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY2VudGVyKTsKICAgIHRoaXMuX3NlbWlNYWpvckF4aXMgPSBzZW1pTWFqb3JBeGlzOwogICAgdGhpcy5fc2VtaU1pbm9yQXhpcyA9IHNlbWlNaW5vckF4aXM7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWQpOwogICAgdGhpcy5fcm90YXRpb24gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnJvdGF0aW9uLCAwKTsKICAgIHRoaXMuX2hlaWdodCA9IE1hdGgubWF4KGV4dHJ1ZGVkSGVpZ2h0LCBoZWlnaHQpOwogICAgdGhpcy5fZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgIHRoaXMuX2V4dHJ1ZGVkSGVpZ2h0ID0gTWF0aC5taW4oZXh0cnVkZWRIZWlnaHQsIGhlaWdodCk7CiAgICB0aGlzLl9udW1iZXJPZlZlcnRpY2FsTGluZXMgPSBNYXRoLm1heCgKICAgICAgZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5udW1iZXJPZlZlcnRpY2FsTGluZXMsIDE2KSwKICAgICAgMAogICAgKTsKICAgIHRoaXMuX29mZnNldEF0dHJpYnV0ZSA9IG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlOwogICAgdGhpcy5fd29ya2VyTmFtZSA9ICJjcmVhdGVFbGxpcHNlT3V0bGluZUdlb21ldHJ5IjsKICB9CiAgdmFyIHNjcmF0Y2hDYXJ0ZXNpYW4xNCwgYm91bmRpbmdTcGhlcmVDZW50ZXIyLCB0b3BCb3VuZGluZ1NwaGVyZTIsIGJvdHRvbUJvdW5kaW5nU3BoZXJlMiwgc2NyYXRjaENlbnRlcjMsIHNjcmF0Y2hFbGxpcHNvaWQyLCBzY3JhdGNoT3B0aW9uczUsIEVsbGlwc2VPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9FbGxpcHNlT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbGxpcHNlT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VsbGlwc2VHZW9tZXRyeUxpYnJhcnkoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjE0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBib3VuZGluZ1NwaGVyZUNlbnRlcjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHRvcEJvdW5kaW5nU3BoZXJlMiA9IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KCk7CiAgICAgIGJvdHRvbUJvdW5kaW5nU3BoZXJlMiA9IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KCk7CiAgICAgIEVsbGlwc2VPdXRsaW5lR2VvbWV0cnkucGFja2VkTGVuZ3RoID0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCArIEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIDg7CiAgICAgIEVsbGlwc2VPdXRsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHZhbHVlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInZhbHVlIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayh2YWx1ZS5fY2VudGVyLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIEVsbGlwc29pZF9kZWZhdWx0LnBhY2sodmFsdWUuX2VsbGlwc29pZCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fc2VtaU1ham9yQXhpczsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3NlbWlNaW5vckF4aXM7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9yb3RhdGlvbjsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2hlaWdodDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2dyYW51bGFyaXR5OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9udW1iZXJPZlZlcnRpY2FsTGluZXM7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh2YWx1ZS5fb2Zmc2V0QXR0cmlidXRlLCAtMSk7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBzY3JhdGNoQ2VudGVyMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEVsbGlwc29pZDIgPSBuZXcgRWxsaXBzb2lkX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE9wdGlvbnM1ID0gewogICAgICAgIGNlbnRlcjogc2NyYXRjaENlbnRlcjMsCiAgICAgICAgZWxsaXBzb2lkOiBzY3JhdGNoRWxsaXBzb2lkMiwKICAgICAgICBzZW1pTWFqb3JBeGlzOiB2b2lkIDAsCiAgICAgICAgc2VtaU1pbm9yQXhpczogdm9pZCAwLAogICAgICAgIHJvdGF0aW9uOiB2b2lkIDAsCiAgICAgICAgaGVpZ2h0OiB2b2lkIDAsCiAgICAgICAgZ3JhbnVsYXJpdHk6IHZvaWQgMCwKICAgICAgICBleHRydWRlZEhlaWdodDogdm9pZCAwLAogICAgICAgIG51bWJlck9mVmVydGljYWxMaW5lczogdm9pZCAwLAogICAgICAgIG9mZnNldEF0dHJpYnV0ZTogdm9pZCAwCiAgICAgIH07CiAgICAgIEVsbGlwc2VPdXRsaW5lR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCBjZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4LCBzY3JhdGNoQ2VudGVyMyk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgc2NyYXRjaEVsbGlwc29pZDIpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IHNlbWlNYWpvckF4aXMgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHNlbWlNaW5vckF4aXMgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHJvdGF0aW9uID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBoZWlnaHQgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgbnVtYmVyT2ZWZXJ0aWNhbExpbmVzID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBvZmZzZXRBdHRyaWJ1dGUgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczUuaGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgICAgc2NyYXRjaE9wdGlvbnM1LmV4dHJ1ZGVkSGVpZ2h0ID0gZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczUuZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zNS5yb3RhdGlvbiA9IHJvdGF0aW9uOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnM1LnNlbWlNYWpvckF4aXMgPSBzZW1pTWFqb3JBeGlzOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnM1LnNlbWlNaW5vckF4aXMgPSBzZW1pTWlub3JBeGlzOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnM1Lm51bWJlck9mVmVydGljYWxMaW5lcyA9IG51bWJlck9mVmVydGljYWxMaW5lczsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zNS5vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgICAgcmV0dXJuIG5ldyBFbGxpcHNlT3V0bGluZUdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zNSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGNlbnRlciwgcmVzdWx0Ll9jZW50ZXIpOwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLCByZXN1bHQuX2VsbGlwc29pZCk7CiAgICAgICAgcmVzdWx0Ll9zZW1pTWFqb3JBeGlzID0gc2VtaU1ham9yQXhpczsKICAgICAgICByZXN1bHQuX3NlbWlNaW5vckF4aXMgPSBzZW1pTWlub3JBeGlzOwogICAgICAgIHJlc3VsdC5fcm90YXRpb24gPSByb3RhdGlvbjsKICAgICAgICByZXN1bHQuX2hlaWdodCA9IGhlaWdodDsKICAgICAgICByZXN1bHQuX2dyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICAgICAgcmVzdWx0Ll9leHRydWRlZEhlaWdodCA9IGV4dHJ1ZGVkSGVpZ2h0OwogICAgICAgIHJlc3VsdC5fbnVtYmVyT2ZWZXJ0aWNhbExpbmVzID0gbnVtYmVyT2ZWZXJ0aWNhbExpbmVzOwogICAgICAgIHJlc3VsdC5fb2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBFbGxpcHNlT3V0bGluZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24oZWxsaXBzZUdlb21ldHJ5KSB7CiAgICAgICAgaWYgKGVsbGlwc2VHZW9tZXRyeS5fc2VtaU1ham9yQXhpcyA8PSAwIHx8IGVsbGlwc2VHZW9tZXRyeS5fc2VtaU1pbm9yQXhpcyA8PSAwKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IGhlaWdodCA9IGVsbGlwc2VHZW9tZXRyeS5faGVpZ2h0OwogICAgICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gZWxsaXBzZUdlb21ldHJ5Ll9leHRydWRlZEhlaWdodDsKICAgICAgICBjb25zdCBleHRydWRlID0gIU1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgaGVpZ2h0LAogICAgICAgICAgZXh0cnVkZWRIZWlnaHQsCiAgICAgICAgICAwLAogICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT04yCiAgICAgICAgKTsKICAgICAgICBlbGxpcHNlR2VvbWV0cnkuX2NlbnRlciA9IGVsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2UoCiAgICAgICAgICBlbGxpcHNlR2VvbWV0cnkuX2NlbnRlciwKICAgICAgICAgIGVsbGlwc2VHZW9tZXRyeS5fY2VudGVyCiAgICAgICAgKTsKICAgICAgICBjb25zdCBvcHRpb25zID0gewogICAgICAgICAgY2VudGVyOiBlbGxpcHNlR2VvbWV0cnkuX2NlbnRlciwKICAgICAgICAgIHNlbWlNYWpvckF4aXM6IGVsbGlwc2VHZW9tZXRyeS5fc2VtaU1ham9yQXhpcywKICAgICAgICAgIHNlbWlNaW5vckF4aXM6IGVsbGlwc2VHZW9tZXRyeS5fc2VtaU1pbm9yQXhpcywKICAgICAgICAgIGVsbGlwc29pZDogZWxsaXBzZUdlb21ldHJ5Ll9lbGxpcHNvaWQsCiAgICAgICAgICByb3RhdGlvbjogZWxsaXBzZUdlb21ldHJ5Ll9yb3RhdGlvbiwKICAgICAgICAgIGhlaWdodCwKICAgICAgICAgIGdyYW51bGFyaXR5OiBlbGxpcHNlR2VvbWV0cnkuX2dyYW51bGFyaXR5LAogICAgICAgICAgbnVtYmVyT2ZWZXJ0aWNhbExpbmVzOiBlbGxpcHNlR2VvbWV0cnkuX251bWJlck9mVmVydGljYWxMaW5lcwogICAgICAgIH07CiAgICAgICAgbGV0IGdlb21ldHJ5OwogICAgICAgIGlmIChleHRydWRlKSB7CiAgICAgICAgICBvcHRpb25zLmV4dHJ1ZGVkSGVpZ2h0ID0gZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgICBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSA9IGVsbGlwc2VHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlOwogICAgICAgICAgZ2VvbWV0cnkgPSBjb21wdXRlRXh0cnVkZWRFbGxpcHNlMihvcHRpb25zKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZ2VvbWV0cnkgPSBjb21wdXRlRWxsaXBzZTIob3B0aW9ucyk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGVsbGlwc2VHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlKSkgewogICAgICAgICAgICBjb25zdCBsZW5ndGggPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGg7CiAgICAgICAgICAgIGNvbnN0IG9mZnNldFZhbHVlID0gZWxsaXBzZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuTk9ORSA/IDAgOiAxOwogICAgICAgICAgICBjb25zdCBhcHBseU9mZnNldCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCAvIDMpLmZpbGwob2Zmc2V0VmFsdWUpOwogICAgICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICAgICAgICB2YWx1ZXM6IGFwcGx5T2Zmc2V0CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlczogZ2VvbWV0cnkuYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXM6IGdlb21ldHJ5LmluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuTElORVMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZTogZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUsCiAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IGVsbGlwc2VHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIEVsbGlwc2VPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IEVsbGlwc2VPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9DaXJjbGVPdXRsaW5lR2VvbWV0cnkuanMKICBmdW5jdGlvbiBDaXJjbGVPdXRsaW5lR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCByYWRpdXMgPSBvcHRpb25zLnJhZGl1czsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigicmFkaXVzIiwgcmFkaXVzKTsKICAgIGNvbnN0IGVsbGlwc2VHZW9tZXRyeU9wdGlvbnMgPSB7CiAgICAgIGNlbnRlcjogb3B0aW9ucy5jZW50ZXIsCiAgICAgIHNlbWlNYWpvckF4aXM6IHJhZGl1cywKICAgICAgc2VtaU1pbm9yQXhpczogcmFkaXVzLAogICAgICBlbGxpcHNvaWQ6IG9wdGlvbnMuZWxsaXBzb2lkLAogICAgICBoZWlnaHQ6IG9wdGlvbnMuaGVpZ2h0LAogICAgICBleHRydWRlZEhlaWdodDogb3B0aW9ucy5leHRydWRlZEhlaWdodCwKICAgICAgZ3JhbnVsYXJpdHk6IG9wdGlvbnMuZ3JhbnVsYXJpdHksCiAgICAgIG51bWJlck9mVmVydGljYWxMaW5lczogb3B0aW9ucy5udW1iZXJPZlZlcnRpY2FsTGluZXMKICAgIH07CiAgICB0aGlzLl9lbGxpcHNlR2VvbWV0cnkgPSBuZXcgRWxsaXBzZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0KGVsbGlwc2VHZW9tZXRyeU9wdGlvbnMpOwogICAgdGhpcy5fd29ya2VyTmFtZSA9ICJjcmVhdGVDaXJjbGVPdXRsaW5lR2VvbWV0cnkiOwogIH0KICB2YXIgc2NyYXRjaEVsbGlwc2VHZW9tZXRyeTIsIHNjcmF0Y2hPcHRpb25zNiwgQ2lyY2xlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfQ2lyY2xlT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9DaXJjbGVPdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNlT3V0bGluZUdlb21ldHJ5KCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIENpcmNsZU91dGxpbmVHZW9tZXRyeS5wYWNrZWRMZW5ndGggPSBFbGxpcHNlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICBDaXJjbGVPdXRsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgcmV0dXJuIEVsbGlwc2VPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC5wYWNrKAogICAgICAgICAgdmFsdWUuX2VsbGlwc2VHZW9tZXRyeSwKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleAogICAgICAgICk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hFbGxpcHNlR2VvbWV0cnkyID0gbmV3IEVsbGlwc2VPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgY2VudGVyOiBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksCiAgICAgICAgc2VtaU1ham9yQXhpczogMSwKICAgICAgICBzZW1pTWlub3JBeGlzOiAxCiAgICAgIH0pOwogICAgICBzY3JhdGNoT3B0aW9uczYgPSB7CiAgICAgICAgY2VudGVyOiBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksCiAgICAgICAgcmFkaXVzOiB2b2lkIDAsCiAgICAgICAgZWxsaXBzb2lkOiBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShFbGxpcHNvaWRfZGVmYXVsdC5VTklUX1NQSEVSRSksCiAgICAgICAgaGVpZ2h0OiB2b2lkIDAsCiAgICAgICAgZXh0cnVkZWRIZWlnaHQ6IHZvaWQgMCwKICAgICAgICBncmFudWxhcml0eTogdm9pZCAwLAogICAgICAgIG51bWJlck9mVmVydGljYWxMaW5lczogdm9pZCAwLAogICAgICAgIHNlbWlNYWpvckF4aXM6IHZvaWQgMCwKICAgICAgICBzZW1pTWlub3JBeGlzOiB2b2lkIDAKICAgICAgfTsKICAgICAgQ2lyY2xlT3V0bGluZUdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBjb25zdCBlbGxpcHNlR2VvbWV0cnkgPSBFbGxpcHNlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgc2NyYXRjaEVsbGlwc2VHZW9tZXRyeTIKICAgICAgICApOwogICAgICAgIHNjcmF0Y2hPcHRpb25zNi5jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoCiAgICAgICAgICBlbGxpcHNlR2VvbWV0cnkuX2NlbnRlciwKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zNi5jZW50ZXIKICAgICAgICApOwogICAgICAgIHNjcmF0Y2hPcHRpb25zNi5lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZSgKICAgICAgICAgIGVsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkLAogICAgICAgICAgc2NyYXRjaE9wdGlvbnM2LmVsbGlwc29pZAogICAgICAgICk7CiAgICAgICAgc2NyYXRjaE9wdGlvbnM2LmhlaWdodCA9IGVsbGlwc2VHZW9tZXRyeS5faGVpZ2h0OwogICAgICAgIHNjcmF0Y2hPcHRpb25zNi5leHRydWRlZEhlaWdodCA9IGVsbGlwc2VHZW9tZXRyeS5fZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgc2NyYXRjaE9wdGlvbnM2LmdyYW51bGFyaXR5ID0gZWxsaXBzZUdlb21ldHJ5Ll9ncmFudWxhcml0eTsKICAgICAgICBzY3JhdGNoT3B0aW9uczYubnVtYmVyT2ZWZXJ0aWNhbExpbmVzID0gZWxsaXBzZUdlb21ldHJ5Ll9udW1iZXJPZlZlcnRpY2FsTGluZXM7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgc2NyYXRjaE9wdGlvbnM2LnJhZGl1cyA9IGVsbGlwc2VHZW9tZXRyeS5fc2VtaU1ham9yQXhpczsKICAgICAgICAgIHJldHVybiBuZXcgQ2lyY2xlT3V0bGluZUdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zNik7CiAgICAgICAgfQogICAgICAgIHNjcmF0Y2hPcHRpb25zNi5zZW1pTWFqb3JBeGlzID0gZWxsaXBzZUdlb21ldHJ5Ll9zZW1pTWFqb3JBeGlzOwogICAgICAgIHNjcmF0Y2hPcHRpb25zNi5zZW1pTWlub3JBeGlzID0gZWxsaXBzZUdlb21ldHJ5Ll9zZW1pTWlub3JBeGlzOwogICAgICAgIHJlc3VsdC5fZWxsaXBzZUdlb21ldHJ5ID0gbmV3IEVsbGlwc2VPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdChzY3JhdGNoT3B0aW9uczYpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENpcmNsZU91dGxpbmVHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKGNpcmNsZUdlb21ldHJ5KSB7CiAgICAgICAgcmV0dXJuIEVsbGlwc2VPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShjaXJjbGVHZW9tZXRyeS5fZWxsaXBzZUdlb21ldHJ5KTsKICAgICAgfTsKICAgICAgQ2lyY2xlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBDaXJjbGVPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVDaXJjbGVPdXRsaW5lR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlQ2lyY2xlT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVDaXJjbGVPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlQ2lyY2xlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVDaXJjbGVPdXRsaW5lR2VvbWV0cnkoY2lyY2xlR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIGNpcmNsZUdlb21ldHJ5ID0gQ2lyY2xlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKGNpcmNsZUdlb21ldHJ5LCBvZmZzZXQpOwogICAgfQogICAgY2lyY2xlR2VvbWV0cnkuX2VsbGlwc2VHZW9tZXRyeS5fY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKAogICAgICBjaXJjbGVHZW9tZXRyeS5fZWxsaXBzZUdlb21ldHJ5Ll9jZW50ZXIKICAgICk7CiAgICBjaXJjbGVHZW9tZXRyeS5fZWxsaXBzZUdlb21ldHJ5Ll9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZSgKICAgICAgY2lyY2xlR2VvbWV0cnkuX2VsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkCiAgICApOwogICAgcmV0dXJuIENpcmNsZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KGNpcmNsZUdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZUNpcmNsZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZUNpcmNsZU91dGxpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlQ2lyY2xlT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2lyY2xlT3V0bGluZUdlb21ldHJ5KCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBjcmVhdGVDaXJjbGVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZUNpcmNsZU91dGxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2FycmF5UmVtb3ZlRHVwbGljYXRlcy5qcwogIGZ1bmN0aW9uIGFycmF5UmVtb3ZlRHVwbGljYXRlcyh2YWx1ZXMsIGVxdWFsc0Vwc2lsb24sIHdyYXBBcm91bmQsIHJlbW92ZWRJbmRpY2VzKSB7CiAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImVxdWFsc0Vwc2lsb24iLCBlcXVhbHNFcHNpbG9uKTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHZhbHVlcykpIHsKICAgICAgcmV0dXJuIHZvaWQgMDsKICAgIH0KICAgIHdyYXBBcm91bmQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh3cmFwQXJvdW5kLCBmYWxzZSk7CiAgICBjb25zdCBzdG9yZVJlbW92ZWRJbmRpY2VzID0gZGVmaW5lZF9kZWZhdWx0KHJlbW92ZWRJbmRpY2VzKTsKICAgIGNvbnN0IGxlbmd0aCA9IHZhbHVlcy5sZW5ndGg7CiAgICBpZiAobGVuZ3RoIDwgMikgewogICAgICByZXR1cm4gdmFsdWVzOwogICAgfQogICAgbGV0IGk7CiAgICBsZXQgdjAyID0gdmFsdWVzWzBdOwogICAgbGV0IHYxMjsKICAgIGxldCBjbGVhbmVkVmFsdWVzOwogICAgbGV0IGxhc3RDbGVhbkluZGV4ID0gMDsKICAgIGxldCByZW1vdmVkSW5kZXhMQ0kgPSAtMTsKICAgIGZvciAoaSA9IDE7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICB2MTIgPSB2YWx1ZXNbaV07CiAgICAgIGlmIChlcXVhbHNFcHNpbG9uKHYwMiwgdjEyLCByZW1vdmVEdXBsaWNhdGVzRXBzaWxvbikpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChjbGVhbmVkVmFsdWVzKSkgewogICAgICAgICAgY2xlYW5lZFZhbHVlcyA9IHZhbHVlcy5zbGljZSgwLCBpKTsKICAgICAgICAgIGxhc3RDbGVhbkluZGV4ID0gaSAtIDE7CiAgICAgICAgICByZW1vdmVkSW5kZXhMQ0kgPSAwOwogICAgICAgIH0KICAgICAgICBpZiAoc3RvcmVSZW1vdmVkSW5kaWNlcykgewogICAgICAgICAgcmVtb3ZlZEluZGljZXMucHVzaChpKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChjbGVhbmVkVmFsdWVzKSkgewogICAgICAgICAgY2xlYW5lZFZhbHVlcy5wdXNoKHYxMik7CiAgICAgICAgICBsYXN0Q2xlYW5JbmRleCA9IGk7CiAgICAgICAgICBpZiAoc3RvcmVSZW1vdmVkSW5kaWNlcykgewogICAgICAgICAgICByZW1vdmVkSW5kZXhMQ0kgPSByZW1vdmVkSW5kaWNlcy5sZW5ndGg7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHYwMiA9IHYxMjsKICAgICAgfQogICAgfQogICAgaWYgKHdyYXBBcm91bmQgJiYgZXF1YWxzRXBzaWxvbih2YWx1ZXNbMF0sIHZhbHVlc1tsZW5ndGggLSAxXSwgcmVtb3ZlRHVwbGljYXRlc0Vwc2lsb24pKSB7CiAgICAgIGlmIChzdG9yZVJlbW92ZWRJbmRpY2VzKSB7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChjbGVhbmVkVmFsdWVzKSkgewogICAgICAgICAgcmVtb3ZlZEluZGljZXMuc3BsaWNlKHJlbW92ZWRJbmRleExDSSwgMCwgbGFzdENsZWFuSW5kZXgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZW1vdmVkSW5kaWNlcy5wdXNoKGxlbmd0aCAtIDEpOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGNsZWFuZWRWYWx1ZXMpKSB7CiAgICAgICAgY2xlYW5lZFZhbHVlcy5sZW5ndGggLT0gMTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjbGVhbmVkVmFsdWVzID0gdmFsdWVzLnNsaWNlKDAsIC0xKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGRlZmluZWRfZGVmYXVsdChjbGVhbmVkVmFsdWVzKSA/IGNsZWFuZWRWYWx1ZXMgOiB2YWx1ZXM7CiAgfQogIHZhciByZW1vdmVEdXBsaWNhdGVzRXBzaWxvbiwgYXJyYXlSZW1vdmVEdXBsaWNhdGVzX2RlZmF1bHQ7CiAgdmFyIGluaXRfYXJyYXlSZW1vdmVEdXBsaWNhdGVzID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9hcnJheVJlbW92ZUR1cGxpY2F0ZXMuanMiKCkgewogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgcmVtb3ZlRHVwbGljYXRlc0Vwc2lsb24gPSBNYXRoX2RlZmF1bHQuRVBTSUxPTjEwOwogICAgICBhcnJheVJlbW92ZUR1cGxpY2F0ZXNfZGVmYXVsdCA9IGFycmF5UmVtb3ZlRHVwbGljYXRlczsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0JvdW5kaW5nUmVjdGFuZ2xlLmpzCiAgZnVuY3Rpb24gQm91bmRpbmdSZWN0YW5nbGUoeCwgeSwgd2lkdGgsIGhlaWdodCkgewogICAgdGhpcy54ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoeCwgMCk7CiAgICB0aGlzLnkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh5LCAwKTsKICAgIHRoaXMud2lkdGggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh3aWR0aCwgMCk7CiAgICB0aGlzLmhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGhlaWdodCwgMCk7CiAgfQogIHZhciBkZWZhdWx0UHJvamVjdGlvbjIsIGZyb21SZWN0YW5nbGVMb3dlckxlZnQsIGZyb21SZWN0YW5nbGVVcHBlclJpZ2h0LCBCb3VuZGluZ1JlY3RhbmdsZV9kZWZhdWx0OwogIHZhciBpbml0X0JvdW5kaW5nUmVjdGFuZ2xlID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Cb3VuZGluZ1JlY3RhbmdsZS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0dlb2dyYXBoaWNQcm9qZWN0aW9uKCk7CiAgICAgIGluaXRfSW50ZXJzZWN0KCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlKCk7CiAgICAgIEJvdW5kaW5nUmVjdGFuZ2xlLnBhY2tlZExlbmd0aCA9IDQ7CiAgICAgIEJvdW5kaW5nUmVjdGFuZ2xlLnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS54OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS55OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS53aWR0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlLmhlaWdodDsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nUmVjdGFuZ2xlLnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQm91bmRpbmdSZWN0YW5nbGUoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC55ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHQud2lkdGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC5oZWlnaHQgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBCb3VuZGluZ1JlY3RhbmdsZS5mcm9tUG9pbnRzID0gZnVuY3Rpb24ocG9zaXRpb25zLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQm91bmRpbmdSZWN0YW5nbGUoKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zKSB8fCBwb3NpdGlvbnMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICByZXN1bHQueCA9IDA7CiAgICAgICAgICByZXN1bHQueSA9IDA7CiAgICAgICAgICByZXN1bHQud2lkdGggPSAwOwogICAgICAgICAgcmVzdWx0LmhlaWdodCA9IDA7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGxldCBtaW5pbXVtWCA9IHBvc2l0aW9uc1swXS54OwogICAgICAgIGxldCBtaW5pbXVtWSA9IHBvc2l0aW9uc1swXS55OwogICAgICAgIGxldCBtYXhpbXVtWCA9IHBvc2l0aW9uc1swXS54OwogICAgICAgIGxldCBtYXhpbXVtWSA9IHBvc2l0aW9uc1swXS55OwogICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGNvbnN0IHAgPSBwb3NpdGlvbnNbaV07CiAgICAgICAgICBjb25zdCB4ID0gcC54OwogICAgICAgICAgY29uc3QgeSA9IHAueTsKICAgICAgICAgIG1pbmltdW1YID0gTWF0aC5taW4oeCwgbWluaW11bVgpOwogICAgICAgICAgbWF4aW11bVggPSBNYXRoLm1heCh4LCBtYXhpbXVtWCk7CiAgICAgICAgICBtaW5pbXVtWSA9IE1hdGgubWluKHksIG1pbmltdW1ZKTsKICAgICAgICAgIG1heGltdW1ZID0gTWF0aC5tYXgoeSwgbWF4aW11bVkpOwogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IG1pbmltdW1YOwogICAgICAgIHJlc3VsdC55ID0gbWluaW11bVk7CiAgICAgICAgcmVzdWx0LndpZHRoID0gbWF4aW11bVggLSBtaW5pbXVtWDsKICAgICAgICByZXN1bHQuaGVpZ2h0ID0gbWF4aW11bVkgLSBtaW5pbXVtWTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBkZWZhdWx0UHJvamVjdGlvbjIgPSBuZXcgR2VvZ3JhcGhpY1Byb2plY3Rpb25fZGVmYXVsdCgpOwogICAgICBmcm9tUmVjdGFuZ2xlTG93ZXJMZWZ0ID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIGZyb21SZWN0YW5nbGVVcHBlclJpZ2h0ID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIEJvdW5kaW5nUmVjdGFuZ2xlLmZyb21SZWN0YW5nbGUgPSBmdW5jdGlvbihyZWN0YW5nbGUsIHByb2plY3Rpb24sIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBCb3VuZGluZ1JlY3RhbmdsZSgpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZWN0YW5nbGUpKSB7CiAgICAgICAgICByZXN1bHQueCA9IDA7CiAgICAgICAgICByZXN1bHQueSA9IDA7CiAgICAgICAgICByZXN1bHQud2lkdGggPSAwOwogICAgICAgICAgcmVzdWx0LmhlaWdodCA9IDA7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBwcm9qZWN0aW9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQocHJvamVjdGlvbiwgZGVmYXVsdFByb2plY3Rpb24yKTsKICAgICAgICBjb25zdCBsb3dlckxlZnQgPSBwcm9qZWN0aW9uLnByb2plY3QoCiAgICAgICAgICBSZWN0YW5nbGVfZGVmYXVsdC5zb3V0aHdlc3QocmVjdGFuZ2xlLCBmcm9tUmVjdGFuZ2xlTG93ZXJMZWZ0KQogICAgICAgICk7CiAgICAgICAgY29uc3QgdXBwZXJSaWdodCA9IHByb2plY3Rpb24ucHJvamVjdCgKICAgICAgICAgIFJlY3RhbmdsZV9kZWZhdWx0Lm5vcnRoZWFzdChyZWN0YW5nbGUsIGZyb21SZWN0YW5nbGVVcHBlclJpZ2h0KQogICAgICAgICk7CiAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0LnN1YnRyYWN0KHVwcGVyUmlnaHQsIGxvd2VyTGVmdCwgdXBwZXJSaWdodCk7CiAgICAgICAgcmVzdWx0LnggPSBsb3dlckxlZnQueDsKICAgICAgICByZXN1bHQueSA9IGxvd2VyTGVmdC55OwogICAgICAgIHJlc3VsdC53aWR0aCA9IHVwcGVyUmlnaHQueDsKICAgICAgICByZXN1bHQuaGVpZ2h0ID0gdXBwZXJSaWdodC55OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nUmVjdGFuZ2xlLmNsb25lID0gZnVuY3Rpb24ocmVjdGFuZ2xlLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZWN0YW5nbGUpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IEJvdW5kaW5nUmVjdGFuZ2xlKAogICAgICAgICAgICByZWN0YW5nbGUueCwKICAgICAgICAgICAgcmVjdGFuZ2xlLnksCiAgICAgICAgICAgIHJlY3RhbmdsZS53aWR0aCwKICAgICAgICAgICAgcmVjdGFuZ2xlLmhlaWdodAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSByZWN0YW5nbGUueDsKICAgICAgICByZXN1bHQueSA9IHJlY3RhbmdsZS55OwogICAgICAgIHJlc3VsdC53aWR0aCA9IHJlY3RhbmdsZS53aWR0aDsKICAgICAgICByZXN1bHQuaGVpZ2h0ID0gcmVjdGFuZ2xlLmhlaWdodDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBCb3VuZGluZ1JlY3RhbmdsZS51bmlvbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBCb3VuZGluZ1JlY3RhbmdsZSgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBsb3dlckxlZnRYID0gTWF0aC5taW4obGVmdC54LCByaWdodC54KTsKICAgICAgICBjb25zdCBsb3dlckxlZnRZID0gTWF0aC5taW4obGVmdC55LCByaWdodC55KTsKICAgICAgICBjb25zdCB1cHBlclJpZ2h0WCA9IE1hdGgubWF4KGxlZnQueCArIGxlZnQud2lkdGgsIHJpZ2h0LnggKyByaWdodC53aWR0aCk7CiAgICAgICAgY29uc3QgdXBwZXJSaWdodFkgPSBNYXRoLm1heChsZWZ0LnkgKyBsZWZ0LmhlaWdodCwgcmlnaHQueSArIHJpZ2h0LmhlaWdodCk7CiAgICAgICAgcmVzdWx0LnggPSBsb3dlckxlZnRYOwogICAgICAgIHJlc3VsdC55ID0gbG93ZXJMZWZ0WTsKICAgICAgICByZXN1bHQud2lkdGggPSB1cHBlclJpZ2h0WCAtIGxvd2VyTGVmdFg7CiAgICAgICAgcmVzdWx0LmhlaWdodCA9IHVwcGVyUmlnaHRZIC0gbG93ZXJMZWZ0WTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBCb3VuZGluZ1JlY3RhbmdsZS5leHBhbmQgPSBmdW5jdGlvbihyZWN0YW5nbGUsIHBvaW50LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJwb2ludCIsIHBvaW50KTsKICAgICAgICByZXN1bHQgPSBCb3VuZGluZ1JlY3RhbmdsZS5jbG9uZShyZWN0YW5nbGUsIHJlc3VsdCk7CiAgICAgICAgY29uc3Qgd2lkdGggPSBwb2ludC54IC0gcmVzdWx0Lng7CiAgICAgICAgY29uc3QgaGVpZ2h0ID0gcG9pbnQueSAtIHJlc3VsdC55OwogICAgICAgIGlmICh3aWR0aCA+IHJlc3VsdC53aWR0aCkgewogICAgICAgICAgcmVzdWx0LndpZHRoID0gd2lkdGg7CiAgICAgICAgfSBlbHNlIGlmICh3aWR0aCA8IDApIHsKICAgICAgICAgIHJlc3VsdC53aWR0aCAtPSB3aWR0aDsKICAgICAgICAgIHJlc3VsdC54ID0gcG9pbnQueDsKICAgICAgICB9CiAgICAgICAgaWYgKGhlaWdodCA+IHJlc3VsdC5oZWlnaHQpIHsKICAgICAgICAgIHJlc3VsdC5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgICAgfSBlbHNlIGlmIChoZWlnaHQgPCAwKSB7CiAgICAgICAgICByZXN1bHQuaGVpZ2h0IC09IGhlaWdodDsKICAgICAgICAgIHJlc3VsdC55ID0gcG9pbnQueTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQm91bmRpbmdSZWN0YW5nbGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIGNvbnN0IGxlZnRYID0gbGVmdC54OwogICAgICAgIGNvbnN0IGxlZnRZID0gbGVmdC55OwogICAgICAgIGNvbnN0IHJpZ2h0WCA9IHJpZ2h0Lng7CiAgICAgICAgY29uc3QgcmlnaHRZID0gcmlnaHQueTsKICAgICAgICBpZiAoIShsZWZ0WCA+IHJpZ2h0WCArIHJpZ2h0LndpZHRoIHx8IGxlZnRYICsgbGVmdC53aWR0aCA8IHJpZ2h0WCB8fCBsZWZ0WSArIGxlZnQuaGVpZ2h0IDwgcmlnaHRZIHx8IGxlZnRZID4gcmlnaHRZICsgcmlnaHQuaGVpZ2h0KSkgewogICAgICAgICAgcmV0dXJuIEludGVyc2VjdF9kZWZhdWx0LklOVEVSU0VDVElORzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIEludGVyc2VjdF9kZWZhdWx0Lk9VVFNJREU7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nUmVjdGFuZ2xlLmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIGxlZnQueCA9PT0gcmlnaHQueCAmJiBsZWZ0LnkgPT09IHJpZ2h0LnkgJiYgbGVmdC53aWR0aCA9PT0gcmlnaHQud2lkdGggJiYgbGVmdC5oZWlnaHQgPT09IHJpZ2h0LmhlaWdodDsKICAgICAgfTsKICAgICAgQm91bmRpbmdSZWN0YW5nbGUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIEJvdW5kaW5nUmVjdGFuZ2xlLmNsb25lKHRoaXMsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nUmVjdGFuZ2xlLnByb3RvdHlwZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihyaWdodCkgewogICAgICAgIHJldHVybiBCb3VuZGluZ1JlY3RhbmdsZS5pbnRlcnNlY3QodGhpcywgcmlnaHQpOwogICAgICB9OwogICAgICBCb3VuZGluZ1JlY3RhbmdsZS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ocmlnaHQpIHsKICAgICAgICByZXR1cm4gQm91bmRpbmdSZWN0YW5nbGUuZXF1YWxzKHRoaXMsIHJpZ2h0KTsKICAgICAgfTsKICAgICAgQm91bmRpbmdSZWN0YW5nbGVfZGVmYXVsdCA9IEJvdW5kaW5nUmVjdGFuZ2xlOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQXhpc0FsaWduZWRCb3VuZGluZ0JveC5qcwogIGZ1bmN0aW9uIEF4aXNBbGlnbmVkQm91bmRpbmdCb3gobWluaW11bSwgbWF4aW11bSwgY2VudGVyKSB7CiAgICB0aGlzLm1pbmltdW0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoZGVmYXVsdFZhbHVlX2RlZmF1bHQobWluaW11bSwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pKTsKICAgIHRoaXMubWF4aW11bSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShkZWZhdWx0VmFsdWVfZGVmYXVsdChtYXhpbXVtLCBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTykpOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoY2VudGVyKSkgewogICAgICBjZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWlkcG9pbnQodGhpcy5taW5pbXVtLCB0aGlzLm1heGltdW0sIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSk7CiAgICB9IGVsc2UgewogICAgICBjZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY2VudGVyKTsKICAgIH0KICAgIHRoaXMuY2VudGVyID0gY2VudGVyOwogIH0KICB2YXIgaW50ZXJzZWN0U2NyYXRjaCwgQXhpc0FsaWduZWRCb3VuZGluZ0JveF9kZWZhdWx0OwogIHZhciBpbml0X0F4aXNBbGlnbmVkQm91bmRpbmdCb3ggPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0F4aXNBbGlnbmVkQm91bmRpbmdCb3guanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9JbnRlcnNlY3QoKTsKICAgICAgQXhpc0FsaWduZWRCb3VuZGluZ0JveC5mcm9tQ29ybmVycyA9IGZ1bmN0aW9uKG1pbmltdW0sIG1heGltdW0sIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgibWluaW11bSIsIG1pbmltdW0pOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgibWF4aW11bSIsIG1heGltdW0pOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBeGlzQWxpZ25lZEJvdW5kaW5nQm94KCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5taW5pbXVtID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG1pbmltdW0sIHJlc3VsdC5taW5pbXVtKTsKICAgICAgICByZXN1bHQubWF4aW11bSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShtYXhpbXVtLCByZXN1bHQubWF4aW11bSk7CiAgICAgICAgcmVzdWx0LmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5taWRwb2ludChtaW5pbXVtLCBtYXhpbXVtLCByZXN1bHQuY2VudGVyKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBBeGlzQWxpZ25lZEJvdW5kaW5nQm94LmZyb21Qb2ludHMgPSBmdW5jdGlvbihwb3NpdGlvbnMsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBeGlzQWxpZ25lZEJvdW5kaW5nQm94KCk7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9ucykgfHwgcG9zaXRpb25zLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgcmVzdWx0Lm1pbmltdW0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIHJlc3VsdC5taW5pbXVtKTsKICAgICAgICAgIHJlc3VsdC5tYXhpbXVtID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLCByZXN1bHQubWF4aW11bSk7CiAgICAgICAgICByZXN1bHQuY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLCByZXN1bHQuY2VudGVyKTsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIGxldCBtaW5pbXVtWCA9IHBvc2l0aW9uc1swXS54OwogICAgICAgIGxldCBtaW5pbXVtWSA9IHBvc2l0aW9uc1swXS55OwogICAgICAgIGxldCBtaW5pbXVtWiA9IHBvc2l0aW9uc1swXS56OwogICAgICAgIGxldCBtYXhpbXVtWCA9IHBvc2l0aW9uc1swXS54OwogICAgICAgIGxldCBtYXhpbXVtWSA9IHBvc2l0aW9uc1swXS55OwogICAgICAgIGxldCBtYXhpbXVtWiA9IHBvc2l0aW9uc1swXS56OwogICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgY29uc3QgcCA9IHBvc2l0aW9uc1tpXTsKICAgICAgICAgIGNvbnN0IHggPSBwLng7CiAgICAgICAgICBjb25zdCB5ID0gcC55OwogICAgICAgICAgY29uc3QgeiA9IHAuejsKICAgICAgICAgIG1pbmltdW1YID0gTWF0aC5taW4oeCwgbWluaW11bVgpOwogICAgICAgICAgbWF4aW11bVggPSBNYXRoLm1heCh4LCBtYXhpbXVtWCk7CiAgICAgICAgICBtaW5pbXVtWSA9IE1hdGgubWluKHksIG1pbmltdW1ZKTsKICAgICAgICAgIG1heGltdW1ZID0gTWF0aC5tYXgoeSwgbWF4aW11bVkpOwogICAgICAgICAgbWluaW11bVogPSBNYXRoLm1pbih6LCBtaW5pbXVtWik7CiAgICAgICAgICBtYXhpbXVtWiA9IE1hdGgubWF4KHosIG1heGltdW1aKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbWluaW11bSA9IHJlc3VsdC5taW5pbXVtOwogICAgICAgIG1pbmltdW0ueCA9IG1pbmltdW1YOwogICAgICAgIG1pbmltdW0ueSA9IG1pbmltdW1ZOwogICAgICAgIG1pbmltdW0ueiA9IG1pbmltdW1aOwogICAgICAgIGNvbnN0IG1heGltdW0gPSByZXN1bHQubWF4aW11bTsKICAgICAgICBtYXhpbXVtLnggPSBtYXhpbXVtWDsKICAgICAgICBtYXhpbXVtLnkgPSBtYXhpbXVtWTsKICAgICAgICBtYXhpbXVtLnogPSBtYXhpbXVtWjsKICAgICAgICByZXN1bHQuY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1pZHBvaW50KG1pbmltdW0sIG1heGltdW0sIHJlc3VsdC5jZW50ZXIpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEF4aXNBbGlnbmVkQm91bmRpbmdCb3guY2xvbmUgPSBmdW5jdGlvbihib3gsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGJveCkpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQXhpc0FsaWduZWRCb3VuZGluZ0JveChib3gubWluaW11bSwgYm94Lm1heGltdW0sIGJveC5jZW50ZXIpOwogICAgICAgIH0KICAgICAgICByZXN1bHQubWluaW11bSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShib3gubWluaW11bSwgcmVzdWx0Lm1pbmltdW0pOwogICAgICAgIHJlc3VsdC5tYXhpbXVtID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGJveC5tYXhpbXVtLCByZXN1bHQubWF4aW11bSk7CiAgICAgICAgcmVzdWx0LmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShib3guY2VudGVyLCByZXN1bHQuY2VudGVyKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBBeGlzQWxpZ25lZEJvdW5kaW5nQm94LmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHMobGVmdC5jZW50ZXIsIHJpZ2h0LmNlbnRlcikgJiYgQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFscyhsZWZ0Lm1pbmltdW0sIHJpZ2h0Lm1pbmltdW0pICYmIENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHMobGVmdC5tYXhpbXVtLCByaWdodC5tYXhpbXVtKTsKICAgICAgfTsKICAgICAgaW50ZXJzZWN0U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgQXhpc0FsaWduZWRCb3VuZGluZ0JveC5pbnRlcnNlY3RQbGFuZSA9IGZ1bmN0aW9uKGJveCwgcGxhbmUpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImJveCIsIGJveCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJwbGFuZSIsIHBsYW5lKTsKICAgICAgICBpbnRlcnNlY3RTY3JhdGNoID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgICAgYm94Lm1heGltdW0sCiAgICAgICAgICBib3gubWluaW11bSwKICAgICAgICAgIGludGVyc2VjdFNjcmF0Y2gKICAgICAgICApOwogICAgICAgIGNvbnN0IGggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgIGludGVyc2VjdFNjcmF0Y2gsCiAgICAgICAgICAwLjUsCiAgICAgICAgICBpbnRlcnNlY3RTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBjb25zdCBub3JtYWwyID0gcGxhbmUubm9ybWFsOwogICAgICAgIGNvbnN0IGUgPSBoLnggKiBNYXRoLmFicyhub3JtYWwyLngpICsgaC55ICogTWF0aC5hYnMobm9ybWFsMi55KSArIGgueiAqIE1hdGguYWJzKG5vcm1hbDIueik7CiAgICAgICAgY29uc3QgcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QoYm94LmNlbnRlciwgbm9ybWFsMikgKyBwbGFuZS5kaXN0YW5jZTsKICAgICAgICBpZiAocyAtIGUgPiAwKSB7CiAgICAgICAgICByZXR1cm4gSW50ZXJzZWN0X2RlZmF1bHQuSU5TSURFOwogICAgICAgIH0KICAgICAgICBpZiAocyArIGUgPCAwKSB7CiAgICAgICAgICByZXR1cm4gSW50ZXJzZWN0X2RlZmF1bHQuT1VUU0lERTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIEludGVyc2VjdF9kZWZhdWx0LklOVEVSU0VDVElORzsKICAgICAgfTsKICAgICAgQXhpc0FsaWduZWRCb3VuZGluZ0JveC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICByZXR1cm4gQXhpc0FsaWduZWRCb3VuZGluZ0JveC5jbG9uZSh0aGlzLCByZXN1bHQpOwogICAgICB9OwogICAgICBBeGlzQWxpZ25lZEJvdW5kaW5nQm94LnByb3RvdHlwZS5pbnRlcnNlY3RQbGFuZSA9IGZ1bmN0aW9uKHBsYW5lKSB7CiAgICAgICAgcmV0dXJuIEF4aXNBbGlnbmVkQm91bmRpbmdCb3guaW50ZXJzZWN0UGxhbmUodGhpcywgcGxhbmUpOwogICAgICB9OwogICAgICBBeGlzQWxpZ25lZEJvdW5kaW5nQm94LnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihyaWdodCkgewogICAgICAgIHJldHVybiBBeGlzQWxpZ25lZEJvdW5kaW5nQm94LmVxdWFscyh0aGlzLCByaWdodCk7CiAgICAgIH07CiAgICAgIEF4aXNBbGlnbmVkQm91bmRpbmdCb3hfZGVmYXVsdCA9IEF4aXNBbGlnbmVkQm91bmRpbmdCb3g7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbGxpcHNvaWRUYW5nZW50UGxhbmUuanMKICBmdW5jdGlvbiBFbGxpcHNvaWRUYW5nZW50UGxhbmUob3JpZ2luLCBlbGxpcHNvaWQpIHsKICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgib3JpZ2luIiwgb3JpZ2luKTsKICAgIGVsbGlwc29pZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuV0dTODQpOwogICAgb3JpZ2luID0gZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2Uob3JpZ2luKTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG9yaWdpbikpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIm9yaWdpbiBtdXN0IG5vdCBiZSBhdCB0aGUgY2VudGVyIG9mIHRoZSBlbGxpcHNvaWQuIgogICAgICApOwogICAgfQogICAgY29uc3QgZWFzdE5vcnRoVXAgPSBUcmFuc2Zvcm1zX2RlZmF1bHQuZWFzdE5vcnRoVXBUb0ZpeGVkRnJhbWUob3JpZ2luLCBlbGxpcHNvaWQpOwogICAgdGhpcy5fZWxsaXBzb2lkID0gZWxsaXBzb2lkOwogICAgdGhpcy5fb3JpZ2luID0gb3JpZ2luOwogICAgdGhpcy5feEF4aXMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUNhcnRlc2lhbjQoCiAgICAgIE1hdHJpeDRfZGVmYXVsdC5nZXRDb2x1bW4oZWFzdE5vcnRoVXAsIDAsIHNjcmF0Y2hDYXJ0NCkKICAgICk7CiAgICB0aGlzLl95QXhpcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQ2FydGVzaWFuNCgKICAgICAgTWF0cml4NF9kZWZhdWx0LmdldENvbHVtbihlYXN0Tm9ydGhVcCwgMSwgc2NyYXRjaENhcnQ0KQogICAgKTsKICAgIGNvbnN0IG5vcm1hbDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUNhcnRlc2lhbjQoCiAgICAgIE1hdHJpeDRfZGVmYXVsdC5nZXRDb2x1bW4oZWFzdE5vcnRoVXAsIDIsIHNjcmF0Y2hDYXJ0NCkKICAgICk7CiAgICB0aGlzLl9wbGFuZSA9IFBsYW5lX2RlZmF1bHQuZnJvbVBvaW50Tm9ybWFsKG9yaWdpbiwgbm9ybWFsMik7CiAgfQogIHZhciBzY3JhdGNoQ2FydDQsIHRtcCwgc2NyYXRjaFByb2plY3RQb2ludE9udG9QbGFuZVJheSwgc2NyYXRjaFByb2plY3RQb2ludE9udG9QbGFuZUNhcnRlc2lhbjMsIHByb2plY3RQb2ludHNPbnRvRWxsaXBzb2lkU2NyYXRjaCwgRWxsaXBzb2lkVGFuZ2VudFBsYW5lX2RlZmF1bHQ7CiAgdmFyIGluaXRfRWxsaXBzb2lkVGFuZ2VudFBsYW5lID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbGxpcHNvaWRUYW5nZW50UGxhbmUuanMiKCkgewogICAgICBpbml0X0F4aXNBbGlnbmVkQm91bmRpbmdCb3goKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRlc2lhbjQoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0ludGVyc2VjdGlvblRlc3RzKCk7CiAgICAgIGluaXRfTWF0cml4NCgpOwogICAgICBpbml0X1BsYW5lKCk7CiAgICAgIGluaXRfUmF5KCk7CiAgICAgIGluaXRfVHJhbnNmb3JtcygpOwogICAgICBzY3JhdGNoQ2FydDQgPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KCk7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEVsbGlwc29pZFRhbmdlbnRQbGFuZS5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBlbGxpcHNvaWQuCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZFRhbmdlbnRQbGFuZS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7RWxsaXBzb2lkfQogICAgICAgICAqLwogICAgICAgIGVsbGlwc29pZDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsbGlwc29pZDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIG9yaWdpbi4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkVGFuZ2VudFBsYW5lLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfQogICAgICAgICAqLwogICAgICAgIG9yaWdpbjogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29yaWdpbjsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIHBsYW5lIHdoaWNoIGlzIHRhbmdlbnQgdG8gdGhlIGVsbGlwc29pZC4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkVGFuZ2VudFBsYW5lLnByb3RvdHlwZQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqIEB0eXBlIHtQbGFuZX0KICAgICAgICAgKi8KICAgICAgICBwbGFuZTogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BsYW5lOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgbG9jYWwgWC1heGlzIChlYXN0KSBvZiB0aGUgdGFuZ2VudCBwbGFuZS4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkVGFuZ2VudFBsYW5lLnByb3RvdHlwZQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfQogICAgICAgICAqLwogICAgICAgIHhBeGlzOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5feEF4aXM7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBsb2NhbCBZLWF4aXMgKG5vcnRoKSBvZiB0aGUgdGFuZ2VudCBwbGFuZS4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkVGFuZ2VudFBsYW5lLnByb3RvdHlwZQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfQogICAgICAgICAqLwogICAgICAgIHlBeGlzOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5feUF4aXM7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBsb2NhbCBaLWF4aXMgKHVwKSBvZiB0aGUgdGFuZ2VudCBwbGFuZS4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkVGFuZ2VudFBsYW5lLnByb3RvdHlwZQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfQogICAgICAgICAqLwogICAgICAgIHpBeGlzOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fcGxhbmUubm9ybWFsOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHRtcCA9IG5ldyBBeGlzQWxpZ25lZEJvdW5kaW5nQm94X2RlZmF1bHQoKTsKICAgICAgRWxsaXBzb2lkVGFuZ2VudFBsYW5lLmZyb21Qb2ludHMgPSBmdW5jdGlvbihjYXJ0ZXNpYW5zLCBlbGxpcHNvaWQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImNhcnRlc2lhbnMiLCBjYXJ0ZXNpYW5zKTsKICAgICAgICBjb25zdCBib3ggPSBBeGlzQWxpZ25lZEJvdW5kaW5nQm94X2RlZmF1bHQuZnJvbVBvaW50cyhjYXJ0ZXNpYW5zLCB0bXApOwogICAgICAgIHJldHVybiBuZXcgRWxsaXBzb2lkVGFuZ2VudFBsYW5lKGJveC5jZW50ZXIsIGVsbGlwc29pZCk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVSYXkgPSBuZXcgUmF5X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFByb2plY3RQb2ludE9udG9QbGFuZUNhcnRlc2lhbjMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEVsbGlwc29pZFRhbmdlbnRQbGFuZS5wcm90b3R5cGUucHJvamVjdFBvaW50T250b1BsYW5lID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIGNvbnN0IHJheSA9IHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVSYXk7CiAgICAgICAgcmF5Lm9yaWdpbiA9IGNhcnRlc2lhbjExOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoY2FydGVzaWFuMTEsIHJheS5kaXJlY3Rpb24pOwogICAgICAgIGxldCBpbnRlcnNlY3Rpb25Qb2ludCA9IEludGVyc2VjdGlvblRlc3RzX2RlZmF1bHQucmF5UGxhbmUoCiAgICAgICAgICByYXksCiAgICAgICAgICB0aGlzLl9wbGFuZSwKICAgICAgICAgIHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVDYXJ0ZXNpYW4zCiAgICAgICAgKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpbnRlcnNlY3Rpb25Qb2ludCkpIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUocmF5LmRpcmVjdGlvbiwgcmF5LmRpcmVjdGlvbik7CiAgICAgICAgICBpbnRlcnNlY3Rpb25Qb2ludCA9IEludGVyc2VjdGlvblRlc3RzX2RlZmF1bHQucmF5UGxhbmUoCiAgICAgICAgICAgIHJheSwKICAgICAgICAgICAgdGhpcy5fcGxhbmUsCiAgICAgICAgICAgIHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVDYXJ0ZXNpYW4zCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGludGVyc2VjdGlvblBvaW50KSkgewogICAgICAgICAgY29uc3QgdjMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50LAogICAgICAgICAgICB0aGlzLl9vcmlnaW4sCiAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50CiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgeCA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodGhpcy5feEF4aXMsIHYzKTsKICAgICAgICAgIGNvbnN0IHkgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KHRoaXMuX3lBeGlzLCB2Myk7CiAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KHgsIHkpOwogICAgICAgICAgfQogICAgICAgICAgcmVzdWx0LnggPSB4OwogICAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkVGFuZ2VudFBsYW5lLnByb3RvdHlwZS5wcm9qZWN0UG9pbnRzT250b1BsYW5lID0gZnVuY3Rpb24oY2FydGVzaWFucywgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJjYXJ0ZXNpYW5zIiwgY2FydGVzaWFucyk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gW107CiAgICAgICAgfQogICAgICAgIGxldCBjb3VudCA9IDA7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gY2FydGVzaWFucy5sZW5ndGg7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgY29uc3QgcCA9IHRoaXMucHJvamVjdFBvaW50T250b1BsYW5lKGNhcnRlc2lhbnNbaV0sIHJlc3VsdFtjb3VudF0pOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChwKSkgewogICAgICAgICAgICByZXN1bHRbY291bnRdID0gcDsKICAgICAgICAgICAgY291bnQrKzsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IGNvdW50OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZFRhbmdlbnRQbGFuZS5wcm90b3R5cGUucHJvamVjdFBvaW50VG9OZWFyZXN0T25QbGFuZSA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJheSA9IHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVSYXk7CiAgICAgICAgcmF5Lm9yaWdpbiA9IGNhcnRlc2lhbjExOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZSh0aGlzLl9wbGFuZS5ub3JtYWwsIHJheS5kaXJlY3Rpb24pOwogICAgICAgIGxldCBpbnRlcnNlY3Rpb25Qb2ludCA9IEludGVyc2VjdGlvblRlc3RzX2RlZmF1bHQucmF5UGxhbmUoCiAgICAgICAgICByYXksCiAgICAgICAgICB0aGlzLl9wbGFuZSwKICAgICAgICAgIHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVDYXJ0ZXNpYW4zCiAgICAgICAgKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpbnRlcnNlY3Rpb25Qb2ludCkpIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUocmF5LmRpcmVjdGlvbiwgcmF5LmRpcmVjdGlvbik7CiAgICAgICAgICBpbnRlcnNlY3Rpb25Qb2ludCA9IEludGVyc2VjdGlvblRlc3RzX2RlZmF1bHQucmF5UGxhbmUoCiAgICAgICAgICAgIHJheSwKICAgICAgICAgICAgdGhpcy5fcGxhbmUsCiAgICAgICAgICAgIHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVDYXJ0ZXNpYW4zCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCB2MyA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgICAgIGludGVyc2VjdGlvblBvaW50LAogICAgICAgICAgdGhpcy5fb3JpZ2luLAogICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnQKICAgICAgICApOwogICAgICAgIGNvbnN0IHggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KHRoaXMuX3hBeGlzLCB2Myk7CiAgICAgICAgY29uc3QgeSA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodGhpcy5feUF4aXMsIHYzKTsKICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZFRhbmdlbnRQbGFuZS5wcm90b3R5cGUucHJvamVjdFBvaW50c1RvTmVhcmVzdE9uUGxhbmUgPSBmdW5jdGlvbihjYXJ0ZXNpYW5zLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImNhcnRlc2lhbnMiLCBjYXJ0ZXNpYW5zKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBbXTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbGVuZ3RoID0gY2FydGVzaWFucy5sZW5ndGg7CiAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IGxlbmd0aDsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICByZXN1bHRbaV0gPSB0aGlzLnByb2plY3RQb2ludFRvTmVhcmVzdE9uUGxhbmUoY2FydGVzaWFuc1tpXSwgcmVzdWx0W2ldKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgcHJvamVjdFBvaW50c09udG9FbGxpcHNvaWRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBFbGxpcHNvaWRUYW5nZW50UGxhbmUucHJvdG90eXBlLnByb2plY3RQb2ludE9udG9FbGxpcHNvaWQgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSB0aGlzLl9lbGxpcHNvaWQ7CiAgICAgICAgY29uc3Qgb3JpZ2luID0gdGhpcy5fb3JpZ2luOwogICAgICAgIGNvbnN0IHhBeGlzID0gdGhpcy5feEF4aXM7CiAgICAgICAgY29uc3QgeUF4aXMgPSB0aGlzLl95QXhpczsKICAgICAgICBjb25zdCB0bXAyID0gcHJvamVjdFBvaW50c09udG9FbGxpcHNvaWRTY3JhdGNoOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHhBeGlzLCBjYXJ0ZXNpYW4xMS54LCB0bXAyKTsKICAgICAgICByZXN1bHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKG9yaWdpbiwgdG1wMiwgcmVzdWx0KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcih5QXhpcywgY2FydGVzaWFuMTEueSwgdG1wMik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChyZXN1bHQsIHRtcDIsIHJlc3VsdCk7CiAgICAgICAgZWxsaXBzb2lkLnNjYWxlVG9HZW9jZW50cmljU3VyZmFjZShyZXN1bHQsIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkVGFuZ2VudFBsYW5lLnByb3RvdHlwZS5wcm9qZWN0UG9pbnRzT250b0VsbGlwc29pZCA9IGZ1bmN0aW9uKGNhcnRlc2lhbnMsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY2FydGVzaWFucyIsIGNhcnRlc2lhbnMpOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IGNhcnRlc2lhbnMubGVuZ3RoOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQubGVuZ3RoID0gbGVuZ3RoOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICByZXN1bHRbaV0gPSB0aGlzLnByb2plY3RQb2ludE9udG9FbGxpcHNvaWQoY2FydGVzaWFuc1tpXSwgcmVzdWx0W2ldKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkVGFuZ2VudFBsYW5lX2RlZmF1bHQgPSBFbGxpcHNvaWRUYW5nZW50UGxhbmU7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9PcmllbnRlZEJvdW5kaW5nQm94LmpzCiAgZnVuY3Rpb24gT3JpZW50ZWRCb3VuZGluZ0JveChjZW50ZXIsIGhhbGZBeGVzKSB7CiAgICB0aGlzLmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShkZWZhdWx0VmFsdWVfZGVmYXVsdChjZW50ZXIsIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPKSk7CiAgICB0aGlzLmhhbGZBeGVzID0gTWF0cml4M19kZWZhdWx0LmNsb25lKGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGhhbGZBeGVzLCBNYXRyaXgzX2RlZmF1bHQuWkVSTykpOwogIH0KICBmdW5jdGlvbiBmcm9tUGxhbmVFeHRlbnRzKHBsYW5lT3JpZ2luLCBwbGFuZVhBeGlzLCBwbGFuZVlBeGlzLCBwbGFuZVpBeGlzLCBtaW5pbXVtWCwgbWF4aW11bVgsIG1pbmltdW1ZLCBtYXhpbXVtWSwgbWluaW11bVosIG1heGltdW1aLCByZXN1bHQpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG1pbmltdW1YKSB8fCAhZGVmaW5lZF9kZWZhdWx0KG1heGltdW1YKSB8fCAhZGVmaW5lZF9kZWZhdWx0KG1pbmltdW1ZKSB8fCAhZGVmaW5lZF9kZWZhdWx0KG1heGltdW1ZKSB8fCAhZGVmaW5lZF9kZWZhdWx0KG1pbmltdW1aKSB8fCAhZGVmaW5lZF9kZWZhdWx0KG1heGltdW1aKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAiYWxsIGV4dGVudHMgKG1pbmltdW0vbWF4aW11bSBYL1kvWikgYXJlIHJlcXVpcmVkLiIKICAgICAgKTsKICAgIH0KICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgcmVzdWx0ID0gbmV3IE9yaWVudGVkQm91bmRpbmdCb3goKTsKICAgIH0KICAgIGNvbnN0IGhhbGZBeGVzID0gcmVzdWx0LmhhbGZBeGVzOwogICAgTWF0cml4M19kZWZhdWx0LnNldENvbHVtbihoYWxmQXhlcywgMCwgcGxhbmVYQXhpcywgaGFsZkF4ZXMpOwogICAgTWF0cml4M19kZWZhdWx0LnNldENvbHVtbihoYWxmQXhlcywgMSwgcGxhbmVZQXhpcywgaGFsZkF4ZXMpOwogICAgTWF0cml4M19kZWZhdWx0LnNldENvbHVtbihoYWxmQXhlcywgMiwgcGxhbmVaQXhpcywgaGFsZkF4ZXMpOwogICAgbGV0IGNlbnRlck9mZnNldCA9IHNjcmF0Y2hPZmZzZXQ7CiAgICBjZW50ZXJPZmZzZXQueCA9IChtaW5pbXVtWCArIG1heGltdW1YKSAvIDI7CiAgICBjZW50ZXJPZmZzZXQueSA9IChtaW5pbXVtWSArIG1heGltdW1ZKSAvIDI7CiAgICBjZW50ZXJPZmZzZXQueiA9IChtaW5pbXVtWiArIG1heGltdW1aKSAvIDI7CiAgICBjb25zdCBzY2FsZSA9IHNjcmF0Y2hTY2FsZTI7CiAgICBzY2FsZS54ID0gKG1heGltdW1YIC0gbWluaW11bVgpIC8gMjsKICAgIHNjYWxlLnkgPSAobWF4aW11bVkgLSBtaW5pbXVtWSkgLyAyOwogICAgc2NhbGUueiA9IChtYXhpbXVtWiAtIG1pbmltdW1aKSAvIDI7CiAgICBjb25zdCBjZW50ZXIgPSByZXN1bHQuY2VudGVyOwogICAgY2VudGVyT2Zmc2V0ID0gTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IoaGFsZkF4ZXMsIGNlbnRlck9mZnNldCwgY2VudGVyT2Zmc2V0KTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocGxhbmVPcmlnaW4sIGNlbnRlck9mZnNldCwgY2VudGVyKTsKICAgIE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGUoaGFsZkF4ZXMsIHNjYWxlLCBoYWxmQXhlcyk7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICB2YXIgc2NyYXRjaENhcnRlc2lhbjE1LCBzY3JhdGNoQ2FydGVzaWFuMjUsIHNjcmF0Y2hDYXJ0ZXNpYW4zNiwgc2NyYXRjaENhcnRlc2lhbjQyLCBzY3JhdGNoQ2FydGVzaWFuNSwgc2NyYXRjaENhcnRlc2lhbjYsIHNjcmF0Y2hDb3ZhcmlhbmNlUmVzdWx0LCBzY3JhdGNoRWlnZW5SZXN1bHQsIHNjcmF0Y2hPZmZzZXQsIHNjcmF0Y2hTY2FsZTIsIHNjcmF0Y2hSZWN0YW5nbGVDZW50ZXJDYXJ0b2dyYXBoaWMsIHNjcmF0Y2hSZWN0YW5nbGVDZW50ZXIsIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0b2dyYXBoaWNOQywgc2NyYXRjaFBlcmltZXRlckNhcnRvZ3JhcGhpY05XLCBzY3JhdGNoUGVyaW1ldGVyQ2FydG9ncmFwaGljQ1csIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0b2dyYXBoaWNTVywgc2NyYXRjaFBlcmltZXRlckNhcnRvZ3JhcGhpY1NDLCBzY3JhdGNoUGVyaW1ldGVyQ2FydGVzaWFuTkMsIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0ZXNpYW5OVywgc2NyYXRjaFBlcmltZXRlckNhcnRlc2lhbkNXLCBzY3JhdGNoUGVyaW1ldGVyQ2FydGVzaWFuU1csIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0ZXNpYW5TQywgc2NyYXRjaFBlcmltZXRlclByb2plY3RlZE5DLCBzY3JhdGNoUGVyaW1ldGVyUHJvamVjdGVkTlcsIHNjcmF0Y2hQZXJpbWV0ZXJQcm9qZWN0ZWRDVywgc2NyYXRjaFBlcmltZXRlclByb2plY3RlZFNXLCBzY3JhdGNoUGVyaW1ldGVyUHJvamVjdGVkU0MsIHNjcmF0Y2hQbGFuZU9yaWdpbiwgc2NyYXRjaFBsYW5lTm9ybWFsLCBzY3JhdGNoUGxhbmVYQXhpcywgc2NyYXRjaEhvcml6b25DYXJ0ZXNpYW4sIHNjcmF0Y2hIb3Jpem9uUHJvamVjdGVkLCBzY3JhdGNoTWF4WSwgc2NyYXRjaE1pblksIHNjcmF0Y2haLCBzY3JhdGNoUGxhbmUsIHNjcmF0Y2hDYXJ0ZXNpYW5VLCBzY3JhdGNoQ2FydGVzaWFuViwgc2NyYXRjaENhcnRlc2lhblcsIHNjcmF0Y2hWYWxpZEF4aXMyLCBzY3JhdGNoVmFsaWRBeGlzMywgc2NyYXRjaFBQcmltZSwgc2NyYXRjaENvcm5lciwgc2NyYXRjaFRvQ2VudGVyLCBzY3JhdGNoWEF4aXMsIHNjcmF0Y2hZQXhpcywgc2NyYXRjaFpBeGlzLCBzY3JhdGNoUm90YXRpb25TY2FsZSwgc2NyYXRjaEJvdW5kaW5nU3BoZXJlLCBPcmllbnRlZEJvdW5kaW5nQm94X2RlZmF1bHQ7CiAgdmFyIGluaXRfT3JpZW50ZWRCb3VuZGluZ0JveCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvT3JpZW50ZWRCb3VuZGluZ0JveC5qcyIoKSB7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkVGFuZ2VudFBsYW5lKCk7CiAgICAgIGluaXRfSW50ZXJzZWN0KCk7CiAgICAgIGluaXRfSW50ZXJ2YWwoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfTWF0cml4MygpOwogICAgICBpbml0X01hdHJpeDQoKTsKICAgICAgaW5pdF9QbGFuZSgpOwogICAgICBpbml0X1JlY3RhbmdsZSgpOwogICAgICBPcmllbnRlZEJvdW5kaW5nQm94LnBhY2tlZExlbmd0aCA9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBNYXRyaXgzX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICBPcmllbnRlZEJvdW5kaW5nQm94LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHZhbHVlLmNlbnRlciwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIE1hdHJpeDNfZGVmYXVsdC5wYWNrKHZhbHVlLmhhbGZBeGVzLCBhcnJheSwgc3RhcnRpbmdJbmRleCArIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgpOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgT3JpZW50ZWRCb3VuZGluZ0JveC51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IE9yaWVudGVkQm91bmRpbmdCb3goKTsKICAgICAgICB9CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgTWF0cml4M19kZWZhdWx0LnVucGFjaygKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCArIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgsCiAgICAgICAgICByZXN1bHQuaGFsZkF4ZXMKICAgICAgICApOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xNSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjI1ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuMzYgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW40MiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjUgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW42ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ292YXJpYW5jZVJlc3VsdCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEVpZ2VuUmVzdWx0ID0gewogICAgICAgIHVuaXRhcnk6IG5ldyBNYXRyaXgzX2RlZmF1bHQoKSwKICAgICAgICBkaWFnb25hbDogbmV3IE1hdHJpeDNfZGVmYXVsdCgpCiAgICAgIH07CiAgICAgIE9yaWVudGVkQm91bmRpbmdCb3guZnJvbVBvaW50cyA9IGZ1bmN0aW9uKHBvc2l0aW9ucywgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IE9yaWVudGVkQm91bmRpbmdCb3goKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zKSB8fCBwb3NpdGlvbnMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICByZXN1bHQuaGFsZkF4ZXMgPSBNYXRyaXgzX2RlZmF1bHQuWkVSTzsKICAgICAgICAgIHJlc3VsdC5jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTzsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIGxldCBpOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgY29uc3QgbWVhblBvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHBvc2l0aW9uc1swXSwgc2NyYXRjaENhcnRlc2lhbjE1KTsKICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobWVhblBvaW50LCBwb3NpdGlvbnNbaV0sIG1lYW5Qb2ludCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGludkxlbmd0aCA9IDEgLyBsZW5ndGg7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobWVhblBvaW50LCBpbnZMZW5ndGgsIG1lYW5Qb2ludCk7CiAgICAgICAgbGV0IGV4eCA9IDA7CiAgICAgICAgbGV0IGV4eSA9IDA7CiAgICAgICAgbGV0IGV4eiA9IDA7CiAgICAgICAgbGV0IGV5eSA9IDA7CiAgICAgICAgbGV0IGV5eiA9IDA7CiAgICAgICAgbGV0IGV6eiA9IDA7CiAgICAgICAgbGV0IHA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBwID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHBvc2l0aW9uc1tpXSwgbWVhblBvaW50LCBzY3JhdGNoQ2FydGVzaWFuMjUpOwogICAgICAgICAgZXh4ICs9IHAueCAqIHAueDsKICAgICAgICAgIGV4eSArPSBwLnggKiBwLnk7CiAgICAgICAgICBleHogKz0gcC54ICogcC56OwogICAgICAgICAgZXl5ICs9IHAueSAqIHAueTsKICAgICAgICAgIGV5eiArPSBwLnkgKiBwLno7CiAgICAgICAgICBlenogKz0gcC56ICogcC56OwogICAgICAgIH0KICAgICAgICBleHggKj0gaW52TGVuZ3RoOwogICAgICAgIGV4eSAqPSBpbnZMZW5ndGg7CiAgICAgICAgZXh6ICo9IGludkxlbmd0aDsKICAgICAgICBleXkgKj0gaW52TGVuZ3RoOwogICAgICAgIGV5eiAqPSBpbnZMZW5ndGg7CiAgICAgICAgZXp6ICo9IGludkxlbmd0aDsKICAgICAgICBjb25zdCBjb3ZhcmlhbmNlTWF0cml4ID0gc2NyYXRjaENvdmFyaWFuY2VSZXN1bHQ7CiAgICAgICAgY292YXJpYW5jZU1hdHJpeFswXSA9IGV4eDsKICAgICAgICBjb3ZhcmlhbmNlTWF0cml4WzFdID0gZXh5OwogICAgICAgIGNvdmFyaWFuY2VNYXRyaXhbMl0gPSBleHo7CiAgICAgICAgY292YXJpYW5jZU1hdHJpeFszXSA9IGV4eTsKICAgICAgICBjb3ZhcmlhbmNlTWF0cml4WzRdID0gZXl5OwogICAgICAgIGNvdmFyaWFuY2VNYXRyaXhbNV0gPSBleXo7CiAgICAgICAgY292YXJpYW5jZU1hdHJpeFs2XSA9IGV4ejsKICAgICAgICBjb3ZhcmlhbmNlTWF0cml4WzddID0gZXl6OwogICAgICAgIGNvdmFyaWFuY2VNYXRyaXhbOF0gPSBleno7CiAgICAgICAgY29uc3QgZWlnZW5EZWNvbXBvc2l0aW9uID0gTWF0cml4M19kZWZhdWx0LmNvbXB1dGVFaWdlbkRlY29tcG9zaXRpb24oCiAgICAgICAgICBjb3ZhcmlhbmNlTWF0cml4LAogICAgICAgICAgc2NyYXRjaEVpZ2VuUmVzdWx0CiAgICAgICAgKTsKICAgICAgICBjb25zdCByb3RhdGlvbiA9IE1hdHJpeDNfZGVmYXVsdC5jbG9uZShlaWdlbkRlY29tcG9zaXRpb24udW5pdGFyeSwgcmVzdWx0LmhhbGZBeGVzKTsKICAgICAgICBsZXQgdjEyID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihyb3RhdGlvbiwgMCwgc2NyYXRjaENhcnRlc2lhbjQyKTsKICAgICAgICBsZXQgdjIyID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihyb3RhdGlvbiwgMSwgc2NyYXRjaENhcnRlc2lhbjUpOwogICAgICAgIGxldCB2MyA9IE1hdHJpeDNfZGVmYXVsdC5nZXRDb2x1bW4ocm90YXRpb24sIDIsIHNjcmF0Y2hDYXJ0ZXNpYW42KTsKICAgICAgICBsZXQgdTEyID0gLU51bWJlci5NQVhfVkFMVUU7CiAgICAgICAgbGV0IHUyMiA9IC1OdW1iZXIuTUFYX1ZBTFVFOwogICAgICAgIGxldCB1MyA9IC1OdW1iZXIuTUFYX1ZBTFVFOwogICAgICAgIGxldCBsMSA9IE51bWJlci5NQVhfVkFMVUU7CiAgICAgICAgbGV0IGwyID0gTnVtYmVyLk1BWF9WQUxVRTsKICAgICAgICBsZXQgbDMgPSBOdW1iZXIuTUFYX1ZBTFVFOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgcCA9IHBvc2l0aW9uc1tpXTsKICAgICAgICAgIHUxMiA9IE1hdGgubWF4KENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodjEyLCBwKSwgdTEyKTsKICAgICAgICAgIHUyMiA9IE1hdGgubWF4KENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodjIyLCBwKSwgdTIyKTsKICAgICAgICAgIHUzID0gTWF0aC5tYXgoQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh2MywgcCksIHUzKTsKICAgICAgICAgIGwxID0gTWF0aC5taW4oQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh2MTIsIHApLCBsMSk7CiAgICAgICAgICBsMiA9IE1hdGgubWluKENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodjIyLCBwKSwgbDIpOwogICAgICAgICAgbDMgPSBNYXRoLm1pbihDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KHYzLCBwKSwgbDMpOwogICAgICAgIH0KICAgICAgICB2MTIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcih2MTIsIDAuNSAqIChsMSArIHUxMiksIHYxMik7CiAgICAgICAgdjIyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIodjIyLCAwLjUgKiAobDIgKyB1MjIpLCB2MjIpOwogICAgICAgIHYzID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIodjMsIDAuNSAqIChsMyArIHUzKSwgdjMpOwogICAgICAgIGNvbnN0IGNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQodjEyLCB2MjIsIHJlc3VsdC5jZW50ZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY2VudGVyLCB2MywgY2VudGVyKTsKICAgICAgICBjb25zdCBzY2FsZSA9IHNjcmF0Y2hDYXJ0ZXNpYW4zNjsKICAgICAgICBzY2FsZS54ID0gdTEyIC0gbDE7CiAgICAgICAgc2NhbGUueSA9IHUyMiAtIGwyOwogICAgICAgIHNjYWxlLnogPSB1MyAtIGwzOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHNjYWxlLCAwLjUsIHNjYWxlKTsKICAgICAgICBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxlKHJlc3VsdC5oYWxmQXhlcywgc2NhbGUsIHJlc3VsdC5oYWxmQXhlcyk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NyYXRjaE9mZnNldCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFNjYWxlMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFJlY3RhbmdsZUNlbnRlckNhcnRvZ3JhcGhpYyA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUmVjdGFuZ2xlQ2VudGVyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGVyaW1ldGVyQ2FydG9ncmFwaGljTkMgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBlcmltZXRlckNhcnRvZ3JhcGhpY05XID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0b2dyYXBoaWNDVyA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGVyaW1ldGVyQ2FydG9ncmFwaGljU1cgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBlcmltZXRlckNhcnRvZ3JhcGhpY1NDID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0ZXNpYW5OQyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBlcmltZXRlckNhcnRlc2lhbk5XID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGVyaW1ldGVyQ2FydGVzaWFuQ1cgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0ZXNpYW5TVyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBlcmltZXRlckNhcnRlc2lhblNDID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGVyaW1ldGVyUHJvamVjdGVkTkMgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJQcm9qZWN0ZWROVyA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBlcmltZXRlclByb2plY3RlZENXID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGVyaW1ldGVyUHJvamVjdGVkU1cgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJQcm9qZWN0ZWRTQyA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBsYW5lT3JpZ2luID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGxhbmVOb3JtYWwgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQbGFuZVhBeGlzID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoSG9yaXpvbkNhcnRlc2lhbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEhvcml6b25Qcm9qZWN0ZWQgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hNYXhZID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTWluWSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFogPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQbGFuZSA9IG5ldyBQbGFuZV9kZWZhdWx0KENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1gsIDApOwogICAgICBPcmllbnRlZEJvdW5kaW5nQm94LmZyb21SZWN0YW5nbGUgPSBmdW5jdGlvbihyZWN0YW5nbGUsIG1pbmltdW1IZWlnaHQsIG1heGltdW1IZWlnaHQsIGVsbGlwc29pZCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVjdGFuZ2xlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInJlY3RhbmdsZSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBpZiAocmVjdGFuZ2xlLndpZHRoIDwgMCB8fCByZWN0YW5nbGUud2lkdGggPiBNYXRoX2RlZmF1bHQuVFdPX1BJKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiUmVjdGFuZ2xlIHdpZHRoIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAyICogcGkiKTsKICAgICAgICB9CiAgICAgICAgaWYgKHJlY3RhbmdsZS5oZWlnaHQgPCAwIHx8IHJlY3RhbmdsZS5oZWlnaHQgPiBNYXRoX2RlZmF1bHQuUEkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJSZWN0YW5nbGUgaGVpZ2h0IG11c3QgYmUgYmV0d2VlbiAwIGFuZCBwaSIpOwogICAgICAgIH0KICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGVsbGlwc29pZCkgJiYgIU1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgZWxsaXBzb2lkLnJhZGlpLngsCiAgICAgICAgICBlbGxpcHNvaWQucmFkaWkueSwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTUKICAgICAgICApKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgIkVsbGlwc29pZCBtdXN0IGJlIGFuIGVsbGlwc29pZCBvZiByZXZvbHV0aW9uIChyYWRpaS54ID09IHJhZGlpLnkpIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgbWluaW11bUhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG1pbmltdW1IZWlnaHQsIDApOwogICAgICAgIG1heGltdW1IZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChtYXhpbXVtSGVpZ2h0LCAwKTsKICAgICAgICBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChlbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LldHUzg0KTsKICAgICAgICBsZXQgbWluWCwgbWF4WCwgbWluWSwgbWF4WSwgbWluWiwgbWF4WiwgcGxhbmU7CiAgICAgICAgaWYgKHJlY3RhbmdsZS53aWR0aCA8PSBNYXRoX2RlZmF1bHQuUEkpIHsKICAgICAgICAgIGNvbnN0IHRhbmdlbnRQb2ludENhcnRvZ3JhcGhpYyA9IFJlY3RhbmdsZV9kZWZhdWx0LmNlbnRlcigKICAgICAgICAgICAgcmVjdGFuZ2xlLAogICAgICAgICAgICBzY3JhdGNoUmVjdGFuZ2xlQ2VudGVyQ2FydG9ncmFwaGljCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgdGFuZ2VudFBvaW50ID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKAogICAgICAgICAgICB0YW5nZW50UG9pbnRDYXJ0b2dyYXBoaWMsCiAgICAgICAgICAgIHNjcmF0Y2hSZWN0YW5nbGVDZW50ZXIKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCB0YW5nZW50UGxhbmUgPSBuZXcgRWxsaXBzb2lkVGFuZ2VudFBsYW5lX2RlZmF1bHQodGFuZ2VudFBvaW50LCBlbGxpcHNvaWQpOwogICAgICAgICAgcGxhbmUgPSB0YW5nZW50UGxhbmUucGxhbmU7CiAgICAgICAgICBjb25zdCBsb25DZW50ZXIgPSB0YW5nZW50UG9pbnRDYXJ0b2dyYXBoaWMubG9uZ2l0dWRlOwogICAgICAgICAgY29uc3QgbGF0Q2VudGVyID0gcmVjdGFuZ2xlLnNvdXRoIDwgMCAmJiByZWN0YW5nbGUubm9ydGggPiAwID8gMCA6IHRhbmdlbnRQb2ludENhcnRvZ3JhcGhpYy5sYXRpdHVkZTsKICAgICAgICAgIGNvbnN0IHBlcmltZXRlckNhcnRvZ3JhcGhpY05DID0gQ2FydG9ncmFwaGljX2RlZmF1bHQuZnJvbVJhZGlhbnMoCiAgICAgICAgICAgIGxvbkNlbnRlciwKICAgICAgICAgICAgcmVjdGFuZ2xlLm5vcnRoLAogICAgICAgICAgICBtYXhpbXVtSGVpZ2h0LAogICAgICAgICAgICBzY3JhdGNoUGVyaW1ldGVyQ2FydG9ncmFwaGljTkMKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBwZXJpbWV0ZXJDYXJ0b2dyYXBoaWNOVyA9IENhcnRvZ3JhcGhpY19kZWZhdWx0LmZyb21SYWRpYW5zKAogICAgICAgICAgICByZWN0YW5nbGUud2VzdCwKICAgICAgICAgICAgcmVjdGFuZ2xlLm5vcnRoLAogICAgICAgICAgICBtYXhpbXVtSGVpZ2h0LAogICAgICAgICAgICBzY3JhdGNoUGVyaW1ldGVyQ2FydG9ncmFwaGljTlcKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBwZXJpbWV0ZXJDYXJ0b2dyYXBoaWNDVyA9IENhcnRvZ3JhcGhpY19kZWZhdWx0LmZyb21SYWRpYW5zKAogICAgICAgICAgICByZWN0YW5nbGUud2VzdCwKICAgICAgICAgICAgbGF0Q2VudGVyLAogICAgICAgICAgICBtYXhpbXVtSGVpZ2h0LAogICAgICAgICAgICBzY3JhdGNoUGVyaW1ldGVyQ2FydG9ncmFwaGljQ1cKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBwZXJpbWV0ZXJDYXJ0b2dyYXBoaWNTVyA9IENhcnRvZ3JhcGhpY19kZWZhdWx0LmZyb21SYWRpYW5zKAogICAgICAgICAgICByZWN0YW5nbGUud2VzdCwKICAgICAgICAgICAgcmVjdGFuZ2xlLnNvdXRoLAogICAgICAgICAgICBtYXhpbXVtSGVpZ2h0LAogICAgICAgICAgICBzY3JhdGNoUGVyaW1ldGVyQ2FydG9ncmFwaGljU1cKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBwZXJpbWV0ZXJDYXJ0b2dyYXBoaWNTQyA9IENhcnRvZ3JhcGhpY19kZWZhdWx0LmZyb21SYWRpYW5zKAogICAgICAgICAgICBsb25DZW50ZXIsCiAgICAgICAgICAgIHJlY3RhbmdsZS5zb3V0aCwKICAgICAgICAgICAgbWF4aW11bUhlaWdodCwKICAgICAgICAgICAgc2NyYXRjaFBlcmltZXRlckNhcnRvZ3JhcGhpY1NDCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgcGVyaW1ldGVyQ2FydGVzaWFuTkMgPSBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oCiAgICAgICAgICAgIHBlcmltZXRlckNhcnRvZ3JhcGhpY05DLAogICAgICAgICAgICBzY3JhdGNoUGVyaW1ldGVyQ2FydGVzaWFuTkMKICAgICAgICAgICk7CiAgICAgICAgICBsZXQgcGVyaW1ldGVyQ2FydGVzaWFuTlcgPSBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oCiAgICAgICAgICAgIHBlcmltZXRlckNhcnRvZ3JhcGhpY05XLAogICAgICAgICAgICBzY3JhdGNoUGVyaW1ldGVyQ2FydGVzaWFuTlcKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBwZXJpbWV0ZXJDYXJ0ZXNpYW5DVyA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbigKICAgICAgICAgICAgcGVyaW1ldGVyQ2FydG9ncmFwaGljQ1csCiAgICAgICAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0ZXNpYW5DVwogICAgICAgICAgKTsKICAgICAgICAgIGxldCBwZXJpbWV0ZXJDYXJ0ZXNpYW5TVyA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbigKICAgICAgICAgICAgcGVyaW1ldGVyQ2FydG9ncmFwaGljU1csCiAgICAgICAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0ZXNpYW5TVwogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHBlcmltZXRlckNhcnRlc2lhblNDID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKAogICAgICAgICAgICBwZXJpbWV0ZXJDYXJ0b2dyYXBoaWNTQywKICAgICAgICAgICAgc2NyYXRjaFBlcmltZXRlckNhcnRlc2lhblNDCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgcGVyaW1ldGVyUHJvamVjdGVkTkMgPSB0YW5nZW50UGxhbmUucHJvamVjdFBvaW50VG9OZWFyZXN0T25QbGFuZSgKICAgICAgICAgICAgcGVyaW1ldGVyQ2FydGVzaWFuTkMsCiAgICAgICAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJQcm9qZWN0ZWROQwogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHBlcmltZXRlclByb2plY3RlZE5XID0gdGFuZ2VudFBsYW5lLnByb2plY3RQb2ludFRvTmVhcmVzdE9uUGxhbmUoCiAgICAgICAgICAgIHBlcmltZXRlckNhcnRlc2lhbk5XLAogICAgICAgICAgICBzY3JhdGNoUGVyaW1ldGVyUHJvamVjdGVkTlcKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBwZXJpbWV0ZXJQcm9qZWN0ZWRDVyA9IHRhbmdlbnRQbGFuZS5wcm9qZWN0UG9pbnRUb05lYXJlc3RPblBsYW5lKAogICAgICAgICAgICBwZXJpbWV0ZXJDYXJ0ZXNpYW5DVywKICAgICAgICAgICAgc2NyYXRjaFBlcmltZXRlclByb2plY3RlZENXCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgcGVyaW1ldGVyUHJvamVjdGVkU1cgPSB0YW5nZW50UGxhbmUucHJvamVjdFBvaW50VG9OZWFyZXN0T25QbGFuZSgKICAgICAgICAgICAgcGVyaW1ldGVyQ2FydGVzaWFuU1csCiAgICAgICAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJQcm9qZWN0ZWRTVwogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHBlcmltZXRlclByb2plY3RlZFNDID0gdGFuZ2VudFBsYW5lLnByb2plY3RQb2ludFRvTmVhcmVzdE9uUGxhbmUoCiAgICAgICAgICAgIHBlcmltZXRlckNhcnRlc2lhblNDLAogICAgICAgICAgICBzY3JhdGNoUGVyaW1ldGVyUHJvamVjdGVkU0MKICAgICAgICAgICk7CiAgICAgICAgICBtaW5YID0gTWF0aC5taW4oCiAgICAgICAgICAgIHBlcmltZXRlclByb2plY3RlZE5XLngsCiAgICAgICAgICAgIHBlcmltZXRlclByb2plY3RlZENXLngsCiAgICAgICAgICAgIHBlcmltZXRlclByb2plY3RlZFNXLngKICAgICAgICAgICk7CiAgICAgICAgICBtYXhYID0gLW1pblg7CiAgICAgICAgICBtYXhZID0gTWF0aC5tYXgocGVyaW1ldGVyUHJvamVjdGVkTlcueSwgcGVyaW1ldGVyUHJvamVjdGVkTkMueSk7CiAgICAgICAgICBtaW5ZID0gTWF0aC5taW4ocGVyaW1ldGVyUHJvamVjdGVkU1cueSwgcGVyaW1ldGVyUHJvamVjdGVkU0MueSk7CiAgICAgICAgICBwZXJpbWV0ZXJDYXJ0b2dyYXBoaWNOVy5oZWlnaHQgPSBwZXJpbWV0ZXJDYXJ0b2dyYXBoaWNTVy5oZWlnaHQgPSBtaW5pbXVtSGVpZ2h0OwogICAgICAgICAgcGVyaW1ldGVyQ2FydGVzaWFuTlcgPSBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oCiAgICAgICAgICAgIHBlcmltZXRlckNhcnRvZ3JhcGhpY05XLAogICAgICAgICAgICBzY3JhdGNoUGVyaW1ldGVyQ2FydGVzaWFuTlcKICAgICAgICAgICk7CiAgICAgICAgICBwZXJpbWV0ZXJDYXJ0ZXNpYW5TVyA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbigKICAgICAgICAgICAgcGVyaW1ldGVyQ2FydG9ncmFwaGljU1csCiAgICAgICAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0ZXNpYW5TVwogICAgICAgICAgKTsKICAgICAgICAgIG1pblogPSBNYXRoLm1pbigKICAgICAgICAgICAgUGxhbmVfZGVmYXVsdC5nZXRQb2ludERpc3RhbmNlKHBsYW5lLCBwZXJpbWV0ZXJDYXJ0ZXNpYW5OVyksCiAgICAgICAgICAgIFBsYW5lX2RlZmF1bHQuZ2V0UG9pbnREaXN0YW5jZShwbGFuZSwgcGVyaW1ldGVyQ2FydGVzaWFuU1cpCiAgICAgICAgICApOwogICAgICAgICAgbWF4WiA9IG1heGltdW1IZWlnaHQ7CiAgICAgICAgICByZXR1cm4gZnJvbVBsYW5lRXh0ZW50cygKICAgICAgICAgICAgdGFuZ2VudFBsYW5lLm9yaWdpbiwKICAgICAgICAgICAgdGFuZ2VudFBsYW5lLnhBeGlzLAogICAgICAgICAgICB0YW5nZW50UGxhbmUueUF4aXMsCiAgICAgICAgICAgIHRhbmdlbnRQbGFuZS56QXhpcywKICAgICAgICAgICAgbWluWCwKICAgICAgICAgICAgbWF4WCwKICAgICAgICAgICAgbWluWSwKICAgICAgICAgICAgbWF4WSwKICAgICAgICAgICAgbWluWiwKICAgICAgICAgICAgbWF4WiwKICAgICAgICAgICAgcmVzdWx0CiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCBmdWxseUFib3ZlRXF1YXRvciA9IHJlY3RhbmdsZS5zb3V0aCA+IDA7CiAgICAgICAgY29uc3QgZnVsbHlCZWxvd0VxdWF0b3IgPSByZWN0YW5nbGUubm9ydGggPCAwOwogICAgICAgIGNvbnN0IGxhdGl0dWRlTmVhcmVzdFRvRXF1YXRvciA9IGZ1bGx5QWJvdmVFcXVhdG9yID8gcmVjdGFuZ2xlLnNvdXRoIDogZnVsbHlCZWxvd0VxdWF0b3IgPyByZWN0YW5nbGUubm9ydGggOiAwOwogICAgICAgIGNvbnN0IGNlbnRlckxvbmdpdHVkZSA9IFJlY3RhbmdsZV9kZWZhdWx0LmNlbnRlcigKICAgICAgICAgIHJlY3RhbmdsZSwKICAgICAgICAgIHNjcmF0Y2hSZWN0YW5nbGVDZW50ZXJDYXJ0b2dyYXBoaWMKICAgICAgICApLmxvbmdpdHVkZTsKICAgICAgICBjb25zdCBwbGFuZU9yaWdpbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tUmFkaWFucygKICAgICAgICAgIGNlbnRlckxvbmdpdHVkZSwKICAgICAgICAgIGxhdGl0dWRlTmVhcmVzdFRvRXF1YXRvciwKICAgICAgICAgIG1heGltdW1IZWlnaHQsCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBzY3JhdGNoUGxhbmVPcmlnaW4KICAgICAgICApOwogICAgICAgIHBsYW5lT3JpZ2luLnogPSAwOwogICAgICAgIGNvbnN0IGlzUG9sZSA9IE1hdGguYWJzKHBsYW5lT3JpZ2luLngpIDwgTWF0aF9kZWZhdWx0LkVQU0lMT04xMCAmJiBNYXRoLmFicyhwbGFuZU9yaWdpbi55KSA8IE1hdGhfZGVmYXVsdC5FUFNJTE9OMTA7CiAgICAgICAgY29uc3QgcGxhbmVOb3JtYWwgPSAhaXNQb2xlID8gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShwbGFuZU9yaWdpbiwgc2NyYXRjaFBsYW5lTm9ybWFsKSA6IENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1g7CiAgICAgICAgY29uc3QgcGxhbmVZQXhpcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1o7CiAgICAgICAgY29uc3QgcGxhbmVYQXhpcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcygKICAgICAgICAgIHBsYW5lTm9ybWFsLAogICAgICAgICAgcGxhbmVZQXhpcywKICAgICAgICAgIHNjcmF0Y2hQbGFuZVhBeGlzCiAgICAgICAgKTsKICAgICAgICBwbGFuZSA9IFBsYW5lX2RlZmF1bHQuZnJvbVBvaW50Tm9ybWFsKHBsYW5lT3JpZ2luLCBwbGFuZU5vcm1hbCwgc2NyYXRjaFBsYW5lKTsKICAgICAgICBjb25zdCBob3Jpem9uQ2FydGVzaWFuID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21SYWRpYW5zKAogICAgICAgICAgY2VudGVyTG9uZ2l0dWRlICsgTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPLAogICAgICAgICAgbGF0aXR1ZGVOZWFyZXN0VG9FcXVhdG9yLAogICAgICAgICAgbWF4aW11bUhlaWdodCwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHNjcmF0Y2hIb3Jpem9uQ2FydGVzaWFuCiAgICAgICAgKTsKICAgICAgICBtYXhYID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdCgKICAgICAgICAgIFBsYW5lX2RlZmF1bHQucHJvamVjdFBvaW50T250b1BsYW5lKAogICAgICAgICAgICBwbGFuZSwKICAgICAgICAgICAgaG9yaXpvbkNhcnRlc2lhbiwKICAgICAgICAgICAgc2NyYXRjaEhvcml6b25Qcm9qZWN0ZWQKICAgICAgICAgICksCiAgICAgICAgICBwbGFuZVhBeGlzCiAgICAgICAgKTsKICAgICAgICBtaW5YID0gLW1heFg7CiAgICAgICAgbWF4WSA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tUmFkaWFucygKICAgICAgICAgIDAsCiAgICAgICAgICByZWN0YW5nbGUubm9ydGgsCiAgICAgICAgICBmdWxseUJlbG93RXF1YXRvciA/IG1pbmltdW1IZWlnaHQgOiBtYXhpbXVtSGVpZ2h0LAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgc2NyYXRjaE1heFkKICAgICAgICApLno7CiAgICAgICAgbWluWSA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tUmFkaWFucygKICAgICAgICAgIDAsCiAgICAgICAgICByZWN0YW5nbGUuc291dGgsCiAgICAgICAgICBmdWxseUFib3ZlRXF1YXRvciA/IG1pbmltdW1IZWlnaHQgOiBtYXhpbXVtSGVpZ2h0LAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgc2NyYXRjaE1pblkKICAgICAgICApLno7CiAgICAgICAgY29uc3QgZmFyWiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tUmFkaWFucygKICAgICAgICAgIHJlY3RhbmdsZS5lYXN0LAogICAgICAgICAgbGF0aXR1ZGVOZWFyZXN0VG9FcXVhdG9yLAogICAgICAgICAgbWF4aW11bUhlaWdodCwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHNjcmF0Y2haCiAgICAgICAgKTsKICAgICAgICBtaW5aID0gUGxhbmVfZGVmYXVsdC5nZXRQb2ludERpc3RhbmNlKHBsYW5lLCBmYXJaKTsKICAgICAgICBtYXhaID0gMDsKICAgICAgICByZXR1cm4gZnJvbVBsYW5lRXh0ZW50cygKICAgICAgICAgIHBsYW5lT3JpZ2luLAogICAgICAgICAgcGxhbmVYQXhpcywKICAgICAgICAgIHBsYW5lWUF4aXMsCiAgICAgICAgICBwbGFuZU5vcm1hbCwKICAgICAgICAgIG1pblgsCiAgICAgICAgICBtYXhYLAogICAgICAgICAgbWluWSwKICAgICAgICAgIG1heFksCiAgICAgICAgICBtaW5aLAogICAgICAgICAgbWF4WiwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIE9yaWVudGVkQm91bmRpbmdCb3guZnJvbVRyYW5zZm9ybWF0aW9uID0gZnVuY3Rpb24odHJhbnNmb3JtYXRpb24sIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidHJhbnNmb3JtYXRpb24iLCB0cmFuc2Zvcm1hdGlvbik7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IE9yaWVudGVkQm91bmRpbmdCb3goKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LmNlbnRlciA9IE1hdHJpeDRfZGVmYXVsdC5nZXRUcmFuc2xhdGlvbih0cmFuc2Zvcm1hdGlvbiwgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgcmVzdWx0LmhhbGZBeGVzID0gTWF0cml4NF9kZWZhdWx0LmdldE1hdHJpeDModHJhbnNmb3JtYXRpb24sIHJlc3VsdC5oYWxmQXhlcyk7CiAgICAgICAgcmVzdWx0LmhhbGZBeGVzID0gTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgICByZXN1bHQuaGFsZkF4ZXMsCiAgICAgICAgICAwLjUsCiAgICAgICAgICByZXN1bHQuaGFsZkF4ZXMKICAgICAgICApOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE9yaWVudGVkQm91bmRpbmdCb3guY2xvbmUgPSBmdW5jdGlvbihib3gsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGJveCkpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgT3JpZW50ZWRCb3VuZGluZ0JveChib3guY2VudGVyLCBib3guaGFsZkF4ZXMpOwogICAgICAgIH0KICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoYm94LmNlbnRlciwgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgTWF0cml4M19kZWZhdWx0LmNsb25lKGJveC5oYWxmQXhlcywgcmVzdWx0LmhhbGZBeGVzKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBPcmllbnRlZEJvdW5kaW5nQm94LmludGVyc2VjdFBsYW5lID0gZnVuY3Rpb24oYm94LCBwbGFuZSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGJveCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJib3ggaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBsYW5lKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInBsYW5lIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBjZW50ZXIgPSBib3guY2VudGVyOwogICAgICAgIGNvbnN0IG5vcm1hbDIgPSBwbGFuZS5ub3JtYWw7CiAgICAgICAgY29uc3QgaGFsZkF4ZXMgPSBib3guaGFsZkF4ZXM7CiAgICAgICAgY29uc3Qgbm9ybWFsWCA9IG5vcm1hbDIueCwgbm9ybWFsWSA9IG5vcm1hbDIueSwgbm9ybWFsWiA9IG5vcm1hbDIuejsKICAgICAgICBjb25zdCByYWRFZmZlY3RpdmUgPSBNYXRoLmFicygKICAgICAgICAgIG5vcm1hbFggKiBoYWxmQXhlc1tNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMFJPVzBdICsgbm9ybWFsWSAqIGhhbGZBeGVzW01hdHJpeDNfZGVmYXVsdC5DT0xVTU4wUk9XMV0gKyBub3JtYWxaICogaGFsZkF4ZXNbTWF0cml4M19kZWZhdWx0LkNPTFVNTjBST1cyXQogICAgICAgICkgKyBNYXRoLmFicygKICAgICAgICAgIG5vcm1hbFggKiBoYWxmQXhlc1tNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMVJPVzBdICsgbm9ybWFsWSAqIGhhbGZBeGVzW01hdHJpeDNfZGVmYXVsdC5DT0xVTU4xUk9XMV0gKyBub3JtYWxaICogaGFsZkF4ZXNbTWF0cml4M19kZWZhdWx0LkNPTFVNTjFST1cyXQogICAgICAgICkgKyBNYXRoLmFicygKICAgICAgICAgIG5vcm1hbFggKiBoYWxmQXhlc1tNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMlJPVzBdICsgbm9ybWFsWSAqIGhhbGZBeGVzW01hdHJpeDNfZGVmYXVsdC5DT0xVTU4yUk9XMV0gKyBub3JtYWxaICogaGFsZkF4ZXNbTWF0cml4M19kZWZhdWx0LkNPTFVNTjJST1cyXQogICAgICAgICk7CiAgICAgICAgY29uc3QgZGlzdGFuY2VUb1BsYW5lID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChub3JtYWwyLCBjZW50ZXIpICsgcGxhbmUuZGlzdGFuY2U7CiAgICAgICAgaWYgKGRpc3RhbmNlVG9QbGFuZSA8PSAtcmFkRWZmZWN0aXZlKSB7CiAgICAgICAgICByZXR1cm4gSW50ZXJzZWN0X2RlZmF1bHQuT1VUU0lERTsKICAgICAgICB9IGVsc2UgaWYgKGRpc3RhbmNlVG9QbGFuZSA+PSByYWRFZmZlY3RpdmUpIHsKICAgICAgICAgIHJldHVybiBJbnRlcnNlY3RfZGVmYXVsdC5JTlNJREU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBJbnRlcnNlY3RfZGVmYXVsdC5JTlRFUlNFQ1RJTkc7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW5VID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuViA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhblcgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hWYWxpZEF4aXMyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoVmFsaWRBeGlzMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBQcmltZSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgT3JpZW50ZWRCb3VuZGluZ0JveC5kaXN0YW5jZVNxdWFyZWRUbyA9IGZ1bmN0aW9uKGJveCwgY2FydGVzaWFuMTEpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChib3gpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYm94IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChjYXJ0ZXNpYW4xMSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJjYXJ0ZXNpYW4gaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG9mZnNldCA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjYXJ0ZXNpYW4xMSwgYm94LmNlbnRlciwgc2NyYXRjaE9mZnNldCk7CiAgICAgICAgY29uc3QgaGFsZkF4ZXMgPSBib3guaGFsZkF4ZXM7CiAgICAgICAgbGV0IHUzID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihoYWxmQXhlcywgMCwgc2NyYXRjaENhcnRlc2lhblUpOwogICAgICAgIGxldCB2MyA9IE1hdHJpeDNfZGVmYXVsdC5nZXRDb2x1bW4oaGFsZkF4ZXMsIDEsIHNjcmF0Y2hDYXJ0ZXNpYW5WKTsKICAgICAgICBsZXQgdyA9IE1hdHJpeDNfZGVmYXVsdC5nZXRDb2x1bW4oaGFsZkF4ZXMsIDIsIHNjcmF0Y2hDYXJ0ZXNpYW5XKTsKICAgICAgICBjb25zdCB1SGFsZiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUodTMpOwogICAgICAgIGNvbnN0IHZIYWxmID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSh2Myk7CiAgICAgICAgY29uc3Qgd0hhbGYgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKHcpOwogICAgICAgIGxldCB1VmFsaWQgPSB0cnVlOwogICAgICAgIGxldCB2VmFsaWQgPSB0cnVlOwogICAgICAgIGxldCB3VmFsaWQgPSB0cnVlOwogICAgICAgIGlmICh1SGFsZiA+IDApIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5kaXZpZGVCeVNjYWxhcih1MywgdUhhbGYsIHUzKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdVZhbGlkID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGlmICh2SGFsZiA+IDApIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5kaXZpZGVCeVNjYWxhcih2MywgdkhhbGYsIHYzKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdlZhbGlkID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGlmICh3SGFsZiA+IDApIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5kaXZpZGVCeVNjYWxhcih3LCB3SGFsZiwgdyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHdWYWxpZCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICBjb25zdCBudW1iZXJPZkRlZ2VuZXJhdGVBeGVzID0gIXVWYWxpZCArICF2VmFsaWQgKyAhd1ZhbGlkOwogICAgICAgIGxldCB2YWxpZEF4aXMxOwogICAgICAgIGxldCB2YWxpZEF4aXMyOwogICAgICAgIGxldCB2YWxpZEF4aXMzOwogICAgICAgIGlmIChudW1iZXJPZkRlZ2VuZXJhdGVBeGVzID09PSAxKSB7CiAgICAgICAgICBsZXQgZGVnZW5lcmF0ZUF4aXMgPSB1MzsKICAgICAgICAgIHZhbGlkQXhpczEgPSB2MzsKICAgICAgICAgIHZhbGlkQXhpczIgPSB3OwogICAgICAgICAgaWYgKCF2VmFsaWQpIHsKICAgICAgICAgICAgZGVnZW5lcmF0ZUF4aXMgPSB2MzsKICAgICAgICAgICAgdmFsaWRBeGlzMSA9IHUzOwogICAgICAgICAgfSBlbHNlIGlmICghd1ZhbGlkKSB7CiAgICAgICAgICAgIGRlZ2VuZXJhdGVBeGlzID0gdzsKICAgICAgICAgICAgdmFsaWRBeGlzMiA9IHUzOwogICAgICAgICAgfQogICAgICAgICAgdmFsaWRBeGlzMyA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyh2YWxpZEF4aXMxLCB2YWxpZEF4aXMyLCBzY3JhdGNoVmFsaWRBeGlzMyk7CiAgICAgICAgICBpZiAoZGVnZW5lcmF0ZUF4aXMgPT09IHUzKSB7CiAgICAgICAgICAgIHUzID0gdmFsaWRBeGlzMzsKICAgICAgICAgIH0gZWxzZSBpZiAoZGVnZW5lcmF0ZUF4aXMgPT09IHYzKSB7CiAgICAgICAgICAgIHYzID0gdmFsaWRBeGlzMzsKICAgICAgICAgIH0gZWxzZSBpZiAoZGVnZW5lcmF0ZUF4aXMgPT09IHcpIHsKICAgICAgICAgICAgdyA9IHZhbGlkQXhpczM7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChudW1iZXJPZkRlZ2VuZXJhdGVBeGVzID09PSAyKSB7CiAgICAgICAgICB2YWxpZEF4aXMxID0gdTM7CiAgICAgICAgICBpZiAodlZhbGlkKSB7CiAgICAgICAgICAgIHZhbGlkQXhpczEgPSB2MzsKICAgICAgICAgIH0gZWxzZSBpZiAod1ZhbGlkKSB7CiAgICAgICAgICAgIHZhbGlkQXhpczEgPSB3OwogICAgICAgICAgfQogICAgICAgICAgbGV0IGNyb3NzVmVjdG9yID0gQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWTsKICAgICAgICAgIGlmIChjcm9zc1ZlY3Rvci5lcXVhbHNFcHNpbG9uKHZhbGlkQXhpczEsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMykpIHsKICAgICAgICAgICAgY3Jvc3NWZWN0b3IgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9YOwogICAgICAgICAgfQogICAgICAgICAgdmFsaWRBeGlzMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyh2YWxpZEF4aXMxLCBjcm9zc1ZlY3Rvciwgc2NyYXRjaFZhbGlkQXhpczIpOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSh2YWxpZEF4aXMyLCB2YWxpZEF4aXMyKTsKICAgICAgICAgIHZhbGlkQXhpczMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3ModmFsaWRBeGlzMSwgdmFsaWRBeGlzMiwgc2NyYXRjaFZhbGlkQXhpczMpOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSh2YWxpZEF4aXMzLCB2YWxpZEF4aXMzKTsKICAgICAgICAgIGlmICh2YWxpZEF4aXMxID09PSB1MykgewogICAgICAgICAgICB2MyA9IHZhbGlkQXhpczI7CiAgICAgICAgICAgIHcgPSB2YWxpZEF4aXMzOwogICAgICAgICAgfSBlbHNlIGlmICh2YWxpZEF4aXMxID09PSB2MykgewogICAgICAgICAgICB3ID0gdmFsaWRBeGlzMjsKICAgICAgICAgICAgdTMgPSB2YWxpZEF4aXMzOwogICAgICAgICAgfSBlbHNlIGlmICh2YWxpZEF4aXMxID09PSB3KSB7CiAgICAgICAgICAgIHUzID0gdmFsaWRBeGlzMjsKICAgICAgICAgICAgdjMgPSB2YWxpZEF4aXMzOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAobnVtYmVyT2ZEZWdlbmVyYXRlQXhlcyA9PT0gMykgewogICAgICAgICAgdTMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9YOwogICAgICAgICAgdjMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9ZOwogICAgICAgICAgdyA9IENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1o7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHBQcmltZSA9IHNjcmF0Y2hQUHJpbWU7CiAgICAgICAgcFByaW1lLnggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KG9mZnNldCwgdTMpOwogICAgICAgIHBQcmltZS55ID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChvZmZzZXQsIHYzKTsKICAgICAgICBwUHJpbWUueiA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3Qob2Zmc2V0LCB3KTsKICAgICAgICBsZXQgZGlzdGFuY2VTcXVhcmVkID0gMDsKICAgICAgICBsZXQgZDsKICAgICAgICBpZiAocFByaW1lLnggPCAtdUhhbGYpIHsKICAgICAgICAgIGQgPSBwUHJpbWUueCArIHVIYWxmOwogICAgICAgICAgZGlzdGFuY2VTcXVhcmVkICs9IGQgKiBkOwogICAgICAgIH0gZWxzZSBpZiAocFByaW1lLnggPiB1SGFsZikgewogICAgICAgICAgZCA9IHBQcmltZS54IC0gdUhhbGY7CiAgICAgICAgICBkaXN0YW5jZVNxdWFyZWQgKz0gZCAqIGQ7CiAgICAgICAgfQogICAgICAgIGlmIChwUHJpbWUueSA8IC12SGFsZikgewogICAgICAgICAgZCA9IHBQcmltZS55ICsgdkhhbGY7CiAgICAgICAgICBkaXN0YW5jZVNxdWFyZWQgKz0gZCAqIGQ7CiAgICAgICAgfSBlbHNlIGlmIChwUHJpbWUueSA+IHZIYWxmKSB7CiAgICAgICAgICBkID0gcFByaW1lLnkgLSB2SGFsZjsKICAgICAgICAgIGRpc3RhbmNlU3F1YXJlZCArPSBkICogZDsKICAgICAgICB9CiAgICAgICAgaWYgKHBQcmltZS56IDwgLXdIYWxmKSB7CiAgICAgICAgICBkID0gcFByaW1lLnogKyB3SGFsZjsKICAgICAgICAgIGRpc3RhbmNlU3F1YXJlZCArPSBkICogZDsKICAgICAgICB9IGVsc2UgaWYgKHBQcmltZS56ID4gd0hhbGYpIHsKICAgICAgICAgIGQgPSBwUHJpbWUueiAtIHdIYWxmOwogICAgICAgICAgZGlzdGFuY2VTcXVhcmVkICs9IGQgKiBkOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZGlzdGFuY2VTcXVhcmVkOwogICAgICB9OwogICAgICBzY3JhdGNoQ29ybmVyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoVG9DZW50ZXIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIE9yaWVudGVkQm91bmRpbmdCb3guY29tcHV0ZVBsYW5lRGlzdGFuY2VzID0gZnVuY3Rpb24oYm94LCBwb3NpdGlvbiwgZGlyZWN0aW9uMiwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYm94KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImJveCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb24pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicG9zaXRpb24gaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGRpcmVjdGlvbjIpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZGlyZWN0aW9uIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgSW50ZXJ2YWxfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBsZXQgbWluRGlzdCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgICAgICBsZXQgbWF4RGlzdCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgICAgICBjb25zdCBjZW50ZXIgPSBib3guY2VudGVyOwogICAgICAgIGNvbnN0IGhhbGZBeGVzID0gYm94LmhhbGZBeGVzOwogICAgICAgIGNvbnN0IHUzID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihoYWxmQXhlcywgMCwgc2NyYXRjaENhcnRlc2lhblUpOwogICAgICAgIGNvbnN0IHYzID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihoYWxmQXhlcywgMSwgc2NyYXRjaENhcnRlc2lhblYpOwogICAgICAgIGNvbnN0IHcgPSBNYXRyaXgzX2RlZmF1bHQuZ2V0Q29sdW1uKGhhbGZBeGVzLCAyLCBzY3JhdGNoQ2FydGVzaWFuVyk7CiAgICAgICAgY29uc3QgY29ybmVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZCh1MywgdjMsIHNjcmF0Y2hDb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY29ybmVyLCB3LCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY29ybmVyLCBjZW50ZXIsIGNvcm5lcik7CiAgICAgICAgY29uc3QgdG9DZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoY29ybmVyLCBwb3NpdGlvbiwgc2NyYXRjaFRvQ2VudGVyKTsKICAgICAgICBsZXQgbWFnID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChkaXJlY3Rpb24yLCB0b0NlbnRlcik7CiAgICAgICAgbWluRGlzdCA9IE1hdGgubWluKG1hZywgbWluRGlzdCk7CiAgICAgICAgbWF4RGlzdCA9IE1hdGgubWF4KG1hZywgbWF4RGlzdCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjZW50ZXIsIHUzLCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY29ybmVyLCB2MywgY29ybmVyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoY29ybmVyLCB3LCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjb3JuZXIsIHBvc2l0aW9uLCB0b0NlbnRlcik7CiAgICAgICAgbWFnID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChkaXJlY3Rpb24yLCB0b0NlbnRlcik7CiAgICAgICAgbWluRGlzdCA9IE1hdGgubWluKG1hZywgbWluRGlzdCk7CiAgICAgICAgbWF4RGlzdCA9IE1hdGgubWF4KG1hZywgbWF4RGlzdCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjZW50ZXIsIHUzLCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjb3JuZXIsIHYzLCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY29ybmVyLCB3LCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjb3JuZXIsIHBvc2l0aW9uLCB0b0NlbnRlcik7CiAgICAgICAgbWFnID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChkaXJlY3Rpb24yLCB0b0NlbnRlcik7CiAgICAgICAgbWluRGlzdCA9IE1hdGgubWluKG1hZywgbWluRGlzdCk7CiAgICAgICAgbWF4RGlzdCA9IE1hdGgubWF4KG1hZywgbWF4RGlzdCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjZW50ZXIsIHUzLCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjb3JuZXIsIHYzLCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjb3JuZXIsIHcsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNvcm5lciwgcG9zaXRpb24sIHRvQ2VudGVyKTsKICAgICAgICBtYWcgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGRpcmVjdGlvbjIsIHRvQ2VudGVyKTsKICAgICAgICBtaW5EaXN0ID0gTWF0aC5taW4obWFnLCBtaW5EaXN0KTsKICAgICAgICBtYXhEaXN0ID0gTWF0aC5tYXgobWFnLCBtYXhEaXN0KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoY2VudGVyLCB1MywgY29ybmVyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGNvcm5lciwgdjMsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjb3JuZXIsIHcsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNvcm5lciwgcG9zaXRpb24sIHRvQ2VudGVyKTsKICAgICAgICBtYWcgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGRpcmVjdGlvbjIsIHRvQ2VudGVyKTsKICAgICAgICBtaW5EaXN0ID0gTWF0aC5taW4obWFnLCBtaW5EaXN0KTsKICAgICAgICBtYXhEaXN0ID0gTWF0aC5tYXgobWFnLCBtYXhEaXN0KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoY2VudGVyLCB1MywgY29ybmVyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGNvcm5lciwgdjMsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNvcm5lciwgdywgY29ybmVyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoY29ybmVyLCBwb3NpdGlvbiwgdG9DZW50ZXIpOwogICAgICAgIG1hZyA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QoZGlyZWN0aW9uMiwgdG9DZW50ZXIpOwogICAgICAgIG1pbkRpc3QgPSBNYXRoLm1pbihtYWcsIG1pbkRpc3QpOwogICAgICAgIG1heERpc3QgPSBNYXRoLm1heChtYWcsIG1heERpc3QpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjZW50ZXIsIHUzLCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjb3JuZXIsIHYzLCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY29ybmVyLCB3LCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjb3JuZXIsIHBvc2l0aW9uLCB0b0NlbnRlcik7CiAgICAgICAgbWFnID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChkaXJlY3Rpb24yLCB0b0NlbnRlcik7CiAgICAgICAgbWluRGlzdCA9IE1hdGgubWluKG1hZywgbWluRGlzdCk7CiAgICAgICAgbWF4RGlzdCA9IE1hdGgubWF4KG1hZywgbWF4RGlzdCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNlbnRlciwgdTMsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNvcm5lciwgdjMsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNvcm5lciwgdywgY29ybmVyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoY29ybmVyLCBwb3NpdGlvbiwgdG9DZW50ZXIpOwogICAgICAgIG1hZyA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QoZGlyZWN0aW9uMiwgdG9DZW50ZXIpOwogICAgICAgIG1pbkRpc3QgPSBNYXRoLm1pbihtYWcsIG1pbkRpc3QpOwogICAgICAgIG1heERpc3QgPSBNYXRoLm1heChtYWcsIG1heERpc3QpOwogICAgICAgIHJlc3VsdC5zdGFydCA9IG1pbkRpc3Q7CiAgICAgICAgcmVzdWx0LnN0b3AgPSBtYXhEaXN0OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hYQXhpcyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFlBeGlzID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoWkF4aXMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIE9yaWVudGVkQm91bmRpbmdCb3guY29tcHV0ZUNvcm5lcnMgPSBmdW5jdGlvbihib3gsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiYm94IiwgYm94KTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBbCiAgICAgICAgICAgIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwKICAgICAgICAgICAgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLAogICAgICAgICAgICBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksCiAgICAgICAgICAgIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwKICAgICAgICAgICAgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLAogICAgICAgICAgICBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksCiAgICAgICAgICAgIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwKICAgICAgICAgICAgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpCiAgICAgICAgICBdOwogICAgICAgIH0KICAgICAgICBjb25zdCBjZW50ZXIgPSBib3guY2VudGVyOwogICAgICAgIGNvbnN0IGhhbGZBeGVzID0gYm94LmhhbGZBeGVzOwogICAgICAgIGNvbnN0IHhBeGlzID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihoYWxmQXhlcywgMCwgc2NyYXRjaFhBeGlzKTsKICAgICAgICBjb25zdCB5QXhpcyA9IE1hdHJpeDNfZGVmYXVsdC5nZXRDb2x1bW4oaGFsZkF4ZXMsIDEsIHNjcmF0Y2hZQXhpcyk7CiAgICAgICAgY29uc3QgekF4aXMgPSBNYXRyaXgzX2RlZmF1bHQuZ2V0Q29sdW1uKGhhbGZBeGVzLCAyLCBzY3JhdGNoWkF4aXMpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjZW50ZXIsIHJlc3VsdFswXSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHJlc3VsdFswXSwgeEF4aXMsIHJlc3VsdFswXSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHJlc3VsdFswXSwgeUF4aXMsIHJlc3VsdFswXSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHJlc3VsdFswXSwgekF4aXMsIHJlc3VsdFswXSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGNlbnRlciwgcmVzdWx0WzFdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocmVzdWx0WzFdLCB4QXhpcywgcmVzdWx0WzFdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocmVzdWx0WzFdLCB5QXhpcywgcmVzdWx0WzFdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHJlc3VsdFsxXSwgekF4aXMsIHJlc3VsdFsxXSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGNlbnRlciwgcmVzdWx0WzJdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocmVzdWx0WzJdLCB4QXhpcywgcmVzdWx0WzJdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHJlc3VsdFsyXSwgeUF4aXMsIHJlc3VsdFsyXSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHJlc3VsdFsyXSwgekF4aXMsIHJlc3VsdFsyXSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGNlbnRlciwgcmVzdWx0WzNdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocmVzdWx0WzNdLCB4QXhpcywgcmVzdWx0WzNdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHJlc3VsdFszXSwgeUF4aXMsIHJlc3VsdFszXSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChyZXN1bHRbM10sIHpBeGlzLCByZXN1bHRbM10pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjZW50ZXIsIHJlc3VsdFs0XSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChyZXN1bHRbNF0sIHhBeGlzLCByZXN1bHRbNF0pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChyZXN1bHRbNF0sIHlBeGlzLCByZXN1bHRbNF0pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChyZXN1bHRbNF0sIHpBeGlzLCByZXN1bHRbNF0pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjZW50ZXIsIHJlc3VsdFs1XSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChyZXN1bHRbNV0sIHhBeGlzLCByZXN1bHRbNV0pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChyZXN1bHRbNV0sIHlBeGlzLCByZXN1bHRbNV0pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocmVzdWx0WzVdLCB6QXhpcywgcmVzdWx0WzVdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY2VudGVyLCByZXN1bHRbNl0pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocmVzdWx0WzZdLCB4QXhpcywgcmVzdWx0WzZdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHJlc3VsdFs2XSwgeUF4aXMsIHJlc3VsdFs2XSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHJlc3VsdFs2XSwgekF4aXMsIHJlc3VsdFs2XSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGNlbnRlciwgcmVzdWx0WzddKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHJlc3VsdFs3XSwgeEF4aXMsIHJlc3VsdFs3XSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChyZXN1bHRbN10sIHlBeGlzLCByZXN1bHRbN10pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocmVzdWx0WzddLCB6QXhpcywgcmVzdWx0WzddKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY3JhdGNoUm90YXRpb25TY2FsZSA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgT3JpZW50ZWRCb3VuZGluZ0JveC5jb21wdXRlVHJhbnNmb3JtYXRpb24gPSBmdW5jdGlvbihib3gsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiYm94IiwgYm94KTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uMiA9IGJveC5jZW50ZXI7CiAgICAgICAgY29uc3Qgcm90YXRpb25TY2FsZSA9IE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VW5pZm9ybVNjYWxlKAogICAgICAgICAgYm94LmhhbGZBeGVzLAogICAgICAgICAgMiwKICAgICAgICAgIHNjcmF0Y2hSb3RhdGlvblNjYWxlCiAgICAgICAgKTsKICAgICAgICByZXR1cm4gTWF0cml4NF9kZWZhdWx0LmZyb21Sb3RhdGlvblRyYW5zbGF0aW9uKHJvdGF0aW9uU2NhbGUsIHRyYW5zbGF0aW9uMiwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgc2NyYXRjaEJvdW5kaW5nU3BoZXJlID0gbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQoKTsKICAgICAgT3JpZW50ZWRCb3VuZGluZ0JveC5pc09jY2x1ZGVkID0gZnVuY3Rpb24oYm94LCBvY2NsdWRlcikgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGJveCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJib3ggaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG9jY2x1ZGVyKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm9jY2x1ZGVyIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBzcGhlcmUgPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmZyb21PcmllbnRlZEJvdW5kaW5nQm94KAogICAgICAgICAgYm94LAogICAgICAgICAgc2NyYXRjaEJvdW5kaW5nU3BoZXJlCiAgICAgICAgKTsKICAgICAgICByZXR1cm4gIW9jY2x1ZGVyLmlzQm91bmRpbmdTcGhlcmVWaXNpYmxlKHNwaGVyZSk7CiAgICAgIH07CiAgICAgIE9yaWVudGVkQm91bmRpbmdCb3gucHJvdG90eXBlLmludGVyc2VjdFBsYW5lID0gZnVuY3Rpb24ocGxhbmUpIHsKICAgICAgICByZXR1cm4gT3JpZW50ZWRCb3VuZGluZ0JveC5pbnRlcnNlY3RQbGFuZSh0aGlzLCBwbGFuZSk7CiAgICAgIH07CiAgICAgIE9yaWVudGVkQm91bmRpbmdCb3gucHJvdG90eXBlLmRpc3RhbmNlU3F1YXJlZFRvID0gZnVuY3Rpb24oY2FydGVzaWFuMTEpIHsKICAgICAgICByZXR1cm4gT3JpZW50ZWRCb3VuZGluZ0JveC5kaXN0YW5jZVNxdWFyZWRUbyh0aGlzLCBjYXJ0ZXNpYW4xMSk7CiAgICAgIH07CiAgICAgIE9yaWVudGVkQm91bmRpbmdCb3gucHJvdG90eXBlLmNvbXB1dGVQbGFuZURpc3RhbmNlcyA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBkaXJlY3Rpb24yLCByZXN1bHQpIHsKICAgICAgICByZXR1cm4gT3JpZW50ZWRCb3VuZGluZ0JveC5jb21wdXRlUGxhbmVEaXN0YW5jZXMoCiAgICAgICAgICB0aGlzLAogICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICBkaXJlY3Rpb24yLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgT3JpZW50ZWRCb3VuZGluZ0JveC5wcm90b3R5cGUuY29tcHV0ZUNvcm5lcnMgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICByZXR1cm4gT3JpZW50ZWRCb3VuZGluZ0JveC5jb21wdXRlQ29ybmVycyh0aGlzLCByZXN1bHQpOwogICAgICB9OwogICAgICBPcmllbnRlZEJvdW5kaW5nQm94LnByb3RvdHlwZS5jb21wdXRlVHJhbnNmb3JtYXRpb24gPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICByZXR1cm4gT3JpZW50ZWRCb3VuZGluZ0JveC5jb21wdXRlVHJhbnNmb3JtYXRpb24odGhpcywgcmVzdWx0KTsKICAgICAgfTsKICAgICAgT3JpZW50ZWRCb3VuZGluZ0JveC5wcm90b3R5cGUuaXNPY2NsdWRlZCA9IGZ1bmN0aW9uKG9jY2x1ZGVyKSB7CiAgICAgICAgcmV0dXJuIE9yaWVudGVkQm91bmRpbmdCb3guaXNPY2NsdWRlZCh0aGlzLCBvY2NsdWRlcik7CiAgICAgIH07CiAgICAgIE9yaWVudGVkQm91bmRpbmdCb3guZXF1YWxzID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICByZXR1cm4gbGVmdCA9PT0gcmlnaHQgfHwgZGVmaW5lZF9kZWZhdWx0KGxlZnQpICYmIGRlZmluZWRfZGVmYXVsdChyaWdodCkgJiYgQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFscyhsZWZ0LmNlbnRlciwgcmlnaHQuY2VudGVyKSAmJiBNYXRyaXgzX2RlZmF1bHQuZXF1YWxzKGxlZnQuaGFsZkF4ZXMsIHJpZ2h0LmhhbGZBeGVzKTsKICAgICAgfTsKICAgICAgT3JpZW50ZWRCb3VuZGluZ0JveC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICByZXR1cm4gT3JpZW50ZWRCb3VuZGluZ0JveC5jbG9uZSh0aGlzLCByZXN1bHQpOwogICAgICB9OwogICAgICBPcmllbnRlZEJvdW5kaW5nQm94LnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihyaWdodCkgewogICAgICAgIHJldHVybiBPcmllbnRlZEJvdW5kaW5nQm94LmVxdWFscyh0aGlzLCByaWdodCk7CiAgICAgIH07CiAgICAgIE9yaWVudGVkQm91bmRpbmdCb3hfZGVmYXVsdCA9IE9yaWVudGVkQm91bmRpbmdCb3g7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Db3BsYW5hclBvbHlnb25HZW9tZXRyeUxpYnJhcnkuanMKICBmdW5jdGlvbiBwcm9qZWN0VG8yRChwb3NpdGlvbiwgY2VudGVyLCBheGlzMSwgYXhpczIsIHJlc3VsdCkgewogICAgY29uc3QgdjMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocG9zaXRpb24sIGNlbnRlciwgc2NyYXRjaEludGVyc2VjdGlvblBvaW50KTsKICAgIGNvbnN0IHggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGF4aXMxLCB2Myk7CiAgICBjb25zdCB5ID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChheGlzMiwgdjMpOwogICAgcmV0dXJuIENhcnRlc2lhbjJfZGVmYXVsdC5mcm9tRWxlbWVudHMoeCwgeSwgcmVzdWx0KTsKICB9CiAgdmFyIENvcGxhbmFyUG9seWdvbkdlb21ldHJ5TGlicmFyeSwgc2NyYXRjaEludGVyc2VjdGlvblBvaW50LCBzY3JhdGNoWEF4aXMyLCBzY3JhdGNoWUF4aXMyLCBzY3JhdGNoWkF4aXMyLCBvYmJTY3JhdGNoLCBDb3BsYW5hclBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdDsKICB2YXIgaW5pdF9Db3BsYW5hclBvbHlnb25HZW9tZXRyeUxpYnJhcnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NvcGxhbmFyUG9seWdvbkdlb21ldHJ5TGlicmFyeS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X01hdHJpeDMoKTsKICAgICAgaW5pdF9PcmllbnRlZEJvdW5kaW5nQm94KCk7CiAgICAgIENvcGxhbmFyUG9seWdvbkdlb21ldHJ5TGlicmFyeSA9IHt9OwogICAgICBzY3JhdGNoSW50ZXJzZWN0aW9uUG9pbnQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hYQXhpczIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hZQXhpczIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2haQXhpczIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIG9iYlNjcmF0Y2ggPSBuZXcgT3JpZW50ZWRCb3VuZGluZ0JveF9kZWZhdWx0KCk7CiAgICAgIENvcGxhbmFyUG9seWdvbkdlb21ldHJ5TGlicmFyeS52YWxpZE91dGxpbmUgPSBmdW5jdGlvbihwb3NpdGlvbnMpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInBvc2l0aW9ucyIsIHBvc2l0aW9ucyk7CiAgICAgICAgY29uc3Qgb3JpZW50ZWRCb3VuZGluZ0JveCA9IE9yaWVudGVkQm91bmRpbmdCb3hfZGVmYXVsdC5mcm9tUG9pbnRzKAogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgb2JiU2NyYXRjaAogICAgICAgICk7CiAgICAgICAgY29uc3QgaGFsZkF4ZXMgPSBvcmllbnRlZEJvdW5kaW5nQm94LmhhbGZBeGVzOwogICAgICAgIGNvbnN0IHhBeGlzID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihoYWxmQXhlcywgMCwgc2NyYXRjaFhBeGlzMik7CiAgICAgICAgY29uc3QgeUF4aXMgPSBNYXRyaXgzX2RlZmF1bHQuZ2V0Q29sdW1uKGhhbGZBeGVzLCAxLCBzY3JhdGNoWUF4aXMyKTsKICAgICAgICBjb25zdCB6QXhpcyA9IE1hdHJpeDNfZGVmYXVsdC5nZXRDb2x1bW4oaGFsZkF4ZXMsIDIsIHNjcmF0Y2haQXhpczIpOwogICAgICAgIGNvbnN0IHhNYWcgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKHhBeGlzKTsKICAgICAgICBjb25zdCB5TWFnID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSh5QXhpcyk7CiAgICAgICAgY29uc3Qgek1hZyA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUoekF4aXMpOwogICAgICAgIHJldHVybiAhKHhNYWcgPT09IDAgJiYgKHlNYWcgPT09IDAgfHwgek1hZyA9PT0gMCkgfHwgeU1hZyA9PT0gMCAmJiB6TWFnID09PSAwKTsKICAgICAgfTsKICAgICAgQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LmNvbXB1dGVQcm9qZWN0VG8yREFyZ3VtZW50cyA9IGZ1bmN0aW9uKHBvc2l0aW9ucywgY2VudGVyUmVzdWx0LCBwbGFuZUF4aXMxUmVzdWx0LCBwbGFuZUF4aXMyUmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJwb3NpdGlvbnMiLCBwb3NpdGlvbnMpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY2VudGVyUmVzdWx0IiwgY2VudGVyUmVzdWx0KTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInBsYW5lQXhpczFSZXN1bHQiLCBwbGFuZUF4aXMxUmVzdWx0KTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInBsYW5lQXhpczJSZXN1bHQiLCBwbGFuZUF4aXMyUmVzdWx0KTsKICAgICAgICBjb25zdCBvcmllbnRlZEJvdW5kaW5nQm94ID0gT3JpZW50ZWRCb3VuZGluZ0JveF9kZWZhdWx0LmZyb21Qb2ludHMoCiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICBvYmJTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBjb25zdCBoYWxmQXhlcyA9IG9yaWVudGVkQm91bmRpbmdCb3guaGFsZkF4ZXM7CiAgICAgICAgY29uc3QgeEF4aXMgPSBNYXRyaXgzX2RlZmF1bHQuZ2V0Q29sdW1uKGhhbGZBeGVzLCAwLCBzY3JhdGNoWEF4aXMyKTsKICAgICAgICBjb25zdCB5QXhpcyA9IE1hdHJpeDNfZGVmYXVsdC5nZXRDb2x1bW4oaGFsZkF4ZXMsIDEsIHNjcmF0Y2hZQXhpczIpOwogICAgICAgIGNvbnN0IHpBeGlzID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihoYWxmQXhlcywgMiwgc2NyYXRjaFpBeGlzMik7CiAgICAgICAgY29uc3QgeE1hZyA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUoeEF4aXMpOwogICAgICAgIGNvbnN0IHlNYWcgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKHlBeGlzKTsKICAgICAgICBjb25zdCB6TWFnID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSh6QXhpcyk7CiAgICAgICAgY29uc3QgbWluMyA9IE1hdGgubWluKHhNYWcsIHlNYWcsIHpNYWcpOwogICAgICAgIGlmICh4TWFnID09PSAwICYmICh5TWFnID09PSAwIHx8IHpNYWcgPT09IDApIHx8IHlNYWcgPT09IDAgJiYgek1hZyA9PT0gMCkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBsZXQgcGxhbmVBeGlzMTsKICAgICAgICBsZXQgcGxhbmVBeGlzMjsKICAgICAgICBpZiAobWluMyA9PT0geU1hZyB8fCBtaW4zID09PSB6TWFnKSB7CiAgICAgICAgICBwbGFuZUF4aXMxID0geEF4aXM7CiAgICAgICAgfQogICAgICAgIGlmIChtaW4zID09PSB4TWFnKSB7CiAgICAgICAgICBwbGFuZUF4aXMxID0geUF4aXM7CiAgICAgICAgfSBlbHNlIGlmIChtaW4zID09PSB6TWFnKSB7CiAgICAgICAgICBwbGFuZUF4aXMyID0geUF4aXM7CiAgICAgICAgfQogICAgICAgIGlmIChtaW4zID09PSB4TWFnIHx8IG1pbjMgPT09IHlNYWcpIHsKICAgICAgICAgIHBsYW5lQXhpczIgPSB6QXhpczsKICAgICAgICB9CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShwbGFuZUF4aXMxLCBwbGFuZUF4aXMxUmVzdWx0KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHBsYW5lQXhpczIsIHBsYW5lQXhpczJSZXN1bHQpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShvcmllbnRlZEJvdW5kaW5nQm94LmNlbnRlciwgY2VudGVyUmVzdWx0KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfTsKICAgICAgQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LmNyZWF0ZVByb2plY3RQb2ludHNUbzJERnVuY3Rpb24gPSBmdW5jdGlvbihjZW50ZXIsIGF4aXMxLCBheGlzMikgewogICAgICAgIHJldHVybiBmdW5jdGlvbihwb3NpdGlvbnMpIHsKICAgICAgICAgIGNvbnN0IHBvc2l0aW9uUmVzdWx0cyA9IG5ldyBBcnJheShwb3NpdGlvbnMubGVuZ3RoKTsKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHBvc2l0aW9uUmVzdWx0c1tpXSA9IHByb2plY3RUbzJEKHBvc2l0aW9uc1tpXSwgY2VudGVyLCBheGlzMSwgYXhpczIpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHBvc2l0aW9uUmVzdWx0czsKICAgICAgICB9OwogICAgICB9OwogICAgICBDb3BsYW5hclBvbHlnb25HZW9tZXRyeUxpYnJhcnkuY3JlYXRlUHJvamVjdFBvaW50VG8yREZ1bmN0aW9uID0gZnVuY3Rpb24oY2VudGVyLCBheGlzMSwgYXhpczIpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24ocG9zaXRpb24sIHJlc3VsdCkgewogICAgICAgICAgcmV0dXJuIHByb2plY3RUbzJEKHBvc2l0aW9uLCBjZW50ZXIsIGF4aXMxLCBheGlzMiwgcmVzdWx0KTsKICAgICAgICB9OwogICAgICB9OwogICAgICBDb3BsYW5hclBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdCA9IENvcGxhbmFyUG9seWdvbkdlb21ldHJ5TGlicmFyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0FyY1R5cGUuanMKICB2YXIgQXJjVHlwZSwgQXJjVHlwZV9kZWZhdWx0OwogIHZhciBpbml0X0FyY1R5cGUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0FyY1R5cGUuanMiKCkgewogICAgICBBcmNUeXBlID0gewogICAgICAgIC8qKgogICAgICAgICAqIFN0cmFpZ2h0IGxpbmUgdGhhdCBkb2VzIG5vdCBjb25mb3JtIHRvIHRoZSBzdXJmYWNlIG9mIHRoZSBlbGxpcHNvaWQuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIE5PTkU6IDAsCiAgICAgICAgLyoqCiAgICAgICAgICogRm9sbG93IGdlb2Rlc2ljIHBhdGguCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIEdFT0RFU0lDOiAxLAogICAgICAgIC8qKgogICAgICAgICAqIEZvbGxvdyByaHVtYiBvciBsb3hvZHJvbWUgcGF0aC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgUkhVTUI6IDIKICAgICAgfTsKICAgICAgQXJjVHlwZV9kZWZhdWx0ID0gT2JqZWN0LmZyZWV6ZShBcmNUeXBlKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0VsbGlwc29pZFJodW1iTGluZS5qcwogIGZ1bmN0aW9uIGNhbGN1bGF0ZU0oZWxsaXB0aWNpdHksIG1ham9yLCBsYXRpdHVkZSkgewogICAgaWYgKGVsbGlwdGljaXR5ID09PSAwKSB7CiAgICAgIHJldHVybiBtYWpvciAqIGxhdGl0dWRlOwogICAgfQogICAgY29uc3QgZTIgPSBlbGxpcHRpY2l0eSAqIGVsbGlwdGljaXR5OwogICAgY29uc3QgZTQgPSBlMiAqIGUyOwogICAgY29uc3QgZTYgPSBlNCAqIGUyOwogICAgY29uc3QgZTggPSBlNiAqIGUyOwogICAgY29uc3QgZTEwID0gZTggKiBlMjsKICAgIGNvbnN0IGUxMiA9IGUxMCAqIGUyOwogICAgY29uc3QgcGhpID0gbGF0aXR1ZGU7CiAgICBjb25zdCBzaW4yUGhpID0gTWF0aC5zaW4oMiAqIHBoaSk7CiAgICBjb25zdCBzaW40UGhpID0gTWF0aC5zaW4oNCAqIHBoaSk7CiAgICBjb25zdCBzaW42UGhpID0gTWF0aC5zaW4oNiAqIHBoaSk7CiAgICBjb25zdCBzaW44UGhpID0gTWF0aC5zaW4oOCAqIHBoaSk7CiAgICBjb25zdCBzaW4xMFBoaSA9IE1hdGguc2luKDEwICogcGhpKTsKICAgIGNvbnN0IHNpbjEyUGhpID0gTWF0aC5zaW4oMTIgKiBwaGkpOwogICAgcmV0dXJuIG1ham9yICogKCgxIC0gZTIgLyA0IC0gMyAqIGU0IC8gNjQgLSA1ICogZTYgLyAyNTYgLSAxNzUgKiBlOCAvIDE2Mzg0IC0gNDQxICogZTEwIC8gNjU1MzYgLSA0ODUxICogZTEyIC8gMTA0ODU3NikgKiBwaGkgLSAoMyAqIGUyIC8gOCArIDMgKiBlNCAvIDMyICsgNDUgKiBlNiAvIDEwMjQgKyAxMDUgKiBlOCAvIDQwOTYgKyAyMjA1ICogZTEwIC8gMTMxMDcyICsgNjIzNyAqIGUxMiAvIDUyNDI4OCkgKiBzaW4yUGhpICsgKDE1ICogZTQgLyAyNTYgKyA0NSAqIGU2IC8gMTAyNCArIDUyNSAqIGU4IC8gMTYzODQgKyAxNTc1ICogZTEwIC8gNjU1MzYgKyAxNTU5MjUgKiBlMTIgLyA4Mzg4NjA4KSAqIHNpbjRQaGkgLSAoMzUgKiBlNiAvIDMwNzIgKyAxNzUgKiBlOCAvIDEyMjg4ICsgMzY3NSAqIGUxMCAvIDI2MjE0NCArIDEzNDc1ICogZTEyIC8gMTA0ODU3NikgKiBzaW42UGhpICsgKDMxNSAqIGU4IC8gMTMxMDcyICsgMjIwNSAqIGUxMCAvIDUyNDI4OCArIDQzNjU5ICogZTEyIC8gODM4ODYwOCkgKiBzaW44UGhpIC0gKDY5MyAqIGUxMCAvIDEzMTA3MjAgKyA2MjM3ICogZTEyIC8gNTI0Mjg4MCkgKiBzaW4xMFBoaSArIDEwMDEgKiBlMTIgLyA4Mzg4NjA4ICogc2luMTJQaGkpOwogIH0KICBmdW5jdGlvbiBjYWxjdWxhdGVJbnZlcnNlTShNLCBlbGxpcHRpY2l0eSwgbWFqb3IpIHsKICAgIGNvbnN0IGQgPSBNIC8gbWFqb3I7CiAgICBpZiAoZWxsaXB0aWNpdHkgPT09IDApIHsKICAgICAgcmV0dXJuIGQ7CiAgICB9CiAgICBjb25zdCBkMiA9IGQgKiBkOwogICAgY29uc3QgZDMgPSBkMiAqIGQ7CiAgICBjb25zdCBkNCA9IGQzICogZDsKICAgIGNvbnN0IGUgPSBlbGxpcHRpY2l0eTsKICAgIGNvbnN0IGUyID0gZSAqIGU7CiAgICBjb25zdCBlNCA9IGUyICogZTI7CiAgICBjb25zdCBlNiA9IGU0ICogZTI7CiAgICBjb25zdCBlOCA9IGU2ICogZTI7CiAgICBjb25zdCBlMTAgPSBlOCAqIGUyOwogICAgY29uc3QgZTEyID0gZTEwICogZTI7CiAgICBjb25zdCBzaW4yRCA9IE1hdGguc2luKDIgKiBkKTsKICAgIGNvbnN0IGNvczJEID0gTWF0aC5jb3MoMiAqIGQpOwogICAgY29uc3Qgc2luNEQgPSBNYXRoLnNpbig0ICogZCk7CiAgICBjb25zdCBjb3M0RCA9IE1hdGguY29zKDQgKiBkKTsKICAgIGNvbnN0IHNpbjZEID0gTWF0aC5zaW4oNiAqIGQpOwogICAgY29uc3QgY29zNkQgPSBNYXRoLmNvcyg2ICogZCk7CiAgICBjb25zdCBzaW44RCA9IE1hdGguc2luKDggKiBkKTsKICAgIGNvbnN0IGNvczhEID0gTWF0aC5jb3MoOCAqIGQpOwogICAgY29uc3Qgc2luMTBEID0gTWF0aC5zaW4oMTAgKiBkKTsKICAgIGNvbnN0IGNvczEwRCA9IE1hdGguY29zKDEwICogZCk7CiAgICBjb25zdCBzaW4xMkQgPSBNYXRoLnNpbigxMiAqIGQpOwogICAgcmV0dXJuIGQgKyBkICogZTIgLyA0ICsgNyAqIGQgKiBlNCAvIDY0ICsgMTUgKiBkICogZTYgLyAyNTYgKyA1NzkgKiBkICogZTggLyAxNjM4NCArIDE1MTUgKiBkICogZTEwIC8gNjU1MzYgKyAxNjgzNyAqIGQgKiBlMTIgLyAxMDQ4NTc2ICsgKDMgKiBkICogZTQgLyAxNiArIDQ1ICogZCAqIGU2IC8gMjU2IC0gZCAqICgzMiAqIGQyIC0gNTYxKSAqIGU4IC8gNDA5NiAtIGQgKiAoMjMyICogZDIgLSAxNjc3KSAqIGUxMCAvIDE2Mzg0ICsgZCAqICgzOTk5ODUgLSA5MDU2MCAqIGQyICsgNTEyICogZDQpICogZTEyIC8gNTI0Mjg4MCkgKiBjb3MyRCArICgyMSAqIGQgKiBlNiAvIDI1NiArIDQ4MyAqIGQgKiBlOCAvIDQwOTYgLSBkICogKDIyNCAqIGQyIC0gMTk2OSkgKiBlMTAgLyAxNjM4NCAtIGQgKiAoMzMxNTIgKiBkMiAtIDExMjU5OSkgKiBlMTIgLyAxMDQ4NTc2KSAqIGNvczREICsgKDE1MSAqIGQgKiBlOCAvIDQwOTYgKyA0NjgxICogZCAqIGUxMCAvIDY1NTM2ICsgMTQ3OSAqIGQgKiBlMTIgLyAxNjM4NCAtIDQ1MyAqIGQzICogZTEyIC8gMzI3NjgpICogY29zNkQgKyAoMTA5NyAqIGQgKiBlMTAgLyA2NTUzNiArIDQyNzgzICogZCAqIGUxMiAvIDEwNDg1NzYpICogY29zOEQgKyA4MDExICogZCAqIGUxMiAvIDEwNDg1NzYgKiBjb3MxMEQgKyAoMyAqIGUyIC8gOCArIDMgKiBlNCAvIDE2ICsgMjEzICogZTYgLyAyMDQ4IC0gMyAqIGQyICogZTYgLyA2NCArIDI1NSAqIGU4IC8gNDA5NiAtIDMzICogZDIgKiBlOCAvIDUxMiArIDIwODYxICogZTEwIC8gNTI0Mjg4IC0gMzMgKiBkMiAqIGUxMCAvIDUxMiArIGQ0ICogZTEwIC8gMTAyNCArIDI4MjczICogZTEyIC8gMTA0ODU3NiAtIDQ3MSAqIGQyICogZTEyIC8gODE5MiArIDkgKiBkNCAqIGUxMiAvIDQwOTYpICogc2luMkQgKyAoMjEgKiBlNCAvIDI1NiArIDIxICogZTYgLyAyNTYgKyA1MzMgKiBlOCAvIDgxOTIgLSAyMSAqIGQyICogZTggLyA1MTIgKyAxOTcgKiBlMTAgLyA0MDk2IC0gMzE1ICogZDIgKiBlMTAgLyA0MDk2ICsgNTg0MDM5ICogZTEyIC8gMTY3NzcyMTYgLSAxMjUxNyAqIGQyICogZTEyIC8gMTMxMDcyICsgNyAqIGQ0ICogZTEyIC8gMjA0OCkgKiBzaW40RCArICgxNTEgKiBlNiAvIDYxNDQgKyAxNTEgKiBlOCAvIDQwOTYgKyA1MDE5ICogZTEwIC8gMTMxMDcyIC0gNDUzICogZDIgKiBlMTAgLyAxNjM4NCArIDI2OTY1ICogZTEyIC8gNzg2NDMyIC0gODYwNyAqIGQyICogZTEyIC8gMTMxMDcyKSAqIHNpbjZEICsgKDEwOTcgKiBlOCAvIDEzMTA3MiArIDEwOTcgKiBlMTAgLyA2NTUzNiArIDIyNTc5NyAqIGUxMiAvIDEwNDg1NzYwIC0gMTA5NyAqIGQyICogZTEyIC8gNjU1MzYpICogc2luOEQgKyAoODAxMSAqIGUxMCAvIDI2MjE0NDAgKyA4MDExICogZTEyIC8gMTA0ODU3NikgKiBzaW4xMEQgKyAyOTMzOTMgKiBlMTIgLyAyNTE2NTgyNDAgKiBzaW4xMkQ7CiAgfQogIGZ1bmN0aW9uIGNhbGN1bGF0ZVNpZ21hKGVsbGlwdGljaXR5LCBsYXRpdHVkZSkgewogICAgaWYgKGVsbGlwdGljaXR5ID09PSAwKSB7CiAgICAgIHJldHVybiBNYXRoLmxvZyhNYXRoLnRhbigwLjUgKiAoTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPICsgbGF0aXR1ZGUpKSk7CiAgICB9CiAgICBjb25zdCBlU2luTCA9IGVsbGlwdGljaXR5ICogTWF0aC5zaW4obGF0aXR1ZGUpOwogICAgcmV0dXJuIE1hdGgubG9nKE1hdGgudGFuKDAuNSAqIChNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gKyBsYXRpdHVkZSkpKSAtIGVsbGlwdGljaXR5IC8gMiAqIE1hdGgubG9nKCgxICsgZVNpbkwpIC8gKDEgLSBlU2luTCkpOwogIH0KICBmdW5jdGlvbiBjYWxjdWxhdGVIZWFkaW5nKGVsbGlwc29pZFJodW1iTGluZSwgZmlyc3RMb25naXR1ZGUsIGZpcnN0TGF0aXR1ZGUsIHNlY29uZExvbmdpdHVkZSwgc2Vjb25kTGF0aXR1ZGUpIHsKICAgIGNvbnN0IHNpZ21hMSA9IGNhbGN1bGF0ZVNpZ21hKGVsbGlwc29pZFJodW1iTGluZS5fZWxsaXB0aWNpdHksIGZpcnN0TGF0aXR1ZGUpOwogICAgY29uc3Qgc2lnbWEyID0gY2FsY3VsYXRlU2lnbWEoCiAgICAgIGVsbGlwc29pZFJodW1iTGluZS5fZWxsaXB0aWNpdHksCiAgICAgIHNlY29uZExhdGl0dWRlCiAgICApOwogICAgcmV0dXJuIE1hdGguYXRhbjIoCiAgICAgIE1hdGhfZGVmYXVsdC5uZWdhdGl2ZVBpVG9QaShzZWNvbmRMb25naXR1ZGUgLSBmaXJzdExvbmdpdHVkZSksCiAgICAgIHNpZ21hMiAtIHNpZ21hMQogICAgKTsKICB9CiAgZnVuY3Rpb24gY2FsY3VsYXRlQXJjTGVuZ3RoKGVsbGlwc29pZFJodW1iTGluZSwgbWFqb3IsIG1pbm9yLCBmaXJzdExvbmdpdHVkZSwgZmlyc3RMYXRpdHVkZSwgc2Vjb25kTG9uZ2l0dWRlLCBzZWNvbmRMYXRpdHVkZSkgewogICAgY29uc3QgaGVhZGluZyA9IGVsbGlwc29pZFJodW1iTGluZS5faGVhZGluZzsKICAgIGNvbnN0IGRlbHRhTG9uZ2l0dWRlID0gc2Vjb25kTG9uZ2l0dWRlIC0gZmlyc3RMb25naXR1ZGU7CiAgICBsZXQgZGlzdGFuY2UgPSAwOwogICAgaWYgKE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICBNYXRoLmFicyhoZWFkaW5nKSwKICAgICAgTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPLAogICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjgKICAgICkpIHsKICAgICAgaWYgKG1ham9yID09PSBtaW5vcikgewogICAgICAgIGRpc3RhbmNlID0gbWFqb3IgKiBNYXRoLmNvcyhmaXJzdExhdGl0dWRlKSAqIE1hdGhfZGVmYXVsdC5uZWdhdGl2ZVBpVG9QaShkZWx0YUxvbmdpdHVkZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3Qgc2luUGhpID0gTWF0aC5zaW4oZmlyc3RMYXRpdHVkZSk7CiAgICAgICAgZGlzdGFuY2UgPSBtYWpvciAqIE1hdGguY29zKGZpcnN0TGF0aXR1ZGUpICogTWF0aF9kZWZhdWx0Lm5lZ2F0aXZlUGlUb1BpKGRlbHRhTG9uZ2l0dWRlKSAvIE1hdGguc3FydCgxIC0gZWxsaXBzb2lkUmh1bWJMaW5lLl9lbGxpcHRpY2l0eVNxdWFyZWQgKiBzaW5QaGkgKiBzaW5QaGkpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBjb25zdCBNMSA9IGNhbGN1bGF0ZU0oCiAgICAgICAgZWxsaXBzb2lkUmh1bWJMaW5lLl9lbGxpcHRpY2l0eSwKICAgICAgICBtYWpvciwKICAgICAgICBmaXJzdExhdGl0dWRlCiAgICAgICk7CiAgICAgIGNvbnN0IE0yID0gY2FsY3VsYXRlTSgKICAgICAgICBlbGxpcHNvaWRSaHVtYkxpbmUuX2VsbGlwdGljaXR5LAogICAgICAgIG1ham9yLAogICAgICAgIHNlY29uZExhdGl0dWRlCiAgICAgICk7CiAgICAgIGRpc3RhbmNlID0gKE0yIC0gTTEpIC8gTWF0aC5jb3MoaGVhZGluZyk7CiAgICB9CiAgICByZXR1cm4gTWF0aC5hYnMoZGlzdGFuY2UpOwogIH0KICBmdW5jdGlvbiBjb21wdXRlUHJvcGVydGllcyhlbGxpcHNvaWRSaHVtYkxpbmUsIHN0YXJ0LCBlbmQsIGVsbGlwc29pZCkgewogICAgY29uc3QgZmlyc3RDYXJ0ZXNpYW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oc3RhcnQsIHNjcmF0Y2hDYXJ0MiksCiAgICAgIHNjcmF0Y2hDYXJ0MQogICAgKTsKICAgIGNvbnN0IGxhc3RDYXJ0ZXNpYW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oZW5kLCBzY3JhdGNoQ2FydDIpLAogICAgICBzY3JhdGNoQ2FydDIKICAgICk7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygKICAgICAgInZhbHVlIiwKICAgICAgTWF0aC5hYnMoCiAgICAgICAgTWF0aC5hYnMoQ2FydGVzaWFuM19kZWZhdWx0LmFuZ2xlQmV0d2VlbihmaXJzdENhcnRlc2lhbiwgbGFzdENhcnRlc2lhbikpIC0gTWF0aC5QSQogICAgICApLAogICAgICAwLjAxMjUKICAgICk7CiAgICBjb25zdCBtYWpvciA9IGVsbGlwc29pZC5tYXhpbXVtUmFkaXVzOwogICAgY29uc3QgbWlub3IgPSBlbGxpcHNvaWQubWluaW11bVJhZGl1czsKICAgIGNvbnN0IG1ham9yU3F1YXJlZCA9IG1ham9yICogbWFqb3I7CiAgICBjb25zdCBtaW5vclNxdWFyZWQgPSBtaW5vciAqIG1pbm9yOwogICAgZWxsaXBzb2lkUmh1bWJMaW5lLl9lbGxpcHRpY2l0eVNxdWFyZWQgPSAobWFqb3JTcXVhcmVkIC0gbWlub3JTcXVhcmVkKSAvIG1ham9yU3F1YXJlZDsKICAgIGVsbGlwc29pZFJodW1iTGluZS5fZWxsaXB0aWNpdHkgPSBNYXRoLnNxcnQoCiAgICAgIGVsbGlwc29pZFJodW1iTGluZS5fZWxsaXB0aWNpdHlTcXVhcmVkCiAgICApOwogICAgZWxsaXBzb2lkUmh1bWJMaW5lLl9zdGFydCA9IENhcnRvZ3JhcGhpY19kZWZhdWx0LmNsb25lKAogICAgICBzdGFydCwKICAgICAgZWxsaXBzb2lkUmh1bWJMaW5lLl9zdGFydAogICAgKTsKICAgIGVsbGlwc29pZFJodW1iTGluZS5fc3RhcnQuaGVpZ2h0ID0gMDsKICAgIGVsbGlwc29pZFJodW1iTGluZS5fZW5kID0gQ2FydG9ncmFwaGljX2RlZmF1bHQuY2xvbmUoZW5kLCBlbGxpcHNvaWRSaHVtYkxpbmUuX2VuZCk7CiAgICBlbGxpcHNvaWRSaHVtYkxpbmUuX2VuZC5oZWlnaHQgPSAwOwogICAgZWxsaXBzb2lkUmh1bWJMaW5lLl9oZWFkaW5nID0gY2FsY3VsYXRlSGVhZGluZygKICAgICAgZWxsaXBzb2lkUmh1bWJMaW5lLAogICAgICBzdGFydC5sb25naXR1ZGUsCiAgICAgIHN0YXJ0LmxhdGl0dWRlLAogICAgICBlbmQubG9uZ2l0dWRlLAogICAgICBlbmQubGF0aXR1ZGUKICAgICk7CiAgICBlbGxpcHNvaWRSaHVtYkxpbmUuX2Rpc3RhbmNlID0gY2FsY3VsYXRlQXJjTGVuZ3RoKAogICAgICBlbGxpcHNvaWRSaHVtYkxpbmUsCiAgICAgIGVsbGlwc29pZC5tYXhpbXVtUmFkaXVzLAogICAgICBlbGxpcHNvaWQubWluaW11bVJhZGl1cywKICAgICAgc3RhcnQubG9uZ2l0dWRlLAogICAgICBzdGFydC5sYXRpdHVkZSwKICAgICAgZW5kLmxvbmdpdHVkZSwKICAgICAgZW5kLmxhdGl0dWRlCiAgICApOwogIH0KICBmdW5jdGlvbiBpbnRlcnBvbGF0ZVVzaW5nU3VyZmFjZURpc3RhbmNlKHN0YXJ0LCBoZWFkaW5nLCBkaXN0YW5jZSwgbWFqb3IsIGVsbGlwdGljaXR5LCByZXN1bHQpIHsKICAgIGlmIChkaXN0YW5jZSA9PT0gMCkgewogICAgICByZXR1cm4gQ2FydG9ncmFwaGljX2RlZmF1bHQuY2xvbmUoc3RhcnQsIHJlc3VsdCk7CiAgICB9CiAgICBjb25zdCBlbGxpcHRpY2l0eVNxdWFyZWQgPSBlbGxpcHRpY2l0eSAqIGVsbGlwdGljaXR5OwogICAgbGV0IGxvbmdpdHVkZTsKICAgIGxldCBsYXRpdHVkZTsKICAgIGxldCBkZWx0YUxvbmdpdHVkZTsKICAgIGlmIChNYXRoLmFicyhNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gLSBNYXRoLmFicyhoZWFkaW5nKSkgPiBNYXRoX2RlZmF1bHQuRVBTSUxPTjgpIHsKICAgICAgY29uc3QgTTEgPSBjYWxjdWxhdGVNKGVsbGlwdGljaXR5LCBtYWpvciwgc3RhcnQubGF0aXR1ZGUpOwogICAgICBjb25zdCBkZWx0YU0gPSBkaXN0YW5jZSAqIE1hdGguY29zKGhlYWRpbmcpOwogICAgICBjb25zdCBNMiA9IE0xICsgZGVsdGFNOwogICAgICBsYXRpdHVkZSA9IGNhbGN1bGF0ZUludmVyc2VNKE0yLCBlbGxpcHRpY2l0eSwgbWFqb3IpOwogICAgICBpZiAoTWF0aC5hYnMoaGVhZGluZykgPCBNYXRoX2RlZmF1bHQuRVBTSUxPTjEwKSB7CiAgICAgICAgbG9uZ2l0dWRlID0gTWF0aF9kZWZhdWx0Lm5lZ2F0aXZlUGlUb1BpKHN0YXJ0LmxvbmdpdHVkZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3Qgc2lnbWExID0gY2FsY3VsYXRlU2lnbWEoZWxsaXB0aWNpdHksIHN0YXJ0LmxhdGl0dWRlKTsKICAgICAgICBjb25zdCBzaWdtYTIgPSBjYWxjdWxhdGVTaWdtYShlbGxpcHRpY2l0eSwgbGF0aXR1ZGUpOwogICAgICAgIGRlbHRhTG9uZ2l0dWRlID0gTWF0aC50YW4oaGVhZGluZykgKiAoc2lnbWEyIC0gc2lnbWExKTsKICAgICAgICBsb25naXR1ZGUgPSBNYXRoX2RlZmF1bHQubmVnYXRpdmVQaVRvUGkoc3RhcnQubG9uZ2l0dWRlICsgZGVsdGFMb25naXR1ZGUpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBsYXRpdHVkZSA9IHN0YXJ0LmxhdGl0dWRlOwogICAgICBsZXQgbG9jYWxSYWQ7CiAgICAgIGlmIChlbGxpcHRpY2l0eSA9PT0gMCkgewogICAgICAgIGxvY2FsUmFkID0gbWFqb3IgKiBNYXRoLmNvcyhzdGFydC5sYXRpdHVkZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3Qgc2luUGhpID0gTWF0aC5zaW4oc3RhcnQubGF0aXR1ZGUpOwogICAgICAgIGxvY2FsUmFkID0gbWFqb3IgKiBNYXRoLmNvcyhzdGFydC5sYXRpdHVkZSkgLyBNYXRoLnNxcnQoMSAtIGVsbGlwdGljaXR5U3F1YXJlZCAqIHNpblBoaSAqIHNpblBoaSk7CiAgICAgIH0KICAgICAgZGVsdGFMb25naXR1ZGUgPSBkaXN0YW5jZSAvIGxvY2FsUmFkOwogICAgICBpZiAoaGVhZGluZyA+IDApIHsKICAgICAgICBsb25naXR1ZGUgPSBNYXRoX2RlZmF1bHQubmVnYXRpdmVQaVRvUGkoc3RhcnQubG9uZ2l0dWRlICsgZGVsdGFMb25naXR1ZGUpOwogICAgICB9IGVsc2UgewogICAgICAgIGxvbmdpdHVkZSA9IE1hdGhfZGVmYXVsdC5uZWdhdGl2ZVBpVG9QaShzdGFydC5sb25naXR1ZGUgLSBkZWx0YUxvbmdpdHVkZSk7CiAgICAgIH0KICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICByZXN1bHQubG9uZ2l0dWRlID0gbG9uZ2l0dWRlOwogICAgICByZXN1bHQubGF0aXR1ZGUgPSBsYXRpdHVkZTsKICAgICAgcmVzdWx0LmhlaWdodCA9IDA7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CiAgICByZXR1cm4gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KGxvbmdpdHVkZSwgbGF0aXR1ZGUsIDApOwogIH0KICBmdW5jdGlvbiBFbGxpcHNvaWRSaHVtYkxpbmUoc3RhcnQsIGVuZCwgZWxsaXBzb2lkKSB7CiAgICBjb25zdCBlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NCk7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBlOwogICAgdGhpcy5fc3RhcnQgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgIHRoaXMuX2VuZCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgdGhpcy5faGVhZGluZyA9IHZvaWQgMDsKICAgIHRoaXMuX2Rpc3RhbmNlID0gdm9pZCAwOwogICAgdGhpcy5fZWxsaXB0aWNpdHkgPSB2b2lkIDA7CiAgICB0aGlzLl9lbGxpcHRpY2l0eVNxdWFyZWQgPSB2b2lkIDA7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHN0YXJ0KSAmJiBkZWZpbmVkX2RlZmF1bHQoZW5kKSkgewogICAgICBjb21wdXRlUHJvcGVydGllcyh0aGlzLCBzdGFydCwgZW5kLCBlKTsKICAgIH0KICB9CiAgdmFyIHNjcmF0Y2hDYXJ0MSwgc2NyYXRjaENhcnQyLCBFbGxpcHNvaWRSaHVtYkxpbmVfZGVmYXVsdDsKICB2YXIgaW5pdF9FbGxpcHNvaWRSaHVtYkxpbmUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0VsbGlwc29pZFJodW1iTGluZS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBzY3JhdGNoQ2FydDEgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0MiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoRWxsaXBzb2lkUmh1bWJMaW5lLnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIGVsbGlwc29pZC4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkUmh1bWJMaW5lLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtFbGxpcHNvaWR9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgZWxsaXBzb2lkOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fZWxsaXBzb2lkOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgc3VyZmFjZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIHBvaW50CiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZFJodW1iTGluZS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIHN1cmZhY2VEaXN0YW5jZTogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJkaXN0YW5jZSIsIHRoaXMuX2Rpc3RhbmNlKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3RhbmNlOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgaW5pdGlhbCBwbGFuZXRvZGV0aWMgcG9pbnQgb24gdGhlIHBhdGguCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZFJodW1iTGluZS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7Q2FydG9ncmFwaGljfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIHN0YXJ0OiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnQ7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBmaW5hbCBwbGFuZXRvZGV0aWMgcG9pbnQgb24gdGhlIHBhdGguCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZFJodW1iTGluZS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7Q2FydG9ncmFwaGljfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIGVuZDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VuZDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIGhlYWRpbmcgZnJvbSB0aGUgc3RhcnQgcG9pbnQgdG8gdGhlIGVuZCBwb2ludC4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkUmh1bWJMaW5lLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgaGVhZGluZzogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJkaXN0YW5jZSIsIHRoaXMuX2Rpc3RhbmNlKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hlYWRpbmc7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgRWxsaXBzb2lkUmh1bWJMaW5lLmZyb21TdGFydEhlYWRpbmdEaXN0YW5jZSA9IGZ1bmN0aW9uKHN0YXJ0LCBoZWFkaW5nLCBkaXN0YW5jZSwgZWxsaXBzb2lkLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInN0YXJ0Iiwgc3RhcnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiaGVhZGluZyIsIGhlYWRpbmcpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiZGlzdGFuY2UiLCBkaXN0YW5jZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuKCJkaXN0YW5jZSIsIGRpc3RhbmNlLCAwKTsKICAgICAgICBjb25zdCBlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NCk7CiAgICAgICAgY29uc3QgbWFqb3IgPSBlLm1heGltdW1SYWRpdXM7CiAgICAgICAgY29uc3QgbWlub3IgPSBlLm1pbmltdW1SYWRpdXM7CiAgICAgICAgY29uc3QgbWFqb3JTcXVhcmVkID0gbWFqb3IgKiBtYWpvcjsKICAgICAgICBjb25zdCBtaW5vclNxdWFyZWQgPSBtaW5vciAqIG1pbm9yOwogICAgICAgIGNvbnN0IGVsbGlwdGljaXR5ID0gTWF0aC5zcXJ0KChtYWpvclNxdWFyZWQgLSBtaW5vclNxdWFyZWQpIC8gbWFqb3JTcXVhcmVkKTsKICAgICAgICBoZWFkaW5nID0gTWF0aF9kZWZhdWx0Lm5lZ2F0aXZlUGlUb1BpKGhlYWRpbmcpOwogICAgICAgIGNvbnN0IGVuZCA9IGludGVycG9sYXRlVXNpbmdTdXJmYWNlRGlzdGFuY2UoCiAgICAgICAgICBzdGFydCwKICAgICAgICAgIGhlYWRpbmcsCiAgICAgICAgICBkaXN0YW5jZSwKICAgICAgICAgIGUubWF4aW11bVJhZGl1cywKICAgICAgICAgIGVsbGlwdGljaXR5CiAgICAgICAgKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpIHx8IGRlZmluZWRfZGVmYXVsdChlbGxpcHNvaWQpICYmICFlbGxpcHNvaWQuZXF1YWxzKHJlc3VsdC5lbGxpcHNvaWQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IEVsbGlwc29pZFJodW1iTGluZShzdGFydCwgZW5kLCBlKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnNldEVuZFBvaW50cyhzdGFydCwgZW5kKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBFbGxpcHNvaWRSaHVtYkxpbmUucHJvdG90eXBlLnNldEVuZFBvaW50cyA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInN0YXJ0Iiwgc3RhcnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiZW5kIiwgZW5kKTsKICAgICAgICBjb21wdXRlUHJvcGVydGllcyh0aGlzLCBzdGFydCwgZW5kLCB0aGlzLl9lbGxpcHNvaWQpOwogICAgICB9OwogICAgICBFbGxpcHNvaWRSaHVtYkxpbmUucHJvdG90eXBlLmludGVycG9sYXRlVXNpbmdGcmFjdGlvbiA9IGZ1bmN0aW9uKGZyYWN0aW9uLCByZXN1bHQpIHsKICAgICAgICByZXR1cm4gdGhpcy5pbnRlcnBvbGF0ZVVzaW5nU3VyZmFjZURpc3RhbmNlKAogICAgICAgICAgZnJhY3Rpb24gKiB0aGlzLl9kaXN0YW5jZSwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZFJodW1iTGluZS5wcm90b3R5cGUuaW50ZXJwb2xhdGVVc2luZ1N1cmZhY2VEaXN0YW5jZSA9IGZ1bmN0aW9uKGRpc3RhbmNlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImRpc3RhbmNlIiwgZGlzdGFuY2UpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHRoaXMuX2Rpc3RhbmNlKSB8fCB0aGlzLl9kaXN0YW5jZSA9PT0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJFbGxpcHNvaWRSaHVtYkxpbmUgbXVzdCBoYXZlIGRpc3RpbmN0IHN0YXJ0IGFuZCBlbmQgc2V0LiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBpbnRlcnBvbGF0ZVVzaW5nU3VyZmFjZURpc3RhbmNlKAogICAgICAgICAgdGhpcy5fc3RhcnQsCiAgICAgICAgICB0aGlzLl9oZWFkaW5nLAogICAgICAgICAgZGlzdGFuY2UsCiAgICAgICAgICB0aGlzLl9lbGxpcHNvaWQubWF4aW11bVJhZGl1cywKICAgICAgICAgIHRoaXMuX2VsbGlwdGljaXR5LAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkUmh1bWJMaW5lLnByb3RvdHlwZS5maW5kSW50ZXJzZWN0aW9uV2l0aExvbmdpdHVkZSA9IGZ1bmN0aW9uKGludGVyc2VjdGlvbkxvbmdpdHVkZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJpbnRlcnNlY3Rpb25Mb25naXR1ZGUiLCBpbnRlcnNlY3Rpb25Mb25naXR1ZGUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHRoaXMuX2Rpc3RhbmNlKSB8fCB0aGlzLl9kaXN0YW5jZSA9PT0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJFbGxpcHNvaWRSaHVtYkxpbmUgbXVzdCBoYXZlIGRpc3RpbmN0IHN0YXJ0IGFuZCBlbmQgc2V0LiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGVsbGlwdGljaXR5ID0gdGhpcy5fZWxsaXB0aWNpdHk7CiAgICAgICAgY29uc3QgaGVhZGluZyA9IHRoaXMuX2hlYWRpbmc7CiAgICAgICAgY29uc3QgYWJzSGVhZGluZyA9IE1hdGguYWJzKGhlYWRpbmcpOwogICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fc3RhcnQ7CiAgICAgICAgaW50ZXJzZWN0aW9uTG9uZ2l0dWRlID0gTWF0aF9kZWZhdWx0Lm5lZ2F0aXZlUGlUb1BpKGludGVyc2VjdGlvbkxvbmdpdHVkZSk7CiAgICAgICAgaWYgKE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgTWF0aC5hYnMoaW50ZXJzZWN0aW9uTG9uZ2l0dWRlKSwKICAgICAgICAgIE1hdGguUEksCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjE0CiAgICAgICAgKSkgewogICAgICAgICAgaW50ZXJzZWN0aW9uTG9uZ2l0dWRlID0gTWF0aF9kZWZhdWx0LnNpZ24oc3RhcnQubG9uZ2l0dWRlKSAqIE1hdGguUEk7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBpZiAoTWF0aC5hYnMoTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPIC0gYWJzSGVhZGluZykgPD0gTWF0aF9kZWZhdWx0LkVQU0lMT044KSB7CiAgICAgICAgICByZXN1bHQubG9uZ2l0dWRlID0gaW50ZXJzZWN0aW9uTG9uZ2l0dWRlOwogICAgICAgICAgcmVzdWx0LmxhdGl0dWRlID0gc3RhcnQubGF0aXR1ZGU7CiAgICAgICAgICByZXN1bHQuaGVpZ2h0ID0gMDsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfSBlbHNlIGlmIChNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIE1hdGguYWJzKE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyAtIGFic0hlYWRpbmcpLAogICAgICAgICAgTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPLAogICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT044CiAgICAgICAgKSkgewogICAgICAgICAgaWYgKE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgICBpbnRlcnNlY3Rpb25Mb25naXR1ZGUsCiAgICAgICAgICAgIHN0YXJ0LmxvbmdpdHVkZSwKICAgICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT04xMgogICAgICAgICAgKSkgewogICAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgICAgfQogICAgICAgICAgcmVzdWx0LmxvbmdpdHVkZSA9IGludGVyc2VjdGlvbkxvbmdpdHVkZTsKICAgICAgICAgIHJlc3VsdC5sYXRpdHVkZSA9IE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyAqIE1hdGhfZGVmYXVsdC5zaWduKE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyAtIGhlYWRpbmcpOwogICAgICAgICAgcmVzdWx0LmhlaWdodCA9IDA7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBjb25zdCBwaGkxID0gc3RhcnQubGF0aXR1ZGU7CiAgICAgICAgY29uc3QgZVNpblBoaTEgPSBlbGxpcHRpY2l0eSAqIE1hdGguc2luKHBoaTEpOwogICAgICAgIGNvbnN0IGxlZnRDb21wb25lbnQgPSBNYXRoLnRhbigwLjUgKiAoTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPICsgcGhpMSkpICogTWF0aC5leHAoKGludGVyc2VjdGlvbkxvbmdpdHVkZSAtIHN0YXJ0LmxvbmdpdHVkZSkgLyBNYXRoLnRhbihoZWFkaW5nKSk7CiAgICAgICAgY29uc3QgZGVub21pbmF0b3IgPSAoMSArIGVTaW5QaGkxKSAvICgxIC0gZVNpblBoaTEpOwogICAgICAgIGxldCBuZXdQaGkgPSBzdGFydC5sYXRpdHVkZTsKICAgICAgICBsZXQgcGhpOwogICAgICAgIGRvIHsKICAgICAgICAgIHBoaSA9IG5ld1BoaTsKICAgICAgICAgIGNvbnN0IGVTaW5QaGkgPSBlbGxpcHRpY2l0eSAqIE1hdGguc2luKHBoaSk7CiAgICAgICAgICBjb25zdCBudW1lcmF0b3IgPSAoMSArIGVTaW5QaGkpIC8gKDEgLSBlU2luUGhpKTsKICAgICAgICAgIG5ld1BoaSA9IDIgKiBNYXRoLmF0YW4oCiAgICAgICAgICAgIGxlZnRDb21wb25lbnQgKiBNYXRoLnBvdyhudW1lcmF0b3IgLyBkZW5vbWluYXRvciwgZWxsaXB0aWNpdHkgLyAyKQogICAgICAgICAgKSAtIE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTzsKICAgICAgICB9IHdoaWxlICghTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24obmV3UGhpLCBwaGksIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTIpKTsKICAgICAgICByZXN1bHQubG9uZ2l0dWRlID0gaW50ZXJzZWN0aW9uTG9uZ2l0dWRlOwogICAgICAgIHJlc3VsdC5sYXRpdHVkZSA9IG5ld1BoaTsKICAgICAgICByZXN1bHQuaGVpZ2h0ID0gMDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBFbGxpcHNvaWRSaHVtYkxpbmUucHJvdG90eXBlLmZpbmRJbnRlcnNlY3Rpb25XaXRoTGF0aXR1ZGUgPSBmdW5jdGlvbihpbnRlcnNlY3Rpb25MYXRpdHVkZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJpbnRlcnNlY3Rpb25MYXRpdHVkZSIsIGludGVyc2VjdGlvbkxhdGl0dWRlKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh0aGlzLl9kaXN0YW5jZSkgfHwgdGhpcy5fZGlzdGFuY2UgPT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiRWxsaXBzb2lkUmh1bWJMaW5lIG11c3QgaGF2ZSBkaXN0aW5jdCBzdGFydCBhbmQgZW5kIHNldC4iCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCBlbGxpcHRpY2l0eSA9IHRoaXMuX2VsbGlwdGljaXR5OwogICAgICAgIGNvbnN0IGhlYWRpbmcgPSB0aGlzLl9oZWFkaW5nOwogICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fc3RhcnQ7CiAgICAgICAgaWYgKE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgTWF0aC5hYnMoaGVhZGluZyksCiAgICAgICAgICBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08sCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjgKICAgICAgICApKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IHNpZ21hMSA9IGNhbGN1bGF0ZVNpZ21hKGVsbGlwdGljaXR5LCBzdGFydC5sYXRpdHVkZSk7CiAgICAgICAgY29uc3Qgc2lnbWEyID0gY2FsY3VsYXRlU2lnbWEoZWxsaXB0aWNpdHksIGludGVyc2VjdGlvbkxhdGl0dWRlKTsKICAgICAgICBjb25zdCBkZWx0YUxvbmdpdHVkZSA9IE1hdGgudGFuKGhlYWRpbmcpICogKHNpZ21hMiAtIHNpZ21hMSk7CiAgICAgICAgY29uc3QgbG9uZ2l0dWRlID0gTWF0aF9kZWZhdWx0Lm5lZ2F0aXZlUGlUb1BpKHN0YXJ0LmxvbmdpdHVkZSArIGRlbHRhTG9uZ2l0dWRlKTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdC5sb25naXR1ZGUgPSBsb25naXR1ZGU7CiAgICAgICAgICByZXN1bHQubGF0aXR1ZGUgPSBpbnRlcnNlY3Rpb25MYXRpdHVkZTsKICAgICAgICAgIHJlc3VsdC5oZWlnaHQgPSAwOwogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdChsb25naXR1ZGUsIGludGVyc2VjdGlvbkxhdGl0dWRlLCAwKTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkUmh1bWJMaW5lX2RlZmF1bHQgPSBFbGxpcHNvaWRSaHVtYkxpbmU7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Qb2x5Z29uSGllcmFyY2h5LmpzCiAgZnVuY3Rpb24gUG9seWdvbkhpZXJhcmNoeShwb3NpdGlvbnMsIGhvbGVzKSB7CiAgICB0aGlzLnBvc2l0aW9ucyA9IGRlZmluZWRfZGVmYXVsdChwb3NpdGlvbnMpID8gcG9zaXRpb25zIDogW107CiAgICB0aGlzLmhvbGVzID0gZGVmaW5lZF9kZWZhdWx0KGhvbGVzKSA/IGhvbGVzIDogW107CiAgfQogIHZhciBQb2x5Z29uSGllcmFyY2h5X2RlZmF1bHQ7CiAgdmFyIGluaXRfUG9seWdvbkhpZXJhcmNoeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUG9seWdvbkhpZXJhcmNoeS5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBQb2x5Z29uSGllcmFyY2h5X2RlZmF1bHQgPSBQb2x5Z29uSGllcmFyY2h5OwogICAgfQogIH0pOwoKICAvLyBub2RlX21vZHVsZXMvZWFyY3V0L3NyYy9lYXJjdXQuanMKICB2YXIgcmVxdWlyZV9lYXJjdXQgPSBfX2NvbW1vbkpTKHsKICAgICJub2RlX21vZHVsZXMvZWFyY3V0L3NyYy9lYXJjdXQuanMiKGV4cG9ydHMyLCBtb2R1bGUpIHsKICAgICAgInVzZSBzdHJpY3QiOwogICAgICBtb2R1bGUuZXhwb3J0cyA9IGVhcmN1dDI7CiAgICAgIG1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBlYXJjdXQyOwogICAgICBmdW5jdGlvbiBlYXJjdXQyKGRhdGEsIGhvbGVJbmRpY2VzLCBkaW0pIHsKICAgICAgICBkaW0gPSBkaW0gfHwgMjsKICAgICAgICB2YXIgaGFzSG9sZXMgPSBob2xlSW5kaWNlcyAmJiBob2xlSW5kaWNlcy5sZW5ndGgsIG91dGVyTGVuID0gaGFzSG9sZXMgPyBob2xlSW5kaWNlc1swXSAqIGRpbSA6IGRhdGEubGVuZ3RoLCBvdXRlck5vZGUgPSBsaW5rZWRMaXN0KGRhdGEsIDAsIG91dGVyTGVuLCBkaW0sIHRydWUpLCB0cmlhbmdsZXMgPSBbXTsKICAgICAgICBpZiAoIW91dGVyTm9kZSB8fCBvdXRlck5vZGUubmV4dCA9PT0gb3V0ZXJOb2RlLnByZXYpCiAgICAgICAgICByZXR1cm4gdHJpYW5nbGVzOwogICAgICAgIHZhciBtaW5YLCBtaW5ZLCBtYXhYLCBtYXhZLCB4LCB5LCBpbnZTaXplOwogICAgICAgIGlmIChoYXNIb2xlcykKICAgICAgICAgIG91dGVyTm9kZSA9IGVsaW1pbmF0ZUhvbGVzKGRhdGEsIGhvbGVJbmRpY2VzLCBvdXRlck5vZGUsIGRpbSk7CiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gODAgKiBkaW0pIHsKICAgICAgICAgIG1pblggPSBtYXhYID0gZGF0YVswXTsKICAgICAgICAgIG1pblkgPSBtYXhZID0gZGF0YVsxXTsKICAgICAgICAgIGZvciAodmFyIGkgPSBkaW07IGkgPCBvdXRlckxlbjsgaSArPSBkaW0pIHsKICAgICAgICAgICAgeCA9IGRhdGFbaV07CiAgICAgICAgICAgIHkgPSBkYXRhW2kgKyAxXTsKICAgICAgICAgICAgaWYgKHggPCBtaW5YKQogICAgICAgICAgICAgIG1pblggPSB4OwogICAgICAgICAgICBpZiAoeSA8IG1pblkpCiAgICAgICAgICAgICAgbWluWSA9IHk7CiAgICAgICAgICAgIGlmICh4ID4gbWF4WCkKICAgICAgICAgICAgICBtYXhYID0geDsKICAgICAgICAgICAgaWYgKHkgPiBtYXhZKQogICAgICAgICAgICAgIG1heFkgPSB5OwogICAgICAgICAgfQogICAgICAgICAgaW52U2l6ZSA9IE1hdGgubWF4KG1heFggLSBtaW5YLCBtYXhZIC0gbWluWSk7CiAgICAgICAgICBpbnZTaXplID0gaW52U2l6ZSAhPT0gMCA/IDMyNzY3IC8gaW52U2l6ZSA6IDA7CiAgICAgICAgfQogICAgICAgIGVhcmN1dExpbmtlZChvdXRlck5vZGUsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAwKTsKICAgICAgICByZXR1cm4gdHJpYW5nbGVzOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGxpbmtlZExpc3QoZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBjbG9ja3dpc2UpIHsKICAgICAgICB2YXIgaSwgbGFzdDsKICAgICAgICBpZiAoY2xvY2t3aXNlID09PSBzaWduZWRBcmVhKGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSkgPiAwKSB7CiAgICAgICAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBkaW0pCiAgICAgICAgICAgIGxhc3QgPSBpbnNlcnROb2RlKGksIGRhdGFbaV0sIGRhdGFbaSArIDFdLCBsYXN0KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZm9yIChpID0gZW5kIC0gZGltOyBpID49IHN0YXJ0OyBpIC09IGRpbSkKICAgICAgICAgICAgbGFzdCA9IGluc2VydE5vZGUoaSwgZGF0YVtpXSwgZGF0YVtpICsgMV0sIGxhc3QpOwogICAgICAgIH0KICAgICAgICBpZiAobGFzdCAmJiBlcXVhbHMobGFzdCwgbGFzdC5uZXh0KSkgewogICAgICAgICAgcmVtb3ZlTm9kZShsYXN0KTsKICAgICAgICAgIGxhc3QgPSBsYXN0Lm5leHQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBsYXN0OwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGZpbHRlclBvaW50cyhzdGFydCwgZW5kKSB7CiAgICAgICAgaWYgKCFzdGFydCkKICAgICAgICAgIHJldHVybiBzdGFydDsKICAgICAgICBpZiAoIWVuZCkKICAgICAgICAgIGVuZCA9IHN0YXJ0OwogICAgICAgIHZhciBwID0gc3RhcnQsIGFnYWluOwogICAgICAgIGRvIHsKICAgICAgICAgIGFnYWluID0gZmFsc2U7CiAgICAgICAgICBpZiAoIXAuc3RlaW5lciAmJiAoZXF1YWxzKHAsIHAubmV4dCkgfHwgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPT09IDApKSB7CiAgICAgICAgICAgIHJlbW92ZU5vZGUocCk7CiAgICAgICAgICAgIHAgPSBlbmQgPSBwLnByZXY7CiAgICAgICAgICAgIGlmIChwID09PSBwLm5leHQpCiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGFnYWluID0gdHJ1ZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHAgPSBwLm5leHQ7CiAgICAgICAgICB9CiAgICAgICAgfSB3aGlsZSAoYWdhaW4gfHwgcCAhPT0gZW5kKTsKICAgICAgICByZXR1cm4gZW5kOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGVhcmN1dExpbmtlZChlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCBwYXNzKSB7CiAgICAgICAgaWYgKCFlYXIpCiAgICAgICAgICByZXR1cm47CiAgICAgICAgaWYgKCFwYXNzICYmIGludlNpemUpCiAgICAgICAgICBpbmRleEN1cnZlKGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSk7CiAgICAgICAgdmFyIHN0b3AgPSBlYXIsIHByZXYsIG5leHQ7CiAgICAgICAgd2hpbGUgKGVhci5wcmV2ICE9PSBlYXIubmV4dCkgewogICAgICAgICAgcHJldiA9IGVhci5wcmV2OwogICAgICAgICAgbmV4dCA9IGVhci5uZXh0OwogICAgICAgICAgaWYgKGludlNpemUgPyBpc0Vhckhhc2hlZChlYXIsIG1pblgsIG1pblksIGludlNpemUpIDogaXNFYXIoZWFyKSkgewogICAgICAgICAgICB0cmlhbmdsZXMucHVzaChwcmV2LmkgLyBkaW0gfCAwKTsKICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goZWFyLmkgLyBkaW0gfCAwKTsKICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2gobmV4dC5pIC8gZGltIHwgMCk7CiAgICAgICAgICAgIHJlbW92ZU5vZGUoZWFyKTsKICAgICAgICAgICAgZWFyID0gbmV4dC5uZXh0OwogICAgICAgICAgICBzdG9wID0gbmV4dC5uZXh0OwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGVhciA9IG5leHQ7CiAgICAgICAgICBpZiAoZWFyID09PSBzdG9wKSB7CiAgICAgICAgICAgIGlmICghcGFzcykgewogICAgICAgICAgICAgIGVhcmN1dExpbmtlZChmaWx0ZXJQb2ludHMoZWFyKSwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDEpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHBhc3MgPT09IDEpIHsKICAgICAgICAgICAgICBlYXIgPSBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKGZpbHRlclBvaW50cyhlYXIpLCB0cmlhbmdsZXMsIGRpbSk7CiAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDIpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHBhc3MgPT09IDIpIHsKICAgICAgICAgICAgICBzcGxpdEVhcmN1dChlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgZnVuY3Rpb24gaXNFYXIoZWFyKSB7CiAgICAgICAgdmFyIGEzID0gZWFyLnByZXYsIGIgPSBlYXIsIGMgPSBlYXIubmV4dDsKICAgICAgICBpZiAoYXJlYShhMywgYiwgYykgPj0gMCkKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB2YXIgYXggPSBhMy54LCBieCA9IGIueCwgY3ggPSBjLngsIGF5ID0gYTMueSwgYnkgPSBiLnksIGN5ID0gYy55OwogICAgICAgIHZhciB4MCA9IGF4IDwgYnggPyBheCA8IGN4ID8gYXggOiBjeCA6IGJ4IDwgY3ggPyBieCA6IGN4LCB5MCA9IGF5IDwgYnkgPyBheSA8IGN5ID8gYXkgOiBjeSA6IGJ5IDwgY3kgPyBieSA6IGN5LCB4MSA9IGF4ID4gYnggPyBheCA+IGN4ID8gYXggOiBjeCA6IGJ4ID4gY3ggPyBieCA6IGN4LCB5MSA9IGF5ID4gYnkgPyBheSA+IGN5ID8gYXkgOiBjeSA6IGJ5ID4gY3kgPyBieSA6IGN5OwogICAgICAgIHZhciBwID0gYy5uZXh0OwogICAgICAgIHdoaWxlIChwICE9PSBhMykgewogICAgICAgICAgaWYgKHAueCA+PSB4MCAmJiBwLnggPD0geDEgJiYgcC55ID49IHkwICYmIHAueSA8PSB5MSAmJiBwb2ludEluVHJpYW5nbGUoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcC54LCBwLnkpICYmIGFyZWEocC5wcmV2LCBwLCBwLm5leHQpID49IDApCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIHAgPSBwLm5leHQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGlzRWFySGFzaGVkKGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSkgewogICAgICAgIHZhciBhMyA9IGVhci5wcmV2LCBiID0gZWFyLCBjID0gZWFyLm5leHQ7CiAgICAgICAgaWYgKGFyZWEoYTMsIGIsIGMpID49IDApCiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgdmFyIGF4ID0gYTMueCwgYnggPSBiLngsIGN4ID0gYy54LCBheSA9IGEzLnksIGJ5ID0gYi55LCBjeSA9IGMueTsKICAgICAgICB2YXIgeDAgPSBheCA8IGJ4ID8gYXggPCBjeCA/IGF4IDogY3ggOiBieCA8IGN4ID8gYnggOiBjeCwgeTAgPSBheSA8IGJ5ID8gYXkgPCBjeSA/IGF5IDogY3kgOiBieSA8IGN5ID8gYnkgOiBjeSwgeDEgPSBheCA+IGJ4ID8gYXggPiBjeCA/IGF4IDogY3ggOiBieCA+IGN4ID8gYnggOiBjeCwgeTEgPSBheSA+IGJ5ID8gYXkgPiBjeSA/IGF5IDogY3kgOiBieSA+IGN5ID8gYnkgOiBjeTsKICAgICAgICB2YXIgbWluWiA9IHpPcmRlcih4MCwgeTAsIG1pblgsIG1pblksIGludlNpemUpLCBtYXhaID0gek9yZGVyKHgxLCB5MSwgbWluWCwgbWluWSwgaW52U2l6ZSk7CiAgICAgICAgdmFyIHAgPSBlYXIucHJldlosIG4gPSBlYXIubmV4dFo7CiAgICAgICAgd2hpbGUgKHAgJiYgcC56ID49IG1pblogJiYgbiAmJiBuLnogPD0gbWF4WikgewogICAgICAgICAgaWYgKHAueCA+PSB4MCAmJiBwLnggPD0geDEgJiYgcC55ID49IHkwICYmIHAueSA8PSB5MSAmJiBwICE9PSBhMyAmJiBwICE9PSBjICYmIHBvaW50SW5UcmlhbmdsZShheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBwLngsIHAueSkgJiYgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPj0gMCkKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgcCA9IHAucHJldlo7CiAgICAgICAgICBpZiAobi54ID49IHgwICYmIG4ueCA8PSB4MSAmJiBuLnkgPj0geTAgJiYgbi55IDw9IHkxICYmIG4gIT09IGEzICYmIG4gIT09IGMgJiYgcG9pbnRJblRyaWFuZ2xlKGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIG4ueCwgbi55KSAmJiBhcmVhKG4ucHJldiwgbiwgbi5uZXh0KSA+PSAwKQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICBuID0gbi5uZXh0WjsKICAgICAgICB9CiAgICAgICAgd2hpbGUgKHAgJiYgcC56ID49IG1pblopIHsKICAgICAgICAgIGlmIChwLnggPj0geDAgJiYgcC54IDw9IHgxICYmIHAueSA+PSB5MCAmJiBwLnkgPD0geTEgJiYgcCAhPT0gYTMgJiYgcCAhPT0gYyAmJiBwb2ludEluVHJpYW5nbGUoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcC54LCBwLnkpICYmIGFyZWEocC5wcmV2LCBwLCBwLm5leHQpID49IDApCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIHAgPSBwLnByZXZaOwogICAgICAgIH0KICAgICAgICB3aGlsZSAobiAmJiBuLnogPD0gbWF4WikgewogICAgICAgICAgaWYgKG4ueCA+PSB4MCAmJiBuLnggPD0geDEgJiYgbi55ID49IHkwICYmIG4ueSA8PSB5MSAmJiBuICE9PSBhMyAmJiBuICE9PSBjICYmIHBvaW50SW5UcmlhbmdsZShheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBuLngsIG4ueSkgJiYgYXJlYShuLnByZXYsIG4sIG4ubmV4dCkgPj0gMCkKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgbiA9IG4ubmV4dFo7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGN1cmVMb2NhbEludGVyc2VjdGlvbnMoc3RhcnQsIHRyaWFuZ2xlcywgZGltKSB7CiAgICAgICAgdmFyIHAgPSBzdGFydDsKICAgICAgICBkbyB7CiAgICAgICAgICB2YXIgYTMgPSBwLnByZXYsIGIgPSBwLm5leHQubmV4dDsKICAgICAgICAgIGlmICghZXF1YWxzKGEzLCBiKSAmJiBpbnRlcnNlY3RzKGEzLCBwLCBwLm5leHQsIGIpICYmIGxvY2FsbHlJbnNpZGUoYTMsIGIpICYmIGxvY2FsbHlJbnNpZGUoYiwgYTMpKSB7CiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGEzLmkgLyBkaW0gfCAwKTsKICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2gocC5pIC8gZGltIHwgMCk7CiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGIuaSAvIGRpbSB8IDApOwogICAgICAgICAgICByZW1vdmVOb2RlKHApOwogICAgICAgICAgICByZW1vdmVOb2RlKHAubmV4dCk7CiAgICAgICAgICAgIHAgPSBzdGFydCA9IGI7CiAgICAgICAgICB9CiAgICAgICAgICBwID0gcC5uZXh0OwogICAgICAgIH0gd2hpbGUgKHAgIT09IHN0YXJ0KTsKICAgICAgICByZXR1cm4gZmlsdGVyUG9pbnRzKHApOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHNwbGl0RWFyY3V0KHN0YXJ0LCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSkgewogICAgICAgIHZhciBhMyA9IHN0YXJ0OwogICAgICAgIGRvIHsKICAgICAgICAgIHZhciBiID0gYTMubmV4dC5uZXh0OwogICAgICAgICAgd2hpbGUgKGIgIT09IGEzLnByZXYpIHsKICAgICAgICAgICAgaWYgKGEzLmkgIT09IGIuaSAmJiBpc1ZhbGlkRGlhZ29uYWwoYTMsIGIpKSB7CiAgICAgICAgICAgICAgdmFyIGMgPSBzcGxpdFBvbHlnb24oYTMsIGIpOwogICAgICAgICAgICAgIGEzID0gZmlsdGVyUG9pbnRzKGEzLCBhMy5uZXh0KTsKICAgICAgICAgICAgICBjID0gZmlsdGVyUG9pbnRzKGMsIGMubmV4dCk7CiAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGEzLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMCk7CiAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGMsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAwKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYiA9IGIubmV4dDsKICAgICAgICAgIH0KICAgICAgICAgIGEzID0gYTMubmV4dDsKICAgICAgICB9IHdoaWxlIChhMyAhPT0gc3RhcnQpOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGVzKGRhdGEsIGhvbGVJbmRpY2VzLCBvdXRlck5vZGUsIGRpbSkgewogICAgICAgIHZhciBxdWV1ZSA9IFtdLCBpLCBsZW4sIHN0YXJ0LCBlbmQsIGxpc3Q7CiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gaG9sZUluZGljZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgIHN0YXJ0ID0gaG9sZUluZGljZXNbaV0gKiBkaW07CiAgICAgICAgICBlbmQgPSBpIDwgbGVuIC0gMSA/IGhvbGVJbmRpY2VzW2kgKyAxXSAqIGRpbSA6IGRhdGEubGVuZ3RoOwogICAgICAgICAgbGlzdCA9IGxpbmtlZExpc3QoZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBmYWxzZSk7CiAgICAgICAgICBpZiAobGlzdCA9PT0gbGlzdC5uZXh0KQogICAgICAgICAgICBsaXN0LnN0ZWluZXIgPSB0cnVlOwogICAgICAgICAgcXVldWUucHVzaChnZXRMZWZ0bW9zdChsaXN0KSk7CiAgICAgICAgfQogICAgICAgIHF1ZXVlLnNvcnQoY29tcGFyZVgpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykgewogICAgICAgICAgb3V0ZXJOb2RlID0gZWxpbWluYXRlSG9sZShxdWV1ZVtpXSwgb3V0ZXJOb2RlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG91dGVyTm9kZTsKICAgICAgfQogICAgICBmdW5jdGlvbiBjb21wYXJlWChhMywgYikgewogICAgICAgIHJldHVybiBhMy54IC0gYi54OwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGUoaG9sZSwgb3V0ZXJOb2RlKSB7CiAgICAgICAgdmFyIGJyaWRnZSA9IGZpbmRIb2xlQnJpZGdlKGhvbGUsIG91dGVyTm9kZSk7CiAgICAgICAgaWYgKCFicmlkZ2UpIHsKICAgICAgICAgIHJldHVybiBvdXRlck5vZGU7CiAgICAgICAgfQogICAgICAgIHZhciBicmlkZ2VSZXZlcnNlID0gc3BsaXRQb2x5Z29uKGJyaWRnZSwgaG9sZSk7CiAgICAgICAgZmlsdGVyUG9pbnRzKGJyaWRnZVJldmVyc2UsIGJyaWRnZVJldmVyc2UubmV4dCk7CiAgICAgICAgcmV0dXJuIGZpbHRlclBvaW50cyhicmlkZ2UsIGJyaWRnZS5uZXh0KTsKICAgICAgfQogICAgICBmdW5jdGlvbiBmaW5kSG9sZUJyaWRnZShob2xlLCBvdXRlck5vZGUpIHsKICAgICAgICB2YXIgcCA9IG91dGVyTm9kZSwgaHggPSBob2xlLngsIGh5ID0gaG9sZS55LCBxeCA9IC1JbmZpbml0eSwgbTsKICAgICAgICBkbyB7CiAgICAgICAgICBpZiAoaHkgPD0gcC55ICYmIGh5ID49IHAubmV4dC55ICYmIHAubmV4dC55ICE9PSBwLnkpIHsKICAgICAgICAgICAgdmFyIHggPSBwLnggKyAoaHkgLSBwLnkpICogKHAubmV4dC54IC0gcC54KSAvIChwLm5leHQueSAtIHAueSk7CiAgICAgICAgICAgIGlmICh4IDw9IGh4ICYmIHggPiBxeCkgewogICAgICAgICAgICAgIHF4ID0geDsKICAgICAgICAgICAgICBtID0gcC54IDwgcC5uZXh0LnggPyBwIDogcC5uZXh0OwogICAgICAgICAgICAgIGlmICh4ID09PSBoeCkKICAgICAgICAgICAgICAgIHJldHVybiBtOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBwID0gcC5uZXh0OwogICAgICAgIH0gd2hpbGUgKHAgIT09IG91dGVyTm9kZSk7CiAgICAgICAgaWYgKCFtKQogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgdmFyIHN0b3AgPSBtLCBteCA9IG0ueCwgbXkgPSBtLnksIHRhbk1pbiA9IEluZmluaXR5LCB0YW47CiAgICAgICAgcCA9IG07CiAgICAgICAgZG8gewogICAgICAgICAgaWYgKGh4ID49IHAueCAmJiBwLnggPj0gbXggJiYgaHggIT09IHAueCAmJiBwb2ludEluVHJpYW5nbGUoaHkgPCBteSA/IGh4IDogcXgsIGh5LCBteCwgbXksIGh5IDwgbXkgPyBxeCA6IGh4LCBoeSwgcC54LCBwLnkpKSB7CiAgICAgICAgICAgIHRhbiA9IE1hdGguYWJzKGh5IC0gcC55KSAvIChoeCAtIHAueCk7CiAgICAgICAgICAgIGlmIChsb2NhbGx5SW5zaWRlKHAsIGhvbGUpICYmICh0YW4gPCB0YW5NaW4gfHwgdGFuID09PSB0YW5NaW4gJiYgKHAueCA+IG0ueCB8fCBwLnggPT09IG0ueCAmJiBzZWN0b3JDb250YWluc1NlY3RvcihtLCBwKSkpKSB7CiAgICAgICAgICAgICAgbSA9IHA7CiAgICAgICAgICAgICAgdGFuTWluID0gdGFuOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBwID0gcC5uZXh0OwogICAgICAgIH0gd2hpbGUgKHAgIT09IHN0b3ApOwogICAgICAgIHJldHVybiBtOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHNlY3RvckNvbnRhaW5zU2VjdG9yKG0sIHApIHsKICAgICAgICByZXR1cm4gYXJlYShtLnByZXYsIG0sIHAucHJldikgPCAwICYmIGFyZWEocC5uZXh0LCBtLCBtLm5leHQpIDwgMDsKICAgICAgfQogICAgICBmdW5jdGlvbiBpbmRleEN1cnZlKHN0YXJ0LCBtaW5YLCBtaW5ZLCBpbnZTaXplKSB7CiAgICAgICAgdmFyIHAgPSBzdGFydDsKICAgICAgICBkbyB7CiAgICAgICAgICBpZiAocC56ID09PSAwKQogICAgICAgICAgICBwLnogPSB6T3JkZXIocC54LCBwLnksIG1pblgsIG1pblksIGludlNpemUpOwogICAgICAgICAgcC5wcmV2WiA9IHAucHJldjsKICAgICAgICAgIHAubmV4dFogPSBwLm5leHQ7CiAgICAgICAgICBwID0gcC5uZXh0OwogICAgICAgIH0gd2hpbGUgKHAgIT09IHN0YXJ0KTsKICAgICAgICBwLnByZXZaLm5leHRaID0gbnVsbDsKICAgICAgICBwLnByZXZaID0gbnVsbDsKICAgICAgICBzb3J0TGlua2VkKHApOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHNvcnRMaW5rZWQobGlzdCkgewogICAgICAgIHZhciBpLCBwLCBxLCBlLCB0YWlsLCBudW1NZXJnZXMsIHBTaXplLCBxU2l6ZSwgaW5TaXplID0gMTsKICAgICAgICBkbyB7CiAgICAgICAgICBwID0gbGlzdDsKICAgICAgICAgIGxpc3QgPSBudWxsOwogICAgICAgICAgdGFpbCA9IG51bGw7CiAgICAgICAgICBudW1NZXJnZXMgPSAwOwogICAgICAgICAgd2hpbGUgKHApIHsKICAgICAgICAgICAgbnVtTWVyZ2VzKys7CiAgICAgICAgICAgIHEgPSBwOwogICAgICAgICAgICBwU2l6ZSA9IDA7CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpblNpemU7IGkrKykgewogICAgICAgICAgICAgIHBTaXplKys7CiAgICAgICAgICAgICAgcSA9IHEubmV4dFo7CiAgICAgICAgICAgICAgaWYgKCFxKQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcVNpemUgPSBpblNpemU7CiAgICAgICAgICAgIHdoaWxlIChwU2l6ZSA+IDAgfHwgcVNpemUgPiAwICYmIHEpIHsKICAgICAgICAgICAgICBpZiAocFNpemUgIT09IDAgJiYgKHFTaXplID09PSAwIHx8ICFxIHx8IHAueiA8PSBxLnopKSB7CiAgICAgICAgICAgICAgICBlID0gcDsKICAgICAgICAgICAgICAgIHAgPSBwLm5leHRaOwogICAgICAgICAgICAgICAgcFNpemUtLTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZSA9IHE7CiAgICAgICAgICAgICAgICBxID0gcS5uZXh0WjsKICAgICAgICAgICAgICAgIHFTaXplLS07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh0YWlsKQogICAgICAgICAgICAgICAgdGFpbC5uZXh0WiA9IGU7CiAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgbGlzdCA9IGU7CiAgICAgICAgICAgICAgZS5wcmV2WiA9IHRhaWw7CiAgICAgICAgICAgICAgdGFpbCA9IGU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcCA9IHE7CiAgICAgICAgICB9CiAgICAgICAgICB0YWlsLm5leHRaID0gbnVsbDsKICAgICAgICAgIGluU2l6ZSAqPSAyOwogICAgICAgIH0gd2hpbGUgKG51bU1lcmdlcyA+IDEpOwogICAgICAgIHJldHVybiBsaXN0OwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHpPcmRlcih4LCB5LCBtaW5YLCBtaW5ZLCBpbnZTaXplKSB7CiAgICAgICAgeCA9ICh4IC0gbWluWCkgKiBpbnZTaXplIHwgMDsKICAgICAgICB5ID0gKHkgLSBtaW5ZKSAqIGludlNpemUgfCAwOwogICAgICAgIHggPSAoeCB8IHggPDwgOCkgJiAxNjcxMTkzNTsKICAgICAgICB4ID0gKHggfCB4IDw8IDQpICYgMjUyNjQ1MTM1OwogICAgICAgIHggPSAoeCB8IHggPDwgMikgJiA4NTg5OTM0NTk7CiAgICAgICAgeCA9ICh4IHwgeCA8PCAxKSAmIDE0MzE2NTU3NjU7CiAgICAgICAgeSA9ICh5IHwgeSA8PCA4KSAmIDE2NzExOTM1OwogICAgICAgIHkgPSAoeSB8IHkgPDwgNCkgJiAyNTI2NDUxMzU7CiAgICAgICAgeSA9ICh5IHwgeSA8PCAyKSAmIDg1ODk5MzQ1OTsKICAgICAgICB5ID0gKHkgfCB5IDw8IDEpICYgMTQzMTY1NTc2NTsKICAgICAgICByZXR1cm4geCB8IHkgPDwgMTsKICAgICAgfQogICAgICBmdW5jdGlvbiBnZXRMZWZ0bW9zdChzdGFydCkgewogICAgICAgIHZhciBwID0gc3RhcnQsIGxlZnRtb3N0ID0gc3RhcnQ7CiAgICAgICAgZG8gewogICAgICAgICAgaWYgKHAueCA8IGxlZnRtb3N0LnggfHwgcC54ID09PSBsZWZ0bW9zdC54ICYmIHAueSA8IGxlZnRtb3N0LnkpCiAgICAgICAgICAgIGxlZnRtb3N0ID0gcDsKICAgICAgICAgIHAgPSBwLm5leHQ7CiAgICAgICAgfSB3aGlsZSAocCAhPT0gc3RhcnQpOwogICAgICAgIHJldHVybiBsZWZ0bW9zdDsKICAgICAgfQogICAgICBmdW5jdGlvbiBwb2ludEluVHJpYW5nbGUoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcHgsIHB5KSB7CiAgICAgICAgcmV0dXJuIChjeCAtIHB4KSAqIChheSAtIHB5KSA+PSAoYXggLSBweCkgKiAoY3kgLSBweSkgJiYgKGF4IC0gcHgpICogKGJ5IC0gcHkpID49IChieCAtIHB4KSAqIChheSAtIHB5KSAmJiAoYnggLSBweCkgKiAoY3kgLSBweSkgPj0gKGN4IC0gcHgpICogKGJ5IC0gcHkpOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGlzVmFsaWREaWFnb25hbChhMywgYikgewogICAgICAgIHJldHVybiBhMy5uZXh0LmkgIT09IGIuaSAmJiBhMy5wcmV2LmkgIT09IGIuaSAmJiAhaW50ZXJzZWN0c1BvbHlnb24oYTMsIGIpICYmIC8vIGRvbmVzJ3QgaW50ZXJzZWN0IG90aGVyIGVkZ2VzCiAgICAgICAgKGxvY2FsbHlJbnNpZGUoYTMsIGIpICYmIGxvY2FsbHlJbnNpZGUoYiwgYTMpICYmIG1pZGRsZUluc2lkZShhMywgYikgJiYgLy8gbG9jYWxseSB2aXNpYmxlCiAgICAgICAgKGFyZWEoYTMucHJldiwgYTMsIGIucHJldikgfHwgYXJlYShhMywgYi5wcmV2LCBiKSkgfHwgLy8gZG9lcyBub3QgY3JlYXRlIG9wcG9zaXRlLWZhY2luZyBzZWN0b3JzCiAgICAgICAgZXF1YWxzKGEzLCBiKSAmJiBhcmVhKGEzLnByZXYsIGEzLCBhMy5uZXh0KSA+IDAgJiYgYXJlYShiLnByZXYsIGIsIGIubmV4dCkgPiAwKTsKICAgICAgfQogICAgICBmdW5jdGlvbiBhcmVhKHAsIHEsIHIpIHsKICAgICAgICByZXR1cm4gKHEueSAtIHAueSkgKiAoci54IC0gcS54KSAtIChxLnggLSBwLngpICogKHIueSAtIHEueSk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gZXF1YWxzKHAxLCBwMikgewogICAgICAgIHJldHVybiBwMS54ID09PSBwMi54ICYmIHAxLnkgPT09IHAyLnk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gaW50ZXJzZWN0cyhwMSwgcTEyLCBwMiwgcTIyKSB7CiAgICAgICAgdmFyIG8xID0gc2lnbjIoYXJlYShwMSwgcTEyLCBwMikpOwogICAgICAgIHZhciBvMiA9IHNpZ24yKGFyZWEocDEsIHExMiwgcTIyKSk7CiAgICAgICAgdmFyIG8zID0gc2lnbjIoYXJlYShwMiwgcTIyLCBwMSkpOwogICAgICAgIHZhciBvNCA9IHNpZ24yKGFyZWEocDIsIHEyMiwgcTEyKSk7CiAgICAgICAgaWYgKG8xICE9PSBvMiAmJiBvMyAhPT0gbzQpCiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICBpZiAobzEgPT09IDAgJiYgb25TZWdtZW50KHAxLCBwMiwgcTEyKSkKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIGlmIChvMiA9PT0gMCAmJiBvblNlZ21lbnQocDEsIHEyMiwgcTEyKSkKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIGlmIChvMyA9PT0gMCAmJiBvblNlZ21lbnQocDIsIHAxLCBxMjIpKQogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgaWYgKG80ID09PSAwICYmIG9uU2VnbWVudChwMiwgcTEyLCBxMjIpKQogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIG9uU2VnbWVudChwLCBxLCByKSB7CiAgICAgICAgcmV0dXJuIHEueCA8PSBNYXRoLm1heChwLngsIHIueCkgJiYgcS54ID49IE1hdGgubWluKHAueCwgci54KSAmJiBxLnkgPD0gTWF0aC5tYXgocC55LCByLnkpICYmIHEueSA+PSBNYXRoLm1pbihwLnksIHIueSk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gc2lnbjIobnVtKSB7CiAgICAgICAgcmV0dXJuIG51bSA+IDAgPyAxIDogbnVtIDwgMCA/IC0xIDogMDsKICAgICAgfQogICAgICBmdW5jdGlvbiBpbnRlcnNlY3RzUG9seWdvbihhMywgYikgewogICAgICAgIHZhciBwID0gYTM7CiAgICAgICAgZG8gewogICAgICAgICAgaWYgKHAuaSAhPT0gYTMuaSAmJiBwLm5leHQuaSAhPT0gYTMuaSAmJiBwLmkgIT09IGIuaSAmJiBwLm5leHQuaSAhPT0gYi5pICYmIGludGVyc2VjdHMocCwgcC5uZXh0LCBhMywgYikpCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgcCA9IHAubmV4dDsKICAgICAgICB9IHdoaWxlIChwICE9PSBhMyk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGxvY2FsbHlJbnNpZGUoYTMsIGIpIHsKICAgICAgICByZXR1cm4gYXJlYShhMy5wcmV2LCBhMywgYTMubmV4dCkgPCAwID8gYXJlYShhMywgYiwgYTMubmV4dCkgPj0gMCAmJiBhcmVhKGEzLCBhMy5wcmV2LCBiKSA+PSAwIDogYXJlYShhMywgYiwgYTMucHJldikgPCAwIHx8IGFyZWEoYTMsIGEzLm5leHQsIGIpIDwgMDsKICAgICAgfQogICAgICBmdW5jdGlvbiBtaWRkbGVJbnNpZGUoYTMsIGIpIHsKICAgICAgICB2YXIgcCA9IGEzLCBpbnNpZGUgPSBmYWxzZSwgcHggPSAoYTMueCArIGIueCkgLyAyLCBweSA9IChhMy55ICsgYi55KSAvIDI7CiAgICAgICAgZG8gewogICAgICAgICAgaWYgKHAueSA+IHB5ICE9PSBwLm5leHQueSA+IHB5ICYmIHAubmV4dC55ICE9PSBwLnkgJiYgcHggPCAocC5uZXh0LnggLSBwLngpICogKHB5IC0gcC55KSAvIChwLm5leHQueSAtIHAueSkgKyBwLngpCiAgICAgICAgICAgIGluc2lkZSA9ICFpbnNpZGU7CiAgICAgICAgICBwID0gcC5uZXh0OwogICAgICAgIH0gd2hpbGUgKHAgIT09IGEzKTsKICAgICAgICByZXR1cm4gaW5zaWRlOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHNwbGl0UG9seWdvbihhMywgYikgewogICAgICAgIHZhciBhMjIgPSBuZXcgTm9kZShhMy5pLCBhMy54LCBhMy55KSwgYjIgPSBuZXcgTm9kZShiLmksIGIueCwgYi55KSwgYW4gPSBhMy5uZXh0LCBicCA9IGIucHJldjsKICAgICAgICBhMy5uZXh0ID0gYjsKICAgICAgICBiLnByZXYgPSBhMzsKICAgICAgICBhMjIubmV4dCA9IGFuOwogICAgICAgIGFuLnByZXYgPSBhMjI7CiAgICAgICAgYjIubmV4dCA9IGEyMjsKICAgICAgICBhMjIucHJldiA9IGIyOwogICAgICAgIGJwLm5leHQgPSBiMjsKICAgICAgICBiMi5wcmV2ID0gYnA7CiAgICAgICAgcmV0dXJuIGIyOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGluc2VydE5vZGUoaSwgeCwgeSwgbGFzdCkgewogICAgICAgIHZhciBwID0gbmV3IE5vZGUoaSwgeCwgeSk7CiAgICAgICAgaWYgKCFsYXN0KSB7CiAgICAgICAgICBwLnByZXYgPSBwOwogICAgICAgICAgcC5uZXh0ID0gcDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcC5uZXh0ID0gbGFzdC5uZXh0OwogICAgICAgICAgcC5wcmV2ID0gbGFzdDsKICAgICAgICAgIGxhc3QubmV4dC5wcmV2ID0gcDsKICAgICAgICAgIGxhc3QubmV4dCA9IHA7CiAgICAgICAgfQogICAgICAgIHJldHVybiBwOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHJlbW92ZU5vZGUocCkgewogICAgICAgIHAubmV4dC5wcmV2ID0gcC5wcmV2OwogICAgICAgIHAucHJldi5uZXh0ID0gcC5uZXh0OwogICAgICAgIGlmIChwLnByZXZaKQogICAgICAgICAgcC5wcmV2Wi5uZXh0WiA9IHAubmV4dFo7CiAgICAgICAgaWYgKHAubmV4dFopCiAgICAgICAgICBwLm5leHRaLnByZXZaID0gcC5wcmV2WjsKICAgICAgfQogICAgICBmdW5jdGlvbiBOb2RlKGksIHgsIHkpIHsKICAgICAgICB0aGlzLmkgPSBpOwogICAgICAgIHRoaXMueCA9IHg7CiAgICAgICAgdGhpcy55ID0geTsKICAgICAgICB0aGlzLnByZXYgPSBudWxsOwogICAgICAgIHRoaXMubmV4dCA9IG51bGw7CiAgICAgICAgdGhpcy56ID0gMDsKICAgICAgICB0aGlzLnByZXZaID0gbnVsbDsKICAgICAgICB0aGlzLm5leHRaID0gbnVsbDsKICAgICAgICB0aGlzLnN0ZWluZXIgPSBmYWxzZTsKICAgICAgfQogICAgICBlYXJjdXQyLmRldmlhdGlvbiA9IGZ1bmN0aW9uKGRhdGEsIGhvbGVJbmRpY2VzLCBkaW0sIHRyaWFuZ2xlcykgewogICAgICAgIHZhciBoYXNIb2xlcyA9IGhvbGVJbmRpY2VzICYmIGhvbGVJbmRpY2VzLmxlbmd0aDsKICAgICAgICB2YXIgb3V0ZXJMZW4gPSBoYXNIb2xlcyA/IGhvbGVJbmRpY2VzWzBdICogZGltIDogZGF0YS5sZW5ndGg7CiAgICAgICAgdmFyIHBvbHlnb25BcmVhID0gTWF0aC5hYnMoc2lnbmVkQXJlYShkYXRhLCAwLCBvdXRlckxlbiwgZGltKSk7CiAgICAgICAgaWYgKGhhc0hvbGVzKSB7CiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaG9sZUluZGljZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgdmFyIHN0YXJ0ID0gaG9sZUluZGljZXNbaV0gKiBkaW07CiAgICAgICAgICAgIHZhciBlbmQgPSBpIDwgbGVuIC0gMSA/IGhvbGVJbmRpY2VzW2kgKyAxXSAqIGRpbSA6IGRhdGEubGVuZ3RoOwogICAgICAgICAgICBwb2x5Z29uQXJlYSAtPSBNYXRoLmFicyhzaWduZWRBcmVhKGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB2YXIgdHJpYW5nbGVzQXJlYSA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRyaWFuZ2xlcy5sZW5ndGg7IGkgKz0gMykgewogICAgICAgICAgdmFyIGEzID0gdHJpYW5nbGVzW2ldICogZGltOwogICAgICAgICAgdmFyIGIgPSB0cmlhbmdsZXNbaSArIDFdICogZGltOwogICAgICAgICAgdmFyIGMgPSB0cmlhbmdsZXNbaSArIDJdICogZGltOwogICAgICAgICAgdHJpYW5nbGVzQXJlYSArPSBNYXRoLmFicygKICAgICAgICAgICAgKGRhdGFbYTNdIC0gZGF0YVtjXSkgKiAoZGF0YVtiICsgMV0gLSBkYXRhW2EzICsgMV0pIC0gKGRhdGFbYTNdIC0gZGF0YVtiXSkgKiAoZGF0YVtjICsgMV0gLSBkYXRhW2EzICsgMV0pCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcG9seWdvbkFyZWEgPT09IDAgJiYgdHJpYW5nbGVzQXJlYSA9PT0gMCA/IDAgOiBNYXRoLmFicygodHJpYW5nbGVzQXJlYSAtIHBvbHlnb25BcmVhKSAvIHBvbHlnb25BcmVhKTsKICAgICAgfTsKICAgICAgZnVuY3Rpb24gc2lnbmVkQXJlYShkYXRhLCBzdGFydCwgZW5kLCBkaW0pIHsKICAgICAgICB2YXIgc3VtID0gMDsKICAgICAgICBmb3IgKHZhciBpID0gc3RhcnQsIGogPSBlbmQgLSBkaW07IGkgPCBlbmQ7IGkgKz0gZGltKSB7CiAgICAgICAgICBzdW0gKz0gKGRhdGFbal0gLSBkYXRhW2ldKSAqIChkYXRhW2kgKyAxXSArIGRhdGFbaiArIDFdKTsKICAgICAgICAgIGogPSBpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc3VtOwogICAgICB9CiAgICAgIGVhcmN1dDIuZmxhdHRlbiA9IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICB2YXIgZGltID0gZGF0YVswXVswXS5sZW5ndGgsIHJlc3VsdCA9IHsgdmVydGljZXM6IFtdLCBob2xlczogW10sIGRpbWVuc2lvbnM6IGRpbSB9LCBob2xlSW5kZXggPSAwOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkYXRhW2ldLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyBkIDwgZGltOyBkKyspCiAgICAgICAgICAgICAgcmVzdWx0LnZlcnRpY2VzLnB1c2goZGF0YVtpXVtqXVtkXSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoaSA+IDApIHsKICAgICAgICAgICAgaG9sZUluZGV4ICs9IGRhdGFbaSAtIDFdLmxlbmd0aDsKICAgICAgICAgICAgcmVzdWx0LmhvbGVzLnB1c2goaG9sZUluZGV4KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1dpbmRpbmdPcmRlci5qcwogIHZhciBXaW5kaW5nT3JkZXIsIFdpbmRpbmdPcmRlcl9kZWZhdWx0OwogIHZhciBpbml0X1dpbmRpbmdPcmRlciA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvV2luZGluZ09yZGVyLmpzIigpIHsKICAgICAgaW5pdF9XZWJHTENvbnN0YW50cygpOwogICAgICBXaW5kaW5nT3JkZXIgPSB7CiAgICAgICAgLyoqCiAgICAgICAgICogVmVydGljZXMgYXJlIGluIGNsb2Nrd2lzZSBvcmRlci4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgQ0xPQ0tXSVNFOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkNXLAogICAgICAgIC8qKgogICAgICAgICAqIFZlcnRpY2VzIGFyZSBpbiBjb3VudGVyLWNsb2Nrd2lzZSBvcmRlci4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgQ09VTlRFUl9DTE9DS1dJU0U6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuQ0NXCiAgICAgIH07CiAgICAgIFdpbmRpbmdPcmRlci52YWxpZGF0ZSA9IGZ1bmN0aW9uKHdpbmRpbmdPcmRlcikgewogICAgICAgIHJldHVybiB3aW5kaW5nT3JkZXIgPT09IFdpbmRpbmdPcmRlci5DTE9DS1dJU0UgfHwgd2luZGluZ09yZGVyID09PSBXaW5kaW5nT3JkZXIuQ09VTlRFUl9DTE9DS1dJU0U7CiAgICAgIH07CiAgICAgIFdpbmRpbmdPcmRlcl9kZWZhdWx0ID0gT2JqZWN0LmZyZWV6ZShXaW5kaW5nT3JkZXIpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUG9seWdvblBpcGVsaW5lLmpzCiAgdmFyIGltcG9ydF9lYXJjdXQsIHNjYWxlVG9HZW9kZXRpY0hlaWdodE4sIHNjYWxlVG9HZW9kZXRpY0hlaWdodFAsIFBvbHlnb25QaXBlbGluZSwgc3ViZGl2aXNpb25WMFNjcmF0Y2gsIHN1YmRpdmlzaW9uVjFTY3JhdGNoLCBzdWJkaXZpc2lvblYyU2NyYXRjaCwgc3ViZGl2aXNpb25TMFNjcmF0Y2gsIHN1YmRpdmlzaW9uUzFTY3JhdGNoLCBzdWJkaXZpc2lvblMyU2NyYXRjaCwgc3ViZGl2aXNpb25NaWRTY3JhdGNoLCBzdWJkaXZpc2lvblQwU2NyYXRjaCwgc3ViZGl2aXNpb25UMVNjcmF0Y2gsIHN1YmRpdmlzaW9uVDJTY3JhdGNoLCBzdWJkaXZpc2lvblRleGNvb3JkTWlkU2NyYXRjaCwgc3ViZGl2aXNpb25DMFNjcmF0Y2gsIHN1YmRpdmlzaW9uQzFTY3JhdGNoLCBzdWJkaXZpc2lvbkMyU2NyYXRjaCwgc3ViZGl2aXNpb25DYXJ0b2dyYXBoaWNTY3JhdGNoLCBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdDsKICB2YXIgaW5pdF9Qb2x5Z29uUGlwZWxpbmUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BvbHlnb25QaXBlbGluZS5qcyIoKSB7CiAgICAgIGltcG9ydF9lYXJjdXQgPSBfX3RvRVNNKHJlcXVpcmVfZWFyY3V0KCksIDEpOwogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWRSaHVtYkxpbmUoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgaW5pdF9XaW5kaW5nT3JkZXIoKTsKICAgICAgc2NhbGVUb0dlb2RldGljSGVpZ2h0TiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NhbGVUb0dlb2RldGljSGVpZ2h0UCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgUG9seWdvblBpcGVsaW5lID0ge307CiAgICAgIFBvbHlnb25QaXBlbGluZS5jb21wdXRlQXJlYTJEID0gZnVuY3Rpb24ocG9zaXRpb25zKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJwb3NpdGlvbnMiLCBwb3NpdGlvbnMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKAogICAgICAgICAgInBvc2l0aW9ucy5sZW5ndGgiLAogICAgICAgICAgcG9zaXRpb25zLmxlbmd0aCwKICAgICAgICAgIDMKICAgICAgICApOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgbGV0IGFyZWEgPSAwOwogICAgICAgIGZvciAobGV0IGkwID0gbGVuZ3RoIC0gMSwgaTEgPSAwOyBpMSA8IGxlbmd0aDsgaTAgPSBpMSsrKSB7CiAgICAgICAgICBjb25zdCB2MDIgPSBwb3NpdGlvbnNbaTBdOwogICAgICAgICAgY29uc3QgdjEyID0gcG9zaXRpb25zW2kxXTsKICAgICAgICAgIGFyZWEgKz0gdjAyLnggKiB2MTIueSAtIHYxMi54ICogdjAyLnk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhcmVhICogMC41OwogICAgICB9OwogICAgICBQb2x5Z29uUGlwZWxpbmUuY29tcHV0ZVdpbmRpbmdPcmRlcjJEID0gZnVuY3Rpb24ocG9zaXRpb25zKSB7CiAgICAgICAgY29uc3QgYXJlYSA9IFBvbHlnb25QaXBlbGluZS5jb21wdXRlQXJlYTJEKHBvc2l0aW9ucyk7CiAgICAgICAgcmV0dXJuIGFyZWEgPiAwID8gV2luZGluZ09yZGVyX2RlZmF1bHQuQ09VTlRFUl9DTE9DS1dJU0UgOiBXaW5kaW5nT3JkZXJfZGVmYXVsdC5DTE9DS1dJU0U7CiAgICAgIH07CiAgICAgIFBvbHlnb25QaXBlbGluZS50cmlhbmd1bGF0ZSA9IGZ1bmN0aW9uKHBvc2l0aW9ucywgaG9sZXMpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInBvc2l0aW9ucyIsIHBvc2l0aW9ucyk7CiAgICAgICAgY29uc3QgZmxhdHRlbmVkUG9zaXRpb25zID0gQ2FydGVzaWFuMl9kZWZhdWx0LnBhY2tBcnJheShwb3NpdGlvbnMpOwogICAgICAgIHJldHVybiAoMCwgaW1wb3J0X2VhcmN1dC5kZWZhdWx0KShmbGF0dGVuZWRQb3NpdGlvbnMsIGhvbGVzLCAyKTsKICAgICAgfTsKICAgICAgc3ViZGl2aXNpb25WMFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHN1YmRpdmlzaW9uVjFTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzdWJkaXZpc2lvblYyU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc3ViZGl2aXNpb25TMFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHN1YmRpdmlzaW9uUzFTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzdWJkaXZpc2lvblMyU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc3ViZGl2aXNpb25NaWRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzdWJkaXZpc2lvblQwU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgc3ViZGl2aXNpb25UMVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIHN1YmRpdmlzaW9uVDJTY3JhdGNoID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBzdWJkaXZpc2lvblRleGNvb3JkTWlkU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgUG9seWdvblBpcGVsaW5lLmNvbXB1dGVTdWJkaXZpc2lvbiA9IGZ1bmN0aW9uKGVsbGlwc29pZCwgcG9zaXRpb25zLCBpbmRpY2VzLCB0ZXhjb29yZHMsIGdyYW51bGFyaXR5KSB7CiAgICAgICAgZ3JhbnVsYXJpdHkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChncmFudWxhcml0eSwgTWF0aF9kZWZhdWx0LlJBRElBTlNfUEVSX0RFR1JFRSk7CiAgICAgICAgY29uc3QgaGFzVGV4Y29vcmRzID0gZGVmaW5lZF9kZWZhdWx0KHRleGNvb3Jkcyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJlbGxpcHNvaWQiLCBlbGxpcHNvaWQpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgicG9zaXRpb25zIiwgcG9zaXRpb25zKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImluZGljZXMiLCBpbmRpY2VzKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiaW5kaWNlcy5sZW5ndGgiLCBpbmRpY2VzLmxlbmd0aCwgMyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmVxdWFscygiaW5kaWNlcy5sZW5ndGggJSAzIiwgIjAiLCBpbmRpY2VzLmxlbmd0aCAlIDMsIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbigiZ3JhbnVsYXJpdHkiLCBncmFudWxhcml0eSwgMCk7CiAgICAgICAgY29uc3QgdHJpYW5nbGVzID0gaW5kaWNlcy5zbGljZSgwKTsKICAgICAgICBsZXQgaTsKICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGNvbnN0IHN1YmRpdmlkZWRQb3NpdGlvbnMgPSBuZXcgQXJyYXkobGVuZ3RoICogMyk7CiAgICAgICAgY29uc3Qgc3ViZGl2aWRlZFRleGNvb3JkcyA9IG5ldyBBcnJheShsZW5ndGggKiAyKTsKICAgICAgICBsZXQgcSA9IDA7CiAgICAgICAgbGV0IHAgPSAwOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgY29uc3QgaXRlbSA9IHBvc2l0aW9uc1tpXTsKICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnNbcSsrXSA9IGl0ZW0ueDsKICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnNbcSsrXSA9IGl0ZW0ueTsKICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnNbcSsrXSA9IGl0ZW0uejsKICAgICAgICAgIGlmIChoYXNUZXhjb29yZHMpIHsKICAgICAgICAgICAgY29uc3QgdGV4Y29vcmRJdGVtID0gdGV4Y29vcmRzW2ldOwogICAgICAgICAgICBzdWJkaXZpZGVkVGV4Y29vcmRzW3ArK10gPSB0ZXhjb29yZEl0ZW0ueDsKICAgICAgICAgICAgc3ViZGl2aWRlZFRleGNvb3Jkc1twKytdID0gdGV4Y29vcmRJdGVtLnk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IHN1YmRpdmlkZWRJbmRpY2VzID0gW107CiAgICAgICAgY29uc3QgZWRnZXMgPSB7fTsKICAgICAgICBjb25zdCByYWRpdXMgPSBlbGxpcHNvaWQubWF4aW11bVJhZGl1czsKICAgICAgICBjb25zdCBtaW5EaXN0YW5jZSA9IE1hdGhfZGVmYXVsdC5jaG9yZExlbmd0aChncmFudWxhcml0eSwgcmFkaXVzKTsKICAgICAgICBjb25zdCBtaW5EaXN0YW5jZVNxcmQgPSBtaW5EaXN0YW5jZSAqIG1pbkRpc3RhbmNlOwogICAgICAgIHdoaWxlICh0cmlhbmdsZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgY29uc3QgaTIgPSB0cmlhbmdsZXMucG9wKCk7CiAgICAgICAgICBjb25zdCBpMSA9IHRyaWFuZ2xlcy5wb3AoKTsKICAgICAgICAgIGNvbnN0IGkwID0gdHJpYW5nbGVzLnBvcCgpOwogICAgICAgICAgY29uc3QgdjAyID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9ucywKICAgICAgICAgICAgaTAgKiAzLAogICAgICAgICAgICBzdWJkaXZpc2lvblYwU2NyYXRjaAogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHYxMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMsCiAgICAgICAgICAgIGkxICogMywKICAgICAgICAgICAgc3ViZGl2aXNpb25WMVNjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCB2MjIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zLAogICAgICAgICAgICBpMiAqIDMsCiAgICAgICAgICAgIHN1YmRpdmlzaW9uVjJTY3JhdGNoCiAgICAgICAgICApOwogICAgICAgICAgbGV0IHQwLCB0MSwgdDI7CiAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgIHQwID0gQ2FydGVzaWFuMl9kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgICBzdWJkaXZpZGVkVGV4Y29vcmRzLAogICAgICAgICAgICAgIGkwICogMiwKICAgICAgICAgICAgICBzdWJkaXZpc2lvblQwU2NyYXRjaAogICAgICAgICAgICApOwogICAgICAgICAgICB0MSA9IENhcnRlc2lhbjJfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgICAgc3ViZGl2aWRlZFRleGNvb3JkcywKICAgICAgICAgICAgICBpMSAqIDIsCiAgICAgICAgICAgICAgc3ViZGl2aXNpb25UMVNjcmF0Y2gKICAgICAgICAgICAgKTsKICAgICAgICAgICAgdDIgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICAgIHN1YmRpdmlkZWRUZXhjb29yZHMsCiAgICAgICAgICAgICAgaTIgKiAyLAogICAgICAgICAgICAgIHN1YmRpdmlzaW9uVDJTY3JhdGNoCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBzMCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHYwMiwgc3ViZGl2aXNpb25TMFNjcmF0Y2gpLAogICAgICAgICAgICByYWRpdXMsCiAgICAgICAgICAgIHN1YmRpdmlzaW9uUzBTY3JhdGNoCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgczEgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSh2MTIsIHN1YmRpdmlzaW9uUzFTY3JhdGNoKSwKICAgICAgICAgICAgcmFkaXVzLAogICAgICAgICAgICBzdWJkaXZpc2lvblMxU2NyYXRjaAogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHMyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUodjIyLCBzdWJkaXZpc2lvblMyU2NyYXRjaCksCiAgICAgICAgICAgIHJhZGl1cywKICAgICAgICAgICAgc3ViZGl2aXNpb25TMlNjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBnMCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGVTcXVhcmVkKAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoczAsIHMxLCBzdWJkaXZpc2lvbk1pZFNjcmF0Y2gpCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgZzEgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCgKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHMxLCBzMiwgc3ViZGl2aXNpb25NaWRTY3JhdGNoKQogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IGcyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZVNxdWFyZWQoCiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChzMiwgczAsIHN1YmRpdmlzaW9uTWlkU2NyYXRjaCkKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBtYXgzID0gTWF0aC5tYXgoZzAsIGcxLCBnMik7CiAgICAgICAgICBsZXQgZWRnZTsKICAgICAgICAgIGxldCBtaWQ7CiAgICAgICAgICBsZXQgbWlkVGV4Y29vcmQ7CiAgICAgICAgICBpZiAobWF4MyA+IG1pbkRpc3RhbmNlU3FyZCkgewogICAgICAgICAgICBpZiAoZzAgPT09IG1heDMpIHsKICAgICAgICAgICAgICBlZGdlID0gYCR7TWF0aC5taW4oaTAsIGkxKX0gJHtNYXRoLm1heChpMCwgaTEpfWA7CiAgICAgICAgICAgICAgaSA9IGVkZ2VzW2VkZ2VdOwogICAgICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGkpKSB7CiAgICAgICAgICAgICAgICBtaWQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHYwMiwgdjEyLCBzdWJkaXZpc2lvbk1pZFNjcmF0Y2gpOwogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobWlkLCAwLjUsIG1pZCk7CiAgICAgICAgICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zLnB1c2gobWlkLngsIG1pZC55LCBtaWQueik7CiAgICAgICAgICAgICAgICBpID0gc3ViZGl2aWRlZFBvc2l0aW9ucy5sZW5ndGggLyAzIC0gMTsKICAgICAgICAgICAgICAgIGVkZ2VzW2VkZ2VdID0gaTsKICAgICAgICAgICAgICAgIGlmIChoYXNUZXhjb29yZHMpIHsKICAgICAgICAgICAgICAgICAgbWlkVGV4Y29vcmQgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuYWRkKHQwLCB0MSwgc3ViZGl2aXNpb25UZXhjb29yZE1pZFNjcmF0Y2gpOwogICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihtaWRUZXhjb29yZCwgMC41LCBtaWRUZXhjb29yZCk7CiAgICAgICAgICAgICAgICAgIHN1YmRpdmlkZWRUZXhjb29yZHMucHVzaChtaWRUZXhjb29yZC54LCBtaWRUZXhjb29yZC55KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goaTAsIGksIGkyKTsKICAgICAgICAgICAgICB0cmlhbmdsZXMucHVzaChpLCBpMSwgaTIpOwogICAgICAgICAgICB9IGVsc2UgaWYgKGcxID09PSBtYXgzKSB7CiAgICAgICAgICAgICAgZWRnZSA9IGAke01hdGgubWluKGkxLCBpMil9ICR7TWF0aC5tYXgoaTEsIGkyKX1gOwogICAgICAgICAgICAgIGkgPSBlZGdlc1tlZGdlXTsKICAgICAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpKSkgewogICAgICAgICAgICAgICAgbWlkID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZCh2MTIsIHYyMiwgc3ViZGl2aXNpb25NaWRTY3JhdGNoKTsKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKG1pZCwgMC41LCBtaWQpOwogICAgICAgICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9ucy5wdXNoKG1pZC54LCBtaWQueSwgbWlkLnopOwogICAgICAgICAgICAgICAgaSA9IHN1YmRpdmlkZWRQb3NpdGlvbnMubGVuZ3RoIC8gMyAtIDE7CiAgICAgICAgICAgICAgICBlZGdlc1tlZGdlXSA9IGk7CiAgICAgICAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgICAgICAgIG1pZFRleGNvb3JkID0gQ2FydGVzaWFuMl9kZWZhdWx0LmFkZCh0MSwgdDIsIHN1YmRpdmlzaW9uVGV4Y29vcmRNaWRTY3JhdGNoKTsKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobWlkVGV4Y29vcmQsIDAuNSwgbWlkVGV4Y29vcmQpOwogICAgICAgICAgICAgICAgICBzdWJkaXZpZGVkVGV4Y29vcmRzLnB1c2gobWlkVGV4Y29vcmQueCwgbWlkVGV4Y29vcmQueSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGkxLCBpLCBpMCk7CiAgICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goaSwgaTIsIGkwKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChnMiA9PT0gbWF4MykgewogICAgICAgICAgICAgIGVkZ2UgPSBgJHtNYXRoLm1pbihpMiwgaTApfSAke01hdGgubWF4KGkyLCBpMCl9YDsKICAgICAgICAgICAgICBpID0gZWRnZXNbZWRnZV07CiAgICAgICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaSkpIHsKICAgICAgICAgICAgICAgIG1pZCA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQodjIyLCB2MDIsIHN1YmRpdmlzaW9uTWlkU2NyYXRjaCk7CiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihtaWQsIDAuNSwgbWlkKTsKICAgICAgICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMucHVzaChtaWQueCwgbWlkLnksIG1pZC56KTsKICAgICAgICAgICAgICAgIGkgPSBzdWJkaXZpZGVkUG9zaXRpb25zLmxlbmd0aCAvIDMgLSAxOwogICAgICAgICAgICAgICAgZWRnZXNbZWRnZV0gPSBpOwogICAgICAgICAgICAgICAgaWYgKGhhc1RleGNvb3JkcykgewogICAgICAgICAgICAgICAgICBtaWRUZXhjb29yZCA9IENhcnRlc2lhbjJfZGVmYXVsdC5hZGQodDIsIHQwLCBzdWJkaXZpc2lvblRleGNvb3JkTWlkU2NyYXRjaCk7CiAgICAgICAgICAgICAgICAgIENhcnRlc2lhbjJfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKG1pZFRleGNvb3JkLCAwLjUsIG1pZFRleGNvb3JkKTsKICAgICAgICAgICAgICAgICAgc3ViZGl2aWRlZFRleGNvb3Jkcy5wdXNoKG1pZFRleGNvb3JkLngsIG1pZFRleGNvb3JkLnkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB0cmlhbmdsZXMucHVzaChpMiwgaSwgaTEpOwogICAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGksIGkwLCBpMSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN1YmRpdmlkZWRJbmRpY2VzLnB1c2goaTApOwogICAgICAgICAgICBzdWJkaXZpZGVkSW5kaWNlcy5wdXNoKGkxKTsKICAgICAgICAgICAgc3ViZGl2aWRlZEluZGljZXMucHVzaChpMik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdlb21ldHJ5T3B0aW9ucyA9IHsKICAgICAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICAgICAgcG9zaXRpb246IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgICB2YWx1ZXM6IHN1YmRpdmlkZWRQb3NpdGlvbnMKICAgICAgICAgICAgfSkKICAgICAgICAgIH0sCiAgICAgICAgICBpbmRpY2VzOiBzdWJkaXZpZGVkSW5kaWNlcywKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5UUklBTkdMRVMKICAgICAgICB9OwogICAgICAgIGlmIChoYXNUZXhjb29yZHMpIHsKICAgICAgICAgIGdlb21ldHJ5T3B0aW9ucy5hdHRyaWJ1dGVzLnN0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMiwKICAgICAgICAgICAgdmFsdWVzOiBzdWJkaXZpZGVkVGV4Y29vcmRzCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KGdlb21ldHJ5T3B0aW9ucyk7CiAgICAgIH07CiAgICAgIHN1YmRpdmlzaW9uQzBTY3JhdGNoID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHN1YmRpdmlzaW9uQzFTY3JhdGNoID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHN1YmRpdmlzaW9uQzJTY3JhdGNoID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHN1YmRpdmlzaW9uQ2FydG9ncmFwaGljU2NyYXRjaCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBQb2x5Z29uUGlwZWxpbmUuY29tcHV0ZVJodW1iTGluZVN1YmRpdmlzaW9uID0gZnVuY3Rpb24oZWxsaXBzb2lkLCBwb3NpdGlvbnMsIGluZGljZXMsIHRleGNvb3JkcywgZ3JhbnVsYXJpdHkpIHsKICAgICAgICBncmFudWxhcml0eSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGdyYW51bGFyaXR5LCBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFKTsKICAgICAgICBjb25zdCBoYXNUZXhjb29yZHMgPSBkZWZpbmVkX2RlZmF1bHQodGV4Y29vcmRzKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImVsbGlwc29pZCIsIGVsbGlwc29pZCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJwb3NpdGlvbnMiLCBwb3NpdGlvbnMpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiaW5kaWNlcyIsIGluZGljZXMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJpbmRpY2VzLmxlbmd0aCIsIGluZGljZXMubGVuZ3RoLCAzKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZXF1YWxzKCJpbmRpY2VzLmxlbmd0aCAlIDMiLCAiMCIsIGluZGljZXMubGVuZ3RoICUgMywgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuKCJncmFudWxhcml0eSIsIGdyYW51bGFyaXR5LCAwKTsKICAgICAgICBjb25zdCB0cmlhbmdsZXMgPSBpbmRpY2VzLnNsaWNlKDApOwogICAgICAgIGxldCBpOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgY29uc3Qgc3ViZGl2aWRlZFBvc2l0aW9ucyA9IG5ldyBBcnJheShsZW5ndGggKiAzKTsKICAgICAgICBjb25zdCBzdWJkaXZpZGVkVGV4Y29vcmRzID0gbmV3IEFycmF5KGxlbmd0aCAqIDIpOwogICAgICAgIGxldCBxID0gMDsKICAgICAgICBsZXQgcCA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBjb25zdCBpdGVtID0gcG9zaXRpb25zW2ldOwogICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1txKytdID0gaXRlbS54OwogICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1txKytdID0gaXRlbS55OwogICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1txKytdID0gaXRlbS56OwogICAgICAgICAgaWYgKGhhc1RleGNvb3JkcykgewogICAgICAgICAgICBjb25zdCB0ZXhjb29yZEl0ZW0gPSB0ZXhjb29yZHNbaV07CiAgICAgICAgICAgIHN1YmRpdmlkZWRUZXhjb29yZHNbcCsrXSA9IHRleGNvb3JkSXRlbS54OwogICAgICAgICAgICBzdWJkaXZpZGVkVGV4Y29vcmRzW3ArK10gPSB0ZXhjb29yZEl0ZW0ueTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3Qgc3ViZGl2aWRlZEluZGljZXMgPSBbXTsKICAgICAgICBjb25zdCBlZGdlcyA9IHt9OwogICAgICAgIGNvbnN0IHJhZGl1cyA9IGVsbGlwc29pZC5tYXhpbXVtUmFkaXVzOwogICAgICAgIGNvbnN0IG1pbkRpc3RhbmNlID0gTWF0aF9kZWZhdWx0LmNob3JkTGVuZ3RoKGdyYW51bGFyaXR5LCByYWRpdXMpOwogICAgICAgIGNvbnN0IHJodW1iMCA9IG5ldyBFbGxpcHNvaWRSaHVtYkxpbmVfZGVmYXVsdCh2b2lkIDAsIHZvaWQgMCwgZWxsaXBzb2lkKTsKICAgICAgICBjb25zdCByaHVtYjEgPSBuZXcgRWxsaXBzb2lkUmh1bWJMaW5lX2RlZmF1bHQodm9pZCAwLCB2b2lkIDAsIGVsbGlwc29pZCk7CiAgICAgICAgY29uc3Qgcmh1bWIyID0gbmV3IEVsbGlwc29pZFJodW1iTGluZV9kZWZhdWx0KHZvaWQgMCwgdm9pZCAwLCBlbGxpcHNvaWQpOwogICAgICAgIHdoaWxlICh0cmlhbmdsZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgY29uc3QgaTIgPSB0cmlhbmdsZXMucG9wKCk7CiAgICAgICAgICBjb25zdCBpMSA9IHRyaWFuZ2xlcy5wb3AoKTsKICAgICAgICAgIGNvbnN0IGkwID0gdHJpYW5nbGVzLnBvcCgpOwogICAgICAgICAgY29uc3QgdjAyID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9ucywKICAgICAgICAgICAgaTAgKiAzLAogICAgICAgICAgICBzdWJkaXZpc2lvblYwU2NyYXRjaAogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHYxMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMsCiAgICAgICAgICAgIGkxICogMywKICAgICAgICAgICAgc3ViZGl2aXNpb25WMVNjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCB2MjIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zLAogICAgICAgICAgICBpMiAqIDMsCiAgICAgICAgICAgIHN1YmRpdmlzaW9uVjJTY3JhdGNoCiAgICAgICAgICApOwogICAgICAgICAgbGV0IHQwLCB0MSwgdDI7CiAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgIHQwID0gQ2FydGVzaWFuMl9kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgICBzdWJkaXZpZGVkVGV4Y29vcmRzLAogICAgICAgICAgICAgIGkwICogMiwKICAgICAgICAgICAgICBzdWJkaXZpc2lvblQwU2NyYXRjaAogICAgICAgICAgICApOwogICAgICAgICAgICB0MSA9IENhcnRlc2lhbjJfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgICAgc3ViZGl2aWRlZFRleGNvb3JkcywKICAgICAgICAgICAgICBpMSAqIDIsCiAgICAgICAgICAgICAgc3ViZGl2aXNpb25UMVNjcmF0Y2gKICAgICAgICAgICAgKTsKICAgICAgICAgICAgdDIgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICAgIHN1YmRpdmlkZWRUZXhjb29yZHMsCiAgICAgICAgICAgICAgaTIgKiAyLAogICAgICAgICAgICAgIHN1YmRpdmlzaW9uVDJTY3JhdGNoCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBjMCA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyh2MDIsIHN1YmRpdmlzaW9uQzBTY3JhdGNoKTsKICAgICAgICAgIGNvbnN0IGMxID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKHYxMiwgc3ViZGl2aXNpb25DMVNjcmF0Y2gpOwogICAgICAgICAgY29uc3QgYzIgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWModjIyLCBzdWJkaXZpc2lvbkMyU2NyYXRjaCk7CiAgICAgICAgICByaHVtYjAuc2V0RW5kUG9pbnRzKGMwLCBjMSk7CiAgICAgICAgICBjb25zdCBnMCA9IHJodW1iMC5zdXJmYWNlRGlzdGFuY2U7CiAgICAgICAgICByaHVtYjEuc2V0RW5kUG9pbnRzKGMxLCBjMik7CiAgICAgICAgICBjb25zdCBnMSA9IHJodW1iMS5zdXJmYWNlRGlzdGFuY2U7CiAgICAgICAgICByaHVtYjIuc2V0RW5kUG9pbnRzKGMyLCBjMCk7CiAgICAgICAgICBjb25zdCBnMiA9IHJodW1iMi5zdXJmYWNlRGlzdGFuY2U7CiAgICAgICAgICBjb25zdCBtYXgzID0gTWF0aC5tYXgoZzAsIGcxLCBnMik7CiAgICAgICAgICBsZXQgZWRnZTsKICAgICAgICAgIGxldCBtaWQ7CiAgICAgICAgICBsZXQgbWlkSGVpZ2h0OwogICAgICAgICAgbGV0IG1pZENhcnRlc2lhbjM7CiAgICAgICAgICBsZXQgbWlkVGV4Y29vcmQ7CiAgICAgICAgICBpZiAobWF4MyA+IG1pbkRpc3RhbmNlKSB7CiAgICAgICAgICAgIGlmIChnMCA9PT0gbWF4MykgewogICAgICAgICAgICAgIGVkZ2UgPSBgJHtNYXRoLm1pbihpMCwgaTEpfSAke01hdGgubWF4KGkwLCBpMSl9YDsKICAgICAgICAgICAgICBpID0gZWRnZXNbZWRnZV07CiAgICAgICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaSkpIHsKICAgICAgICAgICAgICAgIG1pZCA9IHJodW1iMC5pbnRlcnBvbGF0ZVVzaW5nRnJhY3Rpb24oCiAgICAgICAgICAgICAgICAgIDAuNSwKICAgICAgICAgICAgICAgICAgc3ViZGl2aXNpb25DYXJ0b2dyYXBoaWNTY3JhdGNoCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgbWlkSGVpZ2h0ID0gKGMwLmhlaWdodCArIGMxLmhlaWdodCkgKiAwLjU7CiAgICAgICAgICAgICAgICBtaWRDYXJ0ZXNpYW4zID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21SYWRpYW5zKAogICAgICAgICAgICAgICAgICBtaWQubG9uZ2l0dWRlLAogICAgICAgICAgICAgICAgICBtaWQubGF0aXR1ZGUsCiAgICAgICAgICAgICAgICAgIG1pZEhlaWdodCwKICAgICAgICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICAgICAgICBzdWJkaXZpc2lvbk1pZFNjcmF0Y2gKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zLnB1c2goCiAgICAgICAgICAgICAgICAgIG1pZENhcnRlc2lhbjMueCwKICAgICAgICAgICAgICAgICAgbWlkQ2FydGVzaWFuMy55LAogICAgICAgICAgICAgICAgICBtaWRDYXJ0ZXNpYW4zLnoKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBpID0gc3ViZGl2aWRlZFBvc2l0aW9ucy5sZW5ndGggLyAzIC0gMTsKICAgICAgICAgICAgICAgIGVkZ2VzW2VkZ2VdID0gaTsKICAgICAgICAgICAgICAgIGlmIChoYXNUZXhjb29yZHMpIHsKICAgICAgICAgICAgICAgICAgbWlkVGV4Y29vcmQgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuYWRkKHQwLCB0MSwgc3ViZGl2aXNpb25UZXhjb29yZE1pZFNjcmF0Y2gpOwogICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihtaWRUZXhjb29yZCwgMC41LCBtaWRUZXhjb29yZCk7CiAgICAgICAgICAgICAgICAgIHN1YmRpdmlkZWRUZXhjb29yZHMucHVzaChtaWRUZXhjb29yZC54LCBtaWRUZXhjb29yZC55KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goaTAsIGksIGkyKTsKICAgICAgICAgICAgICB0cmlhbmdsZXMucHVzaChpLCBpMSwgaTIpOwogICAgICAgICAgICB9IGVsc2UgaWYgKGcxID09PSBtYXgzKSB7CiAgICAgICAgICAgICAgZWRnZSA9IGAke01hdGgubWluKGkxLCBpMil9ICR7TWF0aC5tYXgoaTEsIGkyKX1gOwogICAgICAgICAgICAgIGkgPSBlZGdlc1tlZGdlXTsKICAgICAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpKSkgewogICAgICAgICAgICAgICAgbWlkID0gcmh1bWIxLmludGVycG9sYXRlVXNpbmdGcmFjdGlvbigKICAgICAgICAgICAgICAgICAgMC41LAogICAgICAgICAgICAgICAgICBzdWJkaXZpc2lvbkNhcnRvZ3JhcGhpY1NjcmF0Y2gKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBtaWRIZWlnaHQgPSAoYzEuaGVpZ2h0ICsgYzIuaGVpZ2h0KSAqIDAuNTsKICAgICAgICAgICAgICAgIG1pZENhcnRlc2lhbjMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbVJhZGlhbnMoCiAgICAgICAgICAgICAgICAgIG1pZC5sb25naXR1ZGUsCiAgICAgICAgICAgICAgICAgIG1pZC5sYXRpdHVkZSwKICAgICAgICAgICAgICAgICAgbWlkSGVpZ2h0LAogICAgICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgICAgIHN1YmRpdmlzaW9uTWlkU2NyYXRjaAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMucHVzaCgKICAgICAgICAgICAgICAgICAgbWlkQ2FydGVzaWFuMy54LAogICAgICAgICAgICAgICAgICBtaWRDYXJ0ZXNpYW4zLnksCiAgICAgICAgICAgICAgICAgIG1pZENhcnRlc2lhbjMuegogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIGkgPSBzdWJkaXZpZGVkUG9zaXRpb25zLmxlbmd0aCAvIDMgLSAxOwogICAgICAgICAgICAgICAgZWRnZXNbZWRnZV0gPSBpOwogICAgICAgICAgICAgICAgaWYgKGhhc1RleGNvb3JkcykgewogICAgICAgICAgICAgICAgICBtaWRUZXhjb29yZCA9IENhcnRlc2lhbjJfZGVmYXVsdC5hZGQodDEsIHQyLCBzdWJkaXZpc2lvblRleGNvb3JkTWlkU2NyYXRjaCk7CiAgICAgICAgICAgICAgICAgIENhcnRlc2lhbjJfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKG1pZFRleGNvb3JkLCAwLjUsIG1pZFRleGNvb3JkKTsKICAgICAgICAgICAgICAgICAgc3ViZGl2aWRlZFRleGNvb3Jkcy5wdXNoKG1pZFRleGNvb3JkLngsIG1pZFRleGNvb3JkLnkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB0cmlhbmdsZXMucHVzaChpMSwgaSwgaTApOwogICAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGksIGkyLCBpMCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoZzIgPT09IG1heDMpIHsKICAgICAgICAgICAgICBlZGdlID0gYCR7TWF0aC5taW4oaTIsIGkwKX0gJHtNYXRoLm1heChpMiwgaTApfWA7CiAgICAgICAgICAgICAgaSA9IGVkZ2VzW2VkZ2VdOwogICAgICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGkpKSB7CiAgICAgICAgICAgICAgICBtaWQgPSByaHVtYjIuaW50ZXJwb2xhdGVVc2luZ0ZyYWN0aW9uKAogICAgICAgICAgICAgICAgICAwLjUsCiAgICAgICAgICAgICAgICAgIHN1YmRpdmlzaW9uQ2FydG9ncmFwaGljU2NyYXRjaAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIG1pZEhlaWdodCA9IChjMi5oZWlnaHQgKyBjMC5oZWlnaHQpICogMC41OwogICAgICAgICAgICAgICAgbWlkQ2FydGVzaWFuMyA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tUmFkaWFucygKICAgICAgICAgICAgICAgICAgbWlkLmxvbmdpdHVkZSwKICAgICAgICAgICAgICAgICAgbWlkLmxhdGl0dWRlLAogICAgICAgICAgICAgICAgICBtaWRIZWlnaHQsCiAgICAgICAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgICAgICAgc3ViZGl2aXNpb25NaWRTY3JhdGNoCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9ucy5wdXNoKAogICAgICAgICAgICAgICAgICBtaWRDYXJ0ZXNpYW4zLngsCiAgICAgICAgICAgICAgICAgIG1pZENhcnRlc2lhbjMueSwKICAgICAgICAgICAgICAgICAgbWlkQ2FydGVzaWFuMy56CiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgaSA9IHN1YmRpdmlkZWRQb3NpdGlvbnMubGVuZ3RoIC8gMyAtIDE7CiAgICAgICAgICAgICAgICBlZGdlc1tlZGdlXSA9IGk7CiAgICAgICAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgICAgICAgIG1pZFRleGNvb3JkID0gQ2FydGVzaWFuMl9kZWZhdWx0LmFkZCh0MiwgdDAsIHN1YmRpdmlzaW9uVGV4Y29vcmRNaWRTY3JhdGNoKTsKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobWlkVGV4Y29vcmQsIDAuNSwgbWlkVGV4Y29vcmQpOwogICAgICAgICAgICAgICAgICBzdWJkaXZpZGVkVGV4Y29vcmRzLnB1c2gobWlkVGV4Y29vcmQueCwgbWlkVGV4Y29vcmQueSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGkyLCBpLCBpMSk7CiAgICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goaSwgaTAsIGkxKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3ViZGl2aWRlZEluZGljZXMucHVzaChpMCk7CiAgICAgICAgICAgIHN1YmRpdmlkZWRJbmRpY2VzLnB1c2goaTEpOwogICAgICAgICAgICBzdWJkaXZpZGVkSW5kaWNlcy5wdXNoKGkyKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgZ2VvbWV0cnlPcHRpb25zID0gewogICAgICAgICAgYXR0cmlidXRlczogewogICAgICAgICAgICBwb3NpdGlvbjogbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICAgIHZhbHVlczogc3ViZGl2aWRlZFBvc2l0aW9ucwogICAgICAgICAgICB9KQogICAgICAgICAgfSwKICAgICAgICAgIGluZGljZXM6IHN1YmRpdmlkZWRJbmRpY2VzLAogICAgICAgICAgcHJpbWl0aXZlVHlwZTogUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlRSSUFOR0xFUwogICAgICAgIH07CiAgICAgICAgaWYgKGhhc1RleGNvb3JkcykgewogICAgICAgICAgZ2VvbWV0cnlPcHRpb25zLmF0dHJpYnV0ZXMuc3QgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgICAgICB2YWx1ZXM6IHN1YmRpdmlkZWRUZXhjb29yZHMKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoZ2VvbWV0cnlPcHRpb25zKTsKICAgICAgfTsKICAgICAgUG9seWdvblBpcGVsaW5lLnNjYWxlVG9HZW9kZXRpY0hlaWdodCA9IGZ1bmN0aW9uKHBvc2l0aW9ucywgaGVpZ2h0LCBlbGxpcHNvaWQsIHNjYWxlVG9TdXJmYWNlNCkgewogICAgICAgIGVsbGlwc29pZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuV0dTODQpOwogICAgICAgIGxldCBuID0gc2NhbGVUb0dlb2RldGljSGVpZ2h0TjsKICAgICAgICBsZXQgcCA9IHNjYWxlVG9HZW9kZXRpY0hlaWdodFA7CiAgICAgICAgaGVpZ2h0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoaGVpZ2h0LCAwKTsKICAgICAgICBzY2FsZVRvU3VyZmFjZTQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzY2FsZVRvU3VyZmFjZTQsIHRydWUpOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zKSkgewogICAgICAgICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDMpIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGksIHApOwogICAgICAgICAgICBpZiAoc2NhbGVUb1N1cmZhY2U0KSB7CiAgICAgICAgICAgICAgcCA9IGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKHAsIHApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChoZWlnaHQgIT09IDApIHsKICAgICAgICAgICAgICBuID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwLCBuKTsKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihuLCBoZWlnaHQsIG4pOwogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocCwgbiwgcCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcG9zaXRpb25zW2ldID0gcC54OwogICAgICAgICAgICBwb3NpdGlvbnNbaSArIDFdID0gcC55OwogICAgICAgICAgICBwb3NpdGlvbnNbaSArIDJdID0gcC56OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcG9zaXRpb25zOwogICAgICB9OwogICAgICBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdCA9IFBvbHlnb25QaXBlbGluZTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1F1ZXVlLmpzCiAgZnVuY3Rpb24gUXVldWUoKSB7CiAgICB0aGlzLl9hcnJheSA9IFtdOwogICAgdGhpcy5fb2Zmc2V0ID0gMDsKICAgIHRoaXMuX2xlbmd0aCA9IDA7CiAgfQogIHZhciBRdWV1ZV9kZWZhdWx0OwogIHZhciBpbml0X1F1ZXVlID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9RdWV1ZS5qcyIoKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFF1ZXVlLnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBsZW5ndGggb2YgdGhlIHF1ZXVlLgogICAgICAgICAqCiAgICAgICAgICogQG1lbWJlcm9mIFF1ZXVlLnByb3RvdHlwZQogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBsZW5ndGg6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sZW5ndGg7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgUXVldWUucHJvdG90eXBlLmVucXVldWUgPSBmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgdGhpcy5fYXJyYXkucHVzaChpdGVtKTsKICAgICAgICB0aGlzLl9sZW5ndGgrKzsKICAgICAgfTsKICAgICAgUXVldWUucHJvdG90eXBlLmRlcXVldWUgPSBmdW5jdGlvbigpIHsKICAgICAgICBpZiAodGhpcy5fbGVuZ3RoID09PSAwKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBjb25zdCBhcnJheSA9IHRoaXMuX2FycmF5OwogICAgICAgIGxldCBvZmZzZXQgPSB0aGlzLl9vZmZzZXQ7CiAgICAgICAgY29uc3QgaXRlbSA9IGFycmF5W29mZnNldF07CiAgICAgICAgYXJyYXlbb2Zmc2V0XSA9IHZvaWQgMDsKICAgICAgICBvZmZzZXQrKzsKICAgICAgICBpZiAob2Zmc2V0ID4gMTAgJiYgb2Zmc2V0ICogMiA+IGFycmF5Lmxlbmd0aCkgewogICAgICAgICAgdGhpcy5fYXJyYXkgPSBhcnJheS5zbGljZShvZmZzZXQpOwogICAgICAgICAgb2Zmc2V0ID0gMDsKICAgICAgICB9CiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gb2Zmc2V0OwogICAgICAgIHRoaXMuX2xlbmd0aC0tOwogICAgICAgIHJldHVybiBpdGVtOwogICAgICB9OwogICAgICBRdWV1ZS5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICh0aGlzLl9sZW5ndGggPT09IDApIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzLl9hcnJheVt0aGlzLl9vZmZzZXRdOwogICAgICB9OwogICAgICBRdWV1ZS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX2FycmF5LmluZGV4T2YoaXRlbSkgIT09IC0xOwogICAgICB9OwogICAgICBRdWV1ZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHsKICAgICAgICB0aGlzLl9hcnJheS5sZW5ndGggPSB0aGlzLl9vZmZzZXQgPSB0aGlzLl9sZW5ndGggPSAwOwogICAgICB9OwogICAgICBRdWV1ZS5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uKGNvbXBhcmVGdW5jdGlvbikgewogICAgICAgIGlmICh0aGlzLl9vZmZzZXQgPiAwKSB7CiAgICAgICAgICB0aGlzLl9hcnJheSA9IHRoaXMuX2FycmF5LnNsaWNlKHRoaXMuX29mZnNldCk7CiAgICAgICAgICB0aGlzLl9vZmZzZXQgPSAwOwogICAgICAgIH0KICAgICAgICB0aGlzLl9hcnJheS5zb3J0KGNvbXBhcmVGdW5jdGlvbik7CiAgICAgIH07CiAgICAgIFF1ZXVlX2RlZmF1bHQgPSBRdWV1ZTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BvbHlnb25HZW9tZXRyeUxpYnJhcnkuanMKICBmdW5jdGlvbiBnZXRQb2ludEF0RGlzdGFuY2UyRChwMCwgcDEsIGRpc3RhbmNlLCBsZW5ndGgpIHsKICAgIENhcnRlc2lhbjJfZGVmYXVsdC5zdWJ0cmFjdChwMSwgcDAsIGRpc3RhbmNlMkRTY3JhdGNoKTsKICAgIENhcnRlc2lhbjJfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICBkaXN0YW5jZTJEU2NyYXRjaCwKICAgICAgZGlzdGFuY2UgLyBsZW5ndGgsCiAgICAgIGRpc3RhbmNlMkRTY3JhdGNoCiAgICApOwogICAgQ2FydGVzaWFuMl9kZWZhdWx0LmFkZChwMCwgZGlzdGFuY2UyRFNjcmF0Y2gsIGRpc3RhbmNlMkRTY3JhdGNoKTsKICAgIHJldHVybiBbZGlzdGFuY2UyRFNjcmF0Y2gueCwgZGlzdGFuY2UyRFNjcmF0Y2gueV07CiAgfQogIGZ1bmN0aW9uIGdldFBvaW50QXREaXN0YW5jZShwMCwgcDEsIGRpc3RhbmNlLCBsZW5ndGgpIHsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChwMSwgcDAsIGRpc3RhbmNlU2NyYXRjaDQpOwogICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgIGRpc3RhbmNlU2NyYXRjaDQsCiAgICAgIGRpc3RhbmNlIC8gbGVuZ3RoLAogICAgICBkaXN0YW5jZVNjcmF0Y2g0CiAgICApOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChwMCwgZGlzdGFuY2VTY3JhdGNoNCwgZGlzdGFuY2VTY3JhdGNoNCk7CiAgICByZXR1cm4gW2Rpc3RhbmNlU2NyYXRjaDQueCwgZGlzdGFuY2VTY3JhdGNoNC55LCBkaXN0YW5jZVNjcmF0Y2g0LnpdOwogIH0KICBmdW5jdGlvbiBjb21wdXRlRXF1YXRvckludGVyc2VjdGlvblJodW1iKHN0YXJ0LCBlbmQsIGVsbGlwc29pZCkgewogICAgY29uc3QgYzAgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoc3RhcnQsIHNjcmF0Y2hDYXJ0b2dyYXBoaWMwKTsKICAgIGNvbnN0IGMxID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKGVuZCwgc2NyYXRjaENhcnRvZ3JhcGhpYzEpOwogICAgaWYgKE1hdGguc2lnbihjMC5sYXRpdHVkZSkgPT09IE1hdGguc2lnbihjMS5sYXRpdHVkZSkpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgc2NyYXRjaFJodW1iTGluZS5zZXRFbmRQb2ludHMoYzAsIGMxKTsKICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IHNjcmF0Y2hSaHVtYkxpbmUuZmluZEludGVyc2VjdGlvbldpdGhMYXRpdHVkZSgKICAgICAgMCwKICAgICAgc2NyYXRjaFJodW1iSW50ZXJzZWN0aW9uCiAgICApOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaW50ZXJzZWN0aW9uKSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBsZXQgbWluTG9uZ2l0dWRlID0gTWF0aC5taW4oYzAubG9uZ2l0dWRlLCBjMS5sb25naXR1ZGUpOwogICAgbGV0IG1heExvbmdpdHVkZSA9IE1hdGgubWF4KGMwLmxvbmdpdHVkZSwgYzEubG9uZ2l0dWRlKTsKICAgIGlmIChNYXRoLmFicyhtYXhMb25naXR1ZGUgLSBtaW5Mb25naXR1ZGUpID4gTWF0aF9kZWZhdWx0LlBJKSB7CiAgICAgIGNvbnN0IHN3YXAyID0gbWluTG9uZ2l0dWRlOwogICAgICBtaW5Mb25naXR1ZGUgPSBtYXhMb25naXR1ZGU7CiAgICAgIG1heExvbmdpdHVkZSA9IHN3YXAyOwogICAgfQogICAgaWYgKGludGVyc2VjdGlvbi5sb25naXR1ZGUgPCBtaW5Mb25naXR1ZGUgfHwgaW50ZXJzZWN0aW9uLmxvbmdpdHVkZSA+IG1heExvbmdpdHVkZSkgewogICAgICByZXR1cm47CiAgICB9CiAgICByZXR1cm4gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGludGVyc2VjdGlvbik7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVFcXVhdG9ySW50ZXJzZWN0aW9uKHN0YXJ0LCBlbmQsIGVsbGlwc29pZCwgYXJjVHlwZSkgewogICAgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5SSFVNQikgewogICAgICByZXR1cm4gY29tcHV0ZUVxdWF0b3JJbnRlcnNlY3Rpb25SaHVtYihzdGFydCwgZW5kLCBlbGxpcHNvaWQpOwogICAgfQogICAgY29uc3QgaW50ZXJzZWN0aW9uID0gSW50ZXJzZWN0aW9uVGVzdHNfZGVmYXVsdC5saW5lU2VnbWVudFBsYW5lKAogICAgICBzdGFydCwKICAgICAgZW5kLAogICAgICBQbGFuZV9kZWZhdWx0Lk9SSUdJTl9YWV9QTEFORQogICAgKTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGludGVyc2VjdGlvbikpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgcmV0dXJuIGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKGludGVyc2VjdGlvbiwgaW50ZXJzZWN0aW9uKTsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZUVkZ2VzT25QbGFuZShwb3NpdGlvbnMsIGVsbGlwc29pZCwgYXJjVHlwZSkgewogICAgY29uc3QgZWRnZXNPblBsYW5lID0gW107CiAgICBsZXQgc3RhcnRQb2ludCwgZW5kUG9pbnQsIHR5cGUsIG5leHQsIGludGVyc2VjdGlvbiwgaSA9IDA7CiAgICB3aGlsZSAoaSA8IHBvc2l0aW9ucy5sZW5ndGgpIHsKICAgICAgc3RhcnRQb2ludCA9IHBvc2l0aW9uc1tpXTsKICAgICAgZW5kUG9pbnQgPSBwb3NpdGlvbnNbKGkgKyAxKSAlIHBvc2l0aW9ucy5sZW5ndGhdOwogICAgICB0eXBlID0gTWF0aF9kZWZhdWx0LnNpZ24oc3RhcnRQb2ludC56KTsKICAgICAgbmV4dCA9IE1hdGhfZGVmYXVsdC5zaWduKGVuZFBvaW50LnopOwogICAgICBjb25zdCBnZXRMb25naXR1ZGUgPSAocG9zaXRpb24pID0+IHsKICAgICAgICBjb25zdCBjYXJ0b2dyYXBoaWMyID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKAogICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljMwogICAgICAgICk7CiAgICAgICAgcmV0dXJuIGNhcnRvZ3JhcGhpYzIubG9uZ2l0dWRlOwogICAgICB9OwogICAgICBpZiAodHlwZSA9PT0gMCkgewogICAgICAgIGVkZ2VzT25QbGFuZS5wdXNoKHsKICAgICAgICAgIHBvc2l0aW9uOiBpLAogICAgICAgICAgdHlwZSwKICAgICAgICAgIHZpc2l0ZWQ6IGZhbHNlLAogICAgICAgICAgbmV4dCwKICAgICAgICAgIHRoZXRhOiBnZXRMb25naXR1ZGUoc3RhcnRQb2ludCkKICAgICAgICB9KTsKICAgICAgfSBlbHNlIGlmIChuZXh0ICE9PSAwKSB7CiAgICAgICAgaW50ZXJzZWN0aW9uID0gY29tcHV0ZUVxdWF0b3JJbnRlcnNlY3Rpb24oCiAgICAgICAgICBzdGFydFBvaW50LAogICAgICAgICAgZW5kUG9pbnQsCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBhcmNUeXBlCiAgICAgICAgKTsKICAgICAgICArK2k7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaW50ZXJzZWN0aW9uKSkgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIHBvc2l0aW9ucy5zcGxpY2UoaSwgMCwgaW50ZXJzZWN0aW9uKTsKICAgICAgICBlZGdlc09uUGxhbmUucHVzaCh7CiAgICAgICAgICBwb3NpdGlvbjogaSwKICAgICAgICAgIHR5cGUsCiAgICAgICAgICB2aXNpdGVkOiBmYWxzZSwKICAgICAgICAgIG5leHQsCiAgICAgICAgICB0aGV0YTogZ2V0TG9uZ2l0dWRlKGludGVyc2VjdGlvbikKICAgICAgICB9KTsKICAgICAgfQogICAgICArK2k7CiAgICB9CiAgICByZXR1cm4gZWRnZXNPblBsYW5lOwogIH0KICBmdW5jdGlvbiB3aXJlUG9seWdvbihwb2x5Z29ucywgcG9seWdvbkluZGV4LCBwb3NpdGlvbnMsIGVkZ2VzT25QbGFuZSwgdG9EZWxldGUsIHN0YXJ0SW5kZXgsIGFib3ZlUGxhbmUpIHsKICAgIGNvbnN0IHBvbHlnb24yID0gW107CiAgICBsZXQgaSA9IHN0YXJ0SW5kZXg7CiAgICBjb25zdCBnZXRNYXRjaGluZ0VkZ2UgPSAoaTIpID0+IChlZGdlKSA9PiBlZGdlLnBvc2l0aW9uID09PSBpMjsKICAgIGNvbnN0IHBvbHlnb25zVG9XaXJlID0gW107CiAgICBkbyB7CiAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25zW2ldOwogICAgICBwb2x5Z29uMi5wdXNoKHBvc2l0aW9uKTsKICAgICAgY29uc3QgZWRnZUluZGV4ID0gZWRnZXNPblBsYW5lLmZpbmRJbmRleChnZXRNYXRjaGluZ0VkZ2UoaSkpOwogICAgICBjb25zdCBlZGdlID0gZWRnZXNPblBsYW5lW2VkZ2VJbmRleF07CiAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGVkZ2UpKSB7CiAgICAgICAgKytpOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbnN0IHsgdmlzaXRlZDogaGFzQmVlblZpc2l0ZWQsIHR5cGUsIG5leHQgfSA9IGVkZ2U7CiAgICAgIGVkZ2UudmlzaXRlZCA9IHRydWU7CiAgICAgIGlmICh0eXBlID09PSAwKSB7CiAgICAgICAgaWYgKG5leHQgPT09IDApIHsKICAgICAgICAgIGNvbnN0IHByZXZpb3VzRWRnZSA9IGVkZ2VzT25QbGFuZVtlZGdlSW5kZXggLSAoYWJvdmVQbGFuZSA/IDEgOiAtMSldOwogICAgICAgICAgaWYgKHByZXZpb3VzRWRnZT8ucG9zaXRpb24gPT09IGkgKyAxKSB7CiAgICAgICAgICAgIHByZXZpb3VzRWRnZS52aXNpdGVkID0gdHJ1ZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICsraTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICghaGFzQmVlblZpc2l0ZWQgJiYgYWJvdmVQbGFuZSAmJiBuZXh0ID4gMCB8fCBzdGFydEluZGV4ID09PSBpICYmICFhYm92ZVBsYW5lICYmIG5leHQgPCAwKSB7CiAgICAgICAgICArK2k7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgY29uc3QgZm9sbG93RWRnZSA9IGFib3ZlUGxhbmUgPyB0eXBlID49IDAgOiB0eXBlIDw9IDA7CiAgICAgIGlmICghZm9sbG93RWRnZSkgewogICAgICAgICsraTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAoIWhhc0JlZW5WaXNpdGVkKSB7CiAgICAgICAgcG9seWdvbnNUb1dpcmUucHVzaChpKTsKICAgICAgfQogICAgICBjb25zdCBuZXh0RWRnZUluZGV4ID0gZWRnZUluZGV4ICsgKGFib3ZlUGxhbmUgPyAxIDogLTEpOwogICAgICBjb25zdCBuZXh0RWRnZSA9IGVkZ2VzT25QbGFuZVtuZXh0RWRnZUluZGV4XTsKICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQobmV4dEVkZ2UpKSB7CiAgICAgICAgKytpOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGkgPSBuZXh0RWRnZS5wb3NpdGlvbjsKICAgIH0gd2hpbGUgKGkgPCBwb3NpdGlvbnMubGVuZ3RoICYmIGkgPj0gMCAmJiBpICE9PSBzdGFydEluZGV4ICYmIHBvbHlnb24yLmxlbmd0aCA8IHBvc2l0aW9ucy5sZW5ndGgpOwogICAgcG9seWdvbnMuc3BsaWNlKHBvbHlnb25JbmRleCwgdG9EZWxldGUsIHBvbHlnb24yKTsKICAgIGZvciAoY29uc3QgaW5kZXggb2YgcG9seWdvbnNUb1dpcmUpIHsKICAgICAgcG9seWdvbkluZGV4ID0gd2lyZVBvbHlnb24oCiAgICAgICAgcG9seWdvbnMsCiAgICAgICAgKytwb2x5Z29uSW5kZXgsCiAgICAgICAgcG9zaXRpb25zLAogICAgICAgIGVkZ2VzT25QbGFuZSwKICAgICAgICAwLAogICAgICAgIGluZGV4LAogICAgICAgICFhYm92ZVBsYW5lCiAgICAgICk7CiAgICB9CiAgICByZXR1cm4gcG9seWdvbkluZGV4OwogIH0KICB2YXIgUG9seWdvbkdlb21ldHJ5TGlicmFyeSwgZGlzdGFuY2UyRFNjcmF0Y2gsIGRpc3RhbmNlU2NyYXRjaDQsIHNjcmF0Y2hDYXJ0b2dyYXBoaWMwLCBzY3JhdGNoQ2FydG9ncmFwaGljMSwgc2NyYXRjaENhcnRvZ3JhcGhpYzIyLCBzY3JhdGNoQ2FydGVzaWFuMCwgc2NyYXRjaFJodW1iTGluZSwgc2NhbGVUb0dlb2RldGljSGVpZ2h0TjEsIHNjYWxlVG9HZW9kZXRpY0hlaWdodE4yLCBzY2FsZVRvR2VvZGV0aWNIZWlnaHRQMSwgc2NhbGVUb0dlb2RldGljSGVpZ2h0UDIsIHNjcmF0Y2hSaHVtYkludGVyc2VjdGlvbiwgc2NyYXRjaENhcnRvZ3JhcGhpYzMsIGNvbXB1dGVCb3VuZGluZ1JlY3RhbmdsZUNhcnRlc2lhbjIsIGNvbXB1dGVCb3VuZGluZ1JlY3RhbmdsZUNhcnRlc2lhbjMsIGNvbXB1dGVCb3VuZGluZ1JlY3RhbmdsZVF1YXRlcm5pb24sIGNvbXB1dGVCb3VuZGluZ1JlY3RhbmdsZU1hdHJpeDMsIGNvbXB1dGVXYWxsVGV4Y29vcmRzU3ViZGl2aWRlZCwgY29tcHV0ZVdhbGxJbmRpY2VzU3ViZGl2aWRlZCwgcDFTY3JhdGNoMiwgcDJTY3JhdGNoMiwgUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0OwogIHZhciBpbml0X1BvbHlnb25HZW9tZXRyeUxpYnJhcnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BvbHlnb25HZW9tZXRyeUxpYnJhcnkuanMiKCkgewogICAgICBpbml0X0FyY1R5cGUoKTsKICAgICAgaW5pdF9hcnJheVJlbW92ZUR1cGxpY2F0ZXMoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0VsbGlwc29pZFJodW1iTGluZSgpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9HZW9tZXRyeVBpcGVsaW5lKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X0ludGVyc2VjdGlvblRlc3RzKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDMoKTsKICAgICAgaW5pdF9QbGFuZSgpOwogICAgICBpbml0X1BvbHlnb25IaWVyYXJjaHkoKTsKICAgICAgaW5pdF9Qb2x5Z29uUGlwZWxpbmUoKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIGluaXRfUXVhdGVybmlvbigpOwogICAgICBpbml0X1F1ZXVlKCk7CiAgICAgIGluaXRfV2luZGluZ09yZGVyKCk7CiAgICAgIFBvbHlnb25HZW9tZXRyeUxpYnJhcnkgPSB7fTsKICAgICAgUG9seWdvbkdlb21ldHJ5TGlicmFyeS5jb21wdXRlSGllcmFyY2h5UGFja2VkTGVuZ3RoID0gZnVuY3Rpb24ocG9seWdvbkhpZXJhcmNoeSwgQ2FydGVzaWFuWCkgewogICAgICAgIGxldCBudW1Db21wb25lbnRzID0gMDsKICAgICAgICBjb25zdCBzdGFjayA9IFtwb2x5Z29uSGllcmFyY2h5XTsKICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkgewogICAgICAgICAgY29uc3QgaGllcmFyY2h5ID0gc3RhY2sucG9wKCk7CiAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChoaWVyYXJjaHkpKSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgbnVtQ29tcG9uZW50cyArPSAyOwogICAgICAgICAgY29uc3QgcG9zaXRpb25zID0gaGllcmFyY2h5LnBvc2l0aW9uczsKICAgICAgICAgIGNvbnN0IGhvbGVzID0gaGllcmFyY2h5LmhvbGVzOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChwb3NpdGlvbnMpICYmIHBvc2l0aW9ucy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIG51bUNvbXBvbmVudHMgKz0gcG9zaXRpb25zLmxlbmd0aCAqIENhcnRlc2lhblgucGFja2VkTGVuZ3RoOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChob2xlcykpIHsKICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gaG9sZXMubGVuZ3RoOwogICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgc3RhY2sucHVzaChob2xlc1tpXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIG51bUNvbXBvbmVudHM7CiAgICAgIH07CiAgICAgIFBvbHlnb25HZW9tZXRyeUxpYnJhcnkucGFja1BvbHlnb25IaWVyYXJjaHkgPSBmdW5jdGlvbihwb2x5Z29uSGllcmFyY2h5LCBhcnJheSwgc3RhcnRpbmdJbmRleCwgQ2FydGVzaWFuWCkgewogICAgICAgIGNvbnN0IHN0YWNrID0gW3BvbHlnb25IaWVyYXJjaHldOwogICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7CiAgICAgICAgICBjb25zdCBoaWVyYXJjaHkgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGhpZXJhcmNoeSkpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBoaWVyYXJjaHkucG9zaXRpb25zOwogICAgICAgICAgY29uc3QgaG9sZXMgPSBoaWVyYXJjaHkuaG9sZXM7CiAgICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9ucykgPyBwb3NpdGlvbnMubGVuZ3RoIDogMDsKICAgICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBkZWZpbmVkX2RlZmF1bHQoaG9sZXMpID8gaG9sZXMubGVuZ3RoIDogMDsKICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zKSkgewogICAgICAgICAgICBjb25zdCBwb3NpdGlvbnNMZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9uc0xlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhblgucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICAgICAgQ2FydGVzaWFuWC5wYWNrKHBvc2l0aW9uc1tpXSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGhvbGVzKSkgewogICAgICAgICAgICBjb25zdCBob2xlc0xlbmd0aCA9IGhvbGVzLmxlbmd0aDsKICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBob2xlc0xlbmd0aDsgKytqKSB7CiAgICAgICAgICAgICAgc3RhY2sucHVzaChob2xlc1tqXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN0YXJ0aW5nSW5kZXg7CiAgICAgIH07CiAgICAgIFBvbHlnb25HZW9tZXRyeUxpYnJhcnkudW5wYWNrUG9seWdvbkhpZXJhcmNoeSA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCBDYXJ0ZXNpYW5YKSB7CiAgICAgICAgY29uc3QgcG9zaXRpb25zTGVuZ3RoID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBob2xlc0xlbmd0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEFycmF5KHBvc2l0aW9uc0xlbmd0aCk7CiAgICAgICAgY29uc3QgaG9sZXMgPSBob2xlc0xlbmd0aCA+IDAgPyBuZXcgQXJyYXkoaG9sZXNMZW5ndGgpIDogdm9pZCAwOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zTGVuZ3RoOyArK2ksIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuWC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIHBvc2l0aW9uc1tpXSA9IENhcnRlc2lhblgudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBob2xlc0xlbmd0aDsgKytqKSB7CiAgICAgICAgICBob2xlc1tqXSA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnkudW5wYWNrUG9seWdvbkhpZXJhcmNoeSgKICAgICAgICAgICAgYXJyYXksCiAgICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICAgIENhcnRlc2lhblgKICAgICAgICAgICk7CiAgICAgICAgICBzdGFydGluZ0luZGV4ID0gaG9sZXNbal0uc3RhcnRpbmdJbmRleDsKICAgICAgICAgIGRlbGV0ZSBob2xlc1tqXS5zdGFydGluZ0luZGV4OwogICAgICAgIH0KICAgICAgICByZXR1cm4gewogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgaG9sZXMsCiAgICAgICAgICBzdGFydGluZ0luZGV4CiAgICAgICAgfTsKICAgICAgfTsKICAgICAgZGlzdGFuY2UyRFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIGRpc3RhbmNlU2NyYXRjaDQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIFBvbHlnb25HZW9tZXRyeUxpYnJhcnkuc3ViZGl2aWRlTGluZUNvdW50ID0gZnVuY3Rpb24ocDAsIHAxLCBtaW5EaXN0YW5jZSkgewogICAgICAgIGNvbnN0IGRpc3RhbmNlID0gQ2FydGVzaWFuM19kZWZhdWx0LmRpc3RhbmNlKHAwLCBwMSk7CiAgICAgICAgY29uc3QgbiA9IGRpc3RhbmNlIC8gbWluRGlzdGFuY2U7CiAgICAgICAgY29uc3QgY291bnREaXZpZGUgPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoTWF0aF9kZWZhdWx0LmxvZzIobikpKTsKICAgICAgICByZXR1cm4gTWF0aC5wb3coMiwgY291bnREaXZpZGUpOwogICAgICB9OwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljMCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljMSA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljMjIgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjAgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hSaHVtYkxpbmUgPSBuZXcgRWxsaXBzb2lkUmh1bWJMaW5lX2RlZmF1bHQoKTsKICAgICAgUG9seWdvbkdlb21ldHJ5TGlicmFyeS5zdWJkaXZpZGVSaHVtYkxpbmVDb3VudCA9IGZ1bmN0aW9uKGVsbGlwc29pZCwgcDAsIHAxLCBtaW5EaXN0YW5jZSkgewogICAgICAgIGNvbnN0IGMwID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKHAwLCBzY3JhdGNoQ2FydG9ncmFwaGljMCk7CiAgICAgICAgY29uc3QgYzEgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMocDEsIHNjcmF0Y2hDYXJ0b2dyYXBoaWMxKTsKICAgICAgICBjb25zdCByaHVtYiA9IG5ldyBFbGxpcHNvaWRSaHVtYkxpbmVfZGVmYXVsdChjMCwgYzEsIGVsbGlwc29pZCk7CiAgICAgICAgY29uc3QgbiA9IHJodW1iLnN1cmZhY2VEaXN0YW5jZSAvIG1pbkRpc3RhbmNlOwogICAgICAgIGNvbnN0IGNvdW50RGl2aWRlID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKE1hdGhfZGVmYXVsdC5sb2cyKG4pKSk7CiAgICAgICAgcmV0dXJuIE1hdGgucG93KDIsIGNvdW50RGl2aWRlKTsKICAgICAgfTsKICAgICAgUG9seWdvbkdlb21ldHJ5TGlicmFyeS5zdWJkaXZpZGVUZXhjb29yZExpbmUgPSBmdW5jdGlvbih0MCwgdDEsIHAwLCBwMSwgbWluRGlzdGFuY2UsIHJlc3VsdCkgewogICAgICAgIGNvbnN0IHN1YmRpdmlzaW9ucyA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnkuc3ViZGl2aWRlTGluZUNvdW50KAogICAgICAgICAgcDAsCiAgICAgICAgICBwMSwKICAgICAgICAgIG1pbkRpc3RhbmNlCiAgICAgICAgKTsKICAgICAgICBjb25zdCBsZW5ndGgyRCA9IENhcnRlc2lhbjJfZGVmYXVsdC5kaXN0YW5jZSh0MCwgdDEpOwogICAgICAgIGNvbnN0IGRpc3RhbmNlQmV0d2VlbkNvb3JkcyA9IGxlbmd0aDJEIC8gc3ViZGl2aXNpb25zOwogICAgICAgIGNvbnN0IHRleGNvb3JkcyA9IHJlc3VsdDsKICAgICAgICB0ZXhjb29yZHMubGVuZ3RoID0gc3ViZGl2aXNpb25zICogMjsKICAgICAgICBsZXQgaW5kZXggPSAwOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3ViZGl2aXNpb25zOyBpKyspIHsKICAgICAgICAgIGNvbnN0IHQgPSBnZXRQb2ludEF0RGlzdGFuY2UyRCh0MCwgdDEsIGkgKiBkaXN0YW5jZUJldHdlZW5Db29yZHMsIGxlbmd0aDJEKTsKICAgICAgICAgIHRleGNvb3Jkc1tpbmRleCsrXSA9IHRbMF07CiAgICAgICAgICB0ZXhjb29yZHNbaW5kZXgrK10gPSB0WzFdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGV4Y29vcmRzOwogICAgICB9OwogICAgICBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LnN1YmRpdmlkZUxpbmUgPSBmdW5jdGlvbihwMCwgcDEsIG1pbkRpc3RhbmNlLCByZXN1bHQpIHsKICAgICAgICBjb25zdCBudW1WZXJ0aWNlcyA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnkuc3ViZGl2aWRlTGluZUNvdW50KAogICAgICAgICAgcDAsCiAgICAgICAgICBwMSwKICAgICAgICAgIG1pbkRpc3RhbmNlCiAgICAgICAgKTsKICAgICAgICBjb25zdCBsZW5ndGggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZGlzdGFuY2UocDAsIHAxKTsKICAgICAgICBjb25zdCBkaXN0YW5jZUJldHdlZW5WZXJ0aWNlcyA9IGxlbmd0aCAvIG51bVZlcnRpY2VzOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IFtdOwogICAgICAgIH0KICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSByZXN1bHQ7CiAgICAgICAgcG9zaXRpb25zLmxlbmd0aCA9IG51bVZlcnRpY2VzICogMzsKICAgICAgICBsZXQgaW5kZXggPSAwOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVmVydGljZXM7IGkrKykgewogICAgICAgICAgY29uc3QgcCA9IGdldFBvaW50QXREaXN0YW5jZShwMCwgcDEsIGkgKiBkaXN0YW5jZUJldHdlZW5WZXJ0aWNlcywgbGVuZ3RoKTsKICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IHBbMF07CiAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSBwWzFdOwogICAgICAgICAgcG9zaXRpb25zW2luZGV4KytdID0gcFsyXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHBvc2l0aW9uczsKICAgICAgfTsKICAgICAgUG9seWdvbkdlb21ldHJ5TGlicmFyeS5zdWJkaXZpZGVUZXhjb29yZFJodW1iTGluZSA9IGZ1bmN0aW9uKHQwLCB0MSwgZWxsaXBzb2lkLCBwMCwgcDEsIG1pbkRpc3RhbmNlLCByZXN1bHQpIHsKICAgICAgICBjb25zdCBjMCA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhwMCwgc2NyYXRjaENhcnRvZ3JhcGhpYzApOwogICAgICAgIGNvbnN0IGMxID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKHAxLCBzY3JhdGNoQ2FydG9ncmFwaGljMSk7CiAgICAgICAgc2NyYXRjaFJodW1iTGluZS5zZXRFbmRQb2ludHMoYzAsIGMxKTsKICAgICAgICBjb25zdCBuID0gc2NyYXRjaFJodW1iTGluZS5zdXJmYWNlRGlzdGFuY2UgLyBtaW5EaXN0YW5jZTsKICAgICAgICBjb25zdCBjb3VudERpdmlkZSA9IE1hdGgubWF4KDAsIE1hdGguY2VpbChNYXRoX2RlZmF1bHQubG9nMihuKSkpOwogICAgICAgIGNvbnN0IHN1YmRpdmlzaW9ucyA9IE1hdGgucG93KDIsIGNvdW50RGl2aWRlKTsKICAgICAgICBjb25zdCBsZW5ndGgyRCA9IENhcnRlc2lhbjJfZGVmYXVsdC5kaXN0YW5jZSh0MCwgdDEpOwogICAgICAgIGNvbnN0IGRpc3RhbmNlQmV0d2VlbkNvb3JkcyA9IGxlbmd0aDJEIC8gc3ViZGl2aXNpb25zOwogICAgICAgIGNvbnN0IHRleGNvb3JkcyA9IHJlc3VsdDsKICAgICAgICB0ZXhjb29yZHMubGVuZ3RoID0gc3ViZGl2aXNpb25zICogMjsKICAgICAgICBsZXQgaW5kZXggPSAwOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3ViZGl2aXNpb25zOyBpKyspIHsKICAgICAgICAgIGNvbnN0IHQgPSBnZXRQb2ludEF0RGlzdGFuY2UyRCh0MCwgdDEsIGkgKiBkaXN0YW5jZUJldHdlZW5Db29yZHMsIGxlbmd0aDJEKTsKICAgICAgICAgIHRleGNvb3Jkc1tpbmRleCsrXSA9IHRbMF07CiAgICAgICAgICB0ZXhjb29yZHNbaW5kZXgrK10gPSB0WzFdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGV4Y29vcmRzOwogICAgICB9OwogICAgICBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LnN1YmRpdmlkZVJodW1iTGluZSA9IGZ1bmN0aW9uKGVsbGlwc29pZCwgcDAsIHAxLCBtaW5EaXN0YW5jZSwgcmVzdWx0KSB7CiAgICAgICAgY29uc3QgYzAgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMocDAsIHNjcmF0Y2hDYXJ0b2dyYXBoaWMwKTsKICAgICAgICBjb25zdCBjMSA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhwMSwgc2NyYXRjaENhcnRvZ3JhcGhpYzEpOwogICAgICAgIGNvbnN0IHJodW1iID0gbmV3IEVsbGlwc29pZFJodW1iTGluZV9kZWZhdWx0KGMwLCBjMSwgZWxsaXBzb2lkKTsKICAgICAgICBjb25zdCBuID0gcmh1bWIuc3VyZmFjZURpc3RhbmNlIC8gbWluRGlzdGFuY2U7CiAgICAgICAgY29uc3QgY291bnREaXZpZGUgPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoTWF0aF9kZWZhdWx0LmxvZzIobikpKTsKICAgICAgICBjb25zdCBudW1WZXJ0aWNlcyA9IE1hdGgucG93KDIsIGNvdW50RGl2aWRlKTsKICAgICAgICBjb25zdCBkaXN0YW5jZUJldHdlZW5WZXJ0aWNlcyA9IHJodW1iLnN1cmZhY2VEaXN0YW5jZSAvIG51bVZlcnRpY2VzOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IFtdOwogICAgICAgIH0KICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSByZXN1bHQ7CiAgICAgICAgcG9zaXRpb25zLmxlbmd0aCA9IG51bVZlcnRpY2VzICogMzsKICAgICAgICBsZXQgaW5kZXggPSAwOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVmVydGljZXM7IGkrKykgewogICAgICAgICAgY29uc3QgYyA9IHJodW1iLmludGVycG9sYXRlVXNpbmdTdXJmYWNlRGlzdGFuY2UoCiAgICAgICAgICAgIGkgKiBkaXN0YW5jZUJldHdlZW5WZXJ0aWNlcywKICAgICAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYzIyCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgcCA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihjLCBzY3JhdGNoQ2FydGVzaWFuMCk7CiAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSBwLng7CiAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSBwLnk7CiAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSBwLno7CiAgICAgICAgfQogICAgICAgIHJldHVybiBwb3NpdGlvbnM7CiAgICAgIH07CiAgICAgIHNjYWxlVG9HZW9kZXRpY0hlaWdodE4xID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY2FsZVRvR2VvZGV0aWNIZWlnaHROMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NhbGVUb0dlb2RldGljSGVpZ2h0UDEgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjYWxlVG9HZW9kZXRpY0hlaWdodFAyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LnNjYWxlVG9HZW9kZXRpY0hlaWdodEV4dHJ1ZGVkID0gZnVuY3Rpb24oZ2VvbWV0cnksIG1heEhlaWdodCwgbWluSGVpZ2h0LCBlbGxpcHNvaWQsIHBlclBvc2l0aW9uSGVpZ2h0KSB7CiAgICAgICAgZWxsaXBzb2lkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NCk7CiAgICAgICAgY29uc3QgbjEgPSBzY2FsZVRvR2VvZGV0aWNIZWlnaHROMTsKICAgICAgICBsZXQgbjIgPSBzY2FsZVRvR2VvZGV0aWNIZWlnaHROMjsKICAgICAgICBjb25zdCBwID0gc2NhbGVUb0dlb2RldGljSGVpZ2h0UDE7CiAgICAgICAgbGV0IHAyID0gc2NhbGVUb0dlb2RldGljSGVpZ2h0UDI7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChnZW9tZXRyeSkgJiYgZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmF0dHJpYnV0ZXMpICYmIGRlZmluZWRfZGVmYXVsdChnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uKSkgewogICAgICAgICAgY29uc3QgcG9zaXRpb25zID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXM7CiAgICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoIC8gMjsKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDMpIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGksIHApOwogICAgICAgICAgICBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKHAsIG4xKTsKICAgICAgICAgICAgcDIgPSBlbGxpcHNvaWQuc2NhbGVUb0dlb2RldGljU3VyZmFjZShwLCBwMik7CiAgICAgICAgICAgIG4yID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobjEsIG1pbkhlaWdodCwgbjIpOwogICAgICAgICAgICBuMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocDIsIG4yLCBuMik7CiAgICAgICAgICAgIHBvc2l0aW9uc1tpICsgbGVuZ3RoXSA9IG4yLng7CiAgICAgICAgICAgIHBvc2l0aW9uc1tpICsgMSArIGxlbmd0aF0gPSBuMi55OwogICAgICAgICAgICBwb3NpdGlvbnNbaSArIDIgKyBsZW5ndGhdID0gbjIuejsKICAgICAgICAgICAgaWYgKHBlclBvc2l0aW9uSGVpZ2h0KSB7CiAgICAgICAgICAgICAgcDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocCwgcDIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG4yID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobjEsIG1heEhlaWdodCwgbjIpOwogICAgICAgICAgICBuMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocDIsIG4yLCBuMik7CiAgICAgICAgICAgIHBvc2l0aW9uc1tpXSA9IG4yLng7CiAgICAgICAgICAgIHBvc2l0aW9uc1tpICsgMV0gPSBuMi55OwogICAgICAgICAgICBwb3NpdGlvbnNbaSArIDJdID0gbjIuejsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGdlb21ldHJ5OwogICAgICB9OwogICAgICBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LnBvbHlnb25PdXRsaW5lc0Zyb21IaWVyYXJjaHkgPSBmdW5jdGlvbihwb2x5Z29uSGllcmFyY2h5LCBzY2FsZVRvRWxsaXBzb2lkU3VyZmFjZSwgZWxsaXBzb2lkKSB7CiAgICAgICAgY29uc3QgcG9seWdvbnMgPSBbXTsKICAgICAgICBjb25zdCBxdWV1ZSA9IG5ldyBRdWV1ZV9kZWZhdWx0KCk7CiAgICAgICAgcXVldWUuZW5xdWV1ZShwb2x5Z29uSGllcmFyY2h5KTsKICAgICAgICBsZXQgaTsKICAgICAgICBsZXQgajsKICAgICAgICBsZXQgbGVuZ3RoOwogICAgICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggIT09IDApIHsKICAgICAgICAgIGNvbnN0IG91dGVyTm9kZSA9IHF1ZXVlLmRlcXVldWUoKTsKICAgICAgICAgIGxldCBvdXRlclJpbmcgPSBvdXRlck5vZGUucG9zaXRpb25zOwogICAgICAgICAgaWYgKHNjYWxlVG9FbGxpcHNvaWRTdXJmYWNlKSB7CiAgICAgICAgICAgIGxlbmd0aCA9IG91dGVyUmluZy5sZW5ndGg7CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKG91dGVyUmluZ1tpXSwgb3V0ZXJSaW5nW2ldKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgb3V0ZXJSaW5nID0gYXJyYXlSZW1vdmVEdXBsaWNhdGVzX2RlZmF1bHQoCiAgICAgICAgICAgIG91dGVyUmluZywKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24sCiAgICAgICAgICAgIHRydWUKICAgICAgICAgICk7CiAgICAgICAgICBpZiAob3V0ZXJSaW5nLmxlbmd0aCA8IDMpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBudW1DaGlsZHJlbiA9IG91dGVyTm9kZS5ob2xlcyA/IG91dGVyTm9kZS5ob2xlcy5sZW5ndGggOiAwOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bUNoaWxkcmVuOyBpKyspIHsKICAgICAgICAgICAgY29uc3QgaG9sZSA9IG91dGVyTm9kZS5ob2xlc1tpXTsKICAgICAgICAgICAgbGV0IGhvbGVQb3NpdGlvbnMgPSBob2xlLnBvc2l0aW9uczsKICAgICAgICAgICAgaWYgKHNjYWxlVG9FbGxpcHNvaWRTdXJmYWNlKSB7CiAgICAgICAgICAgICAgbGVuZ3RoID0gaG9sZVBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGxlbmd0aDsgKytqKSB7CiAgICAgICAgICAgICAgICBlbGxpcHNvaWQuc2NhbGVUb0dlb2RldGljU3VyZmFjZShob2xlUG9zaXRpb25zW2pdLCBob2xlUG9zaXRpb25zW2pdKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaG9sZVBvc2l0aW9ucyA9IGFycmF5UmVtb3ZlRHVwbGljYXRlc19kZWZhdWx0KAogICAgICAgICAgICAgIGhvbGVQb3NpdGlvbnMsCiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24sCiAgICAgICAgICAgICAgdHJ1ZQogICAgICAgICAgICApOwogICAgICAgICAgICBpZiAoaG9sZVBvc2l0aW9ucy5sZW5ndGggPCAzKSB7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcG9seWdvbnMucHVzaChob2xlUG9zaXRpb25zKTsKICAgICAgICAgICAgbGV0IG51bUdyYW5kY2hpbGRyZW4gPSAwOwogICAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGhvbGUuaG9sZXMpKSB7CiAgICAgICAgICAgICAgbnVtR3JhbmRjaGlsZHJlbiA9IGhvbGUuaG9sZXMubGVuZ3RoOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBudW1HcmFuZGNoaWxkcmVuOyBqKyspIHsKICAgICAgICAgICAgICBxdWV1ZS5lbnF1ZXVlKGhvbGUuaG9sZXNbal0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBwb2x5Z29ucy5wdXNoKG91dGVyUmluZyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBwb2x5Z29uczsKICAgICAgfTsKICAgICAgc2NyYXRjaFJodW1iSW50ZXJzZWN0aW9uID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWMzID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIFBvbHlnb25HZW9tZXRyeUxpYnJhcnkuc3BsaXRQb2x5Z29uc09uRXF1YXRvciA9IGZ1bmN0aW9uKG91dGVyUmluZ3MsIGVsbGlwc29pZCwgYXJjVHlwZSwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gW107CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5zcGxpY2UoMCwgMCwgLi4ub3V0ZXJSaW5ncyk7CiAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IG91dGVyUmluZ3MubGVuZ3RoOwogICAgICAgIGxldCBjdXJyZW50UG9seWdvbiA9IDA7CiAgICAgICAgd2hpbGUgKGN1cnJlbnRQb2x5Z29uIDwgcmVzdWx0Lmxlbmd0aCkgewogICAgICAgICAgY29uc3Qgb3V0ZXJSaW5nID0gcmVzdWx0W2N1cnJlbnRQb2x5Z29uXTsKICAgICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG91dGVyUmluZy5zbGljZSgpOwogICAgICAgICAgaWYgKG91dGVyUmluZy5sZW5ndGggPCAzKSB7CiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW50UG9seWdvbl0gPSBwb3NpdGlvbnM7CiAgICAgICAgICAgICsrY3VycmVudFBvbHlnb247CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgZWRnZXNPblBsYW5lID0gY29tcHV0ZUVkZ2VzT25QbGFuZShwb3NpdGlvbnMsIGVsbGlwc29pZCwgYXJjVHlwZSk7CiAgICAgICAgICBpZiAocG9zaXRpb25zLmxlbmd0aCA9PT0gb3V0ZXJSaW5nLmxlbmd0aCB8fCBlZGdlc09uUGxhbmUubGVuZ3RoIDw9IDEpIHsKICAgICAgICAgICAgcmVzdWx0W2N1cnJlbnRQb2x5Z29uXSA9IHBvc2l0aW9uczsKICAgICAgICAgICAgKytjdXJyZW50UG9seWdvbjsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBlZGdlc09uUGxhbmUuc29ydCgoYTMsIGIpID0+IHsKICAgICAgICAgICAgcmV0dXJuIGEzLnRoZXRhIC0gYi50aGV0YTsKICAgICAgICAgIH0pOwogICAgICAgICAgY29uc3Qgbm9ydGggPSBwb3NpdGlvbnNbMF0ueiA+PSAwOwogICAgICAgICAgY3VycmVudFBvbHlnb24gPSB3aXJlUG9seWdvbigKICAgICAgICAgICAgcmVzdWx0LAogICAgICAgICAgICBjdXJyZW50UG9seWdvbiwKICAgICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgICBlZGdlc09uUGxhbmUsCiAgICAgICAgICAgIDEsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIG5vcnRoCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LnBvbHlnb25zRnJvbUhpZXJhcmNoeSA9IGZ1bmN0aW9uKHBvbHlnb25IaWVyYXJjaHksIGtlZXBEdXBsaWNhdGVzLCBwcm9qZWN0UG9pbnRzVG8yRCwgc2NhbGVUb0VsbGlwc29pZFN1cmZhY2UsIGVsbGlwc29pZCwgc3BsaXRQb2x5Z29ucykgewogICAgICAgIGNvbnN0IGhpZXJhcmNoeSA9IFtdOwogICAgICAgIGNvbnN0IHBvbHlnb25zID0gW107CiAgICAgICAgY29uc3QgcXVldWUgPSBuZXcgUXVldWVfZGVmYXVsdCgpOwogICAgICAgIHF1ZXVlLmVucXVldWUocG9seWdvbkhpZXJhcmNoeSk7CiAgICAgICAgbGV0IHNwbGl0ID0gZGVmaW5lZF9kZWZhdWx0KHNwbGl0UG9seWdvbnMpOwogICAgICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggIT09IDApIHsKICAgICAgICAgIGNvbnN0IG91dGVyTm9kZSA9IHF1ZXVlLmRlcXVldWUoKTsKICAgICAgICAgIGxldCBvdXRlclJpbmcgPSBvdXRlck5vZGUucG9zaXRpb25zOwogICAgICAgICAgY29uc3QgaG9sZXMgPSBvdXRlck5vZGUuaG9sZXM7CiAgICAgICAgICBsZXQgaTsKICAgICAgICAgIGxldCBsZW5ndGg7CiAgICAgICAgICBpZiAoc2NhbGVUb0VsbGlwc29pZFN1cmZhY2UpIHsKICAgICAgICAgICAgbGVuZ3RoID0gb3V0ZXJSaW5nLmxlbmd0aDsKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2Uob3V0ZXJSaW5nW2ldLCBvdXRlclJpbmdbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIWtlZXBEdXBsaWNhdGVzKSB7CiAgICAgICAgICAgIG91dGVyUmluZyA9IGFycmF5UmVtb3ZlRHVwbGljYXRlc19kZWZhdWx0KAogICAgICAgICAgICAgIG91dGVyUmluZywKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbiwKICAgICAgICAgICAgICB0cnVlCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAob3V0ZXJSaW5nLmxlbmd0aCA8IDMpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBsZXQgcG9zaXRpb25zMkQgPSBwcm9qZWN0UG9pbnRzVG8yRChvdXRlclJpbmcpOwogICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zMkQpKSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgaG9sZUluZGljZXMgPSBbXTsKICAgICAgICAgIGxldCBvcmlnaW5hbFdpbmRpbmdPcmRlciA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LmNvbXB1dGVXaW5kaW5nT3JkZXIyRCgKICAgICAgICAgICAgcG9zaXRpb25zMkQKICAgICAgICAgICk7CiAgICAgICAgICBpZiAob3JpZ2luYWxXaW5kaW5nT3JkZXIgPT09IFdpbmRpbmdPcmRlcl9kZWZhdWx0LkNMT0NLV0lTRSkgewogICAgICAgICAgICBwb3NpdGlvbnMyRC5yZXZlcnNlKCk7CiAgICAgICAgICAgIG91dGVyUmluZyA9IG91dGVyUmluZy5zbGljZSgpLnJldmVyc2UoKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzcGxpdCkgewogICAgICAgICAgICBzcGxpdCA9IGZhbHNlOwogICAgICAgICAgICBsZXQgcG9seWdvbnMyID0gW291dGVyUmluZ107CiAgICAgICAgICAgIHBvbHlnb25zMiA9IHNwbGl0UG9seWdvbnMocG9seWdvbnMyLCBwb2x5Z29uczIpOwogICAgICAgICAgICBpZiAocG9seWdvbnMyLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBvc2l0aW9uczIgb2YgcG9seWdvbnMyKSB7CiAgICAgICAgICAgICAgICBxdWV1ZS5lbnF1ZXVlKG5ldyBQb2x5Z29uSGllcmFyY2h5X2RlZmF1bHQocG9zaXRpb25zMiwgaG9sZXMpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGxldCBwb3NpdGlvbnMgPSBvdXRlclJpbmcuc2xpY2UoKTsKICAgICAgICAgIGNvbnN0IG51bUNoaWxkcmVuID0gZGVmaW5lZF9kZWZhdWx0KGhvbGVzKSA/IGhvbGVzLmxlbmd0aCA6IDA7CiAgICAgICAgICBjb25zdCBwb2x5Z29uSG9sZXMgPSBbXTsKICAgICAgICAgIGxldCBqOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bUNoaWxkcmVuOyBpKyspIHsKICAgICAgICAgICAgY29uc3QgaG9sZSA9IGhvbGVzW2ldOwogICAgICAgICAgICBsZXQgaG9sZVBvc2l0aW9ucyA9IGhvbGUucG9zaXRpb25zOwogICAgICAgICAgICBpZiAoc2NhbGVUb0VsbGlwc29pZFN1cmZhY2UpIHsKICAgICAgICAgICAgICBsZW5ndGggPSBob2xlUG9zaXRpb25zLmxlbmd0aDsKICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbGVuZ3RoOyArK2opIHsKICAgICAgICAgICAgICAgIGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKGhvbGVQb3NpdGlvbnNbal0sIGhvbGVQb3NpdGlvbnNbal0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIWtlZXBEdXBsaWNhdGVzKSB7CiAgICAgICAgICAgICAgaG9sZVBvc2l0aW9ucyA9IGFycmF5UmVtb3ZlRHVwbGljYXRlc19kZWZhdWx0KAogICAgICAgICAgICAgICAgaG9sZVBvc2l0aW9ucywKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uLAogICAgICAgICAgICAgICAgdHJ1ZQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGhvbGVQb3NpdGlvbnMubGVuZ3RoIDwgMykgewogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IGhvbGVQb3NpdGlvbnMyRCA9IHByb2plY3RQb2ludHNUbzJEKGhvbGVQb3NpdGlvbnMpOwogICAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChob2xlUG9zaXRpb25zMkQpKSB7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgb3JpZ2luYWxXaW5kaW5nT3JkZXIgPSBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdC5jb21wdXRlV2luZGluZ09yZGVyMkQoCiAgICAgICAgICAgICAgaG9sZVBvc2l0aW9uczJECiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGlmIChvcmlnaW5hbFdpbmRpbmdPcmRlciA9PT0gV2luZGluZ09yZGVyX2RlZmF1bHQuQ0xPQ0tXSVNFKSB7CiAgICAgICAgICAgICAgaG9sZVBvc2l0aW9uczJELnJldmVyc2UoKTsKICAgICAgICAgICAgICBob2xlUG9zaXRpb25zID0gaG9sZVBvc2l0aW9ucy5zbGljZSgpLnJldmVyc2UoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBwb2x5Z29uSG9sZXMucHVzaChob2xlUG9zaXRpb25zKTsKICAgICAgICAgICAgaG9sZUluZGljZXMucHVzaChwb3NpdGlvbnMubGVuZ3RoKTsKICAgICAgICAgICAgcG9zaXRpb25zID0gcG9zaXRpb25zLmNvbmNhdChob2xlUG9zaXRpb25zKTsKICAgICAgICAgICAgcG9zaXRpb25zMkQgPSBwb3NpdGlvbnMyRC5jb25jYXQoaG9sZVBvc2l0aW9uczJEKTsKICAgICAgICAgICAgbGV0IG51bUdyYW5kY2hpbGRyZW4gPSAwOwogICAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGhvbGUuaG9sZXMpKSB7CiAgICAgICAgICAgICAgbnVtR3JhbmRjaGlsZHJlbiA9IGhvbGUuaG9sZXMubGVuZ3RoOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBudW1HcmFuZGNoaWxkcmVuOyBqKyspIHsKICAgICAgICAgICAgICBxdWV1ZS5lbnF1ZXVlKGhvbGUuaG9sZXNbal0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBoaWVyYXJjaHkucHVzaCh7CiAgICAgICAgICAgIG91dGVyUmluZywKICAgICAgICAgICAgaG9sZXM6IHBvbHlnb25Ib2xlcwogICAgICAgICAgfSk7CiAgICAgICAgICBwb2x5Z29ucy5wdXNoKHsKICAgICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgICBwb3NpdGlvbnMyRCwKICAgICAgICAgICAgaG9sZXM6IGhvbGVJbmRpY2VzCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGhpZXJhcmNoeSwKICAgICAgICAgIHBvbHlnb25zCiAgICAgICAgfTsKICAgICAgfTsKICAgICAgY29tcHV0ZUJvdW5kaW5nUmVjdGFuZ2xlQ2FydGVzaWFuMiA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgY29tcHV0ZUJvdW5kaW5nUmVjdGFuZ2xlQ2FydGVzaWFuMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY29tcHV0ZUJvdW5kaW5nUmVjdGFuZ2xlUXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uX2RlZmF1bHQoKTsKICAgICAgY29tcHV0ZUJvdW5kaW5nUmVjdGFuZ2xlTWF0cml4MyA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgUG9seWdvbkdlb21ldHJ5TGlicmFyeS5jb21wdXRlQm91bmRpbmdSZWN0YW5nbGUgPSBmdW5jdGlvbihwbGFuZU5vcm1hbCwgcHJvamVjdFBvaW50VG8yRCwgcG9zaXRpb25zLCBhbmdsZSwgcmVzdWx0KSB7CiAgICAgICAgY29uc3Qgcm90YXRpb24gPSBRdWF0ZXJuaW9uX2RlZmF1bHQuZnJvbUF4aXNBbmdsZSgKICAgICAgICAgIHBsYW5lTm9ybWFsLAogICAgICAgICAgYW5nbGUsCiAgICAgICAgICBjb21wdXRlQm91bmRpbmdSZWN0YW5nbGVRdWF0ZXJuaW9uCiAgICAgICAgKTsKICAgICAgICBjb25zdCB0ZXh0dXJlTWF0cml4ID0gTWF0cml4M19kZWZhdWx0LmZyb21RdWF0ZXJuaW9uKAogICAgICAgICAgcm90YXRpb24sCiAgICAgICAgICBjb21wdXRlQm91bmRpbmdSZWN0YW5nbGVNYXRyaXgzCiAgICAgICAgKTsKICAgICAgICBsZXQgbWluWCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgICAgICBsZXQgbWF4WCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgICAgICBsZXQgbWluWSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgICAgICBsZXQgbWF4WSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgIGNvbnN0IHAgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoCiAgICAgICAgICAgIHBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgY29tcHV0ZUJvdW5kaW5nUmVjdGFuZ2xlQ2FydGVzaWFuMwogICAgICAgICAgKTsKICAgICAgICAgIE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKHRleHR1cmVNYXRyaXgsIHAsIHApOwogICAgICAgICAgY29uc3Qgc3QgPSBwcm9qZWN0UG9pbnRUbzJEKHAsIGNvbXB1dGVCb3VuZGluZ1JlY3RhbmdsZUNhcnRlc2lhbjIpOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChzdCkpIHsKICAgICAgICAgICAgbWluWCA9IE1hdGgubWluKG1pblgsIHN0LngpOwogICAgICAgICAgICBtYXhYID0gTWF0aC5tYXgobWF4WCwgc3QueCk7CiAgICAgICAgICAgIG1pblkgPSBNYXRoLm1pbihtaW5ZLCBzdC55KTsKICAgICAgICAgICAgbWF4WSA9IE1hdGgubWF4KG1heFksIHN0LnkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IG1pblg7CiAgICAgICAgcmVzdWx0LnkgPSBtaW5ZOwogICAgICAgIHJlc3VsdC53aWR0aCA9IG1heFggLSBtaW5YOwogICAgICAgIHJlc3VsdC5oZWlnaHQgPSBtYXhZIC0gbWluWTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LmNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9ucyA9IGZ1bmN0aW9uKGVsbGlwc29pZCwgcG9seWdvbjIsIHRleHR1cmVDb29yZGluYXRlcywgZ3JhbnVsYXJpdHksIHBlclBvc2l0aW9uSGVpZ2h0LCB2ZXJ0ZXhGb3JtYXQsIGFyY1R5cGUpIHsKICAgICAgICBsZXQgaW5kaWNlcyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnRyaWFuZ3VsYXRlKHBvbHlnb24yLnBvc2l0aW9uczJELCBwb2x5Z29uMi5ob2xlcyk7CiAgICAgICAgaWYgKGluZGljZXMubGVuZ3RoIDwgMykgewogICAgICAgICAgaW5kaWNlcyA9IFswLCAxLCAyXTsKICAgICAgICB9CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gcG9seWdvbjIucG9zaXRpb25zOwogICAgICAgIGNvbnN0IGhhc1RleGNvb3JkcyA9IGRlZmluZWRfZGVmYXVsdCh0ZXh0dXJlQ29vcmRpbmF0ZXMpOwogICAgICAgIGNvbnN0IHRleGNvb3JkcyA9IGhhc1RleGNvb3JkcyA/IHRleHR1cmVDb29yZGluYXRlcy5wb3NpdGlvbnMgOiB2b2lkIDA7CiAgICAgICAgaWYgKHBlclBvc2l0aW9uSGVpZ2h0KSB7CiAgICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgICAgY29uc3QgZmxhdHRlbmVkUG9zaXRpb25zID0gbmV3IEFycmF5KGxlbmd0aCAqIDMpOwogICAgICAgICAgbGV0IGluZGV4ID0gMDsKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgY29uc3QgcCA9IHBvc2l0aW9uc1tpXTsKICAgICAgICAgICAgZmxhdHRlbmVkUG9zaXRpb25zW2luZGV4KytdID0gcC54OwogICAgICAgICAgICBmbGF0dGVuZWRQb3NpdGlvbnNbaW5kZXgrK10gPSBwLnk7CiAgICAgICAgICAgIGZsYXR0ZW5lZFBvc2l0aW9uc1tpbmRleCsrXSA9IHAuejsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGdlb21ldHJ5T3B0aW9ucyA9IHsKICAgICAgICAgICAgYXR0cmlidXRlczogewogICAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICAgICAgdmFsdWVzOiBmbGF0dGVuZWRQb3NpdGlvbnMKICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9LAogICAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTCiAgICAgICAgICB9OwogICAgICAgICAgaWYgKGhhc1RleGNvb3JkcykgewogICAgICAgICAgICBnZW9tZXRyeU9wdGlvbnMuYXR0cmlidXRlcy5zdCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgICAgICAgIHZhbHVlczogQ2FydGVzaWFuMl9kZWZhdWx0LnBhY2tBcnJheSh0ZXhjb29yZHMpCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cnlfZGVmYXVsdChnZW9tZXRyeU9wdGlvbnMpOwogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgICAgICAgcmV0dXJuIEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5jb21wdXRlTm9ybWFsKGdlb21ldHJ5KTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBnZW9tZXRyeTsKICAgICAgICB9CiAgICAgICAgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQykgewogICAgICAgICAgcmV0dXJuIFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LmNvbXB1dGVTdWJkaXZpc2lvbigKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICAgIHRleGNvb3JkcywKICAgICAgICAgICAgZ3JhbnVsYXJpdHkKICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIGlmIChhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuUkhVTUIpIHsKICAgICAgICAgIHJldHVybiBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdC5jb21wdXRlUmh1bWJMaW5lU3ViZGl2aXNpb24oCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgICB0ZXhjb29yZHMsCiAgICAgICAgICAgIGdyYW51bGFyaXR5CiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgY29tcHV0ZVdhbGxUZXhjb29yZHNTdWJkaXZpZGVkID0gW107CiAgICAgIGNvbXB1dGVXYWxsSW5kaWNlc1N1YmRpdmlkZWQgPSBbXTsKICAgICAgcDFTY3JhdGNoMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcDJTY3JhdGNoMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgUG9seWdvbkdlb21ldHJ5TGlicmFyeS5jb21wdXRlV2FsbEdlb21ldHJ5ID0gZnVuY3Rpb24ocG9zaXRpb25zLCB0ZXh0dXJlQ29vcmRpbmF0ZXMsIGVsbGlwc29pZCwgZ3JhbnVsYXJpdHksIHBlclBvc2l0aW9uSGVpZ2h0LCBhcmNUeXBlKSB7CiAgICAgICAgbGV0IGVkZ2VQb3NpdGlvbnM7CiAgICAgICAgbGV0IHRvcEVkZ2VMZW5ndGg7CiAgICAgICAgbGV0IGk7CiAgICAgICAgbGV0IHAxOwogICAgICAgIGxldCBwMjsKICAgICAgICBsZXQgdDE7CiAgICAgICAgbGV0IHQyOwogICAgICAgIGxldCBlZGdlVGV4Y29vcmRzOwogICAgICAgIGxldCB0b3BFZGdlVGV4Y29vcmRMZW5ndGg7CiAgICAgICAgbGV0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgbGV0IGluZGV4ID0gMDsKICAgICAgICBsZXQgdGV4dHVyZUluZGV4ID0gMDsKICAgICAgICBjb25zdCBoYXNUZXhjb29yZHMgPSBkZWZpbmVkX2RlZmF1bHQodGV4dHVyZUNvb3JkaW5hdGVzKTsKICAgICAgICBjb25zdCB0ZXhjb29yZHMgPSBoYXNUZXhjb29yZHMgPyB0ZXh0dXJlQ29vcmRpbmF0ZXMucG9zaXRpb25zIDogdm9pZCAwOwogICAgICAgIGlmICghcGVyUG9zaXRpb25IZWlnaHQpIHsKICAgICAgICAgIGNvbnN0IG1pbkRpc3RhbmNlID0gTWF0aF9kZWZhdWx0LmNob3JkTGVuZ3RoKAogICAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgICAgZWxsaXBzb2lkLm1heGltdW1SYWRpdXMKICAgICAgICAgICk7CiAgICAgICAgICBsZXQgbnVtVmVydGljZXMgPSAwOwogICAgICAgICAgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQykgewogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBudW1WZXJ0aWNlcyArPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LnN1YmRpdmlkZUxpbmVDb3VudCgKICAgICAgICAgICAgICAgIHBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgICAgIHBvc2l0aW9uc1soaSArIDEpICUgbGVuZ3RoXSwKICAgICAgICAgICAgICAgIG1pbkRpc3RhbmNlCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmIChhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuUkhVTUIpIHsKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgbnVtVmVydGljZXMgKz0gUG9seWdvbkdlb21ldHJ5TGlicmFyeS5zdWJkaXZpZGVSaHVtYkxpbmVDb3VudCgKICAgICAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgICAgIHBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgICAgIHBvc2l0aW9uc1soaSArIDEpICUgbGVuZ3RoXSwKICAgICAgICAgICAgICAgIG1pbkRpc3RhbmNlCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdG9wRWRnZUxlbmd0aCA9IChudW1WZXJ0aWNlcyArIGxlbmd0aCkgKiAzOwogICAgICAgICAgZWRnZVBvc2l0aW9ucyA9IG5ldyBBcnJheSh0b3BFZGdlTGVuZ3RoICogMik7CiAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgIHRvcEVkZ2VUZXhjb29yZExlbmd0aCA9IChudW1WZXJ0aWNlcyArIGxlbmd0aCkgKiAyOwogICAgICAgICAgICBlZGdlVGV4Y29vcmRzID0gbmV3IEFycmF5KHRvcEVkZ2VUZXhjb29yZExlbmd0aCAqIDIpOwogICAgICAgICAgfQogICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHAxID0gcG9zaXRpb25zW2ldOwogICAgICAgICAgICBwMiA9IHBvc2l0aW9uc1soaSArIDEpICUgbGVuZ3RoXTsKICAgICAgICAgICAgbGV0IHRlbXBQb3NpdGlvbnM7CiAgICAgICAgICAgIGxldCB0ZW1wVGV4Y29vcmRzOwogICAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgICAgdDEgPSB0ZXhjb29yZHNbaV07CiAgICAgICAgICAgICAgdDIgPSB0ZXhjb29yZHNbKGkgKyAxKSAlIGxlbmd0aF07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQykgewogICAgICAgICAgICAgIHRlbXBQb3NpdGlvbnMgPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LnN1YmRpdmlkZUxpbmUoCiAgICAgICAgICAgICAgICBwMSwKICAgICAgICAgICAgICAgIHAyLAogICAgICAgICAgICAgICAgbWluRGlzdGFuY2UsCiAgICAgICAgICAgICAgICBjb21wdXRlV2FsbEluZGljZXNTdWJkaXZpZGVkCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgICAgICB0ZW1wVGV4Y29vcmRzID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeS5zdWJkaXZpZGVUZXhjb29yZExpbmUoCiAgICAgICAgICAgICAgICAgIHQxLAogICAgICAgICAgICAgICAgICB0MiwKICAgICAgICAgICAgICAgICAgcDEsCiAgICAgICAgICAgICAgICAgIHAyLAogICAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSwKICAgICAgICAgICAgICAgICAgY29tcHV0ZVdhbGxUZXhjb29yZHNTdWJkaXZpZGVkCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuUkhVTUIpIHsKICAgICAgICAgICAgICB0ZW1wUG9zaXRpb25zID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeS5zdWJkaXZpZGVSaHVtYkxpbmUoCiAgICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgICBwMSwKICAgICAgICAgICAgICAgIHAyLAogICAgICAgICAgICAgICAgbWluRGlzdGFuY2UsCiAgICAgICAgICAgICAgICBjb21wdXRlV2FsbEluZGljZXNTdWJkaXZpZGVkCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgICAgICB0ZW1wVGV4Y29vcmRzID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeS5zdWJkaXZpZGVUZXhjb29yZFJodW1iTGluZSgKICAgICAgICAgICAgICAgICAgdDEsCiAgICAgICAgICAgICAgICAgIHQyLAogICAgICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgICAgIHAxLAogICAgICAgICAgICAgICAgICBwMiwKICAgICAgICAgICAgICAgICAgbWluRGlzdGFuY2UsCiAgICAgICAgICAgICAgICAgIGNvbXB1dGVXYWxsVGV4Y29vcmRzU3ViZGl2aWRlZAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgdGVtcFBvc2l0aW9uc0xlbmd0aCA9IHRlbXBQb3NpdGlvbnMubGVuZ3RoOwogICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRlbXBQb3NpdGlvbnNMZW5ndGg7ICsraiwgKytpbmRleCkgewogICAgICAgICAgICAgIGVkZ2VQb3NpdGlvbnNbaW5kZXhdID0gdGVtcFBvc2l0aW9uc1tqXTsKICAgICAgICAgICAgICBlZGdlUG9zaXRpb25zW2luZGV4ICsgdG9wRWRnZUxlbmd0aF0gPSB0ZW1wUG9zaXRpb25zW2pdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVkZ2VQb3NpdGlvbnNbaW5kZXhdID0gcDIueDsKICAgICAgICAgICAgZWRnZVBvc2l0aW9uc1tpbmRleCArIHRvcEVkZ2VMZW5ndGhdID0gcDIueDsKICAgICAgICAgICAgKytpbmRleDsKICAgICAgICAgICAgZWRnZVBvc2l0aW9uc1tpbmRleF0gPSBwMi55OwogICAgICAgICAgICBlZGdlUG9zaXRpb25zW2luZGV4ICsgdG9wRWRnZUxlbmd0aF0gPSBwMi55OwogICAgICAgICAgICArK2luZGV4OwogICAgICAgICAgICBlZGdlUG9zaXRpb25zW2luZGV4XSA9IHAyLno7CiAgICAgICAgICAgIGVkZ2VQb3NpdGlvbnNbaW5kZXggKyB0b3BFZGdlTGVuZ3RoXSA9IHAyLno7CiAgICAgICAgICAgICsraW5kZXg7CiAgICAgICAgICAgIGlmIChoYXNUZXhjb29yZHMpIHsKICAgICAgICAgICAgICBjb25zdCB0ZW1wVGV4Y29vcmRzTGVuZ3RoID0gdGVtcFRleGNvb3Jkcy5sZW5ndGg7CiAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCB0ZW1wVGV4Y29vcmRzTGVuZ3RoOyArK2ssICsrdGV4dHVyZUluZGV4KSB7CiAgICAgICAgICAgICAgICBlZGdlVGV4Y29vcmRzW3RleHR1cmVJbmRleF0gPSB0ZW1wVGV4Y29vcmRzW2tdOwogICAgICAgICAgICAgICAgZWRnZVRleGNvb3Jkc1t0ZXh0dXJlSW5kZXggKyB0b3BFZGdlVGV4Y29vcmRMZW5ndGhdID0gdGVtcFRleGNvb3Jkc1trXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWRnZVRleGNvb3Jkc1t0ZXh0dXJlSW5kZXhdID0gdDIueDsKICAgICAgICAgICAgICBlZGdlVGV4Y29vcmRzW3RleHR1cmVJbmRleCArIHRvcEVkZ2VUZXhjb29yZExlbmd0aF0gPSB0Mi54OwogICAgICAgICAgICAgICsrdGV4dHVyZUluZGV4OwogICAgICAgICAgICAgIGVkZ2VUZXhjb29yZHNbdGV4dHVyZUluZGV4XSA9IHQyLnk7CiAgICAgICAgICAgICAgZWRnZVRleGNvb3Jkc1t0ZXh0dXJlSW5kZXggKyB0b3BFZGdlVGV4Y29vcmRMZW5ndGhdID0gdDIueTsKICAgICAgICAgICAgICArK3RleHR1cmVJbmRleDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0b3BFZGdlTGVuZ3RoID0gbGVuZ3RoICogMyAqIDI7CiAgICAgICAgICBlZGdlUG9zaXRpb25zID0gbmV3IEFycmF5KHRvcEVkZ2VMZW5ndGggKiAyKTsKICAgICAgICAgIGlmIChoYXNUZXhjb29yZHMpIHsKICAgICAgICAgICAgdG9wRWRnZVRleGNvb3JkTGVuZ3RoID0gbGVuZ3RoICogMiAqIDI7CiAgICAgICAgICAgIGVkZ2VUZXhjb29yZHMgPSBuZXcgQXJyYXkodG9wRWRnZVRleGNvb3JkTGVuZ3RoICogMik7CiAgICAgICAgICB9CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgcDEgPSBwb3NpdGlvbnNbaV07CiAgICAgICAgICAgIHAyID0gcG9zaXRpb25zWyhpICsgMSkgJSBsZW5ndGhdOwogICAgICAgICAgICBlZGdlUG9zaXRpb25zW2luZGV4XSA9IGVkZ2VQb3NpdGlvbnNbaW5kZXggKyB0b3BFZGdlTGVuZ3RoXSA9IHAxLng7CiAgICAgICAgICAgICsraW5kZXg7CiAgICAgICAgICAgIGVkZ2VQb3NpdGlvbnNbaW5kZXhdID0gZWRnZVBvc2l0aW9uc1tpbmRleCArIHRvcEVkZ2VMZW5ndGhdID0gcDEueTsKICAgICAgICAgICAgKytpbmRleDsKICAgICAgICAgICAgZWRnZVBvc2l0aW9uc1tpbmRleF0gPSBlZGdlUG9zaXRpb25zW2luZGV4ICsgdG9wRWRnZUxlbmd0aF0gPSBwMS56OwogICAgICAgICAgICArK2luZGV4OwogICAgICAgICAgICBlZGdlUG9zaXRpb25zW2luZGV4XSA9IGVkZ2VQb3NpdGlvbnNbaW5kZXggKyB0b3BFZGdlTGVuZ3RoXSA9IHAyLng7CiAgICAgICAgICAgICsraW5kZXg7CiAgICAgICAgICAgIGVkZ2VQb3NpdGlvbnNbaW5kZXhdID0gZWRnZVBvc2l0aW9uc1tpbmRleCArIHRvcEVkZ2VMZW5ndGhdID0gcDIueTsKICAgICAgICAgICAgKytpbmRleDsKICAgICAgICAgICAgZWRnZVBvc2l0aW9uc1tpbmRleF0gPSBlZGdlUG9zaXRpb25zW2luZGV4ICsgdG9wRWRnZUxlbmd0aF0gPSBwMi56OwogICAgICAgICAgICArK2luZGV4OwogICAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgICAgdDEgPSB0ZXhjb29yZHNbaV07CiAgICAgICAgICAgICAgdDIgPSB0ZXhjb29yZHNbKGkgKyAxKSAlIGxlbmd0aF07CiAgICAgICAgICAgICAgZWRnZVRleGNvb3Jkc1t0ZXh0dXJlSW5kZXhdID0gZWRnZVRleGNvb3Jkc1t0ZXh0dXJlSW5kZXggKyB0b3BFZGdlVGV4Y29vcmRMZW5ndGhdID0gdDEueDsKICAgICAgICAgICAgICArK3RleHR1cmVJbmRleDsKICAgICAgICAgICAgICBlZGdlVGV4Y29vcmRzW3RleHR1cmVJbmRleF0gPSBlZGdlVGV4Y29vcmRzW3RleHR1cmVJbmRleCArIHRvcEVkZ2VUZXhjb29yZExlbmd0aF0gPSB0MS55OwogICAgICAgICAgICAgICsrdGV4dHVyZUluZGV4OwogICAgICAgICAgICAgIGVkZ2VUZXhjb29yZHNbdGV4dHVyZUluZGV4XSA9IGVkZ2VUZXhjb29yZHNbdGV4dHVyZUluZGV4ICsgdG9wRWRnZVRleGNvb3JkTGVuZ3RoXSA9IHQyLng7CiAgICAgICAgICAgICAgKyt0ZXh0dXJlSW5kZXg7CiAgICAgICAgICAgICAgZWRnZVRleGNvb3Jkc1t0ZXh0dXJlSW5kZXhdID0gZWRnZVRleGNvb3Jkc1t0ZXh0dXJlSW5kZXggKyB0b3BFZGdlVGV4Y29vcmRMZW5ndGhdID0gdDIueTsKICAgICAgICAgICAgICArK3RleHR1cmVJbmRleDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBsZW5ndGggPSBlZGdlUG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgICAgICBsZW5ndGggLyAzLAogICAgICAgICAgbGVuZ3RoIC0gcG9zaXRpb25zLmxlbmd0aCAqIDYKICAgICAgICApOwogICAgICAgIGxldCBlZGdlSW5kZXggPSAwOwogICAgICAgIGxlbmd0aCAvPSA2OwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgY29uc3QgVUwgPSBpOwogICAgICAgICAgY29uc3QgVVIgPSBVTCArIDE7CiAgICAgICAgICBjb25zdCBMTCA9IFVMICsgbGVuZ3RoOwogICAgICAgICAgY29uc3QgTFIgPSBMTCArIDE7CiAgICAgICAgICBwMSA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoZWRnZVBvc2l0aW9ucywgVUwgKiAzLCBwMVNjcmF0Y2gyKTsKICAgICAgICAgIHAyID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShlZGdlUG9zaXRpb25zLCBVUiAqIDMsIHAyU2NyYXRjaDIpOwogICAgICAgICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgICBwMSwKICAgICAgICAgICAgcDIsCiAgICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTAsCiAgICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTAKICAgICAgICAgICkpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBpbmRpY2VzW2VkZ2VJbmRleCsrXSA9IFVMOwogICAgICAgICAgaW5kaWNlc1tlZGdlSW5kZXgrK10gPSBMTDsKICAgICAgICAgIGluZGljZXNbZWRnZUluZGV4KytdID0gVVI7CiAgICAgICAgICBpbmRpY2VzW2VkZ2VJbmRleCsrXSA9IFVSOwogICAgICAgICAgaW5kaWNlc1tlZGdlSW5kZXgrK10gPSBMTDsKICAgICAgICAgIGluZGljZXNbZWRnZUluZGV4KytdID0gTFI7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdlb21ldHJ5T3B0aW9ucyA9IHsKICAgICAgICAgIGF0dHJpYnV0ZXM6IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCh7CiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICAgICAgdmFsdWVzOiBlZGdlUG9zaXRpb25zCiAgICAgICAgICAgIH0pCiAgICAgICAgICB9KSwKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTCiAgICAgICAgfTsKICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICBnZW9tZXRyeU9wdGlvbnMuYXR0cmlidXRlcy5zdCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDIsCiAgICAgICAgICAgIHZhbHVlczogZWRnZVRleGNvb3JkcwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IEdlb21ldHJ5X2RlZmF1bHQoZ2VvbWV0cnlPcHRpb25zKTsKICAgICAgICByZXR1cm4gZ2VvbWV0cnk7CiAgICAgIH07CiAgICAgIFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdCA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Db3BsYW5hclBvbHlnb25HZW9tZXRyeS5qcwogIGZ1bmN0aW9uIGNyZWF0ZUdlb21ldHJ5RnJvbVBvbHlnb24ocG9seWdvbjIsIHZlcnRleEZvcm1hdCwgYm91bmRpbmdSZWN0YW5nbGUsIHN0Um90YXRpb24sIGhhcmRjb2RlZFRleHR1cmVDb29yZGluYXRlcywgcHJvamVjdFBvaW50VG8yRCwgbm9ybWFsMiwgdGFuZ2VudCwgYml0YW5nZW50KSB7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBwb2x5Z29uMi5wb3NpdGlvbnM7CiAgICBsZXQgaW5kaWNlcyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnRyaWFuZ3VsYXRlKHBvbHlnb24yLnBvc2l0aW9uczJELCBwb2x5Z29uMi5ob2xlcyk7CiAgICBpZiAoaW5kaWNlcy5sZW5ndGggPCAzKSB7CiAgICAgIGluZGljZXMgPSBbMCwgMSwgMl07CiAgICB9CiAgICBjb25zdCBuZXdJbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgIHBvc2l0aW9ucy5sZW5ndGgsCiAgICAgIGluZGljZXMubGVuZ3RoCiAgICApOwogICAgbmV3SW5kaWNlcy5zZXQoaW5kaWNlcyk7CiAgICBsZXQgdGV4dHVyZU1hdHJpeCA9IHRleHR1cmVNYXRyaXhTY3JhdGNoMjsKICAgIGlmIChzdFJvdGF0aW9uICE9PSAwKSB7CiAgICAgIGxldCByb3RhdGlvbiA9IFF1YXRlcm5pb25fZGVmYXVsdC5mcm9tQXhpc0FuZ2xlKAogICAgICAgIG5vcm1hbDIsCiAgICAgICAgc3RSb3RhdGlvbiwKICAgICAgICBxdWF0ZXJuaW9uU2NyYXRjaDIKICAgICAgKTsKICAgICAgdGV4dHVyZU1hdHJpeCA9IE1hdHJpeDNfZGVmYXVsdC5mcm9tUXVhdGVybmlvbihyb3RhdGlvbiwgdGV4dHVyZU1hdHJpeCk7CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCB8fCB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgcm90YXRpb24gPSBRdWF0ZXJuaW9uX2RlZmF1bHQuZnJvbUF4aXNBbmdsZSgKICAgICAgICAgIG5vcm1hbDIsCiAgICAgICAgICAtc3RSb3RhdGlvbiwKICAgICAgICAgIHF1YXRlcm5pb25TY3JhdGNoMgogICAgICAgICk7CiAgICAgICAgY29uc3QgdGFuZ2VudFJvdGF0aW9uID0gTWF0cml4M19kZWZhdWx0LmZyb21RdWF0ZXJuaW9uKAogICAgICAgICAgcm90YXRpb24sCiAgICAgICAgICB0YW5nZW50Um90YXRpb25TY3JhdGNoCiAgICAgICAgKTsKICAgICAgICB0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgIE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKHRhbmdlbnRSb3RhdGlvbiwgdGFuZ2VudCwgdGFuZ2VudCksCiAgICAgICAgICB0YW5nZW50CiAgICAgICAgKTsKICAgICAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgYml0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKG5vcm1hbDIsIHRhbmdlbnQsIGJpdGFuZ2VudCksCiAgICAgICAgICAgIGJpdGFuZ2VudAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRleHR1cmVNYXRyaXggPSBNYXRyaXgzX2RlZmF1bHQuY2xvbmUoTWF0cml4M19kZWZhdWx0LklERU5USVRZLCB0ZXh0dXJlTWF0cml4KTsKICAgIH0KICAgIGNvbnN0IHN0T3JpZ2luID0gdGV4dHVyZUNvb3JkaW5hdGVzT3JpZ2luOwogICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICBzdE9yaWdpbi54ID0gYm91bmRpbmdSZWN0YW5nbGUueDsKICAgICAgc3RPcmlnaW4ueSA9IGJvdW5kaW5nUmVjdGFuZ2xlLnk7CiAgICB9CiAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgY29uc3Qgc2l6ZSA9IGxlbmd0aCAqIDM7CiAgICBjb25zdCBmbGF0UG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShzaXplKTsKICAgIGNvbnN0IG5vcm1hbHMgPSB2ZXJ0ZXhGb3JtYXQubm9ybWFsID8gbmV3IEZsb2F0MzJBcnJheShzaXplKSA6IHZvaWQgMDsKICAgIGNvbnN0IHRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LnRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUpIDogdm9pZCAwOwogICAgY29uc3QgYml0YW5nZW50cyA9IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUpIDogdm9pZCAwOwogICAgY29uc3QgdGV4dHVyZUNvb3JkaW5hdGVzID0gdmVydGV4Rm9ybWF0LnN0ID8gbmV3IEZsb2F0MzJBcnJheShsZW5ndGggKiAyKSA6IHZvaWQgMDsKICAgIGxldCBwb3NpdGlvbkluZGV4ID0gMDsKICAgIGxldCBub3JtYWxJbmRleCA9IDA7CiAgICBsZXQgYml0YW5nZW50SW5kZXggPSAwOwogICAgbGV0IHRhbmdlbnRJbmRleCA9IDA7CiAgICBsZXQgc3RJbmRleCA9IDA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25zW2ldOwogICAgICBmbGF0UG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBwb3NpdGlvbi54OwogICAgICBmbGF0UG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBwb3NpdGlvbi55OwogICAgICBmbGF0UG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBwb3NpdGlvbi56OwogICAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChoYXJkY29kZWRUZXh0dXJlQ29vcmRpbmF0ZXMpICYmIGhhcmRjb2RlZFRleHR1cmVDb29yZGluYXRlcy5wb3NpdGlvbnMubGVuZ3RoID09PSBsZW5ndGgpIHsKICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlc1tzdEluZGV4KytdID0gaGFyZGNvZGVkVGV4dHVyZUNvb3JkaW5hdGVzLnBvc2l0aW9uc1tpXS54OwogICAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW3N0SW5kZXgrK10gPSBoYXJkY29kZWRUZXh0dXJlQ29vcmRpbmF0ZXMucG9zaXRpb25zW2ldLnk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnN0IHAgPSBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVZlY3RvcigKICAgICAgICAgICAgdGV4dHVyZU1hdHJpeCwKICAgICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICAgIHNjcmF0Y2hQb3NpdGlvbgogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHN0ID0gcHJvamVjdFBvaW50VG8yRChwLCBzdFNjcmF0Y2gpOwogICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0LnN1YnRyYWN0KHN0LCBzdE9yaWdpbiwgc3QpOwogICAgICAgICAgY29uc3Qgc3R4ID0gTWF0aF9kZWZhdWx0LmNsYW1wKHN0LnggLyBib3VuZGluZ1JlY3RhbmdsZS53aWR0aCwgMCwgMSk7CiAgICAgICAgICBjb25zdCBzdHkgPSBNYXRoX2RlZmF1bHQuY2xhbXAoc3QueSAvIGJvdW5kaW5nUmVjdGFuZ2xlLmhlaWdodCwgMCwgMSk7CiAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbc3RJbmRleCsrXSA9IHN0eDsKICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlc1tzdEluZGV4KytdID0gc3R5OwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSBub3JtYWwyLng7CiAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IG5vcm1hbDIueTsKICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gbm9ybWFsMi56OwogICAgICB9CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQueDsKICAgICAgICB0YW5nZW50c1t0YW5nZW50SW5kZXgrK10gPSB0YW5nZW50Lnk7CiAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gdGFuZ2VudC56OwogICAgICB9CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgYml0YW5nZW50c1tiaXRhbmdlbnRJbmRleCsrXSA9IGJpdGFuZ2VudC54OwogICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQueTsKICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lno7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoKTsKICAgIGlmICh2ZXJ0ZXhGb3JtYXQucG9zaXRpb24pIHsKICAgICAgYXR0cmlidXRlcy5wb3NpdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IGZsYXRQb3NpdGlvbnMKICAgICAgfSk7CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICBhdHRyaWJ1dGVzLm5vcm1hbCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgIHZhbHVlczogbm9ybWFscwogICAgICB9KTsKICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICBhdHRyaWJ1dGVzLnRhbmdlbnQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IHRhbmdlbnRzCiAgICAgIH0pOwogICAgfQogICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgYXR0cmlidXRlcy5iaXRhbmdlbnQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IGJpdGFuZ2VudHMKICAgICAgfSk7CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgIGF0dHJpYnV0ZXMuc3QgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMiwKICAgICAgICB2YWx1ZXM6IHRleHR1cmVDb29yZGluYXRlcwogICAgICB9KTsKICAgIH0KICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgIGF0dHJpYnV0ZXMsCiAgICAgIGluZGljZXM6IG5ld0luZGljZXMsCiAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5UUklBTkdMRVMKICAgIH0pOwogIH0KICBmdW5jdGlvbiBDb3BsYW5hclBvbHlnb25HZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IHBvbHlnb25IaWVyYXJjaHkgPSBvcHRpb25zLnBvbHlnb25IaWVyYXJjaHk7CiAgICBjb25zdCB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSBvcHRpb25zLnRleHR1cmVDb29yZGluYXRlczsKICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgib3B0aW9ucy5wb2x5Z29uSGllcmFyY2h5IiwgcG9seWdvbkhpZXJhcmNoeSk7CiAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnZlcnRleEZvcm1hdCwgVmVydGV4Rm9ybWF0X2RlZmF1bHQuREVGQVVMVCk7CiAgICB0aGlzLl92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSh2ZXJ0ZXhGb3JtYXQpOwogICAgdGhpcy5fcG9seWdvbkhpZXJhcmNoeSA9IHBvbHlnb25IaWVyYXJjaHk7CiAgICB0aGlzLl9zdFJvdGF0aW9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5zdFJvdGF0aW9uLCAwKTsKICAgIHRoaXMuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKAogICAgICBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuV0dTODQpCiAgICApOwogICAgdGhpcy5fd29ya2VyTmFtZSA9ICJjcmVhdGVDb3BsYW5hclBvbHlnb25HZW9tZXRyeSI7CiAgICB0aGlzLl90ZXh0dXJlQ29vcmRpbmF0ZXMgPSB0ZXh0dXJlQ29vcmRpbmF0ZXM7CiAgICB0aGlzLnBhY2tlZExlbmd0aCA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlSGllcmFyY2h5UGFja2VkTGVuZ3RoKAogICAgICBwb2x5Z29uSGllcmFyY2h5LAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQKICAgICkgKyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyAoZGVmaW5lZF9kZWZhdWx0KHRleHR1cmVDb29yZGluYXRlcykgPyBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZUhpZXJhcmNoeVBhY2tlZExlbmd0aCgKICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzLAogICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQKICAgICkgOiAxKSArIDI7CiAgfQogIHZhciBzY3JhdGNoUG9zaXRpb24sIHNjcmF0Y2hCUiwgc3RTY3JhdGNoLCB0ZXh0dXJlQ29vcmRpbmF0ZXNPcmlnaW4sIHNjcmF0Y2hOb3JtYWw0LCBzY3JhdGNoVGFuZ2VudDIsIHNjcmF0Y2hCaXRhbmdlbnQyLCBjZW50ZXJTY3JhdGNoLCBheGlzMVNjcmF0Y2gsIGF4aXMyU2NyYXRjaCwgcXVhdGVybmlvblNjcmF0Y2gyLCB0ZXh0dXJlTWF0cml4U2NyYXRjaDIsIHRhbmdlbnRSb3RhdGlvblNjcmF0Y2gsIHN1cmZhY2VOb3JtYWxTY3JhdGNoLCBzY3JhdGNoRWxsaXBzb2lkMywgc2NyYXRjaFZlcnRleEZvcm1hdDMsIHNjcmF0Y2hPcHRpb25zNywgQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9Db3BsYW5hclBvbHlnb25HZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2FycmF5UmVtb3ZlRHVwbGljYXRlcygpOwogICAgICBpbml0X0JvdW5kaW5nUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9Db3BsYW5hclBvbHlnb25HZW9tZXRyeUxpYnJhcnkoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X0dlb21ldHJ5SW5zdGFuY2UoKTsKICAgICAgaW5pdF9HZW9tZXRyeVBpcGVsaW5lKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9NYXRyaXgzKCk7CiAgICAgIGluaXRfUG9seWdvbkdlb21ldHJ5TGlicmFyeSgpOwogICAgICBpbml0X1BvbHlnb25QaXBlbGluZSgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgaW5pdF9RdWF0ZXJuaW9uKCk7CiAgICAgIGluaXRfVmVydGV4Rm9ybWF0KCk7CiAgICAgIHNjcmF0Y2hQb3NpdGlvbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEJSID0gbmV3IEJvdW5kaW5nUmVjdGFuZ2xlX2RlZmF1bHQoKTsKICAgICAgc3RTY3JhdGNoID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNPcmlnaW4gPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hOb3JtYWw0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoVGFuZ2VudDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hCaXRhbmdlbnQyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjZW50ZXJTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBheGlzMVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGF4aXMyU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcXVhdGVybmlvblNjcmF0Y2gyID0gbmV3IFF1YXRlcm5pb25fZGVmYXVsdCgpOwogICAgICB0ZXh0dXJlTWF0cml4U2NyYXRjaDIgPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIHRhbmdlbnRSb3RhdGlvblNjcmF0Y2ggPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIHN1cmZhY2VOb3JtYWxTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBDb3BsYW5hclBvbHlnb25HZW9tZXRyeS5mcm9tUG9zaXRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgib3B0aW9ucy5wb3NpdGlvbnMiLCBvcHRpb25zLnBvc2l0aW9ucyk7CiAgICAgICAgY29uc3QgbmV3T3B0aW9ucyA9IHsKICAgICAgICAgIHBvbHlnb25IaWVyYXJjaHk6IHsKICAgICAgICAgICAgcG9zaXRpb25zOiBvcHRpb25zLnBvc2l0aW9ucwogICAgICAgICAgfSwKICAgICAgICAgIHZlcnRleEZvcm1hdDogb3B0aW9ucy52ZXJ0ZXhGb3JtYXQsCiAgICAgICAgICBzdFJvdGF0aW9uOiBvcHRpb25zLnN0Um90YXRpb24sCiAgICAgICAgICBlbGxpcHNvaWQ6IG9wdGlvbnMuZWxsaXBzb2lkLAogICAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzOiBvcHRpb25zLnRleHR1cmVDb29yZGluYXRlcwogICAgICAgIH07CiAgICAgICAgcmV0dXJuIG5ldyBDb3BsYW5hclBvbHlnb25HZW9tZXRyeShuZXdPcHRpb25zKTsKICAgICAgfTsKICAgICAgQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5wYWNrUG9seWdvbkhpZXJhcmNoeSgKICAgICAgICAgIHZhbHVlLl9wb2x5Z29uSGllcmFyY2h5LAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0CiAgICAgICAgKTsKICAgICAgICBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrKHZhbHVlLl9lbGxpcHNvaWQsIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrKHZhbHVlLl92ZXJ0ZXhGb3JtYXQsIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3N0Um90YXRpb247CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh2YWx1ZS5fdGV4dHVyZUNvb3JkaW5hdGVzKSkgewogICAgICAgICAgc3RhcnRpbmdJbmRleCA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5wYWNrUG9seWdvbkhpZXJhcmNoeSgKICAgICAgICAgICAgdmFsdWUuX3RleHR1cmVDb29yZGluYXRlcywKICAgICAgICAgICAgYXJyYXksCiAgICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICAgIENhcnRlc2lhbjJfZGVmYXVsdAogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IC0xOwogICAgICAgIH0KICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUucGFja2VkTGVuZ3RoOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaEVsbGlwc29pZDMgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShFbGxpcHNvaWRfZGVmYXVsdC5VTklUX1NQSEVSRSk7CiAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQzID0gbmV3IFZlcnRleEZvcm1hdF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hPcHRpb25zNyA9IHsKICAgICAgICBwb2x5Z29uSGllcmFyY2h5OiB7fQogICAgICB9OwogICAgICBDb3BsYW5hclBvbHlnb25HZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgcG9seWdvbkhpZXJhcmNoeSA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC51bnBhY2tQb2x5Z29uSGllcmFyY2h5KAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0CiAgICAgICAgKTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gcG9seWdvbkhpZXJhcmNoeS5zdGFydGluZ0luZGV4OwogICAgICAgIGRlbGV0ZSBwb2x5Z29uSGllcmFyY2h5LnN0YXJ0aW5nSW5kZXg7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4LCBzY3JhdGNoRWxsaXBzb2lkMyk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdDMKICAgICAgICApOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IHN0Um90YXRpb24gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHRleHR1cmVDb29yZGluYXRlcyA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdID09PSAtMSA/IHZvaWQgMCA6IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC51bnBhY2tQb2x5Z29uSGllcmFyY2h5KAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0CiAgICAgICAgKTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHRleHR1cmVDb29yZGluYXRlcykpIHsKICAgICAgICAgIHN0YXJ0aW5nSW5kZXggPSB0ZXh0dXJlQ29vcmRpbmF0ZXMuc3RhcnRpbmdJbmRleDsKICAgICAgICAgIGRlbGV0ZSB0ZXh0dXJlQ29vcmRpbmF0ZXMuc3RhcnRpbmdJbmRleDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc3RhcnRpbmdJbmRleCsrOwogICAgICAgIH0KICAgICAgICBjb25zdCBwYWNrZWRMZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBDb3BsYW5hclBvbHlnb25HZW9tZXRyeShzY3JhdGNoT3B0aW9uczcpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuX3BvbHlnb25IaWVyYXJjaHkgPSBwb2x5Z29uSGllcmFyY2h5OwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLCByZXN1bHQuX2VsbGlwc29pZCk7CiAgICAgICAgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSh2ZXJ0ZXhGb3JtYXQsIHJlc3VsdC5fdmVydGV4Rm9ybWF0KTsKICAgICAgICByZXN1bHQuX3N0Um90YXRpb24gPSBzdFJvdGF0aW9uOwogICAgICAgIHJlc3VsdC5fdGV4dHVyZUNvb3JkaW5hdGVzID0gdGV4dHVyZUNvb3JkaW5hdGVzOwogICAgICAgIHJlc3VsdC5wYWNrZWRMZW5ndGggPSBwYWNrZWRMZW5ndGg7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihwb2x5Z29uR2VvbWV0cnkpIHsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBwb2x5Z29uR2VvbWV0cnkuX3ZlcnRleEZvcm1hdDsKICAgICAgICBjb25zdCBwb2x5Z29uSGllcmFyY2h5ID0gcG9seWdvbkdlb21ldHJ5Ll9wb2x5Z29uSGllcmFyY2h5OwogICAgICAgIGNvbnN0IHN0Um90YXRpb24gPSBwb2x5Z29uR2VvbWV0cnkuX3N0Um90YXRpb247CiAgICAgICAgY29uc3QgdGV4dHVyZUNvb3JkaW5hdGVzID0gcG9seWdvbkdlb21ldHJ5Ll90ZXh0dXJlQ29vcmRpbmF0ZXM7CiAgICAgICAgY29uc3QgaGFzVGV4dHVyZUNvb3JkaW5hdGVzID0gZGVmaW5lZF9kZWZhdWx0KHRleHR1cmVDb29yZGluYXRlcyk7CiAgICAgICAgbGV0IG91dGVyUG9zaXRpb25zID0gcG9seWdvbkhpZXJhcmNoeS5wb3NpdGlvbnM7CiAgICAgICAgb3V0ZXJQb3NpdGlvbnMgPSBhcnJheVJlbW92ZUR1cGxpY2F0ZXNfZGVmYXVsdCgKICAgICAgICAgIG91dGVyUG9zaXRpb25zLAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24sCiAgICAgICAgICB0cnVlCiAgICAgICAgKTsKICAgICAgICBpZiAob3V0ZXJQb3NpdGlvbnMubGVuZ3RoIDwgMykgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBsZXQgbm9ybWFsMiA9IHNjcmF0Y2hOb3JtYWw0OwogICAgICAgIGxldCB0YW5nZW50ID0gc2NyYXRjaFRhbmdlbnQyOwogICAgICAgIGxldCBiaXRhbmdlbnQgPSBzY3JhdGNoQml0YW5nZW50MjsKICAgICAgICBsZXQgYXhpczEgPSBheGlzMVNjcmF0Y2g7CiAgICAgICAgY29uc3QgYXhpczIgPSBheGlzMlNjcmF0Y2g7CiAgICAgICAgY29uc3QgdmFsaWRHZW9tZXRyeSA9IENvcGxhbmFyUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQcm9qZWN0VG8yREFyZ3VtZW50cygKICAgICAgICAgIG91dGVyUG9zaXRpb25zLAogICAgICAgICAgY2VudGVyU2NyYXRjaCwKICAgICAgICAgIGF4aXMxLAogICAgICAgICAgYXhpczIKICAgICAgICApOwogICAgICAgIGlmICghdmFsaWRHZW9tZXRyeSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgbm9ybWFsMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhheGlzMSwgYXhpczIsIG5vcm1hbDIpOwogICAgICAgIG5vcm1hbDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKG5vcm1hbDIsIG5vcm1hbDIpOwogICAgICAgIGlmICghQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICBjZW50ZXJTY3JhdGNoLAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjYKICAgICAgICApKSB7CiAgICAgICAgICBjb25zdCBzdXJmYWNlTm9ybWFsID0gcG9seWdvbkdlb21ldHJ5Ll9lbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKAogICAgICAgICAgICBjZW50ZXJTY3JhdGNoLAogICAgICAgICAgICBzdXJmYWNlTm9ybWFsU2NyYXRjaAogICAgICAgICAgKTsKICAgICAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KG5vcm1hbDIsIHN1cmZhY2VOb3JtYWwpIDwgMCkgewogICAgICAgICAgICBub3JtYWwyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShub3JtYWwyLCBub3JtYWwyKTsKICAgICAgICAgICAgYXhpczEgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGF4aXMxLCBheGlzMSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IHByb2plY3RQb2ludHMgPSBDb3BsYW5hclBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jcmVhdGVQcm9qZWN0UG9pbnRzVG8yREZ1bmN0aW9uKAogICAgICAgICAgY2VudGVyU2NyYXRjaCwKICAgICAgICAgIGF4aXMxLAogICAgICAgICAgYXhpczIKICAgICAgICApOwogICAgICAgIGNvbnN0IHByb2plY3RQb2ludCA9IENvcGxhbmFyUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNyZWF0ZVByb2plY3RQb2ludFRvMkRGdW5jdGlvbigKICAgICAgICAgIGNlbnRlclNjcmF0Y2gsCiAgICAgICAgICBheGlzMSwKICAgICAgICAgIGF4aXMyCiAgICAgICAgKTsKICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgICAgIHRhbmdlbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoYXhpczEsIHRhbmdlbnQpOwogICAgICAgIH0KICAgICAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgYml0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGF4aXMyLCBiaXRhbmdlbnQpOwogICAgICAgIH0KICAgICAgICBjb25zdCByZXN1bHRzID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnBvbHlnb25zRnJvbUhpZXJhcmNoeSgKICAgICAgICAgIHBvbHlnb25IaWVyYXJjaHksCiAgICAgICAgICBoYXNUZXh0dXJlQ29vcmRpbmF0ZXMsCiAgICAgICAgICBwcm9qZWN0UG9pbnRzLAogICAgICAgICAgZmFsc2UKICAgICAgICApOwogICAgICAgIGNvbnN0IGhpZXJhcmNoeSA9IHJlc3VsdHMuaGllcmFyY2h5OwogICAgICAgIGNvbnN0IHBvbHlnb25zID0gcmVzdWx0cy5wb2x5Z29uczsKICAgICAgICBjb25zdCBkdW1teUZ1bmN0aW9uID0gZnVuY3Rpb24oaWRlbnRpdHkpIHsKICAgICAgICAgIHJldHVybiBpZGVudGl0eTsKICAgICAgICB9OwogICAgICAgIGNvbnN0IHRleHR1cmVDb29yZGluYXRlUG9seWdvbnMgPSBoYXNUZXh0dXJlQ29vcmRpbmF0ZXMgPyBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQucG9seWdvbnNGcm9tSGllcmFyY2h5KAogICAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzLAogICAgICAgICAgdHJ1ZSwKICAgICAgICAgIGR1bW15RnVuY3Rpb24sCiAgICAgICAgICBmYWxzZQogICAgICAgICkucG9seWdvbnMgOiB2b2lkIDA7CiAgICAgICAgaWYgKGhpZXJhcmNoeS5sZW5ndGggPT09IDApIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgb3V0ZXJQb3NpdGlvbnMgPSBoaWVyYXJjaHlbMF0ub3V0ZXJSaW5nOwogICAgICAgIGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tUG9pbnRzKG91dGVyUG9zaXRpb25zKTsKICAgICAgICBjb25zdCBib3VuZGluZ1JlY3RhbmdsZSA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlQm91bmRpbmdSZWN0YW5nbGUoCiAgICAgICAgICBub3JtYWwyLAogICAgICAgICAgcHJvamVjdFBvaW50LAogICAgICAgICAgb3V0ZXJQb3NpdGlvbnMsCiAgICAgICAgICBzdFJvdGF0aW9uLAogICAgICAgICAgc2NyYXRjaEJSCiAgICAgICAgKTsKICAgICAgICBjb25zdCBnZW9tZXRyaWVzID0gW107CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2x5Z29ucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgY29uc3QgZ2VvbWV0cnlJbnN0YW5jZSA9IG5ldyBHZW9tZXRyeUluc3RhbmNlX2RlZmF1bHQoewogICAgICAgICAgICBnZW9tZXRyeTogY3JlYXRlR2VvbWV0cnlGcm9tUG9seWdvbigKICAgICAgICAgICAgICBwb2x5Z29uc1tpXSwKICAgICAgICAgICAgICB2ZXJ0ZXhGb3JtYXQsCiAgICAgICAgICAgICAgYm91bmRpbmdSZWN0YW5nbGUsCiAgICAgICAgICAgICAgc3RSb3RhdGlvbiwKICAgICAgICAgICAgICBoYXNUZXh0dXJlQ29vcmRpbmF0ZXMgPyB0ZXh0dXJlQ29vcmRpbmF0ZVBvbHlnb25zW2ldIDogdm9pZCAwLAogICAgICAgICAgICAgIHByb2plY3RQb2ludCwKICAgICAgICAgICAgICBub3JtYWwyLAogICAgICAgICAgICAgIHRhbmdlbnQsCiAgICAgICAgICAgICAgYml0YW5nZW50CiAgICAgICAgICAgICkKICAgICAgICAgIH0pOwogICAgICAgICAgZ2VvbWV0cmllcy5wdXNoKGdlb21ldHJ5SW5zdGFuY2UpOwogICAgICAgIH0KICAgICAgICBjb25zdCBnZW9tZXRyeSA9IEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5jb21iaW5lSW5zdGFuY2VzKGdlb21ldHJpZXMpWzBdOwogICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzID0gbmV3IEZsb2F0NjRBcnJheSgKICAgICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzCiAgICAgICAgKTsKICAgICAgICBnZW9tZXRyeS5pbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGggLyAzLAogICAgICAgICAgZ2VvbWV0cnkuaW5kaWNlcwogICAgICAgICk7CiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICAgICAgaWYgKCF2ZXJ0ZXhGb3JtYXQucG9zaXRpb24pIHsKICAgICAgICAgIGRlbGV0ZSBhdHRyaWJ1dGVzLnBvc2l0aW9uOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXM6IGdlb21ldHJ5LmluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBnZW9tZXRyeS5wcmltaXRpdmVUeXBlLAogICAgICAgICAgYm91bmRpbmdTcGhlcmUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnlfZGVmYXVsdCA9IENvcGxhbmFyUG9seWdvbkdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZUNvcGxhbmFyUG9seWdvbkdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZUNvcGxhbmFyUG9seWdvbkdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVDb3BsYW5hclBvbHlnb25HZW9tZXRyeShwb2x5Z29uR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIHBvbHlnb25HZW9tZXRyeSA9IENvcGxhbmFyUG9seWdvbkdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKHBvbHlnb25HZW9tZXRyeSwgb2Zmc2V0KTsKICAgIH0KICAgIHJldHVybiBDb3BsYW5hclBvbHlnb25HZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KHBvbHlnb25HZW9tZXRyeSk7CiAgfQogIHZhciBjcmVhdGVDb3BsYW5hclBvbHlnb25HZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZUNvcGxhbmFyUG9seWdvbkdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVDb3BsYW5hclBvbHlnb25HZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnkoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGNyZWF0ZUNvcGxhbmFyUG9seWdvbkdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVDb3BsYW5hclBvbHlnb25HZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeS5qcwogIGZ1bmN0aW9uIGNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9ucyhwb3NpdGlvbnMpIHsKICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICBjb25zdCBmbGF0UG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShsZW5ndGggKiAzKTsKICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShsZW5ndGgsIGxlbmd0aCAqIDIpOwogICAgbGV0IHBvc2l0aW9uSW5kZXggPSAwOwogICAgbGV0IGluZGV4ID0gMDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbnNbaV07CiAgICAgIGZsYXRQb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHBvc2l0aW9uLng7CiAgICAgIGZsYXRQb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHBvc2l0aW9uLnk7CiAgICAgIGZsYXRQb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHBvc2l0aW9uLno7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gKGkgKyAxKSAlIGxlbmd0aDsKICAgIH0KICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoewogICAgICBwb3NpdGlvbjogbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgIHZhbHVlczogZmxhdFBvc2l0aW9ucwogICAgICB9KQogICAgfSk7CiAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICBhdHRyaWJ1dGVzLAogICAgICBpbmRpY2VzLAogICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuTElORVMKICAgIH0pOwogIH0KICBmdW5jdGlvbiBDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCBwb2x5Z29uSGllcmFyY2h5ID0gb3B0aW9ucy5wb2x5Z29uSGllcmFyY2h5OwogICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJvcHRpb25zLnBvbHlnb25IaWVyYXJjaHkiLCBwb2x5Z29uSGllcmFyY2h5KTsKICAgIHRoaXMuX3BvbHlnb25IaWVyYXJjaHkgPSBwb2x5Z29uSGllcmFyY2h5OwogICAgdGhpcy5fd29ya2VyTmFtZSA9ICJjcmVhdGVDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnkiOwogICAgdGhpcy5wYWNrZWRMZW5ndGggPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZUhpZXJhcmNoeVBhY2tlZExlbmd0aCgKICAgICAgcG9seWdvbkhpZXJhcmNoeSwKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0CiAgICApICsgMTsKICB9CiAgdmFyIHNjcmF0Y2hPcHRpb25zOCwgQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Db3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2FycmF5UmVtb3ZlRHVwbGljYXRlcygpOwogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9Db3BsYW5hclBvbHlnb25HZW9tZXRyeUxpYnJhcnkoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X0dlb21ldHJ5SW5zdGFuY2UoKTsKICAgICAgaW5pdF9HZW9tZXRyeVBpcGVsaW5lKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X1BvbHlnb25HZW9tZXRyeUxpYnJhcnkoKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIENvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeS5mcm9tUG9zaXRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgib3B0aW9ucy5wb3NpdGlvbnMiLCBvcHRpb25zLnBvc2l0aW9ucyk7CiAgICAgICAgY29uc3QgbmV3T3B0aW9ucyA9IHsKICAgICAgICAgIHBvbHlnb25IaWVyYXJjaHk6IHsKICAgICAgICAgICAgcG9zaXRpb25zOiBvcHRpb25zLnBvc2l0aW9ucwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgcmV0dXJuIG5ldyBDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnkobmV3T3B0aW9ucyk7CiAgICAgIH07CiAgICAgIENvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnBhY2tQb2x5Z29uSGllcmFyY2h5KAogICAgICAgICAgdmFsdWUuX3BvbHlnb25IaWVyYXJjaHksCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQKICAgICAgICApOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gdmFsdWUucGFja2VkTGVuZ3RoOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaE9wdGlvbnM4ID0gewogICAgICAgIHBvbHlnb25IaWVyYXJjaHk6IHt9CiAgICAgIH07CiAgICAgIENvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgcG9seWdvbkhpZXJhcmNoeSA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC51bnBhY2tQb2x5Z29uSGllcmFyY2h5KAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0CiAgICAgICAgKTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gcG9seWdvbkhpZXJhcmNoeS5zdGFydGluZ0luZGV4OwogICAgICAgIGRlbGV0ZSBwb2x5Z29uSGllcmFyY2h5LnN0YXJ0aW5nSW5kZXg7CiAgICAgICAgY29uc3QgcGFja2VkTGVuZ3RoID0gYXJyYXlbc3RhcnRpbmdJbmRleF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeShzY3JhdGNoT3B0aW9uczgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuX3BvbHlnb25IaWVyYXJjaHkgPSBwb2x5Z29uSGllcmFyY2h5OwogICAgICAgIHJlc3VsdC5wYWNrZWRMZW5ndGggPSBwYWNrZWRMZW5ndGg7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24ocG9seWdvbkdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgcG9seWdvbkhpZXJhcmNoeSA9IHBvbHlnb25HZW9tZXRyeS5fcG9seWdvbkhpZXJhcmNoeTsKICAgICAgICBsZXQgb3V0ZXJQb3NpdGlvbnMgPSBwb2x5Z29uSGllcmFyY2h5LnBvc2l0aW9uczsKICAgICAgICBvdXRlclBvc2l0aW9ucyA9IGFycmF5UmVtb3ZlRHVwbGljYXRlc19kZWZhdWx0KAogICAgICAgICAgb3V0ZXJQb3NpdGlvbnMsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbiwKICAgICAgICAgIHRydWUKICAgICAgICApOwogICAgICAgIGlmIChvdXRlclBvc2l0aW9ucy5sZW5ndGggPCAzKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IGlzVmFsaWQgPSBDb3BsYW5hclBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC52YWxpZE91dGxpbmUob3V0ZXJQb3NpdGlvbnMpOwogICAgICAgIGlmICghaXNWYWxpZCkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgY29uc3QgcG9seWdvbnMgPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQucG9seWdvbk91dGxpbmVzRnJvbUhpZXJhcmNoeSgKICAgICAgICAgIHBvbHlnb25IaWVyYXJjaHksCiAgICAgICAgICBmYWxzZQogICAgICAgICk7CiAgICAgICAgaWYgKHBvbHlnb25zLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgY29uc3QgZ2VvbWV0cmllcyA9IFtdOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9seWdvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGNvbnN0IGdlb21ldHJ5SW5zdGFuY2UgPSBuZXcgR2VvbWV0cnlJbnN0YW5jZV9kZWZhdWx0KHsKICAgICAgICAgICAgZ2VvbWV0cnk6IGNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9ucyhwb2x5Z29uc1tpXSkKICAgICAgICAgIH0pOwogICAgICAgICAgZ2VvbWV0cmllcy5wdXNoKGdlb21ldHJ5SW5zdGFuY2UpOwogICAgICAgIH0KICAgICAgICBjb25zdCBnZW9tZXRyeSA9IEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5jb21iaW5lSW5zdGFuY2VzKGdlb21ldHJpZXMpWzBdOwogICAgICAgIGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tUG9pbnRzKHBvbHlnb25IaWVyYXJjaHkucG9zaXRpb25zKTsKICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlczogZ2VvbWV0cnkuYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXM6IGdlb21ldHJ5LmluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBnZW9tZXRyeS5wcmltaXRpdmVUeXBlLAogICAgICAgICAgYm91bmRpbmdTcGhlcmUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnkocG9seWdvbkdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICBwb2x5Z29uR2VvbWV0cnkgPSBDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soCiAgICAgICAgcG9seWdvbkdlb21ldHJ5LAogICAgICAgIG9mZnNldAogICAgICApOwogICAgfQogICAgcG9seWdvbkdlb21ldHJ5Ll9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShwb2x5Z29uR2VvbWV0cnkuX2VsbGlwc29pZCk7CiAgICByZXR1cm4gQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkocG9seWdvbkdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZUNvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZUNvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Db3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnkoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGNyZWF0ZUNvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeV9kZWZhdWx0ID0gY3JlYXRlQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ29ybmVyVHlwZS5qcwogIHZhciBDb3JuZXJUeXBlLCBDb3JuZXJUeXBlX2RlZmF1bHQ7CiAgdmFyIGluaXRfQ29ybmVyVHlwZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ29ybmVyVHlwZS5qcyIoKSB7CiAgICAgIENvcm5lclR5cGUgPSB7CiAgICAgICAgLyoqCiAgICAgICAgICogPGltZyBzcmM9IkltYWdlcy9Db3JuZXJUeXBlUm91bmRlZC5wbmciIHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyIgd2lkdGg9IjE4NiIgaGVpZ2h0PSIxODkiIC8+CiAgICAgICAgICoKICAgICAgICAgKiBDb3JuZXIgaGFzIGEgc21vb3RoIGVkZ2UuCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBST1VOREVEOiAwLAogICAgICAgIC8qKgogICAgICAgICAqIDxpbWcgc3JjPSJJbWFnZXMvQ29ybmVyVHlwZU1pdGVyZWQucG5nIiBzdHlsZT0idmVydGljYWwtYWxpZ246IG1pZGRsZTsiIHdpZHRoPSIxODYiIGhlaWdodD0iMTg5IiAvPgogICAgICAgICAqCiAgICAgICAgICogQ29ybmVyIHBvaW50IGlzIHRoZSBpbnRlcnNlY3Rpb24gb2YgYWRqYWNlbnQgZWRnZXMuCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBNSVRFUkVEOiAxLAogICAgICAgIC8qKgogICAgICAgICAqIDxpbWcgc3JjPSJJbWFnZXMvQ29ybmVyVHlwZUJldmVsZWQucG5nIiBzdHlsZT0idmVydGljYWwtYWxpZ246IG1pZGRsZTsiIHdpZHRoPSIxODYiIGhlaWdodD0iMTg5IiAvPgogICAgICAgICAqCiAgICAgICAgICogQ29ybmVyIGlzIGNsaXBwZWQuCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBCRVZFTEVEOiAyCiAgICAgIH07CiAgICAgIENvcm5lclR5cGVfZGVmYXVsdCA9IE9iamVjdC5mcmVlemUoQ29ybmVyVHlwZSk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbGxpcHNvaWRHZW9kZXNpYy5qcwogIGZ1bmN0aW9uIHNldENvbnN0YW50cyhlbGxpcHNvaWRHZW9kZXNpYzMpIHsKICAgIGNvbnN0IHVTcXVhcmVkID0gZWxsaXBzb2lkR2VvZGVzaWMzLl91U3F1YXJlZDsKICAgIGNvbnN0IGEzID0gZWxsaXBzb2lkR2VvZGVzaWMzLl9lbGxpcHNvaWQubWF4aW11bVJhZGl1czsKICAgIGNvbnN0IGIgPSBlbGxpcHNvaWRHZW9kZXNpYzMuX2VsbGlwc29pZC5taW5pbXVtUmFkaXVzOwogICAgY29uc3QgZiA9IChhMyAtIGIpIC8gYTM7CiAgICBjb25zdCBjb3NpbmVIZWFkaW5nID0gTWF0aC5jb3MoZWxsaXBzb2lkR2VvZGVzaWMzLl9zdGFydEhlYWRpbmcpOwogICAgY29uc3Qgc2luZUhlYWRpbmcgPSBNYXRoLnNpbihlbGxpcHNvaWRHZW9kZXNpYzMuX3N0YXJ0SGVhZGluZyk7CiAgICBjb25zdCB0YW5VID0gKDEgLSBmKSAqIE1hdGgudGFuKGVsbGlwc29pZEdlb2Rlc2ljMy5fc3RhcnQubGF0aXR1ZGUpOwogICAgY29uc3QgY29zaW5lVSA9IDEgLyBNYXRoLnNxcnQoMSArIHRhblUgKiB0YW5VKTsKICAgIGNvbnN0IHNpbmVVID0gY29zaW5lVSAqIHRhblU7CiAgICBjb25zdCBzaWdtYSA9IE1hdGguYXRhbjIodGFuVSwgY29zaW5lSGVhZGluZyk7CiAgICBjb25zdCBzaW5lQWxwaGEgPSBjb3NpbmVVICogc2luZUhlYWRpbmc7CiAgICBjb25zdCBzaW5lU3F1YXJlZEFscGhhID0gc2luZUFscGhhICogc2luZUFscGhhOwogICAgY29uc3QgY29zaW5lU3F1YXJlZEFscGhhID0gMSAtIHNpbmVTcXVhcmVkQWxwaGE7CiAgICBjb25zdCBjb3NpbmVBbHBoYSA9IE1hdGguc3FydChjb3NpbmVTcXVhcmVkQWxwaGEpOwogICAgY29uc3QgdTJPdmVyNCA9IHVTcXVhcmVkIC8gNDsKICAgIGNvbnN0IHU0T3ZlcjE2ID0gdTJPdmVyNCAqIHUyT3ZlcjQ7CiAgICBjb25zdCB1Nk92ZXI2NCA9IHU0T3ZlcjE2ICogdTJPdmVyNDsKICAgIGNvbnN0IHU4T3ZlcjI1NiA9IHU0T3ZlcjE2ICogdTRPdmVyMTY7CiAgICBjb25zdCBhMCA9IDEgKyB1Mk92ZXI0IC0gMyAqIHU0T3ZlcjE2IC8gNCArIDUgKiB1Nk92ZXI2NCAvIDQgLSAxNzUgKiB1OE92ZXIyNTYgLyA2NDsKICAgIGNvbnN0IGExID0gMSAtIHUyT3ZlcjQgKyAxNSAqIHU0T3ZlcjE2IC8gOCAtIDM1ICogdTZPdmVyNjQgLyA4OwogICAgY29uc3QgYTIyID0gMSAtIDMgKiB1Mk92ZXI0ICsgMzUgKiB1NE92ZXIxNiAvIDQ7CiAgICBjb25zdCBhMzIgPSAxIC0gNSAqIHUyT3ZlcjQ7CiAgICBjb25zdCBkaXN0YW5jZVJhdGlvID0gYTAgKiBzaWdtYSAtIGExICogTWF0aC5zaW4oMiAqIHNpZ21hKSAqIHUyT3ZlcjQgLyAyIC0gYTIyICogTWF0aC5zaW4oNCAqIHNpZ21hKSAqIHU0T3ZlcjE2IC8gMTYgLSBhMzIgKiBNYXRoLnNpbig2ICogc2lnbWEpICogdTZPdmVyNjQgLyA0OCAtIE1hdGguc2luKDggKiBzaWdtYSkgKiA1ICogdThPdmVyMjU2IC8gNTEyOwogICAgY29uc3QgY29uc3RhbnRzID0gZWxsaXBzb2lkR2VvZGVzaWMzLl9jb25zdGFudHM7CiAgICBjb25zdGFudHMuYSA9IGEzOwogICAgY29uc3RhbnRzLmIgPSBiOwogICAgY29uc3RhbnRzLmYgPSBmOwogICAgY29uc3RhbnRzLmNvc2luZUhlYWRpbmcgPSBjb3NpbmVIZWFkaW5nOwogICAgY29uc3RhbnRzLnNpbmVIZWFkaW5nID0gc2luZUhlYWRpbmc7CiAgICBjb25zdGFudHMudGFuVSA9IHRhblU7CiAgICBjb25zdGFudHMuY29zaW5lVSA9IGNvc2luZVU7CiAgICBjb25zdGFudHMuc2luZVUgPSBzaW5lVTsKICAgIGNvbnN0YW50cy5zaWdtYSA9IHNpZ21hOwogICAgY29uc3RhbnRzLnNpbmVBbHBoYSA9IHNpbmVBbHBoYTsKICAgIGNvbnN0YW50cy5zaW5lU3F1YXJlZEFscGhhID0gc2luZVNxdWFyZWRBbHBoYTsKICAgIGNvbnN0YW50cy5jb3NpbmVTcXVhcmVkQWxwaGEgPSBjb3NpbmVTcXVhcmVkQWxwaGE7CiAgICBjb25zdGFudHMuY29zaW5lQWxwaGEgPSBjb3NpbmVBbHBoYTsKICAgIGNvbnN0YW50cy51Mk92ZXI0ID0gdTJPdmVyNDsKICAgIGNvbnN0YW50cy51NE92ZXIxNiA9IHU0T3ZlcjE2OwogICAgY29uc3RhbnRzLnU2T3ZlcjY0ID0gdTZPdmVyNjQ7CiAgICBjb25zdGFudHMudThPdmVyMjU2ID0gdThPdmVyMjU2OwogICAgY29uc3RhbnRzLmEwID0gYTA7CiAgICBjb25zdGFudHMuYTEgPSBhMTsKICAgIGNvbnN0YW50cy5hMiA9IGEyMjsKICAgIGNvbnN0YW50cy5hMyA9IGEzMjsKICAgIGNvbnN0YW50cy5kaXN0YW5jZVJhdGlvID0gZGlzdGFuY2VSYXRpbzsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZUMoZiwgY29zaW5lU3F1YXJlZEFscGhhKSB7CiAgICByZXR1cm4gZiAqIGNvc2luZVNxdWFyZWRBbHBoYSAqICg0ICsgZiAqICg0IC0gMyAqIGNvc2luZVNxdWFyZWRBbHBoYSkpIC8gMTY7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVEZWx0YUxhbWJkYShmLCBzaW5lQWxwaGEsIGNvc2luZVNxdWFyZWRBbHBoYSwgc2lnbWEsIHNpbmVTaWdtYSwgY29zaW5lU2lnbWEsIGNvc2luZVR3aWNlU2lnbWFNaWRwb2ludCkgewogICAgY29uc3QgQyA9IGNvbXB1dGVDKGYsIGNvc2luZVNxdWFyZWRBbHBoYSk7CiAgICByZXR1cm4gKDEgLSBDKSAqIGYgKiBzaW5lQWxwaGEgKiAoc2lnbWEgKyBDICogc2luZVNpZ21hICogKGNvc2luZVR3aWNlU2lnbWFNaWRwb2ludCArIEMgKiBjb3NpbmVTaWdtYSAqICgyICogY29zaW5lVHdpY2VTaWdtYU1pZHBvaW50ICogY29zaW5lVHdpY2VTaWdtYU1pZHBvaW50IC0gMSkpKTsKICB9CiAgZnVuY3Rpb24gdmluY2VudHlJbnZlcnNlRm9ybXVsYShlbGxpcHNvaWRHZW9kZXNpYzMsIG1ham9yLCBtaW5vciwgZmlyc3RMb25naXR1ZGUsIGZpcnN0TGF0aXR1ZGUsIHNlY29uZExvbmdpdHVkZSwgc2Vjb25kTGF0aXR1ZGUpIHsKICAgIGNvbnN0IGVmZiA9IChtYWpvciAtIG1pbm9yKSAvIG1ham9yOwogICAgY29uc3QgbCA9IHNlY29uZExvbmdpdHVkZSAtIGZpcnN0TG9uZ2l0dWRlOwogICAgY29uc3QgdTEyID0gTWF0aC5hdGFuKCgxIC0gZWZmKSAqIE1hdGgudGFuKGZpcnN0TGF0aXR1ZGUpKTsKICAgIGNvbnN0IHUyMiA9IE1hdGguYXRhbigoMSAtIGVmZikgKiBNYXRoLnRhbihzZWNvbmRMYXRpdHVkZSkpOwogICAgY29uc3QgY29zaW5lVTEgPSBNYXRoLmNvcyh1MTIpOwogICAgY29uc3Qgc2luZVUxID0gTWF0aC5zaW4odTEyKTsKICAgIGNvbnN0IGNvc2luZVUyID0gTWF0aC5jb3ModTIyKTsKICAgIGNvbnN0IHNpbmVVMiA9IE1hdGguc2luKHUyMik7CiAgICBjb25zdCBjYyA9IGNvc2luZVUxICogY29zaW5lVTI7CiAgICBjb25zdCBjcyA9IGNvc2luZVUxICogc2luZVUyOwogICAgY29uc3Qgc3MgPSBzaW5lVTEgKiBzaW5lVTI7CiAgICBjb25zdCBzYyA9IHNpbmVVMSAqIGNvc2luZVUyOwogICAgbGV0IGxhbWJkYSA9IGw7CiAgICBsZXQgbGFtYmRhRG90ID0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgIGxldCBjb3NpbmVMYW1iZGEgPSBNYXRoLmNvcyhsYW1iZGEpOwogICAgbGV0IHNpbmVMYW1iZGEgPSBNYXRoLnNpbihsYW1iZGEpOwogICAgbGV0IHNpZ21hOwogICAgbGV0IGNvc2luZVNpZ21hOwogICAgbGV0IHNpbmVTaWdtYTsKICAgIGxldCBjb3NpbmVTcXVhcmVkQWxwaGE7CiAgICBsZXQgY29zaW5lVHdpY2VTaWdtYU1pZHBvaW50OwogICAgZG8gewogICAgICBjb3NpbmVMYW1iZGEgPSBNYXRoLmNvcyhsYW1iZGEpOwogICAgICBzaW5lTGFtYmRhID0gTWF0aC5zaW4obGFtYmRhKTsKICAgICAgY29uc3QgdGVtcCA9IGNzIC0gc2MgKiBjb3NpbmVMYW1iZGE7CiAgICAgIHNpbmVTaWdtYSA9IE1hdGguc3FydCgKICAgICAgICBjb3NpbmVVMiAqIGNvc2luZVUyICogc2luZUxhbWJkYSAqIHNpbmVMYW1iZGEgKyB0ZW1wICogdGVtcAogICAgICApOwogICAgICBjb3NpbmVTaWdtYSA9IHNzICsgY2MgKiBjb3NpbmVMYW1iZGE7CiAgICAgIHNpZ21hID0gTWF0aC5hdGFuMihzaW5lU2lnbWEsIGNvc2luZVNpZ21hKTsKICAgICAgbGV0IHNpbmVBbHBoYTsKICAgICAgaWYgKHNpbmVTaWdtYSA9PT0gMCkgewogICAgICAgIHNpbmVBbHBoYSA9IDA7CiAgICAgICAgY29zaW5lU3F1YXJlZEFscGhhID0gMTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzaW5lQWxwaGEgPSBjYyAqIHNpbmVMYW1iZGEgLyBzaW5lU2lnbWE7CiAgICAgICAgY29zaW5lU3F1YXJlZEFscGhhID0gMSAtIHNpbmVBbHBoYSAqIHNpbmVBbHBoYTsKICAgICAgfQogICAgICBsYW1iZGFEb3QgPSBsYW1iZGE7CiAgICAgIGNvc2luZVR3aWNlU2lnbWFNaWRwb2ludCA9IGNvc2luZVNpZ21hIC0gMiAqIHNzIC8gY29zaW5lU3F1YXJlZEFscGhhOwogICAgICBpZiAoIWlzRmluaXRlKGNvc2luZVR3aWNlU2lnbWFNaWRwb2ludCkpIHsKICAgICAgICBjb3NpbmVUd2ljZVNpZ21hTWlkcG9pbnQgPSAwOwogICAgICB9CiAgICAgIGxhbWJkYSA9IGwgKyBjb21wdXRlRGVsdGFMYW1iZGEoCiAgICAgICAgZWZmLAogICAgICAgIHNpbmVBbHBoYSwKICAgICAgICBjb3NpbmVTcXVhcmVkQWxwaGEsCiAgICAgICAgc2lnbWEsCiAgICAgICAgc2luZVNpZ21hLAogICAgICAgIGNvc2luZVNpZ21hLAogICAgICAgIGNvc2luZVR3aWNlU2lnbWFNaWRwb2ludAogICAgICApOwogICAgfSB3aGlsZSAoTWF0aC5hYnMobGFtYmRhIC0gbGFtYmRhRG90KSA+IE1hdGhfZGVmYXVsdC5FUFNJTE9OMTIpOwogICAgY29uc3QgdVNxdWFyZWQgPSBjb3NpbmVTcXVhcmVkQWxwaGEgKiAobWFqb3IgKiBtYWpvciAtIG1pbm9yICogbWlub3IpIC8gKG1pbm9yICogbWlub3IpOwogICAgY29uc3QgQSA9IDEgKyB1U3F1YXJlZCAqICg0MDk2ICsgdVNxdWFyZWQgKiAodVNxdWFyZWQgKiAoMzIwIC0gMTc1ICogdVNxdWFyZWQpIC0gNzY4KSkgLyAxNjM4NDsKICAgIGNvbnN0IEIgPSB1U3F1YXJlZCAqICgyNTYgKyB1U3F1YXJlZCAqICh1U3F1YXJlZCAqICg3NCAtIDQ3ICogdVNxdWFyZWQpIC0gMTI4KSkgLyAxMDI0OwogICAgY29uc3QgY29zaW5lU3F1YXJlZFR3aWNlU2lnbWFNaWRwb2ludCA9IGNvc2luZVR3aWNlU2lnbWFNaWRwb2ludCAqIGNvc2luZVR3aWNlU2lnbWFNaWRwb2ludDsKICAgIGNvbnN0IGRlbHRhU2lnbWEgPSBCICogc2luZVNpZ21hICogKGNvc2luZVR3aWNlU2lnbWFNaWRwb2ludCArIEIgKiAoY29zaW5lU2lnbWEgKiAoMiAqIGNvc2luZVNxdWFyZWRUd2ljZVNpZ21hTWlkcG9pbnQgLSAxKSAtIEIgKiBjb3NpbmVUd2ljZVNpZ21hTWlkcG9pbnQgKiAoNCAqIHNpbmVTaWdtYSAqIHNpbmVTaWdtYSAtIDMpICogKDQgKiBjb3NpbmVTcXVhcmVkVHdpY2VTaWdtYU1pZHBvaW50IC0gMykgLyA2KSAvIDQpOwogICAgY29uc3QgZGlzdGFuY2UgPSBtaW5vciAqIEEgKiAoc2lnbWEgLSBkZWx0YVNpZ21hKTsKICAgIGNvbnN0IHN0YXJ0SGVhZGluZyA9IE1hdGguYXRhbjIoCiAgICAgIGNvc2luZVUyICogc2luZUxhbWJkYSwKICAgICAgY3MgLSBzYyAqIGNvc2luZUxhbWJkYQogICAgKTsKICAgIGNvbnN0IGVuZEhlYWRpbmcgPSBNYXRoLmF0YW4yKGNvc2luZVUxICogc2luZUxhbWJkYSwgY3MgKiBjb3NpbmVMYW1iZGEgLSBzYyk7CiAgICBlbGxpcHNvaWRHZW9kZXNpYzMuX2Rpc3RhbmNlID0gZGlzdGFuY2U7CiAgICBlbGxpcHNvaWRHZW9kZXNpYzMuX3N0YXJ0SGVhZGluZyA9IHN0YXJ0SGVhZGluZzsKICAgIGVsbGlwc29pZEdlb2Rlc2ljMy5fZW5kSGVhZGluZyA9IGVuZEhlYWRpbmc7CiAgICBlbGxpcHNvaWRHZW9kZXNpYzMuX3VTcXVhcmVkID0gdVNxdWFyZWQ7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVQcm9wZXJ0aWVzMihlbGxpcHNvaWRHZW9kZXNpYzMsIHN0YXJ0LCBlbmQsIGVsbGlwc29pZCkgewogICAgY29uc3QgZmlyc3RDYXJ0ZXNpYW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oc3RhcnQsIHNjcmF0Y2hDYXJ0MjIpLAogICAgICBzY3JhdGNoQ2FydDEyCiAgICApOwogICAgY29uc3QgbGFzdENhcnRlc2lhbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgIGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihlbmQsIHNjcmF0Y2hDYXJ0MjIpLAogICAgICBzY3JhdGNoQ2FydDIyCiAgICApOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoCiAgICAgICJ2YWx1ZSIsCiAgICAgIE1hdGguYWJzKAogICAgICAgIE1hdGguYWJzKENhcnRlc2lhbjNfZGVmYXVsdC5hbmdsZUJldHdlZW4oZmlyc3RDYXJ0ZXNpYW4sIGxhc3RDYXJ0ZXNpYW4pKSAtIE1hdGguUEkKICAgICAgKSwKICAgICAgMC4wMTI1CiAgICApOwogICAgdmluY2VudHlJbnZlcnNlRm9ybXVsYSgKICAgICAgZWxsaXBzb2lkR2VvZGVzaWMzLAogICAgICBlbGxpcHNvaWQubWF4aW11bVJhZGl1cywKICAgICAgZWxsaXBzb2lkLm1pbmltdW1SYWRpdXMsCiAgICAgIHN0YXJ0LmxvbmdpdHVkZSwKICAgICAgc3RhcnQubGF0aXR1ZGUsCiAgICAgIGVuZC5sb25naXR1ZGUsCiAgICAgIGVuZC5sYXRpdHVkZQogICAgKTsKICAgIGVsbGlwc29pZEdlb2Rlc2ljMy5fc3RhcnQgPSBDYXJ0b2dyYXBoaWNfZGVmYXVsdC5jbG9uZSgKICAgICAgc3RhcnQsCiAgICAgIGVsbGlwc29pZEdlb2Rlc2ljMy5fc3RhcnQKICAgICk7CiAgICBlbGxpcHNvaWRHZW9kZXNpYzMuX2VuZCA9IENhcnRvZ3JhcGhpY19kZWZhdWx0LmNsb25lKGVuZCwgZWxsaXBzb2lkR2VvZGVzaWMzLl9lbmQpOwogICAgZWxsaXBzb2lkR2VvZGVzaWMzLl9zdGFydC5oZWlnaHQgPSAwOwogICAgZWxsaXBzb2lkR2VvZGVzaWMzLl9lbmQuaGVpZ2h0ID0gMDsKICAgIHNldENvbnN0YW50cyhlbGxpcHNvaWRHZW9kZXNpYzMpOwogIH0KICBmdW5jdGlvbiBFbGxpcHNvaWRHZW9kZXNpYyhzdGFydCwgZW5kLCBlbGxpcHNvaWQpIHsKICAgIGNvbnN0IGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChlbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LldHUzg0KTsKICAgIHRoaXMuX2VsbGlwc29pZCA9IGU7CiAgICB0aGlzLl9zdGFydCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgdGhpcy5fZW5kID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICB0aGlzLl9jb25zdGFudHMgPSB7fTsKICAgIHRoaXMuX3N0YXJ0SGVhZGluZyA9IHZvaWQgMDsKICAgIHRoaXMuX2VuZEhlYWRpbmcgPSB2b2lkIDA7CiAgICB0aGlzLl9kaXN0YW5jZSA9IHZvaWQgMDsKICAgIHRoaXMuX3VTcXVhcmVkID0gdm9pZCAwOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdChzdGFydCkgJiYgZGVmaW5lZF9kZWZhdWx0KGVuZCkpIHsKICAgICAgY29tcHV0ZVByb3BlcnRpZXMyKHRoaXMsIHN0YXJ0LCBlbmQsIGUpOwogICAgfQogIH0KICB2YXIgc2NyYXRjaENhcnQxMiwgc2NyYXRjaENhcnQyMiwgRWxsaXBzb2lkR2VvZGVzaWNfZGVmYXVsdDsKICB2YXIgaW5pdF9FbGxpcHNvaWRHZW9kZXNpYyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRWxsaXBzb2lkR2VvZGVzaWMuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIHNjcmF0Y2hDYXJ0MTIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0MjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEVsbGlwc29pZEdlb2Rlc2ljLnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIGVsbGlwc29pZC4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkR2VvZGVzaWMucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge0VsbGlwc29pZH0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBlbGxpcHNvaWQ6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbGxpcHNvaWQ7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBzdXJmYWNlIGRpc3RhbmNlIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgcG9pbnQKICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkR2VvZGVzaWMucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBzdXJmYWNlRGlzdGFuY2U6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiZGlzdGFuY2UiLCB0aGlzLl9kaXN0YW5jZSk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kaXN0YW5jZTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIGluaXRpYWwgcGxhbmV0b2RldGljIHBvaW50IG9uIHRoZSBwYXRoLgogICAgICAgICAqIEBtZW1iZXJvZiBFbGxpcHNvaWRHZW9kZXNpYy5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7Q2FydG9ncmFwaGljfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIHN0YXJ0OiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnQ7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBmaW5hbCBwbGFuZXRvZGV0aWMgcG9pbnQgb24gdGhlIHBhdGguCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZEdlb2Rlc2ljLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtDYXJ0b2dyYXBoaWN9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgZW5kOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fZW5kOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgaGVhZGluZyBhdCB0aGUgaW5pdGlhbCBwb2ludC4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkR2VvZGVzaWMucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBzdGFydEhlYWRpbmc6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiZGlzdGFuY2UiLCB0aGlzLl9kaXN0YW5jZSk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGFydEhlYWRpbmc7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBoZWFkaW5nIGF0IHRoZSBmaW5hbCBwb2ludC4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkR2VvZGVzaWMucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBlbmRIZWFkaW5nOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImRpc3RhbmNlIiwgdGhpcy5fZGlzdGFuY2UpOwogICAgICAgICAgICByZXR1cm4gdGhpcy5fZW5kSGVhZGluZzsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBFbGxpcHNvaWRHZW9kZXNpYy5wcm90b3R5cGUuc2V0RW5kUG9pbnRzID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgic3RhcnQiLCBzdGFydCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJlbmQiLCBlbmQpOwogICAgICAgIGNvbXB1dGVQcm9wZXJ0aWVzMih0aGlzLCBzdGFydCwgZW5kLCB0aGlzLl9lbGxpcHNvaWQpOwogICAgICB9OwogICAgICBFbGxpcHNvaWRHZW9kZXNpYy5wcm90b3R5cGUuaW50ZXJwb2xhdGVVc2luZ0ZyYWN0aW9uID0gZnVuY3Rpb24oZnJhY3Rpb24sIHJlc3VsdCkgewogICAgICAgIHJldHVybiB0aGlzLmludGVycG9sYXRlVXNpbmdTdXJmYWNlRGlzdGFuY2UoCiAgICAgICAgICB0aGlzLl9kaXN0YW5jZSAqIGZyYWN0aW9uLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkR2VvZGVzaWMucHJvdG90eXBlLmludGVycG9sYXRlVXNpbmdTdXJmYWNlRGlzdGFuY2UgPSBmdW5jdGlvbihkaXN0YW5jZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJkaXN0YW5jZSIsIHRoaXMuX2Rpc3RhbmNlKTsKICAgICAgICBjb25zdCBjb25zdGFudHMgPSB0aGlzLl9jb25zdGFudHM7CiAgICAgICAgY29uc3QgcyA9IGNvbnN0YW50cy5kaXN0YW5jZVJhdGlvICsgZGlzdGFuY2UgLyBjb25zdGFudHMuYjsKICAgICAgICBjb25zdCBjb3NpbmUyUyA9IE1hdGguY29zKDIgKiBzKTsKICAgICAgICBjb25zdCBjb3NpbmU0UyA9IE1hdGguY29zKDQgKiBzKTsKICAgICAgICBjb25zdCBjb3NpbmU2UyA9IE1hdGguY29zKDYgKiBzKTsKICAgICAgICBjb25zdCBzaW5lMlMgPSBNYXRoLnNpbigyICogcyk7CiAgICAgICAgY29uc3Qgc2luZTRTID0gTWF0aC5zaW4oNCAqIHMpOwogICAgICAgIGNvbnN0IHNpbmU2UyA9IE1hdGguc2luKDYgKiBzKTsKICAgICAgICBjb25zdCBzaW5lOFMgPSBNYXRoLnNpbig4ICogcyk7CiAgICAgICAgY29uc3QgczIgPSBzICogczsKICAgICAgICBjb25zdCBzMyA9IHMgKiBzMjsKICAgICAgICBjb25zdCB1OE92ZXIyNTYgPSBjb25zdGFudHMudThPdmVyMjU2OwogICAgICAgIGNvbnN0IHUyT3ZlcjQgPSBjb25zdGFudHMudTJPdmVyNDsKICAgICAgICBjb25zdCB1Nk92ZXI2NCA9IGNvbnN0YW50cy51Nk92ZXI2NDsKICAgICAgICBjb25zdCB1NE92ZXIxNiA9IGNvbnN0YW50cy51NE92ZXIxNjsKICAgICAgICBsZXQgc2lnbWEgPSAyICogczMgKiB1OE92ZXIyNTYgKiBjb3NpbmUyUyAvIDMgKyBzICogKDEgLSB1Mk92ZXI0ICsgNyAqIHU0T3ZlcjE2IC8gNCAtIDE1ICogdTZPdmVyNjQgLyA0ICsgNTc5ICogdThPdmVyMjU2IC8gNjQgLSAodTRPdmVyMTYgLSAxNSAqIHU2T3ZlcjY0IC8gNCArIDE4NyAqIHU4T3ZlcjI1NiAvIDE2KSAqIGNvc2luZTJTIC0gKDUgKiB1Nk92ZXI2NCAvIDQgLSAxMTUgKiB1OE92ZXIyNTYgLyAxNikgKiBjb3NpbmU0UyAtIDI5ICogdThPdmVyMjU2ICogY29zaW5lNlMgLyAxNikgKyAodTJPdmVyNCAvIDIgLSB1NE92ZXIxNiArIDcxICogdTZPdmVyNjQgLyAzMiAtIDg1ICogdThPdmVyMjU2IC8gMTYpICogc2luZTJTICsgKDUgKiB1NE92ZXIxNiAvIDE2IC0gNSAqIHU2T3ZlcjY0IC8gNCArIDM4MyAqIHU4T3ZlcjI1NiAvIDk2KSAqIHNpbmU0UyAtIHMyICogKCh1Nk92ZXI2NCAtIDExICogdThPdmVyMjU2IC8gMikgKiBzaW5lMlMgKyA1ICogdThPdmVyMjU2ICogc2luZTRTIC8gMikgKyAoMjkgKiB1Nk92ZXI2NCAvIDk2IC0gMjkgKiB1OE92ZXIyNTYgLyAxNikgKiBzaW5lNlMgKyA1MzkgKiB1OE92ZXIyNTYgKiBzaW5lOFMgLyAxNTM2OwogICAgICAgIGNvbnN0IHRoZXRhID0gTWF0aC5hc2luKE1hdGguc2luKHNpZ21hKSAqIGNvbnN0YW50cy5jb3NpbmVBbHBoYSk7CiAgICAgICAgY29uc3QgbGF0aXR1ZGUgPSBNYXRoLmF0YW4oY29uc3RhbnRzLmEgLyBjb25zdGFudHMuYiAqIE1hdGgudGFuKHRoZXRhKSk7CiAgICAgICAgc2lnbWEgPSBzaWdtYSAtIGNvbnN0YW50cy5zaWdtYTsKICAgICAgICBjb25zdCBjb3NpbmVUd2ljZVNpZ21hTWlkcG9pbnQgPSBNYXRoLmNvcygyICogY29uc3RhbnRzLnNpZ21hICsgc2lnbWEpOwogICAgICAgIGNvbnN0IHNpbmVTaWdtYSA9IE1hdGguc2luKHNpZ21hKTsKICAgICAgICBjb25zdCBjb3NpbmVTaWdtYSA9IE1hdGguY29zKHNpZ21hKTsKICAgICAgICBjb25zdCBjYyA9IGNvbnN0YW50cy5jb3NpbmVVICogY29zaW5lU2lnbWE7CiAgICAgICAgY29uc3Qgc3MgPSBjb25zdGFudHMuc2luZVUgKiBzaW5lU2lnbWE7CiAgICAgICAgY29uc3QgbGFtYmRhID0gTWF0aC5hdGFuMigKICAgICAgICAgIHNpbmVTaWdtYSAqIGNvbnN0YW50cy5zaW5lSGVhZGluZywKICAgICAgICAgIGNjIC0gc3MgKiBjb25zdGFudHMuY29zaW5lSGVhZGluZwogICAgICAgICk7CiAgICAgICAgY29uc3QgbCA9IGxhbWJkYSAtIGNvbXB1dGVEZWx0YUxhbWJkYSgKICAgICAgICAgIGNvbnN0YW50cy5mLAogICAgICAgICAgY29uc3RhbnRzLnNpbmVBbHBoYSwKICAgICAgICAgIGNvbnN0YW50cy5jb3NpbmVTcXVhcmVkQWxwaGEsCiAgICAgICAgICBzaWdtYSwKICAgICAgICAgIHNpbmVTaWdtYSwKICAgICAgICAgIGNvc2luZVNpZ21hLAogICAgICAgICAgY29zaW5lVHdpY2VTaWdtYU1pZHBvaW50CiAgICAgICAgKTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdC5sb25naXR1ZGUgPSB0aGlzLl9zdGFydC5sb25naXR1ZGUgKyBsOwogICAgICAgICAgcmVzdWx0LmxhdGl0dWRlID0gbGF0aXR1ZGU7CiAgICAgICAgICByZXN1bHQuaGVpZ2h0ID0gMDsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQodGhpcy5fc3RhcnQubG9uZ2l0dWRlICsgbCwgbGF0aXR1ZGUsIDApOwogICAgICB9OwogICAgICBFbGxpcHNvaWRHZW9kZXNpY19kZWZhdWx0ID0gRWxsaXBzb2lkR2VvZGVzaWM7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Qb2x5bGluZVBpcGVsaW5lLmpzCiAgZnVuY3Rpb24gc3ViZGl2aWRlSGVpZ2h0cyhudW1Qb2ludHMsIGgwLCBoMSkgewogICAgY29uc3QgaGVpZ2h0cyA9IHN1YmRpdmlkZUhlaWdodHNTY3JhdGNoQXJyYXk7CiAgICBoZWlnaHRzLmxlbmd0aCA9IG51bVBvaW50czsKICAgIGxldCBpOwogICAgaWYgKGgwID09PSBoMSkgewogICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtUG9pbnRzOyBpKyspIHsKICAgICAgICBoZWlnaHRzW2ldID0gaDA7CiAgICAgIH0KICAgICAgcmV0dXJuIGhlaWdodHM7CiAgICB9CiAgICBjb25zdCBkSGVpZ2h0ID0gaDEgLSBoMDsKICAgIGNvbnN0IGhlaWdodFBlclZlcnRleCA9IGRIZWlnaHQgLyBudW1Qb2ludHM7CiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtUG9pbnRzOyBpKyspIHsKICAgICAgY29uc3QgaCA9IGgwICsgaSAqIGhlaWdodFBlclZlcnRleDsKICAgICAgaGVpZ2h0c1tpXSA9IGg7CiAgICB9CiAgICByZXR1cm4gaGVpZ2h0czsKICB9CiAgZnVuY3Rpb24gZ2VuZXJhdGVDYXJ0ZXNpYW5BcmMocDAsIHAxLCBtaW5EaXN0YW5jZSwgZWxsaXBzb2lkLCBoMCwgaDEsIGFycmF5LCBvZmZzZXQpIHsKICAgIGNvbnN0IGZpcnN0ID0gZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2UocDAsIHNjYWxlRmlyc3QpOwogICAgY29uc3QgbGFzdCA9IGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKHAxLCBzY2FsZUxhc3QpOwogICAgY29uc3QgbnVtUG9pbnRzID0gUG9seWxpbmVQaXBlbGluZS5udW1iZXJPZlBvaW50cyhwMCwgcDEsIG1pbkRpc3RhbmNlKTsKICAgIGNvbnN0IHN0YXJ0ID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKGZpcnN0LCBjYXJ0bzEpOwogICAgY29uc3QgZW5kID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKGxhc3QsIGNhcnRvMik7CiAgICBjb25zdCBoZWlnaHRzID0gc3ViZGl2aWRlSGVpZ2h0cyhudW1Qb2ludHMsIGgwLCBoMSk7CiAgICBlbGxpcHNvaWRHZW9kZXNpYy5zZXRFbmRQb2ludHMoc3RhcnQsIGVuZCk7CiAgICBjb25zdCBzdXJmYWNlRGlzdGFuY2VCZXR3ZWVuUG9pbnRzID0gZWxsaXBzb2lkR2VvZGVzaWMuc3VyZmFjZURpc3RhbmNlIC8gbnVtUG9pbnRzOwogICAgbGV0IGluZGV4ID0gb2Zmc2V0OwogICAgc3RhcnQuaGVpZ2h0ID0gaDA7CiAgICBsZXQgY2FydCA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihzdGFydCwgY2FydGVzaWFuKTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGNhcnQsIGFycmF5LCBpbmRleCk7CiAgICBpbmRleCArPSAzOwogICAgZm9yIChsZXQgaSA9IDE7IGkgPCBudW1Qb2ludHM7IGkrKykgewogICAgICBjb25zdCBjYXJ0byA9IGVsbGlwc29pZEdlb2Rlc2ljLmludGVycG9sYXRlVXNpbmdTdXJmYWNlRGlzdGFuY2UoCiAgICAgICAgaSAqIHN1cmZhY2VEaXN0YW5jZUJldHdlZW5Qb2ludHMsCiAgICAgICAgY2FydG8yCiAgICAgICk7CiAgICAgIGNhcnRvLmhlaWdodCA9IGhlaWdodHNbaV07CiAgICAgIGNhcnQgPSBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oY2FydG8sIGNhcnRlc2lhbik7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGNhcnQsIGFycmF5LCBpbmRleCk7CiAgICAgIGluZGV4ICs9IDM7CiAgICB9CiAgICByZXR1cm4gaW5kZXg7CiAgfQogIGZ1bmN0aW9uIGdlbmVyYXRlQ2FydGVzaWFuUmh1bWJBcmMocDAsIHAxLCBncmFudWxhcml0eSwgZWxsaXBzb2lkLCBoMCwgaDEsIGFycmF5LCBvZmZzZXQpIHsKICAgIGNvbnN0IHN0YXJ0ID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKHAwLCBjYXJ0bzEpOwogICAgY29uc3QgZW5kID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKHAxLCBjYXJ0bzIpOwogICAgY29uc3QgbnVtUG9pbnRzID0gUG9seWxpbmVQaXBlbGluZS5udW1iZXJPZlBvaW50c1JodW1iTGluZSgKICAgICAgc3RhcnQsCiAgICAgIGVuZCwKICAgICAgZ3JhbnVsYXJpdHkKICAgICk7CiAgICBzdGFydC5oZWlnaHQgPSAwOwogICAgZW5kLmhlaWdodCA9IDA7CiAgICBjb25zdCBoZWlnaHRzID0gc3ViZGl2aWRlSGVpZ2h0cyhudW1Qb2ludHMsIGgwLCBoMSk7CiAgICBpZiAoIWVsbGlwc29pZFJodW1iLmVsbGlwc29pZC5lcXVhbHMoZWxsaXBzb2lkKSkgewogICAgICBlbGxpcHNvaWRSaHVtYiA9IG5ldyBFbGxpcHNvaWRSaHVtYkxpbmVfZGVmYXVsdCh2b2lkIDAsIHZvaWQgMCwgZWxsaXBzb2lkKTsKICAgIH0KICAgIGVsbGlwc29pZFJodW1iLnNldEVuZFBvaW50cyhzdGFydCwgZW5kKTsKICAgIGNvbnN0IHN1cmZhY2VEaXN0YW5jZUJldHdlZW5Qb2ludHMgPSBlbGxpcHNvaWRSaHVtYi5zdXJmYWNlRGlzdGFuY2UgLyBudW1Qb2ludHM7CiAgICBsZXQgaW5kZXggPSBvZmZzZXQ7CiAgICBzdGFydC5oZWlnaHQgPSBoMDsKICAgIGxldCBjYXJ0ID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKHN0YXJ0LCBjYXJ0ZXNpYW4pOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soY2FydCwgYXJyYXksIGluZGV4KTsKICAgIGluZGV4ICs9IDM7CiAgICBmb3IgKGxldCBpID0gMTsgaSA8IG51bVBvaW50czsgaSsrKSB7CiAgICAgIGNvbnN0IGNhcnRvID0gZWxsaXBzb2lkUmh1bWIuaW50ZXJwb2xhdGVVc2luZ1N1cmZhY2VEaXN0YW5jZSgKICAgICAgICBpICogc3VyZmFjZURpc3RhbmNlQmV0d2VlblBvaW50cywKICAgICAgICBjYXJ0bzIKICAgICAgKTsKICAgICAgY2FydG8uaGVpZ2h0ID0gaGVpZ2h0c1tpXTsKICAgICAgY2FydCA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihjYXJ0bywgY2FydGVzaWFuKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soY2FydCwgYXJyYXksIGluZGV4KTsKICAgICAgaW5kZXggKz0gMzsKICAgIH0KICAgIHJldHVybiBpbmRleDsKICB9CiAgdmFyIFBvbHlsaW5lUGlwZWxpbmUsIGNhcnRvU2NyYXRjaCwgd3JhcExvbmdpdHVkZUludmVyc01hdHJpeCwgd3JhcExvbmdpdHVkZU9yaWdpbiwgd3JhcExvbmdpdHVkZVhaTm9ybWFsLCB3cmFwTG9uZ2l0dWRlWFpQbGFuZSwgd3JhcExvbmdpdHVkZVlaTm9ybWFsLCB3cmFwTG9uZ2l0dWRlWVpQbGFuZSwgd3JhcExvbmdpdHVkZUludGVyc2VjdGlvbiwgd3JhcExvbmdpdHVkZU9mZnNldCwgc3ViZGl2aWRlSGVpZ2h0c1NjcmF0Y2hBcnJheSwgY2FydG8xLCBjYXJ0bzIsIGNhcnRlc2lhbiwgc2NhbGVGaXJzdCwgc2NhbGVMYXN0LCBlbGxpcHNvaWRHZW9kZXNpYywgZWxsaXBzb2lkUmh1bWIsIHNjcmF0Y2hDYXJ0b2dyYXBoaWMwMiwgc2NyYXRjaENhcnRvZ3JhcGhpYzEyLCBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQ7CiAgdmFyIGluaXRfUG9seWxpbmVQaXBlbGluZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUG9seWxpbmVQaXBlbGluZS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0VsbGlwc29pZEdlb2Rlc2ljKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkUmh1bWJMaW5lKCk7CiAgICAgIGluaXRfSW50ZXJzZWN0aW9uVGVzdHMoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfTWF0cml4NCgpOwogICAgICBpbml0X1BsYW5lKCk7CiAgICAgIFBvbHlsaW5lUGlwZWxpbmUgPSB7fTsKICAgICAgUG9seWxpbmVQaXBlbGluZS5udW1iZXJPZlBvaW50cyA9IGZ1bmN0aW9uKHAwLCBwMSwgbWluRGlzdGFuY2UpIHsKICAgICAgICBjb25zdCBkaXN0YW5jZSA9IENhcnRlc2lhbjNfZGVmYXVsdC5kaXN0YW5jZShwMCwgcDEpOwogICAgICAgIHJldHVybiBNYXRoLmNlaWwoZGlzdGFuY2UgLyBtaW5EaXN0YW5jZSk7CiAgICAgIH07CiAgICAgIFBvbHlsaW5lUGlwZWxpbmUubnVtYmVyT2ZQb2ludHNSaHVtYkxpbmUgPSBmdW5jdGlvbihwMCwgcDEsIGdyYW51bGFyaXR5KSB7CiAgICAgICAgY29uc3QgcmFkaWFuc0Rpc3RhbmNlU3F1YXJlZCA9IE1hdGgucG93KHAwLmxvbmdpdHVkZSAtIHAxLmxvbmdpdHVkZSwgMikgKyBNYXRoLnBvdyhwMC5sYXRpdHVkZSAtIHAxLmxhdGl0dWRlLCAyKTsKICAgICAgICByZXR1cm4gTWF0aC5tYXgoCiAgICAgICAgICAxLAogICAgICAgICAgTWF0aC5jZWlsKE1hdGguc3FydChyYWRpYW5zRGlzdGFuY2VTcXVhcmVkIC8gKGdyYW51bGFyaXR5ICogZ3JhbnVsYXJpdHkpKSkKICAgICAgICApOwogICAgICB9OwogICAgICBjYXJ0b1NjcmF0Y2ggPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgUG9seWxpbmVQaXBlbGluZS5leHRyYWN0SGVpZ2h0cyA9IGZ1bmN0aW9uKHBvc2l0aW9ucywgZWxsaXBzb2lkKSB7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBjb25zdCBoZWlnaHRzID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgY29uc3QgcCA9IHBvc2l0aW9uc1tpXTsKICAgICAgICAgIGhlaWdodHNbaV0gPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMocCwgY2FydG9TY3JhdGNoKS5oZWlnaHQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBoZWlnaHRzOwogICAgICB9OwogICAgICB3cmFwTG9uZ2l0dWRlSW52ZXJzTWF0cml4ID0gbmV3IE1hdHJpeDRfZGVmYXVsdCgpOwogICAgICB3cmFwTG9uZ2l0dWRlT3JpZ2luID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB3cmFwTG9uZ2l0dWRlWFpOb3JtYWwgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHdyYXBMb25naXR1ZGVYWlBsYW5lID0gbmV3IFBsYW5lX2RlZmF1bHQoQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWCwgMCk7CiAgICAgIHdyYXBMb25naXR1ZGVZWk5vcm1hbCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgd3JhcExvbmdpdHVkZVlaUGxhbmUgPSBuZXcgUGxhbmVfZGVmYXVsdChDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9YLCAwKTsKICAgICAgd3JhcExvbmdpdHVkZUludGVyc2VjdGlvbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgd3JhcExvbmdpdHVkZU9mZnNldCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc3ViZGl2aWRlSGVpZ2h0c1NjcmF0Y2hBcnJheSA9IFtdOwogICAgICBjYXJ0bzEgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgY2FydG8yID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NhbGVGaXJzdCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NhbGVMYXN0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBlbGxpcHNvaWRHZW9kZXNpYyA9IG5ldyBFbGxpcHNvaWRHZW9kZXNpY19kZWZhdWx0KCk7CiAgICAgIGVsbGlwc29pZFJodW1iID0gbmV3IEVsbGlwc29pZFJodW1iTGluZV9kZWZhdWx0KCk7CiAgICAgIFBvbHlsaW5lUGlwZWxpbmUud3JhcExvbmdpdHVkZSA9IGZ1bmN0aW9uKHBvc2l0aW9ucywgbW9kZWxNYXRyaXgpIHsKICAgICAgICBjb25zdCBjYXJ0ZXNpYW5zID0gW107CiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSBbXTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9ucykgJiYgcG9zaXRpb25zLmxlbmd0aCA+IDApIHsKICAgICAgICAgIG1vZGVsTWF0cml4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQobW9kZWxNYXRyaXgsIE1hdHJpeDRfZGVmYXVsdC5JREVOVElUWSk7CiAgICAgICAgICBjb25zdCBpbnZlcnNlTW9kZWxNYXRyaXggPSBNYXRyaXg0X2RlZmF1bHQuaW52ZXJzZVRyYW5zZm9ybWF0aW9uKAogICAgICAgICAgICBtb2RlbE1hdHJpeCwKICAgICAgICAgICAgd3JhcExvbmdpdHVkZUludmVyc01hdHJpeAogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IG9yaWdpbiA9IE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseUJ5UG9pbnQoCiAgICAgICAgICAgIGludmVyc2VNb2RlbE1hdHJpeCwKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sCiAgICAgICAgICAgIHdyYXBMb25naXR1ZGVPcmlnaW4KICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCB4ek5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICAgIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseUJ5UG9pbnRBc1ZlY3RvcigKICAgICAgICAgICAgICBpbnZlcnNlTW9kZWxNYXRyaXgsCiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWSwKICAgICAgICAgICAgICB3cmFwTG9uZ2l0dWRlWFpOb3JtYWwKICAgICAgICAgICAgKSwKICAgICAgICAgICAgd3JhcExvbmdpdHVkZVhaTm9ybWFsCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgeHpQbGFuZTIgPSBQbGFuZV9kZWZhdWx0LmZyb21Qb2ludE5vcm1hbCgKICAgICAgICAgICAgb3JpZ2luLAogICAgICAgICAgICB4ek5vcm1hbCwKICAgICAgICAgICAgd3JhcExvbmdpdHVkZVhaUGxhbmUKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCB5ek5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICAgIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseUJ5UG9pbnRBc1ZlY3RvcigKICAgICAgICAgICAgICBpbnZlcnNlTW9kZWxNYXRyaXgsCiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWCwKICAgICAgICAgICAgICB3cmFwTG9uZ2l0dWRlWVpOb3JtYWwKICAgICAgICAgICAgKSwKICAgICAgICAgICAgd3JhcExvbmdpdHVkZVlaTm9ybWFsCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgeXpQbGFuZSA9IFBsYW5lX2RlZmF1bHQuZnJvbVBvaW50Tm9ybWFsKAogICAgICAgICAgICBvcmlnaW4sCiAgICAgICAgICAgIHl6Tm9ybWFsLAogICAgICAgICAgICB3cmFwTG9uZ2l0dWRlWVpQbGFuZQogICAgICAgICAgKTsKICAgICAgICAgIGxldCBjb3VudCA9IDE7CiAgICAgICAgICBjYXJ0ZXNpYW5zLnB1c2goQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHBvc2l0aW9uc1swXSkpOwogICAgICAgICAgbGV0IHByZXYgPSBjYXJ0ZXNpYW5zWzBdOwogICAgICAgICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgY29uc3QgY3VyID0gcG9zaXRpb25zW2ldOwogICAgICAgICAgICBpZiAoUGxhbmVfZGVmYXVsdC5nZXRQb2ludERpc3RhbmNlKHl6UGxhbmUsIHByZXYpIDwgMCB8fCBQbGFuZV9kZWZhdWx0LmdldFBvaW50RGlzdGFuY2UoeXpQbGFuZSwgY3VyKSA8IDApIHsKICAgICAgICAgICAgICBjb25zdCBpbnRlcnNlY3Rpb24gPSBJbnRlcnNlY3Rpb25UZXN0c19kZWZhdWx0LmxpbmVTZWdtZW50UGxhbmUoCiAgICAgICAgICAgICAgICBwcmV2LAogICAgICAgICAgICAgICAgY3VyLAogICAgICAgICAgICAgICAgeHpQbGFuZTIsCiAgICAgICAgICAgICAgICB3cmFwTG9uZ2l0dWRlSW50ZXJzZWN0aW9uCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGludGVyc2VjdGlvbikpIHsKICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgICAgICAgICB4ek5vcm1hbCwKICAgICAgICAgICAgICAgICAgNWUtOSwKICAgICAgICAgICAgICAgICAgd3JhcExvbmdpdHVkZU9mZnNldAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIGlmIChQbGFuZV9kZWZhdWx0LmdldFBvaW50RGlzdGFuY2UoeHpQbGFuZTIsIHByZXYpIDwgMCkgewogICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKG9mZnNldCwgb2Zmc2V0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhcnRlc2lhbnMucHVzaCgKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChpbnRlcnNlY3Rpb24sIG9mZnNldCwgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpKQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIHNlZ21lbnRzLnB1c2goY291bnQgKyAxKTsKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUob2Zmc2V0LCBvZmZzZXQpOwogICAgICAgICAgICAgICAgY2FydGVzaWFucy5wdXNoKAogICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGludGVyc2VjdGlvbiwgb2Zmc2V0LCBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCkpCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgY291bnQgPSAxOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXJ0ZXNpYW5zLnB1c2goQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHBvc2l0aW9uc1tpXSkpOwogICAgICAgICAgICBjb3VudCsrOwogICAgICAgICAgICBwcmV2ID0gY3VyOwogICAgICAgICAgfQogICAgICAgICAgc2VnbWVudHMucHVzaChjb3VudCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB7CiAgICAgICAgICBwb3NpdGlvbnM6IGNhcnRlc2lhbnMsCiAgICAgICAgICBsZW5ndGhzOiBzZWdtZW50cwogICAgICAgIH07CiAgICAgIH07CiAgICAgIFBvbHlsaW5lUGlwZWxpbmUuZ2VuZXJhdGVBcmMgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQob3B0aW9ucykpIHsKICAgICAgICAgIG9wdGlvbnMgPSB7fTsKICAgICAgICB9CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gb3B0aW9ucy5wb3NpdGlvbnM7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm9wdGlvbnMucG9zaXRpb25zIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NCk7CiAgICAgICAgbGV0IGhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuaGVpZ2h0LCAwKTsKICAgICAgICBjb25zdCBoYXNIZWlnaHRBcnJheSA9IEFycmF5LmlzQXJyYXkoaGVpZ2h0KTsKICAgICAgICBpZiAobGVuZ3RoIDwgMSkgewogICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID09PSAxKSB7CiAgICAgICAgICBjb25zdCBwID0gZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2UocG9zaXRpb25zWzBdLCBzY2FsZUZpcnN0KTsKICAgICAgICAgIGhlaWdodCA9IGhhc0hlaWdodEFycmF5ID8gaGVpZ2h0WzBdIDogaGVpZ2h0OwogICAgICAgICAgaWYgKGhlaWdodCAhPT0gMCkgewogICAgICAgICAgICBjb25zdCBuID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwLCBjYXJ0ZXNpYW4pOwogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihuLCBoZWlnaHQsIG4pOwogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHAsIG4sIHApOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIFtwLngsIHAueSwgcC56XTsKICAgICAgICB9CiAgICAgICAgbGV0IG1pbkRpc3RhbmNlID0gb3B0aW9ucy5taW5EaXN0YW5jZTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChtaW5EaXN0YW5jZSkpIHsKICAgICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgICAgICAgIG9wdGlvbnMuZ3JhbnVsYXJpdHksCiAgICAgICAgICAgIE1hdGhfZGVmYXVsdC5SQURJQU5TX1BFUl9ERUdSRUUKICAgICAgICAgICk7CiAgICAgICAgICBtaW5EaXN0YW5jZSA9IE1hdGhfZGVmYXVsdC5jaG9yZExlbmd0aChncmFudWxhcml0eSwgZWxsaXBzb2lkLm1heGltdW1SYWRpdXMpOwogICAgICAgIH0KICAgICAgICBsZXQgbnVtUG9pbnRzID0gMDsKICAgICAgICBsZXQgaTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoIC0gMTsgaSsrKSB7CiAgICAgICAgICBudW1Qb2ludHMgKz0gUG9seWxpbmVQaXBlbGluZS5udW1iZXJPZlBvaW50cygKICAgICAgICAgICAgcG9zaXRpb25zW2ldLAogICAgICAgICAgICBwb3NpdGlvbnNbaSArIDFdLAogICAgICAgICAgICBtaW5EaXN0YW5jZQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgYXJyYXlMZW5ndGggPSAobnVtUG9pbnRzICsgMSkgKiAzOwogICAgICAgIGNvbnN0IG5ld1Bvc2l0aW9ucyA9IG5ldyBBcnJheShhcnJheUxlbmd0aCk7CiAgICAgICAgbGV0IG9mZnNldCA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aCAtIDE7IGkrKykgewogICAgICAgICAgY29uc3QgcDAgPSBwb3NpdGlvbnNbaV07CiAgICAgICAgICBjb25zdCBwMSA9IHBvc2l0aW9uc1tpICsgMV07CiAgICAgICAgICBjb25zdCBoMCA9IGhhc0hlaWdodEFycmF5ID8gaGVpZ2h0W2ldIDogaGVpZ2h0OwogICAgICAgICAgY29uc3QgaDEgPSBoYXNIZWlnaHRBcnJheSA/IGhlaWdodFtpICsgMV0gOiBoZWlnaHQ7CiAgICAgICAgICBvZmZzZXQgPSBnZW5lcmF0ZUNhcnRlc2lhbkFyYygKICAgICAgICAgICAgcDAsCiAgICAgICAgICAgIHAxLAogICAgICAgICAgICBtaW5EaXN0YW5jZSwKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICBoMCwKICAgICAgICAgICAgaDEsCiAgICAgICAgICAgIG5ld1Bvc2l0aW9ucywKICAgICAgICAgICAgb2Zmc2V0CiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBzdWJkaXZpZGVIZWlnaHRzU2NyYXRjaEFycmF5Lmxlbmd0aCA9IDA7CiAgICAgICAgY29uc3QgbGFzdFBvaW50ID0gcG9zaXRpb25zW2xlbmd0aCAtIDFdOwogICAgICAgIGNvbnN0IGNhcnRvID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKGxhc3RQb2ludCwgY2FydG8xKTsKICAgICAgICBjYXJ0by5oZWlnaHQgPSBoYXNIZWlnaHRBcnJheSA/IGhlaWdodFtsZW5ndGggLSAxXSA6IGhlaWdodDsKICAgICAgICBjb25zdCBjYXJ0ID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGNhcnRvLCBjYXJ0ZXNpYW4pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGNhcnQsIG5ld1Bvc2l0aW9ucywgYXJyYXlMZW5ndGggLSAzKTsKICAgICAgICByZXR1cm4gbmV3UG9zaXRpb25zOwogICAgICB9OwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljMDIgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYzEyID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIFBvbHlsaW5lUGlwZWxpbmUuZ2VuZXJhdGVSaHVtYkFyYyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChvcHRpb25zKSkgewogICAgICAgICAgb3B0aW9ucyA9IHt9OwogICAgICAgIH0KICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBvcHRpb25zLnBvc2l0aW9uczsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwb3NpdGlvbnMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy5wb3NpdGlvbnMgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5lbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LldHUzg0KTsKICAgICAgICBsZXQgaGVpZ2h0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5oZWlnaHQsIDApOwogICAgICAgIGNvbnN0IGhhc0hlaWdodEFycmF5ID0gQXJyYXkuaXNBcnJheShoZWlnaHQpOwogICAgICAgIGlmIChsZW5ndGggPCAxKSB7CiAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgfSBlbHNlIGlmIChsZW5ndGggPT09IDEpIHsKICAgICAgICAgIGNvbnN0IHAgPSBlbGxpcHNvaWQuc2NhbGVUb0dlb2RldGljU3VyZmFjZShwb3NpdGlvbnNbMF0sIHNjYWxlRmlyc3QpOwogICAgICAgICAgaGVpZ2h0ID0gaGFzSGVpZ2h0QXJyYXkgPyBoZWlnaHRbMF0gOiBoZWlnaHQ7CiAgICAgICAgICBpZiAoaGVpZ2h0ICE9PSAwKSB7CiAgICAgICAgICAgIGNvbnN0IG4gPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKHAsIGNhcnRlc2lhbik7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKG4sIGhlaWdodCwgbik7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocCwgbiwgcCk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gW3AueCwgcC55LCBwLnpdOwogICAgICAgIH0KICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICAgICAgb3B0aW9ucy5ncmFudWxhcml0eSwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5SQURJQU5TX1BFUl9ERUdSRUUKICAgICAgICApOwogICAgICAgIGxldCBudW1Qb2ludHMgPSAwOwogICAgICAgIGxldCBpOwogICAgICAgIGxldCBjMCA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYygKICAgICAgICAgIHBvc2l0aW9uc1swXSwKICAgICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWMwMgogICAgICAgICk7CiAgICAgICAgbGV0IGMxOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGggLSAxOyBpKyspIHsKICAgICAgICAgIGMxID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKAogICAgICAgICAgICBwb3NpdGlvbnNbaSArIDFdLAogICAgICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljMTIKICAgICAgICAgICk7CiAgICAgICAgICBudW1Qb2ludHMgKz0gUG9seWxpbmVQaXBlbGluZS5udW1iZXJPZlBvaW50c1JodW1iTGluZShjMCwgYzEsIGdyYW51bGFyaXR5KTsKICAgICAgICAgIGMwID0gQ2FydG9ncmFwaGljX2RlZmF1bHQuY2xvbmUoYzEsIHNjcmF0Y2hDYXJ0b2dyYXBoaWMwMik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGFycmF5TGVuZ3RoID0gKG51bVBvaW50cyArIDEpICogMzsKICAgICAgICBjb25zdCBuZXdQb3NpdGlvbnMgPSBuZXcgQXJyYXkoYXJyYXlMZW5ndGgpOwogICAgICAgIGxldCBvZmZzZXQgPSAwOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGggLSAxOyBpKyspIHsKICAgICAgICAgIGNvbnN0IHAwID0gcG9zaXRpb25zW2ldOwogICAgICAgICAgY29uc3QgcDEgPSBwb3NpdGlvbnNbaSArIDFdOwogICAgICAgICAgY29uc3QgaDAgPSBoYXNIZWlnaHRBcnJheSA/IGhlaWdodFtpXSA6IGhlaWdodDsKICAgICAgICAgIGNvbnN0IGgxID0gaGFzSGVpZ2h0QXJyYXkgPyBoZWlnaHRbaSArIDFdIDogaGVpZ2h0OwogICAgICAgICAgb2Zmc2V0ID0gZ2VuZXJhdGVDYXJ0ZXNpYW5SaHVtYkFyYygKICAgICAgICAgICAgcDAsCiAgICAgICAgICAgIHAxLAogICAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICBoMCwKICAgICAgICAgICAgaDEsCiAgICAgICAgICAgIG5ld1Bvc2l0aW9ucywKICAgICAgICAgICAgb2Zmc2V0CiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBzdWJkaXZpZGVIZWlnaHRzU2NyYXRjaEFycmF5Lmxlbmd0aCA9IDA7CiAgICAgICAgY29uc3QgbGFzdFBvaW50ID0gcG9zaXRpb25zW2xlbmd0aCAtIDFdOwogICAgICAgIGNvbnN0IGNhcnRvID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKGxhc3RQb2ludCwgY2FydG8xKTsKICAgICAgICBjYXJ0by5oZWlnaHQgPSBoYXNIZWlnaHRBcnJheSA/IGhlaWdodFtsZW5ndGggLSAxXSA6IGhlaWdodDsKICAgICAgICBjb25zdCBjYXJ0ID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGNhcnRvLCBjYXJ0ZXNpYW4pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGNhcnQsIG5ld1Bvc2l0aW9ucywgYXJyYXlMZW5ndGggLSAzKTsKICAgICAgICByZXR1cm4gbmV3UG9zaXRpb25zOwogICAgICB9OwogICAgICBQb2x5bGluZVBpcGVsaW5lLmdlbmVyYXRlQ2FydGVzaWFuQXJjID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIGNvbnN0IG51bWJlckFycmF5ID0gUG9seWxpbmVQaXBlbGluZS5nZW5lcmF0ZUFyYyhvcHRpb25zKTsKICAgICAgICBjb25zdCBzaXplID0gbnVtYmVyQXJyYXkubGVuZ3RoIC8gMzsKICAgICAgICBjb25zdCBuZXdQb3NpdGlvbnMgPSBuZXcgQXJyYXkoc2l6ZSk7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHsKICAgICAgICAgIG5ld1Bvc2l0aW9uc1tpXSA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2sobnVtYmVyQXJyYXksIGkgKiAzKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ld1Bvc2l0aW9uczsKICAgICAgfTsKICAgICAgUG9seWxpbmVQaXBlbGluZS5nZW5lcmF0ZUNhcnRlc2lhblJodW1iQXJjID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIGNvbnN0IG51bWJlckFycmF5ID0gUG9seWxpbmVQaXBlbGluZS5nZW5lcmF0ZVJodW1iQXJjKG9wdGlvbnMpOwogICAgICAgIGNvbnN0IHNpemUgPSBudW1iZXJBcnJheS5sZW5ndGggLyAzOwogICAgICAgIGNvbnN0IG5ld1Bvc2l0aW9ucyA9IG5ldyBBcnJheShzaXplKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykgewogICAgICAgICAgbmV3UG9zaXRpb25zW2ldID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhudW1iZXJBcnJheSwgaSAqIDMpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3UG9zaXRpb25zOwogICAgICB9OwogICAgICBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQgPSBQb2x5bGluZVBpcGVsaW5lOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvb25lVGltZVdhcm5pbmcuanMKICBmdW5jdGlvbiBvbmVUaW1lV2FybmluZyhpZGVudGlmaWVyLCBtZXNzYWdlKSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpZGVudGlmaWVyKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiaWRlbnRpZmllciBpcyByZXF1aXJlZC4iKTsKICAgIH0KICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHdhcm5pbmdzW2lkZW50aWZpZXJdKSkgewogICAgICB3YXJuaW5nc1tpZGVudGlmaWVyXSA9IHRydWU7CiAgICAgIGNvbnNvbGUud2FybihkZWZhdWx0VmFsdWVfZGVmYXVsdChtZXNzYWdlLCBpZGVudGlmaWVyKSk7CiAgICB9CiAgfQogIHZhciB3YXJuaW5ncywgb25lVGltZVdhcm5pbmdfZGVmYXVsdDsKICB2YXIgaW5pdF9vbmVUaW1lV2FybmluZyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvb25lVGltZVdhcm5pbmcuanMiKCkgewogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICB3YXJuaW5ncyA9IHt9OwogICAgICBvbmVUaW1lV2FybmluZy5nZW9tZXRyeU91dGxpbmVzID0gIkVudGl0eSBnZW9tZXRyeSBvdXRsaW5lcyBhcmUgdW5zdXBwb3J0ZWQgb24gdGVycmFpbi4gT3V0bGluZXMgd2lsbCBiZSBkaXNhYmxlZC4gVG8gZW5hYmxlIG91dGxpbmVzLCBkaXNhYmxlIGdlb21ldHJ5IHRlcnJhaW4gY2xhbXBpbmcgYnkgZXhwbGljaXRseSBzZXR0aW5nIGhlaWdodCB0byAwLiI7CiAgICAgIG9uZVRpbWVXYXJuaW5nLmdlb21ldHJ5WkluZGV4ID0gIkVudGl0eSBnZW9tZXRyeSB3aXRoIHpJbmRleCBhcmUgdW5zdXBwb3J0ZWQgd2hlbiBoZWlnaHQgb3IgZXh0cnVkZWRIZWlnaHQgYXJlIGRlZmluZWQuICB6SW5kZXggd2lsbCBiZSBpZ25vcmVkIjsKICAgICAgb25lVGltZVdhcm5pbmcuZ2VvbWV0cnlIZWlnaHRSZWZlcmVuY2UgPSAiRW50aXR5IGNvcnJpZG9yLCBlbGxpcHNlLCBwb2x5Z29uIG9yIHJlY3RhbmdsZSB3aXRoIGhlaWdodFJlZmVyZW5jZSBtdXN0IGFsc28gaGF2ZSBhIGRlZmluZWQgaGVpZ2h0LiAgaGVpZ2h0UmVmZXJlbmNlIHdpbGwgYmUgaWdub3JlZCI7CiAgICAgIG9uZVRpbWVXYXJuaW5nLmdlb21ldHJ5RXh0cnVkZWRIZWlnaHRSZWZlcmVuY2UgPSAiRW50aXR5IGNvcnJpZG9yLCBlbGxpcHNlLCBwb2x5Z29uIG9yIHJlY3RhbmdsZSB3aXRoIGV4dHJ1ZGVkSGVpZ2h0UmVmZXJlbmNlIG11c3QgYWxzbyBoYXZlIGEgZGVmaW5lZCBleHRydWRlZEhlaWdodC4gIGV4dHJ1ZGVkSGVpZ2h0UmVmZXJlbmNlIHdpbGwgYmUgaWdub3JlZCI7CiAgICAgIG9uZVRpbWVXYXJuaW5nX2RlZmF1bHQgPSBvbmVUaW1lV2FybmluZzsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BvbHlsaW5lVm9sdW1lR2VvbWV0cnlMaWJyYXJ5LmpzCiAgZnVuY3Rpb24gc2NhbGVUb1N1cmZhY2UocG9zaXRpb25zLCBlbGxpcHNvaWQpIHsKICAgIGNvbnN0IGhlaWdodHMgPSBuZXcgQXJyYXkocG9zaXRpb25zLmxlbmd0aCk7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGg7IGkrKykgewogICAgICBjb25zdCBwb3MgPSBwb3NpdGlvbnNbaV07CiAgICAgIGNhcnRvZ3JhcGhpYyA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhwb3MsIGNhcnRvZ3JhcGhpYyk7CiAgICAgIGhlaWdodHNbaV0gPSBjYXJ0b2dyYXBoaWMuaGVpZ2h0OwogICAgICBwb3NpdGlvbnNbaV0gPSBlbGxpcHNvaWQuc2NhbGVUb0dlb2RldGljU3VyZmFjZShwb3MsIHBvcyk7CiAgICB9CiAgICByZXR1cm4gaGVpZ2h0czsKICB9CiAgZnVuY3Rpb24gc3ViZGl2aWRlSGVpZ2h0czIocG9pbnRzLCBoMCwgaDEsIGdyYW51bGFyaXR5KSB7CiAgICBjb25zdCBwMCA9IHBvaW50c1swXTsKICAgIGNvbnN0IHAxID0gcG9pbnRzWzFdOwogICAgY29uc3QgYW5nbGVCZXR3ZWVuID0gQ2FydGVzaWFuM19kZWZhdWx0LmFuZ2xlQmV0d2VlbihwMCwgcDEpOwogICAgY29uc3QgbnVtUG9pbnRzID0gTWF0aC5jZWlsKGFuZ2xlQmV0d2VlbiAvIGdyYW51bGFyaXR5KTsKICAgIGNvbnN0IGhlaWdodHMgPSBuZXcgQXJyYXkobnVtUG9pbnRzKTsKICAgIGxldCBpOwogICAgaWYgKGgwID09PSBoMSkgewogICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtUG9pbnRzOyBpKyspIHsKICAgICAgICBoZWlnaHRzW2ldID0gaDA7CiAgICAgIH0KICAgICAgaGVpZ2h0cy5wdXNoKGgxKTsKICAgICAgcmV0dXJuIGhlaWdodHM7CiAgICB9CiAgICBjb25zdCBkSGVpZ2h0ID0gaDEgLSBoMDsKICAgIGNvbnN0IGhlaWdodFBlclZlcnRleCA9IGRIZWlnaHQgLyBudW1Qb2ludHM7CiAgICBmb3IgKGkgPSAxOyBpIDwgbnVtUG9pbnRzOyBpKyspIHsKICAgICAgY29uc3QgaCA9IGgwICsgaSAqIGhlaWdodFBlclZlcnRleDsKICAgICAgaGVpZ2h0c1tpXSA9IGg7CiAgICB9CiAgICBoZWlnaHRzWzBdID0gaDA7CiAgICBoZWlnaHRzLnB1c2goaDEpOwogICAgcmV0dXJuIGhlaWdodHM7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVSb3RhdGlvbkFuZ2xlKHN0YXJ0LCBlbmQsIHBvc2l0aW9uLCBlbGxpcHNvaWQpIHsKICAgIGNvbnN0IHRhbmdlbnRQbGFuZSA9IG5ldyBFbGxpcHNvaWRUYW5nZW50UGxhbmVfZGVmYXVsdChwb3NpdGlvbiwgZWxsaXBzb2lkKTsKICAgIGNvbnN0IG5leHQgPSB0YW5nZW50UGxhbmUucHJvamVjdFBvaW50T250b1BsYW5lKAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHBvc2l0aW9uLCBzdGFydCwgbmV4dFNjcmF0Y2gpLAogICAgICBuZXh0U2NyYXRjaAogICAgKTsKICAgIGNvbnN0IHByZXYgPSB0YW5nZW50UGxhbmUucHJvamVjdFBvaW50T250b1BsYW5lKAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHBvc2l0aW9uLCBlbmQsIHByZXZTY3JhdGNoKSwKICAgICAgcHJldlNjcmF0Y2gKICAgICk7CiAgICBjb25zdCBhbmdsZSA9IENhcnRlc2lhbjJfZGVmYXVsdC5hbmdsZUJldHdlZW4obmV4dCwgcHJldik7CiAgICByZXR1cm4gcHJldi54ICogbmV4dC55IC0gcHJldi55ICogbmV4dC54ID49IDAgPyAtYW5nbGUgOiBhbmdsZTsKICB9CiAgZnVuY3Rpb24gYWRkUG9zaXRpb24oY2VudGVyLCBsZWZ0LCBzaGFwZSwgZmluYWxQb3NpdGlvbnMsIGVsbGlwc29pZCwgaGVpZ2h0LCB4U2NhbGFyLCByZXBlYXQpIHsKICAgIGxldCB3ZXN0ID0gd2VzdFNjcmF0Y2g7CiAgICBsZXQgZmluYWxQb3NpdGlvbiA9IGZpbmFsUG9zU2NyYXRjaDsKICAgIHRyYW5zZm9ybSA9IFRyYW5zZm9ybXNfZGVmYXVsdC5lYXN0Tm9ydGhVcFRvRml4ZWRGcmFtZShjZW50ZXIsIGVsbGlwc29pZCwgdHJhbnNmb3JtKTsKICAgIHdlc3QgPSBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVBvaW50QXNWZWN0b3IodHJhbnNmb3JtLCBuZWdhdGl2ZVgsIHdlc3QpOwogICAgd2VzdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUod2VzdCwgd2VzdCk7CiAgICBjb25zdCBhbmdsZSA9IGNvbXB1dGVSb3RhdGlvbkFuZ2xlKHdlc3QsIGxlZnQsIGNlbnRlciwgZWxsaXBzb2lkKTsKICAgIHJvdGF0aW9uWiA9IE1hdHJpeDNfZGVmYXVsdC5mcm9tUm90YXRpb25aKGFuZ2xlLCByb3RhdGlvblopOwogICAgaGVpZ2h0Q2FydGVzaWFuLnogPSBoZWlnaHQ7CiAgICB0cmFuc2Zvcm0gPSBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlUcmFuc2Zvcm1hdGlvbigKICAgICAgdHJhbnNmb3JtLAogICAgICBNYXRyaXg0X2RlZmF1bHQuZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24ocm90YXRpb25aLCBoZWlnaHRDYXJ0ZXNpYW4sIHRyYW5zbGF0aW9uKSwKICAgICAgdHJhbnNmb3JtCiAgICApOwogICAgY29uc3Qgc2NhbGUgPSBzY2FsZU1hdHJpeDsKICAgIHNjYWxlWzBdID0geFNjYWxhcjsKICAgIGZvciAobGV0IGogPSAwOyBqIDwgcmVwZWF0OyBqKyspIHsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGFwZS5sZW5ndGg7IGkgKz0gMykgewogICAgICAgIGZpbmFsUG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHNoYXBlLCBpLCBmaW5hbFBvc2l0aW9uKTsKICAgICAgICBmaW5hbFBvc2l0aW9uID0gTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IoCiAgICAgICAgICBzY2FsZSwKICAgICAgICAgIGZpbmFsUG9zaXRpb24sCiAgICAgICAgICBmaW5hbFBvc2l0aW9uCiAgICAgICAgKTsKICAgICAgICBmaW5hbFBvc2l0aW9uID0gTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlQb2ludCgKICAgICAgICAgIHRyYW5zZm9ybSwKICAgICAgICAgIGZpbmFsUG9zaXRpb24sCiAgICAgICAgICBmaW5hbFBvc2l0aW9uCiAgICAgICAgKTsKICAgICAgICBmaW5hbFBvc2l0aW9ucy5wdXNoKGZpbmFsUG9zaXRpb24ueCwgZmluYWxQb3NpdGlvbi55LCBmaW5hbFBvc2l0aW9uLnopOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gZmluYWxQb3NpdGlvbnM7CiAgfQogIGZ1bmN0aW9uIGFkZFBvc2l0aW9ucyhjZW50ZXJzLCBsZWZ0LCBzaGFwZSwgZmluYWxQb3NpdGlvbnMsIGVsbGlwc29pZCwgaGVpZ2h0cywgeFNjYWxhcikgewogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjZW50ZXJzLmxlbmd0aDsgaSArPSAzKSB7CiAgICAgIGNvbnN0IGNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoY2VudGVycywgaSwgY2VudGVyU2NyYXRjaDIpOwogICAgICBmaW5hbFBvc2l0aW9ucyA9IGFkZFBvc2l0aW9uKAogICAgICAgIGNlbnRlciwKICAgICAgICBsZWZ0LAogICAgICAgIHNoYXBlLAogICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgIGVsbGlwc29pZCwKICAgICAgICBoZWlnaHRzW2kgLyAzXSwKICAgICAgICB4U2NhbGFyLAogICAgICAgIDEKICAgICAgKTsKICAgIH0KICAgIHJldHVybiBmaW5hbFBvc2l0aW9uczsKICB9CiAgZnVuY3Rpb24gY29udmVydFNoYXBlVG8zRER1cGxpY2F0ZShzaGFwZTJELCBib3VuZGluZ1JlY3RhbmdsZSkgewogICAgY29uc3QgbGVuZ3RoID0gc2hhcGUyRC5sZW5ndGg7CiAgICBjb25zdCBzaGFwZSA9IG5ldyBBcnJheShsZW5ndGggKiA2KTsKICAgIGxldCBpbmRleCA9IDA7CiAgICBjb25zdCB4T2Zmc2V0ID0gYm91bmRpbmdSZWN0YW5nbGUueCArIGJvdW5kaW5nUmVjdGFuZ2xlLndpZHRoIC8gMjsKICAgIGNvbnN0IHlPZmZzZXQgPSBib3VuZGluZ1JlY3RhbmdsZS55ICsgYm91bmRpbmdSZWN0YW5nbGUuaGVpZ2h0IC8gMjsKICAgIGxldCBwb2ludCA9IHNoYXBlMkRbMF07CiAgICBzaGFwZVtpbmRleCsrXSA9IHBvaW50LnggLSB4T2Zmc2V0OwogICAgc2hhcGVbaW5kZXgrK10gPSAwOwogICAgc2hhcGVbaW5kZXgrK10gPSBwb2ludC55IC0geU9mZnNldDsKICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgcG9pbnQgPSBzaGFwZTJEW2ldOwogICAgICBjb25zdCB4ID0gcG9pbnQueCAtIHhPZmZzZXQ7CiAgICAgIGNvbnN0IHogPSBwb2ludC55IC0geU9mZnNldDsKICAgICAgc2hhcGVbaW5kZXgrK10gPSB4OwogICAgICBzaGFwZVtpbmRleCsrXSA9IDA7CiAgICAgIHNoYXBlW2luZGV4KytdID0gejsKICAgICAgc2hhcGVbaW5kZXgrK10gPSB4OwogICAgICBzaGFwZVtpbmRleCsrXSA9IDA7CiAgICAgIHNoYXBlW2luZGV4KytdID0gejsKICAgIH0KICAgIHBvaW50ID0gc2hhcGUyRFswXTsKICAgIHNoYXBlW2luZGV4KytdID0gcG9pbnQueCAtIHhPZmZzZXQ7CiAgICBzaGFwZVtpbmRleCsrXSA9IDA7CiAgICBzaGFwZVtpbmRleCsrXSA9IHBvaW50LnkgLSB5T2Zmc2V0OwogICAgcmV0dXJuIHNoYXBlOwogIH0KICBmdW5jdGlvbiBjb252ZXJ0U2hhcGVUbzNEKHNoYXBlMkQsIGJvdW5kaW5nUmVjdGFuZ2xlKSB7CiAgICBjb25zdCBsZW5ndGggPSBzaGFwZTJELmxlbmd0aDsKICAgIGNvbnN0IHNoYXBlID0gbmV3IEFycmF5KGxlbmd0aCAqIDMpOwogICAgbGV0IGluZGV4ID0gMDsKICAgIGNvbnN0IHhPZmZzZXQgPSBib3VuZGluZ1JlY3RhbmdsZS54ICsgYm91bmRpbmdSZWN0YW5nbGUud2lkdGggLyAyOwogICAgY29uc3QgeU9mZnNldCA9IGJvdW5kaW5nUmVjdGFuZ2xlLnkgKyBib3VuZGluZ1JlY3RhbmdsZS5oZWlnaHQgLyAyOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICBzaGFwZVtpbmRleCsrXSA9IHNoYXBlMkRbaV0ueCAtIHhPZmZzZXQ7CiAgICAgIHNoYXBlW2luZGV4KytdID0gMDsKICAgICAgc2hhcGVbaW5kZXgrK10gPSBzaGFwZTJEW2ldLnkgLSB5T2Zmc2V0OwogICAgfQogICAgcmV0dXJuIHNoYXBlOwogIH0KICBmdW5jdGlvbiBjb21wdXRlUm91bmRDb3JuZXIocGl2b3QsIHN0YXJ0UG9pbnQsIGVuZFBvaW50LCBjb3JuZXJUeXBlLCBsZWZ0SXNPdXRzaWRlLCBlbGxpcHNvaWQsIGZpbmFsUG9zaXRpb25zLCBzaGFwZSwgaGVpZ2h0LCBkdXBsaWNhdGVQb2ludHMpIHsKICAgIGNvbnN0IGFuZ2xlID0gQ2FydGVzaWFuM19kZWZhdWx0LmFuZ2xlQmV0d2VlbigKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHN0YXJ0UG9pbnQsIHBpdm90LCBzY3JhdGNoMSksCiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChlbmRQb2ludCwgcGl2b3QsIHNjcmF0Y2gyKQogICAgKTsKICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gY29ybmVyVHlwZSA9PT0gQ29ybmVyVHlwZV9kZWZhdWx0LkJFVkVMRUQgPyAwIDogTWF0aC5jZWlsKGFuZ2xlIC8gTWF0aF9kZWZhdWx0LnRvUmFkaWFucyg1KSk7CiAgICBsZXQgbTsKICAgIGlmIChsZWZ0SXNPdXRzaWRlKSB7CiAgICAgIG0gPSBNYXRyaXgzX2RlZmF1bHQuZnJvbVF1YXRlcm5pb24oCiAgICAgICAgUXVhdGVybmlvbl9kZWZhdWx0LmZyb21BeGlzQW5nbGUoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKHBpdm90LCBzY3JhdGNoMSksCiAgICAgICAgICBhbmdsZSAvIChncmFudWxhcml0eSArIDEpLAogICAgICAgICAgcXVhdGVyaW9uCiAgICAgICAgKSwKICAgICAgICByb3RNYXRyaXgKICAgICAgKTsKICAgIH0gZWxzZSB7CiAgICAgIG0gPSBNYXRyaXgzX2RlZmF1bHQuZnJvbVF1YXRlcm5pb24oCiAgICAgICAgUXVhdGVybmlvbl9kZWZhdWx0LmZyb21BeGlzQW5nbGUocGl2b3QsIGFuZ2xlIC8gKGdyYW51bGFyaXR5ICsgMSksIHF1YXRlcmlvbiksCiAgICAgICAgcm90TWF0cml4CiAgICAgICk7CiAgICB9CiAgICBsZXQgbGVmdDsKICAgIGxldCBzdXJmYWNlUG9pbnQ7CiAgICBzdGFydFBvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHN0YXJ0UG9pbnQsIHN0YXJ0UG9pbnRTY3JhdGNoKTsKICAgIGlmIChncmFudWxhcml0eSA+IDApIHsKICAgICAgY29uc3QgcmVwZWF0ID0gZHVwbGljYXRlUG9pbnRzID8gMiA6IDE7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JhbnVsYXJpdHk7IGkrKykgewogICAgICAgIHN0YXJ0UG9pbnQgPSBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVZlY3RvcihtLCBzdGFydFBvaW50LCBzdGFydFBvaW50KTsKICAgICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHN0YXJ0UG9pbnQsIHBpdm90LCBzY3JhdGNoMSk7CiAgICAgICAgbGVmdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUobGVmdCwgbGVmdCk7CiAgICAgICAgaWYgKCFsZWZ0SXNPdXRzaWRlKSB7CiAgICAgICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShsZWZ0LCBsZWZ0KTsKICAgICAgICB9CiAgICAgICAgc3VyZmFjZVBvaW50ID0gZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2Uoc3RhcnRQb2ludCwgc2NyYXRjaDIpOwogICAgICAgIGZpbmFsUG9zaXRpb25zID0gYWRkUG9zaXRpb24oCiAgICAgICAgICBzdXJmYWNlUG9pbnQsCiAgICAgICAgICBsZWZ0LAogICAgICAgICAgc2hhcGUsCiAgICAgICAgICBmaW5hbFBvc2l0aW9ucywKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIGhlaWdodCwKICAgICAgICAgIDEsCiAgICAgICAgICByZXBlYXQKICAgICAgICApOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHN0YXJ0UG9pbnQsIHBpdm90LCBzY3JhdGNoMSk7CiAgICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGxlZnQsIGxlZnQpOwogICAgICBpZiAoIWxlZnRJc091dHNpZGUpIHsKICAgICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShsZWZ0LCBsZWZ0KTsKICAgICAgfQogICAgICBzdXJmYWNlUG9pbnQgPSBlbGxpcHNvaWQuc2NhbGVUb0dlb2RldGljU3VyZmFjZShzdGFydFBvaW50LCBzY3JhdGNoMik7CiAgICAgIGZpbmFsUG9zaXRpb25zID0gYWRkUG9zaXRpb24oCiAgICAgICAgc3VyZmFjZVBvaW50LAogICAgICAgIGxlZnQsCiAgICAgICAgc2hhcGUsCiAgICAgICAgZmluYWxQb3NpdGlvbnMsCiAgICAgICAgZWxsaXBzb2lkLAogICAgICAgIGhlaWdodCwKICAgICAgICAxLAogICAgICAgIDEKICAgICAgKTsKICAgICAgZW5kUG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoZW5kUG9pbnQsIHN0YXJ0UG9pbnRTY3JhdGNoKTsKICAgICAgbGVmdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChlbmRQb2ludCwgcGl2b3QsIHNjcmF0Y2gxKTsKICAgICAgbGVmdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUobGVmdCwgbGVmdCk7CiAgICAgIGlmICghbGVmdElzT3V0c2lkZSkgewogICAgICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGxlZnQsIGxlZnQpOwogICAgICB9CiAgICAgIHN1cmZhY2VQb2ludCA9IGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKGVuZFBvaW50LCBzY3JhdGNoMik7CiAgICAgIGZpbmFsUG9zaXRpb25zID0gYWRkUG9zaXRpb24oCiAgICAgICAgc3VyZmFjZVBvaW50LAogICAgICAgIGxlZnQsCiAgICAgICAgc2hhcGUsCiAgICAgICAgZmluYWxQb3NpdGlvbnMsCiAgICAgICAgZWxsaXBzb2lkLAogICAgICAgIGhlaWdodCwKICAgICAgICAxLAogICAgICAgIDEKICAgICAgKTsKICAgIH0KICAgIHJldHVybiBmaW5hbFBvc2l0aW9uczsKICB9CiAgdmFyIHNjcmF0Y2gyQXJyYXksIHNjcmF0Y2hDYXJ0ZXNpYW4xNiwgc2NyYXRjaENhcnRlc2lhbjI2LCBzY3JhdGNoQ2FydGVzaWFuMzcsIHNjcmF0Y2hDYXJ0ZXNpYW40Mywgc2NyYXRjaENhcnRlc2lhbjUyLCBzY3JhdGNoQ2FydGVzaWFuNjIsIHNjcmF0Y2hDYXJ0ZXNpYW43LCBzY3JhdGNoQ2FydGVzaWFuOCwgc2NyYXRjaENhcnRlc2lhbjksIHNjcmF0Y2gxLCBzY3JhdGNoMiwgUG9seWxpbmVWb2x1bWVHZW9tZXRyeUxpYnJhcnksIGNhcnRvZ3JhcGhpYywgbmV4dFNjcmF0Y2gsIHByZXZTY3JhdGNoLCBuZWdhdGl2ZVgsIHRyYW5zZm9ybSwgdHJhbnNsYXRpb24sIHJvdGF0aW9uWiwgc2NhbGVNYXRyaXgsIHdlc3RTY3JhdGNoLCBmaW5hbFBvc1NjcmF0Y2gsIGhlaWdodENhcnRlc2lhbiwgY2VudGVyU2NyYXRjaDIsIHF1YXRlcmlvbiwgc3RhcnRQb2ludFNjcmF0Y2gsIHJvdE1hdHJpeCwgc2NyYXRjaEZvcndhcmRQcm9qZWN0aW9uLCBzY3JhdGNoQmFja3dhcmRQcm9qZWN0aW9uLCBQb2x5bGluZVZvbHVtZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0OwogIHZhciBpbml0X1BvbHlsaW5lVm9sdW1lR2VvbWV0cnlMaWJyYXJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Qb2x5bGluZVZvbHVtZUdlb21ldHJ5TGlicmFyeS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW40KCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfQ29ybmVyVHlwZSgpOwogICAgICBpbml0X0VsbGlwc29pZFRhbmdlbnRQbGFuZSgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9NYXRyaXgzKCk7CiAgICAgIGluaXRfTWF0cml4NCgpOwogICAgICBpbml0X1BvbHlsaW5lUGlwZWxpbmUoKTsKICAgICAgaW5pdF9RdWF0ZXJuaW9uKCk7CiAgICAgIGluaXRfVHJhbnNmb3JtcygpOwogICAgICBpbml0X29uZVRpbWVXYXJuaW5nKCk7CiAgICAgIHNjcmF0Y2gyQXJyYXkgPSBbbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLCBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCldOwogICAgICBzY3JhdGNoQ2FydGVzaWFuMTYgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4yNiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjM3ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuNDMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW41MiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjYyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuNyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW45ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoMSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIFBvbHlsaW5lVm9sdW1lR2VvbWV0cnlMaWJyYXJ5ID0ge307CiAgICAgIGNhcnRvZ3JhcGhpYyA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBuZXh0U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcHJldlNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIG5lZ2F0aXZlWCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoLTEsIDAsIDApOwogICAgICB0cmFuc2Zvcm0gPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgICAgIHRyYW5zbGF0aW9uID0gbmV3IE1hdHJpeDRfZGVmYXVsdCgpOwogICAgICByb3RhdGlvblogPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIHNjYWxlTWF0cml4ID0gTWF0cml4M19kZWZhdWx0LklERU5USVRZLmNsb25lKCk7CiAgICAgIHdlc3RTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBmaW5hbFBvc1NjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KCk7CiAgICAgIGhlaWdodENhcnRlc2lhbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2VudGVyU2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHF1YXRlcmlvbiA9IG5ldyBRdWF0ZXJuaW9uX2RlZmF1bHQoKTsKICAgICAgc3RhcnRQb2ludFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHJvdE1hdHJpeCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgUG9seWxpbmVWb2x1bWVHZW9tZXRyeUxpYnJhcnkucmVtb3ZlRHVwbGljYXRlc0Zyb21TaGFwZSA9IGZ1bmN0aW9uKHNoYXBlUG9zaXRpb25zKSB7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gc2hhcGVQb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGNvbnN0IGNsZWFuZWRQb3NpdGlvbnMgPSBbXTsKICAgICAgICBmb3IgKGxldCBpMCA9IGxlbmd0aCAtIDEsIGkxID0gMDsgaTEgPCBsZW5ndGg7IGkwID0gaTErKykgewogICAgICAgICAgY29uc3QgdjAyID0gc2hhcGVQb3NpdGlvbnNbaTBdOwogICAgICAgICAgY29uc3QgdjEyID0gc2hhcGVQb3NpdGlvbnNbaTFdOwogICAgICAgICAgaWYgKCFDYXJ0ZXNpYW4yX2RlZmF1bHQuZXF1YWxzKHYwMiwgdjEyKSkgewogICAgICAgICAgICBjbGVhbmVkUG9zaXRpb25zLnB1c2godjEyKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNsZWFuZWRQb3NpdGlvbnM7CiAgICAgIH07CiAgICAgIFBvbHlsaW5lVm9sdW1lR2VvbWV0cnlMaWJyYXJ5LmFuZ2xlSXNHcmVhdGVyVGhhblBpID0gZnVuY3Rpb24oZm9yd2FyZCwgYmFja3dhcmQsIHBvc2l0aW9uLCBlbGxpcHNvaWQpIHsKICAgICAgICBjb25zdCB0YW5nZW50UGxhbmUgPSBuZXcgRWxsaXBzb2lkVGFuZ2VudFBsYW5lX2RlZmF1bHQocG9zaXRpb24sIGVsbGlwc29pZCk7CiAgICAgICAgY29uc3QgbmV4dCA9IHRhbmdlbnRQbGFuZS5wcm9qZWN0UG9pbnRPbnRvUGxhbmUoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHBvc2l0aW9uLCBmb3J3YXJkLCBuZXh0U2NyYXRjaCksCiAgICAgICAgICBuZXh0U2NyYXRjaAogICAgICAgICk7CiAgICAgICAgY29uc3QgcHJldiA9IHRhbmdlbnRQbGFuZS5wcm9qZWN0UG9pbnRPbnRvUGxhbmUoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHBvc2l0aW9uLCBiYWNrd2FyZCwgcHJldlNjcmF0Y2gpLAogICAgICAgICAgcHJldlNjcmF0Y2gKICAgICAgICApOwogICAgICAgIHJldHVybiBwcmV2LnggKiBuZXh0LnkgLSBwcmV2LnkgKiBuZXh0LnggPj0gMDsKICAgICAgfTsKICAgICAgc2NyYXRjaEZvcndhcmRQcm9qZWN0aW9uID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQmFja3dhcmRQcm9qZWN0aW9uID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBQb2x5bGluZVZvbHVtZUdlb21ldHJ5TGlicmFyeS5jb21wdXRlUG9zaXRpb25zID0gZnVuY3Rpb24ocG9zaXRpb25zLCBzaGFwZTJELCBib3VuZGluZ1JlY3RhbmdsZSwgZ2VvbWV0cnksIGR1cGxpY2F0ZVBvaW50cykgewogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IGdlb21ldHJ5Ll9lbGxpcHNvaWQ7CiAgICAgICAgY29uc3QgaGVpZ2h0cyA9IHNjYWxlVG9TdXJmYWNlKHBvc2l0aW9ucywgZWxsaXBzb2lkKTsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IGdlb21ldHJ5Ll9ncmFudWxhcml0eTsKICAgICAgICBjb25zdCBjb3JuZXJUeXBlID0gZ2VvbWV0cnkuX2Nvcm5lclR5cGU7CiAgICAgICAgY29uc3Qgc2hhcGVGb3JTaWRlcyA9IGR1cGxpY2F0ZVBvaW50cyA/IGNvbnZlcnRTaGFwZVRvM0REdXBsaWNhdGUoc2hhcGUyRCwgYm91bmRpbmdSZWN0YW5nbGUpIDogY29udmVydFNoYXBlVG8zRChzaGFwZTJELCBib3VuZGluZ1JlY3RhbmdsZSk7CiAgICAgICAgY29uc3Qgc2hhcGVGb3JFbmRzID0gZHVwbGljYXRlUG9pbnRzID8gY29udmVydFNoYXBlVG8zRChzaGFwZTJELCBib3VuZGluZ1JlY3RhbmdsZSkgOiB2b2lkIDA7CiAgICAgICAgY29uc3QgaGVpZ2h0T2Zmc2V0ID0gYm91bmRpbmdSZWN0YW5nbGUuaGVpZ2h0IC8gMjsKICAgICAgICBjb25zdCB3aWR0aCA9IGJvdW5kaW5nUmVjdGFuZ2xlLndpZHRoIC8gMjsKICAgICAgICBsZXQgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBsZXQgZmluYWxQb3NpdGlvbnMgPSBbXTsKICAgICAgICBsZXQgZW5kcyA9IGR1cGxpY2F0ZVBvaW50cyA/IFtdIDogdm9pZCAwOwogICAgICAgIGxldCBmb3J3YXJkID0gc2NyYXRjaENhcnRlc2lhbjE2OwogICAgICAgIGxldCBiYWNrd2FyZCA9IHNjcmF0Y2hDYXJ0ZXNpYW4yNjsKICAgICAgICBsZXQgY29ybmVyRGlyZWN0aW9uID0gc2NyYXRjaENhcnRlc2lhbjM3OwogICAgICAgIGxldCBzdXJmYWNlTm9ybWFsID0gc2NyYXRjaENhcnRlc2lhbjQzOwogICAgICAgIGxldCBwaXZvdCA9IHNjcmF0Y2hDYXJ0ZXNpYW41MjsKICAgICAgICBsZXQgc3RhcnQgPSBzY3JhdGNoQ2FydGVzaWFuNjI7CiAgICAgICAgbGV0IGVuZCA9IHNjcmF0Y2hDYXJ0ZXNpYW43OwogICAgICAgIGxldCBsZWZ0ID0gc2NyYXRjaENhcnRlc2lhbjg7CiAgICAgICAgbGV0IHByZXZpb3VzUG9zaXRpb24gPSBzY3JhdGNoQ2FydGVzaWFuOTsKICAgICAgICBsZXQgcG9zaXRpb24gPSBwb3NpdGlvbnNbMF07CiAgICAgICAgbGV0IG5leHRQb3NpdGlvbiA9IHBvc2l0aW9uc1sxXTsKICAgICAgICBzdXJmYWNlTm9ybWFsID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwb3NpdGlvbiwgc3VyZmFjZU5vcm1hbCk7CiAgICAgICAgZm9yd2FyZCA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChuZXh0UG9zaXRpb24sIHBvc2l0aW9uLCBmb3J3YXJkKTsKICAgICAgICBmb3J3YXJkID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShmb3J3YXJkLCBmb3J3YXJkKTsKICAgICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHN1cmZhY2VOb3JtYWwsIGZvcndhcmQsIGxlZnQpOwogICAgICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGxlZnQsIGxlZnQpOwogICAgICAgIGxldCBoMCA9IGhlaWdodHNbMF07CiAgICAgICAgbGV0IGgxID0gaGVpZ2h0c1sxXTsKICAgICAgICBpZiAoZHVwbGljYXRlUG9pbnRzKSB7CiAgICAgICAgICBlbmRzID0gYWRkUG9zaXRpb24oCiAgICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgICBsZWZ0LAogICAgICAgICAgICBzaGFwZUZvckVuZHMsCiAgICAgICAgICAgIGVuZHMsCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgaDAgKyBoZWlnaHRPZmZzZXQsCiAgICAgICAgICAgIDEsCiAgICAgICAgICAgIDEKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHByZXZpb3VzUG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocG9zaXRpb24sIHByZXZpb3VzUG9zaXRpb24pOwogICAgICAgIHBvc2l0aW9uID0gbmV4dFBvc2l0aW9uOwogICAgICAgIGJhY2t3YXJkID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShmb3J3YXJkLCBiYWNrd2FyZCk7CiAgICAgICAgbGV0IHN1YmRpdmlkZWRIZWlnaHRzOwogICAgICAgIGxldCBzdWJkaXZpZGVkUG9zaXRpb25zOwogICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuZ3RoIC0gMTsgaSsrKSB7CiAgICAgICAgICBjb25zdCByZXBlYXQgPSBkdXBsaWNhdGVQb2ludHMgPyAyIDogMTsKICAgICAgICAgIG5leHRQb3NpdGlvbiA9IHBvc2l0aW9uc1tpICsgMV07CiAgICAgICAgICBpZiAocG9zaXRpb24uZXF1YWxzKG5leHRQb3NpdGlvbikpIHsKICAgICAgICAgICAgb25lVGltZVdhcm5pbmdfZGVmYXVsdCgKICAgICAgICAgICAgICAiUG9zaXRpb25zIGFyZSB0b28gY2xvc2UgYW5kIGFyZSBjb25zaWRlcmVkIGVxdWl2YWxlbnQgd2l0aCByb3VuZGluZyBlcnJvci4iCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgZm9yd2FyZCA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChuZXh0UG9zaXRpb24sIHBvc2l0aW9uLCBmb3J3YXJkKTsKICAgICAgICAgIGZvcndhcmQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGZvcndhcmQsIGZvcndhcmQpOwogICAgICAgICAgY29ybmVyRGlyZWN0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZChmb3J3YXJkLCBiYWNrd2FyZCwgY29ybmVyRGlyZWN0aW9uKTsKICAgICAgICAgIGNvcm5lckRpcmVjdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoY29ybmVyRGlyZWN0aW9uLCBjb3JuZXJEaXJlY3Rpb24pOwogICAgICAgICAgc3VyZmFjZU5vcm1hbCA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwocG9zaXRpb24sIHN1cmZhY2VOb3JtYWwpOwogICAgICAgICAgY29uc3QgZm9yd2FyZFByb2plY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgICAgc3VyZmFjZU5vcm1hbCwKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmRvdChmb3J3YXJkLCBzdXJmYWNlTm9ybWFsKSwKICAgICAgICAgICAgc2NyYXRjaEZvcndhcmRQcm9qZWN0aW9uCiAgICAgICAgICApOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGZvcndhcmQsIGZvcndhcmRQcm9qZWN0aW9uLCBmb3J3YXJkUHJvamVjdGlvbik7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGZvcndhcmRQcm9qZWN0aW9uLCBmb3J3YXJkUHJvamVjdGlvbik7CiAgICAgICAgICBjb25zdCBiYWNrd2FyZFByb2plY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgICAgc3VyZmFjZU5vcm1hbCwKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmRvdChiYWNrd2FyZCwgc3VyZmFjZU5vcm1hbCksCiAgICAgICAgICAgIHNjcmF0Y2hCYWNrd2FyZFByb2plY3Rpb24KICAgICAgICAgICk7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoYmFja3dhcmQsIGJhY2t3YXJkUHJvamVjdGlvbiwgYmFja3dhcmRQcm9qZWN0aW9uKTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoYmFja3dhcmRQcm9qZWN0aW9uLCBiYWNrd2FyZFByb2plY3Rpb24pOwogICAgICAgICAgY29uc3QgZG9Db3JuZXIgPSAhTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICAgIE1hdGguYWJzKENhcnRlc2lhbjNfZGVmYXVsdC5kb3QoZm9yd2FyZFByb2plY3Rpb24sIGJhY2t3YXJkUHJvamVjdGlvbikpLAogICAgICAgICAgICAxLAogICAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjcKICAgICAgICAgICk7CiAgICAgICAgICBpZiAoZG9Db3JuZXIpIHsKICAgICAgICAgICAgY29ybmVyRGlyZWN0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKAogICAgICAgICAgICAgIGNvcm5lckRpcmVjdGlvbiwKICAgICAgICAgICAgICBzdXJmYWNlTm9ybWFsLAogICAgICAgICAgICAgIGNvcm5lckRpcmVjdGlvbgogICAgICAgICAgICApOwogICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoCiAgICAgICAgICAgICAgc3VyZmFjZU5vcm1hbCwKICAgICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24sCiAgICAgICAgICAgICAgY29ybmVyRGlyZWN0aW9uCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGNvcm5lckRpcmVjdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoY29ybmVyRGlyZWN0aW9uLCBjb3JuZXJEaXJlY3Rpb24pOwogICAgICAgICAgICBjb25zdCBzY2FsYXIgPSAxIC8gTWF0aC5tYXgoCiAgICAgICAgICAgICAgMC4yNSwKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKAogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKGNvcm5lckRpcmVjdGlvbiwgYmFja3dhcmQsIHNjcmF0Y2gxKQogICAgICAgICAgICAgICkKICAgICAgICAgICAgKTsKICAgICAgICAgICAgY29uc3QgbGVmdElzT3V0c2lkZSA9IFBvbHlsaW5lVm9sdW1lR2VvbWV0cnlMaWJyYXJ5LmFuZ2xlSXNHcmVhdGVyVGhhblBpKAogICAgICAgICAgICAgIGZvcndhcmQsCiAgICAgICAgICAgICAgYmFja3dhcmQsCiAgICAgICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICAgICAgZWxsaXBzb2lkCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGlmIChsZWZ0SXNPdXRzaWRlKSB7CiAgICAgICAgICAgICAgcGl2b3QgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICAgICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgICAgICAgICAgY29ybmVyRGlyZWN0aW9uLAogICAgICAgICAgICAgICAgICBzY2FsYXIgKiB3aWR0aCwKICAgICAgICAgICAgICAgICAgY29ybmVyRGlyZWN0aW9uCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgcGl2b3QKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIHN0YXJ0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZCgKICAgICAgICAgICAgICAgIHBpdm90LAogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobGVmdCwgd2lkdGgsIHN0YXJ0KSwKICAgICAgICAgICAgICAgIHN0YXJ0CiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBzY3JhdGNoMkFycmF5WzBdID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHByZXZpb3VzUG9zaXRpb24sIHNjcmF0Y2gyQXJyYXlbMF0pOwogICAgICAgICAgICAgIHNjcmF0Y2gyQXJyYXlbMV0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoc3RhcnQsIHNjcmF0Y2gyQXJyYXlbMV0pOwogICAgICAgICAgICAgIHN1YmRpdmlkZWRIZWlnaHRzID0gc3ViZGl2aWRlSGVpZ2h0czIoCiAgICAgICAgICAgICAgICBzY3JhdGNoMkFycmF5LAogICAgICAgICAgICAgICAgaDAgKyBoZWlnaHRPZmZzZXQsCiAgICAgICAgICAgICAgICBoMSArIGhlaWdodE9mZnNldCwKICAgICAgICAgICAgICAgIGdyYW51bGFyaXR5CiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zID0gUG9seWxpbmVQaXBlbGluZV9kZWZhdWx0LmdlbmVyYXRlQXJjKHsKICAgICAgICAgICAgICAgIHBvc2l0aW9uczogc2NyYXRjaDJBcnJheSwKICAgICAgICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgICAgICAgZWxsaXBzb2lkCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgZmluYWxQb3NpdGlvbnMgPSBhZGRQb3NpdGlvbnMoCiAgICAgICAgICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zLAogICAgICAgICAgICAgICAgbGVmdCwKICAgICAgICAgICAgICAgIHNoYXBlRm9yU2lkZXMsCiAgICAgICAgICAgICAgICBmaW5hbFBvc2l0aW9ucywKICAgICAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgICAgIHN1YmRpdmlkZWRIZWlnaHRzLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgbGVmdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhzdXJmYWNlTm9ybWFsLCBmb3J3YXJkLCBsZWZ0KTsKICAgICAgICAgICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShsZWZ0LCBsZWZ0KTsKICAgICAgICAgICAgICBlbmQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICAgICAgICAgICAgcGl2b3QsCiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihsZWZ0LCB3aWR0aCwgZW5kKSwKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgaWYgKGNvcm5lclR5cGUgPT09IENvcm5lclR5cGVfZGVmYXVsdC5ST1VOREVEIHx8IGNvcm5lclR5cGUgPT09IENvcm5lclR5cGVfZGVmYXVsdC5CRVZFTEVEKSB7CiAgICAgICAgICAgICAgICBjb21wdXRlUm91bmRDb3JuZXIoCiAgICAgICAgICAgICAgICAgIHBpdm90LAogICAgICAgICAgICAgICAgICBzdGFydCwKICAgICAgICAgICAgICAgICAgZW5kLAogICAgICAgICAgICAgICAgICBjb3JuZXJUeXBlLAogICAgICAgICAgICAgICAgICBsZWZ0SXNPdXRzaWRlLAogICAgICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgICAgICAgICBzaGFwZUZvclNpZGVzLAogICAgICAgICAgICAgICAgICBoMSArIGhlaWdodE9mZnNldCwKICAgICAgICAgICAgICAgICAgZHVwbGljYXRlUG9pbnRzCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGNvcm5lckRpcmVjdGlvbiwgY29ybmVyRGlyZWN0aW9uKTsKICAgICAgICAgICAgICAgIGZpbmFsUG9zaXRpb25zID0gYWRkUG9zaXRpb24oCiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24sCiAgICAgICAgICAgICAgICAgIHNoYXBlRm9yU2lkZXMsCiAgICAgICAgICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgICAgIGgxICsgaGVpZ2h0T2Zmc2V0LAogICAgICAgICAgICAgICAgICBzY2FsYXIsCiAgICAgICAgICAgICAgICAgIHJlcGVhdAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcHJldmlvdXNQb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShlbmQsIHByZXZpb3VzUG9zaXRpb24pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHBpdm90ID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZCgKICAgICAgICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgICAgICAgICAgIGNvcm5lckRpcmVjdGlvbiwKICAgICAgICAgICAgICAgICAgc2NhbGFyICogd2lkdGgsCiAgICAgICAgICAgICAgICAgIGNvcm5lckRpcmVjdGlvbgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIHBpdm90CiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBzdGFydCA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICAgICAgICBwaXZvdCwKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGxlZnQsIC13aWR0aCwgc3RhcnQpLAogICAgICAgICAgICAgICAgc3RhcnQKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIHNjcmF0Y2gyQXJyYXlbMF0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocHJldmlvdXNQb3NpdGlvbiwgc2NyYXRjaDJBcnJheVswXSk7CiAgICAgICAgICAgICAgc2NyYXRjaDJBcnJheVsxXSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShzdGFydCwgc2NyYXRjaDJBcnJheVsxXSk7CiAgICAgICAgICAgICAgc3ViZGl2aWRlZEhlaWdodHMgPSBzdWJkaXZpZGVIZWlnaHRzMigKICAgICAgICAgICAgICAgIHNjcmF0Y2gyQXJyYXksCiAgICAgICAgICAgICAgICBoMCArIGhlaWdodE9mZnNldCwKICAgICAgICAgICAgICAgIGgxICsgaGVpZ2h0T2Zmc2V0LAogICAgICAgICAgICAgICAgZ3JhbnVsYXJpdHkKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMgPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQuZ2VuZXJhdGVBcmMoewogICAgICAgICAgICAgICAgcG9zaXRpb25zOiBzY3JhdGNoMkFycmF5LAogICAgICAgICAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgICAgICAgICBlbGxpcHNvaWQKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBmaW5hbFBvc2l0aW9ucyA9IGFkZFBvc2l0aW9ucygKICAgICAgICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMsCiAgICAgICAgICAgICAgICBsZWZ0LAogICAgICAgICAgICAgICAgc2hhcGVGb3JTaWRlcywKICAgICAgICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICAgICAgc3ViZGl2aWRlZEhlaWdodHMsCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHN1cmZhY2VOb3JtYWwsIGZvcndhcmQsIGxlZnQpOwogICAgICAgICAgICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGxlZnQsIGxlZnQpOwogICAgICAgICAgICAgIGVuZCA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICAgICAgICBwaXZvdCwKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGxlZnQsIC13aWR0aCwgZW5kKSwKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgaWYgKGNvcm5lclR5cGUgPT09IENvcm5lclR5cGVfZGVmYXVsdC5ST1VOREVEIHx8IGNvcm5lclR5cGUgPT09IENvcm5lclR5cGVfZGVmYXVsdC5CRVZFTEVEKSB7CiAgICAgICAgICAgICAgICBjb21wdXRlUm91bmRDb3JuZXIoCiAgICAgICAgICAgICAgICAgIHBpdm90LAogICAgICAgICAgICAgICAgICBzdGFydCwKICAgICAgICAgICAgICAgICAgZW5kLAogICAgICAgICAgICAgICAgICBjb3JuZXJUeXBlLAogICAgICAgICAgICAgICAgICBsZWZ0SXNPdXRzaWRlLAogICAgICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgICAgICAgICBzaGFwZUZvclNpZGVzLAogICAgICAgICAgICAgICAgICBoMSArIGhlaWdodE9mZnNldCwKICAgICAgICAgICAgICAgICAgZHVwbGljYXRlUG9pbnRzCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBmaW5hbFBvc2l0aW9ucyA9IGFkZFBvc2l0aW9uKAogICAgICAgICAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgICAgICAgICAgY29ybmVyRGlyZWN0aW9uLAogICAgICAgICAgICAgICAgICBzaGFwZUZvclNpZGVzLAogICAgICAgICAgICAgICAgICBmaW5hbFBvc2l0aW9ucywKICAgICAgICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICAgICAgICBoMSArIGhlaWdodE9mZnNldCwKICAgICAgICAgICAgICAgICAgc2NhbGFyLAogICAgICAgICAgICAgICAgICByZXBlYXQKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHByZXZpb3VzUG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoZW5kLCBwcmV2aW91c1Bvc2l0aW9uKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBiYWNrd2FyZCA9IENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUoZm9yd2FyZCwgYmFja3dhcmQpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZmluYWxQb3NpdGlvbnMgPSBhZGRQb3NpdGlvbigKICAgICAgICAgICAgICBwcmV2aW91c1Bvc2l0aW9uLAogICAgICAgICAgICAgIGxlZnQsCiAgICAgICAgICAgICAgc2hhcGVGb3JTaWRlcywKICAgICAgICAgICAgICBmaW5hbFBvc2l0aW9ucywKICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgaDAgKyBoZWlnaHRPZmZzZXQsCiAgICAgICAgICAgICAgMSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHByZXZpb3VzUG9zaXRpb24gPSBwb3NpdGlvbjsKICAgICAgICAgIH0KICAgICAgICAgIGgwID0gaDE7CiAgICAgICAgICBoMSA9IGhlaWdodHNbaSArIDFdOwogICAgICAgICAgcG9zaXRpb24gPSBuZXh0UG9zaXRpb247CiAgICAgICAgfQogICAgICAgIHNjcmF0Y2gyQXJyYXlbMF0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocHJldmlvdXNQb3NpdGlvbiwgc2NyYXRjaDJBcnJheVswXSk7CiAgICAgICAgc2NyYXRjaDJBcnJheVsxXSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShwb3NpdGlvbiwgc2NyYXRjaDJBcnJheVsxXSk7CiAgICAgICAgc3ViZGl2aWRlZEhlaWdodHMgPSBzdWJkaXZpZGVIZWlnaHRzMigKICAgICAgICAgIHNjcmF0Y2gyQXJyYXksCiAgICAgICAgICBoMCArIGhlaWdodE9mZnNldCwKICAgICAgICAgIGgxICsgaGVpZ2h0T2Zmc2V0LAogICAgICAgICAgZ3JhbnVsYXJpdHkKICAgICAgICApOwogICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMgPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQuZ2VuZXJhdGVBcmMoewogICAgICAgICAgcG9zaXRpb25zOiBzY3JhdGNoMkFycmF5LAogICAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgICBlbGxpcHNvaWQKICAgICAgICB9KTsKICAgICAgICBmaW5hbFBvc2l0aW9ucyA9IGFkZFBvc2l0aW9ucygKICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMsCiAgICAgICAgICBsZWZ0LAogICAgICAgICAgc2hhcGVGb3JTaWRlcywKICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgc3ViZGl2aWRlZEhlaWdodHMsCiAgICAgICAgICAxCiAgICAgICAgKTsKICAgICAgICBpZiAoZHVwbGljYXRlUG9pbnRzKSB7CiAgICAgICAgICBlbmRzID0gYWRkUG9zaXRpb24oCiAgICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgICBsZWZ0LAogICAgICAgICAgICBzaGFwZUZvckVuZHMsCiAgICAgICAgICAgIGVuZHMsCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgaDEgKyBoZWlnaHRPZmZzZXQsCiAgICAgICAgICAgIDEsCiAgICAgICAgICAgIDEKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGxlbmd0aCA9IGZpbmFsUG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBjb25zdCBwb3NMZW5ndGggPSBkdXBsaWNhdGVQb2ludHMgPyBsZW5ndGggKyBlbmRzLmxlbmd0aCA6IGxlbmd0aDsKICAgICAgICBjb25zdCBjb21iaW5lZFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkocG9zTGVuZ3RoKTsKICAgICAgICBjb21iaW5lZFBvc2l0aW9ucy5zZXQoZmluYWxQb3NpdGlvbnMpOwogICAgICAgIGlmIChkdXBsaWNhdGVQb2ludHMpIHsKICAgICAgICAgIGNvbWJpbmVkUG9zaXRpb25zLnNldChlbmRzLCBsZW5ndGgpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gY29tYmluZWRQb3NpdGlvbnM7CiAgICAgIH07CiAgICAgIFBvbHlsaW5lVm9sdW1lR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQgPSBQb2x5bGluZVZvbHVtZUdlb21ldHJ5TGlicmFyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5LmpzCiAgZnVuY3Rpb24gY29tcHV0ZVJvdW5kQ29ybmVyMihjb3JuZXJQb2ludCwgc3RhcnRQb2ludCwgZW5kUG9pbnQsIGNvcm5lclR5cGUsIGxlZnRJc091dHNpZGUpIHsKICAgIGNvbnN0IGFuZ2xlID0gQ2FydGVzaWFuM19kZWZhdWx0LmFuZ2xlQmV0d2VlbigKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHN0YXJ0UG9pbnQsIGNvcm5lclBvaW50LCBzY3JhdGNoMTIpLAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoZW5kUG9pbnQsIGNvcm5lclBvaW50LCBzY3JhdGNoMjIpCiAgICApOwogICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBjb3JuZXJUeXBlID09PSBDb3JuZXJUeXBlX2RlZmF1bHQuQkVWRUxFRCA/IDEgOiBNYXRoLmNlaWwoYW5nbGUgLyBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKDUpKSArIDE7CiAgICBjb25zdCBzaXplID0gZ3JhbnVsYXJpdHkgKiAzOwogICAgY29uc3QgYXJyYXkgPSBuZXcgQXJyYXkoc2l6ZSk7CiAgICBhcnJheVtzaXplIC0gM10gPSBlbmRQb2ludC54OwogICAgYXJyYXlbc2l6ZSAtIDJdID0gZW5kUG9pbnQueTsKICAgIGFycmF5W3NpemUgLSAxXSA9IGVuZFBvaW50Lno7CiAgICBsZXQgbTsKICAgIGlmIChsZWZ0SXNPdXRzaWRlKSB7CiAgICAgIG0gPSBNYXRyaXgzX2RlZmF1bHQuZnJvbVF1YXRlcm5pb24oCiAgICAgICAgUXVhdGVybmlvbl9kZWZhdWx0LmZyb21BeGlzQW5nbGUoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGNvcm5lclBvaW50LCBzY3JhdGNoMTIpLAogICAgICAgICAgYW5nbGUgLyBncmFudWxhcml0eSwKICAgICAgICAgIHF1YXRlcmlvbjIKICAgICAgICApLAogICAgICAgIHJvdE1hdHJpeDIKICAgICAgKTsKICAgIH0gZWxzZSB7CiAgICAgIG0gPSBNYXRyaXgzX2RlZmF1bHQuZnJvbVF1YXRlcm5pb24oCiAgICAgICAgUXVhdGVybmlvbl9kZWZhdWx0LmZyb21BeGlzQW5nbGUoY29ybmVyUG9pbnQsIGFuZ2xlIC8gZ3JhbnVsYXJpdHksIHF1YXRlcmlvbjIpLAogICAgICAgIHJvdE1hdHJpeDIKICAgICAgKTsKICAgIH0KICAgIGxldCBpbmRleCA9IDA7CiAgICBzdGFydFBvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHN0YXJ0UG9pbnQsIHNjcmF0Y2gxMik7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyYW51bGFyaXR5OyBpKyspIHsKICAgICAgc3RhcnRQb2ludCA9IE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKG0sIHN0YXJ0UG9pbnQsIHN0YXJ0UG9pbnQpOwogICAgICBhcnJheVtpbmRleCsrXSA9IHN0YXJ0UG9pbnQueDsKICAgICAgYXJyYXlbaW5kZXgrK10gPSBzdGFydFBvaW50Lnk7CiAgICAgIGFycmF5W2luZGV4KytdID0gc3RhcnRQb2ludC56OwogICAgfQogICAgcmV0dXJuIGFycmF5OwogIH0KICBmdW5jdGlvbiBhZGRFbmRDYXBzKGNhbGN1bGF0ZWRQb3NpdGlvbnMpIHsKICAgIGxldCBjb3JuZXJQb2ludCA9IGNhcnRlc2lhbjE7CiAgICBsZXQgc3RhcnRQb2ludCA9IGNhcnRlc2lhbjI7CiAgICBsZXQgZW5kUG9pbnQgPSBjYXJ0ZXNpYW4zOwogICAgbGV0IGxlZnRFZGdlID0gY2FsY3VsYXRlZFBvc2l0aW9uc1sxXTsKICAgIHN0YXJ0UG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICBjYWxjdWxhdGVkUG9zaXRpb25zWzFdLAogICAgICBsZWZ0RWRnZS5sZW5ndGggLSAzLAogICAgICBzdGFydFBvaW50CiAgICApOwogICAgZW5kUG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGNhbGN1bGF0ZWRQb3NpdGlvbnNbMF0sIDAsIGVuZFBvaW50KTsKICAgIGNvcm5lclBvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1pZHBvaW50KHN0YXJ0UG9pbnQsIGVuZFBvaW50LCBjb3JuZXJQb2ludCk7CiAgICBjb25zdCBmaXJzdEVuZENhcCA9IGNvbXB1dGVSb3VuZENvcm5lcjIoCiAgICAgIGNvcm5lclBvaW50LAogICAgICBzdGFydFBvaW50LAogICAgICBlbmRQb2ludCwKICAgICAgQ29ybmVyVHlwZV9kZWZhdWx0LlJPVU5ERUQsCiAgICAgIGZhbHNlCiAgICApOwogICAgY29uc3QgbGVuZ3RoID0gY2FsY3VsYXRlZFBvc2l0aW9ucy5sZW5ndGggLSAxOwogICAgY29uc3QgcmlnaHRFZGdlID0gY2FsY3VsYXRlZFBvc2l0aW9uc1tsZW5ndGggLSAxXTsKICAgIGxlZnRFZGdlID0gY2FsY3VsYXRlZFBvc2l0aW9uc1tsZW5ndGhdOwogICAgc3RhcnRQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgIHJpZ2h0RWRnZSwKICAgICAgcmlnaHRFZGdlLmxlbmd0aCAtIDMsCiAgICAgIHN0YXJ0UG9pbnQKICAgICk7CiAgICBlbmRQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkobGVmdEVkZ2UsIDAsIGVuZFBvaW50KTsKICAgIGNvcm5lclBvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1pZHBvaW50KHN0YXJ0UG9pbnQsIGVuZFBvaW50LCBjb3JuZXJQb2ludCk7CiAgICBjb25zdCBsYXN0RW5kQ2FwID0gY29tcHV0ZVJvdW5kQ29ybmVyMigKICAgICAgY29ybmVyUG9pbnQsCiAgICAgIHN0YXJ0UG9pbnQsCiAgICAgIGVuZFBvaW50LAogICAgICBDb3JuZXJUeXBlX2RlZmF1bHQuUk9VTkRFRCwKICAgICAgZmFsc2UKICAgICk7CiAgICByZXR1cm4gW2ZpcnN0RW5kQ2FwLCBsYXN0RW5kQ2FwXTsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZU1pdGVyZWRDb3JuZXIocG9zaXRpb24sIGxlZnRDb3JuZXJEaXJlY3Rpb24sIGxhc3RQb2ludCwgbGVmdElzT3V0c2lkZSkgewogICAgbGV0IGNvcm5lclBvaW50ID0gc2NyYXRjaDEyOwogICAgaWYgKGxlZnRJc091dHNpZGUpIHsKICAgICAgY29ybmVyUG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHBvc2l0aW9uLCBsZWZ0Q29ybmVyRGlyZWN0aW9uLCBjb3JuZXJQb2ludCk7CiAgICB9IGVsc2UgewogICAgICBsZWZ0Q29ybmVyRGlyZWN0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZSgKICAgICAgICBsZWZ0Q29ybmVyRGlyZWN0aW9uLAogICAgICAgIGxlZnRDb3JuZXJEaXJlY3Rpb24KICAgICAgKTsKICAgICAgY29ybmVyUG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHBvc2l0aW9uLCBsZWZ0Q29ybmVyRGlyZWN0aW9uLCBjb3JuZXJQb2ludCk7CiAgICB9CiAgICByZXR1cm4gWwogICAgICBjb3JuZXJQb2ludC54LAogICAgICBjb3JuZXJQb2ludC55LAogICAgICBjb3JuZXJQb2ludC56LAogICAgICBsYXN0UG9pbnQueCwKICAgICAgbGFzdFBvaW50LnksCiAgICAgIGxhc3RQb2ludC56CiAgICBdOwogIH0KICBmdW5jdGlvbiBhZGRTaGlmdGVkUG9zaXRpb25zKHBvc2l0aW9ucywgbGVmdCwgc2NhbGFyLCBjYWxjdWxhdGVkUG9zaXRpb25zKSB7CiAgICBjb25zdCByaWdodFBvc2l0aW9ucyA9IG5ldyBBcnJheShwb3NpdGlvbnMubGVuZ3RoKTsKICAgIGNvbnN0IGxlZnRQb3NpdGlvbnMgPSBuZXcgQXJyYXkocG9zaXRpb25zLmxlbmd0aCk7CiAgICBjb25zdCBzY2FsZWRMZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobGVmdCwgc2NhbGFyLCBzY3JhdGNoMTIpOwogICAgY29uc3Qgc2NhbGVkUmlnaHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKHNjYWxlZExlZnQsIHNjcmF0Y2gyMik7CiAgICBsZXQgcmlnaHRJbmRleCA9IDA7CiAgICBsZXQgbGVmdEluZGV4ID0gcG9zaXRpb25zLmxlbmd0aCAtIDE7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGg7IGkgKz0gMykgewogICAgICBjb25zdCBwb3MgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHBvc2l0aW9ucywgaSwgc2NyYXRjaDMpOwogICAgICBjb25zdCByaWdodFBvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocG9zLCBzY2FsZWRSaWdodCwgc2NyYXRjaDQpOwogICAgICByaWdodFBvc2l0aW9uc1tyaWdodEluZGV4KytdID0gcmlnaHRQb3MueDsKICAgICAgcmlnaHRQb3NpdGlvbnNbcmlnaHRJbmRleCsrXSA9IHJpZ2h0UG9zLnk7CiAgICAgIHJpZ2h0UG9zaXRpb25zW3JpZ2h0SW5kZXgrK10gPSByaWdodFBvcy56OwogICAgICBjb25zdCBsZWZ0UG9zID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZChwb3MsIHNjYWxlZExlZnQsIHNjcmF0Y2g0KTsKICAgICAgbGVmdFBvc2l0aW9uc1tsZWZ0SW5kZXgtLV0gPSBsZWZ0UG9zLno7CiAgICAgIGxlZnRQb3NpdGlvbnNbbGVmdEluZGV4LS1dID0gbGVmdFBvcy55OwogICAgICBsZWZ0UG9zaXRpb25zW2xlZnRJbmRleC0tXSA9IGxlZnRQb3MueDsKICAgIH0KICAgIGNhbGN1bGF0ZWRQb3NpdGlvbnMucHVzaChyaWdodFBvc2l0aW9ucywgbGVmdFBvc2l0aW9ucyk7CiAgICByZXR1cm4gY2FsY3VsYXRlZFBvc2l0aW9uczsKICB9CiAgdmFyIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5LCBzY3JhdGNoMTIsIHNjcmF0Y2gyMiwgc2NyYXRjaDMsIHNjcmF0Y2g0LCBzY2FsZUFycmF5MiwgY2FydGVzaWFuMSwgY2FydGVzaWFuMiwgY2FydGVzaWFuMywgY2FydGVzaWFuNCwgY2FydGVzaWFuNSwgY2FydGVzaWFuNiwgY2FydGVzaWFuNywgY2FydGVzaWFuOCwgY2FydGVzaWFuOSwgY2FydGVzaWFuMTAsIHF1YXRlcmlvbjIsIHJvdE1hdHJpeDIsIHNjcmF0Y2hGb3J3YXJkUHJvamVjdGlvbjIsIHNjcmF0Y2hCYWNrd2FyZFByb2plY3Rpb24yLCBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0OwogIHZhciBpbml0X0NvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Db3JyaWRvckdlb21ldHJ5TGlicmFyeS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0Nvcm5lclR5cGUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDMoKTsKICAgICAgaW5pdF9Qb2x5bGluZVBpcGVsaW5lKCk7CiAgICAgIGluaXRfUG9seWxpbmVWb2x1bWVHZW9tZXRyeUxpYnJhcnkoKTsKICAgICAgaW5pdF9RdWF0ZXJuaW9uKCk7CiAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5ID0ge307CiAgICAgIHNjcmF0Y2gxMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaDIyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaDQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjYWxlQXJyYXkyID0gW25ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpXTsKICAgICAgY2FydGVzaWFuMSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuNCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuNSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuNiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuNyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuOCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuOSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuMTAgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHF1YXRlcmlvbjIgPSBuZXcgUXVhdGVybmlvbl9kZWZhdWx0KCk7CiAgICAgIHJvdE1hdHJpeDIgPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5LmFkZEF0dHJpYnV0ZSA9IGZ1bmN0aW9uKGF0dHJpYnV0ZSwgdmFsdWUsIGZyb250LCBiYWNrKSB7CiAgICAgICAgY29uc3QgeCA9IHZhbHVlLng7CiAgICAgICAgY29uc3QgeSA9IHZhbHVlLnk7CiAgICAgICAgY29uc3QgeiA9IHZhbHVlLno7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChmcm9udCkpIHsKICAgICAgICAgIGF0dHJpYnV0ZVtmcm9udF0gPSB4OwogICAgICAgICAgYXR0cmlidXRlW2Zyb250ICsgMV0gPSB5OwogICAgICAgICAgYXR0cmlidXRlW2Zyb250ICsgMl0gPSB6OwogICAgICAgIH0KICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGJhY2spKSB7CiAgICAgICAgICBhdHRyaWJ1dGVbYmFja10gPSB6OwogICAgICAgICAgYXR0cmlidXRlW2JhY2sgLSAxXSA9IHk7CiAgICAgICAgICBhdHRyaWJ1dGVbYmFjayAtIDJdID0geDsKICAgICAgICB9CiAgICAgIH07CiAgICAgIHNjcmF0Y2hGb3J3YXJkUHJvamVjdGlvbjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hCYWNrd2FyZFByb2plY3Rpb24yID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBDb3JyaWRvckdlb21ldHJ5TGlicmFyeS5jb21wdXRlUG9zaXRpb25zID0gZnVuY3Rpb24ocGFyYW1zKSB7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBwYXJhbXMuZ3JhbnVsYXJpdHk7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gcGFyYW1zLnBvc2l0aW9uczsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBwYXJhbXMuZWxsaXBzb2lkOwogICAgICAgIGNvbnN0IHdpZHRoID0gcGFyYW1zLndpZHRoIC8gMjsKICAgICAgICBjb25zdCBjb3JuZXJUeXBlID0gcGFyYW1zLmNvcm5lclR5cGU7CiAgICAgICAgY29uc3Qgc2F2ZUF0dHJpYnV0ZXMgPSBwYXJhbXMuc2F2ZUF0dHJpYnV0ZXM7CiAgICAgICAgbGV0IG5vcm1hbDIgPSBjYXJ0ZXNpYW4xOwogICAgICAgIGxldCBmb3J3YXJkID0gY2FydGVzaWFuMjsKICAgICAgICBsZXQgYmFja3dhcmQgPSBjYXJ0ZXNpYW4zOwogICAgICAgIGxldCBsZWZ0ID0gY2FydGVzaWFuNDsKICAgICAgICBsZXQgY29ybmVyRGlyZWN0aW9uID0gY2FydGVzaWFuNTsKICAgICAgICBsZXQgc3RhcnRQb2ludCA9IGNhcnRlc2lhbjY7CiAgICAgICAgbGV0IHByZXZpb3VzUG9zID0gY2FydGVzaWFuNzsKICAgICAgICBsZXQgcmlnaHRQb3MgPSBjYXJ0ZXNpYW44OwogICAgICAgIGxldCBsZWZ0UG9zID0gY2FydGVzaWFuOTsKICAgICAgICBsZXQgY2VudGVyID0gY2FydGVzaWFuMTA7CiAgICAgICAgbGV0IGNhbGN1bGF0ZWRQb3NpdGlvbnMgPSBbXTsKICAgICAgICBjb25zdCBjYWxjdWxhdGVkTGVmdHMgPSBzYXZlQXR0cmlidXRlcyA/IFtdIDogdm9pZCAwOwogICAgICAgIGNvbnN0IGNhbGN1bGF0ZWROb3JtYWxzID0gc2F2ZUF0dHJpYnV0ZXMgPyBbXSA6IHZvaWQgMDsKICAgICAgICBsZXQgcG9zaXRpb24gPSBwb3NpdGlvbnNbMF07CiAgICAgICAgbGV0IG5leHRQb3NpdGlvbiA9IHBvc2l0aW9uc1sxXTsKICAgICAgICBmb3J3YXJkID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChuZXh0UG9zaXRpb24sIHBvc2l0aW9uLCBmb3J3YXJkKSwKICAgICAgICAgIGZvcndhcmQKICAgICAgICApOwogICAgICAgIG5vcm1hbDIgPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKHBvc2l0aW9uLCBub3JtYWwyKTsKICAgICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3Mobm9ybWFsMiwgZm9yd2FyZCwgbGVmdCksIGxlZnQpOwogICAgICAgIGlmIChzYXZlQXR0cmlidXRlcykgewogICAgICAgICAgY2FsY3VsYXRlZExlZnRzLnB1c2gobGVmdC54LCBsZWZ0LnksIGxlZnQueik7CiAgICAgICAgICBjYWxjdWxhdGVkTm9ybWFscy5wdXNoKG5vcm1hbDIueCwgbm9ybWFsMi55LCBub3JtYWwyLnopOwogICAgICAgIH0KICAgICAgICBwcmV2aW91c1BvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShwb3NpdGlvbiwgcHJldmlvdXNQb3MpOwogICAgICAgIHBvc2l0aW9uID0gbmV4dFBvc2l0aW9uOwogICAgICAgIGJhY2t3YXJkID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShmb3J3YXJkLCBiYWNrd2FyZCk7CiAgICAgICAgbGV0IHN1YmRpdmlkZWRQb3NpdGlvbnM7CiAgICAgICAgY29uc3QgY29ybmVycyA9IFtdOwogICAgICAgIGxldCBpOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgZm9yIChpID0gMTsgaSA8IGxlbmd0aCAtIDE7IGkrKykgewogICAgICAgICAgbm9ybWFsMiA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwocG9zaXRpb24sIG5vcm1hbDIpOwogICAgICAgICAgbmV4dFBvc2l0aW9uID0gcG9zaXRpb25zW2kgKyAxXTsKICAgICAgICAgIGZvcndhcmQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QobmV4dFBvc2l0aW9uLCBwb3NpdGlvbiwgZm9yd2FyZCksCiAgICAgICAgICAgIGZvcndhcmQKICAgICAgICAgICk7CiAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGZvcndhcmQsIGJhY2t3YXJkLCBjb3JuZXJEaXJlY3Rpb24pLAogICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24KICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBmb3J3YXJkUHJvamVjdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgICBub3JtYWwyLAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGZvcndhcmQsIG5vcm1hbDIpLAogICAgICAgICAgICBzY3JhdGNoRm9yd2FyZFByb2plY3Rpb24yCiAgICAgICAgICApOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGZvcndhcmQsIGZvcndhcmRQcm9qZWN0aW9uLCBmb3J3YXJkUHJvamVjdGlvbik7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGZvcndhcmRQcm9qZWN0aW9uLCBmb3J3YXJkUHJvamVjdGlvbik7CiAgICAgICAgICBjb25zdCBiYWNrd2FyZFByb2plY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgICAgbm9ybWFsMiwKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmRvdChiYWNrd2FyZCwgbm9ybWFsMiksCiAgICAgICAgICAgIHNjcmF0Y2hCYWNrd2FyZFByb2plY3Rpb24yCiAgICAgICAgICApOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGJhY2t3YXJkLCBiYWNrd2FyZFByb2plY3Rpb24sIGJhY2t3YXJkUHJvamVjdGlvbik7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGJhY2t3YXJkUHJvamVjdGlvbiwgYmFja3dhcmRQcm9qZWN0aW9uKTsKICAgICAgICAgIGNvbnN0IGRvQ29ybmVyID0gIU1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgICBNYXRoLmFicyhDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGZvcndhcmRQcm9qZWN0aW9uLCBiYWNrd2FyZFByb2plY3Rpb24pKSwKICAgICAgICAgICAgMSwKICAgICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT043CiAgICAgICAgICApOwogICAgICAgICAgaWYgKGRvQ29ybmVyKSB7CiAgICAgICAgICAgIGNvcm5lckRpcmVjdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcygKICAgICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24sCiAgICAgICAgICAgICAgbm9ybWFsMiwKICAgICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24KICAgICAgICAgICAgKTsKICAgICAgICAgICAgY29ybmVyRGlyZWN0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKAogICAgICAgICAgICAgIG5vcm1hbDIsCiAgICAgICAgICAgICAgY29ybmVyRGlyZWN0aW9uLAogICAgICAgICAgICAgIGNvcm5lckRpcmVjdGlvbgogICAgICAgICAgICApOwogICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGNvcm5lckRpcmVjdGlvbiwgY29ybmVyRGlyZWN0aW9uKTsKICAgICAgICAgICAgY29uc3Qgc2NhbGFyID0gd2lkdGggLyBNYXRoLm1heCgKICAgICAgICAgICAgICAwLjI1LAogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUoCiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoY29ybmVyRGlyZWN0aW9uLCBiYWNrd2FyZCwgc2NyYXRjaDEyKQogICAgICAgICAgICAgICkKICAgICAgICAgICAgKTsKICAgICAgICAgICAgY29uc3QgbGVmdElzT3V0c2lkZSA9IFBvbHlsaW5lVm9sdW1lR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuYW5nbGVJc0dyZWF0ZXJUaGFuUGkoCiAgICAgICAgICAgICAgZm9yd2FyZCwKICAgICAgICAgICAgICBiYWNrd2FyZCwKICAgICAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgICAgICBlbGxpcHNvaWQKICAgICAgICAgICAgKTsKICAgICAgICAgICAgY29ybmVyRGlyZWN0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgICAgICAgY29ybmVyRGlyZWN0aW9uLAogICAgICAgICAgICAgIHNjYWxhciwKICAgICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24KICAgICAgICAgICAgKTsKICAgICAgICAgICAgaWYgKGxlZnRJc091dHNpZGUpIHsKICAgICAgICAgICAgICByaWdodFBvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocG9zaXRpb24sIGNvcm5lckRpcmVjdGlvbiwgcmlnaHRQb3MpOwogICAgICAgICAgICAgIGNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICAgICAgICByaWdodFBvcywKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGxlZnQsIHdpZHRoLCBjZW50ZXIpLAogICAgICAgICAgICAgICAgY2VudGVyCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBsZWZ0UG9zID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZCgKICAgICAgICAgICAgICAgIHJpZ2h0UG9zLAogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobGVmdCwgd2lkdGggKiAyLCBsZWZ0UG9zKSwKICAgICAgICAgICAgICAgIGxlZnRQb3MKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIHNjYWxlQXJyYXkyWzBdID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHByZXZpb3VzUG9zLCBzY2FsZUFycmF5MlswXSk7CiAgICAgICAgICAgICAgc2NhbGVBcnJheTJbMV0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY2VudGVyLCBzY2FsZUFycmF5MlsxXSk7CiAgICAgICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9ucyA9IFBvbHlsaW5lUGlwZWxpbmVfZGVmYXVsdC5nZW5lcmF0ZUFyYyh7CiAgICAgICAgICAgICAgICBwb3NpdGlvbnM6IHNjYWxlQXJyYXkyLAogICAgICAgICAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgICAgICAgICBlbGxpcHNvaWQKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBjYWxjdWxhdGVkUG9zaXRpb25zID0gYWRkU2hpZnRlZFBvc2l0aW9ucygKICAgICAgICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMsCiAgICAgICAgICAgICAgICBsZWZ0LAogICAgICAgICAgICAgICAgd2lkdGgsCiAgICAgICAgICAgICAgICBjYWxjdWxhdGVkUG9zaXRpb25zCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBpZiAoc2F2ZUF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWRMZWZ0cy5wdXNoKGxlZnQueCwgbGVmdC55LCBsZWZ0LnopOwogICAgICAgICAgICAgICAgY2FsY3VsYXRlZE5vcm1hbHMucHVzaChub3JtYWwyLngsIG5vcm1hbDIueSwgbm9ybWFsMi56KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgc3RhcnRQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShsZWZ0UG9zLCBzdGFydFBvaW50KTsKICAgICAgICAgICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhub3JtYWwyLCBmb3J3YXJkLCBsZWZ0KSwKICAgICAgICAgICAgICAgIGxlZnQKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIGxlZnRQb3MgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICAgICAgICAgICAgcmlnaHRQb3MsCiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihsZWZ0LCB3aWR0aCAqIDIsIGxlZnRQb3MpLAogICAgICAgICAgICAgICAgbGVmdFBvcwogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgcHJldmlvdXNQb3MgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICAgICAgICAgICAgcmlnaHRQb3MsCiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihsZWZ0LCB3aWR0aCwgcHJldmlvdXNQb3MpLAogICAgICAgICAgICAgICAgcHJldmlvdXNQb3MKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIGlmIChjb3JuZXJUeXBlID09PSBDb3JuZXJUeXBlX2RlZmF1bHQuUk9VTkRFRCB8fCBjb3JuZXJUeXBlID09PSBDb3JuZXJUeXBlX2RlZmF1bHQuQkVWRUxFRCkgewogICAgICAgICAgICAgICAgY29ybmVycy5wdXNoKHsKICAgICAgICAgICAgICAgICAgbGVmdFBvc2l0aW9uczogY29tcHV0ZVJvdW5kQ29ybmVyMigKICAgICAgICAgICAgICAgICAgICByaWdodFBvcywKICAgICAgICAgICAgICAgICAgICBzdGFydFBvaW50LAogICAgICAgICAgICAgICAgICAgIGxlZnRQb3MsCiAgICAgICAgICAgICAgICAgICAgY29ybmVyVHlwZSwKICAgICAgICAgICAgICAgICAgICBsZWZ0SXNPdXRzaWRlCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb3JuZXJzLnB1c2goewogICAgICAgICAgICAgICAgICBsZWZ0UG9zaXRpb25zOiBjb21wdXRlTWl0ZXJlZENvcm5lcigKICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGNvcm5lckRpcmVjdGlvbiwgY29ybmVyRGlyZWN0aW9uKSwKICAgICAgICAgICAgICAgICAgICBsZWZ0UG9zLAogICAgICAgICAgICAgICAgICAgIGxlZnRJc091dHNpZGUKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGxlZnRQb3MgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHBvc2l0aW9uLCBjb3JuZXJEaXJlY3Rpb24sIGxlZnRQb3MpOwogICAgICAgICAgICAgIGNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICAgICAgICBsZWZ0UG9zLAogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZSgKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobGVmdCwgd2lkdGgsIGNlbnRlciksCiAgICAgICAgICAgICAgICAgIGNlbnRlcgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIGNlbnRlcgogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgcmlnaHRQb3MgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICAgICAgICAgICAgbGVmdFBvcywKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUoCiAgICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGxlZnQsIHdpZHRoICogMiwgcmlnaHRQb3MpLAogICAgICAgICAgICAgICAgICByaWdodFBvcwogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIHJpZ2h0UG9zCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBzY2FsZUFycmF5MlswXSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShwcmV2aW91c1Bvcywgc2NhbGVBcnJheTJbMF0pOwogICAgICAgICAgICAgIHNjYWxlQXJyYXkyWzFdID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGNlbnRlciwgc2NhbGVBcnJheTJbMV0pOwogICAgICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMgPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQuZ2VuZXJhdGVBcmMoewogICAgICAgICAgICAgICAgcG9zaXRpb25zOiBzY2FsZUFycmF5MiwKICAgICAgICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgICAgICAgZWxsaXBzb2lkCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgY2FsY3VsYXRlZFBvc2l0aW9ucyA9IGFkZFNoaWZ0ZWRQb3NpdGlvbnMoCiAgICAgICAgICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zLAogICAgICAgICAgICAgICAgbGVmdCwKICAgICAgICAgICAgICAgIHdpZHRoLAogICAgICAgICAgICAgICAgY2FsY3VsYXRlZFBvc2l0aW9ucwogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgaWYgKHNhdmVBdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgICAgICBjYWxjdWxhdGVkTGVmdHMucHVzaChsZWZ0LngsIGxlZnQueSwgbGVmdC56KTsKICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWROb3JtYWxzLnB1c2gobm9ybWFsMi54LCBub3JtYWwyLnksIG5vcm1hbDIueik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHN0YXJ0UG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocmlnaHRQb3MsIHN0YXJ0UG9pbnQpOwogICAgICAgICAgICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKG5vcm1hbDIsIGZvcndhcmQsIGxlZnQpLAogICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgcmlnaHRQb3MgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICAgICAgICAgICAgbGVmdFBvcywKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUoCiAgICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGxlZnQsIHdpZHRoICogMiwgcmlnaHRQb3MpLAogICAgICAgICAgICAgICAgICByaWdodFBvcwogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIHJpZ2h0UG9zCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBwcmV2aW91c1BvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICAgICAgICBsZWZ0UG9zLAogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZSgKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobGVmdCwgd2lkdGgsIHByZXZpb3VzUG9zKSwKICAgICAgICAgICAgICAgICAgcHJldmlvdXNQb3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBwcmV2aW91c1BvcwogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgaWYgKGNvcm5lclR5cGUgPT09IENvcm5lclR5cGVfZGVmYXVsdC5ST1VOREVEIHx8IGNvcm5lclR5cGUgPT09IENvcm5lclR5cGVfZGVmYXVsdC5CRVZFTEVEKSB7CiAgICAgICAgICAgICAgICBjb3JuZXJzLnB1c2goewogICAgICAgICAgICAgICAgICByaWdodFBvc2l0aW9uczogY29tcHV0ZVJvdW5kQ29ybmVyMigKICAgICAgICAgICAgICAgICAgICBsZWZ0UG9zLAogICAgICAgICAgICAgICAgICAgIHN0YXJ0UG9pbnQsCiAgICAgICAgICAgICAgICAgICAgcmlnaHRQb3MsCiAgICAgICAgICAgICAgICAgICAgY29ybmVyVHlwZSwKICAgICAgICAgICAgICAgICAgICBsZWZ0SXNPdXRzaWRlCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb3JuZXJzLnB1c2goewogICAgICAgICAgICAgICAgICByaWdodFBvc2l0aW9uczogY29tcHV0ZU1pdGVyZWRDb3JuZXIoCiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICAgICAgICAgICAgY29ybmVyRGlyZWN0aW9uLAogICAgICAgICAgICAgICAgICAgIHJpZ2h0UG9zLAogICAgICAgICAgICAgICAgICAgIGxlZnRJc091dHNpZGUKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGJhY2t3YXJkID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShmb3J3YXJkLCBiYWNrd2FyZCk7CiAgICAgICAgICB9CiAgICAgICAgICBwb3NpdGlvbiA9IG5leHRQb3NpdGlvbjsKICAgICAgICB9CiAgICAgICAgbm9ybWFsMiA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwocG9zaXRpb24sIG5vcm1hbDIpOwogICAgICAgIHNjYWxlQXJyYXkyWzBdID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHByZXZpb3VzUG9zLCBzY2FsZUFycmF5MlswXSk7CiAgICAgICAgc2NhbGVBcnJheTJbMV0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocG9zaXRpb24sIHNjYWxlQXJyYXkyWzFdKTsKICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zID0gUG9seWxpbmVQaXBlbGluZV9kZWZhdWx0LmdlbmVyYXRlQXJjKHsKICAgICAgICAgIHBvc2l0aW9uczogc2NhbGVBcnJheTIsCiAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgIGVsbGlwc29pZAogICAgICAgIH0pOwogICAgICAgIGNhbGN1bGF0ZWRQb3NpdGlvbnMgPSBhZGRTaGlmdGVkUG9zaXRpb25zKAogICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9ucywKICAgICAgICAgIGxlZnQsCiAgICAgICAgICB3aWR0aCwKICAgICAgICAgIGNhbGN1bGF0ZWRQb3NpdGlvbnMKICAgICAgICApOwogICAgICAgIGlmIChzYXZlQXR0cmlidXRlcykgewogICAgICAgICAgY2FsY3VsYXRlZExlZnRzLnB1c2gobGVmdC54LCBsZWZ0LnksIGxlZnQueik7CiAgICAgICAgICBjYWxjdWxhdGVkTm9ybWFscy5wdXNoKG5vcm1hbDIueCwgbm9ybWFsMi55LCBub3JtYWwyLnopOwogICAgICAgIH0KICAgICAgICBsZXQgZW5kUG9zaXRpb25zOwogICAgICAgIGlmIChjb3JuZXJUeXBlID09PSBDb3JuZXJUeXBlX2RlZmF1bHQuUk9VTkRFRCkgewogICAgICAgICAgZW5kUG9zaXRpb25zID0gYWRkRW5kQ2FwcyhjYWxjdWxhdGVkUG9zaXRpb25zKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHBvc2l0aW9uczogY2FsY3VsYXRlZFBvc2l0aW9ucywKICAgICAgICAgIGNvcm5lcnMsCiAgICAgICAgICBsZWZ0czogY2FsY3VsYXRlZExlZnRzLAogICAgICAgICAgbm9ybWFsczogY2FsY3VsYXRlZE5vcm1hbHMsCiAgICAgICAgICBlbmRQb3NpdGlvbnMKICAgICAgICB9OwogICAgICB9OwogICAgICBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0ID0gQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Db3JyaWRvckdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gc2NhbGVUb1N1cmZhY2UyKHBvc2l0aW9ucywgZWxsaXBzb2lkKSB7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGg7IGkrKykgewogICAgICBwb3NpdGlvbnNbaV0gPSBlbGxpcHNvaWQuc2NhbGVUb0dlb2RldGljU3VyZmFjZShwb3NpdGlvbnNbaV0sIHBvc2l0aW9uc1tpXSk7CiAgICB9CiAgICByZXR1cm4gcG9zaXRpb25zOwogIH0KICBmdW5jdGlvbiBhZGROb3JtYWxzKGF0dHIsIG5vcm1hbDIsIGxlZnQsIGZyb250LCBiYWNrLCB2ZXJ0ZXhGb3JtYXQpIHsKICAgIGNvbnN0IG5vcm1hbHMgPSBhdHRyLm5vcm1hbHM7CiAgICBjb25zdCB0YW5nZW50cyA9IGF0dHIudGFuZ2VudHM7CiAgICBjb25zdCBiaXRhbmdlbnRzID0gYXR0ci5iaXRhbmdlbnRzOwogICAgY29uc3QgZm9yd2FyZCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhsZWZ0LCBub3JtYWwyLCBzY3JhdGNoMTMpLAogICAgICBzY3JhdGNoMTMKICAgICk7CiAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmFkZEF0dHJpYnV0ZShub3JtYWxzLCBub3JtYWwyLCBmcm9udCwgYmFjayk7CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUodGFuZ2VudHMsIGZvcndhcmQsIGZyb250LCBiYWNrKTsKICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuYWRkQXR0cmlidXRlKGJpdGFuZ2VudHMsIGxlZnQsIGZyb250LCBiYWNrKTsKICAgIH0KICB9CiAgZnVuY3Rpb24gY29tYmluZTIoY29tcHV0ZWRQb3NpdGlvbnMsIHZlcnRleEZvcm1hdCwgZWxsaXBzb2lkKSB7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBjb21wdXRlZFBvc2l0aW9ucy5wb3NpdGlvbnM7CiAgICBjb25zdCBjb3JuZXJzID0gY29tcHV0ZWRQb3NpdGlvbnMuY29ybmVyczsKICAgIGNvbnN0IGVuZFBvc2l0aW9ucyA9IGNvbXB1dGVkUG9zaXRpb25zLmVuZFBvc2l0aW9uczsKICAgIGNvbnN0IGNvbXB1dGVkTGVmdHMgPSBjb21wdXRlZFBvc2l0aW9ucy5sZWZ0czsKICAgIGNvbnN0IGNvbXB1dGVkTm9ybWFscyA9IGNvbXB1dGVkUG9zaXRpb25zLm5vcm1hbHM7CiAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KCk7CiAgICBsZXQgY29ybmVyOwogICAgbGV0IGxlZnRDb3VudCA9IDA7CiAgICBsZXQgcmlnaHRDb3VudCA9IDA7CiAgICBsZXQgaTsKICAgIGxldCBpbmRpY2VzTGVuZ3RoID0gMDsKICAgIGxldCBsZW5ndGg7CiAgICBmb3IgKGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgaSArPSAyKSB7CiAgICAgIGxlbmd0aCA9IHBvc2l0aW9uc1tpXS5sZW5ndGggLSAzOwogICAgICBsZWZ0Q291bnQgKz0gbGVuZ3RoOwogICAgICBpbmRpY2VzTGVuZ3RoICs9IGxlbmd0aCAqIDI7CiAgICAgIHJpZ2h0Q291bnQgKz0gcG9zaXRpb25zW2kgKyAxXS5sZW5ndGggLSAzOwogICAgfQogICAgbGVmdENvdW50ICs9IDM7CiAgICByaWdodENvdW50ICs9IDM7CiAgICBmb3IgKGkgPSAwOyBpIDwgY29ybmVycy5sZW5ndGg7IGkrKykgewogICAgICBjb3JuZXIgPSBjb3JuZXJzW2ldOwogICAgICBjb25zdCBsZWZ0U2lkZSA9IGNvcm5lcnNbaV0ubGVmdFBvc2l0aW9uczsKICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChsZWZ0U2lkZSkpIHsKICAgICAgICBsZW5ndGggPSBsZWZ0U2lkZS5sZW5ndGg7CiAgICAgICAgbGVmdENvdW50ICs9IGxlbmd0aDsKICAgICAgICBpbmRpY2VzTGVuZ3RoICs9IGxlbmd0aDsKICAgICAgfSBlbHNlIHsKICAgICAgICBsZW5ndGggPSBjb3JuZXJzW2ldLnJpZ2h0UG9zaXRpb25zLmxlbmd0aDsKICAgICAgICByaWdodENvdW50ICs9IGxlbmd0aDsKICAgICAgICBpbmRpY2VzTGVuZ3RoICs9IGxlbmd0aDsKICAgICAgfQogICAgfQogICAgY29uc3QgYWRkRW5kUG9zaXRpb25zID0gZGVmaW5lZF9kZWZhdWx0KGVuZFBvc2l0aW9ucyk7CiAgICBsZXQgZW5kUG9zaXRpb25MZW5ndGg7CiAgICBpZiAoYWRkRW5kUG9zaXRpb25zKSB7CiAgICAgIGVuZFBvc2l0aW9uTGVuZ3RoID0gZW5kUG9zaXRpb25zWzBdLmxlbmd0aCAtIDM7CiAgICAgIGxlZnRDb3VudCArPSBlbmRQb3NpdGlvbkxlbmd0aDsKICAgICAgcmlnaHRDb3VudCArPSBlbmRQb3NpdGlvbkxlbmd0aDsKICAgICAgZW5kUG9zaXRpb25MZW5ndGggLz0gMzsKICAgICAgaW5kaWNlc0xlbmd0aCArPSBlbmRQb3NpdGlvbkxlbmd0aCAqIDY7CiAgICB9CiAgICBjb25zdCBzaXplID0gbGVmdENvdW50ICsgcmlnaHRDb3VudDsKICAgIGNvbnN0IGZpbmFsUG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShzaXplKTsKICAgIGNvbnN0IG5vcm1hbHMgPSB2ZXJ0ZXhGb3JtYXQubm9ybWFsID8gbmV3IEZsb2F0MzJBcnJheShzaXplKSA6IHZvaWQgMDsKICAgIGNvbnN0IHRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LnRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUpIDogdm9pZCAwOwogICAgY29uc3QgYml0YW5nZW50cyA9IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUpIDogdm9pZCAwOwogICAgY29uc3QgYXR0ciA9IHsKICAgICAgbm9ybWFscywKICAgICAgdGFuZ2VudHMsCiAgICAgIGJpdGFuZ2VudHMKICAgIH07CiAgICBsZXQgZnJvbnQgPSAwOwogICAgbGV0IGJhY2sgPSBzaXplIC0gMTsKICAgIGxldCBVTCwgTEwsIFVSLCBMUjsKICAgIGxldCBub3JtYWwyID0gY2FydGVzaWFuMTI7CiAgICBsZXQgbGVmdCA9IGNhcnRlc2lhbjIyOwogICAgbGV0IHJpZ2h0UG9zLCBsZWZ0UG9zOwogICAgY29uc3QgaGFsZkxlbmd0aCA9IGVuZFBvc2l0aW9uTGVuZ3RoIC8gMjsKICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShzaXplIC8gMywgaW5kaWNlc0xlbmd0aCk7CiAgICBsZXQgaW5kZXggPSAwOwogICAgaWYgKGFkZEVuZFBvc2l0aW9ucykgewogICAgICBsZWZ0UG9zID0gY2FydGVzaWFuMzI7CiAgICAgIHJpZ2h0UG9zID0gY2FydGVzaWFuNDI7CiAgICAgIGNvbnN0IGZpcnN0RW5kUG9zaXRpb25zID0gZW5kUG9zaXRpb25zWzBdOwogICAgICBub3JtYWwyID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShjb21wdXRlZE5vcm1hbHMsIDAsIG5vcm1hbDIpOwogICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShjb21wdXRlZExlZnRzLCAwLCBsZWZ0KTsKICAgICAgZm9yIChpID0gMDsgaSA8IGhhbGZMZW5ndGg7IGkrKykgewogICAgICAgIGxlZnRQb3MgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgZmlyc3RFbmRQb3NpdGlvbnMsCiAgICAgICAgICAoaGFsZkxlbmd0aCAtIDEgLSBpKSAqIDMsCiAgICAgICAgICBsZWZ0UG9zCiAgICAgICAgKTsKICAgICAgICByaWdodFBvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICBmaXJzdEVuZFBvc2l0aW9ucywKICAgICAgICAgIChoYWxmTGVuZ3RoICsgaSkgKiAzLAogICAgICAgICAgcmlnaHRQb3MKICAgICAgICApOwogICAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuYWRkQXR0cmlidXRlKGZpbmFsUG9zaXRpb25zLCByaWdodFBvcywgZnJvbnQpOwogICAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuYWRkQXR0cmlidXRlKAogICAgICAgICAgZmluYWxQb3NpdGlvbnMsCiAgICAgICAgICBsZWZ0UG9zLAogICAgICAgICAgdm9pZCAwLAogICAgICAgICAgYmFjawogICAgICAgICk7CiAgICAgICAgYWRkTm9ybWFscyhhdHRyLCBub3JtYWwyLCBsZWZ0LCBmcm9udCwgYmFjaywgdmVydGV4Rm9ybWF0KTsKICAgICAgICBMTCA9IGZyb250IC8gMzsKICAgICAgICBMUiA9IExMICsgMTsKICAgICAgICBVTCA9IChiYWNrIC0gMikgLyAzOwogICAgICAgIFVSID0gVUwgLSAxOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBVTDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gTEw7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IFVSOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBVUjsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gTEw7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IExSOwogICAgICAgIGZyb250ICs9IDM7CiAgICAgICAgYmFjayAtPSAzOwogICAgICB9CiAgICB9CiAgICBsZXQgcG9zSW5kZXggPSAwOwogICAgbGV0IGNvbXBJbmRleCA9IDA7CiAgICBsZXQgcmlnaHRFZGdlID0gcG9zaXRpb25zW3Bvc0luZGV4KytdOwogICAgbGV0IGxlZnRFZGdlID0gcG9zaXRpb25zW3Bvc0luZGV4KytdOwogICAgZmluYWxQb3NpdGlvbnMuc2V0KHJpZ2h0RWRnZSwgZnJvbnQpOwogICAgZmluYWxQb3NpdGlvbnMuc2V0KGxlZnRFZGdlLCBiYWNrIC0gbGVmdEVkZ2UubGVuZ3RoICsgMSk7CiAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShjb21wdXRlZExlZnRzLCBjb21wSW5kZXgsIGxlZnQpOwogICAgbGV0IHJpZ2h0Tm9ybWFsOwogICAgbGV0IGxlZnROb3JtYWw7CiAgICBsZW5ndGggPSBsZWZ0RWRnZS5sZW5ndGggLSAzOwogICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAzKSB7CiAgICAgIHJpZ2h0Tm9ybWFsID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbCgKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHJpZ2h0RWRnZSwgaSwgc2NyYXRjaDEzKSwKICAgICAgICBzY3JhdGNoMTMKICAgICAgKTsKICAgICAgbGVmdE5vcm1hbCA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwoCiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShsZWZ0RWRnZSwgbGVuZ3RoIC0gaSwgc2NyYXRjaDIzKSwKICAgICAgICBzY3JhdGNoMjMKICAgICAgKTsKICAgICAgbm9ybWFsMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChyaWdodE5vcm1hbCwgbGVmdE5vcm1hbCwgbm9ybWFsMiksCiAgICAgICAgbm9ybWFsMgogICAgICApOwogICAgICBhZGROb3JtYWxzKGF0dHIsIG5vcm1hbDIsIGxlZnQsIGZyb250LCBiYWNrLCB2ZXJ0ZXhGb3JtYXQpOwogICAgICBMTCA9IGZyb250IC8gMzsKICAgICAgTFIgPSBMTCArIDE7CiAgICAgIFVMID0gKGJhY2sgLSAyKSAvIDM7CiAgICAgIFVSID0gVUwgLSAxOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gVUw7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMTDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IFVSOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gVVI7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMTDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IExSOwogICAgICBmcm9udCArPSAzOwogICAgICBiYWNrIC09IDM7CiAgICB9CiAgICByaWdodE5vcm1hbCA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwoCiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocmlnaHRFZGdlLCBsZW5ndGgsIHNjcmF0Y2gxMyksCiAgICAgIHNjcmF0Y2gxMwogICAgKTsKICAgIGxlZnROb3JtYWwgPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGxlZnRFZGdlLCBsZW5ndGgsIHNjcmF0Y2gyMyksCiAgICAgIHNjcmF0Y2gyMwogICAgKTsKICAgIG5vcm1hbDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHJpZ2h0Tm9ybWFsLCBsZWZ0Tm9ybWFsLCBub3JtYWwyKSwKICAgICAgbm9ybWFsMgogICAgKTsKICAgIGNvbXBJbmRleCArPSAzOwogICAgZm9yIChpID0gMDsgaSA8IGNvcm5lcnMubGVuZ3RoOyBpKyspIHsKICAgICAgbGV0IGo7CiAgICAgIGNvcm5lciA9IGNvcm5lcnNbaV07CiAgICAgIGNvbnN0IGwgPSBjb3JuZXIubGVmdFBvc2l0aW9uczsKICAgICAgY29uc3QgciA9IGNvcm5lci5yaWdodFBvc2l0aW9uczsKICAgICAgbGV0IHBpdm90OwogICAgICBsZXQgc3RhcnQ7CiAgICAgIGxldCBvdXRzaWRlUG9pbnQgPSBjYXJ0ZXNpYW42MjsKICAgICAgbGV0IHByZXZpb3VzUG9pbnQgPSBjYXJ0ZXNpYW4zMjsKICAgICAgbGV0IG5leHRQb2ludCA9IGNhcnRlc2lhbjQyOwogICAgICBub3JtYWwyID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShjb21wdXRlZE5vcm1hbHMsIGNvbXBJbmRleCwgbm9ybWFsMik7CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobCkpIHsKICAgICAgICBhZGROb3JtYWxzKGF0dHIsIG5vcm1hbDIsIGxlZnQsIHZvaWQgMCwgYmFjaywgdmVydGV4Rm9ybWF0KTsKICAgICAgICBiYWNrIC09IDM7CiAgICAgICAgcGl2b3QgPSBMUjsKICAgICAgICBzdGFydCA9IFVSOwogICAgICAgIGZvciAoaiA9IDA7IGogPCBsLmxlbmd0aCAvIDM7IGorKykgewogICAgICAgICAgb3V0c2lkZVBvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShsLCBqICogMywgb3V0c2lkZVBvaW50KTsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBwaXZvdDsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBzdGFydCAtIGogLSAxOwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHN0YXJ0IC0gajsKICAgICAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuYWRkQXR0cmlidXRlKAogICAgICAgICAgICBmaW5hbFBvc2l0aW9ucywKICAgICAgICAgICAgb3V0c2lkZVBvaW50LAogICAgICAgICAgICB2b2lkIDAsCiAgICAgICAgICAgIGJhY2sKICAgICAgICAgICk7CiAgICAgICAgICBwcmV2aW91c1BvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgZmluYWxQb3NpdGlvbnMsCiAgICAgICAgICAgIChzdGFydCAtIGogLSAxKSAqIDMsCiAgICAgICAgICAgIHByZXZpb3VzUG9pbnQKICAgICAgICAgICk7CiAgICAgICAgICBuZXh0UG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGZpbmFsUG9zaXRpb25zLCBwaXZvdCAqIDMsIG5leHRQb2ludCk7CiAgICAgICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHByZXZpb3VzUG9pbnQsIG5leHRQb2ludCwgbGVmdCksCiAgICAgICAgICAgIGxlZnQKICAgICAgICAgICk7CiAgICAgICAgICBhZGROb3JtYWxzKGF0dHIsIG5vcm1hbDIsIGxlZnQsIHZvaWQgMCwgYmFjaywgdmVydGV4Rm9ybWF0KTsKICAgICAgICAgIGJhY2sgLT0gMzsKICAgICAgICB9CiAgICAgICAgb3V0c2lkZVBvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgcGl2b3QgKiAzLAogICAgICAgICAgb3V0c2lkZVBvaW50CiAgICAgICAgKTsKICAgICAgICBwcmV2aW91c1BvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShmaW5hbFBvc2l0aW9ucywgc3RhcnQgKiAzLCBwcmV2aW91c1BvaW50KSwKICAgICAgICAgIG91dHNpZGVQb2ludCwKICAgICAgICAgIHByZXZpb3VzUG9pbnQKICAgICAgICApOwogICAgICAgIG5leHRQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoZmluYWxQb3NpdGlvbnMsIChzdGFydCAtIGopICogMywgbmV4dFBvaW50KSwKICAgICAgICAgIG91dHNpZGVQb2ludCwKICAgICAgICAgIG5leHRQb2ludAogICAgICAgICk7CiAgICAgICAgbGVmdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHByZXZpb3VzUG9pbnQsIG5leHRQb2ludCwgbGVmdCksCiAgICAgICAgICBsZWZ0CiAgICAgICAgKTsKICAgICAgICBhZGROb3JtYWxzKGF0dHIsIG5vcm1hbDIsIGxlZnQsIGZyb250LCB2b2lkIDAsIHZlcnRleEZvcm1hdCk7CiAgICAgICAgZnJvbnQgKz0gMzsKICAgICAgfSBlbHNlIHsKICAgICAgICBhZGROb3JtYWxzKGF0dHIsIG5vcm1hbDIsIGxlZnQsIGZyb250LCB2b2lkIDAsIHZlcnRleEZvcm1hdCk7CiAgICAgICAgZnJvbnQgKz0gMzsKICAgICAgICBwaXZvdCA9IFVSOwogICAgICAgIHN0YXJ0ID0gTFI7CiAgICAgICAgZm9yIChqID0gMDsgaiA8IHIubGVuZ3RoIC8gMzsgaisrKSB7CiAgICAgICAgICBvdXRzaWRlUG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHIsIGogKiAzLCBvdXRzaWRlUG9pbnQpOwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHBpdm90OwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHN0YXJ0ICsgajsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBzdGFydCArIGogKyAxOwogICAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoCiAgICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgICBvdXRzaWRlUG9pbnQsCiAgICAgICAgICAgIGZyb250CiAgICAgICAgICApOwogICAgICAgICAgcHJldmlvdXNQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgICBwaXZvdCAqIDMsCiAgICAgICAgICAgIHByZXZpb3VzUG9pbnQKICAgICAgICAgICk7CiAgICAgICAgICBuZXh0UG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICBmaW5hbFBvc2l0aW9ucywKICAgICAgICAgICAgKHN0YXJ0ICsgaikgKiAzLAogICAgICAgICAgICBuZXh0UG9pbnQKICAgICAgICAgICk7CiAgICAgICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHByZXZpb3VzUG9pbnQsIG5leHRQb2ludCwgbGVmdCksCiAgICAgICAgICAgIGxlZnQKICAgICAgICAgICk7CiAgICAgICAgICBhZGROb3JtYWxzKGF0dHIsIG5vcm1hbDIsIGxlZnQsIGZyb250LCB2b2lkIDAsIHZlcnRleEZvcm1hdCk7CiAgICAgICAgICBmcm9udCArPSAzOwogICAgICAgIH0KICAgICAgICBvdXRzaWRlUG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgZmluYWxQb3NpdGlvbnMsCiAgICAgICAgICBwaXZvdCAqIDMsCiAgICAgICAgICBvdXRzaWRlUG9pbnQKICAgICAgICApOwogICAgICAgIHByZXZpb3VzUG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGZpbmFsUG9zaXRpb25zLCAoc3RhcnQgKyBqKSAqIDMsIHByZXZpb3VzUG9pbnQpLAogICAgICAgICAgb3V0c2lkZVBvaW50LAogICAgICAgICAgcHJldmlvdXNQb2ludAogICAgICAgICk7CiAgICAgICAgbmV4dFBvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShmaW5hbFBvc2l0aW9ucywgc3RhcnQgKiAzLCBuZXh0UG9pbnQpLAogICAgICAgICAgb3V0c2lkZVBvaW50LAogICAgICAgICAgbmV4dFBvaW50CiAgICAgICAgKTsKICAgICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUoQ2FydGVzaWFuM19kZWZhdWx0LmFkZChuZXh0UG9pbnQsIHByZXZpb3VzUG9pbnQsIGxlZnQpLCBsZWZ0KSwKICAgICAgICAgIGxlZnQKICAgICAgICApOwogICAgICAgIGFkZE5vcm1hbHMoYXR0ciwgbm9ybWFsMiwgbGVmdCwgdm9pZCAwLCBiYWNrLCB2ZXJ0ZXhGb3JtYXQpOwogICAgICAgIGJhY2sgLT0gMzsKICAgICAgfQogICAgICByaWdodEVkZ2UgPSBwb3NpdGlvbnNbcG9zSW5kZXgrK107CiAgICAgIGxlZnRFZGdlID0gcG9zaXRpb25zW3Bvc0luZGV4KytdOwogICAgICByaWdodEVkZ2Uuc3BsaWNlKDAsIDMpOwogICAgICBsZWZ0RWRnZS5zcGxpY2UobGVmdEVkZ2UubGVuZ3RoIC0gMywgMyk7CiAgICAgIGZpbmFsUG9zaXRpb25zLnNldChyaWdodEVkZ2UsIGZyb250KTsKICAgICAgZmluYWxQb3NpdGlvbnMuc2V0KGxlZnRFZGdlLCBiYWNrIC0gbGVmdEVkZ2UubGVuZ3RoICsgMSk7CiAgICAgIGxlbmd0aCA9IGxlZnRFZGdlLmxlbmd0aCAtIDM7CiAgICAgIGNvbXBJbmRleCArPSAzOwogICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShjb21wdXRlZExlZnRzLCBjb21wSW5kZXgsIGxlZnQpOwogICAgICBmb3IgKGogPSAwOyBqIDwgbGVmdEVkZ2UubGVuZ3RoOyBqICs9IDMpIHsKICAgICAgICByaWdodE5vcm1hbCA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHJpZ2h0RWRnZSwgaiwgc2NyYXRjaDEzKSwKICAgICAgICAgIHNjcmF0Y2gxMwogICAgICAgICk7CiAgICAgICAgbGVmdE5vcm1hbCA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGxlZnRFZGdlLCBsZW5ndGggLSBqLCBzY3JhdGNoMjMpLAogICAgICAgICAgc2NyYXRjaDIzCiAgICAgICAgKTsKICAgICAgICBub3JtYWwyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocmlnaHROb3JtYWwsIGxlZnROb3JtYWwsIG5vcm1hbDIpLAogICAgICAgICAgbm9ybWFsMgogICAgICAgICk7CiAgICAgICAgYWRkTm9ybWFscyhhdHRyLCBub3JtYWwyLCBsZWZ0LCBmcm9udCwgYmFjaywgdmVydGV4Rm9ybWF0KTsKICAgICAgICBMUiA9IGZyb250IC8gMzsKICAgICAgICBMTCA9IExSIC0gMTsKICAgICAgICBVUiA9IChiYWNrIC0gMikgLyAzOwogICAgICAgIFVMID0gVVIgKyAxOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBVTDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gTEw7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IFVSOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBVUjsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gTEw7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IExSOwogICAgICAgIGZyb250ICs9IDM7CiAgICAgICAgYmFjayAtPSAzOwogICAgICB9CiAgICAgIGZyb250IC09IDM7CiAgICAgIGJhY2sgKz0gMzsKICAgIH0KICAgIG5vcm1hbDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICBjb21wdXRlZE5vcm1hbHMsCiAgICAgIGNvbXB1dGVkTm9ybWFscy5sZW5ndGggLSAzLAogICAgICBub3JtYWwyCiAgICApOwogICAgYWRkTm9ybWFscyhhdHRyLCBub3JtYWwyLCBsZWZ0LCBmcm9udCwgYmFjaywgdmVydGV4Rm9ybWF0KTsKICAgIGlmIChhZGRFbmRQb3NpdGlvbnMpIHsKICAgICAgZnJvbnQgKz0gMzsKICAgICAgYmFjayAtPSAzOwogICAgICBsZWZ0UG9zID0gY2FydGVzaWFuMzI7CiAgICAgIHJpZ2h0UG9zID0gY2FydGVzaWFuNDI7CiAgICAgIGNvbnN0IGxhc3RFbmRQb3NpdGlvbnMgPSBlbmRQb3NpdGlvbnNbMV07CiAgICAgIGZvciAoaSA9IDA7IGkgPCBoYWxmTGVuZ3RoOyBpKyspIHsKICAgICAgICBsZWZ0UG9zID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgIGxhc3RFbmRQb3NpdGlvbnMsCiAgICAgICAgICAoZW5kUG9zaXRpb25MZW5ndGggLSBpIC0gMSkgKiAzLAogICAgICAgICAgbGVmdFBvcwogICAgICAgICk7CiAgICAgICAgcmlnaHRQb3MgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGxhc3RFbmRQb3NpdGlvbnMsIGkgKiAzLCByaWdodFBvcyk7CiAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoCiAgICAgICAgICBmaW5hbFBvc2l0aW9ucywKICAgICAgICAgIGxlZnRQb3MsCiAgICAgICAgICB2b2lkIDAsCiAgICAgICAgICBiYWNrCiAgICAgICAgKTsKICAgICAgICBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmFkZEF0dHJpYnV0ZShmaW5hbFBvc2l0aW9ucywgcmlnaHRQb3MsIGZyb250KTsKICAgICAgICBhZGROb3JtYWxzKGF0dHIsIG5vcm1hbDIsIGxlZnQsIGZyb250LCBiYWNrLCB2ZXJ0ZXhGb3JtYXQpOwogICAgICAgIExSID0gZnJvbnQgLyAzOwogICAgICAgIExMID0gTFIgLSAxOwogICAgICAgIFVSID0gKGJhY2sgLSAyKSAvIDM7CiAgICAgICAgVUwgPSBVUiArIDE7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IFVMOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMTDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gVVI7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IFVSOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMTDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gTFI7CiAgICAgICAgZnJvbnQgKz0gMzsKICAgICAgICBiYWNrIC09IDM7CiAgICAgIH0KICAgIH0KICAgIGF0dHJpYnV0ZXMucG9zaXRpb24gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgdmFsdWVzOiBmaW5hbFBvc2l0aW9ucwogICAgfSk7CiAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgIGNvbnN0IHN0ID0gbmV3IEZsb2F0MzJBcnJheShzaXplIC8gMyAqIDIpOwogICAgICBsZXQgcmlnaHRTdDsKICAgICAgbGV0IGxlZnRTdDsKICAgICAgbGV0IHN0SW5kZXggPSAwOwogICAgICBpZiAoYWRkRW5kUG9zaXRpb25zKSB7CiAgICAgICAgbGVmdENvdW50IC89IDM7CiAgICAgICAgcmlnaHRDb3VudCAvPSAzOwogICAgICAgIGNvbnN0IHRoZXRhID0gTWF0aC5QSSAvIChlbmRQb3NpdGlvbkxlbmd0aCArIDEpOwogICAgICAgIGxlZnRTdCA9IDEgLyAobGVmdENvdW50IC0gZW5kUG9zaXRpb25MZW5ndGggKyAxKTsKICAgICAgICByaWdodFN0ID0gMSAvIChyaWdodENvdW50IC0gZW5kUG9zaXRpb25MZW5ndGggKyAxKTsKICAgICAgICBsZXQgYTM7CiAgICAgICAgY29uc3QgaGFsZkVuZFBvcyA9IGVuZFBvc2l0aW9uTGVuZ3RoIC8gMjsKICAgICAgICBmb3IgKGkgPSBoYWxmRW5kUG9zICsgMTsgaSA8IGVuZFBvc2l0aW9uTGVuZ3RoICsgMTsgaSsrKSB7CiAgICAgICAgICBhMyA9IE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyArIHRoZXRhICogaTsKICAgICAgICAgIHN0W3N0SW5kZXgrK10gPSByaWdodFN0ICogKDEgKyBNYXRoLmNvcyhhMykpOwogICAgICAgICAgc3Rbc3RJbmRleCsrXSA9IDAuNSAqICgxICsgTWF0aC5zaW4oYTMpKTsKICAgICAgICB9CiAgICAgICAgZm9yIChpID0gMTsgaSA8IHJpZ2h0Q291bnQgLSBlbmRQb3NpdGlvbkxlbmd0aCArIDE7IGkrKykgewogICAgICAgICAgc3Rbc3RJbmRleCsrXSA9IGkgKiByaWdodFN0OwogICAgICAgICAgc3Rbc3RJbmRleCsrXSA9IDA7CiAgICAgICAgfQogICAgICAgIGZvciAoaSA9IGVuZFBvc2l0aW9uTGVuZ3RoOyBpID4gaGFsZkVuZFBvczsgaS0tKSB7CiAgICAgICAgICBhMyA9IE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyAtIGkgKiB0aGV0YTsKICAgICAgICAgIHN0W3N0SW5kZXgrK10gPSAxIC0gcmlnaHRTdCAqICgxICsgTWF0aC5jb3MoYTMpKTsKICAgICAgICAgIHN0W3N0SW5kZXgrK10gPSAwLjUgKiAoMSArIE1hdGguc2luKGEzKSk7CiAgICAgICAgfQogICAgICAgIGZvciAoaSA9IGhhbGZFbmRQb3M7IGkgPiAwOyBpLS0pIHsKICAgICAgICAgIGEzID0gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPIC0gdGhldGEgKiBpOwogICAgICAgICAgc3Rbc3RJbmRleCsrXSA9IDEgLSBsZWZ0U3QgKiAoMSArIE1hdGguY29zKGEzKSk7CiAgICAgICAgICBzdFtzdEluZGV4KytdID0gMC41ICogKDEgKyBNYXRoLnNpbihhMykpOwogICAgICAgIH0KICAgICAgICBmb3IgKGkgPSBsZWZ0Q291bnQgLSBlbmRQb3NpdGlvbkxlbmd0aDsgaSA+IDA7IGktLSkgewogICAgICAgICAgc3Rbc3RJbmRleCsrXSA9IGkgKiBsZWZ0U3Q7CiAgICAgICAgICBzdFtzdEluZGV4KytdID0gMTsKICAgICAgICB9CiAgICAgICAgZm9yIChpID0gMTsgaSA8IGhhbGZFbmRQb3MgKyAxOyBpKyspIHsKICAgICAgICAgIGEzID0gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPICsgdGhldGEgKiBpOwogICAgICAgICAgc3Rbc3RJbmRleCsrXSA9IGxlZnRTdCAqICgxICsgTWF0aC5jb3MoYTMpKTsKICAgICAgICAgIHN0W3N0SW5kZXgrK10gPSAwLjUgKiAoMSArIE1hdGguc2luKGEzKSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGxlZnRDb3VudCAvPSAzOwogICAgICAgIHJpZ2h0Q291bnQgLz0gMzsKICAgICAgICBsZWZ0U3QgPSAxIC8gKGxlZnRDb3VudCAtIDEpOwogICAgICAgIHJpZ2h0U3QgPSAxIC8gKHJpZ2h0Q291bnQgLSAxKTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcmlnaHRDb3VudDsgaSsrKSB7CiAgICAgICAgICBzdFtzdEluZGV4KytdID0gaSAqIHJpZ2h0U3Q7CiAgICAgICAgICBzdFtzdEluZGV4KytdID0gMDsKICAgICAgICB9CiAgICAgICAgZm9yIChpID0gbGVmdENvdW50OyBpID4gMDsgaS0tKSB7CiAgICAgICAgICBzdFtzdEluZGV4KytdID0gKGkgLSAxKSAqIGxlZnRTdDsKICAgICAgICAgIHN0W3N0SW5kZXgrK10gPSAxOwogICAgICAgIH0KICAgICAgfQogICAgICBhdHRyaWJ1dGVzLnN0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDIsCiAgICAgICAgdmFsdWVzOiBzdAogICAgICB9KTsKICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgIGF0dHJpYnV0ZXMubm9ybWFsID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBhdHRyLm5vcm1hbHMKICAgICAgfSk7CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgYXR0cmlidXRlcy50YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBhdHRyLnRhbmdlbnRzCiAgICAgIH0pOwogICAgfQogICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgYXR0cmlidXRlcy5iaXRhbmdlbnQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IGF0dHIuYml0YW5nZW50cwogICAgICB9KTsKICAgIH0KICAgIHJldHVybiB7CiAgICAgIGF0dHJpYnV0ZXMsCiAgICAgIGluZGljZXMKICAgIH07CiAgfQogIGZ1bmN0aW9uIGV4dHJ1ZGVkQXR0cmlidXRlcyhhdHRyaWJ1dGVzLCB2ZXJ0ZXhGb3JtYXQpIHsKICAgIGlmICghdmVydGV4Rm9ybWF0Lm5vcm1hbCAmJiAhdmVydGV4Rm9ybWF0LnRhbmdlbnQgJiYgIXZlcnRleEZvcm1hdC5iaXRhbmdlbnQgJiYgIXZlcnRleEZvcm1hdC5zdCkgewogICAgICByZXR1cm4gYXR0cmlidXRlczsKICAgIH0KICAgIGNvbnN0IHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzOwogICAgbGV0IHRvcE5vcm1hbHM7CiAgICBsZXQgdG9wQml0YW5nZW50czsKICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsIHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgdG9wTm9ybWFscyA9IGF0dHJpYnV0ZXMubm9ybWFsLnZhbHVlczsKICAgICAgdG9wQml0YW5nZW50cyA9IGF0dHJpYnV0ZXMuYml0YW5nZW50LnZhbHVlczsKICAgIH0KICAgIGNvbnN0IHNpemUgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGggLyAxODsKICAgIGNvbnN0IHRocmVlU2l6ZSA9IHNpemUgKiAzOwogICAgY29uc3QgdHdvU2l6ZSA9IHNpemUgKiAyOwogICAgY29uc3Qgc2l4U2l6ZSA9IHRocmVlU2l6ZSAqIDI7CiAgICBsZXQgaTsKICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsIHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQgfHwgdmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgY29uc3Qgbm9ybWFscyA9IHZlcnRleEZvcm1hdC5ub3JtYWwgPyBuZXcgRmxvYXQzMkFycmF5KHRocmVlU2l6ZSAqIDYpIDogdm9pZCAwOwogICAgICBjb25zdCB0YW5nZW50cyA9IHZlcnRleEZvcm1hdC50YW5nZW50ID8gbmV3IEZsb2F0MzJBcnJheSh0aHJlZVNpemUgKiA2KSA6IHZvaWQgMDsKICAgICAgY29uc3QgYml0YW5nZW50cyA9IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KHRocmVlU2l6ZSAqIDYpIDogdm9pZCAwOwogICAgICBsZXQgdG9wUG9zaXRpb24gPSBjYXJ0ZXNpYW4xMjsKICAgICAgbGV0IGJvdHRvbVBvc2l0aW9uID0gY2FydGVzaWFuMjI7CiAgICAgIGxldCBwcmV2aW91c1Bvc2l0aW9uID0gY2FydGVzaWFuMzI7CiAgICAgIGxldCBub3JtYWwyID0gY2FydGVzaWFuNDI7CiAgICAgIGxldCB0YW5nZW50ID0gY2FydGVzaWFuNTI7CiAgICAgIGxldCBiaXRhbmdlbnQgPSBjYXJ0ZXNpYW42MjsKICAgICAgbGV0IGF0dHJJbmRleCA9IHNpeFNpemU7CiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aHJlZVNpemU7IGkgKz0gMykgewogICAgICAgIGNvbnN0IGF0dHJJbmRleE9mZnNldCA9IGF0dHJJbmRleCArIHNpeFNpemU7CiAgICAgICAgdG9wUG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHBvc2l0aW9ucywgaSwgdG9wUG9zaXRpb24pOwogICAgICAgIGJvdHRvbVBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgIGkgKyB0aHJlZVNpemUsCiAgICAgICAgICBib3R0b21Qb3NpdGlvbgogICAgICAgICk7CiAgICAgICAgcHJldmlvdXNQb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICAoaSArIDMpICUgdGhyZWVTaXplLAogICAgICAgICAgcHJldmlvdXNQb3NpdGlvbgogICAgICAgICk7CiAgICAgICAgYm90dG9tUG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICBib3R0b21Qb3NpdGlvbiwKICAgICAgICAgIHRvcFBvc2l0aW9uLAogICAgICAgICAgYm90dG9tUG9zaXRpb24KICAgICAgICApOwogICAgICAgIHByZXZpb3VzUG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICBwcmV2aW91c1Bvc2l0aW9uLAogICAgICAgICAgdG9wUG9zaXRpb24sCiAgICAgICAgICBwcmV2aW91c1Bvc2l0aW9uCiAgICAgICAgKTsKICAgICAgICBub3JtYWwyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhib3R0b21Qb3NpdGlvbiwgcHJldmlvdXNQb3NpdGlvbiwgbm9ybWFsMiksCiAgICAgICAgICBub3JtYWwyCiAgICAgICAgKTsKICAgICAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUobm9ybWFscywgbm9ybWFsMiwgYXR0ckluZGV4T2Zmc2V0KTsKICAgICAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuYWRkQXR0cmlidXRlKAogICAgICAgICAgICBub3JtYWxzLAogICAgICAgICAgICBub3JtYWwyLAogICAgICAgICAgICBhdHRySW5kZXhPZmZzZXQgKyAzCiAgICAgICAgICApOwogICAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUobm9ybWFscywgbm9ybWFsMiwgYXR0ckluZGV4KTsKICAgICAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuYWRkQXR0cmlidXRlKG5vcm1hbHMsIG5vcm1hbDIsIGF0dHJJbmRleCArIDMpOwogICAgICAgIH0KICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQgfHwgdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgYml0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSh0b3BOb3JtYWxzLCBpLCBiaXRhbmdlbnQpOwogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoCiAgICAgICAgICAgICAgYml0YW5nZW50cywKICAgICAgICAgICAgICBiaXRhbmdlbnQsCiAgICAgICAgICAgICAgYXR0ckluZGV4T2Zmc2V0CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuYWRkQXR0cmlidXRlKAogICAgICAgICAgICAgIGJpdGFuZ2VudHMsCiAgICAgICAgICAgICAgYml0YW5nZW50LAogICAgICAgICAgICAgIGF0dHJJbmRleE9mZnNldCArIDMKICAgICAgICAgICAgKTsKICAgICAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoCiAgICAgICAgICAgICAgYml0YW5nZW50cywKICAgICAgICAgICAgICBiaXRhbmdlbnQsCiAgICAgICAgICAgICAgYXR0ckluZGV4CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuYWRkQXR0cmlidXRlKAogICAgICAgICAgICAgIGJpdGFuZ2VudHMsCiAgICAgICAgICAgICAgYml0YW5nZW50LAogICAgICAgICAgICAgIGF0dHJJbmRleCArIDMKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICAgICAgICB0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoYml0YW5nZW50LCBub3JtYWwyLCB0YW5nZW50KSwKICAgICAgICAgICAgICB0YW5nZW50CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuYWRkQXR0cmlidXRlKAogICAgICAgICAgICAgIHRhbmdlbnRzLAogICAgICAgICAgICAgIHRhbmdlbnQsCiAgICAgICAgICAgICAgYXR0ckluZGV4T2Zmc2V0CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuYWRkQXR0cmlidXRlKAogICAgICAgICAgICAgIHRhbmdlbnRzLAogICAgICAgICAgICAgIHRhbmdlbnQsCiAgICAgICAgICAgICAgYXR0ckluZGV4T2Zmc2V0ICsgMwogICAgICAgICAgICApOwogICAgICAgICAgICBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmFkZEF0dHJpYnV0ZSh0YW5nZW50cywgdGFuZ2VudCwgYXR0ckluZGV4KTsKICAgICAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoCiAgICAgICAgICAgICAgdGFuZ2VudHMsCiAgICAgICAgICAgICAgdGFuZ2VudCwKICAgICAgICAgICAgICBhdHRySW5kZXggKyAzCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGF0dHJJbmRleCArPSA2OwogICAgICB9CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgICAgbm9ybWFscy5zZXQodG9wTm9ybWFscyk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRocmVlU2l6ZTsgaSArPSAzKSB7CiAgICAgICAgICBub3JtYWxzW2kgKyB0aHJlZVNpemVdID0gLXRvcE5vcm1hbHNbaV07CiAgICAgICAgICBub3JtYWxzW2kgKyB0aHJlZVNpemUgKyAxXSA9IC10b3BOb3JtYWxzW2kgKyAxXTsKICAgICAgICAgIG5vcm1hbHNbaSArIHRocmVlU2l6ZSArIDJdID0gLXRvcE5vcm1hbHNbaSArIDJdOwogICAgICAgIH0KICAgICAgICBhdHRyaWJ1dGVzLm5vcm1hbC52YWx1ZXMgPSBub3JtYWxzOwogICAgICB9IGVsc2UgewogICAgICAgIGF0dHJpYnV0ZXMubm9ybWFsID0gdm9pZCAwOwogICAgICB9CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgYml0YW5nZW50cy5zZXQodG9wQml0YW5nZW50cyk7CiAgICAgICAgYml0YW5nZW50cy5zZXQodG9wQml0YW5nZW50cywgdGhyZWVTaXplKTsKICAgICAgICBhdHRyaWJ1dGVzLmJpdGFuZ2VudC52YWx1ZXMgPSBiaXRhbmdlbnRzOwogICAgICB9IGVsc2UgewogICAgICAgIGF0dHJpYnV0ZXMuYml0YW5nZW50ID0gdm9pZCAwOwogICAgICB9CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICAgIGNvbnN0IHRvcFRhbmdlbnRzID0gYXR0cmlidXRlcy50YW5nZW50LnZhbHVlczsKICAgICAgICB0YW5nZW50cy5zZXQodG9wVGFuZ2VudHMpOwogICAgICAgIHRhbmdlbnRzLnNldCh0b3BUYW5nZW50cywgdGhyZWVTaXplKTsKICAgICAgICBhdHRyaWJ1dGVzLnRhbmdlbnQudmFsdWVzID0gdGFuZ2VudHM7CiAgICAgIH0KICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgY29uc3QgdG9wU3QgPSBhdHRyaWJ1dGVzLnN0LnZhbHVlczsKICAgICAgY29uc3Qgc3QgPSBuZXcgRmxvYXQzMkFycmF5KHR3b1NpemUgKiA2KTsKICAgICAgc3Quc2V0KHRvcFN0KTsKICAgICAgc3Quc2V0KHRvcFN0LCB0d29TaXplKTsKICAgICAgbGV0IGluZGV4ID0gdHdvU2l6ZSAqIDI7CiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMjsgaisrKSB7CiAgICAgICAgc3RbaW5kZXgrK10gPSB0b3BTdFswXTsKICAgICAgICBzdFtpbmRleCsrXSA9IHRvcFN0WzFdOwogICAgICAgIGZvciAoaSA9IDI7IGkgPCB0d29TaXplOyBpICs9IDIpIHsKICAgICAgICAgIGNvbnN0IHMgPSB0b3BTdFtpXTsKICAgICAgICAgIGNvbnN0IHQgPSB0b3BTdFtpICsgMV07CiAgICAgICAgICBzdFtpbmRleCsrXSA9IHM7CiAgICAgICAgICBzdFtpbmRleCsrXSA9IHQ7CiAgICAgICAgICBzdFtpbmRleCsrXSA9IHM7CiAgICAgICAgICBzdFtpbmRleCsrXSA9IHQ7CiAgICAgICAgfQogICAgICAgIHN0W2luZGV4KytdID0gdG9wU3RbMF07CiAgICAgICAgc3RbaW5kZXgrK10gPSB0b3BTdFsxXTsKICAgICAgfQogICAgICBhdHRyaWJ1dGVzLnN0LnZhbHVlcyA9IHN0OwogICAgfQogICAgcmV0dXJuIGF0dHJpYnV0ZXM7CiAgfQogIGZ1bmN0aW9uIGFkZFdhbGxQb3NpdGlvbnMocG9zaXRpb25zLCBpbmRleCwgd2FsbFBvc2l0aW9ucykgewogICAgd2FsbFBvc2l0aW9uc1tpbmRleCsrXSA9IHBvc2l0aW9uc1swXTsKICAgIHdhbGxQb3NpdGlvbnNbaW5kZXgrK10gPSBwb3NpdGlvbnNbMV07CiAgICB3YWxsUG9zaXRpb25zW2luZGV4KytdID0gcG9zaXRpb25zWzJdOwogICAgZm9yIChsZXQgaSA9IDM7IGkgPCBwb3NpdGlvbnMubGVuZ3RoOyBpICs9IDMpIHsKICAgICAgY29uc3QgeCA9IHBvc2l0aW9uc1tpXTsKICAgICAgY29uc3QgeSA9IHBvc2l0aW9uc1tpICsgMV07CiAgICAgIGNvbnN0IHogPSBwb3NpdGlvbnNbaSArIDJdOwogICAgICB3YWxsUG9zaXRpb25zW2luZGV4KytdID0geDsKICAgICAgd2FsbFBvc2l0aW9uc1tpbmRleCsrXSA9IHk7CiAgICAgIHdhbGxQb3NpdGlvbnNbaW5kZXgrK10gPSB6OwogICAgICB3YWxsUG9zaXRpb25zW2luZGV4KytdID0geDsKICAgICAgd2FsbFBvc2l0aW9uc1tpbmRleCsrXSA9IHk7CiAgICAgIHdhbGxQb3NpdGlvbnNbaW5kZXgrK10gPSB6OwogICAgfQogICAgd2FsbFBvc2l0aW9uc1tpbmRleCsrXSA9IHBvc2l0aW9uc1swXTsKICAgIHdhbGxQb3NpdGlvbnNbaW5kZXgrK10gPSBwb3NpdGlvbnNbMV07CiAgICB3YWxsUG9zaXRpb25zW2luZGV4KytdID0gcG9zaXRpb25zWzJdOwogICAgcmV0dXJuIHdhbGxQb3NpdGlvbnM7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVQb3NpdGlvbnNFeHRydWRlZChwYXJhbXMsIHZlcnRleEZvcm1hdCkgewogICAgY29uc3QgdG9wVmVydGV4Rm9ybWF0ID0gbmV3IFZlcnRleEZvcm1hdF9kZWZhdWx0KHsKICAgICAgcG9zaXRpb246IHZlcnRleEZvcm1hdC5wb3NpdGlvbiwKICAgICAgbm9ybWFsOiB2ZXJ0ZXhGb3JtYXQubm9ybWFsIHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQgfHwgcGFyYW1zLnNoYWRvd1ZvbHVtZSwKICAgICAgdGFuZ2VudDogdmVydGV4Rm9ybWF0LnRhbmdlbnQsCiAgICAgIGJpdGFuZ2VudDogdmVydGV4Rm9ybWF0Lm5vcm1hbCB8fCB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50LAogICAgICBzdDogdmVydGV4Rm9ybWF0LnN0CiAgICB9KTsKICAgIGNvbnN0IGVsbGlwc29pZCA9IHBhcmFtcy5lbGxpcHNvaWQ7CiAgICBjb25zdCBjb21wdXRlZFBvc2l0aW9ucyA9IENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZVBvc2l0aW9ucyhwYXJhbXMpOwogICAgY29uc3QgYXR0ciA9IGNvbWJpbmUyKGNvbXB1dGVkUG9zaXRpb25zLCB0b3BWZXJ0ZXhGb3JtYXQsIGVsbGlwc29pZCk7CiAgICBjb25zdCBoZWlnaHQgPSBwYXJhbXMuaGVpZ2h0OwogICAgY29uc3QgZXh0cnVkZWRIZWlnaHQgPSBwYXJhbXMuZXh0cnVkZWRIZWlnaHQ7CiAgICBsZXQgYXR0cmlidXRlcyA9IGF0dHIuYXR0cmlidXRlczsKICAgIGNvbnN0IGluZGljZXMgPSBhdHRyLmluZGljZXM7CiAgICBsZXQgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXM7CiAgICBsZXQgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgIGNvbnN0IG5ld1Bvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkobGVuZ3RoICogNik7CiAgICBsZXQgZXh0cnVkZWRQb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KGxlbmd0aCk7CiAgICBleHRydWRlZFBvc2l0aW9ucy5zZXQocG9zaXRpb25zKTsKICAgIGxldCB3YWxsUG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShsZW5ndGggKiA0KTsKICAgIHBvc2l0aW9ucyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodCgKICAgICAgcG9zaXRpb25zLAogICAgICBoZWlnaHQsCiAgICAgIGVsbGlwc29pZAogICAgKTsKICAgIHdhbGxQb3NpdGlvbnMgPSBhZGRXYWxsUG9zaXRpb25zKHBvc2l0aW9ucywgMCwgd2FsbFBvc2l0aW9ucyk7CiAgICBleHRydWRlZFBvc2l0aW9ucyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodCgKICAgICAgZXh0cnVkZWRQb3NpdGlvbnMsCiAgICAgIGV4dHJ1ZGVkSGVpZ2h0LAogICAgICBlbGxpcHNvaWQKICAgICk7CiAgICB3YWxsUG9zaXRpb25zID0gYWRkV2FsbFBvc2l0aW9ucygKICAgICAgZXh0cnVkZWRQb3NpdGlvbnMsCiAgICAgIGxlbmd0aCAqIDIsCiAgICAgIHdhbGxQb3NpdGlvbnMKICAgICk7CiAgICBuZXdQb3NpdGlvbnMuc2V0KHBvc2l0aW9ucyk7CiAgICBuZXdQb3NpdGlvbnMuc2V0KGV4dHJ1ZGVkUG9zaXRpb25zLCBsZW5ndGgpOwogICAgbmV3UG9zaXRpb25zLnNldCh3YWxsUG9zaXRpb25zLCBsZW5ndGggKiAyKTsKICAgIGF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzID0gbmV3UG9zaXRpb25zOwogICAgYXR0cmlidXRlcyA9IGV4dHJ1ZGVkQXR0cmlidXRlcyhhdHRyaWJ1dGVzLCB2ZXJ0ZXhGb3JtYXQpOwogICAgbGV0IGk7CiAgICBjb25zdCBzaXplID0gbGVuZ3RoIC8gMzsKICAgIGlmIChwYXJhbXMuc2hhZG93Vm9sdW1lKSB7CiAgICAgIGNvbnN0IHRvcE5vcm1hbHMgPSBhdHRyaWJ1dGVzLm5vcm1hbC52YWx1ZXM7CiAgICAgIGxlbmd0aCA9IHRvcE5vcm1hbHMubGVuZ3RoOwogICAgICBsZXQgZXh0cnVkZU5vcm1hbHMgPSBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCAqIDYpOwogICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICB0b3BOb3JtYWxzW2ldID0gLXRvcE5vcm1hbHNbaV07CiAgICAgIH0KICAgICAgZXh0cnVkZU5vcm1hbHMuc2V0KHRvcE5vcm1hbHMsIGxlbmd0aCk7CiAgICAgIGV4dHJ1ZGVOb3JtYWxzID0gYWRkV2FsbFBvc2l0aW9ucyh0b3BOb3JtYWxzLCBsZW5ndGggKiA0LCBleHRydWRlTm9ybWFscyk7CiAgICAgIGF0dHJpYnV0ZXMuZXh0cnVkZURpcmVjdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgIHZhbHVlczogZXh0cnVkZU5vcm1hbHMKICAgICAgfSk7CiAgICAgIGlmICghdmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICAgIGF0dHJpYnV0ZXMubm9ybWFsID0gdm9pZCAwOwogICAgICB9CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHBhcmFtcy5vZmZzZXRBdHRyaWJ1dGUpKSB7CiAgICAgIGxldCBhcHBseU9mZnNldCA9IG5ldyBVaW50OEFycmF5KHNpemUgKiA2KTsKICAgICAgaWYgKHBhcmFtcy5vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuVE9QKSB7CiAgICAgICAgYXBwbHlPZmZzZXQgPSBhcHBseU9mZnNldC5maWxsKDEsIDAsIHNpemUpLmZpbGwoMSwgc2l6ZSAqIDIsIHNpemUgKiA0KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zdCBhcHBseU9mZnNldFZhbHVlID0gcGFyYW1zLm9mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5OT05FID8gMCA6IDE7CiAgICAgICAgYXBwbHlPZmZzZXQgPSBhcHBseU9mZnNldC5maWxsKGFwcGx5T2Zmc2V0VmFsdWUpOwogICAgICB9CiAgICAgIGF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAxLAogICAgICAgIHZhbHVlczogYXBwbHlPZmZzZXQKICAgICAgfSk7CiAgICB9CiAgICBjb25zdCBpTGVuZ3RoID0gaW5kaWNlcy5sZW5ndGg7CiAgICBjb25zdCB0d29TaXplID0gc2l6ZSArIHNpemU7CiAgICBjb25zdCBuZXdJbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgIG5ld1Bvc2l0aW9ucy5sZW5ndGggLyAzLAogICAgICBpTGVuZ3RoICogMiArIHR3b1NpemUgKiAzCiAgICApOwogICAgbmV3SW5kaWNlcy5zZXQoaW5kaWNlcyk7CiAgICBsZXQgaW5kZXggPSBpTGVuZ3RoOwogICAgZm9yIChpID0gMDsgaSA8IGlMZW5ndGg7IGkgKz0gMykgewogICAgICBjb25zdCB2MDIgPSBpbmRpY2VzW2ldOwogICAgICBjb25zdCB2MTIgPSBpbmRpY2VzW2kgKyAxXTsKICAgICAgY29uc3QgdjIyID0gaW5kaWNlc1tpICsgMl07CiAgICAgIG5ld0luZGljZXNbaW5kZXgrK10gPSB2MjIgKyBzaXplOwogICAgICBuZXdJbmRpY2VzW2luZGV4KytdID0gdjEyICsgc2l6ZTsKICAgICAgbmV3SW5kaWNlc1tpbmRleCsrXSA9IHYwMiArIHNpemU7CiAgICB9CiAgICBsZXQgVUwsIExMLCBVUiwgTFI7CiAgICBmb3IgKGkgPSAwOyBpIDwgdHdvU2l6ZTsgaSArPSAyKSB7CiAgICAgIFVMID0gaSArIHR3b1NpemU7CiAgICAgIExMID0gVUwgKyB0d29TaXplOwogICAgICBVUiA9IFVMICsgMTsKICAgICAgTFIgPSBMTCArIDE7CiAgICAgIG5ld0luZGljZXNbaW5kZXgrK10gPSBVTDsKICAgICAgbmV3SW5kaWNlc1tpbmRleCsrXSA9IExMOwogICAgICBuZXdJbmRpY2VzW2luZGV4KytdID0gVVI7CiAgICAgIG5ld0luZGljZXNbaW5kZXgrK10gPSBVUjsKICAgICAgbmV3SW5kaWNlc1tpbmRleCsrXSA9IExMOwogICAgICBuZXdJbmRpY2VzW2luZGV4KytdID0gTFI7CiAgICB9CiAgICByZXR1cm4gewogICAgICBhdHRyaWJ1dGVzLAogICAgICBpbmRpY2VzOiBuZXdJbmRpY2VzCiAgICB9OwogIH0KICBmdW5jdGlvbiBjb21wdXRlT2Zmc2V0UG9pbnRzKHBvc2l0aW9uMSwgcG9zaXRpb24yLCBlbGxpcHNvaWQsIGhhbGZXaWR0aCwgbWluMywgbWF4MykgewogICAgY29uc3QgZGlyZWN0aW9uMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgcG9zaXRpb24yLAogICAgICBwb3NpdGlvbjEsCiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xNwogICAgKTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoZGlyZWN0aW9uMiwgZGlyZWN0aW9uMik7CiAgICBjb25zdCBub3JtYWwyID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwb3NpdGlvbjEsIHNjcmF0Y2hDYXJ0ZXNpYW4yNyk7CiAgICBjb25zdCBvZmZzZXREaXJlY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoCiAgICAgIGRpcmVjdGlvbjIsCiAgICAgIG5vcm1hbDIsCiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xNwogICAgKTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKG9mZnNldERpcmVjdGlvbiwgaGFsZldpZHRoLCBvZmZzZXREaXJlY3Rpb24pOwogICAgbGV0IG1pbkxhdCA9IG1pbjMubGF0aXR1ZGU7CiAgICBsZXQgbWluTG9uID0gbWluMy5sb25naXR1ZGU7CiAgICBsZXQgbWF4TGF0ID0gbWF4My5sYXRpdHVkZTsKICAgIGxldCBtYXhMb24gPSBtYXgzLmxvbmdpdHVkZTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocG9zaXRpb24xLCBvZmZzZXREaXJlY3Rpb24sIHNjcmF0Y2hDYXJ0ZXNpYW4yNyk7CiAgICBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoc2NyYXRjaENhcnRlc2lhbjI3LCBzY3JhdGNoQ2FydG9ncmFwaGljNCk7CiAgICBsZXQgbGF0ID0gc2NyYXRjaENhcnRvZ3JhcGhpYzQubGF0aXR1ZGU7CiAgICBsZXQgbG9uID0gc2NyYXRjaENhcnRvZ3JhcGhpYzQubG9uZ2l0dWRlOwogICAgbWluTGF0ID0gTWF0aC5taW4obWluTGF0LCBsYXQpOwogICAgbWluTG9uID0gTWF0aC5taW4obWluTG9uLCBsb24pOwogICAgbWF4TGF0ID0gTWF0aC5tYXgobWF4TGF0LCBsYXQpOwogICAgbWF4TG9uID0gTWF0aC5tYXgobWF4TG9uLCBsb24pOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHBvc2l0aW9uMSwgb2Zmc2V0RGlyZWN0aW9uLCBzY3JhdGNoQ2FydGVzaWFuMjcpOwogICAgZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKHNjcmF0Y2hDYXJ0ZXNpYW4yNywgc2NyYXRjaENhcnRvZ3JhcGhpYzQpOwogICAgbGF0ID0gc2NyYXRjaENhcnRvZ3JhcGhpYzQubGF0aXR1ZGU7CiAgICBsb24gPSBzY3JhdGNoQ2FydG9ncmFwaGljNC5sb25naXR1ZGU7CiAgICBtaW5MYXQgPSBNYXRoLm1pbihtaW5MYXQsIGxhdCk7CiAgICBtaW5Mb24gPSBNYXRoLm1pbihtaW5Mb24sIGxvbik7CiAgICBtYXhMYXQgPSBNYXRoLm1heChtYXhMYXQsIGxhdCk7CiAgICBtYXhMb24gPSBNYXRoLm1heChtYXhMb24sIGxvbik7CiAgICBtaW4zLmxhdGl0dWRlID0gbWluTGF0OwogICAgbWluMy5sb25naXR1ZGUgPSBtaW5Mb247CiAgICBtYXgzLmxhdGl0dWRlID0gbWF4TGF0OwogICAgbWF4My5sb25naXR1ZGUgPSBtYXhMb247CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVSZWN0YW5nbGUyKHBvc2l0aW9ucywgZWxsaXBzb2lkLCB3aWR0aCwgY29ybmVyVHlwZSwgcmVzdWx0KSB7CiAgICBwb3NpdGlvbnMgPSBzY2FsZVRvU3VyZmFjZTIocG9zaXRpb25zLCBlbGxpcHNvaWQpOwogICAgY29uc3QgY2xlYW5Qb3NpdGlvbnMgPSBhcnJheVJlbW92ZUR1cGxpY2F0ZXNfZGVmYXVsdCgKICAgICAgcG9zaXRpb25zLAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbgogICAgKTsKICAgIGNvbnN0IGxlbmd0aCA9IGNsZWFuUG9zaXRpb25zLmxlbmd0aDsKICAgIGlmIChsZW5ndGggPCAyIHx8IHdpZHRoIDw9IDApIHsKICAgICAgcmV0dXJuIG5ldyBSZWN0YW5nbGVfZGVmYXVsdCgpOwogICAgfQogICAgY29uc3QgaGFsZldpZHRoID0gd2lkdGggKiAwLjU7CiAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWluLmxhdGl0dWRlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgc2NyYXRjaENhcnRvZ3JhcGhpY01pbi5sb25naXR1ZGUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CiAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWF4LmxhdGl0dWRlID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgc2NyYXRjaENhcnRvZ3JhcGhpY01heC5sb25naXR1ZGUgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CiAgICBsZXQgbGF0LCBsb247CiAgICBpZiAoY29ybmVyVHlwZSA9PT0gQ29ybmVyVHlwZV9kZWZhdWx0LlJPVU5ERUQpIHsKICAgICAgY29uc3QgZmlyc3QgPSBjbGVhblBvc2l0aW9uc1swXTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGZpcnN0LCBjbGVhblBvc2l0aW9uc1sxXSwgc2NyYXRjaENhcnRlc2lhbk9mZnNldCk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoc2NyYXRjaENhcnRlc2lhbk9mZnNldCwgc2NyYXRjaENhcnRlc2lhbk9mZnNldCk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW5PZmZzZXQsCiAgICAgICAgaGFsZldpZHRoLAogICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW5PZmZzZXQKICAgICAgKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChmaXJzdCwgc2NyYXRjaENhcnRlc2lhbk9mZnNldCwgc2NyYXRjaENhcnRlc2lhbkVuZHMpOwogICAgICBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoCiAgICAgICAgc2NyYXRjaENhcnRlc2lhbkVuZHMsCiAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYzQKICAgICAgKTsKICAgICAgbGF0ID0gc2NyYXRjaENhcnRvZ3JhcGhpYzQubGF0aXR1ZGU7CiAgICAgIGxvbiA9IHNjcmF0Y2hDYXJ0b2dyYXBoaWM0LmxvbmdpdHVkZTsKICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY01pbi5sYXRpdHVkZSA9IE1hdGgubWluKAogICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNaW4ubGF0aXR1ZGUsCiAgICAgICAgbGF0CiAgICAgICk7CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNaW4ubG9uZ2l0dWRlID0gTWF0aC5taW4oCiAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY01pbi5sb25naXR1ZGUsCiAgICAgICAgbG9uCiAgICAgICk7CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNYXgubGF0aXR1ZGUgPSBNYXRoLm1heCgKICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWF4LmxhdGl0dWRlLAogICAgICAgIGxhdAogICAgICApOwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWF4LmxvbmdpdHVkZSA9IE1hdGgubWF4KAogICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNYXgubG9uZ2l0dWRlLAogICAgICAgIGxvbgogICAgICApOwogICAgfQogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGggLSAxOyArK2kpIHsKICAgICAgY29tcHV0ZU9mZnNldFBvaW50cygKICAgICAgICBjbGVhblBvc2l0aW9uc1tpXSwKICAgICAgICBjbGVhblBvc2l0aW9uc1tpICsgMV0sCiAgICAgICAgZWxsaXBzb2lkLAogICAgICAgIGhhbGZXaWR0aCwKICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWluLAogICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNYXgKICAgICAgKTsKICAgIH0KICAgIGNvbnN0IGxhc3QgPSBjbGVhblBvc2l0aW9uc1tsZW5ndGggLSAxXTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChsYXN0LCBjbGVhblBvc2l0aW9uc1tsZW5ndGggLSAyXSwgc2NyYXRjaENhcnRlc2lhbk9mZnNldCk7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHNjcmF0Y2hDYXJ0ZXNpYW5PZmZzZXQsIHNjcmF0Y2hDYXJ0ZXNpYW5PZmZzZXQpOwogICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW5PZmZzZXQsCiAgICAgIGhhbGZXaWR0aCwKICAgICAgc2NyYXRjaENhcnRlc2lhbk9mZnNldAogICAgKTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobGFzdCwgc2NyYXRjaENhcnRlc2lhbk9mZnNldCwgc2NyYXRjaENhcnRlc2lhbkVuZHMpOwogICAgY29tcHV0ZU9mZnNldFBvaW50cygKICAgICAgbGFzdCwKICAgICAgc2NyYXRjaENhcnRlc2lhbkVuZHMsCiAgICAgIGVsbGlwc29pZCwKICAgICAgaGFsZldpZHRoLAogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWluLAogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWF4CiAgICApOwogICAgaWYgKGNvcm5lclR5cGUgPT09IENvcm5lclR5cGVfZGVmYXVsdC5ST1VOREVEKSB7CiAgICAgIGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYygKICAgICAgICBzY3JhdGNoQ2FydGVzaWFuRW5kcywKICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljNAogICAgICApOwogICAgICBsYXQgPSBzY3JhdGNoQ2FydG9ncmFwaGljNC5sYXRpdHVkZTsKICAgICAgbG9uID0gc2NyYXRjaENhcnRvZ3JhcGhpYzQubG9uZ2l0dWRlOwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWluLmxhdGl0dWRlID0gTWF0aC5taW4oCiAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY01pbi5sYXRpdHVkZSwKICAgICAgICBsYXQKICAgICAgKTsKICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY01pbi5sb25naXR1ZGUgPSBNYXRoLm1pbigKICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWluLmxvbmdpdHVkZSwKICAgICAgICBsb24KICAgICAgKTsKICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY01heC5sYXRpdHVkZSA9IE1hdGgubWF4KAogICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNYXgubGF0aXR1ZGUsCiAgICAgICAgbGF0CiAgICAgICk7CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNYXgubG9uZ2l0dWRlID0gTWF0aC5tYXgoCiAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY01heC5sb25naXR1ZGUsCiAgICAgICAgbG9uCiAgICAgICk7CiAgICB9CiAgICBjb25zdCByZWN0YW5nbGUgPSBkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSA/IHJlc3VsdCA6IG5ldyBSZWN0YW5nbGVfZGVmYXVsdCgpOwogICAgcmVjdGFuZ2xlLm5vcnRoID0gc2NyYXRjaENhcnRvZ3JhcGhpY01heC5sYXRpdHVkZTsKICAgIHJlY3RhbmdsZS5zb3V0aCA9IHNjcmF0Y2hDYXJ0b2dyYXBoaWNNaW4ubGF0aXR1ZGU7CiAgICByZWN0YW5nbGUuZWFzdCA9IHNjcmF0Y2hDYXJ0b2dyYXBoaWNNYXgubG9uZ2l0dWRlOwogICAgcmVjdGFuZ2xlLndlc3QgPSBzY3JhdGNoQ2FydG9ncmFwaGljTWluLmxvbmdpdHVkZTsKICAgIHJldHVybiByZWN0YW5nbGU7CiAgfQogIGZ1bmN0aW9uIENvcnJpZG9yR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBvcHRpb25zLnBvc2l0aW9uczsKICAgIGNvbnN0IHdpZHRoID0gb3B0aW9ucy53aWR0aDsKICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgib3B0aW9ucy5wb3NpdGlvbnMiLCBwb3NpdGlvbnMpOwogICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJvcHRpb25zLndpZHRoIiwgd2lkdGgpOwogICAgY29uc3QgaGVpZ2h0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5oZWlnaHQsIDApOwogICAgY29uc3QgZXh0cnVkZWRIZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmV4dHJ1ZGVkSGVpZ2h0LCBoZWlnaHQpOwogICAgdGhpcy5fcG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgdGhpcy5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoCiAgICAgIGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NCkKICAgICk7CiAgICB0aGlzLl92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSgKICAgICAgZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy52ZXJ0ZXhGb3JtYXQsIFZlcnRleEZvcm1hdF9kZWZhdWx0LkRFRkFVTFQpCiAgICApOwogICAgdGhpcy5fd2lkdGggPSB3aWR0aDsKICAgIHRoaXMuX2hlaWdodCA9IE1hdGgubWF4KGhlaWdodCwgZXh0cnVkZWRIZWlnaHQpOwogICAgdGhpcy5fZXh0cnVkZWRIZWlnaHQgPSBNYXRoLm1pbihoZWlnaHQsIGV4dHJ1ZGVkSGVpZ2h0KTsKICAgIHRoaXMuX2Nvcm5lclR5cGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmNvcm5lclR5cGUsIENvcm5lclR5cGVfZGVmYXVsdC5ST1VOREVEKTsKICAgIHRoaXMuX2dyYW51bGFyaXR5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgIG9wdGlvbnMuZ3JhbnVsYXJpdHksCiAgICAgIE1hdGhfZGVmYXVsdC5SQURJQU5TX1BFUl9ERUdSRUUKICAgICk7CiAgICB0aGlzLl9zaGFkb3dWb2x1bWUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnNoYWRvd1ZvbHVtZSwgZmFsc2UpOwogICAgdGhpcy5fd29ya2VyTmFtZSA9ICJjcmVhdGVDb3JyaWRvckdlb21ldHJ5IjsKICAgIHRoaXMuX29mZnNldEF0dHJpYnV0ZSA9IG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlOwogICAgdGhpcy5fcmVjdGFuZ2xlID0gdm9pZCAwOwogICAgdGhpcy5wYWNrZWRMZW5ndGggPSAxICsgcG9zaXRpb25zLmxlbmd0aCAqIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyA3OwogIH0KICB2YXIgY2FydGVzaWFuMTIsIGNhcnRlc2lhbjIyLCBjYXJ0ZXNpYW4zMiwgY2FydGVzaWFuNDIsIGNhcnRlc2lhbjUyLCBjYXJ0ZXNpYW42Miwgc2NyYXRjaDEzLCBzY3JhdGNoMjMsIHNjcmF0Y2hDYXJ0ZXNpYW4xNywgc2NyYXRjaENhcnRlc2lhbjI3LCBzY3JhdGNoQ2FydG9ncmFwaGljNCwgc2NyYXRjaENhcnRlc2lhbk9mZnNldCwgc2NyYXRjaENhcnRlc2lhbkVuZHMsIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNaW4sIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNYXgsIHNjcmF0Y2hFbGxpcHNvaWQ0LCBzY3JhdGNoVmVydGV4Rm9ybWF0NCwgc2NyYXRjaE9wdGlvbnM5LCBDb3JyaWRvckdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfQ29ycmlkb3JHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ29ycmlkb3JHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfYXJyYXlSZW1vdmVEdXBsaWNhdGVzKCk7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X0Nvcm5lclR5cGUoKTsKICAgICAgaW5pdF9Db3JyaWRvckdlb21ldHJ5TGlicmFyeSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X1BvbHlnb25QaXBlbGluZSgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgaW5pdF9WZXJ0ZXhGb3JtYXQoKTsKICAgICAgY2FydGVzaWFuMTIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhbjIyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjYXJ0ZXNpYW4zMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuNDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhbjUyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjYXJ0ZXNpYW42MiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaDEzID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoMjMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xNyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjI3ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljNCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuT2Zmc2V0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuRW5kcyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY01pbiA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWF4ID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIENvcnJpZG9yR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gdmFsdWUuX3Bvc2l0aW9uczsKICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBsZW5ndGg7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhwb3NpdGlvbnNbaV0sIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgRWxsaXBzb2lkX2RlZmF1bHQucGFjayh2YWx1ZS5fZWxsaXBzb2lkLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFjayh2YWx1ZS5fdmVydGV4Rm9ybWF0LCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl93aWR0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2hlaWdodDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2V4dHJ1ZGVkSGVpZ2h0OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fY29ybmVyVHlwZTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2dyYW51bGFyaXR5OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fc2hhZG93Vm9sdW1lID8gMSA6IDA7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh2YWx1ZS5fb2Zmc2V0QXR0cmlidXRlLCAtMSk7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBzY3JhdGNoRWxsaXBzb2lkNCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKEVsbGlwc29pZF9kZWZhdWx0LlVOSVRfU1BIRVJFKTsKICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdDQgPSBuZXcgVmVydGV4Rm9ybWF0X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE9wdGlvbnM5ID0gewogICAgICAgIHBvc2l0aW9uczogdm9pZCAwLAogICAgICAgIGVsbGlwc29pZDogc2NyYXRjaEVsbGlwc29pZDQsCiAgICAgICAgdmVydGV4Rm9ybWF0OiBzY3JhdGNoVmVydGV4Rm9ybWF0NCwKICAgICAgICB3aWR0aDogdm9pZCAwLAogICAgICAgIGhlaWdodDogdm9pZCAwLAogICAgICAgIGV4dHJ1ZGVkSGVpZ2h0OiB2b2lkIDAsCiAgICAgICAgY29ybmVyVHlwZTogdm9pZCAwLAogICAgICAgIGdyYW51bGFyaXR5OiB2b2lkIDAsCiAgICAgICAgc2hhZG93Vm9sdW1lOiB2b2lkIDAsCiAgICAgICAgb2Zmc2V0QXR0cmlidXRlOiB2b2lkIDAKICAgICAgfTsKICAgICAgQ29ycmlkb3JHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIHBvc2l0aW9uc1tpXSA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hFbGxpcHNvaWQ0KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBzY3JhdGNoVmVydGV4Rm9ybWF0NAogICAgICAgICk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3Qgd2lkdGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGhlaWdodCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgZXh0cnVkZWRIZWlnaHQgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGNvcm5lclR5cGUgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBzaGFkb3dWb2x1bWUgPSBhcnJheVtzdGFydGluZ0luZGV4KytdID09PSAxOwogICAgICAgIGNvbnN0IG9mZnNldEF0dHJpYnV0ZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zOS5wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczkud2lkdGggPSB3aWR0aDsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zOS5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczkuZXh0cnVkZWRIZWlnaHQgPSBleHRydWRlZEhlaWdodDsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zOS5jb3JuZXJUeXBlID0gY29ybmVyVHlwZTsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zOS5ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgICAgICAgc2NyYXRjaE9wdGlvbnM5LnNoYWRvd1ZvbHVtZSA9IHNoYWRvd1ZvbHVtZTsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zOS5vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgICAgcmV0dXJuIG5ldyBDb3JyaWRvckdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zOSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fcG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLCByZXN1bHQuX2VsbGlwc29pZCk7CiAgICAgICAgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSh2ZXJ0ZXhGb3JtYXQsIHJlc3VsdC5fdmVydGV4Rm9ybWF0KTsKICAgICAgICByZXN1bHQuX3dpZHRoID0gd2lkdGg7CiAgICAgICAgcmVzdWx0Ll9oZWlnaHQgPSBoZWlnaHQ7CiAgICAgICAgcmVzdWx0Ll9leHRydWRlZEhlaWdodCA9IGV4dHJ1ZGVkSGVpZ2h0OwogICAgICAgIHJlc3VsdC5fY29ybmVyVHlwZSA9IGNvcm5lclR5cGU7CiAgICAgICAgcmVzdWx0Ll9ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgICAgIHJlc3VsdC5fc2hhZG93Vm9sdW1lID0gc2hhZG93Vm9sdW1lOwogICAgICAgIHJlc3VsdC5fb2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDb3JyaWRvckdlb21ldHJ5LmNvbXB1dGVSZWN0YW5nbGUgPSBmdW5jdGlvbihvcHRpb25zLCByZXN1bHQpIHsKICAgICAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBvcHRpb25zLnBvc2l0aW9uczsKICAgICAgICBjb25zdCB3aWR0aCA9IG9wdGlvbnMud2lkdGg7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJvcHRpb25zLnBvc2l0aW9ucyIsIHBvc2l0aW9ucyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJvcHRpb25zLndpZHRoIiwgd2lkdGgpOwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NCk7CiAgICAgICAgY29uc3QgY29ybmVyVHlwZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuY29ybmVyVHlwZSwgQ29ybmVyVHlwZV9kZWZhdWx0LlJPVU5ERUQpOwogICAgICAgIHJldHVybiBjb21wdXRlUmVjdGFuZ2xlMihwb3NpdGlvbnMsIGVsbGlwc29pZCwgd2lkdGgsIGNvcm5lclR5cGUsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIENvcnJpZG9yR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihjb3JyaWRvckdlb21ldHJ5KSB7CiAgICAgICAgbGV0IHBvc2l0aW9ucyA9IGNvcnJpZG9yR2VvbWV0cnkuX3Bvc2l0aW9uczsKICAgICAgICBjb25zdCB3aWR0aCA9IGNvcnJpZG9yR2VvbWV0cnkuX3dpZHRoOwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IGNvcnJpZG9yR2VvbWV0cnkuX2VsbGlwc29pZDsKICAgICAgICBwb3NpdGlvbnMgPSBzY2FsZVRvU3VyZmFjZTIocG9zaXRpb25zLCBlbGxpcHNvaWQpOwogICAgICAgIGNvbnN0IGNsZWFuUG9zaXRpb25zID0gYXJyYXlSZW1vdmVEdXBsaWNhdGVzX2RlZmF1bHQoCiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbgogICAgICAgICk7CiAgICAgICAgaWYgKGNsZWFuUG9zaXRpb25zLmxlbmd0aCA8IDIgfHwgd2lkdGggPD0gMCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBoZWlnaHQgPSBjb3JyaWRvckdlb21ldHJ5Ll9oZWlnaHQ7CiAgICAgICAgY29uc3QgZXh0cnVkZWRIZWlnaHQgPSBjb3JyaWRvckdlb21ldHJ5Ll9leHRydWRlZEhlaWdodDsKICAgICAgICBjb25zdCBleHRydWRlID0gIU1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgaGVpZ2h0LAogICAgICAgICAgZXh0cnVkZWRIZWlnaHQsCiAgICAgICAgICAwLAogICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT04yCiAgICAgICAgKTsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBjb3JyaWRvckdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQ7CiAgICAgICAgY29uc3QgcGFyYW1zID0gewogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgcG9zaXRpb25zOiBjbGVhblBvc2l0aW9ucywKICAgICAgICAgIHdpZHRoLAogICAgICAgICAgY29ybmVyVHlwZTogY29ycmlkb3JHZW9tZXRyeS5fY29ybmVyVHlwZSwKICAgICAgICAgIGdyYW51bGFyaXR5OiBjb3JyaWRvckdlb21ldHJ5Ll9ncmFudWxhcml0eSwKICAgICAgICAgIHNhdmVBdHRyaWJ1dGVzOiB0cnVlCiAgICAgICAgfTsKICAgICAgICBsZXQgYXR0cjsKICAgICAgICBpZiAoZXh0cnVkZSkgewogICAgICAgICAgcGFyYW1zLmhlaWdodCA9IGhlaWdodDsKICAgICAgICAgIHBhcmFtcy5leHRydWRlZEhlaWdodCA9IGV4dHJ1ZGVkSGVpZ2h0OwogICAgICAgICAgcGFyYW1zLnNoYWRvd1ZvbHVtZSA9IGNvcnJpZG9yR2VvbWV0cnkuX3NoYWRvd1ZvbHVtZTsKICAgICAgICAgIHBhcmFtcy5vZmZzZXRBdHRyaWJ1dGUgPSBjb3JyaWRvckdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgICBhdHRyID0gY29tcHV0ZVBvc2l0aW9uc0V4dHJ1ZGVkKHBhcmFtcywgdmVydGV4Rm9ybWF0KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc3QgY29tcHV0ZWRQb3NpdGlvbnMgPSBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbnMocGFyYW1zKTsKICAgICAgICAgIGF0dHIgPSBjb21iaW5lMihjb21wdXRlZFBvc2l0aW9ucywgdmVydGV4Rm9ybWF0LCBlbGxpcHNvaWQpOwogICAgICAgICAgYXR0ci5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodCgKICAgICAgICAgICAgYXR0ci5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcywKICAgICAgICAgICAgaGVpZ2h0LAogICAgICAgICAgICBlbGxpcHNvaWQKICAgICAgICAgICk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGNvcnJpZG9yR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSkpIHsKICAgICAgICAgICAgY29uc3QgYXBwbHlPZmZzZXRWYWx1ZSA9IGNvcnJpZG9yR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5OT05FID8gMCA6IDE7CiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGF0dHIuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMubGVuZ3RoOwogICAgICAgICAgICBjb25zdCBhcHBseU9mZnNldCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCAvIDMpLmZpbGwoYXBwbHlPZmZzZXRWYWx1ZSk7CiAgICAgICAgICAgIGF0dHIuYXR0cmlidXRlcy5hcHBseU9mZnNldCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDEsCiAgICAgICAgICAgICAgdmFsdWVzOiBhcHBseU9mZnNldAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGF0dHIuYXR0cmlidXRlczsKICAgICAgICBjb25zdCBib3VuZGluZ1NwaGVyZSA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVZlcnRpY2VzKAogICAgICAgICAgYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMsCiAgICAgICAgICB2b2lkIDAsCiAgICAgICAgICAzCiAgICAgICAgKTsKICAgICAgICBpZiAoIXZlcnRleEZvcm1hdC5wb3NpdGlvbikgewogICAgICAgICAgYXR0ci5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcyA9IHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBpbmRpY2VzOiBhdHRyLmluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTLAogICAgICAgICAgYm91bmRpbmdTcGhlcmUsCiAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IGNvcnJpZG9yR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBDb3JyaWRvckdlb21ldHJ5LmNyZWF0ZVNoYWRvd1ZvbHVtZSA9IGZ1bmN0aW9uKGNvcnJpZG9yR2VvbWV0cnksIG1pbkhlaWdodEZ1bmMsIG1heEhlaWdodEZ1bmMpIHsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IGNvcnJpZG9yR2VvbWV0cnkuX2dyYW51bGFyaXR5OwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IGNvcnJpZG9yR2VvbWV0cnkuX2VsbGlwc29pZDsKICAgICAgICBjb25zdCBtaW5IZWlnaHQgPSBtaW5IZWlnaHRGdW5jKGdyYW51bGFyaXR5LCBlbGxpcHNvaWQpOwogICAgICAgIGNvbnN0IG1heEhlaWdodCA9IG1heEhlaWdodEZ1bmMoZ3JhbnVsYXJpdHksIGVsbGlwc29pZCk7CiAgICAgICAgcmV0dXJuIG5ldyBDb3JyaWRvckdlb21ldHJ5KHsKICAgICAgICAgIHBvc2l0aW9uczogY29ycmlkb3JHZW9tZXRyeS5fcG9zaXRpb25zLAogICAgICAgICAgd2lkdGg6IGNvcnJpZG9yR2VvbWV0cnkuX3dpZHRoLAogICAgICAgICAgY29ybmVyVHlwZTogY29ycmlkb3JHZW9tZXRyeS5fY29ybmVyVHlwZSwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgZXh0cnVkZWRIZWlnaHQ6IG1pbkhlaWdodCwKICAgICAgICAgIGhlaWdodDogbWF4SGVpZ2h0LAogICAgICAgICAgdmVydGV4Rm9ybWF0OiBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5QT1NJVElPTl9PTkxZLAogICAgICAgICAgc2hhZG93Vm9sdW1lOiB0cnVlCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKENvcnJpZG9yR2VvbWV0cnkucHJvdG90eXBlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKi8KICAgICAgICByZWN0YW5nbGU6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHRoaXMuX3JlY3RhbmdsZSkpIHsKICAgICAgICAgICAgICB0aGlzLl9yZWN0YW5nbGUgPSBjb21wdXRlUmVjdGFuZ2xlMigKICAgICAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9ucywKICAgICAgICAgICAgICAgIHRoaXMuX2VsbGlwc29pZCwKICAgICAgICAgICAgICAgIHRoaXMuX3dpZHRoLAogICAgICAgICAgICAgICAgdGhpcy5fY29ybmVyVHlwZQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY3RhbmdsZTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEZvciByZW1hcHBpbmcgdGV4dHVyZSBjb29yZGluYXRlcyB3aGVuIHJlbmRlcmluZyBDb3JyaWRvckdlb21ldHJpZXMgYXMgR3JvdW5kUHJpbWl0aXZlcy4KICAgICAgICAgKgogICAgICAgICAqIENvcnJpZG9ycyBkb24ndCBzdXBwb3J0IHN0Um90YXRpb24sCiAgICAgICAgICogc28ganVzdCByZXR1cm4gdGhlIGNvcm5lcnMgb2YgdGhlIG9yaWdpbmFsIHN5c3RlbS4KICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqLwogICAgICAgIHRleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHM6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBbMCwgMCwgMCwgMSwgMSwgMF07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgQ29ycmlkb3JHZW9tZXRyeV9kZWZhdWx0ID0gQ29ycmlkb3JHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUNvcnJpZG9yR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlQ29ycmlkb3JHZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlQ29ycmlkb3JHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVDb3JyaWRvckdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVDb3JyaWRvckdlb21ldHJ5KGNvcnJpZG9yR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIGNvcnJpZG9yR2VvbWV0cnkgPSBDb3JyaWRvckdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKGNvcnJpZG9yR2VvbWV0cnksIG9mZnNldCk7CiAgICB9CiAgICBjb3JyaWRvckdlb21ldHJ5Ll9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShjb3JyaWRvckdlb21ldHJ5Ll9lbGxpcHNvaWQpOwogICAgcmV0dXJuIENvcnJpZG9yR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShjb3JyaWRvckdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZUNvcnJpZG9yR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVDb3JyaWRvckdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVDb3JyaWRvckdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Db3JyaWRvckdlb21ldHJ5KCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBjcmVhdGVDb3JyaWRvckdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVDb3JyaWRvckdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnkuanMKICBmdW5jdGlvbiBzY2FsZVRvU3VyZmFjZTMocG9zaXRpb25zLCBlbGxpcHNvaWQpIHsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgIHBvc2l0aW9uc1tpXSA9IGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKHBvc2l0aW9uc1tpXSwgcG9zaXRpb25zW2ldKTsKICAgIH0KICAgIHJldHVybiBwb3NpdGlvbnM7CiAgfQogIGZ1bmN0aW9uIGNvbWJpbmUzKGNvbXB1dGVkUG9zaXRpb25zLCBjb3JuZXJUeXBlKSB7CiAgICBjb25zdCB3YWxsSW5kaWNlcyA9IFtdOwogICAgY29uc3QgcG9zaXRpb25zID0gY29tcHV0ZWRQb3NpdGlvbnMucG9zaXRpb25zOwogICAgY29uc3QgY29ybmVycyA9IGNvbXB1dGVkUG9zaXRpb25zLmNvcm5lcnM7CiAgICBjb25zdCBlbmRQb3NpdGlvbnMgPSBjb21wdXRlZFBvc2l0aW9ucy5lbmRQb3NpdGlvbnM7CiAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KCk7CiAgICBsZXQgY29ybmVyOwogICAgbGV0IGxlZnRDb3VudCA9IDA7CiAgICBsZXQgcmlnaHRDb3VudCA9IDA7CiAgICBsZXQgaTsKICAgIGxldCBpbmRpY2VzTGVuZ3RoID0gMDsKICAgIGxldCBsZW5ndGg7CiAgICBmb3IgKGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgaSArPSAyKSB7CiAgICAgIGxlbmd0aCA9IHBvc2l0aW9uc1tpXS5sZW5ndGggLSAzOwogICAgICBsZWZ0Q291bnQgKz0gbGVuZ3RoOwogICAgICBpbmRpY2VzTGVuZ3RoICs9IGxlbmd0aCAvIDMgKiA0OwogICAgICByaWdodENvdW50ICs9IHBvc2l0aW9uc1tpICsgMV0ubGVuZ3RoIC0gMzsKICAgIH0KICAgIGxlZnRDb3VudCArPSAzOwogICAgcmlnaHRDb3VudCArPSAzOwogICAgZm9yIChpID0gMDsgaSA8IGNvcm5lcnMubGVuZ3RoOyBpKyspIHsKICAgICAgY29ybmVyID0gY29ybmVyc1tpXTsKICAgICAgY29uc3QgbGVmdFNpZGUgPSBjb3JuZXJzW2ldLmxlZnRQb3NpdGlvbnM7CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobGVmdFNpZGUpKSB7CiAgICAgICAgbGVuZ3RoID0gbGVmdFNpZGUubGVuZ3RoOwogICAgICAgIGxlZnRDb3VudCArPSBsZW5ndGg7CiAgICAgICAgaW5kaWNlc0xlbmd0aCArPSBsZW5ndGggLyAzICogMjsKICAgICAgfSBlbHNlIHsKICAgICAgICBsZW5ndGggPSBjb3JuZXJzW2ldLnJpZ2h0UG9zaXRpb25zLmxlbmd0aDsKICAgICAgICByaWdodENvdW50ICs9IGxlbmd0aDsKICAgICAgICBpbmRpY2VzTGVuZ3RoICs9IGxlbmd0aCAvIDMgKiAyOwogICAgICB9CiAgICB9CiAgICBjb25zdCBhZGRFbmRQb3NpdGlvbnMgPSBkZWZpbmVkX2RlZmF1bHQoZW5kUG9zaXRpb25zKTsKICAgIGxldCBlbmRQb3NpdGlvbkxlbmd0aDsKICAgIGlmIChhZGRFbmRQb3NpdGlvbnMpIHsKICAgICAgZW5kUG9zaXRpb25MZW5ndGggPSBlbmRQb3NpdGlvbnNbMF0ubGVuZ3RoIC0gMzsKICAgICAgbGVmdENvdW50ICs9IGVuZFBvc2l0aW9uTGVuZ3RoOwogICAgICByaWdodENvdW50ICs9IGVuZFBvc2l0aW9uTGVuZ3RoOwogICAgICBlbmRQb3NpdGlvbkxlbmd0aCAvPSAzOwogICAgICBpbmRpY2VzTGVuZ3RoICs9IGVuZFBvc2l0aW9uTGVuZ3RoICogNDsKICAgIH0KICAgIGNvbnN0IHNpemUgPSBsZWZ0Q291bnQgKyByaWdodENvdW50OwogICAgY29uc3QgZmluYWxQb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KHNpemUpOwogICAgbGV0IGZyb250ID0gMDsKICAgIGxldCBiYWNrID0gc2l6ZSAtIDE7CiAgICBsZXQgVUwsIExMLCBVUiwgTFI7CiAgICBsZXQgcmlnaHRQb3MsIGxlZnRQb3M7CiAgICBjb25zdCBoYWxmTGVuZ3RoID0gZW5kUG9zaXRpb25MZW5ndGggLyAyOwogICAgY29uc3QgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KHNpemUgLyAzLCBpbmRpY2VzTGVuZ3RoICsgNCk7CiAgICBsZXQgaW5kZXggPSAwOwogICAgaW5kaWNlc1tpbmRleCsrXSA9IGZyb250IC8gMzsKICAgIGluZGljZXNbaW5kZXgrK10gPSAoYmFjayAtIDIpIC8gMzsKICAgIGlmIChhZGRFbmRQb3NpdGlvbnMpIHsKICAgICAgd2FsbEluZGljZXMucHVzaChmcm9udCAvIDMpOwogICAgICBsZWZ0UG9zID0gY2FydGVzaWFuMTM7CiAgICAgIHJpZ2h0UG9zID0gY2FydGVzaWFuMjM7CiAgICAgIGNvbnN0IGZpcnN0RW5kUG9zaXRpb25zID0gZW5kUG9zaXRpb25zWzBdOwogICAgICBmb3IgKGkgPSAwOyBpIDwgaGFsZkxlbmd0aDsgaSsrKSB7CiAgICAgICAgbGVmdFBvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICBmaXJzdEVuZFBvc2l0aW9ucywKICAgICAgICAgIChoYWxmTGVuZ3RoIC0gMSAtIGkpICogMywKICAgICAgICAgIGxlZnRQb3MKICAgICAgICApOwogICAgICAgIHJpZ2h0UG9zID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgIGZpcnN0RW5kUG9zaXRpb25zLAogICAgICAgICAgKGhhbGZMZW5ndGggKyBpKSAqIDMsCiAgICAgICAgICByaWdodFBvcwogICAgICAgICk7CiAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoZmluYWxQb3NpdGlvbnMsIHJpZ2h0UG9zLCBmcm9udCk7CiAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoCiAgICAgICAgICBmaW5hbFBvc2l0aW9ucywKICAgICAgICAgIGxlZnRQb3MsCiAgICAgICAgICB2b2lkIDAsCiAgICAgICAgICBiYWNrCiAgICAgICAgKTsKICAgICAgICBMTCA9IGZyb250IC8gMzsKICAgICAgICBMUiA9IExMICsgMTsKICAgICAgICBVTCA9IChiYWNrIC0gMikgLyAzOwogICAgICAgIFVSID0gVUwgLSAxOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBVTDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gVVI7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IExMOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMUjsKICAgICAgICBmcm9udCArPSAzOwogICAgICAgIGJhY2sgLT0gMzsKICAgICAgfQogICAgfQogICAgbGV0IHBvc0luZGV4ID0gMDsKICAgIGxldCByaWdodEVkZ2UgPSBwb3NpdGlvbnNbcG9zSW5kZXgrK107CiAgICBsZXQgbGVmdEVkZ2UgPSBwb3NpdGlvbnNbcG9zSW5kZXgrK107CiAgICBmaW5hbFBvc2l0aW9ucy5zZXQocmlnaHRFZGdlLCBmcm9udCk7CiAgICBmaW5hbFBvc2l0aW9ucy5zZXQobGVmdEVkZ2UsIGJhY2sgLSBsZWZ0RWRnZS5sZW5ndGggKyAxKTsKICAgIGxlbmd0aCA9IGxlZnRFZGdlLmxlbmd0aCAtIDM7CiAgICB3YWxsSW5kaWNlcy5wdXNoKGZyb250IC8gMywgKGJhY2sgLSAyKSAvIDMpOwogICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAzKSB7CiAgICAgIExMID0gZnJvbnQgLyAzOwogICAgICBMUiA9IExMICsgMTsKICAgICAgVUwgPSAoYmFjayAtIDIpIC8gMzsKICAgICAgVVIgPSBVTCAtIDE7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBVTDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IFVSOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gTEw7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMUjsKICAgICAgZnJvbnQgKz0gMzsKICAgICAgYmFjayAtPSAzOwogICAgfQogICAgZm9yIChpID0gMDsgaSA8IGNvcm5lcnMubGVuZ3RoOyBpKyspIHsKICAgICAgbGV0IGo7CiAgICAgIGNvcm5lciA9IGNvcm5lcnNbaV07CiAgICAgIGNvbnN0IGwgPSBjb3JuZXIubGVmdFBvc2l0aW9uczsKICAgICAgY29uc3QgciA9IGNvcm5lci5yaWdodFBvc2l0aW9uczsKICAgICAgbGV0IHN0YXJ0OwogICAgICBsZXQgb3V0c2lkZVBvaW50ID0gY2FydGVzaWFuMzM7CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobCkpIHsKICAgICAgICBiYWNrIC09IDM7CiAgICAgICAgc3RhcnQgPSBVUjsKICAgICAgICB3YWxsSW5kaWNlcy5wdXNoKExSKTsKICAgICAgICBmb3IgKGogPSAwOyBqIDwgbC5sZW5ndGggLyAzOyBqKyspIHsKICAgICAgICAgIG91dHNpZGVQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkobCwgaiAqIDMsIG91dHNpZGVQb2ludCk7CiAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gc3RhcnQgLSBqIC0gMTsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBzdGFydCAtIGo7CiAgICAgICAgICBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmFkZEF0dHJpYnV0ZSgKICAgICAgICAgICAgZmluYWxQb3NpdGlvbnMsCiAgICAgICAgICAgIG91dHNpZGVQb2ludCwKICAgICAgICAgICAgdm9pZCAwLAogICAgICAgICAgICBiYWNrCiAgICAgICAgICApOwogICAgICAgICAgYmFjayAtPSAzOwogICAgICAgIH0KICAgICAgICB3YWxsSW5kaWNlcy5wdXNoKHN0YXJ0IC0gTWF0aC5mbG9vcihsLmxlbmd0aCAvIDYpKTsKICAgICAgICBpZiAoY29ybmVyVHlwZSA9PT0gQ29ybmVyVHlwZV9kZWZhdWx0LkJFVkVMRUQpIHsKICAgICAgICAgIHdhbGxJbmRpY2VzLnB1c2goKGJhY2sgLSAyKSAvIDMgKyAxKTsKICAgICAgICB9CiAgICAgICAgZnJvbnQgKz0gMzsKICAgICAgfSBlbHNlIHsKICAgICAgICBmcm9udCArPSAzOwogICAgICAgIHN0YXJ0ID0gTFI7CiAgICAgICAgd2FsbEluZGljZXMucHVzaChVUik7CiAgICAgICAgZm9yIChqID0gMDsgaiA8IHIubGVuZ3RoIC8gMzsgaisrKSB7CiAgICAgICAgICBvdXRzaWRlUG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHIsIGogKiAzLCBvdXRzaWRlUG9pbnQpOwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHN0YXJ0ICsgajsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBzdGFydCArIGogKyAxOwogICAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoCiAgICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgICBvdXRzaWRlUG9pbnQsCiAgICAgICAgICAgIGZyb250CiAgICAgICAgICApOwogICAgICAgICAgZnJvbnQgKz0gMzsKICAgICAgICB9CiAgICAgICAgd2FsbEluZGljZXMucHVzaChzdGFydCArIE1hdGguZmxvb3Ioci5sZW5ndGggLyA2KSk7CiAgICAgICAgaWYgKGNvcm5lclR5cGUgPT09IENvcm5lclR5cGVfZGVmYXVsdC5CRVZFTEVEKSB7CiAgICAgICAgICB3YWxsSW5kaWNlcy5wdXNoKGZyb250IC8gMyAtIDEpOwogICAgICAgIH0KICAgICAgICBiYWNrIC09IDM7CiAgICAgIH0KICAgICAgcmlnaHRFZGdlID0gcG9zaXRpb25zW3Bvc0luZGV4KytdOwogICAgICBsZWZ0RWRnZSA9IHBvc2l0aW9uc1twb3NJbmRleCsrXTsKICAgICAgcmlnaHRFZGdlLnNwbGljZSgwLCAzKTsKICAgICAgbGVmdEVkZ2Uuc3BsaWNlKGxlZnRFZGdlLmxlbmd0aCAtIDMsIDMpOwogICAgICBmaW5hbFBvc2l0aW9ucy5zZXQocmlnaHRFZGdlLCBmcm9udCk7CiAgICAgIGZpbmFsUG9zaXRpb25zLnNldChsZWZ0RWRnZSwgYmFjayAtIGxlZnRFZGdlLmxlbmd0aCArIDEpOwogICAgICBsZW5ndGggPSBsZWZ0RWRnZS5sZW5ndGggLSAzOwogICAgICBmb3IgKGogPSAwOyBqIDwgbGVmdEVkZ2UubGVuZ3RoOyBqICs9IDMpIHsKICAgICAgICBMUiA9IGZyb250IC8gMzsKICAgICAgICBMTCA9IExSIC0gMTsKICAgICAgICBVUiA9IChiYWNrIC0gMikgLyAzOwogICAgICAgIFVMID0gVVIgKyAxOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBVTDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gVVI7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IExMOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMUjsKICAgICAgICBmcm9udCArPSAzOwogICAgICAgIGJhY2sgLT0gMzsKICAgICAgfQogICAgICBmcm9udCAtPSAzOwogICAgICBiYWNrICs9IDM7CiAgICAgIHdhbGxJbmRpY2VzLnB1c2goZnJvbnQgLyAzLCAoYmFjayAtIDIpIC8gMyk7CiAgICB9CiAgICBpZiAoYWRkRW5kUG9zaXRpb25zKSB7CiAgICAgIGZyb250ICs9IDM7CiAgICAgIGJhY2sgLT0gMzsKICAgICAgbGVmdFBvcyA9IGNhcnRlc2lhbjEzOwogICAgICByaWdodFBvcyA9IGNhcnRlc2lhbjIzOwogICAgICBjb25zdCBsYXN0RW5kUG9zaXRpb25zID0gZW5kUG9zaXRpb25zWzFdOwogICAgICBmb3IgKGkgPSAwOyBpIDwgaGFsZkxlbmd0aDsgaSsrKSB7CiAgICAgICAgbGVmdFBvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICBsYXN0RW5kUG9zaXRpb25zLAogICAgICAgICAgKGVuZFBvc2l0aW9uTGVuZ3RoIC0gaSAtIDEpICogMywKICAgICAgICAgIGxlZnRQb3MKICAgICAgICApOwogICAgICAgIHJpZ2h0UG9zID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShsYXN0RW5kUG9zaXRpb25zLCBpICogMywgcmlnaHRQb3MpOwogICAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuYWRkQXR0cmlidXRlKAogICAgICAgICAgZmluYWxQb3NpdGlvbnMsCiAgICAgICAgICBsZWZ0UG9zLAogICAgICAgICAgdm9pZCAwLAogICAgICAgICAgYmFjawogICAgICAgICk7CiAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoZmluYWxQb3NpdGlvbnMsIHJpZ2h0UG9zLCBmcm9udCk7CiAgICAgICAgTFIgPSBmcm9udCAvIDM7CiAgICAgICAgTEwgPSBMUiAtIDE7CiAgICAgICAgVVIgPSAoYmFjayAtIDIpIC8gMzsKICAgICAgICBVTCA9IFVSICsgMTsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gVUw7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IFVSOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMTDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gTFI7CiAgICAgICAgZnJvbnQgKz0gMzsKICAgICAgICBiYWNrIC09IDM7CiAgICAgIH0KICAgICAgd2FsbEluZGljZXMucHVzaChmcm9udCAvIDMpOwogICAgfSBlbHNlIHsKICAgICAgd2FsbEluZGljZXMucHVzaChmcm9udCAvIDMsIChiYWNrIC0gMikgLyAzKTsKICAgIH0KICAgIGluZGljZXNbaW5kZXgrK10gPSBmcm9udCAvIDM7CiAgICBpbmRpY2VzW2luZGV4KytdID0gKGJhY2sgLSAyKSAvIDM7CiAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgIHZhbHVlczogZmluYWxQb3NpdGlvbnMKICAgIH0pOwogICAgcmV0dXJuIHsKICAgICAgYXR0cmlidXRlcywKICAgICAgaW5kaWNlcywKICAgICAgd2FsbEluZGljZXMKICAgIH07CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVQb3NpdGlvbnNFeHRydWRlZDIocGFyYW1zKSB7CiAgICBjb25zdCBlbGxpcHNvaWQgPSBwYXJhbXMuZWxsaXBzb2lkOwogICAgY29uc3QgY29tcHV0ZWRQb3NpdGlvbnMgPSBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbnMocGFyYW1zKTsKICAgIGNvbnN0IGF0dHIgPSBjb21iaW5lMyhjb21wdXRlZFBvc2l0aW9ucywgcGFyYW1zLmNvcm5lclR5cGUpOwogICAgY29uc3Qgd2FsbEluZGljZXMgPSBhdHRyLndhbGxJbmRpY2VzOwogICAgY29uc3QgaGVpZ2h0ID0gcGFyYW1zLmhlaWdodDsKICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gcGFyYW1zLmV4dHJ1ZGVkSGVpZ2h0OwogICAgY29uc3QgYXR0cmlidXRlcyA9IGF0dHIuYXR0cmlidXRlczsKICAgIGNvbnN0IGluZGljZXMgPSBhdHRyLmluZGljZXM7CiAgICBsZXQgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXM7CiAgICBsZXQgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgIGxldCBleHRydWRlZFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkobGVuZ3RoKTsKICAgIGV4dHJ1ZGVkUG9zaXRpb25zLnNldChwb3NpdGlvbnMpOwogICAgY29uc3QgbmV3UG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShsZW5ndGggKiAyKTsKICAgIHBvc2l0aW9ucyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodCgKICAgICAgcG9zaXRpb25zLAogICAgICBoZWlnaHQsCiAgICAgIGVsbGlwc29pZAogICAgKTsKICAgIGV4dHJ1ZGVkUG9zaXRpb25zID0gUG9seWdvblBpcGVsaW5lX2RlZmF1bHQuc2NhbGVUb0dlb2RldGljSGVpZ2h0KAogICAgICBleHRydWRlZFBvc2l0aW9ucywKICAgICAgZXh0cnVkZWRIZWlnaHQsCiAgICAgIGVsbGlwc29pZAogICAgKTsKICAgIG5ld1Bvc2l0aW9ucy5zZXQocG9zaXRpb25zKTsKICAgIG5ld1Bvc2l0aW9ucy5zZXQoZXh0cnVkZWRQb3NpdGlvbnMsIGxlbmd0aCk7CiAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcyA9IG5ld1Bvc2l0aW9uczsKICAgIGxlbmd0aCAvPSAzOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdChwYXJhbXMub2Zmc2V0QXR0cmlidXRlKSkgewogICAgICBsZXQgYXBwbHlPZmZzZXQgPSBuZXcgVWludDhBcnJheShsZW5ndGggKiAyKTsKICAgICAgaWYgKHBhcmFtcy5vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuVE9QKSB7CiAgICAgICAgYXBwbHlPZmZzZXQgPSBhcHBseU9mZnNldC5maWxsKDEsIDAsIGxlbmd0aCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3QgYXBwbHlPZmZzZXRWYWx1ZSA9IHBhcmFtcy5vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuTk9ORSA/IDAgOiAxOwogICAgICAgIGFwcGx5T2Zmc2V0ID0gYXBwbHlPZmZzZXQuZmlsbChhcHBseU9mZnNldFZhbHVlKTsKICAgICAgfQogICAgICBhdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICB2YWx1ZXM6IGFwcGx5T2Zmc2V0CiAgICAgIH0pOwogICAgfQogICAgbGV0IGk7CiAgICBjb25zdCBpTGVuZ3RoID0gaW5kaWNlcy5sZW5ndGg7CiAgICBjb25zdCBuZXdJbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgIG5ld1Bvc2l0aW9ucy5sZW5ndGggLyAzLAogICAgICAoaUxlbmd0aCArIHdhbGxJbmRpY2VzLmxlbmd0aCkgKiAyCiAgICApOwogICAgbmV3SW5kaWNlcy5zZXQoaW5kaWNlcyk7CiAgICBsZXQgaW5kZXggPSBpTGVuZ3RoOwogICAgZm9yIChpID0gMDsgaSA8IGlMZW5ndGg7IGkgKz0gMikgewogICAgICBjb25zdCB2MDIgPSBpbmRpY2VzW2ldOwogICAgICBjb25zdCB2MTIgPSBpbmRpY2VzW2kgKyAxXTsKICAgICAgbmV3SW5kaWNlc1tpbmRleCsrXSA9IHYwMiArIGxlbmd0aDsKICAgICAgbmV3SW5kaWNlc1tpbmRleCsrXSA9IHYxMiArIGxlbmd0aDsKICAgIH0KICAgIGxldCBVTCwgTEw7CiAgICBmb3IgKGkgPSAwOyBpIDwgd2FsbEluZGljZXMubGVuZ3RoOyBpKyspIHsKICAgICAgVUwgPSB3YWxsSW5kaWNlc1tpXTsKICAgICAgTEwgPSBVTCArIGxlbmd0aDsKICAgICAgbmV3SW5kaWNlc1tpbmRleCsrXSA9IFVMOwogICAgICBuZXdJbmRpY2VzW2luZGV4KytdID0gTEw7CiAgICB9CiAgICByZXR1cm4gewogICAgICBhdHRyaWJ1dGVzLAogICAgICBpbmRpY2VzOiBuZXdJbmRpY2VzCiAgICB9OwogIH0KICBmdW5jdGlvbiBDb3JyaWRvck91dGxpbmVHZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IG9wdGlvbnMucG9zaXRpb25zOwogICAgY29uc3Qgd2lkdGggPSBvcHRpb25zLndpZHRoOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJvcHRpb25zLnBvc2l0aW9ucyIsIHBvc2l0aW9ucyk7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoIm9wdGlvbnMud2lkdGgiLCB3aWR0aCk7CiAgICBjb25zdCBoZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmhlaWdodCwgMCk7CiAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZXh0cnVkZWRIZWlnaHQsIGhlaWdodCk7CiAgICB0aGlzLl9wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZSgKICAgICAgZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5lbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LldHUzg0KQogICAgKTsKICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7CiAgICB0aGlzLl9oZWlnaHQgPSBNYXRoLm1heChoZWlnaHQsIGV4dHJ1ZGVkSGVpZ2h0KTsKICAgIHRoaXMuX2V4dHJ1ZGVkSGVpZ2h0ID0gTWF0aC5taW4oaGVpZ2h0LCBleHRydWRlZEhlaWdodCk7CiAgICB0aGlzLl9jb3JuZXJUeXBlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5jb3JuZXJUeXBlLCBDb3JuZXJUeXBlX2RlZmF1bHQuUk9VTkRFRCk7CiAgICB0aGlzLl9ncmFudWxhcml0eSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFCiAgICApOwogICAgdGhpcy5fb2Zmc2V0QXR0cmlidXRlID0gb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGU7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZUNvcnJpZG9yT3V0bGluZUdlb21ldHJ5IjsKICAgIHRoaXMucGFja2VkTGVuZ3RoID0gMSArIHBvc2l0aW9ucy5sZW5ndGggKiBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgNjsKICB9CiAgdmFyIGNhcnRlc2lhbjEzLCBjYXJ0ZXNpYW4yMywgY2FydGVzaWFuMzMsIHNjcmF0Y2hFbGxpcHNvaWQ1LCBzY3JhdGNoT3B0aW9uczEwLCBDb3JyaWRvck91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X0NvcnJpZG9yT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Db3JyaWRvck91dGxpbmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfYXJyYXlSZW1vdmVEdXBsaWNhdGVzKCk7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X0Nvcm5lclR5cGUoKTsKICAgICAgaW5pdF9Db3JyaWRvckdlb21ldHJ5TGlicmFyeSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X1BvbHlnb25QaXBlbGluZSgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgY2FydGVzaWFuMTMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhbjIzID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjYXJ0ZXNpYW4zMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gdmFsdWUuX3Bvc2l0aW9uczsKICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBsZW5ndGg7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhwb3NpdGlvbnNbaV0sIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgRWxsaXBzb2lkX2RlZmF1bHQucGFjayh2YWx1ZS5fZWxsaXBzb2lkLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl93aWR0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2hlaWdodDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2V4dHJ1ZGVkSGVpZ2h0OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fY29ybmVyVHlwZTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2dyYW51bGFyaXR5OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQodmFsdWUuX29mZnNldEF0dHJpYnV0ZSwgLTEpOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaEVsbGlwc29pZDUgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShFbGxpcHNvaWRfZGVmYXVsdC5VTklUX1NQSEVSRSk7CiAgICAgIHNjcmF0Y2hPcHRpb25zMTAgPSB7CiAgICAgICAgcG9zaXRpb25zOiB2b2lkIDAsCiAgICAgICAgZWxsaXBzb2lkOiBzY3JhdGNoRWxsaXBzb2lkNSwKICAgICAgICB3aWR0aDogdm9pZCAwLAogICAgICAgIGhlaWdodDogdm9pZCAwLAogICAgICAgIGV4dHJ1ZGVkSGVpZ2h0OiB2b2lkIDAsCiAgICAgICAgY29ybmVyVHlwZTogdm9pZCAwLAogICAgICAgIGdyYW51bGFyaXR5OiB2b2lkIDAsCiAgICAgICAgb2Zmc2V0QXR0cmlidXRlOiB2b2lkIDAKICAgICAgfTsKICAgICAgQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBwb3NpdGlvbnNbaV0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4LCBzY3JhdGNoRWxsaXBzb2lkNSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3Qgd2lkdGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGhlaWdodCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgZXh0cnVkZWRIZWlnaHQgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGNvcm5lclR5cGUgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBvZmZzZXRBdHRyaWJ1dGUgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczEwLnBvc2l0aW9ucyA9IHBvc2l0aW9uczsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTAud2lkdGggPSB3aWR0aDsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTAuaGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMC5leHRydWRlZEhlaWdodCA9IGV4dHJ1ZGVkSGVpZ2h0OwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMC5jb3JuZXJUeXBlID0gY29ybmVyVHlwZTsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTAuZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTAub2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICAgIHJldHVybiBuZXcgQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnkoc2NyYXRjaE9wdGlvbnMxMCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fcG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLCByZXN1bHQuX2VsbGlwc29pZCk7CiAgICAgICAgcmVzdWx0Ll93aWR0aCA9IHdpZHRoOwogICAgICAgIHJlc3VsdC5faGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgIHJlc3VsdC5fZXh0cnVkZWRIZWlnaHQgPSBleHRydWRlZEhlaWdodDsKICAgICAgICByZXN1bHQuX2Nvcm5lclR5cGUgPSBjb3JuZXJUeXBlOwogICAgICAgIHJlc3VsdC5fZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICByZXN1bHQuX29mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZSA9PT0gLTEgPyB2b2lkIDAgOiBvZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihjb3JyaWRvck91dGxpbmVHZW9tZXRyeSkgewogICAgICAgIGxldCBwb3NpdGlvbnMgPSBjb3JyaWRvck91dGxpbmVHZW9tZXRyeS5fcG9zaXRpb25zOwogICAgICAgIGNvbnN0IHdpZHRoID0gY29ycmlkb3JPdXRsaW5lR2VvbWV0cnkuX3dpZHRoOwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IGNvcnJpZG9yT3V0bGluZUdlb21ldHJ5Ll9lbGxpcHNvaWQ7CiAgICAgICAgcG9zaXRpb25zID0gc2NhbGVUb1N1cmZhY2UzKHBvc2l0aW9ucywgZWxsaXBzb2lkKTsKICAgICAgICBjb25zdCBjbGVhblBvc2l0aW9ucyA9IGFycmF5UmVtb3ZlRHVwbGljYXRlc19kZWZhdWx0KAogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24KICAgICAgICApOwogICAgICAgIGlmIChjbGVhblBvc2l0aW9ucy5sZW5ndGggPCAyIHx8IHdpZHRoIDw9IDApIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgaGVpZ2h0ID0gY29ycmlkb3JPdXRsaW5lR2VvbWV0cnkuX2hlaWdodDsKICAgICAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IGNvcnJpZG9yT3V0bGluZUdlb21ldHJ5Ll9leHRydWRlZEhlaWdodDsKICAgICAgICBjb25zdCBleHRydWRlID0gIU1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgaGVpZ2h0LAogICAgICAgICAgZXh0cnVkZWRIZWlnaHQsCiAgICAgICAgICAwLAogICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT04yCiAgICAgICAgKTsKICAgICAgICBjb25zdCBwYXJhbXMgPSB7CiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBwb3NpdGlvbnM6IGNsZWFuUG9zaXRpb25zLAogICAgICAgICAgd2lkdGgsCiAgICAgICAgICBjb3JuZXJUeXBlOiBjb3JyaWRvck91dGxpbmVHZW9tZXRyeS5fY29ybmVyVHlwZSwKICAgICAgICAgIGdyYW51bGFyaXR5OiBjb3JyaWRvck91dGxpbmVHZW9tZXRyeS5fZ3JhbnVsYXJpdHksCiAgICAgICAgICBzYXZlQXR0cmlidXRlczogZmFsc2UKICAgICAgICB9OwogICAgICAgIGxldCBhdHRyOwogICAgICAgIGlmIChleHRydWRlKSB7CiAgICAgICAgICBwYXJhbXMuaGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgICAgcGFyYW1zLmV4dHJ1ZGVkSGVpZ2h0ID0gZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgICBwYXJhbXMub2Zmc2V0QXR0cmlidXRlID0gY29ycmlkb3JPdXRsaW5lR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZTsKICAgICAgICAgIGF0dHIgPSBjb21wdXRlUG9zaXRpb25zRXh0cnVkZWQyKHBhcmFtcyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnN0IGNvbXB1dGVkUG9zaXRpb25zID0gQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlUG9zaXRpb25zKHBhcmFtcyk7CiAgICAgICAgICBhdHRyID0gY29tYmluZTMoY29tcHV0ZWRQb3NpdGlvbnMsIHBhcmFtcy5jb3JuZXJUeXBlKTsKICAgICAgICAgIGF0dHIuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMgPSBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdC5zY2FsZVRvR2VvZGV0aWNIZWlnaHQoCiAgICAgICAgICAgIGF0dHIuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMsCiAgICAgICAgICAgIGhlaWdodCwKICAgICAgICAgICAgZWxsaXBzb2lkCiAgICAgICAgICApOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChjb3JyaWRvck91dGxpbmVHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlKSkgewogICAgICAgICAgICBjb25zdCBsZW5ndGggPSBhdHRyLmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLmxlbmd0aDsKICAgICAgICAgICAgY29uc3Qgb2Zmc2V0VmFsdWUgPSBjb3JyaWRvck91dGxpbmVHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0Lk5PTkUgPyAwIDogMTsKICAgICAgICAgICAgY29uc3QgYXBwbHlPZmZzZXQgPSBuZXcgVWludDhBcnJheShsZW5ndGggLyAzKS5maWxsKG9mZnNldFZhbHVlKTsKICAgICAgICAgICAgYXR0ci5hdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICAgICAgICB2YWx1ZXM6IGFwcGx5T2Zmc2V0CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gYXR0ci5hdHRyaWJ1dGVzOwogICAgICAgIGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tVmVydGljZXMoCiAgICAgICAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcywKICAgICAgICAgIHZvaWQgMCwKICAgICAgICAgIDMKICAgICAgICApOwogICAgICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgICBhdHRyaWJ1dGVzLAogICAgICAgICAgaW5kaWNlczogYXR0ci5pbmRpY2VzLAogICAgICAgICAgcHJpbWl0aXZlVHlwZTogUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVTLAogICAgICAgICAgYm91bmRpbmdTcGhlcmUsCiAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IGNvcnJpZG9yT3V0bGluZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IENvcnJpZG9yT3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZUNvcnJpZG9yT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZUNvcnJpZG9yT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVDb3JyaWRvck91dGxpbmVHZW9tZXRyeShjb3JyaWRvck91dGxpbmVHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgY29ycmlkb3JPdXRsaW5lR2VvbWV0cnkgPSBDb3JyaWRvck91dGxpbmVHZW9tZXRyeV9kZWZhdWx0LnVucGFjaygKICAgICAgICBjb3JyaWRvck91dGxpbmVHZW9tZXRyeSwKICAgICAgICBvZmZzZXQKICAgICAgKTsKICAgIH0KICAgIGNvcnJpZG9yT3V0bGluZUdlb21ldHJ5Ll9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZSgKICAgICAgY29ycmlkb3JPdXRsaW5lR2VvbWV0cnkuX2VsbGlwc29pZAogICAgKTsKICAgIHJldHVybiBDb3JyaWRvck91dGxpbmVHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KGNvcnJpZG9yT3V0bGluZUdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZUNvcnJpZG9yT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUNvcnJpZG9yT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Db3JyaWRvck91dGxpbmVHZW9tZXRyeSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgY3JlYXRlQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZUNvcnJpZG9yT3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ3lsaW5kZXJHZW9tZXRyeUxpYnJhcnkuanMKICB2YXIgQ3lsaW5kZXJHZW9tZXRyeUxpYnJhcnksIEN5bGluZGVyR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfQ3lsaW5kZXJHZW9tZXRyeUxpYnJhcnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0N5bGluZGVyR2VvbWV0cnlMaWJyYXJ5LmpzIigpIHsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIEN5bGluZGVyR2VvbWV0cnlMaWJyYXJ5ID0ge307CiAgICAgIEN5bGluZGVyR2VvbWV0cnlMaWJyYXJ5LmNvbXB1dGVQb3NpdGlvbnMgPSBmdW5jdGlvbihsZW5ndGgsIHRvcFJhZGl1cywgYm90dG9tUmFkaXVzLCBzbGljZXMsIGZpbGwpIHsKICAgICAgICBjb25zdCB0b3BaID0gbGVuZ3RoICogMC41OwogICAgICAgIGNvbnN0IGJvdHRvbVogPSAtdG9wWjsKICAgICAgICBjb25zdCB0d29TbGljZSA9IHNsaWNlcyArIHNsaWNlczsKICAgICAgICBjb25zdCBzaXplID0gZmlsbCA/IDIgKiB0d29TbGljZSA6IHR3b1NsaWNlOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoc2l6ZSAqIDMpOwogICAgICAgIGxldCBpOwogICAgICAgIGxldCBpbmRleCA9IDA7CiAgICAgICAgbGV0IHRiSW5kZXggPSAwOwogICAgICAgIGNvbnN0IGJvdHRvbU9mZnNldCA9IGZpbGwgPyB0d29TbGljZSAqIDMgOiAwOwogICAgICAgIGNvbnN0IHRvcE9mZnNldCA9IGZpbGwgPyAodHdvU2xpY2UgKyBzbGljZXMpICogMyA6IHNsaWNlcyAqIDM7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHNsaWNlczsgaSsrKSB7CiAgICAgICAgICBjb25zdCBhbmdsZSA9IGkgLyBzbGljZXMgKiBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgICAgY29uc3QgeCA9IE1hdGguY29zKGFuZ2xlKTsKICAgICAgICAgIGNvbnN0IHkgPSBNYXRoLnNpbihhbmdsZSk7CiAgICAgICAgICBjb25zdCBib3R0b21YID0geCAqIGJvdHRvbVJhZGl1czsKICAgICAgICAgIGNvbnN0IGJvdHRvbVkgPSB5ICogYm90dG9tUmFkaXVzOwogICAgICAgICAgY29uc3QgdG9wWCA9IHggKiB0b3BSYWRpdXM7CiAgICAgICAgICBjb25zdCB0b3BZID0geSAqIHRvcFJhZGl1czsKICAgICAgICAgIHBvc2l0aW9uc1t0YkluZGV4ICsgYm90dG9tT2Zmc2V0XSA9IGJvdHRvbVg7CiAgICAgICAgICBwb3NpdGlvbnNbdGJJbmRleCArIGJvdHRvbU9mZnNldCArIDFdID0gYm90dG9tWTsKICAgICAgICAgIHBvc2l0aW9uc1t0YkluZGV4ICsgYm90dG9tT2Zmc2V0ICsgMl0gPSBib3R0b21aOwogICAgICAgICAgcG9zaXRpb25zW3RiSW5kZXggKyB0b3BPZmZzZXRdID0gdG9wWDsKICAgICAgICAgIHBvc2l0aW9uc1t0YkluZGV4ICsgdG9wT2Zmc2V0ICsgMV0gPSB0b3BZOwogICAgICAgICAgcG9zaXRpb25zW3RiSW5kZXggKyB0b3BPZmZzZXQgKyAyXSA9IHRvcFo7CiAgICAgICAgICB0YkluZGV4ICs9IDM7CiAgICAgICAgICBpZiAoZmlsbCkgewogICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSBib3R0b21YOwogICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSBib3R0b21ZOwogICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSBib3R0b21aOwogICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSB0b3BYOwogICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSB0b3BZOwogICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSB0b3BaOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcG9zaXRpb25zOwogICAgICB9OwogICAgICBDeWxpbmRlckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0ID0gQ3lsaW5kZXJHZW9tZXRyeUxpYnJhcnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9DeWxpbmRlckdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gQ3lsaW5kZXJHZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IGxlbmd0aCA9IG9wdGlvbnMubGVuZ3RoOwogICAgY29uc3QgdG9wUmFkaXVzID0gb3B0aW9ucy50b3BSYWRpdXM7CiAgICBjb25zdCBib3R0b21SYWRpdXMgPSBvcHRpb25zLmJvdHRvbVJhZGl1czsKICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMudmVydGV4Rm9ybWF0LCBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5ERUZBVUxUKTsKICAgIGNvbnN0IHNsaWNlcyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuc2xpY2VzLCAxMjgpOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQobGVuZ3RoKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy5sZW5ndGggbXVzdCBiZSBkZWZpbmVkLiIpOwogICAgfQogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodG9wUmFkaXVzKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy50b3BSYWRpdXMgbXVzdCBiZSBkZWZpbmVkLiIpOwogICAgfQogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYm90dG9tUmFkaXVzKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy5ib3R0b21SYWRpdXMgbXVzdCBiZSBkZWZpbmVkLiIpOwogICAgfQogICAgaWYgKHNsaWNlcyA8IDMpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIm9wdGlvbnMuc2xpY2VzIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDMuIgogICAgICApOwogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSkgJiYgb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuVE9QKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZS5UT1AgaXMgbm90IGEgc3VwcG9ydGVkIG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlIGZvciB0aGlzIGdlb21ldHJ5LiIKICAgICAgKTsKICAgIH0KICAgIHRoaXMuX2xlbmd0aCA9IGxlbmd0aDsKICAgIHRoaXMuX3RvcFJhZGl1cyA9IHRvcFJhZGl1czsKICAgIHRoaXMuX2JvdHRvbVJhZGl1cyA9IGJvdHRvbVJhZGl1czsKICAgIHRoaXMuX3ZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LmNsb25lKHZlcnRleEZvcm1hdCk7CiAgICB0aGlzLl9zbGljZXMgPSBzbGljZXM7CiAgICB0aGlzLl9vZmZzZXRBdHRyaWJ1dGUgPSBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlQ3lsaW5kZXJHZW9tZXRyeSI7CiAgfQogIHZhciByYWRpdXNTY3JhdGNoLCBub3JtYWxTY3JhdGNoMywgYml0YW5nZW50U2NyYXRjaCwgdGFuZ2VudFNjcmF0Y2gsIHBvc2l0aW9uU2NyYXRjaCwgc2NyYXRjaFZlcnRleEZvcm1hdDUsIHNjcmF0Y2hPcHRpb25zMTEsIHVuaXRDeWxpbmRlckdlb21ldHJ5LCBDeWxpbmRlckdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfQ3lsaW5kZXJHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ3lsaW5kZXJHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfQ3lsaW5kZXJHZW9tZXRyeUxpYnJhcnkoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgaW5pdF9WZXJ0ZXhGb3JtYXQoKTsKICAgICAgcmFkaXVzU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgbm9ybWFsU2NyYXRjaDMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGJpdGFuZ2VudFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHRhbmdlbnRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBwb3NpdGlvblNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEN5bGluZGVyR2VvbWV0cnkucGFja2VkTGVuZ3RoID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoICsgNTsKICAgICAgQ3lsaW5kZXJHZW9tZXRyeS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodmFsdWUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgidmFsdWUgaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYXJyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXJyYXkgaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2sodmFsdWUuX3ZlcnRleEZvcm1hdCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fbGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fdG9wUmFkaXVzOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fYm90dG9tUmFkaXVzOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fc2xpY2VzOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQodmFsdWUuX29mZnNldEF0dHJpYnV0ZSwgLTEpOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdDUgPSBuZXcgVmVydGV4Rm9ybWF0X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE9wdGlvbnMxMSA9IHsKICAgICAgICB2ZXJ0ZXhGb3JtYXQ6IHNjcmF0Y2hWZXJ0ZXhGb3JtYXQ1LAogICAgICAgIGxlbmd0aDogdm9pZCAwLAogICAgICAgIHRvcFJhZGl1czogdm9pZCAwLAogICAgICAgIGJvdHRvbVJhZGl1czogdm9pZCAwLAogICAgICAgIHNsaWNlczogdm9pZCAwLAogICAgICAgIG9mZnNldEF0dHJpYnV0ZTogdm9pZCAwCiAgICAgIH07CiAgICAgIEN5bGluZGVyR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBzY3JhdGNoVmVydGV4Rm9ybWF0NQogICAgICAgICk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCB0b3BSYWRpdXMgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGJvdHRvbVJhZGl1cyA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgc2xpY2VzID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBvZmZzZXRBdHRyaWJ1dGUgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczExLmxlbmd0aCA9IGxlbmd0aDsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTEudG9wUmFkaXVzID0gdG9wUmFkaXVzOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMS5ib3R0b21SYWRpdXMgPSBib3R0b21SYWRpdXM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczExLnNsaWNlcyA9IHNsaWNlczsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTEub2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICAgIHJldHVybiBuZXcgQ3lsaW5kZXJHZW9tZXRyeShzY3JhdGNoT3B0aW9uczExKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSh2ZXJ0ZXhGb3JtYXQsIHJlc3VsdC5fdmVydGV4Rm9ybWF0KTsKICAgICAgICByZXN1bHQuX2xlbmd0aCA9IGxlbmd0aDsKICAgICAgICByZXN1bHQuX3RvcFJhZGl1cyA9IHRvcFJhZGl1czsKICAgICAgICByZXN1bHQuX2JvdHRvbVJhZGl1cyA9IGJvdHRvbVJhZGl1czsKICAgICAgICByZXN1bHQuX3NsaWNlcyA9IHNsaWNlczsKICAgICAgICByZXN1bHQuX29mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZSA9PT0gLTEgPyB2b2lkIDAgOiBvZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ3lsaW5kZXJHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKGN5bGluZGVyR2VvbWV0cnkpIHsKICAgICAgICBsZXQgbGVuZ3RoID0gY3lsaW5kZXJHZW9tZXRyeS5fbGVuZ3RoOwogICAgICAgIGNvbnN0IHRvcFJhZGl1cyA9IGN5bGluZGVyR2VvbWV0cnkuX3RvcFJhZGl1czsKICAgICAgICBjb25zdCBib3R0b21SYWRpdXMgPSBjeWxpbmRlckdlb21ldHJ5Ll9ib3R0b21SYWRpdXM7CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gY3lsaW5kZXJHZW9tZXRyeS5fdmVydGV4Rm9ybWF0OwogICAgICAgIGNvbnN0IHNsaWNlcyA9IGN5bGluZGVyR2VvbWV0cnkuX3NsaWNlczsKICAgICAgICBpZiAobGVuZ3RoIDw9IDAgfHwgdG9wUmFkaXVzIDwgMCB8fCBib3R0b21SYWRpdXMgPCAwIHx8IHRvcFJhZGl1cyA9PT0gMCAmJiBib3R0b21SYWRpdXMgPT09IDApIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgdHdvU2xpY2VzID0gc2xpY2VzICsgc2xpY2VzOwogICAgICAgIGNvbnN0IHRocmVlU2xpY2VzID0gc2xpY2VzICsgdHdvU2xpY2VzOwogICAgICAgIGNvbnN0IG51bVZlcnRpY2VzID0gdHdvU2xpY2VzICsgdHdvU2xpY2VzOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IEN5bGluZGVyR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZVBvc2l0aW9ucygKICAgICAgICAgIGxlbmd0aCwKICAgICAgICAgIHRvcFJhZGl1cywKICAgICAgICAgIGJvdHRvbVJhZGl1cywKICAgICAgICAgIHNsaWNlcywKICAgICAgICAgIHRydWUKICAgICAgICApOwogICAgICAgIGNvbnN0IHN0ID0gdmVydGV4Rm9ybWF0LnN0ID8gbmV3IEZsb2F0MzJBcnJheShudW1WZXJ0aWNlcyAqIDIpIDogdm9pZCAwOwogICAgICAgIGNvbnN0IG5vcm1hbHMgPSB2ZXJ0ZXhGb3JtYXQubm9ybWFsID8gbmV3IEZsb2F0MzJBcnJheShudW1WZXJ0aWNlcyAqIDMpIDogdm9pZCAwOwogICAgICAgIGNvbnN0IHRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LnRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KG51bVZlcnRpY2VzICogMykgOiB2b2lkIDA7CiAgICAgICAgY29uc3QgYml0YW5nZW50cyA9IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KG51bVZlcnRpY2VzICogMykgOiB2b2lkIDA7CiAgICAgICAgbGV0IGk7CiAgICAgICAgY29uc3QgY29tcHV0ZU5vcm1hbCA9IHZlcnRleEZvcm1hdC5ub3JtYWwgfHwgdmVydGV4Rm9ybWF0LnRhbmdlbnQgfHwgdmVydGV4Rm9ybWF0LmJpdGFuZ2VudDsKICAgICAgICBpZiAoY29tcHV0ZU5vcm1hbCkgewogICAgICAgICAgY29uc3QgY29tcHV0ZVRhbmdlbnQgPSB2ZXJ0ZXhGb3JtYXQudGFuZ2VudCB8fCB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50OwogICAgICAgICAgbGV0IG5vcm1hbEluZGV4ID0gMDsKICAgICAgICAgIGxldCB0YW5nZW50SW5kZXggPSAwOwogICAgICAgICAgbGV0IGJpdGFuZ2VudEluZGV4ID0gMDsKICAgICAgICAgIGNvbnN0IHRoZXRhID0gTWF0aC5hdGFuMihib3R0b21SYWRpdXMgLSB0b3BSYWRpdXMsIGxlbmd0aCk7CiAgICAgICAgICBjb25zdCBub3JtYWwyID0gbm9ybWFsU2NyYXRjaDM7CiAgICAgICAgICBub3JtYWwyLnogPSBNYXRoLnNpbih0aGV0YSk7CiAgICAgICAgICBjb25zdCBub3JtYWxTY2FsZTIgPSBNYXRoLmNvcyh0aGV0YSk7CiAgICAgICAgICBsZXQgdGFuZ2VudCA9IHRhbmdlbnRTY3JhdGNoOwogICAgICAgICAgbGV0IGJpdGFuZ2VudCA9IGJpdGFuZ2VudFNjcmF0Y2g7CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2xpY2VzOyBpKyspIHsKICAgICAgICAgICAgY29uc3QgYW5nbGUgPSBpIC8gc2xpY2VzICogTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICAgICAgY29uc3QgeCA9IG5vcm1hbFNjYWxlMiAqIE1hdGguY29zKGFuZ2xlKTsKICAgICAgICAgICAgY29uc3QgeSA9IG5vcm1hbFNjYWxlMiAqIE1hdGguc2luKGFuZ2xlKTsKICAgICAgICAgICAgaWYgKGNvbXB1dGVOb3JtYWwpIHsKICAgICAgICAgICAgICBub3JtYWwyLnggPSB4OwogICAgICAgICAgICAgIG5vcm1hbDIueSA9IHk7CiAgICAgICAgICAgICAgaWYgKGNvbXB1dGVUYW5nZW50KSB7CiAgICAgICAgICAgICAgICB0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1osIG5vcm1hbDIsIHRhbmdlbnQpLAogICAgICAgICAgICAgICAgICB0YW5nZW50CiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICAgICAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IG5vcm1hbDIueDsKICAgICAgICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSBub3JtYWwyLnk7CiAgICAgICAgICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gbm9ybWFsMi56OwogICAgICAgICAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IG5vcm1hbDIueDsKICAgICAgICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSBub3JtYWwyLnk7CiAgICAgICAgICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gbm9ybWFsMi56OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQueDsKICAgICAgICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQueTsKICAgICAgICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQuejsKICAgICAgICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQueDsKICAgICAgICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQueTsKICAgICAgICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQuejsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhub3JtYWwyLCB0YW5nZW50LCBiaXRhbmdlbnQpLAogICAgICAgICAgICAgICAgICBiaXRhbmdlbnQKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lng7CiAgICAgICAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lnk7CiAgICAgICAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lno7CiAgICAgICAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lng7CiAgICAgICAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lnk7CiAgICAgICAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lno7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2xpY2VzOyBpKyspIHsKICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gMDsKICAgICAgICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gMDsKICAgICAgICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gLTE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gMTsKICAgICAgICAgICAgICB0YW5nZW50c1t0YW5nZW50SW5kZXgrK10gPSAwOwogICAgICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gMDsKICAgICAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gLTE7CiAgICAgICAgICAgICAgYml0YW5nZW50c1tiaXRhbmdlbnRJbmRleCsrXSA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzbGljZXM7IGkrKykgewogICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSAwOwogICAgICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSAwOwogICAgICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IDE7CiAgICAgICAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gMDsKICAgICAgICAgICAgICB0YW5nZW50c1t0YW5nZW50SW5kZXgrK10gPSAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgICAgICAgYml0YW5nZW50c1tiaXRhbmdlbnRJbmRleCsrXSA9IDA7CiAgICAgICAgICAgICAgYml0YW5nZW50c1tiaXRhbmdlbnRJbmRleCsrXSA9IDE7CiAgICAgICAgICAgICAgYml0YW5nZW50c1tiaXRhbmdlbnRJbmRleCsrXSA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgbnVtSW5kaWNlcyA9IDEyICogc2xpY2VzIC0gMTI7CiAgICAgICAgY29uc3QgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KG51bVZlcnRpY2VzLCBudW1JbmRpY2VzKTsKICAgICAgICBsZXQgaW5kZXggPSAwOwogICAgICAgIGxldCBqID0gMDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2xpY2VzIC0gMTsgaSsrKSB7CiAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gajsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBqICsgMjsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBqICsgMzsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBqOwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGogKyAzOwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGogKyAxOwogICAgICAgICAgaiArPSAyOwogICAgICAgIH0KICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gdHdvU2xpY2VzIC0gMjsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gMDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gMTsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gdHdvU2xpY2VzIC0gMjsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gMTsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gdHdvU2xpY2VzIC0gMTsKICAgICAgICBmb3IgKGkgPSAxOyBpIDwgc2xpY2VzIC0gMTsgaSsrKSB7CiAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gdHdvU2xpY2VzICsgaSArIDE7CiAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gdHdvU2xpY2VzICsgaTsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSB0d29TbGljZXM7CiAgICAgICAgfQogICAgICAgIGZvciAoaSA9IDE7IGkgPCBzbGljZXMgLSAxOyBpKyspIHsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSB0aHJlZVNsaWNlczsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSB0aHJlZVNsaWNlcyArIGk7CiAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gdGhyZWVTbGljZXMgKyBpICsgMTsKICAgICAgICB9CiAgICAgICAgbGV0IHRleHR1cmVDb29yZEluZGV4ID0gMDsKICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgICAgICBjb25zdCByYWQgPSBNYXRoLm1heCh0b3BSYWRpdXMsIGJvdHRvbVJhZGl1cyk7CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtVmVydGljZXM7IGkrKykgewogICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCBpICogMywgcG9zaXRpb25TY3JhdGNoKTsKICAgICAgICAgICAgc3RbdGV4dHVyZUNvb3JkSW5kZXgrK10gPSAocG9zaXRpb24ueCArIHJhZCkgLyAoMiAqIHJhZCk7CiAgICAgICAgICAgIHN0W3RleHR1cmVDb29yZEluZGV4KytdID0gKHBvc2l0aW9uLnkgKyByYWQpIC8gKDIgKiByYWQpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KCk7CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5wb3NpdGlvbikgewogICAgICAgICAgYXR0cmlidXRlcy5wb3NpdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICB2YWx1ZXM6IHBvc2l0aW9ucwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgICAgICBhdHRyaWJ1dGVzLm5vcm1hbCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICAgIHZhbHVlczogbm9ybWFscwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICAgICAgYXR0cmlidXRlcy50YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgdmFsdWVzOiB0YW5nZW50cwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgICBhdHRyaWJ1dGVzLmJpdGFuZ2VudCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICAgIHZhbHVlczogYml0YW5nZW50cwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICAgIGF0dHJpYnV0ZXMuc3QgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgICAgICB2YWx1ZXM6IHN0CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmFkaXVzU2NyYXRjaC54ID0gbGVuZ3RoICogMC41OwogICAgICAgIHJhZGl1c1NjcmF0Y2gueSA9IE1hdGgubWF4KGJvdHRvbVJhZGl1cywgdG9wUmFkaXVzKTsKICAgICAgICBjb25zdCBib3VuZGluZ1NwaGVyZSA9IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sCiAgICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQubWFnbml0dWRlKHJhZGl1c1NjcmF0Y2gpCiAgICAgICAgKTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGN5bGluZGVyR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSkpIHsKICAgICAgICAgIGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgICBjb25zdCBvZmZzZXRWYWx1ZSA9IGN5bGluZGVyR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5OT05FID8gMCA6IDE7CiAgICAgICAgICBjb25zdCBhcHBseU9mZnNldCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCAvIDMpLmZpbGwob2Zmc2V0VmFsdWUpOwogICAgICAgICAgYXR0cmlidXRlcy5hcHBseU9mZnNldCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICAgICAgdmFsdWVzOiBhcHBseU9mZnNldAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgICBhdHRyaWJ1dGVzLAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5UUklBTkdMRVMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZSwKICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZTogY3lsaW5kZXJHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIEN5bGluZGVyR2VvbWV0cnkuZ2V0VW5pdEN5bGluZGVyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodW5pdEN5bGluZGVyR2VvbWV0cnkpKSB7CiAgICAgICAgICB1bml0Q3lsaW5kZXJHZW9tZXRyeSA9IEN5bGluZGVyR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkoCiAgICAgICAgICAgIG5ldyBDeWxpbmRlckdlb21ldHJ5KHsKICAgICAgICAgICAgICB0b3BSYWRpdXM6IDEsCiAgICAgICAgICAgICAgYm90dG9tUmFkaXVzOiAxLAogICAgICAgICAgICAgIGxlbmd0aDogMSwKICAgICAgICAgICAgICB2ZXJ0ZXhGb3JtYXQ6IFZlcnRleEZvcm1hdF9kZWZhdWx0LlBPU0lUSU9OX09OTFkKICAgICAgICAgICAgfSkKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB1bml0Q3lsaW5kZXJHZW9tZXRyeTsKICAgICAgfTsKICAgICAgQ3lsaW5kZXJHZW9tZXRyeV9kZWZhdWx0ID0gQ3lsaW5kZXJHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUN5bGluZGVyR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlQ3lsaW5kZXJHZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlQ3lsaW5kZXJHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVDeWxpbmRlckdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVDeWxpbmRlckdlb21ldHJ5KGN5bGluZGVyR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIGN5bGluZGVyR2VvbWV0cnkgPSBDeWxpbmRlckdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKGN5bGluZGVyR2VvbWV0cnksIG9mZnNldCk7CiAgICB9CiAgICByZXR1cm4gQ3lsaW5kZXJHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KGN5bGluZGVyR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlQ3lsaW5kZXJHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZUN5bGluZGVyR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUN5bGluZGVyR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0N5bGluZGVyR2VvbWV0cnkoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGNyZWF0ZUN5bGluZGVyR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZUN5bGluZGVyR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9DeWxpbmRlck91dGxpbmVHZW9tZXRyeS5qcwogIGZ1bmN0aW9uIEN5bGluZGVyT3V0bGluZUdlb21ldHJ5KG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgY29uc3QgbGVuZ3RoID0gb3B0aW9ucy5sZW5ndGg7CiAgICBjb25zdCB0b3BSYWRpdXMgPSBvcHRpb25zLnRvcFJhZGl1czsKICAgIGNvbnN0IGJvdHRvbVJhZGl1cyA9IG9wdGlvbnMuYm90dG9tUmFkaXVzOwogICAgY29uc3Qgc2xpY2VzID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5zbGljZXMsIDEyOCk7CiAgICBjb25zdCBudW1iZXJPZlZlcnRpY2FsTGluZXMgPSBNYXRoLm1heCgKICAgICAgZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5udW1iZXJPZlZlcnRpY2FsTGluZXMsIDE2KSwKICAgICAgMAogICAgKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigib3B0aW9ucy5wb3NpdGlvbnMiLCBsZW5ndGgpOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJvcHRpb25zLnRvcFJhZGl1cyIsIHRvcFJhZGl1cyk7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoIm9wdGlvbnMuYm90dG9tUmFkaXVzIiwgYm90dG9tUmFkaXVzKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJvcHRpb25zLnNsaWNlcyIsIHNsaWNlcywgMyk7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlKSAmJiBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5UT1ApIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIkdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlLlRPUCBpcyBub3QgYSBzdXBwb3J0ZWQgb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUgZm9yIHRoaXMgZ2VvbWV0cnkuIgogICAgICApOwogICAgfQogICAgdGhpcy5fbGVuZ3RoID0gbGVuZ3RoOwogICAgdGhpcy5fdG9wUmFkaXVzID0gdG9wUmFkaXVzOwogICAgdGhpcy5fYm90dG9tUmFkaXVzID0gYm90dG9tUmFkaXVzOwogICAgdGhpcy5fc2xpY2VzID0gc2xpY2VzOwogICAgdGhpcy5fbnVtYmVyT2ZWZXJ0aWNhbExpbmVzID0gbnVtYmVyT2ZWZXJ0aWNhbExpbmVzOwogICAgdGhpcy5fb2Zmc2V0QXR0cmlidXRlID0gb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGU7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZUN5bGluZGVyT3V0bGluZUdlb21ldHJ5IjsKICB9CiAgdmFyIHJhZGl1c1NjcmF0Y2gyLCBzY3JhdGNoT3B0aW9uczEyLCBDeWxpbmRlck91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X0N5bGluZGVyT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9DeWxpbmRlck91dGxpbmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9DeWxpbmRlckdlb21ldHJ5TGlicmFyeSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9HZW9tZXRyeU9mZnNldEF0dHJpYnV0ZSgpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIHJhZGl1c1NjcmF0Y2gyID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBDeWxpbmRlck91dGxpbmVHZW9tZXRyeS5wYWNrZWRMZW5ndGggPSA2OwogICAgICBDeWxpbmRlck91dGxpbmVHZW9tZXRyeS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2xlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3RvcFJhZGl1czsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2JvdHRvbVJhZGl1czsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3NsaWNlczsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX251bWJlck9mVmVydGljYWxMaW5lczsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHZhbHVlLl9vZmZzZXRBdHRyaWJ1dGUsIC0xKTsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hPcHRpb25zMTIgPSB7CiAgICAgICAgbGVuZ3RoOiB2b2lkIDAsCiAgICAgICAgdG9wUmFkaXVzOiB2b2lkIDAsCiAgICAgICAgYm90dG9tUmFkaXVzOiB2b2lkIDAsCiAgICAgICAgc2xpY2VzOiB2b2lkIDAsCiAgICAgICAgbnVtYmVyT2ZWZXJ0aWNhbExpbmVzOiB2b2lkIDAsCiAgICAgICAgb2Zmc2V0QXR0cmlidXRlOiB2b2lkIDAKICAgICAgfTsKICAgICAgQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgdG9wUmFkaXVzID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBib3R0b21SYWRpdXMgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHNsaWNlcyA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgbnVtYmVyT2ZWZXJ0aWNhbExpbmVzID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBvZmZzZXRBdHRyaWJ1dGUgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczEyLmxlbmd0aCA9IGxlbmd0aDsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTIudG9wUmFkaXVzID0gdG9wUmFkaXVzOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMi5ib3R0b21SYWRpdXMgPSBib3R0b21SYWRpdXM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczEyLnNsaWNlcyA9IHNsaWNlczsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTIubnVtYmVyT2ZWZXJ0aWNhbExpbmVzID0gbnVtYmVyT2ZWZXJ0aWNhbExpbmVzOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMi5vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgICAgcmV0dXJuIG5ldyBDeWxpbmRlck91dGxpbmVHZW9tZXRyeShzY3JhdGNoT3B0aW9uczEyKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Ll9sZW5ndGggPSBsZW5ndGg7CiAgICAgICAgcmVzdWx0Ll90b3BSYWRpdXMgPSB0b3BSYWRpdXM7CiAgICAgICAgcmVzdWx0Ll9ib3R0b21SYWRpdXMgPSBib3R0b21SYWRpdXM7CiAgICAgICAgcmVzdWx0Ll9zbGljZXMgPSBzbGljZXM7CiAgICAgICAgcmVzdWx0Ll9udW1iZXJPZlZlcnRpY2FsTGluZXMgPSBudW1iZXJPZlZlcnRpY2FsTGluZXM7CiAgICAgICAgcmVzdWx0Ll9vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEN5bGluZGVyT3V0bGluZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24oY3lsaW5kZXJHZW9tZXRyeSkgewogICAgICAgIGxldCBsZW5ndGggPSBjeWxpbmRlckdlb21ldHJ5Ll9sZW5ndGg7CiAgICAgICAgY29uc3QgdG9wUmFkaXVzID0gY3lsaW5kZXJHZW9tZXRyeS5fdG9wUmFkaXVzOwogICAgICAgIGNvbnN0IGJvdHRvbVJhZGl1cyA9IGN5bGluZGVyR2VvbWV0cnkuX2JvdHRvbVJhZGl1czsKICAgICAgICBjb25zdCBzbGljZXMgPSBjeWxpbmRlckdlb21ldHJ5Ll9zbGljZXM7CiAgICAgICAgY29uc3QgbnVtYmVyT2ZWZXJ0aWNhbExpbmVzID0gY3lsaW5kZXJHZW9tZXRyeS5fbnVtYmVyT2ZWZXJ0aWNhbExpbmVzOwogICAgICAgIGlmIChsZW5ndGggPD0gMCB8fCB0b3BSYWRpdXMgPCAwIHx8IGJvdHRvbVJhZGl1cyA8IDAgfHwgdG9wUmFkaXVzID09PSAwICYmIGJvdHRvbVJhZGl1cyA9PT0gMCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBudW1WZXJ0aWNlcyA9IHNsaWNlcyAqIDI7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gQ3lsaW5kZXJHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlUG9zaXRpb25zKAogICAgICAgICAgbGVuZ3RoLAogICAgICAgICAgdG9wUmFkaXVzLAogICAgICAgICAgYm90dG9tUmFkaXVzLAogICAgICAgICAgc2xpY2VzLAogICAgICAgICAgZmFsc2UKICAgICAgICApOwogICAgICAgIGxldCBudW1JbmRpY2VzID0gc2xpY2VzICogMjsKICAgICAgICBsZXQgbnVtU2lkZTsKICAgICAgICBpZiAobnVtYmVyT2ZWZXJ0aWNhbExpbmVzID4gMCkgewogICAgICAgICAgY29uc3QgbnVtU2lkZUxpbmVzID0gTWF0aC5taW4obnVtYmVyT2ZWZXJ0aWNhbExpbmVzLCBzbGljZXMpOwogICAgICAgICAgbnVtU2lkZSA9IE1hdGgucm91bmQoc2xpY2VzIC8gbnVtU2lkZUxpbmVzKTsKICAgICAgICAgIG51bUluZGljZXMgKz0gbnVtU2lkZUxpbmVzOwogICAgICAgIH0KICAgICAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkobnVtVmVydGljZXMsIG51bUluZGljZXMgKiAyKTsKICAgICAgICBsZXQgaW5kZXggPSAwOwogICAgICAgIGxldCBpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBzbGljZXMgLSAxOyBpKyspIHsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpOwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGkgKyAxOwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGkgKyBzbGljZXM7CiAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaSArIDEgKyBzbGljZXM7CiAgICAgICAgfQogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBzbGljZXMgLSAxOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSAwOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBzbGljZXMgKyBzbGljZXMgLSAxOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBzbGljZXM7CiAgICAgICAgaWYgKG51bWJlck9mVmVydGljYWxMaW5lcyA+IDApIHsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzbGljZXM7IGkgKz0gbnVtU2lkZSkgewogICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaTsKICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGkgKyBzbGljZXM7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoKTsKICAgICAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgIHZhbHVlczogcG9zaXRpb25zCiAgICAgICAgfSk7CiAgICAgICAgcmFkaXVzU2NyYXRjaDIueCA9IGxlbmd0aCAqIDAuNTsKICAgICAgICByYWRpdXNTY3JhdGNoMi55ID0gTWF0aC5tYXgoYm90dG9tUmFkaXVzLCB0b3BSYWRpdXMpOwogICAgICAgIGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywKICAgICAgICAgIENhcnRlc2lhbjJfZGVmYXVsdC5tYWduaXR1ZGUocmFkaXVzU2NyYXRjaDIpCiAgICAgICAgKTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGN5bGluZGVyR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSkpIHsKICAgICAgICAgIGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgICBjb25zdCBvZmZzZXRWYWx1ZSA9IGN5bGluZGVyR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5OT05FID8gMCA6IDE7CiAgICAgICAgICBjb25zdCBhcHBseU9mZnNldCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCAvIDMpLmZpbGwob2Zmc2V0VmFsdWUpOwogICAgICAgICAgYXR0cmlidXRlcy5hcHBseU9mZnNldCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICAgICAgdmFsdWVzOiBhcHBseU9mZnNldAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgICBhdHRyaWJ1dGVzLAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5MSU5FUywKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlLAogICAgICAgICAgb2Zmc2V0QXR0cmlidXRlOiBjeWxpbmRlckdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IEN5bGluZGVyT3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZUN5bGluZGVyT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZUN5bGluZGVyT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVDeWxpbmRlck91dGxpbmVHZW9tZXRyeShjeWxpbmRlckdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICBjeWxpbmRlckdlb21ldHJ5ID0gQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soY3lsaW5kZXJHZW9tZXRyeSwgb2Zmc2V0KTsKICAgIH0KICAgIHJldHVybiBDeWxpbmRlck91dGxpbmVHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KGN5bGluZGVyR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVDeWxpbmRlck91dGxpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0N5bGluZGVyT3V0bGluZUdlb21ldHJ5KCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBjcmVhdGVDeWxpbmRlck91dGxpbmVHZW9tZXRyeV9kZWZhdWx0ID0gY3JlYXRlQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVFbGxpcHNlR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlRWxsaXBzZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVFbGxpcHNlR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlRWxsaXBzZUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVFbGxpcHNlR2VvbWV0cnkoZWxsaXBzZUdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICBlbGxpcHNlR2VvbWV0cnkgPSBFbGxpcHNlR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soZWxsaXBzZUdlb21ldHJ5LCBvZmZzZXQpOwogICAgfQogICAgZWxsaXBzZUdlb21ldHJ5Ll9jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoZWxsaXBzZUdlb21ldHJ5Ll9jZW50ZXIpOwogICAgZWxsaXBzZUdlb21ldHJ5Ll9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShlbGxpcHNlR2VvbWV0cnkuX2VsbGlwc29pZCk7CiAgICByZXR1cm4gRWxsaXBzZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkoZWxsaXBzZUdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZUVsbGlwc2VHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZUVsbGlwc2VHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlRWxsaXBzZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc2VHZW9tZXRyeSgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBjcmVhdGVFbGxpcHNlR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZUVsbGlwc2VHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUVsbGlwc2VPdXRsaW5lR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlRWxsaXBzZU91dGxpbmVHZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlRWxsaXBzZU91dGxpbmVHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVFbGxpcHNlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVFbGxpcHNlT3V0bGluZUdlb21ldHJ5KGVsbGlwc2VHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgZWxsaXBzZUdlb21ldHJ5ID0gRWxsaXBzZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0LnVucGFjayhlbGxpcHNlR2VvbWV0cnksIG9mZnNldCk7CiAgICB9CiAgICBlbGxpcHNlR2VvbWV0cnkuX2NlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShlbGxpcHNlR2VvbWV0cnkuX2NlbnRlcik7CiAgICBlbGxpcHNlR2VvbWV0cnkuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKGVsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkKTsKICAgIHJldHVybiBFbGxpcHNlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkoZWxsaXBzZUdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZUVsbGlwc2VPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVFbGxpcHNlT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVFbGxpcHNlT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc2VPdXRsaW5lR2VvbWV0cnkoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgY3JlYXRlRWxsaXBzZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0ID0gY3JlYXRlRWxsaXBzZU91dGxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0VsbGlwc29pZEdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gRWxsaXBzb2lkR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCByYWRpaSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMucmFkaWksIGRlZmF1bHRSYWRpaSk7CiAgICBjb25zdCBpbm5lclJhZGlpID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5pbm5lclJhZGlpLCByYWRpaSk7CiAgICBjb25zdCBtaW5pbXVtQ2xvY2sgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLm1pbmltdW1DbG9jaywgMCk7CiAgICBjb25zdCBtYXhpbXVtQ2xvY2sgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLm1heGltdW1DbG9jaywgTWF0aF9kZWZhdWx0LlRXT19QSSk7CiAgICBjb25zdCBtaW5pbXVtQ29uZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMubWluaW11bUNvbmUsIDApOwogICAgY29uc3QgbWF4aW11bUNvbmUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLm1heGltdW1Db25lLCBNYXRoX2RlZmF1bHQuUEkpOwogICAgY29uc3Qgc3RhY2tQYXJ0aXRpb25zID0gTWF0aC5yb3VuZChkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnN0YWNrUGFydGl0aW9ucywgNjQpKTsKICAgIGNvbnN0IHNsaWNlUGFydGl0aW9ucyA9IE1hdGgucm91bmQoZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5zbGljZVBhcnRpdGlvbnMsIDY0KSk7CiAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnZlcnRleEZvcm1hdCwgVmVydGV4Rm9ybWF0X2RlZmF1bHQuREVGQVVMVCk7CiAgICBpZiAoc2xpY2VQYXJ0aXRpb25zIDwgMykgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAib3B0aW9ucy5zbGljZVBhcnRpdGlvbnMgY2Fubm90IGJlIGxlc3MgdGhhbiB0aHJlZS4iCiAgICAgICk7CiAgICB9CiAgICBpZiAoc3RhY2tQYXJ0aXRpb25zIDwgMykgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAib3B0aW9ucy5zdGFja1BhcnRpdGlvbnMgY2Fubm90IGJlIGxlc3MgdGhhbiB0aHJlZS4iCiAgICAgICk7CiAgICB9CiAgICB0aGlzLl9yYWRpaSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShyYWRpaSk7CiAgICB0aGlzLl9pbm5lclJhZGlpID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGlubmVyUmFkaWkpOwogICAgdGhpcy5fbWluaW11bUNsb2NrID0gbWluaW11bUNsb2NrOwogICAgdGhpcy5fbWF4aW11bUNsb2NrID0gbWF4aW11bUNsb2NrOwogICAgdGhpcy5fbWluaW11bUNvbmUgPSBtaW5pbXVtQ29uZTsKICAgIHRoaXMuX21heGltdW1Db25lID0gbWF4aW11bUNvbmU7CiAgICB0aGlzLl9zdGFja1BhcnRpdGlvbnMgPSBzdGFja1BhcnRpdGlvbnM7CiAgICB0aGlzLl9zbGljZVBhcnRpdGlvbnMgPSBzbGljZVBhcnRpdGlvbnM7CiAgICB0aGlzLl92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSh2ZXJ0ZXhGb3JtYXQpOwogICAgdGhpcy5fb2Zmc2V0QXR0cmlidXRlID0gb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGU7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZUVsbGlwc29pZEdlb21ldHJ5IjsKICB9CiAgdmFyIHNjcmF0Y2hQb3NpdGlvbjIsIHNjcmF0Y2hOb3JtYWw1LCBzY3JhdGNoVGFuZ2VudDMsIHNjcmF0Y2hCaXRhbmdlbnQzLCBzY3JhdGNoTm9ybWFsU1QsIGRlZmF1bHRSYWRpaSwgY29zLCBzaW4sIHNjcmF0Y2hSYWRpaSwgc2NyYXRjaElubmVyUmFkaWksIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQ2LCBzY3JhdGNoT3B0aW9uczEzLCB1bml0RWxsaXBzb2lkR2VvbWV0cnksIEVsbGlwc29pZEdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfRWxsaXBzb2lkR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0VsbGlwc29pZEdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgaW5pdF9WZXJ0ZXhGb3JtYXQoKTsKICAgICAgc2NyYXRjaFBvc2l0aW9uMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE5vcm1hbDUgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hUYW5nZW50MyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEJpdGFuZ2VudDMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hOb3JtYWxTVCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZGVmYXVsdFJhZGlpID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgxLCAxLCAxKTsKICAgICAgY29zID0gTWF0aC5jb3M7CiAgICAgIHNpbiA9IE1hdGguc2luOwogICAgICBFbGxpcHNvaWRHZW9tZXRyeS5wYWNrZWRMZW5ndGggPSAyICogQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCArIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIDc7CiAgICAgIEVsbGlwc29pZEdlb21ldHJ5LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh2YWx1ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ2YWx1ZSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhcnJheSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2sodmFsdWUuX3JhZGlpLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHZhbHVlLl9pbm5lclJhZGlpLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2sodmFsdWUuX3ZlcnRleEZvcm1hdCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fbWluaW11bUNsb2NrOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fbWF4aW11bUNsb2NrOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fbWluaW11bUNvbmU7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9tYXhpbXVtQ29uZTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3N0YWNrUGFydGl0aW9uczsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3NsaWNlUGFydGl0aW9uczsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHZhbHVlLl9vZmZzZXRBdHRyaWJ1dGUsIC0xKTsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hSYWRpaSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaElubmVyUmFkaWkgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQ2ID0gbmV3IFZlcnRleEZvcm1hdF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hPcHRpb25zMTMgPSB7CiAgICAgICAgcmFkaWk6IHNjcmF0Y2hSYWRpaSwKICAgICAgICBpbm5lclJhZGlpOiBzY3JhdGNoSW5uZXJSYWRpaSwKICAgICAgICB2ZXJ0ZXhGb3JtYXQ6IHNjcmF0Y2hWZXJ0ZXhGb3JtYXQ2LAogICAgICAgIG1pbmltdW1DbG9jazogdm9pZCAwLAogICAgICAgIG1heGltdW1DbG9jazogdm9pZCAwLAogICAgICAgIG1pbmltdW1Db25lOiB2b2lkIDAsCiAgICAgICAgbWF4aW11bUNvbmU6IHZvaWQgMCwKICAgICAgICBzdGFja1BhcnRpdGlvbnM6IHZvaWQgMCwKICAgICAgICBzbGljZVBhcnRpdGlvbnM6IHZvaWQgMCwKICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IHZvaWQgMAogICAgICB9OwogICAgICBFbGxpcHNvaWRHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYXJyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXJyYXkgaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGNvbnN0IHJhZGlpID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgc2NyYXRjaFJhZGlpKTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgaW5uZXJSYWRpaSA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hJbm5lclJhZGlpKTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdDYKICAgICAgICApOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IG1pbmltdW1DbG9jayA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgbWF4aW11bUNsb2NrID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBtaW5pbXVtQ29uZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgbWF4aW11bUNvbmUgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHN0YWNrUGFydGl0aW9ucyA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgc2xpY2VQYXJ0aXRpb25zID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBvZmZzZXRBdHRyaWJ1dGUgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczEzLm1pbmltdW1DbG9jayA9IG1pbmltdW1DbG9jazsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTMubWF4aW11bUNsb2NrID0gbWF4aW11bUNsb2NrOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMy5taW5pbXVtQ29uZSA9IG1pbmltdW1Db25lOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMy5tYXhpbXVtQ29uZSA9IG1heGltdW1Db25lOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMy5zdGFja1BhcnRpdGlvbnMgPSBzdGFja1BhcnRpdGlvbnM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczEzLnNsaWNlUGFydGl0aW9ucyA9IHNsaWNlUGFydGl0aW9uczsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTMub2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICAgIHJldHVybiBuZXcgRWxsaXBzb2lkR2VvbWV0cnkoc2NyYXRjaE9wdGlvbnMxMyk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fcmFkaWkgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocmFkaWksIHJlc3VsdC5fcmFkaWkpOwogICAgICAgIHJlc3VsdC5faW5uZXJSYWRpaSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShpbm5lclJhZGlpLCByZXN1bHQuX2lubmVyUmFkaWkpOwogICAgICAgIHJlc3VsdC5fdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQuY2xvbmUodmVydGV4Rm9ybWF0LCByZXN1bHQuX3ZlcnRleEZvcm1hdCk7CiAgICAgICAgcmVzdWx0Ll9taW5pbXVtQ2xvY2sgPSBtaW5pbXVtQ2xvY2s7CiAgICAgICAgcmVzdWx0Ll9tYXhpbXVtQ2xvY2sgPSBtYXhpbXVtQ2xvY2s7CiAgICAgICAgcmVzdWx0Ll9taW5pbXVtQ29uZSA9IG1pbmltdW1Db25lOwogICAgICAgIHJlc3VsdC5fbWF4aW11bUNvbmUgPSBtYXhpbXVtQ29uZTsKICAgICAgICByZXN1bHQuX3N0YWNrUGFydGl0aW9ucyA9IHN0YWNrUGFydGl0aW9uczsKICAgICAgICByZXN1bHQuX3NsaWNlUGFydGl0aW9ucyA9IHNsaWNlUGFydGl0aW9uczsKICAgICAgICByZXN1bHQuX29mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZSA9PT0gLTEgPyB2b2lkIDAgOiBvZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihlbGxpcHNvaWRHZW9tZXRyeSkgewogICAgICAgIGNvbnN0IHJhZGlpID0gZWxsaXBzb2lkR2VvbWV0cnkuX3JhZGlpOwogICAgICAgIGlmIChyYWRpaS54IDw9IDAgfHwgcmFkaWkueSA8PSAwIHx8IHJhZGlpLnogPD0gMCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBpbm5lclJhZGlpID0gZWxsaXBzb2lkR2VvbWV0cnkuX2lubmVyUmFkaWk7CiAgICAgICAgaWYgKGlubmVyUmFkaWkueCA8PSAwIHx8IGlubmVyUmFkaWkueSA8PSAwIHx8IGlubmVyUmFkaWkueiA8PSAwKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IG1pbmltdW1DbG9jayA9IGVsbGlwc29pZEdlb21ldHJ5Ll9taW5pbXVtQ2xvY2s7CiAgICAgICAgY29uc3QgbWF4aW11bUNsb2NrID0gZWxsaXBzb2lkR2VvbWV0cnkuX21heGltdW1DbG9jazsKICAgICAgICBjb25zdCBtaW5pbXVtQ29uZSA9IGVsbGlwc29pZEdlb21ldHJ5Ll9taW5pbXVtQ29uZTsKICAgICAgICBjb25zdCBtYXhpbXVtQ29uZSA9IGVsbGlwc29pZEdlb21ldHJ5Ll9tYXhpbXVtQ29uZTsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBlbGxpcHNvaWRHZW9tZXRyeS5fdmVydGV4Rm9ybWF0OwogICAgICAgIGxldCBzbGljZVBhcnRpdGlvbnMgPSBlbGxpcHNvaWRHZW9tZXRyeS5fc2xpY2VQYXJ0aXRpb25zICsgMTsKICAgICAgICBsZXQgc3RhY2tQYXJ0aXRpb25zID0gZWxsaXBzb2lkR2VvbWV0cnkuX3N0YWNrUGFydGl0aW9ucyArIDE7CiAgICAgICAgc2xpY2VQYXJ0aXRpb25zID0gTWF0aC5yb3VuZCgKICAgICAgICAgIHNsaWNlUGFydGl0aW9ucyAqIE1hdGguYWJzKG1heGltdW1DbG9jayAtIG1pbmltdW1DbG9jaykgLyBNYXRoX2RlZmF1bHQuVFdPX1BJCiAgICAgICAgKTsKICAgICAgICBzdGFja1BhcnRpdGlvbnMgPSBNYXRoLnJvdW5kKAogICAgICAgICAgc3RhY2tQYXJ0aXRpb25zICogTWF0aC5hYnMobWF4aW11bUNvbmUgLSBtaW5pbXVtQ29uZSkgLyBNYXRoX2RlZmF1bHQuUEkKICAgICAgICApOwogICAgICAgIGlmIChzbGljZVBhcnRpdGlvbnMgPCAyKSB7CiAgICAgICAgICBzbGljZVBhcnRpdGlvbnMgPSAyOwogICAgICAgIH0KICAgICAgICBpZiAoc3RhY2tQYXJ0aXRpb25zIDwgMikgewogICAgICAgICAgc3RhY2tQYXJ0aXRpb25zID0gMjsKICAgICAgICB9CiAgICAgICAgbGV0IGk7CiAgICAgICAgbGV0IGo7CiAgICAgICAgbGV0IGluZGV4ID0gMDsKICAgICAgICBjb25zdCBwaGlzID0gW21pbmltdW1Db25lXTsKICAgICAgICBjb25zdCB0aGV0YXMgPSBbbWluaW11bUNsb2NrXTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc3RhY2tQYXJ0aXRpb25zOyBpKyspIHsKICAgICAgICAgIHBoaXMucHVzaCgKICAgICAgICAgICAgbWluaW11bUNvbmUgKyBpICogKG1heGltdW1Db25lIC0gbWluaW11bUNvbmUpIC8gKHN0YWNrUGFydGl0aW9ucyAtIDEpCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBwaGlzLnB1c2gobWF4aW11bUNvbmUpOwogICAgICAgIGZvciAoaiA9IDA7IGogPCBzbGljZVBhcnRpdGlvbnM7IGorKykgewogICAgICAgICAgdGhldGFzLnB1c2goCiAgICAgICAgICAgIG1pbmltdW1DbG9jayArIGogKiAobWF4aW11bUNsb2NrIC0gbWluaW11bUNsb2NrKSAvIChzbGljZVBhcnRpdGlvbnMgLSAxKQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgdGhldGFzLnB1c2gobWF4aW11bUNsb2NrKTsKICAgICAgICBjb25zdCBudW1QaGlzID0gcGhpcy5sZW5ndGg7CiAgICAgICAgY29uc3QgbnVtVGhldGFzID0gdGhldGFzLmxlbmd0aDsKICAgICAgICBsZXQgZXh0cmFJbmRpY2VzID0gMDsKICAgICAgICBsZXQgdmVydGV4TXVsdGlwbGllciA9IDE7CiAgICAgICAgY29uc3QgaGFzSW5uZXJTdXJmYWNlID0gaW5uZXJSYWRpaS54ICE9PSByYWRpaS54IHx8IGlubmVyUmFkaWkueSAhPT0gcmFkaWkueSB8fCBpbm5lclJhZGlpLnogIT09IHJhZGlpLno7CiAgICAgICAgbGV0IGlzVG9wT3BlbiA9IGZhbHNlOwogICAgICAgIGxldCBpc0JvdE9wZW4gPSBmYWxzZTsKICAgICAgICBsZXQgaXNDbG9ja09wZW4gPSBmYWxzZTsKICAgICAgICBpZiAoaGFzSW5uZXJTdXJmYWNlKSB7CiAgICAgICAgICB2ZXJ0ZXhNdWx0aXBsaWVyID0gMjsKICAgICAgICAgIGlmIChtaW5pbXVtQ29uZSA+IDApIHsKICAgICAgICAgICAgaXNUb3BPcGVuID0gdHJ1ZTsKICAgICAgICAgICAgZXh0cmFJbmRpY2VzICs9IHNsaWNlUGFydGl0aW9ucyAtIDE7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAobWF4aW11bUNvbmUgPCBNYXRoLlBJKSB7CiAgICAgICAgICAgIGlzQm90T3BlbiA9IHRydWU7CiAgICAgICAgICAgIGV4dHJhSW5kaWNlcyArPSBzbGljZVBhcnRpdGlvbnMgLSAxOwogICAgICAgICAgfQogICAgICAgICAgaWYgKChtYXhpbXVtQ2xvY2sgLSBtaW5pbXVtQ2xvY2spICUgTWF0aF9kZWZhdWx0LlRXT19QSSkgewogICAgICAgICAgICBpc0Nsb2NrT3BlbiA9IHRydWU7CiAgICAgICAgICAgIGV4dHJhSW5kaWNlcyArPSAoc3RhY2tQYXJ0aXRpb25zIC0gMSkgKiAyICsgMTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGV4dHJhSW5kaWNlcyArPSAxOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCB2ZXJ0ZXhDb3VudCA9IG51bVRoZXRhcyAqIG51bVBoaXMgKiB2ZXJ0ZXhNdWx0aXBsaWVyOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkodmVydGV4Q291bnQgKiAzKTsKICAgICAgICBjb25zdCBpc0lubmVyID0gbmV3IEFycmF5KHZlcnRleENvdW50KS5maWxsKGZhbHNlKTsKICAgICAgICBjb25zdCBuZWdhdGVOb3JtYWwgPSBuZXcgQXJyYXkodmVydGV4Q291bnQpLmZpbGwoZmFsc2UpOwogICAgICAgIGNvbnN0IGluZGV4Q291bnQgPSBzbGljZVBhcnRpdGlvbnMgKiBzdGFja1BhcnRpdGlvbnMgKiB2ZXJ0ZXhNdWx0aXBsaWVyOwogICAgICAgIGNvbnN0IG51bUluZGljZXMgPSA2ICogKGluZGV4Q291bnQgKyBleHRyYUluZGljZXMgKyAxIC0gKHNsaWNlUGFydGl0aW9ucyArIHN0YWNrUGFydGl0aW9ucykgKiB2ZXJ0ZXhNdWx0aXBsaWVyKTsKICAgICAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoaW5kZXhDb3VudCwgbnVtSW5kaWNlcyk7CiAgICAgICAgY29uc3Qgbm9ybWFscyA9IHZlcnRleEZvcm1hdC5ub3JtYWwgPyBuZXcgRmxvYXQzMkFycmF5KHZlcnRleENvdW50ICogMykgOiB2b2lkIDA7CiAgICAgICAgY29uc3QgdGFuZ2VudHMgPSB2ZXJ0ZXhGb3JtYXQudGFuZ2VudCA/IG5ldyBGbG9hdDMyQXJyYXkodmVydGV4Q291bnQgKiAzKSA6IHZvaWQgMDsKICAgICAgICBjb25zdCBiaXRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCA/IG5ldyBGbG9hdDMyQXJyYXkodmVydGV4Q291bnQgKiAzKSA6IHZvaWQgMDsKICAgICAgICBjb25zdCBzdCA9IHZlcnRleEZvcm1hdC5zdCA/IG5ldyBGbG9hdDMyQXJyYXkodmVydGV4Q291bnQgKiAyKSA6IHZvaWQgMDsKICAgICAgICBjb25zdCBzaW5QaGkgPSBuZXcgQXJyYXkobnVtUGhpcyk7CiAgICAgICAgY29uc3QgY29zUGhpID0gbmV3IEFycmF5KG51bVBoaXMpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1QaGlzOyBpKyspIHsKICAgICAgICAgIHNpblBoaVtpXSA9IHNpbihwaGlzW2ldKTsKICAgICAgICAgIGNvc1BoaVtpXSA9IGNvcyhwaGlzW2ldKTsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc2luVGhldGEgPSBuZXcgQXJyYXkobnVtVGhldGFzKTsKICAgICAgICBjb25zdCBjb3NUaGV0YSA9IG5ldyBBcnJheShudW1UaGV0YXMpOwogICAgICAgIGZvciAoaiA9IDA7IGogPCBudW1UaGV0YXM7IGorKykgewogICAgICAgICAgY29zVGhldGFbal0gPSBjb3ModGhldGFzW2pdKTsKICAgICAgICAgIHNpblRoZXRhW2pdID0gc2luKHRoZXRhc1tqXSk7CiAgICAgICAgfQogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1QaGlzOyBpKyspIHsKICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBudW1UaGV0YXM7IGorKykgewogICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSByYWRpaS54ICogc2luUGhpW2ldICogY29zVGhldGFbal07CiAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IHJhZGlpLnkgKiBzaW5QaGlbaV0gKiBzaW5UaGV0YVtqXTsKICAgICAgICAgICAgcG9zaXRpb25zW2luZGV4KytdID0gcmFkaWkueiAqIGNvc1BoaVtpXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgbGV0IHZlcnRleEluZGV4ID0gdmVydGV4Q291bnQgLyAyOwogICAgICAgIGlmIChoYXNJbm5lclN1cmZhY2UpIHsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1QaGlzOyBpKyspIHsKICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IG51bVRoZXRhczsgaisrKSB7CiAgICAgICAgICAgICAgcG9zaXRpb25zW2luZGV4KytdID0gaW5uZXJSYWRpaS54ICogc2luUGhpW2ldICogY29zVGhldGFbal07CiAgICAgICAgICAgICAgcG9zaXRpb25zW2luZGV4KytdID0gaW5uZXJSYWRpaS55ICogc2luUGhpW2ldICogc2luVGhldGFbal07CiAgICAgICAgICAgICAgcG9zaXRpb25zW2luZGV4KytdID0gaW5uZXJSYWRpaS56ICogY29zUGhpW2ldOwogICAgICAgICAgICAgIGlzSW5uZXJbdmVydGV4SW5kZXhdID0gdHJ1ZTsKICAgICAgICAgICAgICBpZiAoaSA+IDAgJiYgaSAhPT0gbnVtUGhpcyAtIDEgJiYgaiAhPT0gMCAmJiBqICE9PSBudW1UaGV0YXMgLSAxKSB7CiAgICAgICAgICAgICAgICBuZWdhdGVOb3JtYWxbdmVydGV4SW5kZXhdID0gdHJ1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmVydGV4SW5kZXgrKzsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpbmRleCA9IDA7CiAgICAgICAgbGV0IHRvcE9mZnNldDsKICAgICAgICBsZXQgYm90dG9tT2Zmc2V0OwogICAgICAgIGZvciAoaSA9IDE7IGkgPCBudW1QaGlzIC0gMjsgaSsrKSB7CiAgICAgICAgICB0b3BPZmZzZXQgPSBpICogbnVtVGhldGFzOwogICAgICAgICAgYm90dG9tT2Zmc2V0ID0gKGkgKyAxKSAqIG51bVRoZXRhczsKICAgICAgICAgIGZvciAoaiA9IDE7IGogPCBudW1UaGV0YXMgLSAyOyBqKyspIHsKICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGJvdHRvbU9mZnNldCArIGo7CiAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBib3R0b21PZmZzZXQgKyBqICsgMTsKICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHRvcE9mZnNldCArIGogKyAxOwogICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gYm90dG9tT2Zmc2V0ICsgajsKICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHRvcE9mZnNldCArIGogKyAxOwogICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gdG9wT2Zmc2V0ICsgajsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGhhc0lubmVyU3VyZmFjZSkgewogICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbnVtUGhpcyAqIG51bVRoZXRhczsKICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBudW1QaGlzIC0gMjsgaSsrKSB7CiAgICAgICAgICAgIHRvcE9mZnNldCA9IG9mZnNldCArIGkgKiBudW1UaGV0YXM7CiAgICAgICAgICAgIGJvdHRvbU9mZnNldCA9IG9mZnNldCArIChpICsgMSkgKiBudW1UaGV0YXM7CiAgICAgICAgICAgIGZvciAoaiA9IDE7IGogPCBudW1UaGV0YXMgLSAyOyBqKyspIHsKICAgICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gYm90dG9tT2Zmc2V0ICsgajsKICAgICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gdG9wT2Zmc2V0ICsgajsKICAgICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gdG9wT2Zmc2V0ICsgaiArIDE7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGJvdHRvbU9mZnNldCArIGo7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHRvcE9mZnNldCArIGogKyAxOwogICAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBib3R0b21PZmZzZXQgKyBqICsgMTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBsZXQgb3V0ZXJPZmZzZXQ7CiAgICAgICAgbGV0IGlubmVyT2Zmc2V0OwogICAgICAgIGlmIChoYXNJbm5lclN1cmZhY2UpIHsKICAgICAgICAgIGlmIChpc1RvcE9wZW4pIHsKICAgICAgICAgICAgaW5uZXJPZmZzZXQgPSBudW1QaGlzICogbnVtVGhldGFzOwogICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbnVtVGhldGFzIC0gMjsgaSsrKSB7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGk7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGkgKyAxOwogICAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpbm5lck9mZnNldCArIGkgKyAxOwogICAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpOwogICAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpbm5lck9mZnNldCArIGkgKyAxOwogICAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpbm5lck9mZnNldCArIGk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChpc0JvdE9wZW4pIHsKICAgICAgICAgICAgb3V0ZXJPZmZzZXQgPSBudW1QaGlzICogbnVtVGhldGFzIC0gbnVtVGhldGFzOwogICAgICAgICAgICBpbm5lck9mZnNldCA9IG51bVBoaXMgKiBudW1UaGV0YXMgKiB2ZXJ0ZXhNdWx0aXBsaWVyIC0gbnVtVGhldGFzOwogICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbnVtVGhldGFzIC0gMjsgaSsrKSB7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IG91dGVyT2Zmc2V0ICsgaSArIDE7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IG91dGVyT2Zmc2V0ICsgaTsKICAgICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaW5uZXJPZmZzZXQgKyBpOwogICAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBvdXRlck9mZnNldCArIGkgKyAxOwogICAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpbm5lck9mZnNldCArIGk7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGlubmVyT2Zmc2V0ICsgaSArIDE7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGlzQ2xvY2tPcGVuKSB7CiAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbnVtUGhpcyAtIDI7IGkrKykgewogICAgICAgICAgICBpbm5lck9mZnNldCA9IG51bVRoZXRhcyAqIG51bVBoaXMgKyBudW1UaGV0YXMgKiBpOwogICAgICAgICAgICBvdXRlck9mZnNldCA9IG51bVRoZXRhcyAqIGk7CiAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpbm5lck9mZnNldDsKICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IG91dGVyT2Zmc2V0ICsgbnVtVGhldGFzOwogICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gb3V0ZXJPZmZzZXQ7CiAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpbm5lck9mZnNldDsKICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGlubmVyT2Zmc2V0ICsgbnVtVGhldGFzOwogICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gb3V0ZXJPZmZzZXQgKyBudW1UaGV0YXM7CiAgICAgICAgICB9CiAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbnVtUGhpcyAtIDI7IGkrKykgewogICAgICAgICAgICBpbm5lck9mZnNldCA9IG51bVRoZXRhcyAqIG51bVBoaXMgKyBudW1UaGV0YXMgKiAoaSArIDEpIC0gMTsKICAgICAgICAgICAgb3V0ZXJPZmZzZXQgPSBudW1UaGV0YXMgKiAoaSArIDEpIC0gMTsKICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IG91dGVyT2Zmc2V0ICsgbnVtVGhldGFzOwogICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaW5uZXJPZmZzZXQ7CiAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBvdXRlck9mZnNldDsKICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IG91dGVyT2Zmc2V0ICsgbnVtVGhldGFzOwogICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaW5uZXJPZmZzZXQgKyBudW1UaGV0YXM7CiAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpbm5lck9mZnNldDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCgpOwogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQucG9zaXRpb24pIHsKICAgICAgICAgIGF0dHJpYnV0ZXMucG9zaXRpb24gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgdmFsdWVzOiBwb3NpdGlvbnMKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBsZXQgc3RJbmRleCA9IDA7CiAgICAgICAgbGV0IG5vcm1hbEluZGV4ID0gMDsKICAgICAgICBsZXQgdGFuZ2VudEluZGV4ID0gMDsKICAgICAgICBsZXQgYml0YW5nZW50SW5kZXggPSAwOwogICAgICAgIGNvbnN0IHZlcnRleENvdW50SGFsZiA9IHZlcnRleENvdW50IC8gMjsKICAgICAgICBsZXQgZWxsaXBzb2lkOwogICAgICAgIGNvbnN0IGVsbGlwc29pZE91dGVyID0gRWxsaXBzb2lkX2RlZmF1bHQuZnJvbUNhcnRlc2lhbjMocmFkaWkpOwogICAgICAgIGNvbnN0IGVsbGlwc29pZElubmVyID0gRWxsaXBzb2lkX2RlZmF1bHQuZnJvbUNhcnRlc2lhbjMoaW5uZXJSYWRpaSk7CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5zdCB8fCB2ZXJ0ZXhGb3JtYXQubm9ybWFsIHx8IHZlcnRleEZvcm1hdC50YW5nZW50IHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB2ZXJ0ZXhDb3VudDsgaSsrKSB7CiAgICAgICAgICAgIGVsbGlwc29pZCA9IGlzSW5uZXJbaV0gPyBlbGxpcHNvaWRJbm5lciA6IGVsbGlwc29pZE91dGVyOwogICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCBpICogMywgc2NyYXRjaFBvc2l0aW9uMik7CiAgICAgICAgICAgIGNvbnN0IG5vcm1hbDIgPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKHBvc2l0aW9uLCBzY3JhdGNoTm9ybWFsNSk7CiAgICAgICAgICAgIGlmIChuZWdhdGVOb3JtYWxbaV0pIHsKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKG5vcm1hbDIsIG5vcm1hbDIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICAgICAgICBjb25zdCBub3JtYWxTVCA9IENhcnRlc2lhbjJfZGVmYXVsdC5uZWdhdGUobm9ybWFsMiwgc2NyYXRjaE5vcm1hbFNUKTsKICAgICAgICAgICAgICBzdFtzdEluZGV4KytdID0gTWF0aC5hdGFuMihub3JtYWxTVC55LCBub3JtYWxTVC54KSAvIE1hdGhfZGVmYXVsdC5UV09fUEkgKyAwLjU7CiAgICAgICAgICAgICAgc3Rbc3RJbmRleCsrXSA9IE1hdGguYXNpbihub3JtYWwyLnopIC8gTWF0aC5QSSArIDAuNTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSBub3JtYWwyLng7CiAgICAgICAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IG5vcm1hbDIueTsKICAgICAgICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gbm9ybWFsMi56OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCB8fCB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgICAgICAgY29uc3QgdGFuZ2VudCA9IHNjcmF0Y2hUYW5nZW50MzsKICAgICAgICAgICAgICBsZXQgdGFuZ2V0T2Zmc2V0ID0gMDsKICAgICAgICAgICAgICBsZXQgdW5pdDsKICAgICAgICAgICAgICBpZiAoaXNJbm5lcltpXSkgewogICAgICAgICAgICAgICAgdGFuZ2V0T2Zmc2V0ID0gdmVydGV4Q291bnRIYWxmOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoIWlzVG9wT3BlbiAmJiBpID49IHRhbmdldE9mZnNldCAmJiBpIDwgdGFuZ2V0T2Zmc2V0ICsgbnVtVGhldGFzICogMikgewogICAgICAgICAgICAgICAgdW5pdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1g7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHVuaXQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9aOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3ModW5pdCwgbm9ybWFsMiwgdGFuZ2VudCk7CiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSh0YW5nZW50LCB0YW5nZW50KTsKICAgICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQueDsKICAgICAgICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQueTsKICAgICAgICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQuejsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGJpdGFuZ2VudCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhub3JtYWwyLCB0YW5nZW50LCBzY3JhdGNoQml0YW5nZW50Myk7CiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGJpdGFuZ2VudCwgYml0YW5nZW50KTsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQueDsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQueTsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQuejsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICAgICAgYXR0cmlidXRlcy5zdCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgICAgICAgIHZhbHVlczogc3QKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICAgICAgICBhdHRyaWJ1dGVzLm5vcm1hbCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICAgIHZhbHVlczogbm9ybWFscwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICAgICAgICBhdHRyaWJ1dGVzLnRhbmdlbnQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgICB2YWx1ZXM6IHRhbmdlbnRzCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgICAgYXR0cmlidXRlcy5iaXRhbmdlbnQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgICB2YWx1ZXM6IGJpdGFuZ2VudHMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZWxsaXBzb2lkR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSkpIHsKICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgICBjb25zdCBvZmZzZXRWYWx1ZSA9IGVsbGlwc29pZEdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuTk9ORSA/IDAgOiAxOwogICAgICAgICAgY29uc3QgYXBwbHlPZmZzZXQgPSBuZXcgVWludDhBcnJheShsZW5ndGggLyAzKS5maWxsKG9mZnNldFZhbHVlKTsKICAgICAgICAgIGF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDEsCiAgICAgICAgICAgIHZhbHVlczogYXBwbHlPZmZzZXQKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTLAogICAgICAgICAgYm91bmRpbmdTcGhlcmU6IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbUVsbGlwc29pZChlbGxpcHNvaWRPdXRlciksCiAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IGVsbGlwc29pZEdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkR2VvbWV0cnkuZ2V0VW5pdEVsbGlwc29pZCA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHVuaXRFbGxpcHNvaWRHZW9tZXRyeSkpIHsKICAgICAgICAgIHVuaXRFbGxpcHNvaWRHZW9tZXRyeSA9IEVsbGlwc29pZEdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5KAogICAgICAgICAgICBuZXcgRWxsaXBzb2lkR2VvbWV0cnkoewogICAgICAgICAgICAgIHJhZGlpOiBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KDEsIDEsIDEpLAogICAgICAgICAgICAgIHZlcnRleEZvcm1hdDogVmVydGV4Rm9ybWF0X2RlZmF1bHQuUE9TSVRJT05fT05MWQogICAgICAgICAgICB9KQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVuaXRFbGxpcHNvaWRHZW9tZXRyeTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkR2VvbWV0cnlfZGVmYXVsdCA9IEVsbGlwc29pZEdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlRWxsaXBzb2lkR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlRWxsaXBzb2lkR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZUVsbGlwc29pZEdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZUVsbGlwc29pZEdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVFbGxpcHNvaWRHZW9tZXRyeShlbGxpcHNvaWRHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgZWxsaXBzb2lkR2VvbWV0cnkgPSBFbGxpcHNvaWRHZW9tZXRyeV9kZWZhdWx0LnVucGFjayhlbGxpcHNvaWRHZW9tZXRyeSwgb2Zmc2V0KTsKICAgIH0KICAgIHJldHVybiBFbGxpcHNvaWRHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KGVsbGlwc29pZEdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZUVsbGlwc29pZEdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlRWxsaXBzb2lkR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUVsbGlwc29pZEdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkR2VvbWV0cnkoKTsKICAgICAgY3JlYXRlRWxsaXBzb2lkR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZUVsbGlwc29pZEdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5KG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgY29uc3QgcmFkaWkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnJhZGlpLCBkZWZhdWx0UmFkaWkyKTsKICAgIGNvbnN0IGlubmVyUmFkaWkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmlubmVyUmFkaWksIHJhZGlpKTsKICAgIGNvbnN0IG1pbmltdW1DbG9jayA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMubWluaW11bUNsb2NrLCAwKTsKICAgIGNvbnN0IG1heGltdW1DbG9jayA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMubWF4aW11bUNsb2NrLCBNYXRoX2RlZmF1bHQuVFdPX1BJKTsKICAgIGNvbnN0IG1pbmltdW1Db25lID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5taW5pbXVtQ29uZSwgMCk7CiAgICBjb25zdCBtYXhpbXVtQ29uZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMubWF4aW11bUNvbmUsIE1hdGhfZGVmYXVsdC5QSSk7CiAgICBjb25zdCBzdGFja1BhcnRpdGlvbnMgPSBNYXRoLnJvdW5kKGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuc3RhY2tQYXJ0aXRpb25zLCAxMCkpOwogICAgY29uc3Qgc2xpY2VQYXJ0aXRpb25zID0gTWF0aC5yb3VuZChkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnNsaWNlUGFydGl0aW9ucywgOCkpOwogICAgY29uc3Qgc3ViZGl2aXNpb25zID0gTWF0aC5yb3VuZChkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnN1YmRpdmlzaW9ucywgMTI4KSk7CiAgICBpZiAoc3RhY2tQYXJ0aXRpb25zIDwgMSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy5zdGFja1BhcnRpdGlvbnMgY2Fubm90IGJlIGxlc3MgdGhhbiAxIik7CiAgICB9CiAgICBpZiAoc2xpY2VQYXJ0aXRpb25zIDwgMCkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy5zbGljZVBhcnRpdGlvbnMgY2Fubm90IGJlIGxlc3MgdGhhbiAwIik7CiAgICB9CiAgICBpZiAoc3ViZGl2aXNpb25zIDwgMCkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAib3B0aW9ucy5zdWJkaXZpc2lvbnMgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gemVyby4iCiAgICAgICk7CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlKSAmJiBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5UT1ApIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIkdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlLlRPUCBpcyBub3QgYSBzdXBwb3J0ZWQgb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUgZm9yIHRoaXMgZ2VvbWV0cnkuIgogICAgICApOwogICAgfQogICAgdGhpcy5fcmFkaWkgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocmFkaWkpOwogICAgdGhpcy5faW5uZXJSYWRpaSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShpbm5lclJhZGlpKTsKICAgIHRoaXMuX21pbmltdW1DbG9jayA9IG1pbmltdW1DbG9jazsKICAgIHRoaXMuX21heGltdW1DbG9jayA9IG1heGltdW1DbG9jazsKICAgIHRoaXMuX21pbmltdW1Db25lID0gbWluaW11bUNvbmU7CiAgICB0aGlzLl9tYXhpbXVtQ29uZSA9IG1heGltdW1Db25lOwogICAgdGhpcy5fc3RhY2tQYXJ0aXRpb25zID0gc3RhY2tQYXJ0aXRpb25zOwogICAgdGhpcy5fc2xpY2VQYXJ0aXRpb25zID0gc2xpY2VQYXJ0aXRpb25zOwogICAgdGhpcy5fc3ViZGl2aXNpb25zID0gc3ViZGl2aXNpb25zOwogICAgdGhpcy5fb2Zmc2V0QXR0cmlidXRlID0gb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGU7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZUVsbGlwc29pZE91dGxpbmVHZW9tZXRyeSI7CiAgfQogIHZhciBkZWZhdWx0UmFkaWkyLCBjb3MyLCBzaW4yLCBzY3JhdGNoUmFkaWkyLCBzY3JhdGNoSW5uZXJSYWRpaTIsIHNjcmF0Y2hPcHRpb25zMTQsIEVsbGlwc29pZE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X0VsbGlwc29pZE91dGxpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9HZW9tZXRyeU9mZnNldEF0dHJpYnV0ZSgpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBkZWZhdWx0UmFkaWkyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgxLCAxLCAxKTsKICAgICAgY29zMiA9IE1hdGguY29zOwogICAgICBzaW4yID0gTWF0aC5zaW47CiAgICAgIEVsbGlwc29pZE91dGxpbmVHZW9tZXRyeS5wYWNrZWRMZW5ndGggPSAyICogQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCArIDg7CiAgICAgIEVsbGlwc29pZE91dGxpbmVHZW9tZXRyeS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodmFsdWUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgidmFsdWUgaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYXJyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXJyYXkgaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHZhbHVlLl9yYWRpaSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayh2YWx1ZS5faW5uZXJSYWRpaSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX21pbmltdW1DbG9jazsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX21heGltdW1DbG9jazsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX21pbmltdW1Db25lOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fbWF4aW11bUNvbmU7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9zdGFja1BhcnRpdGlvbnM7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9zbGljZVBhcnRpdGlvbnM7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9zdWJkaXZpc2lvbnM7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh2YWx1ZS5fb2Zmc2V0QXR0cmlidXRlLCAtMSk7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBzY3JhdGNoUmFkaWkyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoSW5uZXJSYWRpaTIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hPcHRpb25zMTQgPSB7CiAgICAgICAgcmFkaWk6IHNjcmF0Y2hSYWRpaTIsCiAgICAgICAgaW5uZXJSYWRpaTogc2NyYXRjaElubmVyUmFkaWkyLAogICAgICAgIG1pbmltdW1DbG9jazogdm9pZCAwLAogICAgICAgIG1heGltdW1DbG9jazogdm9pZCAwLAogICAgICAgIG1pbmltdW1Db25lOiB2b2lkIDAsCiAgICAgICAgbWF4aW11bUNvbmU6IHZvaWQgMCwKICAgICAgICBzdGFja1BhcnRpdGlvbnM6IHZvaWQgMCwKICAgICAgICBzbGljZVBhcnRpdGlvbnM6IHZvaWQgMCwKICAgICAgICBzdWJkaXZpc2lvbnM6IHZvaWQgMCwKICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IHZvaWQgMAogICAgICB9OwogICAgICBFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCByYWRpaSA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hSYWRpaTIpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBpbm5lclJhZGlpID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgc2NyYXRjaElubmVyUmFkaWkyKTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgbWluaW11bUNsb2NrID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBtYXhpbXVtQ2xvY2sgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IG1pbmltdW1Db25lID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBtYXhpbXVtQ29uZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgc3RhY2tQYXJ0aXRpb25zID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBzbGljZVBhcnRpdGlvbnMgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHN1YmRpdmlzaW9ucyA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgb2Zmc2V0QXR0cmlidXRlID0gYXJyYXlbc3RhcnRpbmdJbmRleF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxNC5taW5pbXVtQ2xvY2sgPSBtaW5pbXVtQ2xvY2s7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE0Lm1heGltdW1DbG9jayA9IG1heGltdW1DbG9jazsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTQubWluaW11bUNvbmUgPSBtaW5pbXVtQ29uZTsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTQubWF4aW11bUNvbmUgPSBtYXhpbXVtQ29uZTsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTQuc3RhY2tQYXJ0aXRpb25zID0gc3RhY2tQYXJ0aXRpb25zOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxNC5zbGljZVBhcnRpdGlvbnMgPSBzbGljZVBhcnRpdGlvbnM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE0LnN1YmRpdmlzaW9ucyA9IHN1YmRpdmlzaW9uczsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTQub2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICAgIHJldHVybiBuZXcgRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zMTQpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuX3JhZGlpID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHJhZGlpLCByZXN1bHQuX3JhZGlpKTsKICAgICAgICByZXN1bHQuX2lubmVyUmFkaWkgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoaW5uZXJSYWRpaSwgcmVzdWx0Ll9pbm5lclJhZGlpKTsKICAgICAgICByZXN1bHQuX21pbmltdW1DbG9jayA9IG1pbmltdW1DbG9jazsKICAgICAgICByZXN1bHQuX21heGltdW1DbG9jayA9IG1heGltdW1DbG9jazsKICAgICAgICByZXN1bHQuX21pbmltdW1Db25lID0gbWluaW11bUNvbmU7CiAgICAgICAgcmVzdWx0Ll9tYXhpbXVtQ29uZSA9IG1heGltdW1Db25lOwogICAgICAgIHJlc3VsdC5fc3RhY2tQYXJ0aXRpb25zID0gc3RhY2tQYXJ0aXRpb25zOwogICAgICAgIHJlc3VsdC5fc2xpY2VQYXJ0aXRpb25zID0gc2xpY2VQYXJ0aXRpb25zOwogICAgICAgIHJlc3VsdC5fc3ViZGl2aXNpb25zID0gc3ViZGl2aXNpb25zOwogICAgICAgIHJlc3VsdC5fb2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihlbGxpcHNvaWRHZW9tZXRyeSkgewogICAgICAgIGNvbnN0IHJhZGlpID0gZWxsaXBzb2lkR2VvbWV0cnkuX3JhZGlpOwogICAgICAgIGlmIChyYWRpaS54IDw9IDAgfHwgcmFkaWkueSA8PSAwIHx8IHJhZGlpLnogPD0gMCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBpbm5lclJhZGlpID0gZWxsaXBzb2lkR2VvbWV0cnkuX2lubmVyUmFkaWk7CiAgICAgICAgaWYgKGlubmVyUmFkaWkueCA8PSAwIHx8IGlubmVyUmFkaWkueSA8PSAwIHx8IGlubmVyUmFkaWkueiA8PSAwKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IG1pbmltdW1DbG9jayA9IGVsbGlwc29pZEdlb21ldHJ5Ll9taW5pbXVtQ2xvY2s7CiAgICAgICAgY29uc3QgbWF4aW11bUNsb2NrID0gZWxsaXBzb2lkR2VvbWV0cnkuX21heGltdW1DbG9jazsKICAgICAgICBjb25zdCBtaW5pbXVtQ29uZSA9IGVsbGlwc29pZEdlb21ldHJ5Ll9taW5pbXVtQ29uZTsKICAgICAgICBjb25zdCBtYXhpbXVtQ29uZSA9IGVsbGlwc29pZEdlb21ldHJ5Ll9tYXhpbXVtQ29uZTsKICAgICAgICBjb25zdCBzdWJkaXZpc2lvbnMgPSBlbGxpcHNvaWRHZW9tZXRyeS5fc3ViZGl2aXNpb25zOwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmZyb21DYXJ0ZXNpYW4zKHJhZGlpKTsKICAgICAgICBsZXQgc2xpY2VQYXJ0aXRpb25zID0gZWxsaXBzb2lkR2VvbWV0cnkuX3NsaWNlUGFydGl0aW9ucyArIDE7CiAgICAgICAgbGV0IHN0YWNrUGFydGl0aW9ucyA9IGVsbGlwc29pZEdlb21ldHJ5Ll9zdGFja1BhcnRpdGlvbnMgKyAxOwogICAgICAgIHNsaWNlUGFydGl0aW9ucyA9IE1hdGgucm91bmQoCiAgICAgICAgICBzbGljZVBhcnRpdGlvbnMgKiBNYXRoLmFicyhtYXhpbXVtQ2xvY2sgLSBtaW5pbXVtQ2xvY2spIC8gTWF0aF9kZWZhdWx0LlRXT19QSQogICAgICAgICk7CiAgICAgICAgc3RhY2tQYXJ0aXRpb25zID0gTWF0aC5yb3VuZCgKICAgICAgICAgIHN0YWNrUGFydGl0aW9ucyAqIE1hdGguYWJzKG1heGltdW1Db25lIC0gbWluaW11bUNvbmUpIC8gTWF0aF9kZWZhdWx0LlBJCiAgICAgICAgKTsKICAgICAgICBpZiAoc2xpY2VQYXJ0aXRpb25zIDwgMikgewogICAgICAgICAgc2xpY2VQYXJ0aXRpb25zID0gMjsKICAgICAgICB9CiAgICAgICAgaWYgKHN0YWNrUGFydGl0aW9ucyA8IDIpIHsKICAgICAgICAgIHN0YWNrUGFydGl0aW9ucyA9IDI7CiAgICAgICAgfQogICAgICAgIGxldCBleHRyYUluZGljZXMgPSAwOwogICAgICAgIGxldCB2ZXJ0ZXhNdWx0aXBsaWVyID0gMTsKICAgICAgICBjb25zdCBoYXNJbm5lclN1cmZhY2UgPSBpbm5lclJhZGlpLnggIT09IHJhZGlpLnggfHwgaW5uZXJSYWRpaS55ICE9PSByYWRpaS55IHx8IGlubmVyUmFkaWkueiAhPT0gcmFkaWkuejsKICAgICAgICBsZXQgaXNUb3BPcGVuID0gZmFsc2U7CiAgICAgICAgbGV0IGlzQm90T3BlbiA9IGZhbHNlOwogICAgICAgIGlmIChoYXNJbm5lclN1cmZhY2UpIHsKICAgICAgICAgIHZlcnRleE11bHRpcGxpZXIgPSAyOwogICAgICAgICAgaWYgKG1pbmltdW1Db25lID4gMCkgewogICAgICAgICAgICBpc1RvcE9wZW4gPSB0cnVlOwogICAgICAgICAgICBleHRyYUluZGljZXMgKz0gc2xpY2VQYXJ0aXRpb25zOwogICAgICAgICAgfQogICAgICAgICAgaWYgKG1heGltdW1Db25lIDwgTWF0aC5QSSkgewogICAgICAgICAgICBpc0JvdE9wZW4gPSB0cnVlOwogICAgICAgICAgICBleHRyYUluZGljZXMgKz0gc2xpY2VQYXJ0aXRpb25zOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCB2ZXJ0ZXhDb3VudCA9IHN1YmRpdmlzaW9ucyAqIHZlcnRleE11bHRpcGxpZXIgKiAoc3RhY2tQYXJ0aXRpb25zICsgc2xpY2VQYXJ0aXRpb25zKTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KHZlcnRleENvdW50ICogMyk7CiAgICAgICAgY29uc3QgbnVtSW5kaWNlcyA9IDIgKiAodmVydGV4Q291bnQgKyBleHRyYUluZGljZXMgLSAoc2xpY2VQYXJ0aXRpb25zICsgc3RhY2tQYXJ0aXRpb25zKSAqIHZlcnRleE11bHRpcGxpZXIpOwogICAgICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSh2ZXJ0ZXhDb3VudCwgbnVtSW5kaWNlcyk7CiAgICAgICAgbGV0IGk7CiAgICAgICAgbGV0IGo7CiAgICAgICAgbGV0IHRoZXRhOwogICAgICAgIGxldCBwaGk7CiAgICAgICAgbGV0IGluZGV4ID0gMDsKICAgICAgICBjb25zdCBzaW5QaGkgPSBuZXcgQXJyYXkoc3RhY2tQYXJ0aXRpb25zKTsKICAgICAgICBjb25zdCBjb3NQaGkgPSBuZXcgQXJyYXkoc3RhY2tQYXJ0aXRpb25zKTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc3RhY2tQYXJ0aXRpb25zOyBpKyspIHsKICAgICAgICAgIHBoaSA9IG1pbmltdW1Db25lICsgaSAqIChtYXhpbXVtQ29uZSAtIG1pbmltdW1Db25lKSAvIChzdGFja1BhcnRpdGlvbnMgLSAxKTsKICAgICAgICAgIHNpblBoaVtpXSA9IHNpbjIocGhpKTsKICAgICAgICAgIGNvc1BoaVtpXSA9IGNvczIocGhpKTsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc2luVGhldGEgPSBuZXcgQXJyYXkoc3ViZGl2aXNpb25zKTsKICAgICAgICBjb25zdCBjb3NUaGV0YSA9IG5ldyBBcnJheShzdWJkaXZpc2lvbnMpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdWJkaXZpc2lvbnM7IGkrKykgewogICAgICAgICAgdGhldGEgPSBtaW5pbXVtQ2xvY2sgKyBpICogKG1heGltdW1DbG9jayAtIG1pbmltdW1DbG9jaykgLyAoc3ViZGl2aXNpb25zIC0gMSk7CiAgICAgICAgICBzaW5UaGV0YVtpXSA9IHNpbjIodGhldGEpOwogICAgICAgICAgY29zVGhldGFbaV0gPSBjb3MyKHRoZXRhKTsKICAgICAgICB9CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHN0YWNrUGFydGl0aW9uczsgaSsrKSB7CiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgc3ViZGl2aXNpb25zOyBqKyspIHsKICAgICAgICAgICAgcG9zaXRpb25zW2luZGV4KytdID0gcmFkaWkueCAqIHNpblBoaVtpXSAqIGNvc1RoZXRhW2pdOwogICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSByYWRpaS55ICogc2luUGhpW2ldICogc2luVGhldGFbal07CiAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IHJhZGlpLnogKiBjb3NQaGlbaV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChoYXNJbm5lclN1cmZhY2UpIHsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdGFja1BhcnRpdGlvbnM7IGkrKykgewogICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgc3ViZGl2aXNpb25zOyBqKyspIHsKICAgICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSBpbm5lclJhZGlpLnggKiBzaW5QaGlbaV0gKiBjb3NUaGV0YVtqXTsKICAgICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSBpbm5lclJhZGlpLnkgKiBzaW5QaGlbaV0gKiBzaW5UaGV0YVtqXTsKICAgICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSBpbm5lclJhZGlpLnogKiBjb3NQaGlbaV07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgc2luUGhpLmxlbmd0aCA9IHN1YmRpdmlzaW9uczsKICAgICAgICBjb3NQaGkubGVuZ3RoID0gc3ViZGl2aXNpb25zOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdWJkaXZpc2lvbnM7IGkrKykgewogICAgICAgICAgcGhpID0gbWluaW11bUNvbmUgKyBpICogKG1heGltdW1Db25lIC0gbWluaW11bUNvbmUpIC8gKHN1YmRpdmlzaW9ucyAtIDEpOwogICAgICAgICAgc2luUGhpW2ldID0gc2luMihwaGkpOwogICAgICAgICAgY29zUGhpW2ldID0gY29zMihwaGkpOwogICAgICAgIH0KICAgICAgICBzaW5UaGV0YS5sZW5ndGggPSBzbGljZVBhcnRpdGlvbnM7CiAgICAgICAgY29zVGhldGEubGVuZ3RoID0gc2xpY2VQYXJ0aXRpb25zOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBzbGljZVBhcnRpdGlvbnM7IGkrKykgewogICAgICAgICAgdGhldGEgPSBtaW5pbXVtQ2xvY2sgKyBpICogKG1heGltdW1DbG9jayAtIG1pbmltdW1DbG9jaykgLyAoc2xpY2VQYXJ0aXRpb25zIC0gMSk7CiAgICAgICAgICBzaW5UaGV0YVtpXSA9IHNpbjIodGhldGEpOwogICAgICAgICAgY29zVGhldGFbaV0gPSBjb3MyKHRoZXRhKTsKICAgICAgICB9CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHN1YmRpdmlzaW9uczsgaSsrKSB7CiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgc2xpY2VQYXJ0aXRpb25zOyBqKyspIHsKICAgICAgICAgICAgcG9zaXRpb25zW2luZGV4KytdID0gcmFkaWkueCAqIHNpblBoaVtpXSAqIGNvc1RoZXRhW2pdOwogICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSByYWRpaS55ICogc2luUGhpW2ldICogc2luVGhldGFbal07CiAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IHJhZGlpLnogKiBjb3NQaGlbaV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChoYXNJbm5lclN1cmZhY2UpIHsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdWJkaXZpc2lvbnM7IGkrKykgewogICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgc2xpY2VQYXJ0aXRpb25zOyBqKyspIHsKICAgICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSBpbm5lclJhZGlpLnggKiBzaW5QaGlbaV0gKiBjb3NUaGV0YVtqXTsKICAgICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSBpbm5lclJhZGlpLnkgKiBzaW5QaGlbaV0gKiBzaW5UaGV0YVtqXTsKICAgICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSBpbm5lclJhZGlpLnogKiBjb3NQaGlbaV07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaW5kZXggPSAwOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdGFja1BhcnRpdGlvbnMgKiB2ZXJ0ZXhNdWx0aXBsaWVyOyBpKyspIHsKICAgICAgICAgIGNvbnN0IHRvcE9mZnNldCA9IGkgKiBzdWJkaXZpc2lvbnM7CiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgc3ViZGl2aXNpb25zIC0gMTsgaisrKSB7CiAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSB0b3BPZmZzZXQgKyBqOwogICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gdG9wT2Zmc2V0ICsgaiArIDE7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGxldCBvZmZzZXQgPSBzdGFja1BhcnRpdGlvbnMgKiBzdWJkaXZpc2lvbnMgKiB2ZXJ0ZXhNdWx0aXBsaWVyOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBzbGljZVBhcnRpdGlvbnM7IGkrKykgewogICAgICAgICAgZm9yIChqID0gMDsgaiA8IHN1YmRpdmlzaW9ucyAtIDE7IGorKykgewogICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gb2Zmc2V0ICsgaSArIGogKiBzbGljZVBhcnRpdGlvbnM7CiAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBvZmZzZXQgKyBpICsgKGogKyAxKSAqIHNsaWNlUGFydGl0aW9uczsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGhhc0lubmVyU3VyZmFjZSkgewogICAgICAgICAgb2Zmc2V0ID0gc3RhY2tQYXJ0aXRpb25zICogc3ViZGl2aXNpb25zICogdmVydGV4TXVsdGlwbGllciArIHNsaWNlUGFydGl0aW9ucyAqIHN1YmRpdmlzaW9uczsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzbGljZVBhcnRpdGlvbnM7IGkrKykgewogICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgc3ViZGl2aXNpb25zIC0gMTsgaisrKSB7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IG9mZnNldCArIGkgKyBqICogc2xpY2VQYXJ0aXRpb25zOwogICAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBvZmZzZXQgKyBpICsgKGogKyAxKSAqIHNsaWNlUGFydGl0aW9uczsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoaGFzSW5uZXJTdXJmYWNlKSB7CiAgICAgICAgICBsZXQgb3V0ZXJPZmZzZXQgPSBzdGFja1BhcnRpdGlvbnMgKiBzdWJkaXZpc2lvbnMgKiB2ZXJ0ZXhNdWx0aXBsaWVyOwogICAgICAgICAgbGV0IGlubmVyT2Zmc2V0ID0gb3V0ZXJPZmZzZXQgKyBzdWJkaXZpc2lvbnMgKiBzbGljZVBhcnRpdGlvbnM7CiAgICAgICAgICBpZiAoaXNUb3BPcGVuKSB7CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzbGljZVBhcnRpdGlvbnM7IGkrKykgewogICAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBvdXRlck9mZnNldCArIGk7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGlubmVyT2Zmc2V0ICsgaTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKGlzQm90T3BlbikgewogICAgICAgICAgICBvdXRlck9mZnNldCArPSBzdWJkaXZpc2lvbnMgKiBzbGljZVBhcnRpdGlvbnMgLSBzbGljZVBhcnRpdGlvbnM7CiAgICAgICAgICAgIGlubmVyT2Zmc2V0ICs9IHN1YmRpdmlzaW9ucyAqIHNsaWNlUGFydGl0aW9ucyAtIHNsaWNlUGFydGl0aW9uczsKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNsaWNlUGFydGl0aW9uczsgaSsrKSB7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IG91dGVyT2Zmc2V0ICsgaTsKICAgICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaW5uZXJPZmZzZXQgKyBpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoewogICAgICAgICAgcG9zaXRpb246IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICB2YWx1ZXM6IHBvc2l0aW9ucwogICAgICAgICAgfSkKICAgICAgICB9KTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGVsbGlwc29pZEdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUpKSB7CiAgICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgICAgY29uc3Qgb2Zmc2V0VmFsdWUgPSBlbGxpcHNvaWRHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0Lk5PTkUgPyAwIDogMTsKICAgICAgICAgIGNvbnN0IGFwcGx5T2Zmc2V0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoIC8gMykuZmlsbChvZmZzZXRWYWx1ZSk7CiAgICAgICAgICBhdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAxLAogICAgICAgICAgICB2YWx1ZXM6IGFwcGx5T2Zmc2V0CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgcHJpbWl0aXZlVHlwZTogUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVTLAogICAgICAgICAgYm91bmRpbmdTcGhlcmU6IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbUVsbGlwc29pZChlbGxpcHNvaWQpLAogICAgICAgICAgb2Zmc2V0QXR0cmlidXRlOiBlbGxpcHNvaWRHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0ID0gRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5LmpzCiAgdmFyIGNyZWF0ZUVsbGlwc29pZE91dGxpbmVHZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZUVsbGlwc29pZE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY3JlYXRlRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5KGVsbGlwc29pZEdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZWxsaXBzb2lkR2VvbWV0cnkuYnVmZmVyLCBvZmZzZXQpKSB7CiAgICAgIGVsbGlwc29pZEdlb21ldHJ5ID0gRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKAogICAgICAgIGVsbGlwc29pZEdlb21ldHJ5LAogICAgICAgIG9mZnNldAogICAgICApOwogICAgfQogICAgcmV0dXJuIEVsbGlwc29pZE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KGVsbGlwc29pZEdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZUVsbGlwc29pZE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZUVsbGlwc29pZE91dGxpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5KCk7CiAgICAgIGNyZWF0ZUVsbGlwc29pZE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0ID0gY3JlYXRlRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ3VsbGluZ1ZvbHVtZS5qcwogIGZ1bmN0aW9uIEN1bGxpbmdWb2x1bWUocGxhbmVzKSB7CiAgICB0aGlzLnBsYW5lcyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHBsYW5lcywgW10pOwogIH0KICB2YXIgZmFjZXMsIHNjcmF0Y2hQbGFuZUNlbnRlciwgc2NyYXRjaFBsYW5lTm9ybWFsMiwgc2NyYXRjaFBsYW5lMiwgQ3VsbGluZ1ZvbHVtZV9kZWZhdWx0OwogIHZhciBpbml0X0N1bGxpbmdWb2x1bWUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0N1bGxpbmdWb2x1bWUuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW40KCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfSW50ZXJzZWN0KCk7CiAgICAgIGluaXRfUGxhbmUoKTsKICAgICAgZmFjZXMgPSBbbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLCBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKV07CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9YLCBmYWNlc1swXSk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9ZLCBmYWNlc1sxXSk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9aLCBmYWNlc1syXSk7CiAgICAgIHNjcmF0Y2hQbGFuZUNlbnRlciA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBsYW5lTm9ybWFsMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBsYW5lMiA9IG5ldyBQbGFuZV9kZWZhdWx0KG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoMSwgMCwgMCksIDApOwogICAgICBDdWxsaW5nVm9sdW1lLmZyb21Cb3VuZGluZ1NwaGVyZSA9IGZ1bmN0aW9uKGJvdW5kaW5nU3BoZXJlLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChib3VuZGluZ1NwaGVyZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJib3VuZGluZ1NwaGVyZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEN1bGxpbmdWb2x1bWUoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbGVuZ3RoID0gZmFjZXMubGVuZ3RoOwogICAgICAgIGNvbnN0IHBsYW5lcyA9IHJlc3VsdC5wbGFuZXM7CiAgICAgICAgcGxhbmVzLmxlbmd0aCA9IDIgKiBsZW5ndGg7CiAgICAgICAgY29uc3QgY2VudGVyID0gYm91bmRpbmdTcGhlcmUuY2VudGVyOwogICAgICAgIGNvbnN0IHJhZGl1cyA9IGJvdW5kaW5nU3BoZXJlLnJhZGl1czsKICAgICAgICBsZXQgcGxhbmVJbmRleCA9IDA7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgY29uc3QgZmFjZU5vcm1hbCA9IGZhY2VzW2ldOwogICAgICAgICAgbGV0IHBsYW5lMCA9IHBsYW5lc1twbGFuZUluZGV4XTsKICAgICAgICAgIGxldCBwbGFuZTEgPSBwbGFuZXNbcGxhbmVJbmRleCArIDFdOwogICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocGxhbmUwKSkgewogICAgICAgICAgICBwbGFuZTAgPSBwbGFuZXNbcGxhbmVJbmRleF0gPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwbGFuZTEpKSB7CiAgICAgICAgICAgIHBsYW5lMSA9IHBsYW5lc1twbGFuZUluZGV4ICsgMV0gPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KCk7CiAgICAgICAgICB9CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihmYWNlTm9ybWFsLCAtcmFkaXVzLCBzY3JhdGNoUGxhbmVDZW50ZXIpOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjZW50ZXIsIHNjcmF0Y2hQbGFuZUNlbnRlciwgc2NyYXRjaFBsYW5lQ2VudGVyKTsKICAgICAgICAgIHBsYW5lMC54ID0gZmFjZU5vcm1hbC54OwogICAgICAgICAgcGxhbmUwLnkgPSBmYWNlTm9ybWFsLnk7CiAgICAgICAgICBwbGFuZTAueiA9IGZhY2VOb3JtYWwuejsKICAgICAgICAgIHBsYW5lMC53ID0gLUNhcnRlc2lhbjNfZGVmYXVsdC5kb3QoZmFjZU5vcm1hbCwgc2NyYXRjaFBsYW5lQ2VudGVyKTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGZhY2VOb3JtYWwsIHJhZGl1cywgc2NyYXRjaFBsYW5lQ2VudGVyKTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY2VudGVyLCBzY3JhdGNoUGxhbmVDZW50ZXIsIHNjcmF0Y2hQbGFuZUNlbnRlcik7CiAgICAgICAgICBwbGFuZTEueCA9IC1mYWNlTm9ybWFsLng7CiAgICAgICAgICBwbGFuZTEueSA9IC1mYWNlTm9ybWFsLnk7CiAgICAgICAgICBwbGFuZTEueiA9IC1mYWNlTm9ybWFsLno7CiAgICAgICAgICBwbGFuZTEudyA9IC1DYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGZhY2VOb3JtYWwsIHNjcmF0Y2hQbGFuZU5vcm1hbDIpLAogICAgICAgICAgICBzY3JhdGNoUGxhbmVDZW50ZXIKICAgICAgICAgICk7CiAgICAgICAgICBwbGFuZUluZGV4ICs9IDI7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEN1bGxpbmdWb2x1bWUucHJvdG90eXBlLmNvbXB1dGVWaXNpYmlsaXR5ID0gZnVuY3Rpb24oYm91bmRpbmdWb2x1bWUpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChib3VuZGluZ1ZvbHVtZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJib3VuZGluZ1ZvbHVtZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXM7CiAgICAgICAgbGV0IGludGVyc2VjdGluZyA9IGZhbHNlOwogICAgICAgIGZvciAobGV0IGsgPSAwLCBsZW4gPSBwbGFuZXMubGVuZ3RoOyBrIDwgbGVuOyArK2spIHsKICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGJvdW5kaW5nVm9sdW1lLmludGVyc2VjdFBsYW5lKAogICAgICAgICAgICBQbGFuZV9kZWZhdWx0LmZyb21DYXJ0ZXNpYW40KHBsYW5lc1trXSwgc2NyYXRjaFBsYW5lMikKICAgICAgICAgICk7CiAgICAgICAgICBpZiAocmVzdWx0ID09PSBJbnRlcnNlY3RfZGVmYXVsdC5PVVRTSURFKSB7CiAgICAgICAgICAgIHJldHVybiBJbnRlcnNlY3RfZGVmYXVsdC5PVVRTSURFOwogICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgPT09IEludGVyc2VjdF9kZWZhdWx0LklOVEVSU0VDVElORykgewogICAgICAgICAgICBpbnRlcnNlY3RpbmcgPSB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gaW50ZXJzZWN0aW5nID8gSW50ZXJzZWN0X2RlZmF1bHQuSU5URVJTRUNUSU5HIDogSW50ZXJzZWN0X2RlZmF1bHQuSU5TSURFOwogICAgICB9OwogICAgICBDdWxsaW5nVm9sdW1lLnByb3RvdHlwZS5jb21wdXRlVmlzaWJpbGl0eVdpdGhQbGFuZU1hc2sgPSBmdW5jdGlvbihib3VuZGluZ1ZvbHVtZSwgcGFyZW50UGxhbmVNYXNrKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYm91bmRpbmdWb2x1bWUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYm91bmRpbmdWb2x1bWUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBhcmVudFBsYW5lTWFzaykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwYXJlbnRQbGFuZU1hc2sgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmIChwYXJlbnRQbGFuZU1hc2sgPT09IEN1bGxpbmdWb2x1bWUuTUFTS19PVVRTSURFIHx8IHBhcmVudFBsYW5lTWFzayA9PT0gQ3VsbGluZ1ZvbHVtZS5NQVNLX0lOU0lERSkgewogICAgICAgICAgcmV0dXJuIHBhcmVudFBsYW5lTWFzazsKICAgICAgICB9CiAgICAgICAgbGV0IG1hc2sgPSBDdWxsaW5nVm9sdW1lLk1BU0tfSU5TSURFOwogICAgICAgIGNvbnN0IHBsYW5lcyA9IHRoaXMucGxhbmVzOwogICAgICAgIGZvciAobGV0IGsgPSAwLCBsZW4gPSBwbGFuZXMubGVuZ3RoOyBrIDwgbGVuOyArK2spIHsKICAgICAgICAgIGNvbnN0IGZsYWcgPSBrIDwgMzEgPyAxIDw8IGsgOiAwOwogICAgICAgICAgaWYgKGsgPCAzMSAmJiAocGFyZW50UGxhbmVNYXNrICYgZmxhZykgPT09IDApIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCByZXN1bHQgPSBib3VuZGluZ1ZvbHVtZS5pbnRlcnNlY3RQbGFuZSgKICAgICAgICAgICAgUGxhbmVfZGVmYXVsdC5mcm9tQ2FydGVzaWFuNChwbGFuZXNba10sIHNjcmF0Y2hQbGFuZTIpCiAgICAgICAgICApOwogICAgICAgICAgaWYgKHJlc3VsdCA9PT0gSW50ZXJzZWN0X2RlZmF1bHQuT1VUU0lERSkgewogICAgICAgICAgICByZXR1cm4gQ3VsbGluZ1ZvbHVtZS5NQVNLX09VVFNJREU7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCA9PT0gSW50ZXJzZWN0X2RlZmF1bHQuSU5URVJTRUNUSU5HKSB7CiAgICAgICAgICAgIG1hc2sgfD0gZmxhZzsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIG1hc2s7CiAgICAgIH07CiAgICAgIEN1bGxpbmdWb2x1bWUuTUFTS19PVVRTSURFID0gNDI5NDk2NzI5NTsKICAgICAgQ3VsbGluZ1ZvbHVtZS5NQVNLX0lOU0lERSA9IDA7CiAgICAgIEN1bGxpbmdWb2x1bWUuTUFTS19JTkRFVEVSTUlOQVRFID0gMjE0NzQ4MzY0NzsKICAgICAgQ3VsbGluZ1ZvbHVtZV9kZWZhdWx0ID0gQ3VsbGluZ1ZvbHVtZTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL09ydGhvZ3JhcGhpY09mZkNlbnRlckZydXN0dW0uanMKICBmdW5jdGlvbiBPcnRob2dyYXBoaWNPZmZDZW50ZXJGcnVzdHVtKG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgdGhpcy5sZWZ0ID0gb3B0aW9ucy5sZWZ0OwogICAgdGhpcy5fbGVmdCA9IHZvaWQgMDsKICAgIHRoaXMucmlnaHQgPSBvcHRpb25zLnJpZ2h0OwogICAgdGhpcy5fcmlnaHQgPSB2b2lkIDA7CiAgICB0aGlzLnRvcCA9IG9wdGlvbnMudG9wOwogICAgdGhpcy5fdG9wID0gdm9pZCAwOwogICAgdGhpcy5ib3R0b20gPSBvcHRpb25zLmJvdHRvbTsKICAgIHRoaXMuX2JvdHRvbSA9IHZvaWQgMDsKICAgIHRoaXMubmVhciA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMubmVhciwgMSk7CiAgICB0aGlzLl9uZWFyID0gdGhpcy5uZWFyOwogICAgdGhpcy5mYXIgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmZhciwgNWU4KTsKICAgIHRoaXMuX2ZhciA9IHRoaXMuZmFyOwogICAgdGhpcy5fY3VsbGluZ1ZvbHVtZSA9IG5ldyBDdWxsaW5nVm9sdW1lX2RlZmF1bHQoKTsKICAgIHRoaXMuX29ydGhvZ3JhcGhpY01hdHJpeCA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICB9CiAgZnVuY3Rpb24gdXBkYXRlKGZydXN0dW0pIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGZydXN0dW0ucmlnaHQpIHx8ICFkZWZpbmVkX2RlZmF1bHQoZnJ1c3R1bS5sZWZ0KSB8fCAhZGVmaW5lZF9kZWZhdWx0KGZydXN0dW0udG9wKSB8fCAhZGVmaW5lZF9kZWZhdWx0KGZydXN0dW0uYm90dG9tKSB8fCAhZGVmaW5lZF9kZWZhdWx0KGZydXN0dW0ubmVhcikgfHwgIWRlZmluZWRfZGVmYXVsdChmcnVzdHVtLmZhcikpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgInJpZ2h0LCBsZWZ0LCB0b3AsIGJvdHRvbSwgbmVhciwgb3IgZmFyIHBhcmFtZXRlcnMgYXJlIG5vdCBzZXQuIgogICAgICApOwogICAgfQogICAgaWYgKGZydXN0dW0udG9wICE9PSBmcnVzdHVtLl90b3AgfHwgZnJ1c3R1bS5ib3R0b20gIT09IGZydXN0dW0uX2JvdHRvbSB8fCBmcnVzdHVtLmxlZnQgIT09IGZydXN0dW0uX2xlZnQgfHwgZnJ1c3R1bS5yaWdodCAhPT0gZnJ1c3R1bS5fcmlnaHQgfHwgZnJ1c3R1bS5uZWFyICE9PSBmcnVzdHVtLl9uZWFyIHx8IGZydXN0dW0uZmFyICE9PSBmcnVzdHVtLl9mYXIpIHsKICAgICAgaWYgKGZydXN0dW0ubGVmdCA+IGZydXN0dW0ucmlnaHQpIHsKICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmlnaHQgbXVzdCBiZSBncmVhdGVyIHRoYW4gbGVmdC4iKTsKICAgICAgfQogICAgICBpZiAoZnJ1c3R1bS5ib3R0b20gPiBmcnVzdHVtLnRvcCkgewogICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ0b3AgbXVzdCBiZSBncmVhdGVyIHRoYW4gYm90dG9tLiIpOwogICAgICB9CiAgICAgIGlmIChmcnVzdHVtLm5lYXIgPD0gMCB8fCBmcnVzdHVtLm5lYXIgPiBmcnVzdHVtLmZhcikgewogICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgIm5lYXIgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVybyBhbmQgbGVzcyB0aGFuIGZhci4iCiAgICAgICAgKTsKICAgICAgfQogICAgICBmcnVzdHVtLl9sZWZ0ID0gZnJ1c3R1bS5sZWZ0OwogICAgICBmcnVzdHVtLl9yaWdodCA9IGZydXN0dW0ucmlnaHQ7CiAgICAgIGZydXN0dW0uX3RvcCA9IGZydXN0dW0udG9wOwogICAgICBmcnVzdHVtLl9ib3R0b20gPSBmcnVzdHVtLmJvdHRvbTsKICAgICAgZnJ1c3R1bS5fbmVhciA9IGZydXN0dW0ubmVhcjsKICAgICAgZnJ1c3R1bS5fZmFyID0gZnJ1c3R1bS5mYXI7CiAgICAgIGZydXN0dW0uX29ydGhvZ3JhcGhpY01hdHJpeCA9IE1hdHJpeDRfZGVmYXVsdC5jb21wdXRlT3J0aG9ncmFwaGljT2ZmQ2VudGVyKAogICAgICAgIGZydXN0dW0ubGVmdCwKICAgICAgICBmcnVzdHVtLnJpZ2h0LAogICAgICAgIGZydXN0dW0uYm90dG9tLAogICAgICAgIGZydXN0dW0udG9wLAogICAgICAgIGZydXN0dW0ubmVhciwKICAgICAgICBmcnVzdHVtLmZhciwKICAgICAgICBmcnVzdHVtLl9vcnRob2dyYXBoaWNNYXRyaXgKICAgICAgKTsKICAgIH0KICB9CiAgdmFyIGdldFBsYW5lc1JpZ2h0LCBnZXRQbGFuZXNOZWFyQ2VudGVyLCBnZXRQbGFuZXNQb2ludCwgbmVnYXRlU2NyYXRjaCwgT3J0aG9ncmFwaGljT2ZmQ2VudGVyRnJ1c3R1bV9kZWZhdWx0OwogIHZhciBpbml0X09ydGhvZ3JhcGhpY09mZkNlbnRlckZydXN0dW0gPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL09ydGhvZ3JhcGhpY09mZkNlbnRlckZydXN0dW0uanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW40KCk7CiAgICAgIGluaXRfQ3VsbGluZ1ZvbHVtZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9NYXRyaXg0KCk7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE9ydGhvZ3JhcGhpY09mZkNlbnRlckZydXN0dW0ucHJvdG90eXBlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgb3J0aG9ncmFwaGljIHByb2plY3Rpb24gbWF0cml4IGNvbXB1dGVkIGZyb20gdGhlIHZpZXcgZnJ1c3R1bS4KICAgICAgICAgKiBAbWVtYmVyb2YgT3J0aG9ncmFwaGljT2ZmQ2VudGVyRnJ1c3R1bS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7TWF0cml4NH0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBwcm9qZWN0aW9uTWF0cml4OiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB1cGRhdGUodGhpcyk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vcnRob2dyYXBoaWNNYXRyaXg7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgZ2V0UGxhbmVzUmlnaHQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGdldFBsYW5lc05lYXJDZW50ZXIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGdldFBsYW5lc1BvaW50ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBuZWdhdGVTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBPcnRob2dyYXBoaWNPZmZDZW50ZXJGcnVzdHVtLnByb3RvdHlwZS5jb21wdXRlQ3VsbGluZ1ZvbHVtZSA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBkaXJlY3Rpb24yLCB1cCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9uKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInBvc2l0aW9uIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChkaXJlY3Rpb24yKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImRpcmVjdGlvbiBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodXApKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgidXAgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHBsYW5lcyA9IHRoaXMuX2N1bGxpbmdWb2x1bWUucGxhbmVzOwogICAgICAgIGNvbnN0IHQgPSB0aGlzLnRvcDsKICAgICAgICBjb25zdCBiID0gdGhpcy5ib3R0b207CiAgICAgICAgY29uc3QgciA9IHRoaXMucmlnaHQ7CiAgICAgICAgY29uc3QgbCA9IHRoaXMubGVmdDsKICAgICAgICBjb25zdCBuID0gdGhpcy5uZWFyOwogICAgICAgIGNvbnN0IGYgPSB0aGlzLmZhcjsKICAgICAgICBjb25zdCByaWdodCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhkaXJlY3Rpb24yLCB1cCwgZ2V0UGxhbmVzUmlnaHQpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUocmlnaHQsIHJpZ2h0KTsKICAgICAgICBjb25zdCBuZWFyQ2VudGVyID0gZ2V0UGxhbmVzTmVhckNlbnRlcjsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihkaXJlY3Rpb24yLCBuLCBuZWFyQ2VudGVyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHBvc2l0aW9uLCBuZWFyQ2VudGVyLCBuZWFyQ2VudGVyKTsKICAgICAgICBjb25zdCBwb2ludCA9IGdldFBsYW5lc1BvaW50OwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHJpZ2h0LCBsLCBwb2ludCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChuZWFyQ2VudGVyLCBwb2ludCwgcG9pbnQpOwogICAgICAgIGxldCBwbGFuZSA9IHBsYW5lc1swXTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwbGFuZSkpIHsKICAgICAgICAgIHBsYW5lID0gcGxhbmVzWzBdID0gbmV3IENhcnRlc2lhbjRfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBwbGFuZS54ID0gcmlnaHQueDsKICAgICAgICBwbGFuZS55ID0gcmlnaHQueTsKICAgICAgICBwbGFuZS56ID0gcmlnaHQuejsKICAgICAgICBwbGFuZS53ID0gLUNhcnRlc2lhbjNfZGVmYXVsdC5kb3QocmlnaHQsIHBvaW50KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihyaWdodCwgciwgcG9pbnQpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobmVhckNlbnRlciwgcG9pbnQsIHBvaW50KTsKICAgICAgICBwbGFuZSA9IHBsYW5lc1sxXTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwbGFuZSkpIHsKICAgICAgICAgIHBsYW5lID0gcGxhbmVzWzFdID0gbmV3IENhcnRlc2lhbjRfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBwbGFuZS54ID0gLXJpZ2h0Lng7CiAgICAgICAgcGxhbmUueSA9IC1yaWdodC55OwogICAgICAgIHBsYW5lLnogPSAtcmlnaHQuejsKICAgICAgICBwbGFuZS53ID0gLUNhcnRlc2lhbjNfZGVmYXVsdC5kb3QoQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShyaWdodCwgbmVnYXRlU2NyYXRjaCksIHBvaW50KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcih1cCwgYiwgcG9pbnQpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobmVhckNlbnRlciwgcG9pbnQsIHBvaW50KTsKICAgICAgICBwbGFuZSA9IHBsYW5lc1syXTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwbGFuZSkpIHsKICAgICAgICAgIHBsYW5lID0gcGxhbmVzWzJdID0gbmV3IENhcnRlc2lhbjRfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBwbGFuZS54ID0gdXAueDsKICAgICAgICBwbGFuZS55ID0gdXAueTsKICAgICAgICBwbGFuZS56ID0gdXAuejsKICAgICAgICBwbGFuZS53ID0gLUNhcnRlc2lhbjNfZGVmYXVsdC5kb3QodXAsIHBvaW50KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcih1cCwgdCwgcG9pbnQpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobmVhckNlbnRlciwgcG9pbnQsIHBvaW50KTsKICAgICAgICBwbGFuZSA9IHBsYW5lc1szXTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwbGFuZSkpIHsKICAgICAgICAgIHBsYW5lID0gcGxhbmVzWzNdID0gbmV3IENhcnRlc2lhbjRfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBwbGFuZS54ID0gLXVwLng7CiAgICAgICAgcGxhbmUueSA9IC11cC55OwogICAgICAgIHBsYW5lLnogPSAtdXAuejsKICAgICAgICBwbGFuZS53ID0gLUNhcnRlc2lhbjNfZGVmYXVsdC5kb3QoQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZSh1cCwgbmVnYXRlU2NyYXRjaCksIHBvaW50KTsKICAgICAgICBwbGFuZSA9IHBsYW5lc1s0XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwbGFuZSkpIHsKICAgICAgICAgIHBsYW5lID0gcGxhbmVzWzRdID0gbmV3IENhcnRlc2lhbjRfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBwbGFuZS54ID0gZGlyZWN0aW9uMi54OwogICAgICAgIHBsYW5lLnkgPSBkaXJlY3Rpb24yLnk7CiAgICAgICAgcGxhbmUueiA9IGRpcmVjdGlvbjIuejsKICAgICAgICBwbGFuZS53ID0gLUNhcnRlc2lhbjNfZGVmYXVsdC5kb3QoZGlyZWN0aW9uMiwgbmVhckNlbnRlcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoZGlyZWN0aW9uMiwgZiwgcG9pbnQpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocG9zaXRpb24sIHBvaW50LCBwb2ludCk7CiAgICAgICAgcGxhbmUgPSBwbGFuZXNbNV07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocGxhbmUpKSB7CiAgICAgICAgICBwbGFuZSA9IHBsYW5lc1s1XSA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgcGxhbmUueCA9IC1kaXJlY3Rpb24yLng7CiAgICAgICAgcGxhbmUueSA9IC1kaXJlY3Rpb24yLnk7CiAgICAgICAgcGxhbmUueiA9IC1kaXJlY3Rpb24yLno7CiAgICAgICAgcGxhbmUudyA9IC1DYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUoZGlyZWN0aW9uMiwgbmVnYXRlU2NyYXRjaCksIHBvaW50KTsKICAgICAgICByZXR1cm4gdGhpcy5fY3VsbGluZ1ZvbHVtZTsKICAgICAgfTsKICAgICAgT3J0aG9ncmFwaGljT2ZmQ2VudGVyRnJ1c3R1bS5wcm90b3R5cGUuZ2V0UGl4ZWxEaW1lbnNpb25zID0gZnVuY3Rpb24oZHJhd2luZ0J1ZmZlcldpZHRoLCBkcmF3aW5nQnVmZmVySGVpZ2h0LCBkaXN0YW5jZSwgcGl4ZWxSYXRpbywgcmVzdWx0KSB7CiAgICAgICAgdXBkYXRlKHRoaXMpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGRyYXdpbmdCdWZmZXJXaWR0aCkgfHwgIWRlZmluZWRfZGVmYXVsdChkcmF3aW5nQnVmZmVySGVpZ2h0KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJCb3RoIGRyYXdpbmdCdWZmZXJXaWR0aCBhbmQgZHJhd2luZ0J1ZmZlckhlaWdodCBhcmUgcmVxdWlyZWQuIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgaWYgKGRyYXdpbmdCdWZmZXJXaWR0aCA8PSAwKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZHJhd2luZ0J1ZmZlcldpZHRoIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uIik7CiAgICAgICAgfQogICAgICAgIGlmIChkcmF3aW5nQnVmZmVySGVpZ2h0IDw9IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJkcmF3aW5nQnVmZmVySGVpZ2h0IG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGRpc3RhbmNlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImRpc3RhbmNlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwaXhlbFJhdGlvKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInBpeGVsUmF0aW8gaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmIChwaXhlbFJhdGlvIDw9IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwaXhlbFJhdGlvIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJBIHJlc3VsdCBvYmplY3QgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGZydXN0dW1XaWR0aCA9IHRoaXMucmlnaHQgLSB0aGlzLmxlZnQ7CiAgICAgICAgY29uc3QgZnJ1c3R1bUhlaWdodCA9IHRoaXMudG9wIC0gdGhpcy5ib3R0b207CiAgICAgICAgY29uc3QgcGl4ZWxXaWR0aCA9IHBpeGVsUmF0aW8gKiBmcnVzdHVtV2lkdGggLyBkcmF3aW5nQnVmZmVyV2lkdGg7CiAgICAgICAgY29uc3QgcGl4ZWxIZWlnaHQgPSBwaXhlbFJhdGlvICogZnJ1c3R1bUhlaWdodCAvIGRyYXdpbmdCdWZmZXJIZWlnaHQ7CiAgICAgICAgcmVzdWx0LnggPSBwaXhlbFdpZHRoOwogICAgICAgIHJlc3VsdC55ID0gcGl4ZWxIZWlnaHQ7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgT3J0aG9ncmFwaGljT2ZmQ2VudGVyRnJ1c3R1bS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgT3J0aG9ncmFwaGljT2ZmQ2VudGVyRnJ1c3R1bSgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQubGVmdCA9IHRoaXMubGVmdDsKICAgICAgICByZXN1bHQucmlnaHQgPSB0aGlzLnJpZ2h0OwogICAgICAgIHJlc3VsdC50b3AgPSB0aGlzLnRvcDsKICAgICAgICByZXN1bHQuYm90dG9tID0gdGhpcy5ib3R0b207CiAgICAgICAgcmVzdWx0Lm5lYXIgPSB0aGlzLm5lYXI7CiAgICAgICAgcmVzdWx0LmZhciA9IHRoaXMuZmFyOwogICAgICAgIHJlc3VsdC5fbGVmdCA9IHZvaWQgMDsKICAgICAgICByZXN1bHQuX3JpZ2h0ID0gdm9pZCAwOwogICAgICAgIHJlc3VsdC5fdG9wID0gdm9pZCAwOwogICAgICAgIHJlc3VsdC5fYm90dG9tID0gdm9pZCAwOwogICAgICAgIHJlc3VsdC5fbmVhciA9IHZvaWQgMDsKICAgICAgICByZXN1bHQuX2ZhciA9IHZvaWQgMDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBPcnRob2dyYXBoaWNPZmZDZW50ZXJGcnVzdHVtLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihvdGhlcikgewogICAgICAgIHJldHVybiBkZWZpbmVkX2RlZmF1bHQob3RoZXIpICYmIG90aGVyIGluc3RhbmNlb2YgT3J0aG9ncmFwaGljT2ZmQ2VudGVyRnJ1c3R1bSAmJiB0aGlzLnJpZ2h0ID09PSBvdGhlci5yaWdodCAmJiB0aGlzLmxlZnQgPT09IG90aGVyLmxlZnQgJiYgdGhpcy50b3AgPT09IG90aGVyLnRvcCAmJiB0aGlzLmJvdHRvbSA9PT0gb3RoZXIuYm90dG9tICYmIHRoaXMubmVhciA9PT0gb3RoZXIubmVhciAmJiB0aGlzLmZhciA9PT0gb3RoZXIuZmFyOwogICAgICB9OwogICAgICBPcnRob2dyYXBoaWNPZmZDZW50ZXJGcnVzdHVtLnByb3RvdHlwZS5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24ob3RoZXIsIHJlbGF0aXZlRXBzaWxvbiwgYWJzb2x1dGVFcHNpbG9uKSB7CiAgICAgICAgcmV0dXJuIG90aGVyID09PSB0aGlzIHx8IGRlZmluZWRfZGVmYXVsdChvdGhlcikgJiYgb3RoZXIgaW5zdGFuY2VvZiBPcnRob2dyYXBoaWNPZmZDZW50ZXJGcnVzdHVtICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgdGhpcy5yaWdodCwKICAgICAgICAgIG90aGVyLnJpZ2h0LAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHRoaXMubGVmdCwKICAgICAgICAgIG90aGVyLmxlZnQsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgdGhpcy50b3AsCiAgICAgICAgICBvdGhlci50b3AsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgdGhpcy5ib3R0b20sCiAgICAgICAgICBvdGhlci5ib3R0b20sCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgdGhpcy5uZWFyLAogICAgICAgICAgb3RoZXIubmVhciwKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICkgJiYgTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICB0aGlzLmZhciwKICAgICAgICAgIG90aGVyLmZhciwKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICk7CiAgICAgIH07CiAgICAgIE9ydGhvZ3JhcGhpY09mZkNlbnRlckZydXN0dW1fZGVmYXVsdCA9IE9ydGhvZ3JhcGhpY09mZkNlbnRlckZydXN0dW07CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9PcnRob2dyYXBoaWNGcnVzdHVtLmpzCiAgZnVuY3Rpb24gT3J0aG9ncmFwaGljRnJ1c3R1bShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIHRoaXMuX29mZkNlbnRlckZydXN0dW0gPSBuZXcgT3J0aG9ncmFwaGljT2ZmQ2VudGVyRnJ1c3R1bV9kZWZhdWx0KCk7CiAgICB0aGlzLndpZHRoID0gb3B0aW9ucy53aWR0aDsKICAgIHRoaXMuX3dpZHRoID0gdm9pZCAwOwogICAgdGhpcy5hc3BlY3RSYXRpbyA9IG9wdGlvbnMuYXNwZWN0UmF0aW87CiAgICB0aGlzLl9hc3BlY3RSYXRpbyA9IHZvaWQgMDsKICAgIHRoaXMubmVhciA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMubmVhciwgMSk7CiAgICB0aGlzLl9uZWFyID0gdGhpcy5uZWFyOwogICAgdGhpcy5mYXIgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmZhciwgNWU4KTsKICAgIHRoaXMuX2ZhciA9IHRoaXMuZmFyOwogIH0KICBmdW5jdGlvbiB1cGRhdGUyKGZydXN0dW0pIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGZydXN0dW0ud2lkdGgpIHx8ICFkZWZpbmVkX2RlZmF1bHQoZnJ1c3R1bS5hc3BlY3RSYXRpbykgfHwgIWRlZmluZWRfZGVmYXVsdChmcnVzdHVtLm5lYXIpIHx8ICFkZWZpbmVkX2RlZmF1bHQoZnJ1c3R1bS5mYXIpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJ3aWR0aCwgYXNwZWN0UmF0aW8sIG5lYXIsIG9yIGZhciBwYXJhbWV0ZXJzIGFyZSBub3Qgc2V0LiIKICAgICAgKTsKICAgIH0KICAgIGNvbnN0IGYgPSBmcnVzdHVtLl9vZmZDZW50ZXJGcnVzdHVtOwogICAgaWYgKGZydXN0dW0ud2lkdGggIT09IGZydXN0dW0uX3dpZHRoIHx8IGZydXN0dW0uYXNwZWN0UmF0aW8gIT09IGZydXN0dW0uX2FzcGVjdFJhdGlvIHx8IGZydXN0dW0ubmVhciAhPT0gZnJ1c3R1bS5fbmVhciB8fCBmcnVzdHVtLmZhciAhPT0gZnJ1c3R1bS5fZmFyKSB7CiAgICAgIGlmIChmcnVzdHVtLmFzcGVjdFJhdGlvIDwgMCkgewogICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhc3BlY3RSYXRpbyBtdXN0IGJlIHBvc2l0aXZlLiIpOwogICAgICB9CiAgICAgIGlmIChmcnVzdHVtLm5lYXIgPCAwIHx8IGZydXN0dW0ubmVhciA+IGZydXN0dW0uZmFyKSB7CiAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAibmVhciBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvIGFuZCBsZXNzIHRoYW4gZmFyLiIKICAgICAgICApOwogICAgICB9CiAgICAgIGZydXN0dW0uX2FzcGVjdFJhdGlvID0gZnJ1c3R1bS5hc3BlY3RSYXRpbzsKICAgICAgZnJ1c3R1bS5fd2lkdGggPSBmcnVzdHVtLndpZHRoOwogICAgICBmcnVzdHVtLl9uZWFyID0gZnJ1c3R1bS5uZWFyOwogICAgICBmcnVzdHVtLl9mYXIgPSBmcnVzdHVtLmZhcjsKICAgICAgY29uc3QgcmF0aW8gPSAxIC8gZnJ1c3R1bS5hc3BlY3RSYXRpbzsKICAgICAgZi5yaWdodCA9IGZydXN0dW0ud2lkdGggKiAwLjU7CiAgICAgIGYubGVmdCA9IC1mLnJpZ2h0OwogICAgICBmLnRvcCA9IHJhdGlvICogZi5yaWdodDsKICAgICAgZi5ib3R0b20gPSAtZi50b3A7CiAgICAgIGYubmVhciA9IGZydXN0dW0ubmVhcjsKICAgICAgZi5mYXIgPSBmcnVzdHVtLmZhcjsKICAgIH0KICB9CiAgdmFyIE9ydGhvZ3JhcGhpY0ZydXN0dW1fZGVmYXVsdDsKICB2YXIgaW5pdF9PcnRob2dyYXBoaWNGcnVzdHVtID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9PcnRob2dyYXBoaWNGcnVzdHVtLmpzIigpIHsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9PcnRob2dyYXBoaWNPZmZDZW50ZXJGcnVzdHVtKCk7CiAgICAgIE9ydGhvZ3JhcGhpY0ZydXN0dW0ucGFja2VkTGVuZ3RoID0gNDsKICAgICAgT3J0aG9ncmFwaGljRnJ1c3R1bS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUud2lkdGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLmFzcGVjdFJhdGlvOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5uZWFyOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gdmFsdWUuZmFyOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgT3J0aG9ncmFwaGljRnJ1c3R1bS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IE9ydGhvZ3JhcGhpY0ZydXN0dW0oKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LndpZHRoID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHQuYXNwZWN0UmF0aW8gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC5uZWFyID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHQuZmFyID0gYXJyYXlbc3RhcnRpbmdJbmRleF07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoT3J0aG9ncmFwaGljRnJ1c3R1bS5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBtYXRyaXggY29tcHV0ZWQgZnJvbSB0aGUgdmlldyBmcnVzdHVtLgogICAgICAgICAqIEBtZW1iZXJvZiBPcnRob2dyYXBoaWNGcnVzdHVtLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtNYXRyaXg0fQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIHByb2plY3Rpb25NYXRyaXg6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHVwZGF0ZTIodGhpcyk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vZmZDZW50ZXJGcnVzdHVtLnByb2plY3Rpb25NYXRyaXg7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBtYXRyaXggY29tcHV0ZWQgZnJvbSB0aGUgdmlldyBmcnVzdHVtLgogICAgICAgICAqIEBtZW1iZXJvZiBPcnRob2dyYXBoaWNGcnVzdHVtLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtPcnRob2dyYXBoaWNPZmZDZW50ZXJGcnVzdHVtfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICovCiAgICAgICAgb2ZmQ2VudGVyRnJ1c3R1bTogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdXBkYXRlMih0aGlzKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29mZkNlbnRlckZydXN0dW07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgT3J0aG9ncmFwaGljRnJ1c3R1bS5wcm90b3R5cGUuY29tcHV0ZUN1bGxpbmdWb2x1bWUgPSBmdW5jdGlvbihwb3NpdGlvbiwgZGlyZWN0aW9uMiwgdXApIHsKICAgICAgICB1cGRhdGUyKHRoaXMpOwogICAgICAgIHJldHVybiB0aGlzLl9vZmZDZW50ZXJGcnVzdHVtLmNvbXB1dGVDdWxsaW5nVm9sdW1lKHBvc2l0aW9uLCBkaXJlY3Rpb24yLCB1cCk7CiAgICAgIH07CiAgICAgIE9ydGhvZ3JhcGhpY0ZydXN0dW0ucHJvdG90eXBlLmdldFBpeGVsRGltZW5zaW9ucyA9IGZ1bmN0aW9uKGRyYXdpbmdCdWZmZXJXaWR0aCwgZHJhd2luZ0J1ZmZlckhlaWdodCwgZGlzdGFuY2UsIHBpeGVsUmF0aW8sIHJlc3VsdCkgewogICAgICAgIHVwZGF0ZTIodGhpcyk7CiAgICAgICAgcmV0dXJuIHRoaXMuX29mZkNlbnRlckZydXN0dW0uZ2V0UGl4ZWxEaW1lbnNpb25zKAogICAgICAgICAgZHJhd2luZ0J1ZmZlcldpZHRoLAogICAgICAgICAgZHJhd2luZ0J1ZmZlckhlaWdodCwKICAgICAgICAgIGRpc3RhbmNlLAogICAgICAgICAgcGl4ZWxSYXRpbywKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIE9ydGhvZ3JhcGhpY0ZydXN0dW0ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IE9ydGhvZ3JhcGhpY0ZydXN0dW0oKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LmFzcGVjdFJhdGlvID0gdGhpcy5hc3BlY3RSYXRpbzsKICAgICAgICByZXN1bHQud2lkdGggPSB0aGlzLndpZHRoOwogICAgICAgIHJlc3VsdC5uZWFyID0gdGhpcy5uZWFyOwogICAgICAgIHJlc3VsdC5mYXIgPSB0aGlzLmZhcjsKICAgICAgICByZXN1bHQuX2FzcGVjdFJhdGlvID0gdm9pZCAwOwogICAgICAgIHJlc3VsdC5fd2lkdGggPSB2b2lkIDA7CiAgICAgICAgcmVzdWx0Ll9uZWFyID0gdm9pZCAwOwogICAgICAgIHJlc3VsdC5fZmFyID0gdm9pZCAwOwogICAgICAgIHRoaXMuX29mZkNlbnRlckZydXN0dW0uY2xvbmUocmVzdWx0Ll9vZmZDZW50ZXJGcnVzdHVtKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBPcnRob2dyYXBoaWNGcnVzdHVtLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihvdGhlcikgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG90aGVyKSB8fCAhKG90aGVyIGluc3RhbmNlb2YgT3J0aG9ncmFwaGljRnJ1c3R1bSkpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgdXBkYXRlMih0aGlzKTsKICAgICAgICB1cGRhdGUyKG90aGVyKTsKICAgICAgICByZXR1cm4gdGhpcy53aWR0aCA9PT0gb3RoZXIud2lkdGggJiYgdGhpcy5hc3BlY3RSYXRpbyA9PT0gb3RoZXIuYXNwZWN0UmF0aW8gJiYgdGhpcy5fb2ZmQ2VudGVyRnJ1c3R1bS5lcXVhbHMob3RoZXIuX29mZkNlbnRlckZydXN0dW0pOwogICAgICB9OwogICAgICBPcnRob2dyYXBoaWNGcnVzdHVtLnByb3RvdHlwZS5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24ob3RoZXIsIHJlbGF0aXZlRXBzaWxvbiwgYWJzb2x1dGVFcHNpbG9uKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQob3RoZXIpIHx8ICEob3RoZXIgaW5zdGFuY2VvZiBPcnRob2dyYXBoaWNGcnVzdHVtKSkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICB1cGRhdGUyKHRoaXMpOwogICAgICAgIHVwZGF0ZTIob3RoZXIpOwogICAgICAgIHJldHVybiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHRoaXMud2lkdGgsCiAgICAgICAgICBvdGhlci53aWR0aCwKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICkgJiYgTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICB0aGlzLmFzcGVjdFJhdGlvLAogICAgICAgICAgb3RoZXIuYXNwZWN0UmF0aW8sCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApICYmIHRoaXMuX29mZkNlbnRlckZydXN0dW0uZXF1YWxzRXBzaWxvbigKICAgICAgICAgIG90aGVyLl9vZmZDZW50ZXJGcnVzdHVtLAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKTsKICAgICAgfTsKICAgICAgT3J0aG9ncmFwaGljRnJ1c3R1bV9kZWZhdWx0ID0gT3J0aG9ncmFwaGljRnJ1c3R1bTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BlcnNwZWN0aXZlT2ZmQ2VudGVyRnJ1c3R1bS5qcwogIGZ1bmN0aW9uIFBlcnNwZWN0aXZlT2ZmQ2VudGVyRnJ1c3R1bShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIHRoaXMubGVmdCA9IG9wdGlvbnMubGVmdDsKICAgIHRoaXMuX2xlZnQgPSB2b2lkIDA7CiAgICB0aGlzLnJpZ2h0ID0gb3B0aW9ucy5yaWdodDsKICAgIHRoaXMuX3JpZ2h0ID0gdm9pZCAwOwogICAgdGhpcy50b3AgPSBvcHRpb25zLnRvcDsKICAgIHRoaXMuX3RvcCA9IHZvaWQgMDsKICAgIHRoaXMuYm90dG9tID0gb3B0aW9ucy5ib3R0b207CiAgICB0aGlzLl9ib3R0b20gPSB2b2lkIDA7CiAgICB0aGlzLm5lYXIgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLm5lYXIsIDEpOwogICAgdGhpcy5fbmVhciA9IHRoaXMubmVhcjsKICAgIHRoaXMuZmFyID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5mYXIsIDVlOCk7CiAgICB0aGlzLl9mYXIgPSB0aGlzLmZhcjsKICAgIHRoaXMuX2N1bGxpbmdWb2x1bWUgPSBuZXcgQ3VsbGluZ1ZvbHVtZV9kZWZhdWx0KCk7CiAgICB0aGlzLl9wZXJzcGVjdGl2ZU1hdHJpeCA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICAgIHRoaXMuX2luZmluaXRlUGVyc3BlY3RpdmUgPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgfQogIGZ1bmN0aW9uIHVwZGF0ZTMoZnJ1c3R1bSkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZnJ1c3R1bS5yaWdodCkgfHwgIWRlZmluZWRfZGVmYXVsdChmcnVzdHVtLmxlZnQpIHx8ICFkZWZpbmVkX2RlZmF1bHQoZnJ1c3R1bS50b3ApIHx8ICFkZWZpbmVkX2RlZmF1bHQoZnJ1c3R1bS5ib3R0b20pIHx8ICFkZWZpbmVkX2RlZmF1bHQoZnJ1c3R1bS5uZWFyKSB8fCAhZGVmaW5lZF9kZWZhdWx0KGZydXN0dW0uZmFyKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAicmlnaHQsIGxlZnQsIHRvcCwgYm90dG9tLCBuZWFyLCBvciBmYXIgcGFyYW1ldGVycyBhcmUgbm90IHNldC4iCiAgICAgICk7CiAgICB9CiAgICBjb25zdCB0ID0gZnJ1c3R1bS50b3A7CiAgICBjb25zdCBiID0gZnJ1c3R1bS5ib3R0b207CiAgICBjb25zdCByID0gZnJ1c3R1bS5yaWdodDsKICAgIGNvbnN0IGwgPSBmcnVzdHVtLmxlZnQ7CiAgICBjb25zdCBuID0gZnJ1c3R1bS5uZWFyOwogICAgY29uc3QgZiA9IGZydXN0dW0uZmFyOwogICAgaWYgKHQgIT09IGZydXN0dW0uX3RvcCB8fCBiICE9PSBmcnVzdHVtLl9ib3R0b20gfHwgbCAhPT0gZnJ1c3R1bS5fbGVmdCB8fCByICE9PSBmcnVzdHVtLl9yaWdodCB8fCBuICE9PSBmcnVzdHVtLl9uZWFyIHx8IGYgIT09IGZydXN0dW0uX2ZhcikgewogICAgICBpZiAoZnJ1c3R1bS5uZWFyIDw9IDAgfHwgZnJ1c3R1bS5uZWFyID4gZnJ1c3R1bS5mYXIpIHsKICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICJuZWFyIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8gYW5kIGxlc3MgdGhhbiBmYXIuIgogICAgICAgICk7CiAgICAgIH0KICAgICAgZnJ1c3R1bS5fbGVmdCA9IGw7CiAgICAgIGZydXN0dW0uX3JpZ2h0ID0gcjsKICAgICAgZnJ1c3R1bS5fdG9wID0gdDsKICAgICAgZnJ1c3R1bS5fYm90dG9tID0gYjsKICAgICAgZnJ1c3R1bS5fbmVhciA9IG47CiAgICAgIGZydXN0dW0uX2ZhciA9IGY7CiAgICAgIGZydXN0dW0uX3BlcnNwZWN0aXZlTWF0cml4ID0gTWF0cml4NF9kZWZhdWx0LmNvbXB1dGVQZXJzcGVjdGl2ZU9mZkNlbnRlcigKICAgICAgICBsLAogICAgICAgIHIsCiAgICAgICAgYiwKICAgICAgICB0LAogICAgICAgIG4sCiAgICAgICAgZiwKICAgICAgICBmcnVzdHVtLl9wZXJzcGVjdGl2ZU1hdHJpeAogICAgICApOwogICAgICBmcnVzdHVtLl9pbmZpbml0ZVBlcnNwZWN0aXZlID0gTWF0cml4NF9kZWZhdWx0LmNvbXB1dGVJbmZpbml0ZVBlcnNwZWN0aXZlT2ZmQ2VudGVyKAogICAgICAgIGwsCiAgICAgICAgciwKICAgICAgICBiLAogICAgICAgIHQsCiAgICAgICAgbiwKICAgICAgICBmcnVzdHVtLl9pbmZpbml0ZVBlcnNwZWN0aXZlCiAgICAgICk7CiAgICB9CiAgfQogIHZhciBnZXRQbGFuZXNSaWdodDIsIGdldFBsYW5lc05lYXJDZW50ZXIyLCBnZXRQbGFuZXNGYXJDZW50ZXIsIGdldFBsYW5lc05vcm1hbCwgUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtX2RlZmF1bHQ7CiAgdmFyIGluaXRfUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9QZXJzcGVjdGl2ZU9mZkNlbnRlckZydXN0dW0uanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW40KCk7CiAgICAgIGluaXRfQ3VsbGluZ1ZvbHVtZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9NYXRyaXg0KCk7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFBlcnNwZWN0aXZlT2ZmQ2VudGVyRnJ1c3R1bS5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uIG1hdHJpeCBjb21wdXRlZCBmcm9tIHRoZSB2aWV3IGZydXN0dW0uCiAgICAgICAgICogQG1lbWJlcm9mIFBlcnNwZWN0aXZlT2ZmQ2VudGVyRnJ1c3R1bS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7TWF0cml4NH0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKgogICAgICAgICAqIEBzZWUgUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtI2luZmluaXRlUHJvamVjdGlvbk1hdHJpeAogICAgICAgICAqLwogICAgICAgIHByb2plY3Rpb25NYXRyaXg6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHVwZGF0ZTModGhpcyk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wZXJzcGVjdGl2ZU1hdHJpeDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IGNvbXB1dGVkIGZyb20gdGhlIHZpZXcgZnJ1c3R1bSB3aXRoIGFuIGluZmluaXRlIGZhciBwbGFuZS4KICAgICAgICAgKiBAbWVtYmVyb2YgUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtNYXRyaXg0fQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqCiAgICAgICAgICogQHNlZSBQZXJzcGVjdGl2ZU9mZkNlbnRlckZydXN0dW0jcHJvamVjdGlvbk1hdHJpeAogICAgICAgICAqLwogICAgICAgIGluZmluaXRlUHJvamVjdGlvbk1hdHJpeDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdXBkYXRlMyh0aGlzKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luZmluaXRlUGVyc3BlY3RpdmU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgZ2V0UGxhbmVzUmlnaHQyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBnZXRQbGFuZXNOZWFyQ2VudGVyMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZ2V0UGxhbmVzRmFyQ2VudGVyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBnZXRQbGFuZXNOb3JtYWwgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIFBlcnNwZWN0aXZlT2ZmQ2VudGVyRnJ1c3R1bS5wcm90b3R5cGUuY29tcHV0ZUN1bGxpbmdWb2x1bWUgPSBmdW5jdGlvbihwb3NpdGlvbiwgZGlyZWN0aW9uMiwgdXApIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwb3NpdGlvbikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwb3NpdGlvbiBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZGlyZWN0aW9uMikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJkaXJlY3Rpb24gaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHVwKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInVwIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBwbGFuZXMgPSB0aGlzLl9jdWxsaW5nVm9sdW1lLnBsYW5lczsKICAgICAgICBjb25zdCB0ID0gdGhpcy50b3A7CiAgICAgICAgY29uc3QgYiA9IHRoaXMuYm90dG9tOwogICAgICAgIGNvbnN0IHIgPSB0aGlzLnJpZ2h0OwogICAgICAgIGNvbnN0IGwgPSB0aGlzLmxlZnQ7CiAgICAgICAgY29uc3QgbiA9IHRoaXMubmVhcjsKICAgICAgICBjb25zdCBmID0gdGhpcy5mYXI7CiAgICAgICAgY29uc3QgcmlnaHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoZGlyZWN0aW9uMiwgdXAsIGdldFBsYW5lc1JpZ2h0Mik7CiAgICAgICAgY29uc3QgbmVhckNlbnRlciA9IGdldFBsYW5lc05lYXJDZW50ZXIyOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGRpcmVjdGlvbjIsIG4sIG5lYXJDZW50ZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocG9zaXRpb24sIG5lYXJDZW50ZXIsIG5lYXJDZW50ZXIpOwogICAgICAgIGNvbnN0IGZhckNlbnRlciA9IGdldFBsYW5lc0ZhckNlbnRlcjsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihkaXJlY3Rpb24yLCBmLCBmYXJDZW50ZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocG9zaXRpb24sIGZhckNlbnRlciwgZmFyQ2VudGVyKTsKICAgICAgICBjb25zdCBub3JtYWwyID0gZ2V0UGxhbmVzTm9ybWFsOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHJpZ2h0LCBsLCBub3JtYWwyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKG5lYXJDZW50ZXIsIG5vcm1hbDIsIG5vcm1hbDIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChub3JtYWwyLCBwb3NpdGlvbiwgbm9ybWFsMik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShub3JtYWwyLCBub3JtYWwyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3Mobm9ybWFsMiwgdXAsIG5vcm1hbDIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUobm9ybWFsMiwgbm9ybWFsMik7CiAgICAgICAgbGV0IHBsYW5lID0gcGxhbmVzWzBdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBsYW5lKSkgewogICAgICAgICAgcGxhbmUgPSBwbGFuZXNbMF0gPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIHBsYW5lLnggPSBub3JtYWwyLng7CiAgICAgICAgcGxhbmUueSA9IG5vcm1hbDIueTsKICAgICAgICBwbGFuZS56ID0gbm9ybWFsMi56OwogICAgICAgIHBsYW5lLncgPSAtQ2FydGVzaWFuM19kZWZhdWx0LmRvdChub3JtYWwyLCBwb3NpdGlvbik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIocmlnaHQsIHIsIG5vcm1hbDIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobmVhckNlbnRlciwgbm9ybWFsMiwgbm9ybWFsMik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KG5vcm1hbDIsIHBvc2l0aW9uLCBub3JtYWwyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3ModXAsIG5vcm1hbDIsIG5vcm1hbDIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUobm9ybWFsMiwgbm9ybWFsMik7CiAgICAgICAgcGxhbmUgPSBwbGFuZXNbMV07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocGxhbmUpKSB7CiAgICAgICAgICBwbGFuZSA9IHBsYW5lc1sxXSA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgcGxhbmUueCA9IG5vcm1hbDIueDsKICAgICAgICBwbGFuZS55ID0gbm9ybWFsMi55OwogICAgICAgIHBsYW5lLnogPSBub3JtYWwyLno7CiAgICAgICAgcGxhbmUudyA9IC1DYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KG5vcm1hbDIsIHBvc2l0aW9uKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcih1cCwgYiwgbm9ybWFsMik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChuZWFyQ2VudGVyLCBub3JtYWwyLCBub3JtYWwyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3Qobm9ybWFsMiwgcG9zaXRpb24sIG5vcm1hbDIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhyaWdodCwgbm9ybWFsMiwgbm9ybWFsMik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShub3JtYWwyLCBub3JtYWwyKTsKICAgICAgICBwbGFuZSA9IHBsYW5lc1syXTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwbGFuZSkpIHsKICAgICAgICAgIHBsYW5lID0gcGxhbmVzWzJdID0gbmV3IENhcnRlc2lhbjRfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBwbGFuZS54ID0gbm9ybWFsMi54OwogICAgICAgIHBsYW5lLnkgPSBub3JtYWwyLnk7CiAgICAgICAgcGxhbmUueiA9IG5vcm1hbDIuejsKICAgICAgICBwbGFuZS53ID0gLUNhcnRlc2lhbjNfZGVmYXVsdC5kb3Qobm9ybWFsMiwgcG9zaXRpb24pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHVwLCB0LCBub3JtYWwyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKG5lYXJDZW50ZXIsIG5vcm1hbDIsIG5vcm1hbDIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChub3JtYWwyLCBwb3NpdGlvbiwgbm9ybWFsMik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKG5vcm1hbDIsIHJpZ2h0LCBub3JtYWwyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKG5vcm1hbDIsIG5vcm1hbDIpOwogICAgICAgIHBsYW5lID0gcGxhbmVzWzNdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBsYW5lKSkgewogICAgICAgICAgcGxhbmUgPSBwbGFuZXNbM10gPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIHBsYW5lLnggPSBub3JtYWwyLng7CiAgICAgICAgcGxhbmUueSA9IG5vcm1hbDIueTsKICAgICAgICBwbGFuZS56ID0gbm9ybWFsMi56OwogICAgICAgIHBsYW5lLncgPSAtQ2FydGVzaWFuM19kZWZhdWx0LmRvdChub3JtYWwyLCBwb3NpdGlvbik7CiAgICAgICAgcGxhbmUgPSBwbGFuZXNbNF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocGxhbmUpKSB7CiAgICAgICAgICBwbGFuZSA9IHBsYW5lc1s0XSA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgcGxhbmUueCA9IGRpcmVjdGlvbjIueDsKICAgICAgICBwbGFuZS55ID0gZGlyZWN0aW9uMi55OwogICAgICAgIHBsYW5lLnogPSBkaXJlY3Rpb24yLno7CiAgICAgICAgcGxhbmUudyA9IC1DYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGRpcmVjdGlvbjIsIG5lYXJDZW50ZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUoZGlyZWN0aW9uMiwgbm9ybWFsMik7CiAgICAgICAgcGxhbmUgPSBwbGFuZXNbNV07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocGxhbmUpKSB7CiAgICAgICAgICBwbGFuZSA9IHBsYW5lc1s1XSA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgcGxhbmUueCA9IG5vcm1hbDIueDsKICAgICAgICBwbGFuZS55ID0gbm9ybWFsMi55OwogICAgICAgIHBsYW5lLnogPSBub3JtYWwyLno7CiAgICAgICAgcGxhbmUudyA9IC1DYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KG5vcm1hbDIsIGZhckNlbnRlcik7CiAgICAgICAgcmV0dXJuIHRoaXMuX2N1bGxpbmdWb2x1bWU7CiAgICAgIH07CiAgICAgIFBlcnNwZWN0aXZlT2ZmQ2VudGVyRnJ1c3R1bS5wcm90b3R5cGUuZ2V0UGl4ZWxEaW1lbnNpb25zID0gZnVuY3Rpb24oZHJhd2luZ0J1ZmZlcldpZHRoLCBkcmF3aW5nQnVmZmVySGVpZ2h0LCBkaXN0YW5jZSwgcGl4ZWxSYXRpbywgcmVzdWx0KSB7CiAgICAgICAgdXBkYXRlMyh0aGlzKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChkcmF3aW5nQnVmZmVyV2lkdGgpIHx8ICFkZWZpbmVkX2RlZmF1bHQoZHJhd2luZ0J1ZmZlckhlaWdodCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiQm90aCBkcmF3aW5nQnVmZmVyV2lkdGggYW5kIGRyYXdpbmdCdWZmZXJIZWlnaHQgYXJlIHJlcXVpcmVkLiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGlmIChkcmF3aW5nQnVmZmVyV2lkdGggPD0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImRyYXdpbmdCdWZmZXJXaWR0aCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoZHJhd2luZ0J1ZmZlckhlaWdodCA8PSAwKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZHJhd2luZ0J1ZmZlckhlaWdodCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChkaXN0YW5jZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJkaXN0YW5jZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocGl4ZWxSYXRpbykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwaXhlbFJhdGlvIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIGlmIChwaXhlbFJhdGlvIDw9IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwaXhlbFJhdGlvIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJBIHJlc3VsdCBvYmplY3QgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGludmVyc2VOZWFyID0gMSAvIHRoaXMubmVhcjsKICAgICAgICBsZXQgdGFuVGhldGEgPSB0aGlzLnRvcCAqIGludmVyc2VOZWFyOwogICAgICAgIGNvbnN0IHBpeGVsSGVpZ2h0ID0gMiAqIHBpeGVsUmF0aW8gKiBkaXN0YW5jZSAqIHRhblRoZXRhIC8gZHJhd2luZ0J1ZmZlckhlaWdodDsKICAgICAgICB0YW5UaGV0YSA9IHRoaXMucmlnaHQgKiBpbnZlcnNlTmVhcjsKICAgICAgICBjb25zdCBwaXhlbFdpZHRoID0gMiAqIHBpeGVsUmF0aW8gKiBkaXN0YW5jZSAqIHRhblRoZXRhIC8gZHJhd2luZ0J1ZmZlcldpZHRoOwogICAgICAgIHJlc3VsdC54ID0gcGl4ZWxXaWR0aDsKICAgICAgICByZXN1bHQueSA9IHBpeGVsSGVpZ2h0OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFBlcnNwZWN0aXZlT2ZmQ2VudGVyRnJ1c3R1bS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtKCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5yaWdodCA9IHRoaXMucmlnaHQ7CiAgICAgICAgcmVzdWx0LmxlZnQgPSB0aGlzLmxlZnQ7CiAgICAgICAgcmVzdWx0LnRvcCA9IHRoaXMudG9wOwogICAgICAgIHJlc3VsdC5ib3R0b20gPSB0aGlzLmJvdHRvbTsKICAgICAgICByZXN1bHQubmVhciA9IHRoaXMubmVhcjsKICAgICAgICByZXN1bHQuZmFyID0gdGhpcy5mYXI7CiAgICAgICAgcmVzdWx0Ll9sZWZ0ID0gdm9pZCAwOwogICAgICAgIHJlc3VsdC5fcmlnaHQgPSB2b2lkIDA7CiAgICAgICAgcmVzdWx0Ll90b3AgPSB2b2lkIDA7CiAgICAgICAgcmVzdWx0Ll9ib3R0b20gPSB2b2lkIDA7CiAgICAgICAgcmVzdWx0Ll9uZWFyID0gdm9pZCAwOwogICAgICAgIHJlc3VsdC5fZmFyID0gdm9pZCAwOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFBlcnNwZWN0aXZlT2ZmQ2VudGVyRnJ1c3R1bS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ob3RoZXIpIHsKICAgICAgICByZXR1cm4gZGVmaW5lZF9kZWZhdWx0KG90aGVyKSAmJiBvdGhlciBpbnN0YW5jZW9mIFBlcnNwZWN0aXZlT2ZmQ2VudGVyRnJ1c3R1bSAmJiB0aGlzLnJpZ2h0ID09PSBvdGhlci5yaWdodCAmJiB0aGlzLmxlZnQgPT09IG90aGVyLmxlZnQgJiYgdGhpcy50b3AgPT09IG90aGVyLnRvcCAmJiB0aGlzLmJvdHRvbSA9PT0gb3RoZXIuYm90dG9tICYmIHRoaXMubmVhciA9PT0gb3RoZXIubmVhciAmJiB0aGlzLmZhciA9PT0gb3RoZXIuZmFyOwogICAgICB9OwogICAgICBQZXJzcGVjdGl2ZU9mZkNlbnRlckZydXN0dW0ucHJvdG90eXBlLmVxdWFsc0Vwc2lsb24gPSBmdW5jdGlvbihvdGhlciwgcmVsYXRpdmVFcHNpbG9uLCBhYnNvbHV0ZUVwc2lsb24pIHsKICAgICAgICByZXR1cm4gb3RoZXIgPT09IHRoaXMgfHwgZGVmaW5lZF9kZWZhdWx0KG90aGVyKSAmJiBvdGhlciBpbnN0YW5jZW9mIFBlcnNwZWN0aXZlT2ZmQ2VudGVyRnJ1c3R1bSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHRoaXMucmlnaHQsCiAgICAgICAgICBvdGhlci5yaWdodCwKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICkgJiYgTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICB0aGlzLmxlZnQsCiAgICAgICAgICBvdGhlci5sZWZ0LAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHRoaXMudG9wLAogICAgICAgICAgb3RoZXIudG9wLAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHRoaXMuYm90dG9tLAogICAgICAgICAgb3RoZXIuYm90dG9tLAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHRoaXMubmVhciwKICAgICAgICAgIG90aGVyLm5lYXIsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgdGhpcy5mYXIsCiAgICAgICAgICBvdGhlci5mYXIsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApOwogICAgICB9OwogICAgICBQZXJzcGVjdGl2ZU9mZkNlbnRlckZydXN0dW1fZGVmYXVsdCA9IFBlcnNwZWN0aXZlT2ZmQ2VudGVyRnJ1c3R1bTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BlcnNwZWN0aXZlRnJ1c3R1bS5qcwogIGZ1bmN0aW9uIFBlcnNwZWN0aXZlRnJ1c3R1bShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIHRoaXMuX29mZkNlbnRlckZydXN0dW0gPSBuZXcgUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtX2RlZmF1bHQoKTsKICAgIHRoaXMuZm92ID0gb3B0aW9ucy5mb3Y7CiAgICB0aGlzLl9mb3YgPSB2b2lkIDA7CiAgICB0aGlzLl9mb3Z5ID0gdm9pZCAwOwogICAgdGhpcy5fc3NlRGVub21pbmF0b3IgPSB2b2lkIDA7CiAgICB0aGlzLmFzcGVjdFJhdGlvID0gb3B0aW9ucy5hc3BlY3RSYXRpbzsKICAgIHRoaXMuX2FzcGVjdFJhdGlvID0gdm9pZCAwOwogICAgdGhpcy5uZWFyID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5uZWFyLCAxKTsKICAgIHRoaXMuX25lYXIgPSB0aGlzLm5lYXI7CiAgICB0aGlzLmZhciA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZmFyLCA1ZTgpOwogICAgdGhpcy5fZmFyID0gdGhpcy5mYXI7CiAgICB0aGlzLnhPZmZzZXQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnhPZmZzZXQsIDApOwogICAgdGhpcy5feE9mZnNldCA9IHRoaXMueE9mZnNldDsKICAgIHRoaXMueU9mZnNldCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMueU9mZnNldCwgMCk7CiAgICB0aGlzLl95T2Zmc2V0ID0gdGhpcy55T2Zmc2V0OwogIH0KICBmdW5jdGlvbiB1cGRhdGU0KGZydXN0dW0pIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGZydXN0dW0uZm92KSB8fCAhZGVmaW5lZF9kZWZhdWx0KGZydXN0dW0uYXNwZWN0UmF0aW8pIHx8ICFkZWZpbmVkX2RlZmF1bHQoZnJ1c3R1bS5uZWFyKSB8fCAhZGVmaW5lZF9kZWZhdWx0KGZydXN0dW0uZmFyKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAiZm92LCBhc3BlY3RSYXRpbywgbmVhciwgb3IgZmFyIHBhcmFtZXRlcnMgYXJlIG5vdCBzZXQuIgogICAgICApOwogICAgfQogICAgY29uc3QgZiA9IGZydXN0dW0uX29mZkNlbnRlckZydXN0dW07CiAgICBpZiAoZnJ1c3R1bS5mb3YgIT09IGZydXN0dW0uX2ZvdiB8fCBmcnVzdHVtLmFzcGVjdFJhdGlvICE9PSBmcnVzdHVtLl9hc3BlY3RSYXRpbyB8fCBmcnVzdHVtLm5lYXIgIT09IGZydXN0dW0uX25lYXIgfHwgZnJ1c3R1bS5mYXIgIT09IGZydXN0dW0uX2ZhciB8fCBmcnVzdHVtLnhPZmZzZXQgIT09IGZydXN0dW0uX3hPZmZzZXQgfHwgZnJ1c3R1bS55T2Zmc2V0ICE9PSBmcnVzdHVtLl95T2Zmc2V0KSB7CiAgICAgIGlmIChmcnVzdHVtLmZvdiA8IDAgfHwgZnJ1c3R1bS5mb3YgPj0gTWF0aC5QSSkgewogICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJmb3YgbXVzdCBiZSBpbiB0aGUgcmFuZ2UgWzAsIFBJKS4iKTsKICAgICAgfQogICAgICBpZiAoZnJ1c3R1bS5hc3BlY3RSYXRpbyA8IDApIHsKICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXNwZWN0UmF0aW8gbXVzdCBiZSBwb3NpdGl2ZS4iKTsKICAgICAgfQogICAgICBpZiAoZnJ1c3R1bS5uZWFyIDwgMCB8fCBmcnVzdHVtLm5lYXIgPiBmcnVzdHVtLmZhcikgewogICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgIm5lYXIgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVybyBhbmQgbGVzcyB0aGFuIGZhci4iCiAgICAgICAgKTsKICAgICAgfQogICAgICBmcnVzdHVtLl9hc3BlY3RSYXRpbyA9IGZydXN0dW0uYXNwZWN0UmF0aW87CiAgICAgIGZydXN0dW0uX2ZvdiA9IGZydXN0dW0uZm92OwogICAgICBmcnVzdHVtLl9mb3Z5ID0gZnJ1c3R1bS5hc3BlY3RSYXRpbyA8PSAxID8gZnJ1c3R1bS5mb3YgOiBNYXRoLmF0YW4oTWF0aC50YW4oZnJ1c3R1bS5mb3YgKiAwLjUpIC8gZnJ1c3R1bS5hc3BlY3RSYXRpbykgKiAyOwogICAgICBmcnVzdHVtLl9uZWFyID0gZnJ1c3R1bS5uZWFyOwogICAgICBmcnVzdHVtLl9mYXIgPSBmcnVzdHVtLmZhcjsKICAgICAgZnJ1c3R1bS5fc3NlRGVub21pbmF0b3IgPSAyICogTWF0aC50YW4oMC41ICogZnJ1c3R1bS5fZm92eSk7CiAgICAgIGZydXN0dW0uX3hPZmZzZXQgPSBmcnVzdHVtLnhPZmZzZXQ7CiAgICAgIGZydXN0dW0uX3lPZmZzZXQgPSBmcnVzdHVtLnlPZmZzZXQ7CiAgICAgIGYudG9wID0gZnJ1c3R1bS5uZWFyICogTWF0aC50YW4oMC41ICogZnJ1c3R1bS5fZm92eSk7CiAgICAgIGYuYm90dG9tID0gLWYudG9wOwogICAgICBmLnJpZ2h0ID0gZnJ1c3R1bS5hc3BlY3RSYXRpbyAqIGYudG9wOwogICAgICBmLmxlZnQgPSAtZi5yaWdodDsKICAgICAgZi5uZWFyID0gZnJ1c3R1bS5uZWFyOwogICAgICBmLmZhciA9IGZydXN0dW0uZmFyOwogICAgICBmLnJpZ2h0ICs9IGZydXN0dW0ueE9mZnNldDsKICAgICAgZi5sZWZ0ICs9IGZydXN0dW0ueE9mZnNldDsKICAgICAgZi50b3AgKz0gZnJ1c3R1bS55T2Zmc2V0OwogICAgICBmLmJvdHRvbSArPSBmcnVzdHVtLnlPZmZzZXQ7CiAgICB9CiAgfQogIHZhciBQZXJzcGVjdGl2ZUZydXN0dW1fZGVmYXVsdDsKICB2YXIgaW5pdF9QZXJzcGVjdGl2ZUZydXN0dW0gPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BlcnNwZWN0aXZlRnJ1c3R1bS5qcyIoKSB7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtKCk7CiAgICAgIFBlcnNwZWN0aXZlRnJ1c3R1bS5wYWNrZWRMZW5ndGggPSA2OwogICAgICBQZXJzcGVjdGl2ZUZydXN0dW0ucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLmZvdjsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuYXNwZWN0UmF0aW87CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLm5lYXI7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLmZhcjsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUueE9mZnNldDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlLnlPZmZzZXQ7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBQZXJzcGVjdGl2ZUZydXN0dW0udW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBQZXJzcGVjdGl2ZUZydXN0dW0oKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LmZvdiA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0LmFzcGVjdFJhdGlvID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHQubmVhciA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0LmZhciA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0LnhPZmZzZXQgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC55T2Zmc2V0ID0gYXJyYXlbc3RhcnRpbmdJbmRleF07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUGVyc3BlY3RpdmVGcnVzdHVtLnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IGNvbXB1dGVkIGZyb20gdGhlIHZpZXcgZnJ1c3R1bS4KICAgICAgICAgKiBAbWVtYmVyb2YgUGVyc3BlY3RpdmVGcnVzdHVtLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtNYXRyaXg0fQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqCiAgICAgICAgICogQHNlZSBQZXJzcGVjdGl2ZUZydXN0dW0jaW5maW5pdGVQcm9qZWN0aW9uTWF0cml4CiAgICAgICAgICovCiAgICAgICAgcHJvamVjdGlvbk1hdHJpeDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdXBkYXRlNCh0aGlzKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29mZkNlbnRlckZydXN0dW0ucHJvamVjdGlvbk1hdHJpeDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uIG1hdHJpeCBjb21wdXRlZCBmcm9tIHRoZSB2aWV3IGZydXN0dW0gd2l0aCBhbiBpbmZpbml0ZSBmYXIgcGxhbmUuCiAgICAgICAgICogQG1lbWJlcm9mIFBlcnNwZWN0aXZlRnJ1c3R1bS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7TWF0cml4NH0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKgogICAgICAgICAqIEBzZWUgUGVyc3BlY3RpdmVGcnVzdHVtI3Byb2plY3Rpb25NYXRyaXgKICAgICAgICAgKi8KICAgICAgICBpbmZpbml0ZVByb2plY3Rpb25NYXRyaXg6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHVwZGF0ZTQodGhpcyk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vZmZDZW50ZXJGcnVzdHVtLmluZmluaXRlUHJvamVjdGlvbk1hdHJpeDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIGFuZ2xlIG9mIHRoZSB2ZXJ0aWNhbCBmaWVsZCBvZiB2aWV3LCBpbiByYWRpYW5zLgogICAgICAgICAqIEBtZW1iZXJvZiBQZXJzcGVjdGl2ZUZydXN0dW0ucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKiBAZGVmYXVsdCB1bmRlZmluZWQKICAgICAgICAgKi8KICAgICAgICBmb3Z5OiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB1cGRhdGU0KHRoaXMpOwogICAgICAgICAgICByZXR1cm4gdGhpcy5fZm92eTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICovCiAgICAgICAgc3NlRGVub21pbmF0b3I6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHVwZGF0ZTQodGhpcyk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zc2VEZW5vbWluYXRvcjsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uIG1hdHJpeCBjb21wdXRlZCBmcm9tIHRoZSB2aWV3IGZydXN0dW0uCiAgICAgICAgICogQG1lbWJlcm9mIFBlcnNwZWN0aXZlRnJ1c3R1bS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7UGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICovCiAgICAgICAgb2ZmQ2VudGVyRnJ1c3R1bTogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdXBkYXRlNCh0aGlzKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29mZkNlbnRlckZydXN0dW07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgUGVyc3BlY3RpdmVGcnVzdHVtLnByb3RvdHlwZS5jb21wdXRlQ3VsbGluZ1ZvbHVtZSA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBkaXJlY3Rpb24yLCB1cCkgewogICAgICAgIHVwZGF0ZTQodGhpcyk7CiAgICAgICAgcmV0dXJuIHRoaXMuX29mZkNlbnRlckZydXN0dW0uY29tcHV0ZUN1bGxpbmdWb2x1bWUocG9zaXRpb24sIGRpcmVjdGlvbjIsIHVwKTsKICAgICAgfTsKICAgICAgUGVyc3BlY3RpdmVGcnVzdHVtLnByb3RvdHlwZS5nZXRQaXhlbERpbWVuc2lvbnMgPSBmdW5jdGlvbihkcmF3aW5nQnVmZmVyV2lkdGgsIGRyYXdpbmdCdWZmZXJIZWlnaHQsIGRpc3RhbmNlLCBwaXhlbFJhdGlvLCByZXN1bHQpIHsKICAgICAgICB1cGRhdGU0KHRoaXMpOwogICAgICAgIHJldHVybiB0aGlzLl9vZmZDZW50ZXJGcnVzdHVtLmdldFBpeGVsRGltZW5zaW9ucygKICAgICAgICAgIGRyYXdpbmdCdWZmZXJXaWR0aCwKICAgICAgICAgIGRyYXdpbmdCdWZmZXJIZWlnaHQsCiAgICAgICAgICBkaXN0YW5jZSwKICAgICAgICAgIHBpeGVsUmF0aW8sCiAgICAgICAgICByZXN1bHQKICAgICAgICApOwogICAgICB9OwogICAgICBQZXJzcGVjdGl2ZUZydXN0dW0ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IFBlcnNwZWN0aXZlRnJ1c3R1bSgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuYXNwZWN0UmF0aW8gPSB0aGlzLmFzcGVjdFJhdGlvOwogICAgICAgIHJlc3VsdC5mb3YgPSB0aGlzLmZvdjsKICAgICAgICByZXN1bHQubmVhciA9IHRoaXMubmVhcjsKICAgICAgICByZXN1bHQuZmFyID0gdGhpcy5mYXI7CiAgICAgICAgcmVzdWx0Ll9hc3BlY3RSYXRpbyA9IHZvaWQgMDsKICAgICAgICByZXN1bHQuX2ZvdiA9IHZvaWQgMDsKICAgICAgICByZXN1bHQuX25lYXIgPSB2b2lkIDA7CiAgICAgICAgcmVzdWx0Ll9mYXIgPSB2b2lkIDA7CiAgICAgICAgdGhpcy5fb2ZmQ2VudGVyRnJ1c3R1bS5jbG9uZShyZXN1bHQuX29mZkNlbnRlckZydXN0dW0pOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFBlcnNwZWN0aXZlRnJ1c3R1bS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ob3RoZXIpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChvdGhlcikgfHwgIShvdGhlciBpbnN0YW5jZW9mIFBlcnNwZWN0aXZlRnJ1c3R1bSkpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgdXBkYXRlNCh0aGlzKTsKICAgICAgICB1cGRhdGU0KG90aGVyKTsKICAgICAgICByZXR1cm4gdGhpcy5mb3YgPT09IG90aGVyLmZvdiAmJiB0aGlzLmFzcGVjdFJhdGlvID09PSBvdGhlci5hc3BlY3RSYXRpbyAmJiB0aGlzLl9vZmZDZW50ZXJGcnVzdHVtLmVxdWFscyhvdGhlci5fb2ZmQ2VudGVyRnJ1c3R1bSk7CiAgICAgIH07CiAgICAgIFBlcnNwZWN0aXZlRnJ1c3R1bS5wcm90b3R5cGUuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKG90aGVyLCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG90aGVyKSB8fCAhKG90aGVyIGluc3RhbmNlb2YgUGVyc3BlY3RpdmVGcnVzdHVtKSkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICB1cGRhdGU0KHRoaXMpOwogICAgICAgIHVwZGF0ZTQob3RoZXIpOwogICAgICAgIHJldHVybiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHRoaXMuZm92LAogICAgICAgICAgb3RoZXIuZm92LAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHRoaXMuYXNwZWN0UmF0aW8sCiAgICAgICAgICBvdGhlci5hc3BlY3RSYXRpbywKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICkgJiYgdGhpcy5fb2ZmQ2VudGVyRnJ1c3R1bS5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgb3RoZXIuX29mZkNlbnRlckZydXN0dW0sCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApOwogICAgICB9OwogICAgICBQZXJzcGVjdGl2ZUZydXN0dW1fZGVmYXVsdCA9IFBlcnNwZWN0aXZlRnJ1c3R1bTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0ZydXN0dW1HZW9tZXRyeS5qcwogIGZ1bmN0aW9uIEZydXN0dW1HZW9tZXRyeShvcHRpb25zKSB7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm9wdGlvbnMiLCBvcHRpb25zKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgib3B0aW9ucy5mcnVzdHVtIiwgb3B0aW9ucy5mcnVzdHVtKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgib3B0aW9ucy5vcmlnaW4iLCBvcHRpb25zLm9yaWdpbik7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm9wdGlvbnMub3JpZW50YXRpb24iLCBvcHRpb25zLm9yaWVudGF0aW9uKTsKICAgIGNvbnN0IGZydXN0dW0gPSBvcHRpb25zLmZydXN0dW07CiAgICBjb25zdCBvcmllbnRhdGlvbiA9IG9wdGlvbnMub3JpZW50YXRpb247CiAgICBjb25zdCBvcmlnaW4gPSBvcHRpb25zLm9yaWdpbjsKICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMudmVydGV4Rm9ybWF0LCBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5ERUZBVUxUKTsKICAgIGNvbnN0IGRyYXdOZWFyUGxhbmUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLl9kcmF3TmVhclBsYW5lLCB0cnVlKTsKICAgIGxldCBmcnVzdHVtVHlwZTsKICAgIGxldCBmcnVzdHVtUGFja2VkTGVuZ3RoOwogICAgaWYgKGZydXN0dW0gaW5zdGFuY2VvZiBQZXJzcGVjdGl2ZUZydXN0dW1fZGVmYXVsdCkgewogICAgICBmcnVzdHVtVHlwZSA9IFBFUlNQRUNUSVZFOwogICAgICBmcnVzdHVtUGFja2VkTGVuZ3RoID0gUGVyc3BlY3RpdmVGcnVzdHVtX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgfSBlbHNlIGlmIChmcnVzdHVtIGluc3RhbmNlb2YgT3J0aG9ncmFwaGljRnJ1c3R1bV9kZWZhdWx0KSB7CiAgICAgIGZydXN0dW1UeXBlID0gT1JUSE9HUkFQSElDOwogICAgICBmcnVzdHVtUGFja2VkTGVuZ3RoID0gT3J0aG9ncmFwaGljRnJ1c3R1bV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgIH0KICAgIHRoaXMuX2ZydXN0dW1UeXBlID0gZnJ1c3R1bVR5cGU7CiAgICB0aGlzLl9mcnVzdHVtID0gZnJ1c3R1bS5jbG9uZSgpOwogICAgdGhpcy5fb3JpZ2luID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG9yaWdpbik7CiAgICB0aGlzLl9vcmllbnRhdGlvbiA9IFF1YXRlcm5pb25fZGVmYXVsdC5jbG9uZShvcmllbnRhdGlvbik7CiAgICB0aGlzLl9kcmF3TmVhclBsYW5lID0gZHJhd05lYXJQbGFuZTsKICAgIHRoaXMuX3ZlcnRleEZvcm1hdCA9IHZlcnRleEZvcm1hdDsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlRnJ1c3R1bUdlb21ldHJ5IjsKICAgIHRoaXMucGFja2VkTGVuZ3RoID0gMiArIGZydXN0dW1QYWNrZWRMZW5ndGggKyBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgUXVhdGVybmlvbl9kZWZhdWx0LnBhY2tlZExlbmd0aCArIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICB9CiAgZnVuY3Rpb24gZ2V0QXR0cmlidXRlcyhvZmZzZXQsIG5vcm1hbHMsIHRhbmdlbnRzLCBiaXRhbmdlbnRzLCBzdCwgbm9ybWFsMiwgdGFuZ2VudCwgYml0YW5nZW50KSB7CiAgICBjb25zdCBzdE9mZnNldCA9IG9mZnNldCAvIDMgKiAyOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyArK2kpIHsKICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChub3JtYWxzKSkgewogICAgICAgIG5vcm1hbHNbb2Zmc2V0XSA9IG5vcm1hbDIueDsKICAgICAgICBub3JtYWxzW29mZnNldCArIDFdID0gbm9ybWFsMi55OwogICAgICAgIG5vcm1hbHNbb2Zmc2V0ICsgMl0gPSBub3JtYWwyLno7CiAgICAgIH0KICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh0YW5nZW50cykpIHsKICAgICAgICB0YW5nZW50c1tvZmZzZXRdID0gdGFuZ2VudC54OwogICAgICAgIHRhbmdlbnRzW29mZnNldCArIDFdID0gdGFuZ2VudC55OwogICAgICAgIHRhbmdlbnRzW29mZnNldCArIDJdID0gdGFuZ2VudC56OwogICAgICB9CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYml0YW5nZW50cykpIHsKICAgICAgICBiaXRhbmdlbnRzW29mZnNldF0gPSBiaXRhbmdlbnQueDsKICAgICAgICBiaXRhbmdlbnRzW29mZnNldCArIDFdID0gYml0YW5nZW50Lnk7CiAgICAgICAgYml0YW5nZW50c1tvZmZzZXQgKyAyXSA9IGJpdGFuZ2VudC56OwogICAgICB9CiAgICAgIG9mZnNldCArPSAzOwogICAgfQogICAgc3Rbc3RPZmZzZXRdID0gMDsKICAgIHN0W3N0T2Zmc2V0ICsgMV0gPSAwOwogICAgc3Rbc3RPZmZzZXQgKyAyXSA9IDE7CiAgICBzdFtzdE9mZnNldCArIDNdID0gMDsKICAgIHN0W3N0T2Zmc2V0ICsgNF0gPSAxOwogICAgc3Rbc3RPZmZzZXQgKyA1XSA9IDE7CiAgICBzdFtzdE9mZnNldCArIDZdID0gMDsKICAgIHN0W3N0T2Zmc2V0ICsgN10gPSAxOwogIH0KICB2YXIgUEVSU1BFQ1RJVkUsIE9SVEhPR1JBUEhJQywgc2NyYXRjaFBhY2tQZXJzcGVjdGl2ZSwgc2NyYXRjaFBhY2tPcnRob2dyYXBoaWMsIHNjcmF0Y2hQYWNrUXVhdGVybmlvbiwgc2NyYXRjaFBhY2tvcmlnaW4sIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQ3LCBzY3JhdGNoUm90YXRpb25NYXRyaXgsIHNjcmF0Y2hWaWV3TWF0cml4LCBzY3JhdGNoSW52ZXJzZU1hdHJpeCwgc2NyYXRjaFhEaXJlY3Rpb24sIHNjcmF0Y2hZRGlyZWN0aW9uLCBzY3JhdGNoWkRpcmVjdGlvbiwgc2NyYXRjaE5lZ2F0aXZlWCwgc2NyYXRjaE5lZ2F0aXZlWSwgc2NyYXRjaE5lZ2F0aXZlWiwgZnJ1c3R1bVNwbGl0cywgZnJ1c3R1bUNvcm5lcnNOREMsIHNjcmF0Y2hGcnVzdHVtQ29ybmVycywgRnJ1c3R1bUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfRnJ1c3R1bUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9GcnVzdHVtR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRlc2lhbjQoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9NYXRyaXgzKCk7CiAgICAgIGluaXRfTWF0cml4NCgpOwogICAgICBpbml0X09ydGhvZ3JhcGhpY0ZydXN0dW0oKTsKICAgICAgaW5pdF9QZXJzcGVjdGl2ZUZydXN0dW0oKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIGluaXRfUXVhdGVybmlvbigpOwogICAgICBpbml0X1ZlcnRleEZvcm1hdCgpOwogICAgICBQRVJTUEVDVElWRSA9IDA7CiAgICAgIE9SVEhPR1JBUEhJQyA9IDE7CiAgICAgIEZydXN0dW1HZW9tZXRyeS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCBmcnVzdHVtVHlwZSA9IHZhbHVlLl9mcnVzdHVtVHlwZTsKICAgICAgICBjb25zdCBmcnVzdHVtID0gdmFsdWUuX2ZydXN0dW07CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IGZydXN0dW1UeXBlOwogICAgICAgIGlmIChmcnVzdHVtVHlwZSA9PT0gUEVSU1BFQ1RJVkUpIHsKICAgICAgICAgIFBlcnNwZWN0aXZlRnJ1c3R1bV9kZWZhdWx0LnBhY2soZnJ1c3R1bSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgICAgc3RhcnRpbmdJbmRleCArPSBQZXJzcGVjdGl2ZUZydXN0dW1fZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIE9ydGhvZ3JhcGhpY0ZydXN0dW1fZGVmYXVsdC5wYWNrKGZydXN0dW0sIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gT3J0aG9ncmFwaGljRnJ1c3R1bV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICB9CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2sodmFsdWUuX29yaWdpbiwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBRdWF0ZXJuaW9uX2RlZmF1bHQucGFjayh2YWx1ZS5fb3JpZW50YXRpb24sIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IFF1YXRlcm5pb25fZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFjayh2YWx1ZS5fdmVydGV4Rm9ybWF0LCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSB2YWx1ZS5fZHJhd05lYXJQbGFuZSA/IDEgOiAwOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaFBhY2tQZXJzcGVjdGl2ZSA9IG5ldyBQZXJzcGVjdGl2ZUZydXN0dW1fZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGFja09ydGhvZ3JhcGhpYyA9IG5ldyBPcnRob2dyYXBoaWNGcnVzdHVtX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBhY2tRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb25fZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGFja29yaWdpbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdDcgPSBuZXcgVmVydGV4Rm9ybWF0X2RlZmF1bHQoKTsKICAgICAgRnJ1c3R1bUdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCBmcnVzdHVtVHlwZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgbGV0IGZydXN0dW07CiAgICAgICAgaWYgKGZydXN0dW1UeXBlID09PSBQRVJTUEVDVElWRSkgewogICAgICAgICAgZnJ1c3R1bSA9IFBlcnNwZWN0aXZlRnJ1c3R1bV9kZWZhdWx0LnVucGFjaygKICAgICAgICAgICAgYXJyYXksCiAgICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICAgIHNjcmF0Y2hQYWNrUGVyc3BlY3RpdmUKICAgICAgICAgICk7CiAgICAgICAgICBzdGFydGluZ0luZGV4ICs9IFBlcnNwZWN0aXZlRnJ1c3R1bV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZnJ1c3R1bSA9IE9ydGhvZ3JhcGhpY0ZydXN0dW1fZGVmYXVsdC51bnBhY2soCiAgICAgICAgICAgIGFycmF5LAogICAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgICBzY3JhdGNoUGFja09ydGhvZ3JhcGhpYwogICAgICAgICAgKTsKICAgICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gT3J0aG9ncmFwaGljRnJ1c3R1bV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICB9CiAgICAgICAgY29uc3Qgb3JpZ2luID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgc2NyYXRjaFBhY2tvcmlnaW4pOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBvcmllbnRhdGlvbiA9IFF1YXRlcm5pb25fZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBzY3JhdGNoUGFja1F1YXRlcm5pb24KICAgICAgICApOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gUXVhdGVybmlvbl9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBzY3JhdGNoVmVydGV4Rm9ybWF0NwogICAgICAgICk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgZHJhd05lYXJQbGFuZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdID09PSAxOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgRnJ1c3R1bUdlb21ldHJ5KHsKICAgICAgICAgICAgZnJ1c3R1bSwKICAgICAgICAgICAgb3JpZ2luLAogICAgICAgICAgICBvcmllbnRhdGlvbiwKICAgICAgICAgICAgdmVydGV4Rm9ybWF0LAogICAgICAgICAgICBfZHJhd05lYXJQbGFuZTogZHJhd05lYXJQbGFuZQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGZydXN0dW1SZXN1bHQgPSBmcnVzdHVtVHlwZSA9PT0gcmVzdWx0Ll9mcnVzdHVtVHlwZSA/IHJlc3VsdC5fZnJ1c3R1bSA6IHZvaWQgMDsKICAgICAgICByZXN1bHQuX2ZydXN0dW0gPSBmcnVzdHVtLmNsb25lKGZydXN0dW1SZXN1bHQpOwogICAgICAgIHJlc3VsdC5fZnJ1c3R1bVR5cGUgPSBmcnVzdHVtVHlwZTsKICAgICAgICByZXN1bHQuX29yaWdpbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShvcmlnaW4sIHJlc3VsdC5fb3JpZ2luKTsKICAgICAgICByZXN1bHQuX29yaWVudGF0aW9uID0gUXVhdGVybmlvbl9kZWZhdWx0LmNsb25lKG9yaWVudGF0aW9uLCByZXN1bHQuX29yaWVudGF0aW9uKTsKICAgICAgICByZXN1bHQuX3ZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LmNsb25lKHZlcnRleEZvcm1hdCwgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQpOwogICAgICAgIHJlc3VsdC5fZHJhd05lYXJQbGFuZSA9IGRyYXdOZWFyUGxhbmU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NyYXRjaFJvdGF0aW9uTWF0cml4ID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoVmlld01hdHJpeCA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEludmVyc2VNYXRyaXggPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hYRGlyZWN0aW9uID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoWURpcmVjdGlvbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFpEaXJlY3Rpb24gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hOZWdhdGl2ZVggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hOZWdhdGl2ZVkgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hOZWdhdGl2ZVogPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZydXN0dW1TcGxpdHMgPSBuZXcgQXJyYXkoMyk7CiAgICAgIGZydXN0dW1Db3JuZXJzTkRDID0gbmV3IEFycmF5KDQpOwogICAgICBmcnVzdHVtQ29ybmVyc05EQ1swXSA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoLTEsIC0xLCAxLCAxKTsKICAgICAgZnJ1c3R1bUNvcm5lcnNORENbMV0gPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KDEsIC0xLCAxLCAxKTsKICAgICAgZnJ1c3R1bUNvcm5lcnNORENbMl0gPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KDEsIDEsIDEsIDEpOwogICAgICBmcnVzdHVtQ29ybmVyc05EQ1szXSA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoLTEsIDEsIDEsIDEpOwogICAgICBzY3JhdGNoRnJ1c3R1bUNvcm5lcnMgPSBuZXcgQXJyYXkoNCk7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgKytpKSB7CiAgICAgICAgc2NyYXRjaEZydXN0dW1Db3JuZXJzW2ldID0gbmV3IENhcnRlc2lhbjRfZGVmYXVsdCgpOwogICAgICB9CiAgICAgIEZydXN0dW1HZW9tZXRyeS5fY29tcHV0ZU5lYXJGYXJQbGFuZXMgPSBmdW5jdGlvbihvcmlnaW4sIG9yaWVudGF0aW9uLCBmcnVzdHVtVHlwZSwgZnJ1c3R1bSwgcG9zaXRpb25zLCB4RGlyZWN0aW9uLCB5RGlyZWN0aW9uLCB6RGlyZWN0aW9uKSB7CiAgICAgICAgY29uc3Qgcm90YXRpb25NYXRyaXggPSBNYXRyaXgzX2RlZmF1bHQuZnJvbVF1YXRlcm5pb24oCiAgICAgICAgICBvcmllbnRhdGlvbiwKICAgICAgICAgIHNjcmF0Y2hSb3RhdGlvbk1hdHJpeAogICAgICAgICk7CiAgICAgICAgbGV0IHggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh4RGlyZWN0aW9uLCBzY3JhdGNoWERpcmVjdGlvbik7CiAgICAgICAgbGV0IHkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh5RGlyZWN0aW9uLCBzY3JhdGNoWURpcmVjdGlvbik7CiAgICAgICAgbGV0IHogPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh6RGlyZWN0aW9uLCBzY3JhdGNoWkRpcmVjdGlvbik7CiAgICAgICAgeCA9IE1hdHJpeDNfZGVmYXVsdC5nZXRDb2x1bW4ocm90YXRpb25NYXRyaXgsIDAsIHgpOwogICAgICAgIHkgPSBNYXRyaXgzX2RlZmF1bHQuZ2V0Q29sdW1uKHJvdGF0aW9uTWF0cml4LCAxLCB5KTsKICAgICAgICB6ID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihyb3RhdGlvbk1hdHJpeCwgMiwgeik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSh4LCB4KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHksIHkpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoeiwgeik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZSh4LCB4KTsKICAgICAgICBjb25zdCB2aWV3ID0gTWF0cml4NF9kZWZhdWx0LmNvbXB1dGVWaWV3KG9yaWdpbiwgeiwgeSwgeCwgc2NyYXRjaFZpZXdNYXRyaXgpOwogICAgICAgIGxldCBpbnZlcnNlVmlldzsKICAgICAgICBsZXQgaW52ZXJzZVZpZXdQcm9qZWN0aW9uOwogICAgICAgIGNvbnN0IHByb2plY3Rpb24gPSBmcnVzdHVtLnByb2plY3Rpb25NYXRyaXg7CiAgICAgICAgaWYgKGZydXN0dW1UeXBlID09PSBQRVJTUEVDVElWRSkgewogICAgICAgICAgY29uc3Qgdmlld1Byb2plY3Rpb24gPSBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHkoCiAgICAgICAgICAgIHByb2plY3Rpb24sCiAgICAgICAgICAgIHZpZXcsCiAgICAgICAgICAgIHNjcmF0Y2hJbnZlcnNlTWF0cml4CiAgICAgICAgICApOwogICAgICAgICAgaW52ZXJzZVZpZXdQcm9qZWN0aW9uID0gTWF0cml4NF9kZWZhdWx0LmludmVyc2UoCiAgICAgICAgICAgIHZpZXdQcm9qZWN0aW9uLAogICAgICAgICAgICBzY3JhdGNoSW52ZXJzZU1hdHJpeAogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaW52ZXJzZVZpZXcgPSBNYXRyaXg0X2RlZmF1bHQuaW52ZXJzZVRyYW5zZm9ybWF0aW9uKHZpZXcsIHNjcmF0Y2hJbnZlcnNlTWF0cml4KTsKICAgICAgICB9CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbnZlcnNlVmlld1Byb2plY3Rpb24pKSB7CiAgICAgICAgICBmcnVzdHVtU3BsaXRzWzBdID0gZnJ1c3R1bS5uZWFyOwogICAgICAgICAgZnJ1c3R1bVNwbGl0c1sxXSA9IGZydXN0dW0uZmFyOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmcnVzdHVtU3BsaXRzWzBdID0gMDsKICAgICAgICAgIGZydXN0dW1TcGxpdHNbMV0gPSBmcnVzdHVtLm5lYXI7CiAgICAgICAgICBmcnVzdHVtU3BsaXRzWzJdID0gZnJ1c3R1bS5mYXI7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjsgKytpKSB7CiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDQ7ICsraikgewogICAgICAgICAgICBsZXQgY29ybmVyID0gQ2FydGVzaWFuNF9kZWZhdWx0LmNsb25lKAogICAgICAgICAgICAgIGZydXN0dW1Db3JuZXJzTkRDW2pdLAogICAgICAgICAgICAgIHNjcmF0Y2hGcnVzdHVtQ29ybmVyc1tqXQogICAgICAgICAgICApOwogICAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpbnZlcnNlVmlld1Byb2plY3Rpb24pKSB7CiAgICAgICAgICAgICAgY29uc3Qgb2ZmQ2VudGVyRnJ1c3R1bSA9IGZydXN0dW0ub2ZmQ2VudGVyRnJ1c3R1bTsKICAgICAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZkNlbnRlckZydXN0dW0pKSB7CiAgICAgICAgICAgICAgICBmcnVzdHVtID0gb2ZmQ2VudGVyRnJ1c3R1bTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29uc3QgbmVhciA9IGZydXN0dW1TcGxpdHNbaV07CiAgICAgICAgICAgICAgY29uc3QgZmFyID0gZnJ1c3R1bVNwbGl0c1tpICsgMV07CiAgICAgICAgICAgICAgY29ybmVyLnggPSAoY29ybmVyLnggKiAoZnJ1c3R1bS5yaWdodCAtIGZydXN0dW0ubGVmdCkgKyBmcnVzdHVtLmxlZnQgKyBmcnVzdHVtLnJpZ2h0KSAqIDAuNTsKICAgICAgICAgICAgICBjb3JuZXIueSA9IChjb3JuZXIueSAqIChmcnVzdHVtLnRvcCAtIGZydXN0dW0uYm90dG9tKSArIGZydXN0dW0uYm90dG9tICsgZnJ1c3R1bS50b3ApICogMC41OwogICAgICAgICAgICAgIGNvcm5lci56ID0gKGNvcm5lci56ICogKG5lYXIgLSBmYXIpIC0gbmVhciAtIGZhcikgKiAwLjU7CiAgICAgICAgICAgICAgY29ybmVyLncgPSAxOwogICAgICAgICAgICAgIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKGludmVyc2VWaWV3LCBjb3JuZXIsIGNvcm5lcik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgY29ybmVyID0gTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IoCiAgICAgICAgICAgICAgICBpbnZlcnNlVmlld1Byb2plY3Rpb24sCiAgICAgICAgICAgICAgICBjb3JuZXIsCiAgICAgICAgICAgICAgICBjb3JuZXIKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIGNvbnN0IHcgPSAxIC8gY29ybmVyLnc7CiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoY29ybmVyLCB3LCBjb3JuZXIpOwogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjb3JuZXIsIG9yaWdpbiwgY29ybmVyKTsKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGNvcm5lciwgY29ybmVyKTsKICAgICAgICAgICAgICBjb25zdCBmYWMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KHosIGNvcm5lcik7CiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoY29ybmVyLCBmcnVzdHVtU3BsaXRzW2ldIC8gZmFjLCBjb3JuZXIpOwogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY29ybmVyLCBvcmlnaW4sIGNvcm5lcik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcG9zaXRpb25zWzEyICogaSArIGogKiAzXSA9IGNvcm5lci54OwogICAgICAgICAgICBwb3NpdGlvbnNbMTIgKiBpICsgaiAqIDMgKyAxXSA9IGNvcm5lci55OwogICAgICAgICAgICBwb3NpdGlvbnNbMTIgKiBpICsgaiAqIDMgKyAyXSA9IGNvcm5lci56OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKICAgICAgRnJ1c3R1bUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24oZnJ1c3R1bUdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgZnJ1c3R1bVR5cGUgPSBmcnVzdHVtR2VvbWV0cnkuX2ZydXN0dW1UeXBlOwogICAgICAgIGNvbnN0IGZydXN0dW0gPSBmcnVzdHVtR2VvbWV0cnkuX2ZydXN0dW07CiAgICAgICAgY29uc3Qgb3JpZ2luID0gZnJ1c3R1bUdlb21ldHJ5Ll9vcmlnaW47CiAgICAgICAgY29uc3Qgb3JpZW50YXRpb24gPSBmcnVzdHVtR2VvbWV0cnkuX29yaWVudGF0aW9uOwogICAgICAgIGNvbnN0IGRyYXdOZWFyUGxhbmUgPSBmcnVzdHVtR2VvbWV0cnkuX2RyYXdOZWFyUGxhbmU7CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gZnJ1c3R1bUdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQ7CiAgICAgICAgY29uc3QgbnVtYmVyT2ZQbGFuZXMgPSBkcmF3TmVhclBsYW5lID8gNiA6IDU7CiAgICAgICAgbGV0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoMyAqIDQgKiA2KTsKICAgICAgICBGcnVzdHVtR2VvbWV0cnkuX2NvbXB1dGVOZWFyRmFyUGxhbmVzKAogICAgICAgICAgb3JpZ2luLAogICAgICAgICAgb3JpZW50YXRpb24sCiAgICAgICAgICBmcnVzdHVtVHlwZSwKICAgICAgICAgIGZydXN0dW0sCiAgICAgICAgICBwb3NpdGlvbnMKICAgICAgICApOwogICAgICAgIGxldCBvZmZzZXQgPSAzICogNCAqIDI7CiAgICAgICAgcG9zaXRpb25zW29mZnNldF0gPSBwb3NpdGlvbnNbMyAqIDRdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyAxXSA9IHBvc2l0aW9uc1szICogNCArIDFdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyAyXSA9IHBvc2l0aW9uc1szICogNCArIDJdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyAzXSA9IHBvc2l0aW9uc1swXTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgNF0gPSBwb3NpdGlvbnNbMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDVdID0gcG9zaXRpb25zWzJdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA2XSA9IHBvc2l0aW9uc1szICogM107CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDddID0gcG9zaXRpb25zWzMgKiAzICsgMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDhdID0gcG9zaXRpb25zWzMgKiAzICsgMl07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDldID0gcG9zaXRpb25zWzMgKiA3XTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgMTBdID0gcG9zaXRpb25zWzMgKiA3ICsgMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDExXSA9IHBvc2l0aW9uc1szICogNyArIDJdOwogICAgICAgIG9mZnNldCArPSAzICogNDsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0XSA9IHBvc2l0aW9uc1szICogNV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDFdID0gcG9zaXRpb25zWzMgKiA1ICsgMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDJdID0gcG9zaXRpb25zWzMgKiA1ICsgMl07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDNdID0gcG9zaXRpb25zWzNdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA0XSA9IHBvc2l0aW9uc1szICsgMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDVdID0gcG9zaXRpb25zWzMgKyAyXTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgNl0gPSBwb3NpdGlvbnNbMF07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDddID0gcG9zaXRpb25zWzFdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA4XSA9IHBvc2l0aW9uc1syXTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgOV0gPSBwb3NpdGlvbnNbMyAqIDRdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyAxMF0gPSBwb3NpdGlvbnNbMyAqIDQgKyAxXTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgMTFdID0gcG9zaXRpb25zWzMgKiA0ICsgMl07CiAgICAgICAgb2Zmc2V0ICs9IDMgKiA0OwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXRdID0gcG9zaXRpb25zWzNdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyAxXSA9IHBvc2l0aW9uc1szICsgMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDJdID0gcG9zaXRpb25zWzMgKyAyXTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgM10gPSBwb3NpdGlvbnNbMyAqIDVdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA0XSA9IHBvc2l0aW9uc1szICogNSArIDFdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA1XSA9IHBvc2l0aW9uc1szICogNSArIDJdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA2XSA9IHBvc2l0aW9uc1szICogNl07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDddID0gcG9zaXRpb25zWzMgKiA2ICsgMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDhdID0gcG9zaXRpb25zWzMgKiA2ICsgMl07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDldID0gcG9zaXRpb25zWzMgKiAyXTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgMTBdID0gcG9zaXRpb25zWzMgKiAyICsgMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDExXSA9IHBvc2l0aW9uc1szICogMiArIDJdOwogICAgICAgIG9mZnNldCArPSAzICogNDsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0XSA9IHBvc2l0aW9uc1szICogMl07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDFdID0gcG9zaXRpb25zWzMgKiAyICsgMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDJdID0gcG9zaXRpb25zWzMgKiAyICsgMl07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDNdID0gcG9zaXRpb25zWzMgKiA2XTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgNF0gPSBwb3NpdGlvbnNbMyAqIDYgKyAxXTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgNV0gPSBwb3NpdGlvbnNbMyAqIDYgKyAyXTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgNl0gPSBwb3NpdGlvbnNbMyAqIDddOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA3XSA9IHBvc2l0aW9uc1szICogNyArIDFdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA4XSA9IHBvc2l0aW9uc1szICogNyArIDJdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA5XSA9IHBvc2l0aW9uc1szICogM107CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDEwXSA9IHBvc2l0aW9uc1szICogMyArIDFdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyAxMV0gPSBwb3NpdGlvbnNbMyAqIDMgKyAyXTsKICAgICAgICBpZiAoIWRyYXdOZWFyUGxhbmUpIHsKICAgICAgICAgIHBvc2l0aW9ucyA9IHBvc2l0aW9ucy5zdWJhcnJheSgzICogNCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoewogICAgICAgICAgcG9zaXRpb246IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICB2YWx1ZXM6IHBvc2l0aW9ucwogICAgICAgICAgfSkKICAgICAgICB9KTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHZlcnRleEZvcm1hdC5ub3JtYWwpIHx8IGRlZmluZWRfZGVmYXVsdCh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgfHwgZGVmaW5lZF9kZWZhdWx0KHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHx8IGRlZmluZWRfZGVmYXVsdCh2ZXJ0ZXhGb3JtYXQuc3QpKSB7CiAgICAgICAgICBjb25zdCBub3JtYWxzID0gZGVmaW5lZF9kZWZhdWx0KHZlcnRleEZvcm1hdC5ub3JtYWwpID8gbmV3IEZsb2F0MzJBcnJheSgzICogNCAqIG51bWJlck9mUGxhbmVzKSA6IHZvaWQgMDsKICAgICAgICAgIGNvbnN0IHRhbmdlbnRzID0gZGVmaW5lZF9kZWZhdWx0KHZlcnRleEZvcm1hdC50YW5nZW50KSA/IG5ldyBGbG9hdDMyQXJyYXkoMyAqIDQgKiBudW1iZXJPZlBsYW5lcykgOiB2b2lkIDA7CiAgICAgICAgICBjb25zdCBiaXRhbmdlbnRzID0gZGVmaW5lZF9kZWZhdWx0KHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpID8gbmV3IEZsb2F0MzJBcnJheSgzICogNCAqIG51bWJlck9mUGxhbmVzKSA6IHZvaWQgMDsKICAgICAgICAgIGNvbnN0IHN0ID0gZGVmaW5lZF9kZWZhdWx0KHZlcnRleEZvcm1hdC5zdCkgPyBuZXcgRmxvYXQzMkFycmF5KDIgKiA0ICogbnVtYmVyT2ZQbGFuZXMpIDogdm9pZCAwOwogICAgICAgICAgY29uc3QgeCA9IHNjcmF0Y2hYRGlyZWN0aW9uOwogICAgICAgICAgY29uc3QgeSA9IHNjcmF0Y2hZRGlyZWN0aW9uOwogICAgICAgICAgY29uc3QgeiA9IHNjcmF0Y2haRGlyZWN0aW9uOwogICAgICAgICAgY29uc3QgbmVnYXRpdmVYMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUoeCwgc2NyYXRjaE5lZ2F0aXZlWCk7CiAgICAgICAgICBjb25zdCBuZWdhdGl2ZVkgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKHksIHNjcmF0Y2hOZWdhdGl2ZVkpOwogICAgICAgICAgY29uc3QgbmVnYXRpdmVaID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZSh6LCBzY3JhdGNoTmVnYXRpdmVaKTsKICAgICAgICAgIG9mZnNldCA9IDA7CiAgICAgICAgICBpZiAoZHJhd05lYXJQbGFuZSkgewogICAgICAgICAgICBnZXRBdHRyaWJ1dGVzKG9mZnNldCwgbm9ybWFscywgdGFuZ2VudHMsIGJpdGFuZ2VudHMsIHN0LCBuZWdhdGl2ZVosIHgsIHkpOwogICAgICAgICAgICBvZmZzZXQgKz0gMyAqIDQ7CiAgICAgICAgICB9CiAgICAgICAgICBnZXRBdHRyaWJ1dGVzKG9mZnNldCwgbm9ybWFscywgdGFuZ2VudHMsIGJpdGFuZ2VudHMsIHN0LCB6LCBuZWdhdGl2ZVgyLCB5KTsKICAgICAgICAgIG9mZnNldCArPSAzICogNDsKICAgICAgICAgIGdldEF0dHJpYnV0ZXMoCiAgICAgICAgICAgIG9mZnNldCwKICAgICAgICAgICAgbm9ybWFscywKICAgICAgICAgICAgdGFuZ2VudHMsCiAgICAgICAgICAgIGJpdGFuZ2VudHMsCiAgICAgICAgICAgIHN0LAogICAgICAgICAgICBuZWdhdGl2ZVgyLAogICAgICAgICAgICBuZWdhdGl2ZVosCiAgICAgICAgICAgIHkKICAgICAgICAgICk7CiAgICAgICAgICBvZmZzZXQgKz0gMyAqIDQ7CiAgICAgICAgICBnZXRBdHRyaWJ1dGVzKAogICAgICAgICAgICBvZmZzZXQsCiAgICAgICAgICAgIG5vcm1hbHMsCiAgICAgICAgICAgIHRhbmdlbnRzLAogICAgICAgICAgICBiaXRhbmdlbnRzLAogICAgICAgICAgICBzdCwKICAgICAgICAgICAgbmVnYXRpdmVZLAogICAgICAgICAgICBuZWdhdGl2ZVosCiAgICAgICAgICAgIG5lZ2F0aXZlWDIKICAgICAgICAgICk7CiAgICAgICAgICBvZmZzZXQgKz0gMyAqIDQ7CiAgICAgICAgICBnZXRBdHRyaWJ1dGVzKG9mZnNldCwgbm9ybWFscywgdGFuZ2VudHMsIGJpdGFuZ2VudHMsIHN0LCB4LCB6LCB5KTsKICAgICAgICAgIG9mZnNldCArPSAzICogNDsKICAgICAgICAgIGdldEF0dHJpYnV0ZXMob2Zmc2V0LCBub3JtYWxzLCB0YW5nZW50cywgYml0YW5nZW50cywgc3QsIHksIHosIG5lZ2F0aXZlWDIpOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChub3JtYWxzKSkgewogICAgICAgICAgICBhdHRyaWJ1dGVzLm5vcm1hbCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICAgIHZhbHVlczogbm9ybWFscwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQodGFuZ2VudHMpKSB7CiAgICAgICAgICAgIGF0dHJpYnV0ZXMudGFuZ2VudCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICAgIHZhbHVlczogdGFuZ2VudHMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGJpdGFuZ2VudHMpKSB7CiAgICAgICAgICAgIGF0dHJpYnV0ZXMuYml0YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICAgICAgdmFsdWVzOiBiaXRhbmdlbnRzCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChzdCkpIHsKICAgICAgICAgICAgYXR0cmlidXRlcy5zdCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgICAgICAgIHZhbHVlczogc3QKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoNiAqIG51bWJlck9mUGxhbmVzKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mUGxhbmVzOyArK2kpIHsKICAgICAgICAgIGNvbnN0IGluZGV4T2Zmc2V0ID0gaSAqIDY7CiAgICAgICAgICBjb25zdCBpbmRleCA9IGkgKiA0OwogICAgICAgICAgaW5kaWNlc1tpbmRleE9mZnNldF0gPSBpbmRleDsKICAgICAgICAgIGluZGljZXNbaW5kZXhPZmZzZXQgKyAxXSA9IGluZGV4ICsgMTsKICAgICAgICAgIGluZGljZXNbaW5kZXhPZmZzZXQgKyAyXSA9IGluZGV4ICsgMjsKICAgICAgICAgIGluZGljZXNbaW5kZXhPZmZzZXQgKyAzXSA9IGluZGV4OwogICAgICAgICAgaW5kaWNlc1tpbmRleE9mZnNldCArIDRdID0gaW5kZXggKyAyOwogICAgICAgICAgaW5kaWNlc1tpbmRleE9mZnNldCArIDVdID0gaW5kZXggKyAzOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTLAogICAgICAgICAgYm91bmRpbmdTcGhlcmU6IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVZlcnRpY2VzKHBvc2l0aW9ucykKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgRnJ1c3R1bUdlb21ldHJ5X2RlZmF1bHQgPSBGcnVzdHVtR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVGcnVzdHVtR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlRnJ1c3R1bUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVGcnVzdHVtR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlRnJ1c3R1bUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVGcnVzdHVtR2VvbWV0cnkoZnJ1c3R1bUdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICBmcnVzdHVtR2VvbWV0cnkgPSBGcnVzdHVtR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soZnJ1c3R1bUdlb21ldHJ5LCBvZmZzZXQpOwogICAgfQogICAgcmV0dXJuIEZydXN0dW1HZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KGZydXN0dW1HZW9tZXRyeSk7CiAgfQogIHZhciBjcmVhdGVGcnVzdHVtR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVGcnVzdHVtR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUZydXN0dW1HZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0ZydXN0dW1HZW9tZXRyeSgpOwogICAgICBjcmVhdGVGcnVzdHVtR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZUZydXN0dW1HZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0ZydXN0dW1PdXRsaW5lR2VvbWV0cnkuanMKICBmdW5jdGlvbiBGcnVzdHVtT3V0bGluZUdlb21ldHJ5KG9wdGlvbnMpIHsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgib3B0aW9ucyIsIG9wdGlvbnMpOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJvcHRpb25zLmZydXN0dW0iLCBvcHRpb25zLmZydXN0dW0pOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJvcHRpb25zLm9yaWdpbiIsIG9wdGlvbnMub3JpZ2luKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgib3B0aW9ucy5vcmllbnRhdGlvbiIsIG9wdGlvbnMub3JpZW50YXRpb24pOwogICAgY29uc3QgZnJ1c3R1bSA9IG9wdGlvbnMuZnJ1c3R1bTsKICAgIGNvbnN0IG9yaWVudGF0aW9uID0gb3B0aW9ucy5vcmllbnRhdGlvbjsKICAgIGNvbnN0IG9yaWdpbiA9IG9wdGlvbnMub3JpZ2luOwogICAgY29uc3QgZHJhd05lYXJQbGFuZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuX2RyYXdOZWFyUGxhbmUsIHRydWUpOwogICAgbGV0IGZydXN0dW1UeXBlOwogICAgbGV0IGZydXN0dW1QYWNrZWRMZW5ndGg7CiAgICBpZiAoZnJ1c3R1bSBpbnN0YW5jZW9mIFBlcnNwZWN0aXZlRnJ1c3R1bV9kZWZhdWx0KSB7CiAgICAgIGZydXN0dW1UeXBlID0gUEVSU1BFQ1RJVkUyOwogICAgICBmcnVzdHVtUGFja2VkTGVuZ3RoID0gUGVyc3BlY3RpdmVGcnVzdHVtX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgfSBlbHNlIGlmIChmcnVzdHVtIGluc3RhbmNlb2YgT3J0aG9ncmFwaGljRnJ1c3R1bV9kZWZhdWx0KSB7CiAgICAgIGZydXN0dW1UeXBlID0gT1JUSE9HUkFQSElDMjsKICAgICAgZnJ1c3R1bVBhY2tlZExlbmd0aCA9IE9ydGhvZ3JhcGhpY0ZydXN0dW1fZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICB9CiAgICB0aGlzLl9mcnVzdHVtVHlwZSA9IGZydXN0dW1UeXBlOwogICAgdGhpcy5fZnJ1c3R1bSA9IGZydXN0dW0uY2xvbmUoKTsKICAgIHRoaXMuX29yaWdpbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShvcmlnaW4pOwogICAgdGhpcy5fb3JpZW50YXRpb24gPSBRdWF0ZXJuaW9uX2RlZmF1bHQuY2xvbmUob3JpZW50YXRpb24pOwogICAgdGhpcy5fZHJhd05lYXJQbGFuZSA9IGRyYXdOZWFyUGxhbmU7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZUZydXN0dW1PdXRsaW5lR2VvbWV0cnkiOwogICAgdGhpcy5wYWNrZWRMZW5ndGggPSAyICsgZnJ1c3R1bVBhY2tlZExlbmd0aCArIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBRdWF0ZXJuaW9uX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogIH0KICB2YXIgUEVSU1BFQ1RJVkUyLCBPUlRIT0dSQVBISUMyLCBzY3JhdGNoUGFja1BlcnNwZWN0aXZlMiwgc2NyYXRjaFBhY2tPcnRob2dyYXBoaWMyLCBzY3JhdGNoUGFja1F1YXRlcm5pb24yLCBzY3JhdGNoUGFja29yaWdpbjIsIEZydXN0dW1PdXRsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9GcnVzdHVtT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9GcnVzdHVtT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0ZydXN0dW1HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9PcnRob2dyYXBoaWNGcnVzdHVtKCk7CiAgICAgIGluaXRfUGVyc3BlY3RpdmVGcnVzdHVtKCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBpbml0X1F1YXRlcm5pb24oKTsKICAgICAgUEVSU1BFQ1RJVkUyID0gMDsKICAgICAgT1JUSE9HUkFQSElDMiA9IDE7CiAgICAgIEZydXN0dW1PdXRsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgZnJ1c3R1bVR5cGUgPSB2YWx1ZS5fZnJ1c3R1bVR5cGU7CiAgICAgICAgY29uc3QgZnJ1c3R1bSA9IHZhbHVlLl9mcnVzdHVtOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBmcnVzdHVtVHlwZTsKICAgICAgICBpZiAoZnJ1c3R1bVR5cGUgPT09IFBFUlNQRUNUSVZFMikgewogICAgICAgICAgUGVyc3BlY3RpdmVGcnVzdHVtX2RlZmF1bHQucGFjayhmcnVzdHVtLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgICBzdGFydGluZ0luZGV4ICs9IFBlcnNwZWN0aXZlRnJ1c3R1bV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgT3J0aG9ncmFwaGljRnJ1c3R1bV9kZWZhdWx0LnBhY2soZnJ1c3R1bSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgICAgc3RhcnRpbmdJbmRleCArPSBPcnRob2dyYXBoaWNGcnVzdHVtX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIH0KICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayh2YWx1ZS5fb3JpZ2luLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIFF1YXRlcm5pb25fZGVmYXVsdC5wYWNrKHZhbHVlLl9vcmllbnRhdGlvbiwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gUXVhdGVybmlvbl9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlLl9kcmF3TmVhclBsYW5lID8gMSA6IDA7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBzY3JhdGNoUGFja1BlcnNwZWN0aXZlMiA9IG5ldyBQZXJzcGVjdGl2ZUZydXN0dW1fZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGFja09ydGhvZ3JhcGhpYzIgPSBuZXcgT3J0aG9ncmFwaGljRnJ1c3R1bV9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQYWNrUXVhdGVybmlvbjIgPSBuZXcgUXVhdGVybmlvbl9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQYWNrb3JpZ2luMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgRnJ1c3R1bU91dGxpbmVHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgZnJ1c3R1bVR5cGUgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGxldCBmcnVzdHVtOwogICAgICAgIGlmIChmcnVzdHVtVHlwZSA9PT0gUEVSU1BFQ1RJVkUyKSB7CiAgICAgICAgICBmcnVzdHVtID0gUGVyc3BlY3RpdmVGcnVzdHVtX2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgICBhcnJheSwKICAgICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgICAgc2NyYXRjaFBhY2tQZXJzcGVjdGl2ZTIKICAgICAgICAgICk7CiAgICAgICAgICBzdGFydGluZ0luZGV4ICs9IFBlcnNwZWN0aXZlRnJ1c3R1bV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZnJ1c3R1bSA9IE9ydGhvZ3JhcGhpY0ZydXN0dW1fZGVmYXVsdC51bnBhY2soCiAgICAgICAgICAgIGFycmF5LAogICAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgICBzY3JhdGNoUGFja09ydGhvZ3JhcGhpYzIKICAgICAgICAgICk7CiAgICAgICAgICBzdGFydGluZ0luZGV4ICs9IE9ydGhvZ3JhcGhpY0ZydXN0dW1fZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG9yaWdpbiA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hQYWNrb3JpZ2luMik7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IG9yaWVudGF0aW9uID0gUXVhdGVybmlvbl9kZWZhdWx0LnVucGFjaygKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgIHNjcmF0Y2hQYWNrUXVhdGVybmlvbjIKICAgICAgICApOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gUXVhdGVybmlvbl9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBkcmF3TmVhclBsYW5lID0gYXJyYXlbc3RhcnRpbmdJbmRleF0gPT09IDE7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBGcnVzdHVtT3V0bGluZUdlb21ldHJ5KHsKICAgICAgICAgICAgZnJ1c3R1bSwKICAgICAgICAgICAgb3JpZ2luLAogICAgICAgICAgICBvcmllbnRhdGlvbiwKICAgICAgICAgICAgX2RyYXdOZWFyUGxhbmU6IGRyYXdOZWFyUGxhbmUKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBjb25zdCBmcnVzdHVtUmVzdWx0ID0gZnJ1c3R1bVR5cGUgPT09IHJlc3VsdC5fZnJ1c3R1bVR5cGUgPyByZXN1bHQuX2ZydXN0dW0gOiB2b2lkIDA7CiAgICAgICAgcmVzdWx0Ll9mcnVzdHVtID0gZnJ1c3R1bS5jbG9uZShmcnVzdHVtUmVzdWx0KTsKICAgICAgICByZXN1bHQuX2ZydXN0dW1UeXBlID0gZnJ1c3R1bVR5cGU7CiAgICAgICAgcmVzdWx0Ll9vcmlnaW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUob3JpZ2luLCByZXN1bHQuX29yaWdpbik7CiAgICAgICAgcmVzdWx0Ll9vcmllbnRhdGlvbiA9IFF1YXRlcm5pb25fZGVmYXVsdC5jbG9uZShvcmllbnRhdGlvbiwgcmVzdWx0Ll9vcmllbnRhdGlvbik7CiAgICAgICAgcmVzdWx0Ll9kcmF3TmVhclBsYW5lID0gZHJhd05lYXJQbGFuZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBGcnVzdHVtT3V0bGluZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24oZnJ1c3R1bUdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgZnJ1c3R1bVR5cGUgPSBmcnVzdHVtR2VvbWV0cnkuX2ZydXN0dW1UeXBlOwogICAgICAgIGNvbnN0IGZydXN0dW0gPSBmcnVzdHVtR2VvbWV0cnkuX2ZydXN0dW07CiAgICAgICAgY29uc3Qgb3JpZ2luID0gZnJ1c3R1bUdlb21ldHJ5Ll9vcmlnaW47CiAgICAgICAgY29uc3Qgb3JpZW50YXRpb24gPSBmcnVzdHVtR2VvbWV0cnkuX29yaWVudGF0aW9uOwogICAgICAgIGNvbnN0IGRyYXdOZWFyUGxhbmUgPSBmcnVzdHVtR2VvbWV0cnkuX2RyYXdOZWFyUGxhbmU7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheSgzICogNCAqIDIpOwogICAgICAgIEZydXN0dW1HZW9tZXRyeV9kZWZhdWx0Ll9jb21wdXRlTmVhckZhclBsYW5lcygKICAgICAgICAgIG9yaWdpbiwKICAgICAgICAgIG9yaWVudGF0aW9uLAogICAgICAgICAgZnJ1c3R1bVR5cGUsCiAgICAgICAgICBmcnVzdHVtLAogICAgICAgICAgcG9zaXRpb25zCiAgICAgICAgKTsKICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KHsKICAgICAgICAgIHBvc2l0aW9uOiBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgdmFsdWVzOiBwb3NpdGlvbnMKICAgICAgICAgIH0pCiAgICAgICAgfSk7CiAgICAgICAgbGV0IG9mZnNldDsKICAgICAgICBsZXQgaW5kZXg7CiAgICAgICAgY29uc3QgbnVtYmVyT2ZQbGFuZXMgPSBkcmF3TmVhclBsYW5lID8gMiA6IDE7CiAgICAgICAgY29uc3QgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheSg4ICogKG51bWJlck9mUGxhbmVzICsgMSkpOwogICAgICAgIGxldCBpID0gZHJhd05lYXJQbGFuZSA/IDAgOiAxOwogICAgICAgIGZvciAoOyBpIDwgMjsgKytpKSB7CiAgICAgICAgICBvZmZzZXQgPSBkcmF3TmVhclBsYW5lID8gaSAqIDggOiAwOwogICAgICAgICAgaW5kZXggPSBpICogNDsKICAgICAgICAgIGluZGljZXNbb2Zmc2V0XSA9IGluZGV4OwogICAgICAgICAgaW5kaWNlc1tvZmZzZXQgKyAxXSA9IGluZGV4ICsgMTsKICAgICAgICAgIGluZGljZXNbb2Zmc2V0ICsgMl0gPSBpbmRleCArIDE7CiAgICAgICAgICBpbmRpY2VzW29mZnNldCArIDNdID0gaW5kZXggKyAyOwogICAgICAgICAgaW5kaWNlc1tvZmZzZXQgKyA0XSA9IGluZGV4ICsgMjsKICAgICAgICAgIGluZGljZXNbb2Zmc2V0ICsgNV0gPSBpbmRleCArIDM7CiAgICAgICAgICBpbmRpY2VzW29mZnNldCArIDZdID0gaW5kZXggKyAzOwogICAgICAgICAgaW5kaWNlc1tvZmZzZXQgKyA3XSA9IGluZGV4OwogICAgICAgIH0KICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMjsgKytpKSB7CiAgICAgICAgICBvZmZzZXQgPSAobnVtYmVyT2ZQbGFuZXMgKyBpKSAqIDg7CiAgICAgICAgICBpbmRleCA9IGkgKiA0OwogICAgICAgICAgaW5kaWNlc1tvZmZzZXRdID0gaW5kZXg7CiAgICAgICAgICBpbmRpY2VzW29mZnNldCArIDFdID0gaW5kZXggKyA0OwogICAgICAgICAgaW5kaWNlc1tvZmZzZXQgKyAyXSA9IGluZGV4ICsgMTsKICAgICAgICAgIGluZGljZXNbb2Zmc2V0ICsgM10gPSBpbmRleCArIDU7CiAgICAgICAgICBpbmRpY2VzW29mZnNldCArIDRdID0gaW5kZXggKyAyOwogICAgICAgICAgaW5kaWNlc1tvZmZzZXQgKyA1XSA9IGluZGV4ICsgNjsKICAgICAgICAgIGluZGljZXNbb2Zmc2V0ICsgNl0gPSBpbmRleCArIDM7CiAgICAgICAgICBpbmRpY2VzW29mZnNldCArIDddID0gaW5kZXggKyA3OwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuTElORVMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZTogQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tVmVydGljZXMocG9zaXRpb25zKQogICAgICAgIH0pOwogICAgICB9OwogICAgICBGcnVzdHVtT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBGcnVzdHVtT3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlRnJ1c3R1bU91dGxpbmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVGcnVzdHVtT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVGcnVzdHVtT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZUZydXN0dW1PdXRsaW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZUZydXN0dW1PdXRsaW5lR2VvbWV0cnkoZnJ1c3R1bUdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICBmcnVzdHVtR2VvbWV0cnkgPSBGcnVzdHVtT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKGZydXN0dW1HZW9tZXRyeSwgb2Zmc2V0KTsKICAgIH0KICAgIHJldHVybiBGcnVzdHVtT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkoZnJ1c3R1bUdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZUZydXN0dW1PdXRsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVGcnVzdHVtT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVGcnVzdHVtT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRnJ1c3R1bU91dGxpbmVHZW9tZXRyeSgpOwogICAgICBjcmVhdGVGcnVzdHVtT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVGcnVzdHVtT3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvR2VvZ3JhcGhpY1RpbGluZ1NjaGVtZS5qcwogIGZ1bmN0aW9uIEdlb2dyYXBoaWNUaWxpbmdTY2hlbWUob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuV0dTODQpOwogICAgdGhpcy5fcmVjdGFuZ2xlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5yZWN0YW5nbGUsIFJlY3RhbmdsZV9kZWZhdWx0Lk1BWF9WQUxVRSk7CiAgICB0aGlzLl9wcm9qZWN0aW9uID0gbmV3IEdlb2dyYXBoaWNQcm9qZWN0aW9uX2RlZmF1bHQodGhpcy5fZWxsaXBzb2lkKTsKICAgIHRoaXMuX251bWJlck9mTGV2ZWxaZXJvVGlsZXNYID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgIG9wdGlvbnMubnVtYmVyT2ZMZXZlbFplcm9UaWxlc1gsCiAgICAgIDIKICAgICk7CiAgICB0aGlzLl9udW1iZXJPZkxldmVsWmVyb1RpbGVzWSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICBvcHRpb25zLm51bWJlck9mTGV2ZWxaZXJvVGlsZXNZLAogICAgICAxCiAgICApOwogIH0KICB2YXIgR2VvZ3JhcGhpY1RpbGluZ1NjaGVtZV9kZWZhdWx0OwogIHZhciBpbml0X0dlb2dyYXBoaWNUaWxpbmdTY2hlbWUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dlb2dyYXBoaWNUaWxpbmdTY2hlbWUuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9HZW9ncmFwaGljUHJvamVjdGlvbigpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoR2VvZ3JhcGhpY1RpbGluZ1NjaGVtZS5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBlbGxpcHNvaWQgdGhhdCBpcyB0aWxlZCBieSB0aGlzIHRpbGluZyBzY2hlbWUuCiAgICAgICAgICogQG1lbWJlcm9mIEdlb2dyYXBoaWNUaWxpbmdTY2hlbWUucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge0VsbGlwc29pZH0KICAgICAgICAgKi8KICAgICAgICBlbGxpcHNvaWQ6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbGxpcHNvaWQ7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSByZWN0YW5nbGUsIGluIHJhZGlhbnMsIGNvdmVyZWQgYnkgdGhpcyB0aWxpbmcgc2NoZW1lLgogICAgICAgICAqIEBtZW1iZXJvZiBHZW9ncmFwaGljVGlsaW5nU2NoZW1lLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtSZWN0YW5nbGV9CiAgICAgICAgICovCiAgICAgICAgcmVjdGFuZ2xlOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjdGFuZ2xlOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgbWFwIHByb2plY3Rpb24gdXNlZCBieSB0aGlzIHRpbGluZyBzY2hlbWUuCiAgICAgICAgICogQG1lbWJlcm9mIEdlb2dyYXBoaWNUaWxpbmdTY2hlbWUucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge01hcFByb2plY3Rpb259CiAgICAgICAgICovCiAgICAgICAgcHJvamVjdGlvbjogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2plY3Rpb247CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgR2VvZ3JhcGhpY1RpbGluZ1NjaGVtZS5wcm90b3R5cGUuZ2V0TnVtYmVyT2ZYVGlsZXNBdExldmVsID0gZnVuY3Rpb24obGV2ZWwpIHsKICAgICAgICByZXR1cm4gdGhpcy5fbnVtYmVyT2ZMZXZlbFplcm9UaWxlc1ggPDwgbGV2ZWw7CiAgICAgIH07CiAgICAgIEdlb2dyYXBoaWNUaWxpbmdTY2hlbWUucHJvdG90eXBlLmdldE51bWJlck9mWVRpbGVzQXRMZXZlbCA9IGZ1bmN0aW9uKGxldmVsKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX251bWJlck9mTGV2ZWxaZXJvVGlsZXNZIDw8IGxldmVsOwogICAgICB9OwogICAgICBHZW9ncmFwaGljVGlsaW5nU2NoZW1lLnByb3RvdHlwZS5yZWN0YW5nbGVUb05hdGl2ZVJlY3RhbmdsZSA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJyZWN0YW5nbGUiLCByZWN0YW5nbGUpOwogICAgICAgIGNvbnN0IHdlc3QgPSBNYXRoX2RlZmF1bHQudG9EZWdyZWVzKHJlY3RhbmdsZS53ZXN0KTsKICAgICAgICBjb25zdCBzb3V0aCA9IE1hdGhfZGVmYXVsdC50b0RlZ3JlZXMocmVjdGFuZ2xlLnNvdXRoKTsKICAgICAgICBjb25zdCBlYXN0ID0gTWF0aF9kZWZhdWx0LnRvRGVncmVlcyhyZWN0YW5nbGUuZWFzdCk7CiAgICAgICAgY29uc3Qgbm9ydGggPSBNYXRoX2RlZmF1bHQudG9EZWdyZWVzKHJlY3RhbmdsZS5ub3J0aCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBSZWN0YW5nbGVfZGVmYXVsdCh3ZXN0LCBzb3V0aCwgZWFzdCwgbm9ydGgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQud2VzdCA9IHdlc3Q7CiAgICAgICAgcmVzdWx0LnNvdXRoID0gc291dGg7CiAgICAgICAgcmVzdWx0LmVhc3QgPSBlYXN0OwogICAgICAgIHJlc3VsdC5ub3J0aCA9IG5vcnRoOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEdlb2dyYXBoaWNUaWxpbmdTY2hlbWUucHJvdG90eXBlLnRpbGVYWVRvTmF0aXZlUmVjdGFuZ2xlID0gZnVuY3Rpb24oeCwgeSwgbGV2ZWwsIHJlc3VsdCkgewogICAgICAgIGNvbnN0IHJlY3RhbmdsZVJhZGlhbnMgPSB0aGlzLnRpbGVYWVRvUmVjdGFuZ2xlKHgsIHksIGxldmVsLCByZXN1bHQpOwogICAgICAgIHJlY3RhbmdsZVJhZGlhbnMud2VzdCA9IE1hdGhfZGVmYXVsdC50b0RlZ3JlZXMocmVjdGFuZ2xlUmFkaWFucy53ZXN0KTsKICAgICAgICByZWN0YW5nbGVSYWRpYW5zLnNvdXRoID0gTWF0aF9kZWZhdWx0LnRvRGVncmVlcyhyZWN0YW5nbGVSYWRpYW5zLnNvdXRoKTsKICAgICAgICByZWN0YW5nbGVSYWRpYW5zLmVhc3QgPSBNYXRoX2RlZmF1bHQudG9EZWdyZWVzKHJlY3RhbmdsZVJhZGlhbnMuZWFzdCk7CiAgICAgICAgcmVjdGFuZ2xlUmFkaWFucy5ub3J0aCA9IE1hdGhfZGVmYXVsdC50b0RlZ3JlZXMocmVjdGFuZ2xlUmFkaWFucy5ub3J0aCk7CiAgICAgICAgcmV0dXJuIHJlY3RhbmdsZVJhZGlhbnM7CiAgICAgIH07CiAgICAgIEdlb2dyYXBoaWNUaWxpbmdTY2hlbWUucHJvdG90eXBlLnRpbGVYWVRvUmVjdGFuZ2xlID0gZnVuY3Rpb24oeCwgeSwgbGV2ZWwsIHJlc3VsdCkgewogICAgICAgIGNvbnN0IHJlY3RhbmdsZSA9IHRoaXMuX3JlY3RhbmdsZTsKICAgICAgICBjb25zdCB4VGlsZXMgPSB0aGlzLmdldE51bWJlck9mWFRpbGVzQXRMZXZlbChsZXZlbCk7CiAgICAgICAgY29uc3QgeVRpbGVzID0gdGhpcy5nZXROdW1iZXJPZllUaWxlc0F0TGV2ZWwobGV2ZWwpOwogICAgICAgIGNvbnN0IHhUaWxlV2lkdGggPSByZWN0YW5nbGUud2lkdGggLyB4VGlsZXM7CiAgICAgICAgY29uc3Qgd2VzdCA9IHggKiB4VGlsZVdpZHRoICsgcmVjdGFuZ2xlLndlc3Q7CiAgICAgICAgY29uc3QgZWFzdCA9ICh4ICsgMSkgKiB4VGlsZVdpZHRoICsgcmVjdGFuZ2xlLndlc3Q7CiAgICAgICAgY29uc3QgeVRpbGVIZWlnaHQgPSByZWN0YW5nbGUuaGVpZ2h0IC8geVRpbGVzOwogICAgICAgIGNvbnN0IG5vcnRoID0gcmVjdGFuZ2xlLm5vcnRoIC0geSAqIHlUaWxlSGVpZ2h0OwogICAgICAgIGNvbnN0IHNvdXRoID0gcmVjdGFuZ2xlLm5vcnRoIC0gKHkgKyAxKSAqIHlUaWxlSGVpZ2h0OwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBSZWN0YW5nbGVfZGVmYXVsdCh3ZXN0LCBzb3V0aCwgZWFzdCwgbm9ydGgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQud2VzdCA9IHdlc3Q7CiAgICAgICAgcmVzdWx0LnNvdXRoID0gc291dGg7CiAgICAgICAgcmVzdWx0LmVhc3QgPSBlYXN0OwogICAgICAgIHJlc3VsdC5ub3J0aCA9IG5vcnRoOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEdlb2dyYXBoaWNUaWxpbmdTY2hlbWUucHJvdG90eXBlLnBvc2l0aW9uVG9UaWxlWFkgPSBmdW5jdGlvbihwb3NpdGlvbiwgbGV2ZWwsIHJlc3VsdCkgewogICAgICAgIGNvbnN0IHJlY3RhbmdsZSA9IHRoaXMuX3JlY3RhbmdsZTsKICAgICAgICBpZiAoIVJlY3RhbmdsZV9kZWZhdWx0LmNvbnRhaW5zKHJlY3RhbmdsZSwgcG9zaXRpb24pKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBjb25zdCB4VGlsZXMgPSB0aGlzLmdldE51bWJlck9mWFRpbGVzQXRMZXZlbChsZXZlbCk7CiAgICAgICAgY29uc3QgeVRpbGVzID0gdGhpcy5nZXROdW1iZXJPZllUaWxlc0F0TGV2ZWwobGV2ZWwpOwogICAgICAgIGNvbnN0IHhUaWxlV2lkdGggPSByZWN0YW5nbGUud2lkdGggLyB4VGlsZXM7CiAgICAgICAgY29uc3QgeVRpbGVIZWlnaHQgPSByZWN0YW5nbGUuaGVpZ2h0IC8geVRpbGVzOwogICAgICAgIGxldCBsb25naXR1ZGUgPSBwb3NpdGlvbi5sb25naXR1ZGU7CiAgICAgICAgaWYgKHJlY3RhbmdsZS5lYXN0IDwgcmVjdGFuZ2xlLndlc3QpIHsKICAgICAgICAgIGxvbmdpdHVkZSArPSBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgIH0KICAgICAgICBsZXQgeFRpbGVDb29yZGluYXRlID0gKGxvbmdpdHVkZSAtIHJlY3RhbmdsZS53ZXN0KSAvIHhUaWxlV2lkdGggfCAwOwogICAgICAgIGlmICh4VGlsZUNvb3JkaW5hdGUgPj0geFRpbGVzKSB7CiAgICAgICAgICB4VGlsZUNvb3JkaW5hdGUgPSB4VGlsZXMgLSAxOwogICAgICAgIH0KICAgICAgICBsZXQgeVRpbGVDb29yZGluYXRlID0gKHJlY3RhbmdsZS5ub3J0aCAtIHBvc2l0aW9uLmxhdGl0dWRlKSAvIHlUaWxlSGVpZ2h0IHwgMDsKICAgICAgICBpZiAoeVRpbGVDb29yZGluYXRlID49IHlUaWxlcykgewogICAgICAgICAgeVRpbGVDb29yZGluYXRlID0geVRpbGVzIC0gMTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoeFRpbGVDb29yZGluYXRlLCB5VGlsZUNvb3JkaW5hdGUpOwogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IHhUaWxlQ29vcmRpbmF0ZTsKICAgICAgICByZXN1bHQueSA9IHlUaWxlQ29vcmRpbmF0ZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBHZW9ncmFwaGljVGlsaW5nU2NoZW1lX2RlZmF1bHQgPSBHZW9ncmFwaGljVGlsaW5nU2NoZW1lOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5qcwogIGZ1bmN0aW9uIGdldFRpbGVYWUxldmVsKHJlY3RhbmdsZSkgewogICAgQ2FydG9ncmFwaGljX2RlZmF1bHQuZnJvbVJhZGlhbnMoCiAgICAgIHJlY3RhbmdsZS5lYXN0LAogICAgICByZWN0YW5nbGUubm9ydGgsCiAgICAgIDAsCiAgICAgIHNjcmF0Y2hDb3JuZXJzWzBdCiAgICApOwogICAgQ2FydG9ncmFwaGljX2RlZmF1bHQuZnJvbVJhZGlhbnMoCiAgICAgIHJlY3RhbmdsZS53ZXN0LAogICAgICByZWN0YW5nbGUubm9ydGgsCiAgICAgIDAsCiAgICAgIHNjcmF0Y2hDb3JuZXJzWzFdCiAgICApOwogICAgQ2FydG9ncmFwaGljX2RlZmF1bHQuZnJvbVJhZGlhbnMoCiAgICAgIHJlY3RhbmdsZS5lYXN0LAogICAgICByZWN0YW5nbGUuc291dGgsCiAgICAgIDAsCiAgICAgIHNjcmF0Y2hDb3JuZXJzWzJdCiAgICApOwogICAgQ2FydG9ncmFwaGljX2RlZmF1bHQuZnJvbVJhZGlhbnMoCiAgICAgIHJlY3RhbmdsZS53ZXN0LAogICAgICByZWN0YW5nbGUuc291dGgsCiAgICAgIDAsCiAgICAgIHNjcmF0Y2hDb3JuZXJzWzNdCiAgICApOwogICAgbGV0IGxhc3RMZXZlbFggPSAwLCBsYXN0TGV2ZWxZID0gMDsKICAgIGxldCBjdXJyZW50WCA9IDAsIGN1cnJlbnRZID0gMDsKICAgIGNvbnN0IG1heExldmVsID0gQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5fdGVycmFpbkhlaWdodHNNYXhMZXZlbDsKICAgIGxldCBpOwogICAgZm9yIChpID0gMDsgaSA8PSBtYXhMZXZlbDsgKytpKSB7CiAgICAgIGxldCBmYWlsZWQgPSBmYWxzZTsKICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA0OyArK2opIHsKICAgICAgICBjb25zdCBjb3JuZXIgPSBzY3JhdGNoQ29ybmVyc1tqXTsKICAgICAgICB0aWxpbmdTY2hlbWUucG9zaXRpb25Ub1RpbGVYWShjb3JuZXIsIGksIHNjcmF0Y2hUaWxlWFkpOwogICAgICAgIGlmIChqID09PSAwKSB7CiAgICAgICAgICBjdXJyZW50WCA9IHNjcmF0Y2hUaWxlWFkueDsKICAgICAgICAgIGN1cnJlbnRZID0gc2NyYXRjaFRpbGVYWS55OwogICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFggIT09IHNjcmF0Y2hUaWxlWFkueCB8fCBjdXJyZW50WSAhPT0gc2NyYXRjaFRpbGVYWS55KSB7CiAgICAgICAgICBmYWlsZWQgPSB0cnVlOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChmYWlsZWQpIHsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBsYXN0TGV2ZWxYID0gY3VycmVudFg7CiAgICAgIGxhc3RMZXZlbFkgPSBjdXJyZW50WTsKICAgIH0KICAgIGlmIChpID09PSAwKSB7CiAgICAgIHJldHVybiB2b2lkIDA7CiAgICB9CiAgICByZXR1cm4gewogICAgICB4OiBsYXN0TGV2ZWxYLAogICAgICB5OiBsYXN0TGV2ZWxZLAogICAgICBsZXZlbDogaSA+IG1heExldmVsID8gbWF4TGV2ZWwgOiBpIC0gMQogICAgfTsKICB9CiAgdmFyIHNjcmF0Y2hEaWFnb25hbENhcnRlc2lhbk5FLCBzY3JhdGNoRGlhZ29uYWxDYXJ0ZXNpYW5TVywgc2NyYXRjaERpYWdvbmFsQ2FydG9ncmFwaGljLCBzY3JhdGNoQ2VudGVyQ2FydGVzaWFuLCBzY3JhdGNoU3VyZmFjZUNhcnRlc2lhbiwgc2NyYXRjaEJvdW5kaW5nU3BoZXJlMiwgdGlsaW5nU2NoZW1lLCBzY3JhdGNoQ29ybmVycywgc2NyYXRjaFRpbGVYWSwgQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cywgQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0c19kZWZhdWx0OwogIHZhciBpbml0X0FwcHJveGltYXRlVGVycmFpbkhlaWdodHMgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0FwcHJveGltYXRlVGVycmFpbkhlaWdodHMuanMiKCkgewogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfYnVpbGRNb2R1bGVVcmwoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfR2VvZ3JhcGhpY1RpbGluZ1NjaGVtZSgpOwogICAgICBpbml0X1JlY3RhbmdsZSgpOwogICAgICBpbml0X1Jlc291cmNlKCk7CiAgICAgIHNjcmF0Y2hEaWFnb25hbENhcnRlc2lhbk5FID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoRGlhZ29uYWxDYXJ0ZXNpYW5TVyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaERpYWdvbmFsQ2FydG9ncmFwaGljID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDZW50ZXJDYXJ0ZXNpYW4gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hTdXJmYWNlQ2FydGVzaWFuID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQm91bmRpbmdTcGhlcmUyID0gbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQoKTsKICAgICAgdGlsaW5nU2NoZW1lID0gbmV3IEdlb2dyYXBoaWNUaWxpbmdTY2hlbWVfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ29ybmVycyA9IFsKICAgICAgICBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKSwKICAgICAgICBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKSwKICAgICAgICBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKSwKICAgICAgICBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKQogICAgICBdOwogICAgICBzY3JhdGNoVGlsZVhZID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzID0ge307CiAgICAgIEFwcHJveGltYXRlVGVycmFpbkhlaWdodHMuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIGxldCBpbml0UHJvbWlzZSA9IEFwcHJveGltYXRlVGVycmFpbkhlaWdodHMuX2luaXRQcm9taXNlOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaW5pdFByb21pc2UpKSB7CiAgICAgICAgICByZXR1cm4gaW5pdFByb21pc2U7CiAgICAgICAgfQogICAgICAgIGluaXRQcm9taXNlID0gUmVzb3VyY2VfZGVmYXVsdC5mZXRjaEpzb24oCiAgICAgICAgICBidWlsZE1vZHVsZVVybF9kZWZhdWx0KCJBc3NldHMvYXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5qc29uIikKICAgICAgICApLnRoZW4oZnVuY3Rpb24oanNvbikgewogICAgICAgICAgQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5fdGVycmFpbkhlaWdodHMgPSBqc29uOwogICAgICAgIH0pOwogICAgICAgIEFwcHJveGltYXRlVGVycmFpbkhlaWdodHMuX2luaXRQcm9taXNlID0gaW5pdFByb21pc2U7CiAgICAgICAgcmV0dXJuIGluaXRQcm9taXNlOwogICAgICB9OwogICAgICBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzLmdldE1pbmltdW1NYXhpbXVtSGVpZ2h0cyA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgZWxsaXBzb2lkKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJyZWN0YW5nbGUiLCByZWN0YW5nbGUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KEFwcHJveGltYXRlVGVycmFpbkhlaWdodHMuX3RlcnJhaW5IZWlnaHRzKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJZb3UgbXVzdCBjYWxsIEFwcHJveGltYXRlVGVycmFpbkhlaWdodHMuaW5pdGlhbGl6ZSBhbmQgd2FpdCBmb3IgdGhlIHByb21pc2UgdG8gcmVzb2x2ZSBiZWZvcmUgdXNpbmcgdGhpcyBmdW5jdGlvbiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGVsbGlwc29pZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuV0dTODQpOwogICAgICAgIGNvbnN0IHh5TGV2ZWwgPSBnZXRUaWxlWFlMZXZlbChyZWN0YW5nbGUpOwogICAgICAgIGxldCBtaW5UZXJyYWluSGVpZ2h0ID0gQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5fZGVmYXVsdE1pblRlcnJhaW5IZWlnaHQ7CiAgICAgICAgbGV0IG1heFRlcnJhaW5IZWlnaHQgPSBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzLl9kZWZhdWx0TWF4VGVycmFpbkhlaWdodDsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHh5TGV2ZWwpKSB7CiAgICAgICAgICBjb25zdCBrZXkgPSBgJHt4eUxldmVsLmxldmVsfS0ke3h5TGV2ZWwueH0tJHt4eUxldmVsLnl9YDsKICAgICAgICAgIGNvbnN0IGhlaWdodHMgPSBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzLl90ZXJyYWluSGVpZ2h0c1trZXldOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChoZWlnaHRzKSkgewogICAgICAgICAgICBtaW5UZXJyYWluSGVpZ2h0ID0gaGVpZ2h0c1swXTsKICAgICAgICAgICAgbWF4VGVycmFpbkhlaWdodCA9IGhlaWdodHNbMV07CiAgICAgICAgICB9CiAgICAgICAgICBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oCiAgICAgICAgICAgIFJlY3RhbmdsZV9kZWZhdWx0Lm5vcnRoZWFzdChyZWN0YW5nbGUsIHNjcmF0Y2hEaWFnb25hbENhcnRvZ3JhcGhpYyksCiAgICAgICAgICAgIHNjcmF0Y2hEaWFnb25hbENhcnRlc2lhbk5FCiAgICAgICAgICApOwogICAgICAgICAgZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKAogICAgICAgICAgICBSZWN0YW5nbGVfZGVmYXVsdC5zb3V0aHdlc3QocmVjdGFuZ2xlLCBzY3JhdGNoRGlhZ29uYWxDYXJ0b2dyYXBoaWMpLAogICAgICAgICAgICBzY3JhdGNoRGlhZ29uYWxDYXJ0ZXNpYW5TVwogICAgICAgICAgKTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5taWRwb2ludCgKICAgICAgICAgICAgc2NyYXRjaERpYWdvbmFsQ2FydGVzaWFuU1csCiAgICAgICAgICAgIHNjcmF0Y2hEaWFnb25hbENhcnRlc2lhbk5FLAogICAgICAgICAgICBzY3JhdGNoQ2VudGVyQ2FydGVzaWFuCiAgICAgICAgICApOwogICAgICAgICAgY29uc3Qgc3VyZmFjZVBvc2l0aW9uID0gZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2UoCiAgICAgICAgICAgIHNjcmF0Y2hDZW50ZXJDYXJ0ZXNpYW4sCiAgICAgICAgICAgIHNjcmF0Y2hTdXJmYWNlQ2FydGVzaWFuCiAgICAgICAgICApOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChzdXJmYWNlUG9zaXRpb24pKSB7CiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gQ2FydGVzaWFuM19kZWZhdWx0LmRpc3RhbmNlKAogICAgICAgICAgICAgIHNjcmF0Y2hDZW50ZXJDYXJ0ZXNpYW4sCiAgICAgICAgICAgICAgc3VyZmFjZVBvc2l0aW9uCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIG1pblRlcnJhaW5IZWlnaHQgPSBNYXRoLm1pbihtaW5UZXJyYWluSGVpZ2h0LCAtZGlzdGFuY2UpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbWluVGVycmFpbkhlaWdodCA9IEFwcHJveGltYXRlVGVycmFpbkhlaWdodHMuX2RlZmF1bHRNaW5UZXJyYWluSGVpZ2h0OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBtaW5UZXJyYWluSGVpZ2h0ID0gTWF0aC5tYXgoCiAgICAgICAgICBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzLl9kZWZhdWx0TWluVGVycmFpbkhlaWdodCwKICAgICAgICAgIG1pblRlcnJhaW5IZWlnaHQKICAgICAgICApOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICBtaW5pbXVtVGVycmFpbkhlaWdodDogbWluVGVycmFpbkhlaWdodCwKICAgICAgICAgIG1heGltdW1UZXJyYWluSGVpZ2h0OiBtYXhUZXJyYWluSGVpZ2h0CiAgICAgICAgfTsKICAgICAgfTsKICAgICAgQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5nZXRCb3VuZGluZ1NwaGVyZSA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgZWxsaXBzb2lkKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJyZWN0YW5nbGUiLCByZWN0YW5nbGUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KEFwcHJveGltYXRlVGVycmFpbkhlaWdodHMuX3RlcnJhaW5IZWlnaHRzKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJZb3UgbXVzdCBjYWxsIEFwcHJveGltYXRlVGVycmFpbkhlaWdodHMuaW5pdGlhbGl6ZSBhbmQgd2FpdCBmb3IgdGhlIHByb21pc2UgdG8gcmVzb2x2ZSBiZWZvcmUgdXNpbmcgdGhpcyBmdW5jdGlvbiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGVsbGlwc29pZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuV0dTODQpOwogICAgICAgIGNvbnN0IHh5TGV2ZWwgPSBnZXRUaWxlWFlMZXZlbChyZWN0YW5nbGUpOwogICAgICAgIGxldCBtYXhUZXJyYWluSGVpZ2h0ID0gQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5fZGVmYXVsdE1heFRlcnJhaW5IZWlnaHQ7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh4eUxldmVsKSkgewogICAgICAgICAgY29uc3Qga2V5ID0gYCR7eHlMZXZlbC5sZXZlbH0tJHt4eUxldmVsLnh9LSR7eHlMZXZlbC55fWA7CiAgICAgICAgICBjb25zdCBoZWlnaHRzID0gQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5fdGVycmFpbkhlaWdodHNba2V5XTsKICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaGVpZ2h0cykpIHsKICAgICAgICAgICAgbWF4VGVycmFpbkhlaWdodCA9IGhlaWdodHNbMV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJlc3VsdCA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVJlY3RhbmdsZTNEKHJlY3RhbmdsZSwgZWxsaXBzb2lkLCAwKTsKICAgICAgICBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmZyb21SZWN0YW5nbGUzRCgKICAgICAgICAgIHJlY3RhbmdsZSwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIG1heFRlcnJhaW5IZWlnaHQsCiAgICAgICAgICBzY3JhdGNoQm91bmRpbmdTcGhlcmUyCiAgICAgICAgKTsKICAgICAgICByZXR1cm4gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC51bmlvbihyZXN1bHQsIHNjcmF0Y2hCb3VuZGluZ1NwaGVyZTIsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIEFwcHJveGltYXRlVGVycmFpbkhlaWdodHMuX3RlcnJhaW5IZWlnaHRzTWF4TGV2ZWwgPSA2OwogICAgICBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzLl9kZWZhdWx0TWF4VGVycmFpbkhlaWdodCA9IDllMzsKICAgICAgQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5fZGVmYXVsdE1pblRlcnJhaW5IZWlnaHQgPSAtMWU1OwogICAgICBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzLl90ZXJyYWluSGVpZ2h0cyA9IHZvaWQgMDsKICAgICAgQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5faW5pdFByb21pc2UgPSB2b2lkIDA7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEFwcHJveGltYXRlVGVycmFpbkhlaWdodHMsIHsKICAgICAgICAvKioKICAgICAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSB0ZXJyYWluIGhlaWdodHMgYXJlIGluaXRpYWxpemVkIGFuZCByZWFkeSB0byB1c2UuIFRvIGluaXRpYWxpemUgdGhlIHRlcnJhaW4gaGVpZ2h0cywKICAgICAgICAgKiBjYWxsIHtAbGluayBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzI2luaXRpYWxpemV9IGFuZCB3YWl0IGZvciB0aGUgcmV0dXJuZWQgcHJvbWlzZSB0byByZXNvbHZlLgogICAgICAgICAqIEB0eXBlIHtib29sZWFufQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqIEBtZW1iZXJvZiBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzCiAgICAgICAgICovCiAgICAgICAgaW5pdGlhbGl6ZWQ6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBkZWZpbmVkX2RlZmF1bHQoQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5fdGVycmFpbkhlaWdodHMpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIEFwcHJveGltYXRlVGVycmFpbkhlaWdodHNfZGVmYXVsdCA9IEFwcHJveGltYXRlVGVycmFpbkhlaWdodHM7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Hcm91bmRQb2x5bGluZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gR3JvdW5kUG9seWxpbmVHZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IG9wdGlvbnMucG9zaXRpb25zOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zKSB8fCBwb3NpdGlvbnMubGVuZ3RoIDwgMikgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiQXQgbGVhc3QgdHdvIHBvc2l0aW9ucyBhcmUgcmVxdWlyZWQuIik7CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMuYXJjVHlwZSkgJiYgb3B0aW9ucy5hcmNUeXBlICE9PSBBcmNUeXBlX2RlZmF1bHQuR0VPREVTSUMgJiYgb3B0aW9ucy5hcmNUeXBlICE9PSBBcmNUeXBlX2RlZmF1bHQuUkhVTUIpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIlZhbGlkIG9wdGlvbnMgZm9yIGFyY1R5cGUgYXJlIEFyY1R5cGUuR0VPREVTSUMgYW5kIEFyY1R5cGUuUkhVTUIuIgogICAgICApOwogICAgfQogICAgdGhpcy53aWR0aCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMud2lkdGgsIDEpOwogICAgdGhpcy5fcG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgdGhpcy5ncmFudWxhcml0eSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZ3JhbnVsYXJpdHksIDk5OTkpOwogICAgdGhpcy5sb29wID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5sb29wLCBmYWxzZSk7CiAgICB0aGlzLmFyY1R5cGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmFyY1R5cGUsIEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQyk7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NDsKICAgIHRoaXMuX3Byb2plY3Rpb25JbmRleCA9IDA7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZUdyb3VuZFBvbHlsaW5lR2VvbWV0cnkiOwogICAgdGhpcy5fc2NlbmUzRE9ubHkgPSBmYWxzZTsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZVJpZ2h0Tm9ybWFsKHN0YXJ0LCBlbmQsIG1heEhlaWdodCwgZWxsaXBzb2lkLCByZXN1bHQpIHsKICAgIGNvbnN0IHN0YXJ0Qm90dG9tID0gZ2V0UG9zaXRpb24oZWxsaXBzb2lkLCBzdGFydCwgMCwgY2FydDNTY3JhdGNoMSk7CiAgICBjb25zdCBzdGFydFRvcCA9IGdldFBvc2l0aW9uKGVsbGlwc29pZCwgc3RhcnQsIG1heEhlaWdodCwgY2FydDNTY3JhdGNoMik7CiAgICBjb25zdCBlbmRCb3R0b20gPSBnZXRQb3NpdGlvbihlbGxpcHNvaWQsIGVuZCwgMCwgY2FydDNTY3JhdGNoMyk7CiAgICBjb25zdCB1cCA9IGRpcmVjdGlvbihzdGFydFRvcCwgc3RhcnRCb3R0b20sIGNhcnQzU2NyYXRjaDIpOwogICAgY29uc3QgZm9yd2FyZCA9IGRpcmVjdGlvbihlbmRCb3R0b20sIHN0YXJ0Qm90dG9tLCBjYXJ0M1NjcmF0Y2gzKTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhmb3J3YXJkLCB1cCwgcmVzdWx0KTsKICAgIHJldHVybiBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHJlc3VsdCwgcmVzdWx0KTsKICB9CiAgZnVuY3Rpb24gaW50ZXJwb2xhdGVTZWdtZW50KHN0YXJ0LCBlbmQsIG1pbkhlaWdodCwgbWF4SGVpZ2h0LCBncmFudWxhcml0eSwgYXJjVHlwZSwgZWxsaXBzb2lkLCBub3JtYWxzQXJyYXksIGJvdHRvbVBvc2l0aW9uc0FycmF5LCB0b3BQb3NpdGlvbnNBcnJheSwgY2FydG9ncmFwaGljc0FycmF5KSB7CiAgICBpZiAoZ3JhbnVsYXJpdHkgPT09IDApIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgbGV0IGVsbGlwc29pZExpbmU7CiAgICBpZiAoYXJjVHlwZSA9PT0gQXJjVHlwZV9kZWZhdWx0LkdFT0RFU0lDKSB7CiAgICAgIGVsbGlwc29pZExpbmUgPSBuZXcgRWxsaXBzb2lkR2VvZGVzaWNfZGVmYXVsdChzdGFydCwgZW5kLCBlbGxpcHNvaWQpOwogICAgfSBlbHNlIGlmIChhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuUkhVTUIpIHsKICAgICAgZWxsaXBzb2lkTGluZSA9IG5ldyBFbGxpcHNvaWRSaHVtYkxpbmVfZGVmYXVsdChzdGFydCwgZW5kLCBlbGxpcHNvaWQpOwogICAgfQogICAgY29uc3Qgc3VyZmFjZURpc3RhbmNlID0gZWxsaXBzb2lkTGluZS5zdXJmYWNlRGlzdGFuY2U7CiAgICBpZiAoc3VyZmFjZURpc3RhbmNlIDwgZ3JhbnVsYXJpdHkpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgaW50ZXJwb2xhdGVkTm9ybWFsID0gY29tcHV0ZVJpZ2h0Tm9ybWFsKAogICAgICBzdGFydCwKICAgICAgZW5kLAogICAgICBtYXhIZWlnaHQsCiAgICAgIGVsbGlwc29pZCwKICAgICAgaW50ZXJwb2xhdGVkTm9ybWFsU2NyYXRjaAogICAgKTsKICAgIGNvbnN0IHNlZ21lbnRzID0gTWF0aC5jZWlsKHN1cmZhY2VEaXN0YW5jZSAvIGdyYW51bGFyaXR5KTsKICAgIGNvbnN0IGludGVycG9pbnREaXN0YW5jZSA9IHN1cmZhY2VEaXN0YW5jZSAvIHNlZ21lbnRzOwogICAgbGV0IGRpc3RhbmNlRnJvbVN0YXJ0ID0gaW50ZXJwb2ludERpc3RhbmNlOwogICAgY29uc3QgcG9pbnRzVG9BZGQgPSBzZWdtZW50cyAtIDE7CiAgICBsZXQgcGFja0luZGV4ID0gbm9ybWFsc0FycmF5Lmxlbmd0aDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzVG9BZGQ7IGkrKykgewogICAgICBjb25zdCBpbnRlcnBvbGF0ZWRDYXJ0b2dyYXBoaWMgPSBlbGxpcHNvaWRMaW5lLmludGVycG9sYXRlVXNpbmdTdXJmYWNlRGlzdGFuY2UoCiAgICAgICAgZGlzdGFuY2VGcm9tU3RhcnQsCiAgICAgICAgaW50ZXJwb2xhdGVkQ2FydG9ncmFwaGljU2NyYXRjaAogICAgICApOwogICAgICBjb25zdCBpbnRlcnBvbGF0ZWRCb3R0b20gPSBnZXRQb3NpdGlvbigKICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgaW50ZXJwb2xhdGVkQ2FydG9ncmFwaGljLAogICAgICAgIG1pbkhlaWdodCwKICAgICAgICBpbnRlcnBvbGF0ZWRCb3R0b21TY3JhdGNoCiAgICAgICk7CiAgICAgIGNvbnN0IGludGVycG9sYXRlZFRvcCA9IGdldFBvc2l0aW9uKAogICAgICAgIGVsbGlwc29pZCwKICAgICAgICBpbnRlcnBvbGF0ZWRDYXJ0b2dyYXBoaWMsCiAgICAgICAgbWF4SGVpZ2h0LAogICAgICAgIGludGVycG9sYXRlZFRvcFNjcmF0Y2gKICAgICAgKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soaW50ZXJwb2xhdGVkTm9ybWFsLCBub3JtYWxzQXJyYXksIHBhY2tJbmRleCk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGludGVycG9sYXRlZEJvdHRvbSwgYm90dG9tUG9zaXRpb25zQXJyYXksIHBhY2tJbmRleCk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGludGVycG9sYXRlZFRvcCwgdG9wUG9zaXRpb25zQXJyYXksIHBhY2tJbmRleCk7CiAgICAgIGNhcnRvZ3JhcGhpY3NBcnJheS5wdXNoKGludGVycG9sYXRlZENhcnRvZ3JhcGhpYy5sYXRpdHVkZSk7CiAgICAgIGNhcnRvZ3JhcGhpY3NBcnJheS5wdXNoKGludGVycG9sYXRlZENhcnRvZ3JhcGhpYy5sb25naXR1ZGUpOwogICAgICBwYWNrSW5kZXggKz0gMzsKICAgICAgZGlzdGFuY2VGcm9tU3RhcnQgKz0gaW50ZXJwb2ludERpc3RhbmNlOwogICAgfQogIH0KICBmdW5jdGlvbiBnZXRQb3NpdGlvbihlbGxpcHNvaWQsIGNhcnRvZ3JhcGhpYzIsIGhlaWdodCwgcmVzdWx0KSB7CiAgICBDYXJ0b2dyYXBoaWNfZGVmYXVsdC5jbG9uZShjYXJ0b2dyYXBoaWMyLCBoZWlnaHRsZXNzQ2FydG9ncmFwaGljU2NyYXRjaCk7CiAgICBoZWlnaHRsZXNzQ2FydG9ncmFwaGljU2NyYXRjaC5oZWlnaHQgPSBoZWlnaHQ7CiAgICByZXR1cm4gQ2FydG9ncmFwaGljX2RlZmF1bHQudG9DYXJ0ZXNpYW4oCiAgICAgIGhlaWdodGxlc3NDYXJ0b2dyYXBoaWNTY3JhdGNoLAogICAgICBlbGxpcHNvaWQsCiAgICAgIHJlc3VsdAogICAgKTsKICB9CiAgZnVuY3Rpb24gZGlyZWN0aW9uKHRhcmdldCwgb3JpZ2luLCByZXN1bHQpIHsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCh0YXJnZXQsIG9yaWdpbiwgcmVzdWx0KTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUocmVzdWx0LCByZXN1bHQpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgZnVuY3Rpb24gdGFuZ2VudERpcmVjdGlvbih0YXJnZXQsIG9yaWdpbiwgdXAsIHJlc3VsdCkgewogICAgcmVzdWx0ID0gZGlyZWN0aW9uKHRhcmdldCwgb3JpZ2luLCByZXN1bHQpOwogICAgcmVzdWx0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHJlc3VsdCwgdXAsIHJlc3VsdCk7CiAgICByZXN1bHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHJlc3VsdCwgcmVzdWx0KTsKICAgIHJlc3VsdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyh1cCwgcmVzdWx0LCByZXN1bHQpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZVZlcnRleE1pdGVyTm9ybWFsKHByZXZpb3VzQm90dG9tLCB2ZXJ0ZXhCb3R0b20sIHZlcnRleFRvcCwgbmV4dEJvdHRvbSwgcmVzdWx0KSB7CiAgICBjb25zdCB1cCA9IGRpcmVjdGlvbih2ZXJ0ZXhUb3AsIHZlcnRleEJvdHRvbSwgdmVydGV4VXBTY3JhdGNoKTsKICAgIGNvbnN0IHRvUHJldmlvdXMgPSB0YW5nZW50RGlyZWN0aW9uKAogICAgICBwcmV2aW91c0JvdHRvbSwKICAgICAgdmVydGV4Qm90dG9tLAogICAgICB1cCwKICAgICAgdG9QcmV2aW91c1NjcmF0Y2gKICAgICk7CiAgICBjb25zdCB0b05leHQgPSB0YW5nZW50RGlyZWN0aW9uKG5leHRCb3R0b20sIHZlcnRleEJvdHRvbSwgdXAsIHRvTmV4dFNjcmF0Y2gpOwogICAgaWYgKE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KHRvUHJldmlvdXMsIHRvTmV4dCksCiAgICAgIGNvc2luZTE4MCwKICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT041CiAgICApKSB7CiAgICAgIHJlc3VsdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyh1cCwgdG9QcmV2aW91cywgcmVzdWx0KTsKICAgICAgcmVzdWx0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShyZXN1bHQsIHJlc3VsdCk7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CiAgICByZXN1bHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHRvTmV4dCwgdG9QcmV2aW91cywgcmVzdWx0KTsKICAgIHJlc3VsdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUocmVzdWx0LCByZXN1bHQpOwogICAgY29uc3QgZm9yd2FyZCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyh1cCwgcmVzdWx0LCBmb3J3YXJkU2NyYXRjaCk7CiAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh0b05leHQsIGZvcndhcmQpIDwgY29zaW5lOTApIHsKICAgICAgcmVzdWx0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShyZXN1bHQsIHJlc3VsdCk7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICBmdW5jdGlvbiBicmVha01pdGVyKGVuZEdlb21ldHJ5Tm9ybWFsLCBzdGFydEJvdHRvbSwgZW5kQm90dG9tLCBlbmRUb3ApIHsKICAgIGNvbnN0IGxpbmVEaXJlY3Rpb24gPSBkaXJlY3Rpb24oZW5kQm90dG9tLCBzdGFydEJvdHRvbSwgbGluZURpcmVjdGlvblNjcmF0Y2gpOwogICAgY29uc3QgZG90ID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChsaW5lRGlyZWN0aW9uLCBlbmRHZW9tZXRyeU5vcm1hbCk7CiAgICBpZiAoZG90ID4gTUlURVJfQlJFQUtfU01BTEwgfHwgZG90IDwgTUlURVJfQlJFQUtfTEFSR0UpIHsKICAgICAgY29uc3QgdmVydGV4VXAgPSBkaXJlY3Rpb24oZW5kVG9wLCBlbmRCb3R0b20sIHZlcnRleFVwU2NyYXRjaCk7CiAgICAgIGNvbnN0IGFuZ2xlID0gZG90IDwgTUlURVJfQlJFQUtfTEFSR0UgPyBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gOiAtTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPOwogICAgICBjb25zdCBxdWF0ZXJuaW9uID0gUXVhdGVybmlvbl9kZWZhdWx0LmZyb21BeGlzQW5nbGUoCiAgICAgICAgdmVydGV4VXAsCiAgICAgICAgYW5nbGUsCiAgICAgICAgcXVhdGVybmlvblNjcmF0Y2gzCiAgICAgICk7CiAgICAgIGNvbnN0IHJvdGF0aW9uTWF0cml4ID0gTWF0cml4M19kZWZhdWx0LmZyb21RdWF0ZXJuaW9uKHF1YXRlcm5pb24sIG1hdHJpeDNTY3JhdGNoKTsKICAgICAgTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IoCiAgICAgICAgcm90YXRpb25NYXRyaXgsCiAgICAgICAgZW5kR2VvbWV0cnlOb3JtYWwsCiAgICAgICAgZW5kR2VvbWV0cnlOb3JtYWwKICAgICAgKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIGZ1bmN0aW9uIHByb2plY3ROb3JtYWwocHJvamVjdGlvbiwgY2FydG9ncmFwaGljMiwgbm9ybWFsMiwgcHJvamVjdGVkUG9zaXRpb24sIHJlc3VsdCkgewogICAgY29uc3QgcG9zaXRpb24gPSBDYXJ0b2dyYXBoaWNfZGVmYXVsdC50b0NhcnRlc2lhbigKICAgICAgY2FydG9ncmFwaGljMiwKICAgICAgcHJvamVjdGlvbi5fZWxsaXBzb2lkLAogICAgICBub3JtYWxTdGFydHBvaW50U2NyYXRjaAogICAgKTsKICAgIGxldCBub3JtYWxFbmRwb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocG9zaXRpb24sIG5vcm1hbDIsIG5vcm1hbEVuZHBvaW50U2NyYXRjaCk7CiAgICBsZXQgZmxpcE5vcm1hbCA9IGZhbHNlOwogICAgY29uc3QgZWxsaXBzb2lkID0gcHJvamVjdGlvbi5fZWxsaXBzb2lkOwogICAgbGV0IG5vcm1hbEVuZHBvaW50Q2FydG9ncmFwaGljID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKAogICAgICBub3JtYWxFbmRwb2ludCwKICAgICAgZW5kUG9zQ2FydG9ncmFwaGljU2NyYXRjaAogICAgKTsKICAgIGlmIChNYXRoLmFicyhjYXJ0b2dyYXBoaWMyLmxvbmdpdHVkZSAtIG5vcm1hbEVuZHBvaW50Q2FydG9ncmFwaGljLmxvbmdpdHVkZSkgPiBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08pIHsKICAgICAgZmxpcE5vcm1hbCA9IHRydWU7CiAgICAgIG5vcm1hbEVuZHBvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgIHBvc2l0aW9uLAogICAgICAgIG5vcm1hbDIsCiAgICAgICAgbm9ybWFsRW5kcG9pbnRTY3JhdGNoCiAgICAgICk7CiAgICAgIG5vcm1hbEVuZHBvaW50Q2FydG9ncmFwaGljID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKAogICAgICAgIG5vcm1hbEVuZHBvaW50LAogICAgICAgIGVuZFBvc0NhcnRvZ3JhcGhpY1NjcmF0Y2gKICAgICAgKTsKICAgIH0KICAgIG5vcm1hbEVuZHBvaW50Q2FydG9ncmFwaGljLmhlaWdodCA9IDA7CiAgICBjb25zdCBub3JtYWxFbmRwb2ludFByb2plY3RlZCA9IHByb2plY3Rpb24ucHJvamVjdCgKICAgICAgbm9ybWFsRW5kcG9pbnRDYXJ0b2dyYXBoaWMsCiAgICAgIHJlc3VsdAogICAgKTsKICAgIHJlc3VsdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgbm9ybWFsRW5kcG9pbnRQcm9qZWN0ZWQsCiAgICAgIHByb2plY3RlZFBvc2l0aW9uLAogICAgICByZXN1bHQKICAgICk7CiAgICByZXN1bHQueiA9IDA7CiAgICByZXN1bHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHJlc3VsdCwgcmVzdWx0KTsKICAgIGlmIChmbGlwTm9ybWFsKSB7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUocmVzdWx0LCByZXN1bHQpOwogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgZnVuY3Rpb24gYWRqdXN0SGVpZ2h0cyhib3R0b20sIHRvcCwgbWluSGVpZ2h0LCBtYXhIZWlnaHQsIGFkanVzdEhlaWdodEJvdHRvbSwgYWRqdXN0SGVpZ2h0VG9wKSB7CiAgICBjb25zdCBhZGp1c3RIZWlnaHROb3JtYWwgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgIHRvcCwKICAgICAgYm90dG9tLAogICAgICBhZGp1c3RIZWlnaHROb3JtYWxTY3JhdGNoCiAgICApOwogICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShhZGp1c3RIZWlnaHROb3JtYWwsIGFkanVzdEhlaWdodE5vcm1hbCk7CiAgICBjb25zdCBkaXN0YW5jZUZvckJvdHRvbSA9IG1pbkhlaWdodCAtIFdBTExfSU5JVElBTF9NSU5fSEVJR0hUOwogICAgbGV0IGFkanVzdEhlaWdodE9mZnNldCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICBhZGp1c3RIZWlnaHROb3JtYWwsCiAgICAgIGRpc3RhbmNlRm9yQm90dG9tLAogICAgICBhZGp1c3RIZWlnaHRPZmZzZXRTY3JhdGNoCiAgICApOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChib3R0b20sIGFkanVzdEhlaWdodE9mZnNldCwgYWRqdXN0SGVpZ2h0Qm90dG9tKTsKICAgIGNvbnN0IGRpc3RhbmNlRm9yVG9wID0gbWF4SGVpZ2h0IC0gV0FMTF9JTklUSUFMX01BWF9IRUlHSFQ7CiAgICBhZGp1c3RIZWlnaHRPZmZzZXQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgYWRqdXN0SGVpZ2h0Tm9ybWFsLAogICAgICBkaXN0YW5jZUZvclRvcCwKICAgICAgYWRqdXN0SGVpZ2h0T2Zmc2V0U2NyYXRjaAogICAgKTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQodG9wLCBhZGp1c3RIZWlnaHRPZmZzZXQsIGFkanVzdEhlaWdodFRvcCk7CiAgfQogIGZ1bmN0aW9uIG51ZGdlWFooc3RhcnQsIGVuZCkgewogICAgY29uc3Qgc3RhcnRUb1haZGlzdGFuY2UgPSBQbGFuZV9kZWZhdWx0LmdldFBvaW50RGlzdGFuY2UoWFpfUExBTkUsIHN0YXJ0KTsKICAgIGNvbnN0IGVuZFRvWFpkaXN0YW5jZSA9IFBsYW5lX2RlZmF1bHQuZ2V0UG9pbnREaXN0YW5jZShYWl9QTEFORSwgZW5kKTsKICAgIGxldCBvZmZzZXQgPSBudWRnZURpcmVjdGlvblNjcmF0Y2g7CiAgICBpZiAoTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oc3RhcnRUb1haZGlzdGFuY2UsIDAsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMikpIHsKICAgICAgb2Zmc2V0ID0gZGlyZWN0aW9uKGVuZCwgc3RhcnQsIG9mZnNldCk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKG9mZnNldCwgTWF0aF9kZWZhdWx0LkVQU0lMT04yLCBvZmZzZXQpOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHN0YXJ0LCBvZmZzZXQsIHN0YXJ0KTsKICAgIH0gZWxzZSBpZiAoTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oZW5kVG9YWmRpc3RhbmNlLCAwLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjIpKSB7CiAgICAgIG9mZnNldCA9IGRpcmVjdGlvbihzdGFydCwgZW5kLCBvZmZzZXQpOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihvZmZzZXQsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMiwgb2Zmc2V0KTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChlbmQsIG9mZnNldCwgZW5kKTsKICAgIH0KICB9CiAgZnVuY3Rpb24gbnVkZ2VDYXJ0b2dyYXBoaWMoc3RhcnQsIGVuZCkgewogICAgY29uc3QgYWJzU3RhcnRMb24gPSBNYXRoLmFicyhzdGFydC5sb25naXR1ZGUpOwogICAgY29uc3QgYWJzRW5kTG9uID0gTWF0aC5hYnMoZW5kLmxvbmdpdHVkZSk7CiAgICBpZiAoTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oYWJzU3RhcnRMb24sIE1hdGhfZGVmYXVsdC5QSSwgTWF0aF9kZWZhdWx0LkVQU0lMT04xMSkpIHsKICAgICAgY29uc3QgZW5kU2lnbiA9IE1hdGhfZGVmYXVsdC5zaWduKGVuZC5sb25naXR1ZGUpOwogICAgICBzdGFydC5sb25naXR1ZGUgPSBlbmRTaWduICogKGFic1N0YXJ0TG9uIC0gTWF0aF9kZWZhdWx0LkVQU0lMT04xMSk7CiAgICAgIHJldHVybiAxOwogICAgfSBlbHNlIGlmIChNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihhYnNFbmRMb24sIE1hdGhfZGVmYXVsdC5QSSwgTWF0aF9kZWZhdWx0LkVQU0lMT04xMSkpIHsKICAgICAgY29uc3Qgc3RhcnRTaWduID0gTWF0aF9kZWZhdWx0LnNpZ24oc3RhcnQubG9uZ2l0dWRlKTsKICAgICAgZW5kLmxvbmdpdHVkZSA9IHN0YXJ0U2lnbiAqIChhYnNFbmRMb24gLSBNYXRoX2RlZmF1bHQuRVBTSUxPTjExKTsKICAgICAgcmV0dXJuIDI7CiAgICB9CiAgICByZXR1cm4gMDsKICB9CiAgZnVuY3Rpb24gZ2VuZXJhdGVHZW9tZXRyeUF0dHJpYnV0ZXMobG9vcCwgcHJvamVjdGlvbiwgYm90dG9tUG9zaXRpb25zQXJyYXksIHRvcFBvc2l0aW9uc0FycmF5LCBub3JtYWxzQXJyYXksIGNhcnRvZ3JhcGhpY3NBcnJheSwgY29tcHV0ZTJkQXR0cmlidXRlcykgewogICAgbGV0IGk7CiAgICBsZXQgaW5kZXg7CiAgICBjb25zdCBlbGxpcHNvaWQgPSBwcm9qZWN0aW9uLl9lbGxpcHNvaWQ7CiAgICBjb25zdCBzZWdtZW50Q291bnQgPSBib3R0b21Qb3NpdGlvbnNBcnJheS5sZW5ndGggLyAzIC0gMTsKICAgIGNvbnN0IHZlcnRleENvdW50ID0gc2VnbWVudENvdW50ICogODsKICAgIGNvbnN0IGFycmF5U2l6ZVZlYzQgPSB2ZXJ0ZXhDb3VudCAqIDQ7CiAgICBjb25zdCBpbmRleENvdW50ID0gc2VnbWVudENvdW50ICogMzY7CiAgICBjb25zdCBpbmRpY2VzID0gdmVydGV4Q291bnQgPiA2NTUzNSA/IG5ldyBVaW50MzJBcnJheShpbmRleENvdW50KSA6IG5ldyBVaW50MTZBcnJheShpbmRleENvdW50KTsKICAgIGNvbnN0IHBvc2l0aW9uc0FycmF5ID0gbmV3IEZsb2F0NjRBcnJheSh2ZXJ0ZXhDb3VudCAqIDMpOwogICAgY29uc3Qgc3RhcnRIaUFuZEZvcndhcmRPZmZzZXRYID0gbmV3IEZsb2F0MzJBcnJheShhcnJheVNpemVWZWM0KTsKICAgIGNvbnN0IHN0YXJ0TG9BbmRGb3J3YXJkT2Zmc2V0WSA9IG5ldyBGbG9hdDMyQXJyYXkoYXJyYXlTaXplVmVjNCk7CiAgICBjb25zdCBzdGFydE5vcm1hbEFuZEZvcndhcmRPZmZzZXRaID0gbmV3IEZsb2F0MzJBcnJheShhcnJheVNpemVWZWM0KTsKICAgIGNvbnN0IGVuZE5vcm1hbEFuZFRleHR1cmVDb29yZGluYXRlTm9ybWFsaXphdGlvblggPSBuZXcgRmxvYXQzMkFycmF5KAogICAgICBhcnJheVNpemVWZWM0CiAgICApOwogICAgY29uc3QgcmlnaHROb3JtYWxBbmRUZXh0dXJlQ29vcmRpbmF0ZU5vcm1hbGl6YXRpb25ZID0gbmV3IEZsb2F0MzJBcnJheSgKICAgICAgYXJyYXlTaXplVmVjNAogICAgKTsKICAgIGxldCBzdGFydEhpTG8yRDsKICAgIGxldCBvZmZzZXRBbmRSaWdodDJEOwogICAgbGV0IHN0YXJ0RW5kTm9ybWFsczJEOwogICAgbGV0IHRleGNvb3JkTm9ybWFsaXphdGlvbjJEOwogICAgaWYgKGNvbXB1dGUyZEF0dHJpYnV0ZXMpIHsKICAgICAgc3RhcnRIaUxvMkQgPSBuZXcgRmxvYXQzMkFycmF5KGFycmF5U2l6ZVZlYzQpOwogICAgICBvZmZzZXRBbmRSaWdodDJEID0gbmV3IEZsb2F0MzJBcnJheShhcnJheVNpemVWZWM0KTsKICAgICAgc3RhcnRFbmROb3JtYWxzMkQgPSBuZXcgRmxvYXQzMkFycmF5KGFycmF5U2l6ZVZlYzQpOwogICAgICB0ZXhjb29yZE5vcm1hbGl6YXRpb24yRCA9IG5ldyBGbG9hdDMyQXJyYXkodmVydGV4Q291bnQgKiAyKTsKICAgIH0KICAgIGNvbnN0IGNhcnRvZ3JhcGhpY3NMZW5ndGggPSBjYXJ0b2dyYXBoaWNzQXJyYXkubGVuZ3RoIC8gMjsKICAgIGxldCBsZW5ndGgyRCA9IDA7CiAgICBjb25zdCBzdGFydENhcnRvZ3JhcGhpYyA9IHN0YXJ0Q2FydG9ncmFwaGljU2NyYXRjaDsKICAgIHN0YXJ0Q2FydG9ncmFwaGljLmhlaWdodCA9IDA7CiAgICBjb25zdCBlbmRDYXJ0b2dyYXBoaWMgPSBlbmRDYXJ0b2dyYXBoaWNTY3JhdGNoOwogICAgZW5kQ2FydG9ncmFwaGljLmhlaWdodCA9IDA7CiAgICBsZXQgc2VnbWVudFN0YXJ0Q2FydGVzaWFuID0gc2VnbWVudFN0YXJ0VG9wU2NyYXRjaDsKICAgIGxldCBzZWdtZW50RW5kQ2FydGVzaWFuID0gc2VnbWVudEVuZFRvcFNjcmF0Y2g7CiAgICBpZiAoY29tcHV0ZTJkQXR0cmlidXRlcykgewogICAgICBpbmRleCA9IDA7CiAgICAgIGZvciAoaSA9IDE7IGkgPCBjYXJ0b2dyYXBoaWNzTGVuZ3RoOyBpKyspIHsKICAgICAgICBzdGFydENhcnRvZ3JhcGhpYy5sYXRpdHVkZSA9IGNhcnRvZ3JhcGhpY3NBcnJheVtpbmRleF07CiAgICAgICAgc3RhcnRDYXJ0b2dyYXBoaWMubG9uZ2l0dWRlID0gY2FydG9ncmFwaGljc0FycmF5W2luZGV4ICsgMV07CiAgICAgICAgZW5kQ2FydG9ncmFwaGljLmxhdGl0dWRlID0gY2FydG9ncmFwaGljc0FycmF5W2luZGV4ICsgMl07CiAgICAgICAgZW5kQ2FydG9ncmFwaGljLmxvbmdpdHVkZSA9IGNhcnRvZ3JhcGhpY3NBcnJheVtpbmRleCArIDNdOwogICAgICAgIHNlZ21lbnRTdGFydENhcnRlc2lhbiA9IHByb2plY3Rpb24ucHJvamVjdCgKICAgICAgICAgIHN0YXJ0Q2FydG9ncmFwaGljLAogICAgICAgICAgc2VnbWVudFN0YXJ0Q2FydGVzaWFuCiAgICAgICAgKTsKICAgICAgICBzZWdtZW50RW5kQ2FydGVzaWFuID0gcHJvamVjdGlvbi5wcm9qZWN0KAogICAgICAgICAgZW5kQ2FydG9ncmFwaGljLAogICAgICAgICAgc2VnbWVudEVuZENhcnRlc2lhbgogICAgICAgICk7CiAgICAgICAgbGVuZ3RoMkQgKz0gQ2FydGVzaWFuM19kZWZhdWx0LmRpc3RhbmNlKAogICAgICAgICAgc2VnbWVudFN0YXJ0Q2FydGVzaWFuLAogICAgICAgICAgc2VnbWVudEVuZENhcnRlc2lhbgogICAgICAgICk7CiAgICAgICAgaW5kZXggKz0gMjsKICAgICAgfQogICAgfQogICAgY29uc3QgcG9zaXRpb25zTGVuZ3RoID0gdG9wUG9zaXRpb25zQXJyYXkubGVuZ3RoIC8gMzsKICAgIHNlZ21lbnRFbmRDYXJ0ZXNpYW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKAogICAgICB0b3BQb3NpdGlvbnNBcnJheSwKICAgICAgMCwKICAgICAgc2VnbWVudEVuZENhcnRlc2lhbgogICAgKTsKICAgIGxldCBsZW5ndGgzRCA9IDA7CiAgICBpbmRleCA9IDM7CiAgICBmb3IgKGkgPSAxOyBpIDwgcG9zaXRpb25zTGVuZ3RoOyBpKyspIHsKICAgICAgc2VnbWVudFN0YXJ0Q2FydGVzaWFuID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKAogICAgICAgIHNlZ21lbnRFbmRDYXJ0ZXNpYW4sCiAgICAgICAgc2VnbWVudFN0YXJ0Q2FydGVzaWFuCiAgICAgICk7CiAgICAgIHNlZ21lbnRFbmRDYXJ0ZXNpYW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKAogICAgICAgIHRvcFBvc2l0aW9uc0FycmF5LAogICAgICAgIGluZGV4LAogICAgICAgIHNlZ21lbnRFbmRDYXJ0ZXNpYW4KICAgICAgKTsKICAgICAgbGVuZ3RoM0QgKz0gQ2FydGVzaWFuM19kZWZhdWx0LmRpc3RhbmNlKHNlZ21lbnRTdGFydENhcnRlc2lhbiwgc2VnbWVudEVuZENhcnRlc2lhbik7CiAgICAgIGluZGV4ICs9IDM7CiAgICB9CiAgICBsZXQgajsKICAgIGluZGV4ID0gMzsKICAgIGxldCBjYXJ0b2dyYXBoaWNzSW5kZXggPSAwOwogICAgbGV0IHZlYzJzV3JpdGVJbmRleCA9IDA7CiAgICBsZXQgdmVjM3NXcml0ZUluZGV4ID0gMDsKICAgIGxldCB2ZWM0c1dyaXRlSW5kZXggPSAwOwogICAgbGV0IG1pdGVyQnJva2VuID0gZmFsc2U7CiAgICBsZXQgZW5kQm90dG9tID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgYm90dG9tUG9zaXRpb25zQXJyYXksCiAgICAgIDAsCiAgICAgIHNlZ21lbnRFbmRCb3R0b21TY3JhdGNoCiAgICApOwogICAgbGV0IGVuZFRvcCA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2sodG9wUG9zaXRpb25zQXJyYXksIDAsIHNlZ21lbnRFbmRUb3BTY3JhdGNoKTsKICAgIGxldCBlbmRHZW9tZXRyeU5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soCiAgICAgIG5vcm1hbHNBcnJheSwKICAgICAgMCwKICAgICAgc2VnbWVudEVuZE5vcm1hbFNjcmF0Y2gKICAgICk7CiAgICBpZiAobG9vcCkgewogICAgICBjb25zdCBwcmVFbmRCb3R0b20gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKAogICAgICAgIGJvdHRvbVBvc2l0aW9uc0FycmF5LAogICAgICAgIGJvdHRvbVBvc2l0aW9uc0FycmF5Lmxlbmd0aCAtIDYsCiAgICAgICAgc2VnbWVudFN0YXJ0Qm90dG9tU2NyYXRjaAogICAgICApOwogICAgICBpZiAoYnJlYWtNaXRlcihlbmRHZW9tZXRyeU5vcm1hbCwgcHJlRW5kQm90dG9tLCBlbmRCb3R0b20sIGVuZFRvcCkpIHsKICAgICAgICBlbmRHZW9tZXRyeU5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUoCiAgICAgICAgICBlbmRHZW9tZXRyeU5vcm1hbCwKICAgICAgICAgIGVuZEdlb21ldHJ5Tm9ybWFsCiAgICAgICAgKTsKICAgICAgfQogICAgfQogICAgbGV0IGxlbmd0aFNvRmFyM0QgPSAwOwogICAgbGV0IGxlbmd0aFNvRmFyMkQgPSAwOwogICAgbGV0IHN1bUhlaWdodHMgPSAwOwogICAgZm9yIChpID0gMDsgaSA8IHNlZ21lbnRDb3VudDsgaSsrKSB7CiAgICAgIGNvbnN0IHN0YXJ0Qm90dG9tID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGVuZEJvdHRvbSwgc2VnbWVudFN0YXJ0Qm90dG9tU2NyYXRjaCk7CiAgICAgIGNvbnN0IHN0YXJ0VG9wID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGVuZFRvcCwgc2VnbWVudFN0YXJ0VG9wU2NyYXRjaCk7CiAgICAgIGxldCBzdGFydEdlb21ldHJ5Tm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKAogICAgICAgIGVuZEdlb21ldHJ5Tm9ybWFsLAogICAgICAgIHNlZ21lbnRTdGFydE5vcm1hbFNjcmF0Y2gKICAgICAgKTsKICAgICAgaWYgKG1pdGVyQnJva2VuKSB7CiAgICAgICAgc3RhcnRHZW9tZXRyeU5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUoCiAgICAgICAgICBzdGFydEdlb21ldHJ5Tm9ybWFsLAogICAgICAgICAgc3RhcnRHZW9tZXRyeU5vcm1hbAogICAgICAgICk7CiAgICAgIH0KICAgICAgZW5kQm90dG9tID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICBib3R0b21Qb3NpdGlvbnNBcnJheSwKICAgICAgICBpbmRleCwKICAgICAgICBzZWdtZW50RW5kQm90dG9tU2NyYXRjaAogICAgICApOwogICAgICBlbmRUb3AgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKHRvcFBvc2l0aW9uc0FycmF5LCBpbmRleCwgc2VnbWVudEVuZFRvcFNjcmF0Y2gpOwogICAgICBlbmRHZW9tZXRyeU5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soCiAgICAgICAgbm9ybWFsc0FycmF5LAogICAgICAgIGluZGV4LAogICAgICAgIHNlZ21lbnRFbmROb3JtYWxTY3JhdGNoCiAgICAgICk7CiAgICAgIG1pdGVyQnJva2VuID0gYnJlYWtNaXRlcihlbmRHZW9tZXRyeU5vcm1hbCwgc3RhcnRCb3R0b20sIGVuZEJvdHRvbSwgZW5kVG9wKTsKICAgICAgc3RhcnRDYXJ0b2dyYXBoaWMubGF0aXR1ZGUgPSBjYXJ0b2dyYXBoaWNzQXJyYXlbY2FydG9ncmFwaGljc0luZGV4XTsKICAgICAgc3RhcnRDYXJ0b2dyYXBoaWMubG9uZ2l0dWRlID0gY2FydG9ncmFwaGljc0FycmF5W2NhcnRvZ3JhcGhpY3NJbmRleCArIDFdOwogICAgICBlbmRDYXJ0b2dyYXBoaWMubGF0aXR1ZGUgPSBjYXJ0b2dyYXBoaWNzQXJyYXlbY2FydG9ncmFwaGljc0luZGV4ICsgMl07CiAgICAgIGVuZENhcnRvZ3JhcGhpYy5sb25naXR1ZGUgPSBjYXJ0b2dyYXBoaWNzQXJyYXlbY2FydG9ncmFwaGljc0luZGV4ICsgM107CiAgICAgIGxldCBzdGFydDJEOwogICAgICBsZXQgZW5kMkQ7CiAgICAgIGxldCBzdGFydEdlb21ldHJ5Tm9ybWFsMkQ7CiAgICAgIGxldCBlbmRHZW9tZXRyeU5vcm1hbDJEOwogICAgICBpZiAoY29tcHV0ZTJkQXR0cmlidXRlcykgewogICAgICAgIGNvbnN0IG51ZGdlUmVzdWx0ID0gbnVkZ2VDYXJ0b2dyYXBoaWMoc3RhcnRDYXJ0b2dyYXBoaWMsIGVuZENhcnRvZ3JhcGhpYyk7CiAgICAgICAgc3RhcnQyRCA9IHByb2plY3Rpb24ucHJvamVjdChzdGFydENhcnRvZ3JhcGhpYywgc2VnbWVudFN0YXJ0MkRTY3JhdGNoKTsKICAgICAgICBlbmQyRCA9IHByb2plY3Rpb24ucHJvamVjdChlbmRDYXJ0b2dyYXBoaWMsIHNlZ21lbnRFbmQyRFNjcmF0Y2gpOwogICAgICAgIGNvbnN0IGRpcmVjdGlvbjJEID0gZGlyZWN0aW9uKGVuZDJELCBzdGFydDJELCBmb3J3YXJkT2Zmc2V0MkRTY3JhdGNoKTsKICAgICAgICBkaXJlY3Rpb24yRC55ID0gTWF0aC5hYnMoZGlyZWN0aW9uMkQueSk7CiAgICAgICAgc3RhcnRHZW9tZXRyeU5vcm1hbDJEID0gc2VnbWVudFN0YXJ0Tm9ybWFsMkRTY3JhdGNoOwogICAgICAgIGVuZEdlb21ldHJ5Tm9ybWFsMkQgPSBzZWdtZW50RW5kTm9ybWFsMkRTY3JhdGNoOwogICAgICAgIGlmIChudWRnZVJlc3VsdCA9PT0gMCB8fCBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGRpcmVjdGlvbjJELCBDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9ZKSA+IE1JVEVSX0JSRUFLX1NNQUxMKSB7CiAgICAgICAgICBzdGFydEdlb21ldHJ5Tm9ybWFsMkQgPSBwcm9qZWN0Tm9ybWFsKAogICAgICAgICAgICBwcm9qZWN0aW9uLAogICAgICAgICAgICBzdGFydENhcnRvZ3JhcGhpYywKICAgICAgICAgICAgc3RhcnRHZW9tZXRyeU5vcm1hbCwKICAgICAgICAgICAgc3RhcnQyRCwKICAgICAgICAgICAgc2VnbWVudFN0YXJ0Tm9ybWFsMkRTY3JhdGNoCiAgICAgICAgICApOwogICAgICAgICAgZW5kR2VvbWV0cnlOb3JtYWwyRCA9IHByb2plY3ROb3JtYWwoCiAgICAgICAgICAgIHByb2plY3Rpb24sCiAgICAgICAgICAgIGVuZENhcnRvZ3JhcGhpYywKICAgICAgICAgICAgZW5kR2VvbWV0cnlOb3JtYWwsCiAgICAgICAgICAgIGVuZDJELAogICAgICAgICAgICBzZWdtZW50RW5kTm9ybWFsMkRTY3JhdGNoCiAgICAgICAgICApOwogICAgICAgIH0gZWxzZSBpZiAobnVkZ2VSZXN1bHQgPT09IDEpIHsKICAgICAgICAgIGVuZEdlb21ldHJ5Tm9ybWFsMkQgPSBwcm9qZWN0Tm9ybWFsKAogICAgICAgICAgICBwcm9qZWN0aW9uLAogICAgICAgICAgICBlbmRDYXJ0b2dyYXBoaWMsCiAgICAgICAgICAgIGVuZEdlb21ldHJ5Tm9ybWFsLAogICAgICAgICAgICBlbmQyRCwKICAgICAgICAgICAgc2VnbWVudEVuZE5vcm1hbDJEU2NyYXRjaAogICAgICAgICAgKTsKICAgICAgICAgIHN0YXJ0R2VvbWV0cnlOb3JtYWwyRC54ID0gMDsKICAgICAgICAgIHN0YXJ0R2VvbWV0cnlOb3JtYWwyRC55ID0gTWF0aF9kZWZhdWx0LnNpZ24oCiAgICAgICAgICAgIHN0YXJ0Q2FydG9ncmFwaGljLmxvbmdpdHVkZSAtIE1hdGguYWJzKGVuZENhcnRvZ3JhcGhpYy5sb25naXR1ZGUpCiAgICAgICAgICApOwogICAgICAgICAgc3RhcnRHZW9tZXRyeU5vcm1hbDJELnogPSAwOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdGFydEdlb21ldHJ5Tm9ybWFsMkQgPSBwcm9qZWN0Tm9ybWFsKAogICAgICAgICAgICBwcm9qZWN0aW9uLAogICAgICAgICAgICBzdGFydENhcnRvZ3JhcGhpYywKICAgICAgICAgICAgc3RhcnRHZW9tZXRyeU5vcm1hbCwKICAgICAgICAgICAgc3RhcnQyRCwKICAgICAgICAgICAgc2VnbWVudFN0YXJ0Tm9ybWFsMkRTY3JhdGNoCiAgICAgICAgICApOwogICAgICAgICAgZW5kR2VvbWV0cnlOb3JtYWwyRC54ID0gMDsKICAgICAgICAgIGVuZEdlb21ldHJ5Tm9ybWFsMkQueSA9IE1hdGhfZGVmYXVsdC5zaWduKAogICAgICAgICAgICBzdGFydENhcnRvZ3JhcGhpYy5sb25naXR1ZGUgLSBlbmRDYXJ0b2dyYXBoaWMubG9uZ2l0dWRlCiAgICAgICAgICApOwogICAgICAgICAgZW5kR2VvbWV0cnlOb3JtYWwyRC56ID0gMDsKICAgICAgICB9CiAgICAgIH0KICAgICAgY29uc3Qgc2VnbWVudExlbmd0aDNEID0gQ2FydGVzaWFuM19kZWZhdWx0LmRpc3RhbmNlKHN0YXJ0VG9wLCBlbmRUb3ApOwogICAgICBjb25zdCBlbmNvZGVkU3RhcnQgPSBFbmNvZGVkQ2FydGVzaWFuM19kZWZhdWx0LmZyb21DYXJ0ZXNpYW4oCiAgICAgICAgc3RhcnRCb3R0b20sCiAgICAgICAgZW5jb2RlU2NyYXRjaAogICAgICApOwogICAgICBjb25zdCBmb3J3YXJkT2Zmc2V0ID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgIGVuZEJvdHRvbSwKICAgICAgICBzdGFydEJvdHRvbSwKICAgICAgICBvZmZzZXRTY3JhdGNoMgogICAgICApOwogICAgICBjb25zdCBmb3J3YXJkID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShmb3J3YXJkT2Zmc2V0LCByaWdodFNjcmF0Y2gyKTsKICAgICAgbGV0IHN0YXJ0VXAgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3Qoc3RhcnRUb3AsIHN0YXJ0Qm90dG9tLCBzdGFydFVwU2NyYXRjaCk7CiAgICAgIHN0YXJ0VXAgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHN0YXJ0VXAsIHN0YXJ0VXApOwogICAgICBsZXQgcmlnaHROb3JtYWwgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoZm9yd2FyZCwgc3RhcnRVcCwgcmlnaHRTY3JhdGNoMik7CiAgICAgIHJpZ2h0Tm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShyaWdodE5vcm1hbCwgcmlnaHROb3JtYWwpOwogICAgICBsZXQgc3RhcnRQbGFuZU5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcygKICAgICAgICBzdGFydFVwLAogICAgICAgIHN0YXJ0R2VvbWV0cnlOb3JtYWwsCiAgICAgICAgc3RhcnRQbGFuZU5vcm1hbFNjcmF0Y2gKICAgICAgKTsKICAgICAgc3RhcnRQbGFuZU5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoc3RhcnRQbGFuZU5vcm1hbCwgc3RhcnRQbGFuZU5vcm1hbCk7CiAgICAgIGxldCBlbmRVcCA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChlbmRUb3AsIGVuZEJvdHRvbSwgZW5kVXBTY3JhdGNoKTsKICAgICAgZW5kVXAgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGVuZFVwLCBlbmRVcCk7CiAgICAgIGxldCBlbmRQbGFuZU5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcygKICAgICAgICBlbmRHZW9tZXRyeU5vcm1hbCwKICAgICAgICBlbmRVcCwKICAgICAgICBlbmRQbGFuZU5vcm1hbFNjcmF0Y2gKICAgICAgKTsKICAgICAgZW5kUGxhbmVOb3JtYWwgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGVuZFBsYW5lTm9ybWFsLCBlbmRQbGFuZU5vcm1hbCk7CiAgICAgIGNvbnN0IHRleGNvb3JkTm9ybWFsaXphdGlvbjNEWCA9IHNlZ21lbnRMZW5ndGgzRCAvIGxlbmd0aDNEOwogICAgICBjb25zdCB0ZXhjb29yZE5vcm1hbGl6YXRpb24zRFkgPSBsZW5ndGhTb0ZhcjNEIC8gbGVuZ3RoM0Q7CiAgICAgIGxldCBzZWdtZW50TGVuZ3RoMkQgPSAwOwogICAgICBsZXQgZW5jb2RlZFN0YXJ0MkQ7CiAgICAgIGxldCBmb3J3YXJkT2Zmc2V0MkQ7CiAgICAgIGxldCByaWdodDJEOwogICAgICBsZXQgdGV4Y29vcmROb3JtYWxpemF0aW9uMkRYID0gMDsKICAgICAgbGV0IHRleGNvb3JkTm9ybWFsaXphdGlvbjJEWSA9IDA7CiAgICAgIGlmIChjb21wdXRlMmRBdHRyaWJ1dGVzKSB7CiAgICAgICAgc2VnbWVudExlbmd0aDJEID0gQ2FydGVzaWFuM19kZWZhdWx0LmRpc3RhbmNlKHN0YXJ0MkQsIGVuZDJEKTsKICAgICAgICBlbmNvZGVkU3RhcnQyRCA9IEVuY29kZWRDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUNhcnRlc2lhbigKICAgICAgICAgIHN0YXJ0MkQsCiAgICAgICAgICBlbmNvZGVTY3JhdGNoMkQKICAgICAgICApOwogICAgICAgIGZvcndhcmRPZmZzZXQyRCA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgICAgIGVuZDJELAogICAgICAgICAgc3RhcnQyRCwKICAgICAgICAgIGZvcndhcmRPZmZzZXQyRFNjcmF0Y2gKICAgICAgICApOwogICAgICAgIHJpZ2h0MkQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGZvcndhcmRPZmZzZXQyRCwgcmlnaHQyRFNjcmF0Y2gpOwogICAgICAgIGNvbnN0IHN3YXAyID0gcmlnaHQyRC54OwogICAgICAgIHJpZ2h0MkQueCA9IHJpZ2h0MkQueTsKICAgICAgICByaWdodDJELnkgPSAtc3dhcDI7CiAgICAgICAgdGV4Y29vcmROb3JtYWxpemF0aW9uMkRYID0gc2VnbWVudExlbmd0aDJEIC8gbGVuZ3RoMkQ7CiAgICAgICAgdGV4Y29vcmROb3JtYWxpemF0aW9uMkRZID0gbGVuZ3RoU29GYXIyRCAvIGxlbmd0aDJEOwogICAgICB9CiAgICAgIGZvciAoaiA9IDA7IGogPCA4OyBqKyspIHsKICAgICAgICBjb25zdCB2ZWM0SW5kZXggPSB2ZWM0c1dyaXRlSW5kZXggKyBqICogNDsKICAgICAgICBjb25zdCB2ZWMySW5kZXggPSB2ZWMyc1dyaXRlSW5kZXggKyBqICogMjsKICAgICAgICBjb25zdCB3SW5kZXggPSB2ZWM0SW5kZXggKyAzOwogICAgICAgIGNvbnN0IHJpZ2h0UGxhbmVTaWRlID0gaiA8IDQgPyAxIDogLTE7CiAgICAgICAgY29uc3QgdG9wQm90dG9tU2lkZSA9IGogPT09IDIgfHwgaiA9PT0gMyB8fCBqID09PSA2IHx8IGogPT09IDcgPyAxIDogLTE7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soZW5jb2RlZFN0YXJ0LmhpZ2gsIHN0YXJ0SGlBbmRGb3J3YXJkT2Zmc2V0WCwgdmVjNEluZGV4KTsKICAgICAgICBzdGFydEhpQW5kRm9yd2FyZE9mZnNldFhbd0luZGV4XSA9IGZvcndhcmRPZmZzZXQueDsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhlbmNvZGVkU3RhcnQubG93LCBzdGFydExvQW5kRm9yd2FyZE9mZnNldFksIHZlYzRJbmRleCk7CiAgICAgICAgc3RhcnRMb0FuZEZvcndhcmRPZmZzZXRZW3dJbmRleF0gPSBmb3J3YXJkT2Zmc2V0Lnk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soCiAgICAgICAgICBzdGFydFBsYW5lTm9ybWFsLAogICAgICAgICAgc3RhcnROb3JtYWxBbmRGb3J3YXJkT2Zmc2V0WiwKICAgICAgICAgIHZlYzRJbmRleAogICAgICAgICk7CiAgICAgICAgc3RhcnROb3JtYWxBbmRGb3J3YXJkT2Zmc2V0Wlt3SW5kZXhdID0gZm9yd2FyZE9mZnNldC56OwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKAogICAgICAgICAgZW5kUGxhbmVOb3JtYWwsCiAgICAgICAgICBlbmROb3JtYWxBbmRUZXh0dXJlQ29vcmRpbmF0ZU5vcm1hbGl6YXRpb25YLAogICAgICAgICAgdmVjNEluZGV4CiAgICAgICAgKTsKICAgICAgICBlbmROb3JtYWxBbmRUZXh0dXJlQ29vcmRpbmF0ZU5vcm1hbGl6YXRpb25YW3dJbmRleF0gPSB0ZXhjb29yZE5vcm1hbGl6YXRpb24zRFggKiByaWdodFBsYW5lU2lkZTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjaygKICAgICAgICAgIHJpZ2h0Tm9ybWFsLAogICAgICAgICAgcmlnaHROb3JtYWxBbmRUZXh0dXJlQ29vcmRpbmF0ZU5vcm1hbGl6YXRpb25ZLAogICAgICAgICAgdmVjNEluZGV4CiAgICAgICAgKTsKICAgICAgICBsZXQgdGV4Y29vcmROb3JtYWxpemF0aW9uID0gdGV4Y29vcmROb3JtYWxpemF0aW9uM0RZICogdG9wQm90dG9tU2lkZTsKICAgICAgICBpZiAodGV4Y29vcmROb3JtYWxpemF0aW9uID09PSAwICYmIHRvcEJvdHRvbVNpZGUgPCAwKSB7CiAgICAgICAgICB0ZXhjb29yZE5vcm1hbGl6YXRpb24gPSA5OwogICAgICAgIH0KICAgICAgICByaWdodE5vcm1hbEFuZFRleHR1cmVDb29yZGluYXRlTm9ybWFsaXphdGlvbllbd0luZGV4XSA9IHRleGNvb3JkTm9ybWFsaXphdGlvbjsKICAgICAgICBpZiAoY29tcHV0ZTJkQXR0cmlidXRlcykgewogICAgICAgICAgc3RhcnRIaUxvMkRbdmVjNEluZGV4XSA9IGVuY29kZWRTdGFydDJELmhpZ2gueDsKICAgICAgICAgIHN0YXJ0SGlMbzJEW3ZlYzRJbmRleCArIDFdID0gZW5jb2RlZFN0YXJ0MkQuaGlnaC55OwogICAgICAgICAgc3RhcnRIaUxvMkRbdmVjNEluZGV4ICsgMl0gPSBlbmNvZGVkU3RhcnQyRC5sb3cueDsKICAgICAgICAgIHN0YXJ0SGlMbzJEW3ZlYzRJbmRleCArIDNdID0gZW5jb2RlZFN0YXJ0MkQubG93Lnk7CiAgICAgICAgICBzdGFydEVuZE5vcm1hbHMyRFt2ZWM0SW5kZXhdID0gLXN0YXJ0R2VvbWV0cnlOb3JtYWwyRC55OwogICAgICAgICAgc3RhcnRFbmROb3JtYWxzMkRbdmVjNEluZGV4ICsgMV0gPSBzdGFydEdlb21ldHJ5Tm9ybWFsMkQueDsKICAgICAgICAgIHN0YXJ0RW5kTm9ybWFsczJEW3ZlYzRJbmRleCArIDJdID0gZW5kR2VvbWV0cnlOb3JtYWwyRC55OwogICAgICAgICAgc3RhcnRFbmROb3JtYWxzMkRbdmVjNEluZGV4ICsgM10gPSAtZW5kR2VvbWV0cnlOb3JtYWwyRC54OwogICAgICAgICAgb2Zmc2V0QW5kUmlnaHQyRFt2ZWM0SW5kZXhdID0gZm9yd2FyZE9mZnNldDJELng7CiAgICAgICAgICBvZmZzZXRBbmRSaWdodDJEW3ZlYzRJbmRleCArIDFdID0gZm9yd2FyZE9mZnNldDJELnk7CiAgICAgICAgICBvZmZzZXRBbmRSaWdodDJEW3ZlYzRJbmRleCArIDJdID0gcmlnaHQyRC54OwogICAgICAgICAgb2Zmc2V0QW5kUmlnaHQyRFt2ZWM0SW5kZXggKyAzXSA9IHJpZ2h0MkQueTsKICAgICAgICAgIHRleGNvb3JkTm9ybWFsaXphdGlvbjJEW3ZlYzJJbmRleF0gPSB0ZXhjb29yZE5vcm1hbGl6YXRpb24yRFggKiByaWdodFBsYW5lU2lkZTsKICAgICAgICAgIHRleGNvb3JkTm9ybWFsaXphdGlvbiA9IHRleGNvb3JkTm9ybWFsaXphdGlvbjJEWSAqIHRvcEJvdHRvbVNpZGU7CiAgICAgICAgICBpZiAodGV4Y29vcmROb3JtYWxpemF0aW9uID09PSAwICYmIHRvcEJvdHRvbVNpZGUgPCAwKSB7CiAgICAgICAgICAgIHRleGNvb3JkTm9ybWFsaXphdGlvbiA9IDk7CiAgICAgICAgICB9CiAgICAgICAgICB0ZXhjb29yZE5vcm1hbGl6YXRpb24yRFt2ZWMySW5kZXggKyAxXSA9IHRleGNvb3JkTm9ybWFsaXphdGlvbjsKICAgICAgICB9CiAgICAgIH0KICAgICAgY29uc3QgYWRqdXN0SGVpZ2h0U3RhcnRCb3R0b20gPSBhZGp1c3RIZWlnaHRTdGFydEJvdHRvbVNjcmF0Y2g7CiAgICAgIGNvbnN0IGFkanVzdEhlaWdodEVuZEJvdHRvbSA9IGFkanVzdEhlaWdodEVuZEJvdHRvbVNjcmF0Y2g7CiAgICAgIGNvbnN0IGFkanVzdEhlaWdodFN0YXJ0VG9wID0gYWRqdXN0SGVpZ2h0U3RhcnRUb3BTY3JhdGNoOwogICAgICBjb25zdCBhZGp1c3RIZWlnaHRFbmRUb3AgPSBhZGp1c3RIZWlnaHRFbmRUb3BTY3JhdGNoOwogICAgICBjb25zdCBnZXRIZWlnaHRzUmVjdGFuZ2xlID0gUmVjdGFuZ2xlX2RlZmF1bHQuZnJvbUNhcnRvZ3JhcGhpY0FycmF5KAogICAgICAgIGdldEhlaWdodENhcnRvZ3JhcGhpY3MsCiAgICAgICAgZ2V0SGVpZ2h0UmVjdGFuZ2xlU2NyYXRjaAogICAgICApOwogICAgICBjb25zdCBtaW5NYXhIZWlnaHRzID0gQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0c19kZWZhdWx0LmdldE1pbmltdW1NYXhpbXVtSGVpZ2h0cygKICAgICAgICBnZXRIZWlnaHRzUmVjdGFuZ2xlLAogICAgICAgIGVsbGlwc29pZAogICAgICApOwogICAgICBjb25zdCBtaW5IZWlnaHQgPSBtaW5NYXhIZWlnaHRzLm1pbmltdW1UZXJyYWluSGVpZ2h0OwogICAgICBjb25zdCBtYXhIZWlnaHQgPSBtaW5NYXhIZWlnaHRzLm1heGltdW1UZXJyYWluSGVpZ2h0OwogICAgICBzdW1IZWlnaHRzICs9IE1hdGguYWJzKG1pbkhlaWdodCk7CiAgICAgIHN1bUhlaWdodHMgKz0gTWF0aC5hYnMobWF4SGVpZ2h0KTsKICAgICAgYWRqdXN0SGVpZ2h0cygKICAgICAgICBzdGFydEJvdHRvbSwKICAgICAgICBzdGFydFRvcCwKICAgICAgICBtaW5IZWlnaHQsCiAgICAgICAgbWF4SGVpZ2h0LAogICAgICAgIGFkanVzdEhlaWdodFN0YXJ0Qm90dG9tLAogICAgICAgIGFkanVzdEhlaWdodFN0YXJ0VG9wCiAgICAgICk7CiAgICAgIGFkanVzdEhlaWdodHMoCiAgICAgICAgZW5kQm90dG9tLAogICAgICAgIGVuZFRvcCwKICAgICAgICBtaW5IZWlnaHQsCiAgICAgICAgbWF4SGVpZ2h0LAogICAgICAgIGFkanVzdEhlaWdodEVuZEJvdHRvbSwKICAgICAgICBhZGp1c3RIZWlnaHRFbmRUb3AKICAgICAgKTsKICAgICAgbGV0IG5vcm1hbE51ZGdlID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgcmlnaHROb3JtYWwsCiAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT041LAogICAgICAgIG5vcm1hbE51ZGdlU2NyYXRjaAogICAgICApOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICAgIGFkanVzdEhlaWdodFN0YXJ0Qm90dG9tLAogICAgICAgIG5vcm1hbE51ZGdlLAogICAgICAgIGFkanVzdEhlaWdodFN0YXJ0Qm90dG9tCiAgICAgICk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoYWRqdXN0SGVpZ2h0RW5kQm90dG9tLCBub3JtYWxOdWRnZSwgYWRqdXN0SGVpZ2h0RW5kQm90dG9tKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChhZGp1c3RIZWlnaHRTdGFydFRvcCwgbm9ybWFsTnVkZ2UsIGFkanVzdEhlaWdodFN0YXJ0VG9wKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChhZGp1c3RIZWlnaHRFbmRUb3AsIG5vcm1hbE51ZGdlLCBhZGp1c3RIZWlnaHRFbmRUb3ApOwogICAgICBudWRnZVhaKGFkanVzdEhlaWdodFN0YXJ0Qm90dG9tLCBhZGp1c3RIZWlnaHRFbmRCb3R0b20pOwogICAgICBudWRnZVhaKGFkanVzdEhlaWdodFN0YXJ0VG9wLCBhZGp1c3RIZWlnaHRFbmRUb3ApOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhhZGp1c3RIZWlnaHRTdGFydEJvdHRvbSwgcG9zaXRpb25zQXJyYXksIHZlYzNzV3JpdGVJbmRleCk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGFkanVzdEhlaWdodEVuZEJvdHRvbSwgcG9zaXRpb25zQXJyYXksIHZlYzNzV3JpdGVJbmRleCArIDMpOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhhZGp1c3RIZWlnaHRFbmRUb3AsIHBvc2l0aW9uc0FycmF5LCB2ZWMzc1dyaXRlSW5kZXggKyA2KTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soYWRqdXN0SGVpZ2h0U3RhcnRUb3AsIHBvc2l0aW9uc0FycmF5LCB2ZWMzc1dyaXRlSW5kZXggKyA5KTsKICAgICAgbm9ybWFsTnVkZ2UgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICByaWdodE5vcm1hbCwKICAgICAgICAtMiAqIE1hdGhfZGVmYXVsdC5FUFNJTE9ONSwKICAgICAgICBub3JtYWxOdWRnZVNjcmF0Y2gKICAgICAgKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZCgKICAgICAgICBhZGp1c3RIZWlnaHRTdGFydEJvdHRvbSwKICAgICAgICBub3JtYWxOdWRnZSwKICAgICAgICBhZGp1c3RIZWlnaHRTdGFydEJvdHRvbQogICAgICApOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGFkanVzdEhlaWdodEVuZEJvdHRvbSwgbm9ybWFsTnVkZ2UsIGFkanVzdEhlaWdodEVuZEJvdHRvbSk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoYWRqdXN0SGVpZ2h0U3RhcnRUb3AsIG5vcm1hbE51ZGdlLCBhZGp1c3RIZWlnaHRTdGFydFRvcCk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoYWRqdXN0SGVpZ2h0RW5kVG9wLCBub3JtYWxOdWRnZSwgYWRqdXN0SGVpZ2h0RW5kVG9wKTsKICAgICAgbnVkZ2VYWihhZGp1c3RIZWlnaHRTdGFydEJvdHRvbSwgYWRqdXN0SGVpZ2h0RW5kQm90dG9tKTsKICAgICAgbnVkZ2VYWihhZGp1c3RIZWlnaHRTdGFydFRvcCwgYWRqdXN0SGVpZ2h0RW5kVG9wKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soCiAgICAgICAgYWRqdXN0SGVpZ2h0U3RhcnRCb3R0b20sCiAgICAgICAgcG9zaXRpb25zQXJyYXksCiAgICAgICAgdmVjM3NXcml0ZUluZGV4ICsgMTIKICAgICAgKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soCiAgICAgICAgYWRqdXN0SGVpZ2h0RW5kQm90dG9tLAogICAgICAgIHBvc2l0aW9uc0FycmF5LAogICAgICAgIHZlYzNzV3JpdGVJbmRleCArIDE1CiAgICAgICk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGFkanVzdEhlaWdodEVuZFRvcCwgcG9zaXRpb25zQXJyYXksIHZlYzNzV3JpdGVJbmRleCArIDE4KTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soYWRqdXN0SGVpZ2h0U3RhcnRUb3AsIHBvc2l0aW9uc0FycmF5LCB2ZWMzc1dyaXRlSW5kZXggKyAyMSk7CiAgICAgIGNhcnRvZ3JhcGhpY3NJbmRleCArPSAyOwogICAgICBpbmRleCArPSAzOwogICAgICB2ZWMyc1dyaXRlSW5kZXggKz0gMTY7CiAgICAgIHZlYzNzV3JpdGVJbmRleCArPSAyNDsKICAgICAgdmVjNHNXcml0ZUluZGV4ICs9IDMyOwogICAgICBsZW5ndGhTb0ZhcjNEICs9IHNlZ21lbnRMZW5ndGgzRDsKICAgICAgbGVuZ3RoU29GYXIyRCArPSBzZWdtZW50TGVuZ3RoMkQ7CiAgICB9CiAgICBpbmRleCA9IDA7CiAgICBsZXQgaW5kZXhPZmZzZXQgPSAwOwogICAgZm9yIChpID0gMDsgaSA8IHNlZ21lbnRDb3VudDsgaSsrKSB7CiAgICAgIGZvciAoaiA9IDA7IGogPCBSRUZFUkVOQ0VfSU5ESUNFU19MRU5HVEg7IGorKykgewogICAgICAgIGluZGljZXNbaW5kZXggKyBqXSA9IFJFRkVSRU5DRV9JTkRJQ0VTW2pdICsgaW5kZXhPZmZzZXQ7CiAgICAgIH0KICAgICAgaW5kZXhPZmZzZXQgKz0gODsKICAgICAgaW5kZXggKz0gUkVGRVJFTkNFX0lORElDRVNfTEVOR1RIOwogICAgfQogICAgY29uc3QgYm91bmRpbmdTcGhlcmVzID0gc2NyYXRjaEJvdW5kaW5nU3BoZXJlczsKICAgIEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVZlcnRpY2VzKAogICAgICBib3R0b21Qb3NpdGlvbnNBcnJheSwKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sCiAgICAgIDMsCiAgICAgIGJvdW5kaW5nU3BoZXJlc1swXQogICAgKTsKICAgIEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVZlcnRpY2VzKAogICAgICB0b3BQb3NpdGlvbnNBcnJheSwKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sCiAgICAgIDMsCiAgICAgIGJvdW5kaW5nU3BoZXJlc1sxXQogICAgKTsKICAgIGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tQm91bmRpbmdTcGhlcmVzKGJvdW5kaW5nU3BoZXJlcyk7CiAgICBib3VuZGluZ1NwaGVyZS5yYWRpdXMgKz0gc3VtSGVpZ2h0cyAvIChzZWdtZW50Q291bnQgKiAyKTsKICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB7CiAgICAgIHBvc2l0aW9uOiBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgbm9ybWFsaXplOiBmYWxzZSwKICAgICAgICB2YWx1ZXM6IHBvc2l0aW9uc0FycmF5CiAgICAgIH0pLAogICAgICBzdGFydEhpQW5kRm9yd2FyZE9mZnNldFg6IGdldFZlYzRHZW9tZXRyeUF0dHJpYnV0ZSgKICAgICAgICBzdGFydEhpQW5kRm9yd2FyZE9mZnNldFgKICAgICAgKSwKICAgICAgc3RhcnRMb0FuZEZvcndhcmRPZmZzZXRZOiBnZXRWZWM0R2VvbWV0cnlBdHRyaWJ1dGUoCiAgICAgICAgc3RhcnRMb0FuZEZvcndhcmRPZmZzZXRZCiAgICAgICksCiAgICAgIHN0YXJ0Tm9ybWFsQW5kRm9yd2FyZE9mZnNldFo6IGdldFZlYzRHZW9tZXRyeUF0dHJpYnV0ZSgKICAgICAgICBzdGFydE5vcm1hbEFuZEZvcndhcmRPZmZzZXRaCiAgICAgICksCiAgICAgIGVuZE5vcm1hbEFuZFRleHR1cmVDb29yZGluYXRlTm9ybWFsaXphdGlvblg6IGdldFZlYzRHZW9tZXRyeUF0dHJpYnV0ZSgKICAgICAgICBlbmROb3JtYWxBbmRUZXh0dXJlQ29vcmRpbmF0ZU5vcm1hbGl6YXRpb25YCiAgICAgICksCiAgICAgIHJpZ2h0Tm9ybWFsQW5kVGV4dHVyZUNvb3JkaW5hdGVOb3JtYWxpemF0aW9uWTogZ2V0VmVjNEdlb21ldHJ5QXR0cmlidXRlKAogICAgICAgIHJpZ2h0Tm9ybWFsQW5kVGV4dHVyZUNvb3JkaW5hdGVOb3JtYWxpemF0aW9uWQogICAgICApCiAgICB9OwogICAgaWYgKGNvbXB1dGUyZEF0dHJpYnV0ZXMpIHsKICAgICAgYXR0cmlidXRlcy5zdGFydEhpTG8yRCA9IGdldFZlYzRHZW9tZXRyeUF0dHJpYnV0ZShzdGFydEhpTG8yRCk7CiAgICAgIGF0dHJpYnV0ZXMub2Zmc2V0QW5kUmlnaHQyRCA9IGdldFZlYzRHZW9tZXRyeUF0dHJpYnV0ZShvZmZzZXRBbmRSaWdodDJEKTsKICAgICAgYXR0cmlidXRlcy5zdGFydEVuZE5vcm1hbHMyRCA9IGdldFZlYzRHZW9tZXRyeUF0dHJpYnV0ZShzdGFydEVuZE5vcm1hbHMyRCk7CiAgICAgIGF0dHJpYnV0ZXMudGV4Y29vcmROb3JtYWxpemF0aW9uMkQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMiwKICAgICAgICBub3JtYWxpemU6IGZhbHNlLAogICAgICAgIHZhbHVlczogdGV4Y29vcmROb3JtYWxpemF0aW9uMkQKICAgICAgfSk7CiAgICB9CiAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICBhdHRyaWJ1dGVzLAogICAgICBpbmRpY2VzLAogICAgICBib3VuZGluZ1NwaGVyZQogICAgfSk7CiAgfQogIGZ1bmN0aW9uIGdldFZlYzRHZW9tZXRyeUF0dHJpYnV0ZSh0eXBlZEFycmF5KSB7CiAgICByZXR1cm4gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogNCwKICAgICAgbm9ybWFsaXplOiBmYWxzZSwKICAgICAgdmFsdWVzOiB0eXBlZEFycmF5CiAgICB9KTsKICB9CiAgdmFyIFBST0pFQ1RJT05TLCBQUk9KRUNUSU9OX0NPVU5ULCBNSVRFUl9CUkVBS19TTUFMTCwgTUlURVJfQlJFQUtfTEFSR0UsIFdBTExfSU5JVElBTF9NSU5fSEVJR0hULCBXQUxMX0lOSVRJQUxfTUFYX0hFSUdIVCwgY2FydDNTY3JhdGNoMSwgY2FydDNTY3JhdGNoMiwgY2FydDNTY3JhdGNoMywgaW50ZXJwb2xhdGVkQ2FydG9ncmFwaGljU2NyYXRjaCwgaW50ZXJwb2xhdGVkQm90dG9tU2NyYXRjaCwgaW50ZXJwb2xhdGVkVG9wU2NyYXRjaCwgaW50ZXJwb2xhdGVkTm9ybWFsU2NyYXRjaCwgaGVpZ2h0bGVzc0NhcnRvZ3JhcGhpY1NjcmF0Y2gsIHRvUHJldmlvdXNTY3JhdGNoLCB0b05leHRTY3JhdGNoLCBmb3J3YXJkU2NyYXRjaCwgdmVydGV4VXBTY3JhdGNoLCBjb3NpbmU5MCwgY29zaW5lMTgwLCBYWl9QTEFORSwgcHJldmlvdXNCb3R0b21TY3JhdGNoLCB2ZXJ0ZXhCb3R0b21TY3JhdGNoLCB2ZXJ0ZXhUb3BTY3JhdGNoLCBuZXh0Qm90dG9tU2NyYXRjaCwgdmVydGV4Tm9ybWFsU2NyYXRjaCwgaW50ZXJzZWN0aW9uU2NyYXRjaCwgY2FydG9ncmFwaGljU2NyYXRjaDAsIGNhcnRvZ3JhcGhpY1NjcmF0Y2gxLCBjYXJ0b2dyYXBoaWNJbnRlcnNlY3Rpb25TY3JhdGNoLCBsaW5lRGlyZWN0aW9uU2NyYXRjaCwgbWF0cml4M1NjcmF0Y2gsIHF1YXRlcm5pb25TY3JhdGNoMywgZW5kUG9zQ2FydG9ncmFwaGljU2NyYXRjaCwgbm9ybWFsU3RhcnRwb2ludFNjcmF0Y2gsIG5vcm1hbEVuZHBvaW50U2NyYXRjaCwgYWRqdXN0SGVpZ2h0Tm9ybWFsU2NyYXRjaCwgYWRqdXN0SGVpZ2h0T2Zmc2V0U2NyYXRjaCwgbnVkZ2VEaXJlY3Rpb25TY3JhdGNoLCBzdGFydENhcnRvZ3JhcGhpY1NjcmF0Y2gsIGVuZENhcnRvZ3JhcGhpY1NjcmF0Y2gsIHNlZ21lbnRTdGFydFRvcFNjcmF0Y2gsIHNlZ21lbnRFbmRUb3BTY3JhdGNoLCBzZWdtZW50U3RhcnRCb3R0b21TY3JhdGNoLCBzZWdtZW50RW5kQm90dG9tU2NyYXRjaCwgc2VnbWVudFN0YXJ0Tm9ybWFsU2NyYXRjaCwgc2VnbWVudEVuZE5vcm1hbFNjcmF0Y2gsIGdldEhlaWdodENhcnRvZ3JhcGhpY3MsIGdldEhlaWdodFJlY3RhbmdsZVNjcmF0Y2gsIGFkanVzdEhlaWdodFN0YXJ0VG9wU2NyYXRjaCwgYWRqdXN0SGVpZ2h0RW5kVG9wU2NyYXRjaCwgYWRqdXN0SGVpZ2h0U3RhcnRCb3R0b21TY3JhdGNoLCBhZGp1c3RIZWlnaHRFbmRCb3R0b21TY3JhdGNoLCBzZWdtZW50U3RhcnQyRFNjcmF0Y2gsIHNlZ21lbnRFbmQyRFNjcmF0Y2gsIHNlZ21lbnRTdGFydE5vcm1hbDJEU2NyYXRjaCwgc2VnbWVudEVuZE5vcm1hbDJEU2NyYXRjaCwgb2Zmc2V0U2NyYXRjaDIsIHN0YXJ0VXBTY3JhdGNoLCBlbmRVcFNjcmF0Y2gsIHJpZ2h0U2NyYXRjaDIsIHN0YXJ0UGxhbmVOb3JtYWxTY3JhdGNoLCBlbmRQbGFuZU5vcm1hbFNjcmF0Y2gsIGVuY29kZVNjcmF0Y2gsIGVuY29kZVNjcmF0Y2gyRCwgZm9yd2FyZE9mZnNldDJEU2NyYXRjaCwgcmlnaHQyRFNjcmF0Y2gsIG5vcm1hbE51ZGdlU2NyYXRjaCwgc2NyYXRjaEJvdW5kaW5nU3BoZXJlcywgUkVGRVJFTkNFX0lORElDRVMsIFJFRkVSRU5DRV9JTkRJQ0VTX0xFTkdUSCwgR3JvdW5kUG9seWxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X0dyb3VuZFBvbHlsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dyb3VuZFBvbHlsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0FwcHJveGltYXRlVGVycmFpbkhlaWdodHMoKTsKICAgICAgaW5pdF9BcmNUeXBlKCk7CiAgICAgIGluaXRfYXJyYXlSZW1vdmVEdXBsaWNhdGVzKCk7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0VsbGlwc29pZEdlb2Rlc2ljKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkUmh1bWJMaW5lKCk7CiAgICAgIGluaXRfRW5jb2RlZENhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9HZW9ncmFwaGljUHJvamVjdGlvbigpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9JbnRlcnNlY3Rpb25UZXN0cygpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9NYXRyaXgzKCk7CiAgICAgIGluaXRfUGxhbmUoKTsKICAgICAgaW5pdF9RdWF0ZXJuaW9uKCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfV2ViTWVyY2F0b3JQcm9qZWN0aW9uKCk7CiAgICAgIFBST0pFQ1RJT05TID0gW0dlb2dyYXBoaWNQcm9qZWN0aW9uX2RlZmF1bHQsIFdlYk1lcmNhdG9yUHJvamVjdGlvbl9kZWZhdWx0XTsKICAgICAgUFJPSkVDVElPTl9DT1VOVCA9IFBST0pFQ1RJT05TLmxlbmd0aDsKICAgICAgTUlURVJfQlJFQUtfU01BTEwgPSBNYXRoLmNvcyhNYXRoX2RlZmF1bHQudG9SYWRpYW5zKDMwKSk7CiAgICAgIE1JVEVSX0JSRUFLX0xBUkdFID0gTWF0aC5jb3MoTWF0aF9kZWZhdWx0LnRvUmFkaWFucygxNTApKTsKICAgICAgV0FMTF9JTklUSUFMX01JTl9IRUlHSFQgPSAwOwogICAgICBXQUxMX0lOSVRJQUxfTUFYX0hFSUdIVCA9IDFlMzsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoR3JvdW5kUG9seWxpbmVHZW9tZXRyeS5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHVzZWQgdG8gcGFjayB0aGUgb2JqZWN0IGludG8gYW4gYXJyYXkuCiAgICAgICAgICogQG1lbWJlcm9mIEdyb3VuZFBvbHlsaW5lR2VvbWV0cnkucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqLwogICAgICAgIHBhY2tlZExlbmd0aDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIDEgKyB0aGlzLl9wb3NpdGlvbnMubGVuZ3RoICogMyArIDEgKyAxICsgMSArIEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIDEgKyAxOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIEdyb3VuZFBvbHlsaW5lR2VvbWV0cnkuc2V0UHJvamVjdGlvbkFuZEVsbGlwc29pZCA9IGZ1bmN0aW9uKGdyb3VuZFBvbHlsaW5lR2VvbWV0cnksIG1hcFByb2plY3Rpb24pIHsKICAgICAgICBsZXQgcHJvamVjdGlvbkluZGV4ID0gMDsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IFBST0pFQ1RJT05fQ09VTlQ7IGkrKykgewogICAgICAgICAgaWYgKG1hcFByb2plY3Rpb24gaW5zdGFuY2VvZiBQUk9KRUNUSU9OU1tpXSkgewogICAgICAgICAgICBwcm9qZWN0aW9uSW5kZXggPSBpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZ3JvdW5kUG9seWxpbmVHZW9tZXRyeS5fcHJvamVjdGlvbkluZGV4ID0gcHJvamVjdGlvbkluZGV4OwogICAgICAgIGdyb3VuZFBvbHlsaW5lR2VvbWV0cnkuX2VsbGlwc29pZCA9IG1hcFByb2plY3Rpb24uZWxsaXBzb2lkOwogICAgICB9OwogICAgICBjYXJ0M1NjcmF0Y2gxID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjYXJ0M1NjcmF0Y2gyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjYXJ0M1NjcmF0Y2gzID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBpbnRlcnBvbGF0ZWRDYXJ0b2dyYXBoaWNTY3JhdGNoID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIGludGVycG9sYXRlZEJvdHRvbVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGludGVycG9sYXRlZFRvcFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGludGVycG9sYXRlZE5vcm1hbFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGhlaWdodGxlc3NDYXJ0b2dyYXBoaWNTY3JhdGNoID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIEdyb3VuZFBvbHlsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBsZXQgaW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSB2YWx1ZS5fcG9zaXRpb25zOwogICAgICAgIGNvbnN0IHBvc2l0aW9uc0xlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgYXJyYXlbaW5kZXgrK10gPSBwb3NpdGlvbnNMZW5ndGg7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbnNMZW5ndGg7ICsraSkgewogICAgICAgICAgY29uc3QgY2FydGVzaWFuMTEgPSBwb3NpdGlvbnNbaV07CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhjYXJ0ZXNpYW4xMSwgYXJyYXksIGluZGV4KTsKICAgICAgICAgIGluZGV4ICs9IDM7CiAgICAgICAgfQogICAgICAgIGFycmF5W2luZGV4KytdID0gdmFsdWUuZ3JhbnVsYXJpdHk7CiAgICAgICAgYXJyYXlbaW5kZXgrK10gPSB2YWx1ZS5sb29wID8gMSA6IDA7CiAgICAgICAgYXJyYXlbaW5kZXgrK10gPSB2YWx1ZS5hcmNUeXBlOwogICAgICAgIEVsbGlwc29pZF9kZWZhdWx0LnBhY2sodmFsdWUuX2VsbGlwc29pZCwgYXJyYXksIGluZGV4KTsKICAgICAgICBpbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgYXJyYXlbaW5kZXgrK10gPSB2YWx1ZS5fcHJvamVjdGlvbkluZGV4OwogICAgICAgIGFycmF5W2luZGV4KytdID0gdmFsdWUuX3NjZW5lM0RPbmx5ID8gMSA6IDA7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBHcm91bmRQb2x5bGluZUdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIGxldCBpbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGNvbnN0IHBvc2l0aW9uc0xlbmd0aCA9IGFycmF5W2luZGV4KytdOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBBcnJheShwb3NpdGlvbnNMZW5ndGgpOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zTGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHBvc2l0aW9uc1tpXSA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soYXJyYXksIGluZGV4KTsKICAgICAgICAgIGluZGV4ICs9IDM7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gYXJyYXlbaW5kZXgrK107CiAgICAgICAgY29uc3QgbG9vcCA9IGFycmF5W2luZGV4KytdID09PSAxOwogICAgICAgIGNvbnN0IGFyY1R5cGUgPSBhcnJheVtpbmRleCsrXTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC51bnBhY2soYXJyYXksIGluZGV4KTsKICAgICAgICBpbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgcHJvamVjdGlvbkluZGV4ID0gYXJyYXlbaW5kZXgrK107CiAgICAgICAgY29uc3Qgc2NlbmUzRE9ubHkgPSBhcnJheVtpbmRleCsrXSA9PT0gMTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgR3JvdW5kUG9seWxpbmVHZW9tZXRyeSh7CiAgICAgICAgICAgIHBvc2l0aW9ucwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fcG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgICAgIHJlc3VsdC5ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgICAgIHJlc3VsdC5sb29wID0gbG9vcDsKICAgICAgICByZXN1bHQuYXJjVHlwZSA9IGFyY1R5cGU7CiAgICAgICAgcmVzdWx0Ll9lbGxpcHNvaWQgPSBlbGxpcHNvaWQ7CiAgICAgICAgcmVzdWx0Ll9wcm9qZWN0aW9uSW5kZXggPSBwcm9qZWN0aW9uSW5kZXg7CiAgICAgICAgcmVzdWx0Ll9zY2VuZTNET25seSA9IHNjZW5lM0RPbmx5OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHRvUHJldmlvdXNTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB0b05leHRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBmb3J3YXJkU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgdmVydGV4VXBTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjb3NpbmU5MCA9IDA7CiAgICAgIGNvc2luZTE4MCA9IC0xOwogICAgICBYWl9QTEFORSA9IFBsYW5lX2RlZmF1bHQuZnJvbVBvaW50Tm9ybWFsKENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLCBDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9ZKTsKICAgICAgcHJldmlvdXNCb3R0b21TY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB2ZXJ0ZXhCb3R0b21TY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB2ZXJ0ZXhUb3BTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBuZXh0Qm90dG9tU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgdmVydGV4Tm9ybWFsU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgaW50ZXJzZWN0aW9uU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydG9ncmFwaGljU2NyYXRjaDAgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgY2FydG9ncmFwaGljU2NyYXRjaDEgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgY2FydG9ncmFwaGljSW50ZXJzZWN0aW9uU2NyYXRjaCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBHcm91bmRQb2x5bGluZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24oZ3JvdW5kUG9seWxpbmVHZW9tZXRyeSkgewogICAgICAgIGNvbnN0IGNvbXB1dGUyZEF0dHJpYnV0ZXMgPSAhZ3JvdW5kUG9seWxpbmVHZW9tZXRyeS5fc2NlbmUzRE9ubHk7CiAgICAgICAgbGV0IGxvb3AgPSBncm91bmRQb2x5bGluZUdlb21ldHJ5Lmxvb3A7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gZ3JvdW5kUG9seWxpbmVHZW9tZXRyeS5fZWxsaXBzb2lkOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gZ3JvdW5kUG9seWxpbmVHZW9tZXRyeS5ncmFudWxhcml0eTsKICAgICAgICBjb25zdCBhcmNUeXBlID0gZ3JvdW5kUG9seWxpbmVHZW9tZXRyeS5hcmNUeXBlOwogICAgICAgIGNvbnN0IHByb2plY3Rpb24gPSBuZXcgUFJPSkVDVElPTlNbZ3JvdW5kUG9seWxpbmVHZW9tZXRyeS5fcHJvamVjdGlvbkluZGV4XSgKICAgICAgICAgIGVsbGlwc29pZAogICAgICAgICk7CiAgICAgICAgY29uc3QgbWluSGVpZ2h0ID0gV0FMTF9JTklUSUFMX01JTl9IRUlHSFQ7CiAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gV0FMTF9JTklUSUFMX01BWF9IRUlHSFQ7CiAgICAgICAgbGV0IGluZGV4OwogICAgICAgIGxldCBpOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IGdyb3VuZFBvbHlsaW5lR2VvbWV0cnkuX3Bvc2l0aW9uczsKICAgICAgICBjb25zdCBwb3NpdGlvbnNMZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGlmIChwb3NpdGlvbnNMZW5ndGggPT09IDIpIHsKICAgICAgICAgIGxvb3AgPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgbGV0IHAwOwogICAgICAgIGxldCBwMTsKICAgICAgICBsZXQgYzA7CiAgICAgICAgbGV0IGMxOwogICAgICAgIGNvbnN0IHJodW1iTGluZSA9IG5ldyBFbGxpcHNvaWRSaHVtYkxpbmVfZGVmYXVsdCh2b2lkIDAsIHZvaWQgMCwgZWxsaXBzb2lkKTsKICAgICAgICBsZXQgaW50ZXJzZWN0aW9uOwogICAgICAgIGxldCBpbnRlcnNlY3Rpb25DYXJ0b2dyYXBoaWM7CiAgICAgICAgbGV0IGludGVyc2VjdGlvbkxvbmdpdHVkZTsKICAgICAgICBjb25zdCBzcGxpdFBvc2l0aW9ucyA9IFtwb3NpdGlvbnNbMF1dOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBwb3NpdGlvbnNMZW5ndGggLSAxOyBpKyspIHsKICAgICAgICAgIHAwID0gcG9zaXRpb25zW2ldOwogICAgICAgICAgcDEgPSBwb3NpdGlvbnNbaSArIDFdOwogICAgICAgICAgaW50ZXJzZWN0aW9uID0gSW50ZXJzZWN0aW9uVGVzdHNfZGVmYXVsdC5saW5lU2VnbWVudFBsYW5lKAogICAgICAgICAgICBwMCwKICAgICAgICAgICAgcDEsCiAgICAgICAgICAgIFhaX1BMQU5FLAogICAgICAgICAgICBpbnRlcnNlY3Rpb25TY3JhdGNoCiAgICAgICAgICApOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbnRlcnNlY3Rpb24pICYmICFDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihpbnRlcnNlY3Rpb24sIHAwLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjcpICYmICFDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihpbnRlcnNlY3Rpb24sIHAxLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjcpKSB7CiAgICAgICAgICAgIGlmIChncm91bmRQb2x5bGluZUdlb21ldHJ5LmFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQykgewogICAgICAgICAgICAgIHNwbGl0UG9zaXRpb25zLnB1c2goQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGludGVyc2VjdGlvbikpOwogICAgICAgICAgICB9IGVsc2UgaWYgKGdyb3VuZFBvbHlsaW5lR2VvbWV0cnkuYXJjVHlwZSA9PT0gQXJjVHlwZV9kZWZhdWx0LlJIVU1CKSB7CiAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uTG9uZ2l0dWRlID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKAogICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uLAogICAgICAgICAgICAgICAgY2FydG9ncmFwaGljU2NyYXRjaDAKICAgICAgICAgICAgICApLmxvbmdpdHVkZTsKICAgICAgICAgICAgICBjMCA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhwMCwgY2FydG9ncmFwaGljU2NyYXRjaDApOwogICAgICAgICAgICAgIGMxID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKHAxLCBjYXJ0b2dyYXBoaWNTY3JhdGNoMSk7CiAgICAgICAgICAgICAgcmh1bWJMaW5lLnNldEVuZFBvaW50cyhjMCwgYzEpOwogICAgICAgICAgICAgIGludGVyc2VjdGlvbkNhcnRvZ3JhcGhpYyA9IHJodW1iTGluZS5maW5kSW50ZXJzZWN0aW9uV2l0aExvbmdpdHVkZSgKICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbkxvbmdpdHVkZSwKICAgICAgICAgICAgICAgIGNhcnRvZ3JhcGhpY0ludGVyc2VjdGlvblNjcmF0Y2gKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIGludGVyc2VjdGlvbiA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbigKICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbkNhcnRvZ3JhcGhpYywKICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblNjcmF0Y2gKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaW50ZXJzZWN0aW9uKSAmJiAhQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24oaW50ZXJzZWN0aW9uLCBwMCwgTWF0aF9kZWZhdWx0LkVQU0lMT043KSAmJiAhQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24oaW50ZXJzZWN0aW9uLCBwMSwgTWF0aF9kZWZhdWx0LkVQU0lMT043KSkgewogICAgICAgICAgICAgICAgc3BsaXRQb3NpdGlvbnMucHVzaChDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoaW50ZXJzZWN0aW9uKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBzcGxpdFBvc2l0aW9ucy5wdXNoKHAxKTsKICAgICAgICB9CiAgICAgICAgaWYgKGxvb3ApIHsKICAgICAgICAgIHAwID0gcG9zaXRpb25zW3Bvc2l0aW9uc0xlbmd0aCAtIDFdOwogICAgICAgICAgcDEgPSBwb3NpdGlvbnNbMF07CiAgICAgICAgICBpbnRlcnNlY3Rpb24gPSBJbnRlcnNlY3Rpb25UZXN0c19kZWZhdWx0LmxpbmVTZWdtZW50UGxhbmUoCiAgICAgICAgICAgIHAwLAogICAgICAgICAgICBwMSwKICAgICAgICAgICAgWFpfUExBTkUsCiAgICAgICAgICAgIGludGVyc2VjdGlvblNjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGludGVyc2VjdGlvbikgJiYgIUNhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKGludGVyc2VjdGlvbiwgcDAsIE1hdGhfZGVmYXVsdC5FUFNJTE9ONykgJiYgIUNhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKGludGVyc2VjdGlvbiwgcDEsIE1hdGhfZGVmYXVsdC5FUFNJTE9ONykpIHsKICAgICAgICAgICAgaWYgKGdyb3VuZFBvbHlsaW5lR2VvbWV0cnkuYXJjVHlwZSA9PT0gQXJjVHlwZV9kZWZhdWx0LkdFT0RFU0lDKSB7CiAgICAgICAgICAgICAgc3BsaXRQb3NpdGlvbnMucHVzaChDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoaW50ZXJzZWN0aW9uKSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoZ3JvdW5kUG9seWxpbmVHZW9tZXRyeS5hcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuUkhVTUIpIHsKICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25Mb25naXR1ZGUgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoCiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb24sCiAgICAgICAgICAgICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoMAogICAgICAgICAgICAgICkubG9uZ2l0dWRlOwogICAgICAgICAgICAgIGMwID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKHAwLCBjYXJ0b2dyYXBoaWNTY3JhdGNoMCk7CiAgICAgICAgICAgICAgYzEgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMocDEsIGNhcnRvZ3JhcGhpY1NjcmF0Y2gxKTsKICAgICAgICAgICAgICByaHVtYkxpbmUuc2V0RW5kUG9pbnRzKGMwLCBjMSk7CiAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uQ2FydG9ncmFwaGljID0gcmh1bWJMaW5lLmZpbmRJbnRlcnNlY3Rpb25XaXRoTG9uZ2l0dWRlKAogICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uTG9uZ2l0dWRlLAogICAgICAgICAgICAgICAgY2FydG9ncmFwaGljSW50ZXJzZWN0aW9uU2NyYXRjaAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKAogICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uQ2FydG9ncmFwaGljLAogICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uU2NyYXRjaAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbnRlcnNlY3Rpb24pICYmICFDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihpbnRlcnNlY3Rpb24sIHAwLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjcpICYmICFDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihpbnRlcnNlY3Rpb24sIHAxLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjcpKSB7CiAgICAgICAgICAgICAgICBzcGxpdFBvc2l0aW9ucy5wdXNoKENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShpbnRlcnNlY3Rpb24pKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgbGV0IGNhcnRvZ3JhcGhpY3NMZW5ndGggPSBzcGxpdFBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgbGV0IGNhcnRvZ3JhcGhpY3MgPSBuZXcgQXJyYXkoY2FydG9ncmFwaGljc0xlbmd0aCk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNhcnRvZ3JhcGhpY3NMZW5ndGg7IGkrKykgewogICAgICAgICAgY29uc3QgY2FydG9ncmFwaGljMiA9IENhcnRvZ3JhcGhpY19kZWZhdWx0LmZyb21DYXJ0ZXNpYW4oCiAgICAgICAgICAgIHNwbGl0UG9zaXRpb25zW2ldLAogICAgICAgICAgICBlbGxpcHNvaWQKICAgICAgICAgICk7CiAgICAgICAgICBjYXJ0b2dyYXBoaWMyLmhlaWdodCA9IDA7CiAgICAgICAgICBjYXJ0b2dyYXBoaWNzW2ldID0gY2FydG9ncmFwaGljMjsKICAgICAgICB9CiAgICAgICAgY2FydG9ncmFwaGljcyA9IGFycmF5UmVtb3ZlRHVwbGljYXRlc19kZWZhdWx0KAogICAgICAgICAgY2FydG9ncmFwaGljcywKICAgICAgICAgIENhcnRvZ3JhcGhpY19kZWZhdWx0LmVxdWFsc0Vwc2lsb24KICAgICAgICApOwogICAgICAgIGNhcnRvZ3JhcGhpY3NMZW5ndGggPSBjYXJ0b2dyYXBoaWNzLmxlbmd0aDsKICAgICAgICBpZiAoY2FydG9ncmFwaGljc0xlbmd0aCA8IDIpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGNhcnRvZ3JhcGhpY3NBcnJheSA9IFtdOwogICAgICAgIGNvbnN0IG5vcm1hbHNBcnJheSA9IFtdOwogICAgICAgIGNvbnN0IGJvdHRvbVBvc2l0aW9uc0FycmF5ID0gW107CiAgICAgICAgY29uc3QgdG9wUG9zaXRpb25zQXJyYXkgPSBbXTsKICAgICAgICBsZXQgcHJldmlvdXNCb3R0b20gPSBwcmV2aW91c0JvdHRvbVNjcmF0Y2g7CiAgICAgICAgbGV0IHZlcnRleEJvdHRvbSA9IHZlcnRleEJvdHRvbVNjcmF0Y2g7CiAgICAgICAgbGV0IHZlcnRleFRvcCA9IHZlcnRleFRvcFNjcmF0Y2g7CiAgICAgICAgbGV0IG5leHRCb3R0b20gPSBuZXh0Qm90dG9tU2NyYXRjaDsKICAgICAgICBsZXQgdmVydGV4Tm9ybWFsID0gdmVydGV4Tm9ybWFsU2NyYXRjaDsKICAgICAgICBjb25zdCBzdGFydENhcnRvZ3JhcGhpYyA9IGNhcnRvZ3JhcGhpY3NbMF07CiAgICAgICAgY29uc3QgbmV4dENhcnRvZ3JhcGhpYyA9IGNhcnRvZ3JhcGhpY3NbMV07CiAgICAgICAgY29uc3QgcHJlc3RhcnRDYXJ0b2dyYXBoaWMgPSBjYXJ0b2dyYXBoaWNzW2NhcnRvZ3JhcGhpY3NMZW5ndGggLSAxXTsKICAgICAgICBwcmV2aW91c0JvdHRvbSA9IGdldFBvc2l0aW9uKAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgcHJlc3RhcnRDYXJ0b2dyYXBoaWMsCiAgICAgICAgICBtaW5IZWlnaHQsCiAgICAgICAgICBwcmV2aW91c0JvdHRvbQogICAgICAgICk7CiAgICAgICAgbmV4dEJvdHRvbSA9IGdldFBvc2l0aW9uKGVsbGlwc29pZCwgbmV4dENhcnRvZ3JhcGhpYywgbWluSGVpZ2h0LCBuZXh0Qm90dG9tKTsKICAgICAgICB2ZXJ0ZXhCb3R0b20gPSBnZXRQb3NpdGlvbigKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHN0YXJ0Q2FydG9ncmFwaGljLAogICAgICAgICAgbWluSGVpZ2h0LAogICAgICAgICAgdmVydGV4Qm90dG9tCiAgICAgICAgKTsKICAgICAgICB2ZXJ0ZXhUb3AgPSBnZXRQb3NpdGlvbihlbGxpcHNvaWQsIHN0YXJ0Q2FydG9ncmFwaGljLCBtYXhIZWlnaHQsIHZlcnRleFRvcCk7CiAgICAgICAgaWYgKGxvb3ApIHsKICAgICAgICAgIHZlcnRleE5vcm1hbCA9IGNvbXB1dGVWZXJ0ZXhNaXRlck5vcm1hbCgKICAgICAgICAgICAgcHJldmlvdXNCb3R0b20sCiAgICAgICAgICAgIHZlcnRleEJvdHRvbSwKICAgICAgICAgICAgdmVydGV4VG9wLAogICAgICAgICAgICBuZXh0Qm90dG9tLAogICAgICAgICAgICB2ZXJ0ZXhOb3JtYWwKICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZlcnRleE5vcm1hbCA9IGNvbXB1dGVSaWdodE5vcm1hbCgKICAgICAgICAgICAgc3RhcnRDYXJ0b2dyYXBoaWMsCiAgICAgICAgICAgIG5leHRDYXJ0b2dyYXBoaWMsCiAgICAgICAgICAgIG1heEhlaWdodCwKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICB2ZXJ0ZXhOb3JtYWwKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHZlcnRleE5vcm1hbCwgbm9ybWFsc0FycmF5LCAwKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayh2ZXJ0ZXhCb3R0b20sIGJvdHRvbVBvc2l0aW9uc0FycmF5LCAwKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayh2ZXJ0ZXhUb3AsIHRvcFBvc2l0aW9uc0FycmF5LCAwKTsKICAgICAgICBjYXJ0b2dyYXBoaWNzQXJyYXkucHVzaChzdGFydENhcnRvZ3JhcGhpYy5sYXRpdHVkZSk7CiAgICAgICAgY2FydG9ncmFwaGljc0FycmF5LnB1c2goc3RhcnRDYXJ0b2dyYXBoaWMubG9uZ2l0dWRlKTsKICAgICAgICBpbnRlcnBvbGF0ZVNlZ21lbnQoCiAgICAgICAgICBzdGFydENhcnRvZ3JhcGhpYywKICAgICAgICAgIG5leHRDYXJ0b2dyYXBoaWMsCiAgICAgICAgICBtaW5IZWlnaHQsCiAgICAgICAgICBtYXhIZWlnaHQsCiAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgIGFyY1R5cGUsCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBub3JtYWxzQXJyYXksCiAgICAgICAgICBib3R0b21Qb3NpdGlvbnNBcnJheSwKICAgICAgICAgIHRvcFBvc2l0aW9uc0FycmF5LAogICAgICAgICAgY2FydG9ncmFwaGljc0FycmF5CiAgICAgICAgKTsKICAgICAgICBmb3IgKGkgPSAxOyBpIDwgY2FydG9ncmFwaGljc0xlbmd0aCAtIDE7ICsraSkgewogICAgICAgICAgcHJldmlvdXNCb3R0b20gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUodmVydGV4Qm90dG9tLCBwcmV2aW91c0JvdHRvbSk7CiAgICAgICAgICB2ZXJ0ZXhCb3R0b20gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUobmV4dEJvdHRvbSwgdmVydGV4Qm90dG9tKTsKICAgICAgICAgIGNvbnN0IHZlcnRleENhcnRvZ3JhcGhpYyA9IGNhcnRvZ3JhcGhpY3NbaV07CiAgICAgICAgICBnZXRQb3NpdGlvbihlbGxpcHNvaWQsIHZlcnRleENhcnRvZ3JhcGhpYywgbWF4SGVpZ2h0LCB2ZXJ0ZXhUb3ApOwogICAgICAgICAgZ2V0UG9zaXRpb24oZWxsaXBzb2lkLCBjYXJ0b2dyYXBoaWNzW2kgKyAxXSwgbWluSGVpZ2h0LCBuZXh0Qm90dG9tKTsKICAgICAgICAgIGNvbXB1dGVWZXJ0ZXhNaXRlck5vcm1hbCgKICAgICAgICAgICAgcHJldmlvdXNCb3R0b20sCiAgICAgICAgICAgIHZlcnRleEJvdHRvbSwKICAgICAgICAgICAgdmVydGV4VG9wLAogICAgICAgICAgICBuZXh0Qm90dG9tLAogICAgICAgICAgICB2ZXJ0ZXhOb3JtYWwKICAgICAgICAgICk7CiAgICAgICAgICBpbmRleCA9IG5vcm1hbHNBcnJheS5sZW5ndGg7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayh2ZXJ0ZXhOb3JtYWwsIG5vcm1hbHNBcnJheSwgaW5kZXgpOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2sodmVydGV4Qm90dG9tLCBib3R0b21Qb3NpdGlvbnNBcnJheSwgaW5kZXgpOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2sodmVydGV4VG9wLCB0b3BQb3NpdGlvbnNBcnJheSwgaW5kZXgpOwogICAgICAgICAgY2FydG9ncmFwaGljc0FycmF5LnB1c2godmVydGV4Q2FydG9ncmFwaGljLmxhdGl0dWRlKTsKICAgICAgICAgIGNhcnRvZ3JhcGhpY3NBcnJheS5wdXNoKHZlcnRleENhcnRvZ3JhcGhpYy5sb25naXR1ZGUpOwogICAgICAgICAgaW50ZXJwb2xhdGVTZWdtZW50KAogICAgICAgICAgICBjYXJ0b2dyYXBoaWNzW2ldLAogICAgICAgICAgICBjYXJ0b2dyYXBoaWNzW2kgKyAxXSwKICAgICAgICAgICAgbWluSGVpZ2h0LAogICAgICAgICAgICBtYXhIZWlnaHQsCiAgICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgICBhcmNUeXBlLAogICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgIG5vcm1hbHNBcnJheSwKICAgICAgICAgICAgYm90dG9tUG9zaXRpb25zQXJyYXksCiAgICAgICAgICAgIHRvcFBvc2l0aW9uc0FycmF5LAogICAgICAgICAgICBjYXJ0b2dyYXBoaWNzQXJyYXkKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGVuZENhcnRvZ3JhcGhpYyA9IGNhcnRvZ3JhcGhpY3NbY2FydG9ncmFwaGljc0xlbmd0aCAtIDFdOwogICAgICAgIGNvbnN0IHByZUVuZENhcnRvZ3JhcGhpYyA9IGNhcnRvZ3JhcGhpY3NbY2FydG9ncmFwaGljc0xlbmd0aCAtIDJdOwogICAgICAgIHZlcnRleEJvdHRvbSA9IGdldFBvc2l0aW9uKAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgZW5kQ2FydG9ncmFwaGljLAogICAgICAgICAgbWluSGVpZ2h0LAogICAgICAgICAgdmVydGV4Qm90dG9tCiAgICAgICAgKTsKICAgICAgICB2ZXJ0ZXhUb3AgPSBnZXRQb3NpdGlvbihlbGxpcHNvaWQsIGVuZENhcnRvZ3JhcGhpYywgbWF4SGVpZ2h0LCB2ZXJ0ZXhUb3ApOwogICAgICAgIGlmIChsb29wKSB7CiAgICAgICAgICBjb25zdCBwb3N0RW5kQ2FydG9ncmFwaGljID0gY2FydG9ncmFwaGljc1swXTsKICAgICAgICAgIHByZXZpb3VzQm90dG9tID0gZ2V0UG9zaXRpb24oCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgcHJlRW5kQ2FydG9ncmFwaGljLAogICAgICAgICAgICBtaW5IZWlnaHQsCiAgICAgICAgICAgIHByZXZpb3VzQm90dG9tCiAgICAgICAgICApOwogICAgICAgICAgbmV4dEJvdHRvbSA9IGdldFBvc2l0aW9uKAogICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgIHBvc3RFbmRDYXJ0b2dyYXBoaWMsCiAgICAgICAgICAgIG1pbkhlaWdodCwKICAgICAgICAgICAgbmV4dEJvdHRvbQogICAgICAgICAgKTsKICAgICAgICAgIHZlcnRleE5vcm1hbCA9IGNvbXB1dGVWZXJ0ZXhNaXRlck5vcm1hbCgKICAgICAgICAgICAgcHJldmlvdXNCb3R0b20sCiAgICAgICAgICAgIHZlcnRleEJvdHRvbSwKICAgICAgICAgICAgdmVydGV4VG9wLAogICAgICAgICAgICBuZXh0Qm90dG9tLAogICAgICAgICAgICB2ZXJ0ZXhOb3JtYWwKICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZlcnRleE5vcm1hbCA9IGNvbXB1dGVSaWdodE5vcm1hbCgKICAgICAgICAgICAgcHJlRW5kQ2FydG9ncmFwaGljLAogICAgICAgICAgICBlbmRDYXJ0b2dyYXBoaWMsCiAgICAgICAgICAgIG1heEhlaWdodCwKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICB2ZXJ0ZXhOb3JtYWwKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGluZGV4ID0gbm9ybWFsc0FycmF5Lmxlbmd0aDsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayh2ZXJ0ZXhOb3JtYWwsIG5vcm1hbHNBcnJheSwgaW5kZXgpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHZlcnRleEJvdHRvbSwgYm90dG9tUG9zaXRpb25zQXJyYXksIGluZGV4KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayh2ZXJ0ZXhUb3AsIHRvcFBvc2l0aW9uc0FycmF5LCBpbmRleCk7CiAgICAgICAgY2FydG9ncmFwaGljc0FycmF5LnB1c2goZW5kQ2FydG9ncmFwaGljLmxhdGl0dWRlKTsKICAgICAgICBjYXJ0b2dyYXBoaWNzQXJyYXkucHVzaChlbmRDYXJ0b2dyYXBoaWMubG9uZ2l0dWRlKTsKICAgICAgICBpZiAobG9vcCkgewogICAgICAgICAgaW50ZXJwb2xhdGVTZWdtZW50KAogICAgICAgICAgICBlbmRDYXJ0b2dyYXBoaWMsCiAgICAgICAgICAgIHN0YXJ0Q2FydG9ncmFwaGljLAogICAgICAgICAgICBtaW5IZWlnaHQsCiAgICAgICAgICAgIG1heEhlaWdodCwKICAgICAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgICAgIGFyY1R5cGUsCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgbm9ybWFsc0FycmF5LAogICAgICAgICAgICBib3R0b21Qb3NpdGlvbnNBcnJheSwKICAgICAgICAgICAgdG9wUG9zaXRpb25zQXJyYXksCiAgICAgICAgICAgIGNhcnRvZ3JhcGhpY3NBcnJheQogICAgICAgICAgKTsKICAgICAgICAgIGluZGV4ID0gbm9ybWFsc0FycmF5Lmxlbmd0aDsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAzOyArK2kpIHsKICAgICAgICAgICAgbm9ybWFsc0FycmF5W2luZGV4ICsgaV0gPSBub3JtYWxzQXJyYXlbaV07CiAgICAgICAgICAgIGJvdHRvbVBvc2l0aW9uc0FycmF5W2luZGV4ICsgaV0gPSBib3R0b21Qb3NpdGlvbnNBcnJheVtpXTsKICAgICAgICAgICAgdG9wUG9zaXRpb25zQXJyYXlbaW5kZXggKyBpXSA9IHRvcFBvc2l0aW9uc0FycmF5W2ldOwogICAgICAgICAgfQogICAgICAgICAgY2FydG9ncmFwaGljc0FycmF5LnB1c2goc3RhcnRDYXJ0b2dyYXBoaWMubGF0aXR1ZGUpOwogICAgICAgICAgY2FydG9ncmFwaGljc0FycmF5LnB1c2goc3RhcnRDYXJ0b2dyYXBoaWMubG9uZ2l0dWRlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGdlbmVyYXRlR2VvbWV0cnlBdHRyaWJ1dGVzKAogICAgICAgICAgbG9vcCwKICAgICAgICAgIHByb2plY3Rpb24sCiAgICAgICAgICBib3R0b21Qb3NpdGlvbnNBcnJheSwKICAgICAgICAgIHRvcFBvc2l0aW9uc0FycmF5LAogICAgICAgICAgbm9ybWFsc0FycmF5LAogICAgICAgICAgY2FydG9ncmFwaGljc0FycmF5LAogICAgICAgICAgY29tcHV0ZTJkQXR0cmlidXRlcwogICAgICAgICk7CiAgICAgIH07CiAgICAgIGxpbmVEaXJlY3Rpb25TY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBtYXRyaXgzU2NyYXRjaCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgcXVhdGVybmlvblNjcmF0Y2gzID0gbmV3IFF1YXRlcm5pb25fZGVmYXVsdCgpOwogICAgICBlbmRQb3NDYXJ0b2dyYXBoaWNTY3JhdGNoID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIG5vcm1hbFN0YXJ0cG9pbnRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBub3JtYWxFbmRwb2ludFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGFkanVzdEhlaWdodE5vcm1hbFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGFkanVzdEhlaWdodE9mZnNldFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIG51ZGdlRGlyZWN0aW9uU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc3RhcnRDYXJ0b2dyYXBoaWNTY3JhdGNoID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIGVuZENhcnRvZ3JhcGhpY1NjcmF0Y2ggPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2VnbWVudFN0YXJ0VG9wU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2VnbWVudEVuZFRvcFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNlZ21lbnRTdGFydEJvdHRvbVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNlZ21lbnRFbmRCb3R0b21TY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzZWdtZW50U3RhcnROb3JtYWxTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzZWdtZW50RW5kTm9ybWFsU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZ2V0SGVpZ2h0Q2FydG9ncmFwaGljcyA9IFsKICAgICAgICBzdGFydENhcnRvZ3JhcGhpY1NjcmF0Y2gsCiAgICAgICAgZW5kQ2FydG9ncmFwaGljU2NyYXRjaAogICAgICBdOwogICAgICBnZXRIZWlnaHRSZWN0YW5nbGVTY3JhdGNoID0gbmV3IFJlY3RhbmdsZV9kZWZhdWx0KCk7CiAgICAgIGFkanVzdEhlaWdodFN0YXJ0VG9wU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgYWRqdXN0SGVpZ2h0RW5kVG9wU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgYWRqdXN0SGVpZ2h0U3RhcnRCb3R0b21TY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBhZGp1c3RIZWlnaHRFbmRCb3R0b21TY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzZWdtZW50U3RhcnQyRFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNlZ21lbnRFbmQyRFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNlZ21lbnRTdGFydE5vcm1hbDJEU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2VnbWVudEVuZE5vcm1hbDJEU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgb2Zmc2V0U2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHN0YXJ0VXBTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBlbmRVcFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHJpZ2h0U2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHN0YXJ0UGxhbmVOb3JtYWxTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBlbmRQbGFuZU5vcm1hbFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGVuY29kZVNjcmF0Y2ggPSBuZXcgRW5jb2RlZENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBlbmNvZGVTY3JhdGNoMkQgPSBuZXcgRW5jb2RlZENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBmb3J3YXJkT2Zmc2V0MkRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICByaWdodDJEU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgbm9ybWFsTnVkZ2VTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQm91bmRpbmdTcGhlcmVzID0gW25ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KCksIG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KCldOwogICAgICBSRUZFUkVOQ0VfSU5ESUNFUyA9IFsKICAgICAgICAwLAogICAgICAgIDIsCiAgICAgICAgMSwKICAgICAgICAwLAogICAgICAgIDMsCiAgICAgICAgMiwKICAgICAgICAvLyByaWdodAogICAgICAgIDAsCiAgICAgICAgNywKICAgICAgICAzLAogICAgICAgIDAsCiAgICAgICAgNCwKICAgICAgICA3LAogICAgICAgIC8vIHN0YXJ0CiAgICAgICAgMCwKICAgICAgICA1LAogICAgICAgIDQsCiAgICAgICAgMCwKICAgICAgICAxLAogICAgICAgIDUsCiAgICAgICAgLy8gYm90dG9tCiAgICAgICAgNSwKICAgICAgICA3LAogICAgICAgIDQsCiAgICAgICAgNSwKICAgICAgICA2LAogICAgICAgIDcsCiAgICAgICAgLy8gbGVmdAogICAgICAgIDUsCiAgICAgICAgMiwKICAgICAgICA2LAogICAgICAgIDUsCiAgICAgICAgMSwKICAgICAgICAyLAogICAgICAgIC8vIGVuZAogICAgICAgIDMsCiAgICAgICAgNiwKICAgICAgICAyLAogICAgICAgIDMsCiAgICAgICAgNywKICAgICAgICA2CiAgICAgICAgLy8gdG9wCiAgICAgIF07CiAgICAgIFJFRkVSRU5DRV9JTkRJQ0VTX0xFTkdUSCA9IFJFRkVSRU5DRV9JTkRJQ0VTLmxlbmd0aDsKICAgICAgR3JvdW5kUG9seWxpbmVHZW9tZXRyeS5fcHJvamVjdE5vcm1hbCA9IHByb2plY3ROb3JtYWw7CiAgICAgIEdyb3VuZFBvbHlsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IEdyb3VuZFBvbHlsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVHcm91bmRQb2x5bGluZUdlb21ldHJ5LmpzCiAgdmFyIGNyZWF0ZUdyb3VuZFBvbHlsaW5lR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZUdyb3VuZFBvbHlsaW5lR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlR3JvdW5kUG9seWxpbmVHZW9tZXRyeV9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY3JlYXRlR3JvdW5kUG9seWxpbmVHZW9tZXRyeShncm91bmRQb2x5bGluZUdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIHJldHVybiBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzX2RlZmF1bHQuaW5pdGlhbGl6ZSgpLnRoZW4oZnVuY3Rpb24oKSB7CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICAgIGdyb3VuZFBvbHlsaW5lR2VvbWV0cnkgPSBHcm91bmRQb2x5bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgZ3JvdW5kUG9seWxpbmVHZW9tZXRyeSwKICAgICAgICAgIG9mZnNldAogICAgICAgICk7CiAgICAgIH0KICAgICAgcmV0dXJuIEdyb3VuZFBvbHlsaW5lR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShncm91bmRQb2x5bGluZUdlb21ldHJ5KTsKICAgIH0pOwogIH0KICB2YXIgY3JlYXRlR3JvdW5kUG9seWxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZUdyb3VuZFBvbHlsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUdyb3VuZFBvbHlsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0FwcHJveGltYXRlVGVycmFpbkhlaWdodHMoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfR3JvdW5kUG9seWxpbmVHZW9tZXRyeSgpOwogICAgICBjcmVhdGVHcm91bmRQb2x5bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVHcm91bmRQb2x5bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUGxhbmVHZW9tZXRyeS5qcwogIGZ1bmN0aW9uIFBsYW5lR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnZlcnRleEZvcm1hdCwgVmVydGV4Rm9ybWF0X2RlZmF1bHQuREVGQVVMVCk7CiAgICB0aGlzLl92ZXJ0ZXhGb3JtYXQgPSB2ZXJ0ZXhGb3JtYXQ7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZVBsYW5lR2VvbWV0cnkiOwogIH0KICB2YXIgc2NyYXRjaFZlcnRleEZvcm1hdDgsIHNjcmF0Y2hPcHRpb25zMTUsIG1pbiwgbWF4LCBQbGFuZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfUGxhbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUGxhbmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBpbml0X1ZlcnRleEZvcm1hdCgpOwogICAgICBQbGFuZUdlb21ldHJ5LnBhY2tlZExlbmd0aCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgUGxhbmVHZW9tZXRyeS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrKHZhbHVlLl92ZXJ0ZXhGb3JtYXQsIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQ4ID0gbmV3IFZlcnRleEZvcm1hdF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hPcHRpb25zMTUgPSB7CiAgICAgICAgdmVydGV4Rm9ybWF0OiBzY3JhdGNoVmVydGV4Rm9ybWF0OAogICAgICB9OwogICAgICBQbGFuZUdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBzY3JhdGNoVmVydGV4Rm9ybWF0OAogICAgICAgICk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBQbGFuZUdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zMTUpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuX3ZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LmNsb25lKHZlcnRleEZvcm1hdCwgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIG1pbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoLTAuNSwgLTAuNSwgMCk7CiAgICAgIG1heCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoMC41LCAwLjUsIDApOwogICAgICBQbGFuZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24ocGxhbmVHZW9tZXRyeSkgewogICAgICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IHBsYW5lR2VvbWV0cnkuX3ZlcnRleEZvcm1hdDsKICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KCk7CiAgICAgICAgbGV0IGluZGljZXM7CiAgICAgICAgbGV0IHBvc2l0aW9uczsKICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnBvc2l0aW9uKSB7CiAgICAgICAgICBwb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KDQgKiAzKTsKICAgICAgICAgIHBvc2l0aW9uc1swXSA9IG1pbi54OwogICAgICAgICAgcG9zaXRpb25zWzFdID0gbWluLnk7CiAgICAgICAgICBwb3NpdGlvbnNbMl0gPSAwOwogICAgICAgICAgcG9zaXRpb25zWzNdID0gbWF4Lng7CiAgICAgICAgICBwb3NpdGlvbnNbNF0gPSBtaW4ueTsKICAgICAgICAgIHBvc2l0aW9uc1s1XSA9IDA7CiAgICAgICAgICBwb3NpdGlvbnNbNl0gPSBtYXgueDsKICAgICAgICAgIHBvc2l0aW9uc1s3XSA9IG1heC55OwogICAgICAgICAgcG9zaXRpb25zWzhdID0gMDsKICAgICAgICAgIHBvc2l0aW9uc1s5XSA9IG1pbi54OwogICAgICAgICAgcG9zaXRpb25zWzEwXSA9IG1heC55OwogICAgICAgICAgcG9zaXRpb25zWzExXSA9IDA7CiAgICAgICAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICAgIHZhbHVlczogcG9zaXRpb25zCiAgICAgICAgICB9KTsKICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgICAgICAgIGNvbnN0IG5vcm1hbHMgPSBuZXcgRmxvYXQzMkFycmF5KDQgKiAzKTsKICAgICAgICAgICAgbm9ybWFsc1swXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMV0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzJdID0gMTsKICAgICAgICAgICAgbm9ybWFsc1szXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNF0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzVdID0gMTsKICAgICAgICAgICAgbm9ybWFsc1s2XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbN10gPSAwOwogICAgICAgICAgICBub3JtYWxzWzhdID0gMTsKICAgICAgICAgICAgbm9ybWFsc1s5XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMTBdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1sxMV0gPSAxOwogICAgICAgICAgICBhdHRyaWJ1dGVzLm5vcm1hbCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICAgIHZhbHVlczogbm9ybWFscwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICAgICAgY29uc3QgdGV4Q29vcmRzID0gbmV3IEZsb2F0MzJBcnJheSg0ICogMik7CiAgICAgICAgICAgIHRleENvb3Jkc1swXSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1sxXSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1syXSA9IDE7CiAgICAgICAgICAgIHRleENvb3Jkc1szXSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1s0XSA9IDE7CiAgICAgICAgICAgIHRleENvb3Jkc1s1XSA9IDE7CiAgICAgICAgICAgIHRleENvb3Jkc1s2XSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1s3XSA9IDE7CiAgICAgICAgICAgIGF0dHJpYnV0ZXMuc3QgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMiwKICAgICAgICAgICAgICB2YWx1ZXM6IHRleENvb3JkcwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICAgICAgICBjb25zdCB0YW5nZW50cyA9IG5ldyBGbG9hdDMyQXJyYXkoNCAqIDMpOwogICAgICAgICAgICB0YW5nZW50c1swXSA9IDE7CiAgICAgICAgICAgIHRhbmdlbnRzWzFdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMl0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1szXSA9IDE7CiAgICAgICAgICAgIHRhbmdlbnRzWzRdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNV0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s2XSA9IDE7CiAgICAgICAgICAgIHRhbmdlbnRzWzddID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbOF0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s5XSA9IDE7CiAgICAgICAgICAgIHRhbmdlbnRzWzEwXSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzExXSA9IDA7CiAgICAgICAgICAgIGF0dHJpYnV0ZXMudGFuZ2VudCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICAgIHZhbHVlczogdGFuZ2VudHMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgICBjb25zdCBiaXRhbmdlbnRzID0gbmV3IEZsb2F0MzJBcnJheSg0ICogMyk7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMF0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzFdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1syXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbM10gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzRdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1s1XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNl0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzddID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1s4XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbOV0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzEwXSA9IDE7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMTFdID0gMDsKICAgICAgICAgICAgYXR0cmlidXRlcy5iaXRhbmdlbnQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgICB2YWx1ZXM6IGJpdGFuZ2VudHMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBpbmRpY2VzID0gbmV3IFVpbnQxNkFycmF5KDIgKiAzKTsKICAgICAgICAgIGluZGljZXNbMF0gPSAwOwogICAgICAgICAgaW5kaWNlc1sxXSA9IDE7CiAgICAgICAgICBpbmRpY2VzWzJdID0gMjsKICAgICAgICAgIGluZGljZXNbM10gPSAwOwogICAgICAgICAgaW5kaWNlc1s0XSA9IDI7CiAgICAgICAgICBpbmRpY2VzWzVdID0gMzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgcHJpbWl0aXZlVHlwZTogUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlRSSUFOR0xFUywKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlOiBuZXcgQm91bmRpbmdTcGhlcmVfZGVmYXVsdChDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgTWF0aC5zcXJ0KDIpKQogICAgICAgIH0pOwogICAgICB9OwogICAgICBQbGFuZUdlb21ldHJ5X2RlZmF1bHQgPSBQbGFuZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlUGxhbmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVQbGFuZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVQbGFuZUdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVBsYW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZVBsYW5lR2VvbWV0cnkocGxhbmVHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgcGxhbmVHZW9tZXRyeSA9IFBsYW5lR2VvbWV0cnlfZGVmYXVsdC51bnBhY2socGxhbmVHZW9tZXRyeSwgb2Zmc2V0KTsKICAgIH0KICAgIHJldHVybiBQbGFuZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkocGxhbmVHZW9tZXRyeSk7CiAgfQogIHZhciBjcmVhdGVQbGFuZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlUGxhbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlUGxhbmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X1BsYW5lR2VvbWV0cnkoKTsKICAgICAgY3JlYXRlUGxhbmVHZW9tZXRyeV9kZWZhdWx0ID0gY3JlYXRlUGxhbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BsYW5lT3V0bGluZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gUGxhbmVPdXRsaW5lR2VvbWV0cnkoKSB7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZVBsYW5lT3V0bGluZUdlb21ldHJ5IjsKICB9CiAgdmFyIG1pbjIsIG1heDIsIFBsYW5lT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfUGxhbmVPdXRsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BsYW5lT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIFBsYW5lT3V0bGluZUdlb21ldHJ5LnBhY2tlZExlbmd0aCA9IDA7CiAgICAgIFBsYW5lT3V0bGluZUdlb21ldHJ5LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXkpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBQbGFuZU91dGxpbmVHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFBsYW5lT3V0bGluZUdlb21ldHJ5KCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIG1pbjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KC0wLjUsIC0wLjUsIDApOwogICAgICBtYXgyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgwLjUsIDAuNSwgMCk7CiAgICAgIFBsYW5lT3V0bGluZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCgpOwogICAgICAgIGNvbnN0IGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoNCAqIDIpOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoNCAqIDMpOwogICAgICAgIHBvc2l0aW9uc1swXSA9IG1pbjIueDsKICAgICAgICBwb3NpdGlvbnNbMV0gPSBtaW4yLnk7CiAgICAgICAgcG9zaXRpb25zWzJdID0gbWluMi56OwogICAgICAgIHBvc2l0aW9uc1szXSA9IG1heDIueDsKICAgICAgICBwb3NpdGlvbnNbNF0gPSBtaW4yLnk7CiAgICAgICAgcG9zaXRpb25zWzVdID0gbWluMi56OwogICAgICAgIHBvc2l0aW9uc1s2XSA9IG1heDIueDsKICAgICAgICBwb3NpdGlvbnNbN10gPSBtYXgyLnk7CiAgICAgICAgcG9zaXRpb25zWzhdID0gbWluMi56OwogICAgICAgIHBvc2l0aW9uc1s5XSA9IG1pbjIueDsKICAgICAgICBwb3NpdGlvbnNbMTBdID0gbWF4Mi55OwogICAgICAgIHBvc2l0aW9uc1sxMV0gPSBtaW4yLno7CiAgICAgICAgYXR0cmlidXRlcy5wb3NpdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICB2YWx1ZXM6IHBvc2l0aW9ucwogICAgICAgIH0pOwogICAgICAgIGluZGljZXNbMF0gPSAwOwogICAgICAgIGluZGljZXNbMV0gPSAxOwogICAgICAgIGluZGljZXNbMl0gPSAxOwogICAgICAgIGluZGljZXNbM10gPSAyOwogICAgICAgIGluZGljZXNbNF0gPSAyOwogICAgICAgIGluZGljZXNbNV0gPSAzOwogICAgICAgIGluZGljZXNbNl0gPSAzOwogICAgICAgIGluZGljZXNbN10gPSAwOwogICAgICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgICBhdHRyaWJ1dGVzLAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5MSU5FUywKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlOiBuZXcgQm91bmRpbmdTcGhlcmVfZGVmYXVsdChDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgTWF0aC5zcXJ0KDIpKQogICAgICAgIH0pOwogICAgICB9OwogICAgICBQbGFuZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0ID0gUGxhbmVPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVQbGFuZU91dGxpbmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVQbGFuZU91dGxpbmVHZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlUGxhbmVPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlUGxhbmVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZVBsYW5lT3V0bGluZUdlb21ldHJ5KHBsYW5lR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIHBsYW5lR2VvbWV0cnkgPSBQbGFuZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0LnVucGFjayhwbGFuZUdlb21ldHJ5LCBvZmZzZXQpOwogICAgfQogICAgcmV0dXJuIFBsYW5lT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkocGxhbmVHZW9tZXRyeSk7CiAgfQogIHZhciBjcmVhdGVQbGFuZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVBsYW5lT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVQbGFuZU91dGxpbmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X1BsYW5lT3V0bGluZUdlb21ldHJ5KCk7CiAgICAgIGNyZWF0ZVBsYW5lT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVQbGFuZU91dGxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2RlcHJlY2F0aW9uV2FybmluZy5qcwogIGZ1bmN0aW9uIGRlcHJlY2F0aW9uV2FybmluZyhpZGVudGlmaWVyLCBtZXNzYWdlKSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpZGVudGlmaWVyKSB8fCAhZGVmaW5lZF9kZWZhdWx0KG1lc3NhZ2UpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJpZGVudGlmaWVyIGFuZCBtZXNzYWdlIGFyZSByZXF1aXJlZC4iKTsKICAgIH0KICAgIG9uZVRpbWVXYXJuaW5nX2RlZmF1bHQoaWRlbnRpZmllciwgbWVzc2FnZSk7CiAgfQogIHZhciBkZXByZWNhdGlvbldhcm5pbmdfZGVmYXVsdDsKICB2YXIgaW5pdF9kZXByZWNhdGlvbldhcm5pbmcgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2RlcHJlY2F0aW9uV2FybmluZy5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfb25lVGltZVdhcm5pbmcoKTsKICAgICAgZGVwcmVjYXRpb25XYXJuaW5nX2RlZmF1bHQgPSBkZXByZWNhdGlvbldhcm5pbmc7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9TdGVyZW9ncmFwaGljLmpzCiAgZnVuY3Rpb24gU3RlcmVvZ3JhcGhpYyhwb3NpdGlvbiwgdGFuZ2VudFBsYW5lKSB7CiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh0aGlzLnBvc2l0aW9uKSkgewogICAgICB0aGlzLnBvc2l0aW9uID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgfQogICAgdGhpcy50YW5nZW50UGxhbmUgPSB0YW5nZW50UGxhbmU7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh0aGlzLnRhbmdlbnRQbGFuZSkpIHsKICAgICAgdGhpcy50YW5nZW50UGxhbmUgPSBTdGVyZW9ncmFwaGljLk5PUlRIX1BPTEVfVEFOR0VOVF9QTEFORTsKICAgIH0KICB9CiAgdmFyIHNjcmF0Y2hDYXJ0b2dyYXBoaWM1LCBzY3JhdGNoQ2FydGVzaWFuMTAsIHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVSYXkyLCBzY3JhdGNoUHJvamVjdFBvaW50T250b1BsYW5lUmF5RGlyZWN0aW9uLCBzY3JhdGNoUHJvamVjdFBvaW50T250b1BsYW5lQ2FydGVzaWFuMzIsIFN0ZXJlb2dyYXBoaWNfZGVmYXVsdDsKICB2YXIgaW5pdF9TdGVyZW9ncmFwaGljID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9TdGVyZW9ncmFwaGljLmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0VsbGlwc29pZFRhbmdlbnRQbGFuZSgpOwogICAgICBpbml0X0ludGVyc2VjdGlvblRlc3RzKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X1JheSgpOwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhTdGVyZW9ncmFwaGljLnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIGVsbGlwc29pZC4KICAgICAgICAgKiBAbWVtYmVyb2YgU3RlcmVvZ3JhcGhpYy5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7RWxsaXBzb2lkfQogICAgICAgICAqLwogICAgICAgIGVsbGlwc29pZDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFuZ2VudFBsYW5lLmVsbGlwc29pZDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIHggY29vcmRpbmF0ZQogICAgICAgICAqIEBtZW1iZXJvZiBTdGVyZW9ncmFwaGljLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICovCiAgICAgICAgeDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb24ueDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIHkgY29vcmRpbmF0ZQogICAgICAgICAqIEBtZW1iZXJvZiBTdGVyZW9ncmFwaGljLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICovCiAgICAgICAgeTogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb24ueTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIENvbXB1dGVzIHRoZSBjb25mb3JtYWwgbGF0aXR1ZGUsIG9yIHRoZSBlbGxpcHNvaWRhbCBsYXRpdHVkZSBwcm9qZWN0ZWQgb250byBhbiBhcmJpdHJhcnkgc3BoZXJlLgogICAgICAgICAqIEBtZW1iZXJvZiBTdGVyZW9ncmFwaGljLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICovCiAgICAgICAgY29uZm9ybWFsTGF0aXR1ZGU6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGNvbnN0IHIgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQubWFnbml0dWRlKHRoaXMucG9zaXRpb24pOwogICAgICAgICAgICBjb25zdCBkID0gMiAqIHRoaXMuZWxsaXBzb2lkLm1heGltdW1SYWRpdXM7CiAgICAgICAgICAgIGNvbnN0IHNpZ24yID0gdGhpcy50YW5nZW50UGxhbmUucGxhbmUubm9ybWFsLno7CiAgICAgICAgICAgIHJldHVybiBzaWduMiAqIChNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gLSAyICogTWF0aC5hdGFuMihyLCBkKSk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBDb21wdXRlcyB0aGUgbG9uZ2l0dWRlCiAgICAgICAgICogQG1lbWJlcm9mIFN0ZXJlb2dyYXBoaWMucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKi8KICAgICAgICBsb25naXR1ZGU6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGxldCBsb25naXR1ZGUgPSBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gKyBNYXRoLmF0YW4yKHRoaXMueSwgdGhpcy54KTsKICAgICAgICAgICAgaWYgKGxvbmdpdHVkZSA+IE1hdGguUEkpIHsKICAgICAgICAgICAgICBsb25naXR1ZGUgLT0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbG9uZ2l0dWRlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWM1ID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xMCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgU3RlcmVvZ3JhcGhpYy5wcm90b3R5cGUuZ2V0TGF0aXR1ZGUgPSBmdW5jdGlvbihlbGxpcHNvaWQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChlbGxpcHNvaWQpKSB7CiAgICAgICAgICBlbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NDsKICAgICAgICB9CiAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYzUubGF0aXR1ZGUgPSB0aGlzLmNvbmZvcm1hbExhdGl0dWRlOwogICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWM1LmxvbmdpdHVkZSA9IHRoaXMubG9uZ2l0dWRlOwogICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWM1LmhlaWdodCA9IDA7CiAgICAgICAgY29uc3QgY2FydGVzaWFuMTEgPSB0aGlzLmVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbigKICAgICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWM1LAogICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjEwCiAgICAgICAgKTsKICAgICAgICBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoY2FydGVzaWFuMTEsIHNjcmF0Y2hDYXJ0b2dyYXBoaWM1KTsKICAgICAgICByZXR1cm4gc2NyYXRjaENhcnRvZ3JhcGhpYzUubGF0aXR1ZGU7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVSYXkyID0gbmV3IFJheV9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVSYXlEaXJlY3Rpb24gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVDYXJ0ZXNpYW4zMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgU3RlcmVvZ3JhcGhpYy5mcm9tQ2FydGVzaWFuID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIGNvbnN0IHNpZ24yID0gTWF0aF9kZWZhdWx0LnNpZ25Ob3RaZXJvKGNhcnRlc2lhbjExLnopOwogICAgICAgIGxldCB0YW5nZW50UGxhbmUgPSBTdGVyZW9ncmFwaGljLk5PUlRIX1BPTEVfVEFOR0VOVF9QTEFORTsKICAgICAgICBsZXQgb3JpZ2luID0gU3RlcmVvZ3JhcGhpYy5TT1VUSF9QT0xFOwogICAgICAgIGlmIChzaWduMiA8IDApIHsKICAgICAgICAgIHRhbmdlbnRQbGFuZSA9IFN0ZXJlb2dyYXBoaWMuU09VVEhfUE9MRV9UQU5HRU5UX1BMQU5FOwogICAgICAgICAgb3JpZ2luID0gU3RlcmVvZ3JhcGhpYy5OT1JUSF9QT0xFOwogICAgICAgIH0KICAgICAgICBjb25zdCByYXkgPSBzY3JhdGNoUHJvamVjdFBvaW50T250b1BsYW5lUmF5MjsKICAgICAgICByYXkub3JpZ2luID0gdGFuZ2VudFBsYW5lLmVsbGlwc29pZC5zY2FsZVRvR2VvY2VudHJpY1N1cmZhY2UoCiAgICAgICAgICBjYXJ0ZXNpYW4xMSwKICAgICAgICAgIHJheS5vcmlnaW4KICAgICAgICApOwogICAgICAgIHJheS5kaXJlY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICByYXkub3JpZ2luLAogICAgICAgICAgb3JpZ2luLAogICAgICAgICAgc2NyYXRjaFByb2plY3RQb2ludE9udG9QbGFuZVJheURpcmVjdGlvbgogICAgICAgICk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShyYXkuZGlyZWN0aW9uLCByYXkuZGlyZWN0aW9uKTsKICAgICAgICBjb25zdCBpbnRlcnNlY3Rpb25Qb2ludCA9IEludGVyc2VjdGlvblRlc3RzX2RlZmF1bHQucmF5UGxhbmUoCiAgICAgICAgICByYXksCiAgICAgICAgICB0YW5nZW50UGxhbmUucGxhbmUsCiAgICAgICAgICBzY3JhdGNoUHJvamVjdFBvaW50T250b1BsYW5lQ2FydGVzaWFuMzIKICAgICAgICApOwogICAgICAgIGNvbnN0IHYzID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGludGVyc2VjdGlvblBvaW50LCBvcmlnaW4sIGludGVyc2VjdGlvblBvaW50KTsKICAgICAgICBjb25zdCB4ID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh0YW5nZW50UGxhbmUueEF4aXMsIHYzKTsKICAgICAgICBjb25zdCB5ID0gc2lnbjIgKiBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KHRhbmdlbnRQbGFuZS55QXhpcywgdjMpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgU3RlcmVvZ3JhcGhpYyhuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KHgsIHkpLCB0YW5nZW50UGxhbmUpOwogICAgICAgIH0KICAgICAgICByZXN1bHQucG9zaXRpb24gPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KHgsIHkpOwogICAgICAgIHJlc3VsdC50YW5nZW50UGxhbmUgPSB0YW5nZW50UGxhbmU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgU3RlcmVvZ3JhcGhpYy5mcm9tQ2FydGVzaWFuQXJyYXkgPSBmdW5jdGlvbihjYXJ0ZXNpYW5zLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImNhcnRlc2lhbnMiLCBjYXJ0ZXNpYW5zKTsKICAgICAgICBjb25zdCBsZW5ndGggPSBjYXJ0ZXNpYW5zLmxlbmd0aDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IGxlbmd0aDsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgcmVzdWx0W2ldID0gU3RlcmVvZ3JhcGhpYy5mcm9tQ2FydGVzaWFuKGNhcnRlc2lhbnNbaV0sIHJlc3VsdFtpXSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFN0ZXJlb2dyYXBoaWMuY2xvbmUgPSBmdW5jdGlvbihzdGVyZW9ncmFwaGljLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChzdGVyZW9ncmFwaGljKSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBTdGVyZW9ncmFwaGljKAogICAgICAgICAgICBzdGVyZW9ncmFwaGljLnBvc2l0aW9uLAogICAgICAgICAgICBzdGVyZW9ncmFwaGljLnRhbmdlbnRQbGFuZQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnBvc2l0aW9uID0gc3RlcmVvZ3JhcGhpYy5wb3NpdGlvbjsKICAgICAgICByZXN1bHQudGFuZ2VudFBsYW5lID0gc3RlcmVvZ3JhcGhpYy50YW5nZW50UGxhbmU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgU3RlcmVvZ3JhcGhpYy5IQUxGX1VOSVRfU1BIRVJFID0gT2JqZWN0LmZyZWV6ZShuZXcgRWxsaXBzb2lkX2RlZmF1bHQoMC41LCAwLjUsIDAuNSkpOwogICAgICBTdGVyZW9ncmFwaGljLk5PUlRIX1BPTEUgPSBPYmplY3QuZnJlZXplKG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoMCwgMCwgMC41KSk7CiAgICAgIFN0ZXJlb2dyYXBoaWMuU09VVEhfUE9MRSA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjNfZGVmYXVsdCgwLCAwLCAtMC41KSk7CiAgICAgIFN0ZXJlb2dyYXBoaWMuTk9SVEhfUE9MRV9UQU5HRU5UX1BMQU5FID0gT2JqZWN0LmZyZWV6ZSgKICAgICAgICBuZXcgRWxsaXBzb2lkVGFuZ2VudFBsYW5lX2RlZmF1bHQoCiAgICAgICAgICBTdGVyZW9ncmFwaGljLk5PUlRIX1BPTEUsCiAgICAgICAgICBTdGVyZW9ncmFwaGljLkhBTEZfVU5JVF9TUEhFUkUKICAgICAgICApCiAgICAgICk7CiAgICAgIFN0ZXJlb2dyYXBoaWMuU09VVEhfUE9MRV9UQU5HRU5UX1BMQU5FID0gT2JqZWN0LmZyZWV6ZSgKICAgICAgICBuZXcgRWxsaXBzb2lkVGFuZ2VudFBsYW5lX2RlZmF1bHQoCiAgICAgICAgICBTdGVyZW9ncmFwaGljLlNPVVRIX1BPTEUsCiAgICAgICAgICBTdGVyZW9ncmFwaGljLkhBTEZfVU5JVF9TUEhFUkUKICAgICAgICApCiAgICAgICk7CiAgICAgIFN0ZXJlb2dyYXBoaWNfZGVmYXVsdCA9IFN0ZXJlb2dyYXBoaWM7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Qb2x5Z29uR2VvbWV0cnkuanMKICBmdW5jdGlvbiBhZGp1c3RQb3NIZWlnaHRzRm9yTm9ybWFsKHBvc2l0aW9uLCBwMSwgcDIsIGVsbGlwc29pZCkgewogICAgY29uc3QgY2FydG8xMiA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhwb3NpdGlvbiwgc2NyYXRjaENhcnRvMSk7CiAgICBjb25zdCBoZWlnaHQgPSBjYXJ0bzEyLmhlaWdodDsKICAgIGNvbnN0IHAxQ2FydG8gPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMocDEsIHNjcmF0Y2hDYXJ0bzIpOwogICAgcDFDYXJ0by5oZWlnaHQgPSBoZWlnaHQ7CiAgICBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4ocDFDYXJ0bywgcDEpOwogICAgY29uc3QgcDJDYXJ0byA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhwMiwgc2NyYXRjaENhcnRvMik7CiAgICBwMkNhcnRvLmhlaWdodCA9IGhlaWdodCAtIDEwMDsKICAgIGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihwMkNhcnRvLCBwMik7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVBdHRyaWJ1dGVzKG9wdGlvbnMpIHsKICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IG9wdGlvbnMudmVydGV4Rm9ybWF0OwogICAgY29uc3QgZ2VvbWV0cnkgPSBvcHRpb25zLmdlb21ldHJ5OwogICAgY29uc3Qgc2hhZG93Vm9sdW1lID0gb3B0aW9ucy5zaGFkb3dWb2x1bWU7CiAgICBjb25zdCBmbGF0UG9zaXRpb25zID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXM7CiAgICBjb25zdCBmbGF0VGV4Y29vcmRzID0gZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmF0dHJpYnV0ZXMuc3QpID8gZ2VvbWV0cnkuYXR0cmlidXRlcy5zdC52YWx1ZXMgOiB2b2lkIDA7CiAgICBsZXQgbGVuZ3RoID0gZmxhdFBvc2l0aW9ucy5sZW5ndGg7CiAgICBjb25zdCB3YWxsID0gb3B0aW9ucy53YWxsOwogICAgY29uc3QgdG9wID0gb3B0aW9ucy50b3AgfHwgd2FsbDsKICAgIGNvbnN0IGJvdHRvbSA9IG9wdGlvbnMuYm90dG9tIHx8IHdhbGw7CiAgICBpZiAodmVydGV4Rm9ybWF0LnN0IHx8IHZlcnRleEZvcm1hdC5ub3JtYWwgfHwgdmVydGV4Rm9ybWF0LnRhbmdlbnQgfHwgdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCB8fCBzaGFkb3dWb2x1bWUpIHsKICAgICAgY29uc3QgYm91bmRpbmdSZWN0YW5nbGUgPSBvcHRpb25zLmJvdW5kaW5nUmVjdGFuZ2xlOwogICAgICBjb25zdCByb3RhdGlvbkF4aXMgPSBvcHRpb25zLnJvdGF0aW9uQXhpczsKICAgICAgY29uc3QgcHJvamVjdFRvMmQgPSBvcHRpb25zLnByb2plY3RUbzJkOwogICAgICBjb25zdCBlbGxpcHNvaWQgPSBvcHRpb25zLmVsbGlwc29pZDsKICAgICAgY29uc3Qgc3RSb3RhdGlvbiA9IG9wdGlvbnMuc3RSb3RhdGlvbjsKICAgICAgY29uc3QgcGVyUG9zaXRpb25IZWlnaHQgPSBvcHRpb25zLnBlclBvc2l0aW9uSGVpZ2h0OwogICAgICBjb25zdCBvcmlnaW4gPSBhcHBlbmRUZXh0dXJlQ29vcmRpbmF0ZXNPcmlnaW47CiAgICAgIG9yaWdpbi54ID0gYm91bmRpbmdSZWN0YW5nbGUueDsKICAgICAgb3JpZ2luLnkgPSBib3VuZGluZ1JlY3RhbmdsZS55OwogICAgICBjb25zdCB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSB2ZXJ0ZXhGb3JtYXQuc3QgPyBuZXcgRmxvYXQzMkFycmF5KDIgKiAobGVuZ3RoIC8gMykpIDogdm9pZCAwOwogICAgICBsZXQgbm9ybWFsczsKICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgICBpZiAocGVyUG9zaXRpb25IZWlnaHQgJiYgdG9wICYmICF3YWxsKSB7CiAgICAgICAgICBub3JtYWxzID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWwudmFsdWVzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBub3JtYWxzID0gbmV3IEZsb2F0MzJBcnJheShsZW5ndGgpOwogICAgICAgIH0KICAgICAgfQogICAgICBjb25zdCB0YW5nZW50cyA9IHZlcnRleEZvcm1hdC50YW5nZW50ID8gbmV3IEZsb2F0MzJBcnJheShsZW5ndGgpIDogdm9pZCAwOwogICAgICBjb25zdCBiaXRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCA/IG5ldyBGbG9hdDMyQXJyYXkobGVuZ3RoKSA6IHZvaWQgMDsKICAgICAgY29uc3QgZXh0cnVkZU5vcm1hbHMgPSBzaGFkb3dWb2x1bWUgPyBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCkgOiB2b2lkIDA7CiAgICAgIGxldCB0ZXh0dXJlQ29vcmRJbmRleCA9IDA7CiAgICAgIGxldCBhdHRySW5kZXggPSAwOwogICAgICBsZXQgbm9ybWFsMiA9IHNjcmF0Y2hOb3JtYWw2OwogICAgICBsZXQgdGFuZ2VudCA9IHNjcmF0Y2hUYW5nZW50NDsKICAgICAgbGV0IGJpdGFuZ2VudCA9IHNjcmF0Y2hCaXRhbmdlbnQ0OwogICAgICBsZXQgcmVjb21wdXRlTm9ybWFsID0gdHJ1ZTsKICAgICAgbGV0IHRleHR1cmVNYXRyaXggPSBhcHBlbmRUZXh0dXJlQ29vcmRpbmF0ZXNNYXRyaXgzOwogICAgICBsZXQgdGFuZ2VudFJvdGF0aW9uTWF0cml4ID0gdGFuZ2VudE1hdHJpeFNjcmF0Y2gyOwogICAgICBpZiAoc3RSb3RhdGlvbiAhPT0gMCkgewogICAgICAgIGxldCByb3RhdGlvbiA9IFF1YXRlcm5pb25fZGVmYXVsdC5mcm9tQXhpc0FuZ2xlKAogICAgICAgICAgcm90YXRpb25BeGlzLAogICAgICAgICAgc3RSb3RhdGlvbiwKICAgICAgICAgIGFwcGVuZFRleHR1cmVDb29yZGluYXRlc1F1YXRlcm5pb24KICAgICAgICApOwogICAgICAgIHRleHR1cmVNYXRyaXggPSBNYXRyaXgzX2RlZmF1bHQuZnJvbVF1YXRlcm5pb24ocm90YXRpb24sIHRleHR1cmVNYXRyaXgpOwogICAgICAgIHJvdGF0aW9uID0gUXVhdGVybmlvbl9kZWZhdWx0LmZyb21BeGlzQW5nbGUoCiAgICAgICAgICByb3RhdGlvbkF4aXMsCiAgICAgICAgICAtc3RSb3RhdGlvbiwKICAgICAgICAgIGFwcGVuZFRleHR1cmVDb29yZGluYXRlc1F1YXRlcm5pb24KICAgICAgICApOwogICAgICAgIHRhbmdlbnRSb3RhdGlvbk1hdHJpeCA9IE1hdHJpeDNfZGVmYXVsdC5mcm9tUXVhdGVybmlvbigKICAgICAgICAgIHJvdGF0aW9uLAogICAgICAgICAgdGFuZ2VudFJvdGF0aW9uTWF0cml4CiAgICAgICAgKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0ZXh0dXJlTWF0cml4ID0gTWF0cml4M19kZWZhdWx0LmNsb25lKE1hdHJpeDNfZGVmYXVsdC5JREVOVElUWSwgdGV4dHVyZU1hdHJpeCk7CiAgICAgICAgdGFuZ2VudFJvdGF0aW9uTWF0cml4ID0gTWF0cml4M19kZWZhdWx0LmNsb25lKAogICAgICAgICAgTWF0cml4M19kZWZhdWx0LklERU5USVRZLAogICAgICAgICAgdGFuZ2VudFJvdGF0aW9uTWF0cml4CiAgICAgICAgKTsKICAgICAgfQogICAgICBsZXQgYm90dG9tT2Zmc2V0ID0gMDsKICAgICAgbGV0IGJvdHRvbU9mZnNldDIgPSAwOwogICAgICBpZiAodG9wICYmIGJvdHRvbSkgewogICAgICAgIGJvdHRvbU9mZnNldCA9IGxlbmd0aCAvIDI7CiAgICAgICAgYm90dG9tT2Zmc2V0MiA9IGxlbmd0aCAvIDM7CiAgICAgICAgbGVuZ3RoIC89IDI7CiAgICAgIH0KICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMykgewogICAgICAgIGNvbnN0IHBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgIGZsYXRQb3NpdGlvbnMsCiAgICAgICAgICBpLAogICAgICAgICAgYXBwZW5kVGV4dHVyZUNvb3JkaW5hdGVzQ2FydGVzaWFuMwogICAgICAgICk7CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZmxhdFRleGNvb3JkcykpIHsKICAgICAgICAgICAgbGV0IHAgPSBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVZlY3RvcigKICAgICAgICAgICAgICB0ZXh0dXJlTWF0cml4LAogICAgICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgICAgIHNjcmF0Y2hQb3NpdGlvbjMKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcCA9IGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKHAsIHApOwogICAgICAgICAgICBjb25zdCBzdCA9IHByb2plY3RUbzJkKHAsIGFwcGVuZFRleHR1cmVDb29yZGluYXRlc0NhcnRlc2lhbjIpOwogICAgICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQuc3VidHJhY3Qoc3QsIG9yaWdpbiwgc3QpOwogICAgICAgICAgICBjb25zdCBzdHggPSBNYXRoX2RlZmF1bHQuY2xhbXAoc3QueCAvIGJvdW5kaW5nUmVjdGFuZ2xlLndpZHRoLCAwLCAxKTsKICAgICAgICAgICAgY29uc3Qgc3R5ID0gTWF0aF9kZWZhdWx0LmNsYW1wKHN0LnkgLyBib3VuZGluZ1JlY3RhbmdsZS5oZWlnaHQsIDAsIDEpOwogICAgICAgICAgICBpZiAoYm90dG9tKSB7CiAgICAgICAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW3RleHR1cmVDb29yZEluZGV4ICsgYm90dG9tT2Zmc2V0Ml0gPSBzdHg7CiAgICAgICAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW3RleHR1cmVDb29yZEluZGV4ICsgMSArIGJvdHRvbU9mZnNldDJdID0gc3R5OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0b3ApIHsKICAgICAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbdGV4dHVyZUNvb3JkSW5kZXhdID0gc3R4OwogICAgICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlc1t0ZXh0dXJlQ29vcmRJbmRleCArIDFdID0gc3R5OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRleHR1cmVDb29yZEluZGV4ICs9IDI7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsIHx8IHZlcnRleEZvcm1hdC50YW5nZW50IHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQgfHwgc2hhZG93Vm9sdW1lKSB7CiAgICAgICAgICBjb25zdCBhdHRySW5kZXgxID0gYXR0ckluZGV4ICsgMTsKICAgICAgICAgIGNvbnN0IGF0dHJJbmRleDIgPSBhdHRySW5kZXggKyAyOwogICAgICAgICAgaWYgKHdhbGwpIHsKICAgICAgICAgICAgaWYgKGkgKyAzIDwgbGVuZ3RoKSB7CiAgICAgICAgICAgICAgY29uc3QgcDEgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGZsYXRQb3NpdGlvbnMsIGkgKyAzLCBwMVNjcmF0Y2gzKTsKICAgICAgICAgICAgICBpZiAocmVjb21wdXRlTm9ybWFsKSB7CiAgICAgICAgICAgICAgICBjb25zdCBwMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgICAgICAgIGZsYXRQb3NpdGlvbnMsCiAgICAgICAgICAgICAgICAgIGkgKyBsZW5ndGgsCiAgICAgICAgICAgICAgICAgIHAyU2NyYXRjaDMKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBpZiAocGVyUG9zaXRpb25IZWlnaHQpIHsKICAgICAgICAgICAgICAgICAgYWRqdXN0UG9zSGVpZ2h0c0Zvck5vcm1hbChwb3NpdGlvbiwgcDEsIHAyLCBlbGxpcHNvaWQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHAxLCBwb3NpdGlvbiwgcDEpOwogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHAyLCBwb3NpdGlvbiwgcDIpOwogICAgICAgICAgICAgICAgbm9ybWFsMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhwMiwgcDEsIG5vcm1hbDIpLAogICAgICAgICAgICAgICAgICBub3JtYWwyCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgcmVjb21wdXRlTm9ybWFsID0gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihwMSwgcG9zaXRpb24sIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTApKSB7CiAgICAgICAgICAgICAgICByZWNvbXB1dGVOb3JtYWwgPSB0cnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQgfHwgdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgICAgIGJpdGFuZ2VudCA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwocG9zaXRpb24sIGJpdGFuZ2VudCk7CiAgICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgICAgICAgICB0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKGJpdGFuZ2VudCwgbm9ybWFsMiwgdGFuZ2VudCksCiAgICAgICAgICAgICAgICAgIHRhbmdlbnQKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBub3JtYWwyID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwb3NpdGlvbiwgbm9ybWFsMik7CiAgICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCB8fCB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgICAgICAgaWYgKHBlclBvc2l0aW9uSGVpZ2h0KSB7CiAgICAgICAgICAgICAgICBzY3JhdGNoUGVyUG9zTm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgICAgICAgbm9ybWFscywKICAgICAgICAgICAgICAgICAgYXR0ckluZGV4LAogICAgICAgICAgICAgICAgICBzY3JhdGNoUGVyUG9zTm9ybWFsCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgc2NyYXRjaFBlclBvc1RhbmdlbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoCiAgICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1osCiAgICAgICAgICAgICAgICAgIHNjcmF0Y2hQZXJQb3NOb3JtYWwsCiAgICAgICAgICAgICAgICAgIHNjcmF0Y2hQZXJQb3NUYW5nZW50CiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgc2NyYXRjaFBlclBvc1RhbmdlbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICAgICAgICBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVZlY3RvcigKICAgICAgICAgICAgICAgICAgICB0YW5nZW50Um90YXRpb25NYXRyaXgsCiAgICAgICAgICAgICAgICAgICAgc2NyYXRjaFBlclBvc1RhbmdlbnQsCiAgICAgICAgICAgICAgICAgICAgc2NyYXRjaFBlclBvc1RhbmdlbnQKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgc2NyYXRjaFBlclBvc1RhbmdlbnQKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgICAgICAgICBzY3JhdGNoUGVyUG9zQml0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoCiAgICAgICAgICAgICAgICAgICAgICBzY3JhdGNoUGVyUG9zTm9ybWFsLAogICAgICAgICAgICAgICAgICAgICAgc2NyYXRjaFBlclBvc1RhbmdlbnQsCiAgICAgICAgICAgICAgICAgICAgICBzY3JhdGNoUGVyUG9zQml0YW5nZW50CiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBzY3JhdGNoUGVyUG9zQml0YW5nZW50CiAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRhbmdlbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWiwgbm9ybWFsMiwgdGFuZ2VudCk7CiAgICAgICAgICAgICAgdGFuZ2VudCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICAgICAgICBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVZlY3Rvcih0YW5nZW50Um90YXRpb25NYXRyaXgsIHRhbmdlbnQsIHRhbmdlbnQpLAogICAgICAgICAgICAgICAgdGFuZ2VudAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhub3JtYWwyLCB0YW5nZW50LCBiaXRhbmdlbnQpLAogICAgICAgICAgICAgICAgICBiaXRhbmdlbnQKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICAgICAgICBpZiAob3B0aW9ucy53YWxsKSB7CiAgICAgICAgICAgICAgbm9ybWFsc1thdHRySW5kZXggKyBib3R0b21PZmZzZXRdID0gbm9ybWFsMi54OwogICAgICAgICAgICAgIG5vcm1hbHNbYXR0ckluZGV4MSArIGJvdHRvbU9mZnNldF0gPSBub3JtYWwyLnk7CiAgICAgICAgICAgICAgbm9ybWFsc1thdHRySW5kZXgyICsgYm90dG9tT2Zmc2V0XSA9IG5vcm1hbDIuejsKICAgICAgICAgICAgfSBlbHNlIGlmIChib3R0b20pIHsKICAgICAgICAgICAgICBub3JtYWxzW2F0dHJJbmRleCArIGJvdHRvbU9mZnNldF0gPSAtbm9ybWFsMi54OwogICAgICAgICAgICAgIG5vcm1hbHNbYXR0ckluZGV4MSArIGJvdHRvbU9mZnNldF0gPSAtbm9ybWFsMi55OwogICAgICAgICAgICAgIG5vcm1hbHNbYXR0ckluZGV4MiArIGJvdHRvbU9mZnNldF0gPSAtbm9ybWFsMi56OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0b3AgJiYgIXBlclBvc2l0aW9uSGVpZ2h0IHx8IHdhbGwpIHsKICAgICAgICAgICAgICBub3JtYWxzW2F0dHJJbmRleF0gPSBub3JtYWwyLng7CiAgICAgICAgICAgICAgbm9ybWFsc1thdHRySW5kZXgxXSA9IG5vcm1hbDIueTsKICAgICAgICAgICAgICBub3JtYWxzW2F0dHJJbmRleDJdID0gbm9ybWFsMi56OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoc2hhZG93Vm9sdW1lKSB7CiAgICAgICAgICAgIGlmICh3YWxsKSB7CiAgICAgICAgICAgICAgbm9ybWFsMiA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwocG9zaXRpb24sIG5vcm1hbDIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGV4dHJ1ZGVOb3JtYWxzW2F0dHJJbmRleCArIGJvdHRvbU9mZnNldF0gPSAtbm9ybWFsMi54OwogICAgICAgICAgICBleHRydWRlTm9ybWFsc1thdHRySW5kZXgxICsgYm90dG9tT2Zmc2V0XSA9IC1ub3JtYWwyLnk7CiAgICAgICAgICAgIGV4dHJ1ZGVOb3JtYWxzW2F0dHJJbmRleDIgKyBib3R0b21PZmZzZXRdID0gLW5vcm1hbDIuejsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICAgICAgICBpZiAob3B0aW9ucy53YWxsKSB7CiAgICAgICAgICAgICAgdGFuZ2VudHNbYXR0ckluZGV4ICsgYm90dG9tT2Zmc2V0XSA9IHRhbmdlbnQueDsKICAgICAgICAgICAgICB0YW5nZW50c1thdHRySW5kZXgxICsgYm90dG9tT2Zmc2V0XSA9IHRhbmdlbnQueTsKICAgICAgICAgICAgICB0YW5nZW50c1thdHRySW5kZXgyICsgYm90dG9tT2Zmc2V0XSA9IHRhbmdlbnQuejsKICAgICAgICAgICAgfSBlbHNlIGlmIChib3R0b20pIHsKICAgICAgICAgICAgICB0YW5nZW50c1thdHRySW5kZXggKyBib3R0b21PZmZzZXRdID0gLXRhbmdlbnQueDsKICAgICAgICAgICAgICB0YW5nZW50c1thdHRySW5kZXgxICsgYm90dG9tT2Zmc2V0XSA9IC10YW5nZW50Lnk7CiAgICAgICAgICAgICAgdGFuZ2VudHNbYXR0ckluZGV4MiArIGJvdHRvbU9mZnNldF0gPSAtdGFuZ2VudC56OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0b3ApIHsKICAgICAgICAgICAgICBpZiAocGVyUG9zaXRpb25IZWlnaHQpIHsKICAgICAgICAgICAgICAgIHRhbmdlbnRzW2F0dHJJbmRleF0gPSBzY3JhdGNoUGVyUG9zVGFuZ2VudC54OwogICAgICAgICAgICAgICAgdGFuZ2VudHNbYXR0ckluZGV4MV0gPSBzY3JhdGNoUGVyUG9zVGFuZ2VudC55OwogICAgICAgICAgICAgICAgdGFuZ2VudHNbYXR0ckluZGV4Ml0gPSBzY3JhdGNoUGVyUG9zVGFuZ2VudC56OwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0YW5nZW50c1thdHRySW5kZXhdID0gdGFuZ2VudC54OwogICAgICAgICAgICAgICAgdGFuZ2VudHNbYXR0ckluZGV4MV0gPSB0YW5nZW50Lnk7CiAgICAgICAgICAgICAgICB0YW5nZW50c1thdHRySW5kZXgyXSA9IHRhbmdlbnQuejsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgICAgIGlmIChib3R0b20pIHsKICAgICAgICAgICAgICBiaXRhbmdlbnRzW2F0dHJJbmRleCArIGJvdHRvbU9mZnNldF0gPSBiaXRhbmdlbnQueDsKICAgICAgICAgICAgICBiaXRhbmdlbnRzW2F0dHJJbmRleDEgKyBib3R0b21PZmZzZXRdID0gYml0YW5nZW50Lnk7CiAgICAgICAgICAgICAgYml0YW5nZW50c1thdHRySW5kZXgyICsgYm90dG9tT2Zmc2V0XSA9IGJpdGFuZ2VudC56OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0b3ApIHsKICAgICAgICAgICAgICBpZiAocGVyUG9zaXRpb25IZWlnaHQpIHsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudHNbYXR0ckluZGV4XSA9IHNjcmF0Y2hQZXJQb3NCaXRhbmdlbnQueDsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudHNbYXR0ckluZGV4MV0gPSBzY3JhdGNoUGVyUG9zQml0YW5nZW50Lnk7CiAgICAgICAgICAgICAgICBiaXRhbmdlbnRzW2F0dHJJbmRleDJdID0gc2NyYXRjaFBlclBvc0JpdGFuZ2VudC56OwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBiaXRhbmdlbnRzW2F0dHJJbmRleF0gPSBiaXRhbmdlbnQueDsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudHNbYXR0ckluZGV4MV0gPSBiaXRhbmdlbnQueTsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudHNbYXR0ckluZGV4Ml0gPSBiaXRhbmdlbnQuejsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGF0dHJJbmRleCArPSAzOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAodmVydGV4Rm9ybWF0LnN0ICYmICFkZWZpbmVkX2RlZmF1bHQoZmxhdFRleGNvb3JkcykpIHsKICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnN0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgICAgdmFsdWVzOiB0ZXh0dXJlQ29vcmRpbmF0ZXMKICAgICAgICB9KTsKICAgICAgfQogICAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgdmFsdWVzOiBub3JtYWxzCiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy50YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgdmFsdWVzOiB0YW5nZW50cwogICAgICAgIH0pOwogICAgICB9CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5iaXRhbmdlbnQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICB2YWx1ZXM6IGJpdGFuZ2VudHMKICAgICAgICB9KTsKICAgICAgfQogICAgICBpZiAoc2hhZG93Vm9sdW1lKSB7CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5leHRydWRlRGlyZWN0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgdmFsdWVzOiBleHRydWRlTm9ybWFscwogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgICBpZiAob3B0aW9ucy5leHRydWRlICYmIGRlZmluZWRfZGVmYXVsdChvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSkpIHsKICAgICAgY29uc3Qgc2l6ZSA9IGZsYXRQb3NpdGlvbnMubGVuZ3RoIC8gMzsKICAgICAgbGV0IG9mZnNldEF0dHJpYnV0ZSA9IG5ldyBVaW50OEFycmF5KHNpemUpOwogICAgICBpZiAob3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuVE9QKSB7CiAgICAgICAgaWYgKHRvcCAmJiBib3R0b20gfHwgd2FsbCkgewogICAgICAgICAgb2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlLmZpbGwoMSwgMCwgc2l6ZSAvIDIpOwogICAgICAgIH0gZWxzZSBpZiAodG9wKSB7CiAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUuZmlsbCgxKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3Qgb2Zmc2V0VmFsdWUgPSBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5OT05FID8gMCA6IDE7CiAgICAgICAgb2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlLmZpbGwob2Zmc2V0VmFsdWUpOwogICAgICB9CiAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAxLAogICAgICAgIHZhbHVlczogb2Zmc2V0QXR0cmlidXRlCiAgICAgIH0pOwogICAgfQogICAgcmV0dXJuIGdlb21ldHJ5OwogIH0KICBmdW5jdGlvbiBjb21wdXRlUmVjdGFuZ2xlMyhwb3NpdGlvbnMsIGVsbGlwc29pZCwgYXJjVHlwZSwgZ3JhbnVsYXJpdHksIHJlc3VsdCkgewogICAgcmVzdWx0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQocmVzdWx0LCBuZXcgUmVjdGFuZ2xlX2RlZmF1bHQoKSk7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwb3NpdGlvbnMpIHx8IHBvc2l0aW9ucy5sZW5ndGggPCAzKSB7CiAgICAgIHJlc3VsdC53ZXN0ID0gMDsKICAgICAgcmVzdWx0Lm5vcnRoID0gMDsKICAgICAgcmVzdWx0LnNvdXRoID0gMDsKICAgICAgcmVzdWx0LmVhc3QgPSAwOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogICAgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5SSFVNQikgewogICAgICByZXR1cm4gUmVjdGFuZ2xlX2RlZmF1bHQuZnJvbUNhcnRlc2lhbkFycmF5KHBvc2l0aW9ucywgZWxsaXBzb2lkLCByZXN1bHQpOwogICAgfQogICAgaWYgKCFlbGxpcHNvaWRHZW9kZXNpYzIuZWxsaXBzb2lkLmVxdWFscyhlbGxpcHNvaWQpKSB7CiAgICAgIGVsbGlwc29pZEdlb2Rlc2ljMiA9IG5ldyBFbGxpcHNvaWRHZW9kZXNpY19kZWZhdWx0KHZvaWQgMCwgdm9pZCAwLCBlbGxpcHNvaWQpOwogICAgfQogICAgcmVzdWx0Lndlc3QgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CiAgICByZXN1bHQuZWFzdCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgIHJlc3VsdC5zb3V0aCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgIHJlc3VsdC5ub3J0aCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgIGlkbENyb3NzLndlc3RPdmVySURMID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgaWRsQ3Jvc3MuZWFzdE92ZXJJREwgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CiAgICBjb25zdCBpbnZlcnNlQ2hvcmRMZW5ndGggPSAxIC8gTWF0aF9kZWZhdWx0LmNob3JkTGVuZ3RoKGdyYW51bGFyaXR5LCBlbGxpcHNvaWQubWF4aW11bVJhZGl1cyk7CiAgICBjb25zdCBwb3NpdGlvbnNMZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgbGV0IGVuZENhcnRvZ3JhcGhpYyA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYygKICAgICAgcG9zaXRpb25zWzBdLAogICAgICBlbmRDYXJ0b2dyYXBoaWNTY3JhdGNoMgogICAgKTsKICAgIGxldCBzdGFydENhcnRvZ3JhcGhpYyA9IHN0YXJ0Q2FydG9ncmFwaGljU2NyYXRjaDI7CiAgICBsZXQgc3dhcDI7CiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHBvc2l0aW9uc0xlbmd0aDsgaSsrKSB7CiAgICAgIHN3YXAyID0gc3RhcnRDYXJ0b2dyYXBoaWM7CiAgICAgIHN0YXJ0Q2FydG9ncmFwaGljID0gZW5kQ2FydG9ncmFwaGljOwogICAgICBlbmRDYXJ0b2dyYXBoaWMgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMocG9zaXRpb25zW2ldLCBzd2FwMik7CiAgICAgIGVsbGlwc29pZEdlb2Rlc2ljMi5zZXRFbmRQb2ludHMoc3RhcnRDYXJ0b2dyYXBoaWMsIGVuZENhcnRvZ3JhcGhpYyk7CiAgICAgIGludGVycG9sYXRlQW5kR3Jvd1JlY3RhbmdsZSgKICAgICAgICBlbGxpcHNvaWRHZW9kZXNpYzIsCiAgICAgICAgaW52ZXJzZUNob3JkTGVuZ3RoLAogICAgICAgIHJlc3VsdCwKICAgICAgICBpZGxDcm9zcwogICAgICApOwogICAgfQogICAgc3dhcDIgPSBzdGFydENhcnRvZ3JhcGhpYzsKICAgIHN0YXJ0Q2FydG9ncmFwaGljID0gZW5kQ2FydG9ncmFwaGljOwogICAgZW5kQ2FydG9ncmFwaGljID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKHBvc2l0aW9uc1swXSwgc3dhcDIpOwogICAgZWxsaXBzb2lkR2VvZGVzaWMyLnNldEVuZFBvaW50cyhzdGFydENhcnRvZ3JhcGhpYywgZW5kQ2FydG9ncmFwaGljKTsKICAgIGludGVycG9sYXRlQW5kR3Jvd1JlY3RhbmdsZSgKICAgICAgZWxsaXBzb2lkR2VvZGVzaWMyLAogICAgICBpbnZlcnNlQ2hvcmRMZW5ndGgsCiAgICAgIHJlc3VsdCwKICAgICAgaWRsQ3Jvc3MKICAgICk7CiAgICBpZiAocmVzdWx0LmVhc3QgLSByZXN1bHQud2VzdCA+IGlkbENyb3NzLmVhc3RPdmVySURMIC0gaWRsQ3Jvc3Mud2VzdE92ZXJJREwpIHsKICAgICAgcmVzdWx0Lndlc3QgPSBpZGxDcm9zcy53ZXN0T3ZlcklETDsKICAgICAgcmVzdWx0LmVhc3QgPSBpZGxDcm9zcy5lYXN0T3ZlcklETDsKICAgICAgaWYgKHJlc3VsdC5lYXN0ID4gTWF0aF9kZWZhdWx0LlBJKSB7CiAgICAgICAgcmVzdWx0LmVhc3QgPSByZXN1bHQuZWFzdCAtIE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgIH0KICAgICAgaWYgKHJlc3VsdC53ZXN0ID4gTWF0aF9kZWZhdWx0LlBJKSB7CiAgICAgICAgcmVzdWx0Lndlc3QgPSByZXN1bHQud2VzdCAtIE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIGludGVycG9sYXRlQW5kR3Jvd1JlY3RhbmdsZShlbGxpcHNvaWRHZW9kZXNpYzMsIGludmVyc2VDaG9yZExlbmd0aCwgcmVzdWx0LCBpZGxDcm9zczIpIHsKICAgIGNvbnN0IHNlZ21lbnRMZW5ndGggPSBlbGxpcHNvaWRHZW9kZXNpYzMuc3VyZmFjZURpc3RhbmNlOwogICAgY29uc3QgbnVtUG9pbnRzID0gTWF0aC5jZWlsKHNlZ21lbnRMZW5ndGggKiBpbnZlcnNlQ2hvcmRMZW5ndGgpOwogICAgY29uc3Qgc3Vic2VnbWVudERpc3RhbmNlID0gbnVtUG9pbnRzID4gMCA/IHNlZ21lbnRMZW5ndGggLyAobnVtUG9pbnRzIC0gMSkgOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CiAgICBsZXQgaW50ZXJwb2xhdGlvbkRpc3RhbmNlID0gMDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtUG9pbnRzOyBpKyspIHsKICAgICAgY29uc3QgaW50ZXJwb2xhdGVkQ2FydG9ncmFwaGljID0gZWxsaXBzb2lkR2VvZGVzaWMzLmludGVycG9sYXRlVXNpbmdTdXJmYWNlRGlzdGFuY2UoCiAgICAgICAgaW50ZXJwb2xhdGlvbkRpc3RhbmNlLAogICAgICAgIGludGVycG9sYXRlZENhcnRvZ3JhcGhpY1NjcmF0Y2gyCiAgICAgICk7CiAgICAgIGludGVycG9sYXRpb25EaXN0YW5jZSArPSBzdWJzZWdtZW50RGlzdGFuY2U7CiAgICAgIGNvbnN0IGxvbmdpdHVkZSA9IGludGVycG9sYXRlZENhcnRvZ3JhcGhpYy5sb25naXR1ZGU7CiAgICAgIGNvbnN0IGxhdGl0dWRlID0gaW50ZXJwb2xhdGVkQ2FydG9ncmFwaGljLmxhdGl0dWRlOwogICAgICByZXN1bHQud2VzdCA9IE1hdGgubWluKHJlc3VsdC53ZXN0LCBsb25naXR1ZGUpOwogICAgICByZXN1bHQuZWFzdCA9IE1hdGgubWF4KHJlc3VsdC5lYXN0LCBsb25naXR1ZGUpOwogICAgICByZXN1bHQuc291dGggPSBNYXRoLm1pbihyZXN1bHQuc291dGgsIGxhdGl0dWRlKTsKICAgICAgcmVzdWx0Lm5vcnRoID0gTWF0aC5tYXgocmVzdWx0Lm5vcnRoLCBsYXRpdHVkZSk7CiAgICAgIGNvbnN0IGxvbkFkanVzdGVkID0gbG9uZ2l0dWRlID49IDAgPyBsb25naXR1ZGUgOiBsb25naXR1ZGUgKyBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICBpZGxDcm9zczIud2VzdE92ZXJJREwgPSBNYXRoLm1pbihpZGxDcm9zczIud2VzdE92ZXJJREwsIGxvbkFkanVzdGVkKTsKICAgICAgaWRsQ3Jvc3MyLmVhc3RPdmVySURMID0gTWF0aC5tYXgoaWRsQ3Jvc3MyLmVhc3RPdmVySURMLCBsb25BZGp1c3RlZCk7CiAgICB9CiAgfQogIGZ1bmN0aW9uIGNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9uc0V4dHJ1ZGVkKGVsbGlwc29pZCwgcG9seWdvbjIsIHRleHR1cmVDb29yZGluYXRlcywgZ3JhbnVsYXJpdHksIGhpZXJhcmNoeSwgcGVyUG9zaXRpb25IZWlnaHQsIGNsb3NlVG9wLCBjbG9zZUJvdHRvbSwgdmVydGV4Rm9ybWF0LCBhcmNUeXBlKSB7CiAgICBjb25zdCBnZW9zID0gewogICAgICB3YWxsczogW10KICAgIH07CiAgICBsZXQgaTsKICAgIGlmIChjbG9zZVRvcCB8fCBjbG9zZUJvdHRvbSkgewogICAgICBjb25zdCB0b3BHZW8gPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zKAogICAgICAgIGVsbGlwc29pZCwKICAgICAgICBwb2x5Z29uMiwKICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXMsCiAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgcGVyUG9zaXRpb25IZWlnaHQsCiAgICAgICAgdmVydGV4Rm9ybWF0LAogICAgICAgIGFyY1R5cGUKICAgICAgKTsKICAgICAgY29uc3QgZWRnZVBvaW50cyA9IHRvcEdlby5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlczsKICAgICAgY29uc3QgaW5kaWNlcyA9IHRvcEdlby5pbmRpY2VzOwogICAgICBsZXQgbnVtUG9zaXRpb25zOwogICAgICBsZXQgbmV3SW5kaWNlczsKICAgICAgaWYgKGNsb3NlVG9wICYmIGNsb3NlQm90dG9tKSB7CiAgICAgICAgY29uc3QgdG9wQm90dG9tUG9zaXRpb25zID0gZWRnZVBvaW50cy5jb25jYXQoZWRnZVBvaW50cyk7CiAgICAgICAgbnVtUG9zaXRpb25zID0gdG9wQm90dG9tUG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICAgICAgbmV3SW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICAgICAgbnVtUG9zaXRpb25zLAogICAgICAgICAgaW5kaWNlcy5sZW5ndGggKiAyCiAgICAgICAgKTsKICAgICAgICBuZXdJbmRpY2VzLnNldChpbmRpY2VzKTsKICAgICAgICBjb25zdCBpbGVuZ3RoID0gaW5kaWNlcy5sZW5ndGg7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gbnVtUG9zaXRpb25zIC8gMjsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaWxlbmd0aDsgaSArPSAzKSB7CiAgICAgICAgICBjb25zdCBpMCA9IG5ld0luZGljZXNbaV0gKyBsZW5ndGg7CiAgICAgICAgICBjb25zdCBpMSA9IG5ld0luZGljZXNbaSArIDFdICsgbGVuZ3RoOwogICAgICAgICAgY29uc3QgaTIgPSBuZXdJbmRpY2VzW2kgKyAyXSArIGxlbmd0aDsKICAgICAgICAgIG5ld0luZGljZXNbaSArIGlsZW5ndGhdID0gaTI7CiAgICAgICAgICBuZXdJbmRpY2VzW2kgKyAxICsgaWxlbmd0aF0gPSBpMTsKICAgICAgICAgIG5ld0luZGljZXNbaSArIDIgKyBpbGVuZ3RoXSA9IGkwOwogICAgICAgIH0KICAgICAgICB0b3BHZW8uYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMgPSB0b3BCb3R0b21Qb3NpdGlvbnM7CiAgICAgICAgaWYgKHBlclBvc2l0aW9uSGVpZ2h0ICYmIHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgICAgIGNvbnN0IG5vcm1hbHMgPSB0b3BHZW8uYXR0cmlidXRlcy5ub3JtYWwudmFsdWVzOwogICAgICAgICAgdG9wR2VvLmF0dHJpYnV0ZXMubm9ybWFsLnZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkoCiAgICAgICAgICAgIHRvcEJvdHRvbVBvc2l0aW9ucy5sZW5ndGgKICAgICAgICAgICk7CiAgICAgICAgICB0b3BHZW8uYXR0cmlidXRlcy5ub3JtYWwudmFsdWVzLnNldChub3JtYWxzKTsKICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5zdCAmJiBkZWZpbmVkX2RlZmF1bHQodGV4dHVyZUNvb3JkaW5hdGVzKSkgewogICAgICAgICAgY29uc3QgdGV4Y29vcmRzID0gdG9wR2VvLmF0dHJpYnV0ZXMuc3QudmFsdWVzOwogICAgICAgICAgdG9wR2VvLmF0dHJpYnV0ZXMuc3QudmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheShudW1Qb3NpdGlvbnMgKiAyKTsKICAgICAgICAgIHRvcEdlby5hdHRyaWJ1dGVzLnN0LnZhbHVlcyA9IHRleGNvb3Jkcy5jb25jYXQodGV4Y29vcmRzKTsKICAgICAgICB9CiAgICAgICAgdG9wR2VvLmluZGljZXMgPSBuZXdJbmRpY2VzOwogICAgICB9IGVsc2UgaWYgKGNsb3NlQm90dG9tKSB7CiAgICAgICAgbnVtUG9zaXRpb25zID0gZWRnZVBvaW50cy5sZW5ndGggLyAzOwogICAgICAgIG5ld0luZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShudW1Qb3NpdGlvbnMsIGluZGljZXMubGVuZ3RoKTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW5kaWNlcy5sZW5ndGg7IGkgKz0gMykgewogICAgICAgICAgbmV3SW5kaWNlc1tpXSA9IGluZGljZXNbaSArIDJdOwogICAgICAgICAgbmV3SW5kaWNlc1tpICsgMV0gPSBpbmRpY2VzW2kgKyAxXTsKICAgICAgICAgIG5ld0luZGljZXNbaSArIDJdID0gaW5kaWNlc1tpXTsKICAgICAgICB9CiAgICAgICAgdG9wR2VvLmluZGljZXMgPSBuZXdJbmRpY2VzOwogICAgICB9CiAgICAgIGdlb3MudG9wQW5kQm90dG9tID0gbmV3IEdlb21ldHJ5SW5zdGFuY2VfZGVmYXVsdCh7CiAgICAgICAgZ2VvbWV0cnk6IHRvcEdlbwogICAgICB9KTsKICAgIH0KICAgIGxldCBvdXRlclJpbmcgPSBoaWVyYXJjaHkub3V0ZXJSaW5nOwogICAgY29uc3QgdGFuZ2VudFBsYW5lID0gRWxsaXBzb2lkVGFuZ2VudFBsYW5lX2RlZmF1bHQuZnJvbVBvaW50cyhvdXRlclJpbmcsIGVsbGlwc29pZCk7CiAgICBsZXQgcG9zaXRpb25zMkQgPSB0YW5nZW50UGxhbmUucHJvamVjdFBvaW50c09udG9QbGFuZSgKICAgICAgb3V0ZXJSaW5nLAogICAgICBjcmVhdGVHZW9tZXRyeUZyb21Qb3NpdGlvbnNFeHRydWRlZFBvc2l0aW9ucwogICAgKTsKICAgIGxldCB3aW5kaW5nT3JkZXIgPSBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdC5jb21wdXRlV2luZGluZ09yZGVyMkQocG9zaXRpb25zMkQpOwogICAgaWYgKHdpbmRpbmdPcmRlciA9PT0gV2luZGluZ09yZGVyX2RlZmF1bHQuQ0xPQ0tXSVNFKSB7CiAgICAgIG91dGVyUmluZyA9IG91dGVyUmluZy5zbGljZSgpLnJldmVyc2UoKTsKICAgIH0KICAgIGxldCB3YWxsR2VvID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVXYWxsR2VvbWV0cnkoCiAgICAgIG91dGVyUmluZywKICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzLAogICAgICBlbGxpcHNvaWQsCiAgICAgIGdyYW51bGFyaXR5LAogICAgICBwZXJQb3NpdGlvbkhlaWdodCwKICAgICAgYXJjVHlwZQogICAgKTsKICAgIGdlb3Mud2FsbHMucHVzaCgKICAgICAgbmV3IEdlb21ldHJ5SW5zdGFuY2VfZGVmYXVsdCh7CiAgICAgICAgZ2VvbWV0cnk6IHdhbGxHZW8KICAgICAgfSkKICAgICk7CiAgICBjb25zdCBob2xlcyA9IGhpZXJhcmNoeS5ob2xlczsKICAgIGZvciAoaSA9IDA7IGkgPCBob2xlcy5sZW5ndGg7IGkrKykgewogICAgICBsZXQgaG9sZSA9IGhvbGVzW2ldOwogICAgICBwb3NpdGlvbnMyRCA9IHRhbmdlbnRQbGFuZS5wcm9qZWN0UG9pbnRzT250b1BsYW5lKAogICAgICAgIGhvbGUsCiAgICAgICAgY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zRXh0cnVkZWRQb3NpdGlvbnMKICAgICAgKTsKICAgICAgd2luZGluZ09yZGVyID0gUG9seWdvblBpcGVsaW5lX2RlZmF1bHQuY29tcHV0ZVdpbmRpbmdPcmRlcjJEKHBvc2l0aW9uczJEKTsKICAgICAgaWYgKHdpbmRpbmdPcmRlciA9PT0gV2luZGluZ09yZGVyX2RlZmF1bHQuQ09VTlRFUl9DTE9DS1dJU0UpIHsKICAgICAgICBob2xlID0gaG9sZS5zbGljZSgpLnJldmVyc2UoKTsKICAgICAgfQogICAgICB3YWxsR2VvID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVXYWxsR2VvbWV0cnkoCiAgICAgICAgaG9sZSwKICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXMsCiAgICAgICAgZWxsaXBzb2lkLAogICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgIHBlclBvc2l0aW9uSGVpZ2h0LAogICAgICAgIGFyY1R5cGUKICAgICAgKTsKICAgICAgZ2Vvcy53YWxscy5wdXNoKAogICAgICAgIG5ldyBHZW9tZXRyeUluc3RhbmNlX2RlZmF1bHQoewogICAgICAgICAgZ2VvbWV0cnk6IHdhbGxHZW8KICAgICAgICB9KQogICAgICApOwogICAgfQogICAgcmV0dXJuIGdlb3M7CiAgfQogIGZ1bmN0aW9uIFBvbHlnb25HZW9tZXRyeShvcHRpb25zKSB7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm9wdGlvbnMiLCBvcHRpb25zKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgib3B0aW9ucy5wb2x5Z29uSGllcmFyY2h5Iiwgb3B0aW9ucy5wb2x5Z29uSGllcmFyY2h5KTsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5wZXJQb3NpdGlvbkhlaWdodCkgJiYgb3B0aW9ucy5wZXJQb3NpdGlvbkhlaWdodCAmJiBkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5oZWlnaHQpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJDYW5ub3QgdXNlIGJvdGggb3B0aW9ucy5wZXJQb3NpdGlvbkhlaWdodCBhbmQgb3B0aW9ucy5oZWlnaHQiCiAgICAgICk7CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMuYXJjVHlwZSkgJiYgb3B0aW9ucy5hcmNUeXBlICE9PSBBcmNUeXBlX2RlZmF1bHQuR0VPREVTSUMgJiYgb3B0aW9ucy5hcmNUeXBlICE9PSBBcmNUeXBlX2RlZmF1bHQuUkhVTUIpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIkludmFsaWQgYXJjVHlwZS4gVmFsaWQgb3B0aW9ucyBhcmUgQXJjVHlwZS5HRU9ERVNJQyBhbmQgQXJjVHlwZS5SSFVNQi4iCiAgICAgICk7CiAgICB9CiAgICBjb25zdCBwb2x5Z29uSGllcmFyY2h5ID0gb3B0aW9ucy5wb2x5Z29uSGllcmFyY2h5OwogICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy52ZXJ0ZXhGb3JtYXQsIFZlcnRleEZvcm1hdF9kZWZhdWx0LkRFRkFVTFQpOwogICAgY29uc3QgZWxsaXBzb2lkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5lbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LldHUzg0KTsKICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgIG9wdGlvbnMuZ3JhbnVsYXJpdHksCiAgICAgIE1hdGhfZGVmYXVsdC5SQURJQU5TX1BFUl9ERUdSRUUKICAgICk7CiAgICBjb25zdCBzdFJvdGF0aW9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5zdFJvdGF0aW9uLCAwKTsKICAgIGNvbnN0IHRleHR1cmVDb29yZGluYXRlcyA9IG9wdGlvbnMudGV4dHVyZUNvb3JkaW5hdGVzOwogICAgY29uc3QgcGVyUG9zaXRpb25IZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnBlclBvc2l0aW9uSGVpZ2h0LCBmYWxzZSk7CiAgICBjb25zdCBwZXJQb3NpdGlvbkhlaWdodEV4dHJ1ZGUgPSBwZXJQb3NpdGlvbkhlaWdodCAmJiBkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5leHRydWRlZEhlaWdodCk7CiAgICBsZXQgaGVpZ2h0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5oZWlnaHQsIDApOwogICAgbGV0IGV4dHJ1ZGVkSGVpZ2h0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5leHRydWRlZEhlaWdodCwgaGVpZ2h0KTsKICAgIGlmICghcGVyUG9zaXRpb25IZWlnaHRFeHRydWRlKSB7CiAgICAgIGNvbnN0IGggPSBNYXRoLm1heChoZWlnaHQsIGV4dHJ1ZGVkSGVpZ2h0KTsKICAgICAgZXh0cnVkZWRIZWlnaHQgPSBNYXRoLm1pbihoZWlnaHQsIGV4dHJ1ZGVkSGVpZ2h0KTsKICAgICAgaGVpZ2h0ID0gaDsKICAgIH0KICAgIHRoaXMuX3ZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LmNsb25lKHZlcnRleEZvcm1hdCk7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWQpOwogICAgdGhpcy5fZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgIHRoaXMuX3N0Um90YXRpb24gPSBzdFJvdGF0aW9uOwogICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0OwogICAgdGhpcy5fZXh0cnVkZWRIZWlnaHQgPSBleHRydWRlZEhlaWdodDsKICAgIHRoaXMuX2Nsb3NlVG9wID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5jbG9zZVRvcCwgdHJ1ZSk7CiAgICB0aGlzLl9jbG9zZUJvdHRvbSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuY2xvc2VCb3R0b20sIHRydWUpOwogICAgdGhpcy5fcG9seWdvbkhpZXJhcmNoeSA9IHBvbHlnb25IaWVyYXJjaHk7CiAgICB0aGlzLl9wZXJQb3NpdGlvbkhlaWdodCA9IHBlclBvc2l0aW9uSGVpZ2h0OwogICAgdGhpcy5fcGVyUG9zaXRpb25IZWlnaHRFeHRydWRlID0gcGVyUG9zaXRpb25IZWlnaHRFeHRydWRlOwogICAgdGhpcy5fc2hhZG93Vm9sdW1lID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5zaGFkb3dWb2x1bWUsIGZhbHNlKTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlUG9seWdvbkdlb21ldHJ5IjsKICAgIHRoaXMuX29mZnNldEF0dHJpYnV0ZSA9IG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlOwogICAgdGhpcy5fYXJjVHlwZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuYXJjVHlwZSwgQXJjVHlwZV9kZWZhdWx0LkdFT0RFU0lDKTsKICAgIHRoaXMuX3JlY3RhbmdsZSA9IHZvaWQgMDsKICAgIHRoaXMuX3RleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHMgPSB2b2lkIDA7CiAgICB0aGlzLl90ZXh0dXJlQ29vcmRpbmF0ZXMgPSB0ZXh0dXJlQ29vcmRpbmF0ZXM7CiAgICB0aGlzLnBhY2tlZExlbmd0aCA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlSGllcmFyY2h5UGFja2VkTGVuZ3RoKAogICAgICBwb2x5Z29uSGllcmFyY2h5LAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQKICAgICkgKyBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyAodGV4dHVyZUNvb3JkaW5hdGVzID8gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVIaWVyYXJjaHlQYWNrZWRMZW5ndGgoCiAgICAgIHRleHR1cmVDb29yZGluYXRlcywKICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0CiAgICApIDogMSkgKyAxMjsKICB9CiAgZnVuY3Rpb24gZXhwYW5kUmVjdGFuZ2xlKHBvbGFyLCBsYXN0UG9sYXIsIGVsbGlwc29pZCwgYXJjVHlwZSwgcG9seWdvbjIsIHJlc3VsdCkgewogICAgY29uc3QgbG9uZ2l0dWRlID0gcG9sYXIubG9uZ2l0dWRlOwogICAgY29uc3QgbG9uQWRqdXN0ZWQgPSBsb25naXR1ZGUgPj0gMCA/IGxvbmdpdHVkZSA6IGxvbmdpdHVkZSArIE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICBwb2x5Z29uMi53ZXN0T3ZlcklkbCA9IE1hdGgubWluKHBvbHlnb24yLndlc3RPdmVySWRsLCBsb25BZGp1c3RlZCk7CiAgICBwb2x5Z29uMi5lYXN0T3ZlcklkbCA9IE1hdGgubWF4KHBvbHlnb24yLmVhc3RPdmVySWRsLCBsb25BZGp1c3RlZCk7CiAgICByZXN1bHQud2VzdCA9IE1hdGgubWluKHJlc3VsdC53ZXN0LCBsb25naXR1ZGUpOwogICAgcmVzdWx0LmVhc3QgPSBNYXRoLm1heChyZXN1bHQuZWFzdCwgbG9uZ2l0dWRlKTsKICAgIGNvbnN0IGxhdGl0dWRlID0gcG9sYXIuZ2V0TGF0aXR1ZGUoZWxsaXBzb2lkKTsKICAgIGxldCBzZWdtZW50TGF0aXR1ZGUgPSBsYXRpdHVkZTsKICAgIHJlc3VsdC5zb3V0aCA9IE1hdGgubWluKHJlc3VsdC5zb3V0aCwgbGF0aXR1ZGUpOwogICAgcmVzdWx0Lm5vcnRoID0gTWF0aC5tYXgocmVzdWx0Lm5vcnRoLCBsYXRpdHVkZSk7CiAgICBpZiAoYXJjVHlwZSAhPT0gQXJjVHlwZV9kZWZhdWx0LlJIVU1CKSB7CiAgICAgIGNvbnN0IHNlZ21lbnQgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgbGFzdFBvbGFyLnBvc2l0aW9uLAogICAgICAgIHBvbGFyLnBvc2l0aW9uLAogICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4wMgogICAgICApOwogICAgICBjb25zdCB0ID0gQ2FydGVzaWFuMl9kZWZhdWx0LmRvdChsYXN0UG9sYXIucG9zaXRpb24sIHNlZ21lbnQpIC8gQ2FydGVzaWFuMl9kZWZhdWx0LmRvdChzZWdtZW50LCBzZWdtZW50KTsKICAgICAgaWYgKHQgPiAwICYmIHQgPCAxKSB7CiAgICAgICAgY29uc3QgcHJvamVjdGVkID0gQ2FydGVzaWFuMl9kZWZhdWx0LmFkZCgKICAgICAgICAgIGxhc3RQb2xhci5wb3NpdGlvbiwKICAgICAgICAgIENhcnRlc2lhbjJfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHNlZ21lbnQsIC10LCBzZWdtZW50KSwKICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xOAogICAgICAgICk7CiAgICAgICAgY29uc3QgY2xvc2VzdFBvbGFyID0gU3RlcmVvZ3JhcGhpY19kZWZhdWx0LmNsb25lKGxhc3RQb2xhciwgc2NyYXRjaFBvbGFyQ2xvc2VzdCk7CiAgICAgICAgY2xvc2VzdFBvbGFyLnBvc2l0aW9uID0gcHJvamVjdGVkOwogICAgICAgIGNvbnN0IGFkanVzdGVkTGF0aXR1ZGUgPSBjbG9zZXN0UG9sYXIuZ2V0TGF0aXR1ZGUoZWxsaXBzb2lkKTsKICAgICAgICByZXN1bHQuc291dGggPSBNYXRoLm1pbihyZXN1bHQuc291dGgsIGFkanVzdGVkTGF0aXR1ZGUpOwogICAgICAgIHJlc3VsdC5ub3J0aCA9IE1hdGgubWF4KHJlc3VsdC5ub3J0aCwgYWRqdXN0ZWRMYXRpdHVkZSk7CiAgICAgICAgaWYgKE1hdGguYWJzKGxhdGl0dWRlKSA+IE1hdGguYWJzKGFkanVzdGVkTGF0aXR1ZGUpKSB7CiAgICAgICAgICBzZWdtZW50TGF0aXR1ZGUgPSBhZGp1c3RlZExhdGl0dWRlOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgY29uc3QgZGlyZWN0aW9uMiA9IGxhc3RQb2xhci54ICogcG9sYXIueSAtIHBvbGFyLnggKiBsYXN0UG9sYXIueTsKICAgIGxldCBhbmdsZSA9IE1hdGguc2lnbihkaXJlY3Rpb24yKTsKICAgIGlmIChhbmdsZSAhPT0gMCkgewogICAgICBhbmdsZSAqPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuYW5nbGVCZXR3ZWVuKGxhc3RQb2xhci5wb3NpdGlvbiwgcG9sYXIucG9zaXRpb24pOwogICAgfQogICAgaWYgKHNlZ21lbnRMYXRpdHVkZSA+PSAwKSB7CiAgICAgIHBvbHlnb24yLm5vcnRoQW5nbGUgKz0gYW5nbGU7CiAgICB9CiAgICBpZiAoc2VnbWVudExhdGl0dWRlIDw9IDApIHsKICAgICAgcG9seWdvbjIuc291dGhBbmdsZSArPSBhbmdsZTsKICAgIH0KICB9CiAgZnVuY3Rpb24gZ2V0VGFuZ2VudFBsYW5lKHJlY3RhbmdsZSwgcG9zaXRpb25zLCBlbGxpcHNvaWQpIHsKICAgIGlmIChyZWN0YW5nbGUuaGVpZ2h0ID49IE1hdGhfZGVmYXVsdC5QSSB8fCByZWN0YW5nbGUud2lkdGggPj0gTWF0aF9kZWZhdWx0LlBJKSB7CiAgICAgIGNvbnN0IHBvbGFyID0gU3RlcmVvZ3JhcGhpY19kZWZhdWx0LmZyb21DYXJ0ZXNpYW4oCiAgICAgICAgcG9zaXRpb25zWzBdLAogICAgICAgIHNjcmF0Y2hQb2xhckZvclBsYW5lCiAgICAgICk7CiAgICAgIHJldHVybiBwb2xhci50YW5nZW50UGxhbmU7CiAgICB9CiAgICByZXR1cm4gRWxsaXBzb2lkVGFuZ2VudFBsYW5lX2RlZmF1bHQuZnJvbVBvaW50cyhwb3NpdGlvbnMsIGVsbGlwc29pZCk7CiAgfQogIGZ1bmN0aW9uIGNyZWF0ZVByb2plY3RUbzJkKHJlY3RhbmdsZSwgb3V0ZXJQb3NpdGlvbnMsIGVsbGlwc29pZCkgewogICAgcmV0dXJuIChwb3NpdGlvbnMsIHJlc3VsdHMpID0+IHsKICAgICAgaWYgKHJlY3RhbmdsZS5oZWlnaHQgPj0gTWF0aF9kZWZhdWx0LlBJIHx8IHJlY3RhbmdsZS53aWR0aCA+PSBNYXRoX2RlZmF1bHQuUEkpIHsKICAgICAgICBpZiAocmVjdGFuZ2xlLnNvdXRoIDwgMCAmJiByZWN0YW5nbGUubm9ydGggPiAwKSB7CiAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHRzKSkgewogICAgICAgICAgICByZXN1bHRzID0gW107CiAgICAgICAgICB9CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICBjb25zdCBjYXJ0b2dyYXBoaWMyID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKAogICAgICAgICAgICAgIHBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljQ3lsbGluZHJpY2FsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJlc3VsdHNbaV0gPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KAogICAgICAgICAgICAgIGNhcnRvZ3JhcGhpYzIubG9uZ2l0dWRlIC8gTWF0aF9kZWZhdWx0LlBJLAogICAgICAgICAgICAgIGNhcnRvZ3JhcGhpYzIubGF0aXR1ZGUgLyBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08KICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICAgIHJlc3VsdHMubGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICAgIHJldHVybiByZXN1bHRzOwogICAgICAgIH0KICAgICAgICByZXR1cm4gU3RlcmVvZ3JhcGhpY19kZWZhdWx0LmZyb21DYXJ0ZXNpYW5BcnJheShwb3NpdGlvbnMsIHJlc3VsdHMpOwogICAgICB9CiAgICAgIGNvbnN0IHRhbmdlbnRQbGFuZSA9IEVsbGlwc29pZFRhbmdlbnRQbGFuZV9kZWZhdWx0LmZyb21Qb2ludHMoCiAgICAgICAgb3V0ZXJQb3NpdGlvbnMsCiAgICAgICAgZWxsaXBzb2lkCiAgICAgICk7CiAgICAgIHJldHVybiB0YW5nZW50UGxhbmUucHJvamVjdFBvaW50c09udG9QbGFuZShwb3NpdGlvbnMsIHJlc3VsdHMpOwogICAgfTsKICB9CiAgZnVuY3Rpb24gY3JlYXRlUHJvamVjdFBvc2l0aW9uVG8yZChyZWN0YW5nbGUsIG91dGVyUmluZywgZWxsaXBzb2lkKSB7CiAgICBpZiAocmVjdGFuZ2xlLmhlaWdodCA+PSBNYXRoX2RlZmF1bHQuUEkgfHwgcmVjdGFuZ2xlLndpZHRoID49IE1hdGhfZGVmYXVsdC5QSSkgewogICAgICByZXR1cm4gKHBvc2l0aW9uLCByZXN1bHQpID0+IHsKICAgICAgICBpZiAocmVjdGFuZ2xlLnNvdXRoIDwgMCAmJiByZWN0YW5nbGUubm9ydGggPiAwKSB7CiAgICAgICAgICBjb25zdCBjYXJ0b2dyYXBoaWMyID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKAogICAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY0N5bGxpbmRyaWNhbAogICAgICAgICAgKTsKICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICAgICAgfQogICAgICAgICAgcmVzdWx0LnggPSBjYXJ0b2dyYXBoaWMyLmxvbmdpdHVkZSAvIE1hdGhfZGVmYXVsdC5QSTsKICAgICAgICAgIHJlc3VsdC55ID0gY2FydG9ncmFwaGljMi5sYXRpdHVkZSAvIE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTzsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBTdGVyZW9ncmFwaGljX2RlZmF1bHQuZnJvbUNhcnRlc2lhbihwb3NpdGlvbiwgcmVzdWx0KTsKICAgICAgfTsKICAgIH0KICAgIGNvbnN0IHRhbmdlbnRQbGFuZSA9IEVsbGlwc29pZFRhbmdlbnRQbGFuZV9kZWZhdWx0LmZyb21Qb2ludHMob3V0ZXJSaW5nLCBlbGxpcHNvaWQpOwogICAgcmV0dXJuIChwb3NpdGlvbiwgcmVzdWx0KSA9PiB7CiAgICAgIHJldHVybiB0YW5nZW50UGxhbmUucHJvamVjdFBvaW50c09udG9QbGFuZShwb3NpdGlvbiwgcmVzdWx0KTsKICAgIH07CiAgfQogIGZ1bmN0aW9uIGNyZWF0ZVNwbGl0UG9seWdvbnMocmVjdGFuZ2xlLCBlbGxpcHNvaWQsIGFyY1R5cGUsIHBlclBvc2l0aW9uSGVpZ2h0KSB7CiAgICByZXR1cm4gKHBvbHlnb25zLCByZXN1bHRzKSA9PiB7CiAgICAgIGlmICghcGVyUG9zaXRpb25IZWlnaHQgJiYgKHJlY3RhbmdsZS5oZWlnaHQgPj0gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPIHx8IHJlY3RhbmdsZS53aWR0aCA+PSAyICogTWF0aF9kZWZhdWx0LlBJX09WRVJfVEhSRUUpKSB7CiAgICAgICAgcmV0dXJuIFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5zcGxpdFBvbHlnb25zT25FcXVhdG9yKAogICAgICAgICAgcG9seWdvbnMsCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBhcmNUeXBlLAogICAgICAgICAgcmVzdWx0cwogICAgICAgICk7CiAgICAgIH0KICAgICAgcmV0dXJuIHBvbHlnb25zOwogICAgfTsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZUJvdW5kaW5nUmVjdGFuZ2xlKG91dGVyUmluZywgcmVjdGFuZ2xlLCBlbGxpcHNvaWQsIHN0Um90YXRpb24pIHsKICAgIGlmIChyZWN0YW5nbGUuaGVpZ2h0ID49IE1hdGhfZGVmYXVsdC5QSSB8fCByZWN0YW5nbGUud2lkdGggPj0gTWF0aF9kZWZhdWx0LlBJKSB7CiAgICAgIHJldHVybiBCb3VuZGluZ1JlY3RhbmdsZV9kZWZhdWx0LmZyb21SZWN0YW5nbGUoCiAgICAgICAgcmVjdGFuZ2xlLAogICAgICAgIHZvaWQgMCwKICAgICAgICBzY3JhdGNoQm91bmRpbmdSZWN0YW5nbGUKICAgICAgKTsKICAgIH0KICAgIGNvbnN0IG91dGVyUG9zaXRpb25zID0gb3V0ZXJSaW5nOwogICAgY29uc3QgdGFuZ2VudFBsYW5lID0gRWxsaXBzb2lkVGFuZ2VudFBsYW5lX2RlZmF1bHQuZnJvbVBvaW50cygKICAgICAgb3V0ZXJQb3NpdGlvbnMsCiAgICAgIGVsbGlwc29pZAogICAgKTsKICAgIHJldHVybiBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZUJvdW5kaW5nUmVjdGFuZ2xlKAogICAgICB0YW5nZW50UGxhbmUucGxhbmUubm9ybWFsLAogICAgICB0YW5nZW50UGxhbmUucHJvamVjdFBvaW50T250b1BsYW5lLmJpbmQodGFuZ2VudFBsYW5lKSwKICAgICAgb3V0ZXJQb3NpdGlvbnMsCiAgICAgIHN0Um90YXRpb24sCiAgICAgIHNjcmF0Y2hCb3VuZGluZ1JlY3RhbmdsZQogICAgKTsKICB9CiAgZnVuY3Rpb24gdGV4dHVyZUNvb3JkaW5hdGVSb3RhdGlvblBvaW50czIocG9seWdvbkdlb21ldHJ5KSB7CiAgICBjb25zdCBzdFJvdGF0aW9uID0gLXBvbHlnb25HZW9tZXRyeS5fc3RSb3RhdGlvbjsKICAgIGlmIChzdFJvdGF0aW9uID09PSAwKSB7CiAgICAgIHJldHVybiBbMCwgMCwgMCwgMSwgMSwgMF07CiAgICB9CiAgICBjb25zdCBlbGxpcHNvaWQgPSBwb2x5Z29uR2VvbWV0cnkuX2VsbGlwc29pZDsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IHBvbHlnb25HZW9tZXRyeS5fcG9seWdvbkhpZXJhcmNoeS5wb3NpdGlvbnM7CiAgICBjb25zdCBib3VuZGluZ1JlY3RhbmdsZSA9IHBvbHlnb25HZW9tZXRyeS5yZWN0YW5nbGU7CiAgICByZXR1cm4gR2VvbWV0cnlfZGVmYXVsdC5fdGV4dHVyZUNvb3JkaW5hdGVSb3RhdGlvblBvaW50cygKICAgICAgcG9zaXRpb25zLAogICAgICBzdFJvdGF0aW9uLAogICAgICBlbGxpcHNvaWQsCiAgICAgIGJvdW5kaW5nUmVjdGFuZ2xlCiAgICApOwogIH0KICB2YXIgc2NyYXRjaENhcnRvMSwgc2NyYXRjaENhcnRvMiwgc2NyYXRjaEJvdW5kaW5nUmVjdGFuZ2xlLCBzY3JhdGNoUG9zaXRpb24zLCBzY3JhdGNoTm9ybWFsNiwgc2NyYXRjaFRhbmdlbnQ0LCBzY3JhdGNoQml0YW5nZW50NCwgcDFTY3JhdGNoMywgcDJTY3JhdGNoMywgc2NyYXRjaFBlclBvc05vcm1hbCwgc2NyYXRjaFBlclBvc1RhbmdlbnQsIHNjcmF0Y2hQZXJQb3NCaXRhbmdlbnQsIGFwcGVuZFRleHR1cmVDb29yZGluYXRlc09yaWdpbiwgYXBwZW5kVGV4dHVyZUNvb3JkaW5hdGVzQ2FydGVzaWFuMiwgYXBwZW5kVGV4dHVyZUNvb3JkaW5hdGVzQ2FydGVzaWFuMywgYXBwZW5kVGV4dHVyZUNvb3JkaW5hdGVzUXVhdGVybmlvbiwgYXBwZW5kVGV4dHVyZUNvb3JkaW5hdGVzTWF0cml4MywgdGFuZ2VudE1hdHJpeFNjcmF0Y2gyLCBzdGFydENhcnRvZ3JhcGhpY1NjcmF0Y2gyLCBlbmRDYXJ0b2dyYXBoaWNTY3JhdGNoMiwgaWRsQ3Jvc3MsIGVsbGlwc29pZEdlb2Rlc2ljMiwgaW50ZXJwb2xhdGVkQ2FydG9ncmFwaGljU2NyYXRjaDIsIGNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9uc0V4dHJ1ZGVkUG9zaXRpb25zLCBzY3JhdGNoRWxsaXBzb2lkNiwgc2NyYXRjaFZlcnRleEZvcm1hdDksIGR1bW15T3B0aW9ucywgc2NyYXRjaENhcnRlc2lhbjAyLCBzY3JhdGNoQ2FydGVzaWFuMTgsIHNjcmF0Y2hQb2xhckNsb3Nlc3QsIHNjcmF0Y2hQb2xhciwgc2NyYXRjaFBvbGFyUHJldmlvdXMsIHBvbHlnb24sIHNjcmF0Y2hQb2xhckZvclBsYW5lLCBzY3JhdGNoQ2FydG9ncmFwaGljQ3lsbGluZHJpY2FsLCBQb2x5Z29uR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9Qb2x5Z29uR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BvbHlnb25HZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQXJjVHlwZSgpOwogICAgICBpbml0X0JvdW5kaW5nUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfZGVwcmVjYXRpb25XYXJuaW5nKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWRHZW9kZXNpYygpOwogICAgICBpbml0X0VsbGlwc29pZFRhbmdlbnRQbGFuZSgpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUluc3RhbmNlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeVBpcGVsaW5lKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9NYXRyaXgzKCk7CiAgICAgIGluaXRfUG9seWdvbkdlb21ldHJ5TGlicmFyeSgpOwogICAgICBpbml0X1BvbHlnb25QaXBlbGluZSgpOwogICAgICBpbml0X1F1YXRlcm5pb24oKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgaW5pdF9TdGVyZW9ncmFwaGljKCk7CiAgICAgIGluaXRfVmVydGV4Rm9ybWF0KCk7CiAgICAgIGluaXRfV2luZGluZ09yZGVyKCk7CiAgICAgIHNjcmF0Y2hDYXJ0bzEgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRvMiA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQm91bmRpbmdSZWN0YW5nbGUgPSBuZXcgQm91bmRpbmdSZWN0YW5nbGVfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUG9zaXRpb24zID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTm9ybWFsNiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFRhbmdlbnQ0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQml0YW5nZW50NCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcDFTY3JhdGNoMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcDJTY3JhdGNoMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBlclBvc05vcm1hbCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBlclBvc1RhbmdlbnQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQZXJQb3NCaXRhbmdlbnQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGFwcGVuZFRleHR1cmVDb29yZGluYXRlc09yaWdpbiA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgYXBwZW5kVGV4dHVyZUNvb3JkaW5hdGVzQ2FydGVzaWFuMiA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgYXBwZW5kVGV4dHVyZUNvb3JkaW5hdGVzQ2FydGVzaWFuMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgYXBwZW5kVGV4dHVyZUNvb3JkaW5hdGVzUXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uX2RlZmF1bHQoKTsKICAgICAgYXBwZW5kVGV4dHVyZUNvb3JkaW5hdGVzTWF0cml4MyA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgdGFuZ2VudE1hdHJpeFNjcmF0Y2gyID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICBzdGFydENhcnRvZ3JhcGhpY1NjcmF0Y2gyID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIGVuZENhcnRvZ3JhcGhpY1NjcmF0Y2gyID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIGlkbENyb3NzID0gewogICAgICAgIHdlc3RPdmVySURMOiAwLAogICAgICAgIGVhc3RPdmVySURMOiAwCiAgICAgIH07CiAgICAgIGVsbGlwc29pZEdlb2Rlc2ljMiA9IG5ldyBFbGxpcHNvaWRHZW9kZXNpY19kZWZhdWx0KCk7CiAgICAgIGludGVycG9sYXRlZENhcnRvZ3JhcGhpY1NjcmF0Y2gyID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIGNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9uc0V4dHJ1ZGVkUG9zaXRpb25zID0gW107CiAgICAgIFBvbHlnb25HZW9tZXRyeS5mcm9tUG9zaXRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgib3B0aW9ucy5wb3NpdGlvbnMiLCBvcHRpb25zLnBvc2l0aW9ucyk7CiAgICAgICAgY29uc3QgbmV3T3B0aW9ucyA9IHsKICAgICAgICAgIHBvbHlnb25IaWVyYXJjaHk6IHsKICAgICAgICAgICAgcG9zaXRpb25zOiBvcHRpb25zLnBvc2l0aW9ucwogICAgICAgICAgfSwKICAgICAgICAgIGhlaWdodDogb3B0aW9ucy5oZWlnaHQsCiAgICAgICAgICBleHRydWRlZEhlaWdodDogb3B0aW9ucy5leHRydWRlZEhlaWdodCwKICAgICAgICAgIHZlcnRleEZvcm1hdDogb3B0aW9ucy52ZXJ0ZXhGb3JtYXQsCiAgICAgICAgICBzdFJvdGF0aW9uOiBvcHRpb25zLnN0Um90YXRpb24sCiAgICAgICAgICBlbGxpcHNvaWQ6IG9wdGlvbnMuZWxsaXBzb2lkLAogICAgICAgICAgZ3JhbnVsYXJpdHk6IG9wdGlvbnMuZ3JhbnVsYXJpdHksCiAgICAgICAgICBwZXJQb3NpdGlvbkhlaWdodDogb3B0aW9ucy5wZXJQb3NpdGlvbkhlaWdodCwKICAgICAgICAgIGNsb3NlVG9wOiBvcHRpb25zLmNsb3NlVG9wLAogICAgICAgICAgY2xvc2VCb3R0b206IG9wdGlvbnMuY2xvc2VCb3R0b20sCiAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlLAogICAgICAgICAgYXJjVHlwZTogb3B0aW9ucy5hcmNUeXBlLAogICAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzOiBvcHRpb25zLnRleHR1cmVDb29yZGluYXRlcwogICAgICAgIH07CiAgICAgICAgcmV0dXJuIG5ldyBQb2x5Z29uR2VvbWV0cnkobmV3T3B0aW9ucyk7CiAgICAgIH07CiAgICAgIFBvbHlnb25HZW9tZXRyeS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnBhY2tQb2x5Z29uSGllcmFyY2h5KAogICAgICAgICAgdmFsdWUuX3BvbHlnb25IaWVyYXJjaHksCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQKICAgICAgICApOwogICAgICAgIEVsbGlwc29pZF9kZWZhdWx0LnBhY2sodmFsdWUuX2VsbGlwc29pZCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2sodmFsdWUuX3ZlcnRleEZvcm1hdCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5faGVpZ2h0OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9ncmFudWxhcml0eTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3N0Um90YXRpb247CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9wZXJQb3NpdGlvbkhlaWdodEV4dHJ1ZGUgPyAxIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3BlclBvc2l0aW9uSGVpZ2h0ID8gMSA6IDA7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9jbG9zZVRvcCA/IDEgOiAwOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fY2xvc2VCb3R0b20gPyAxIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3NoYWRvd1ZvbHVtZSA/IDEgOiAwOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh2YWx1ZS5fb2Zmc2V0QXR0cmlidXRlLCAtMSk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9hcmNUeXBlOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQodmFsdWUuX3RleHR1cmVDb29yZGluYXRlcykpIHsKICAgICAgICAgIHN0YXJ0aW5nSW5kZXggPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQucGFja1BvbHlnb25IaWVyYXJjaHkoCiAgICAgICAgICAgIHZhbHVlLl90ZXh0dXJlQ29vcmRpbmF0ZXMsCiAgICAgICAgICAgIGFycmF5LAogICAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQKICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSAtMTsKICAgICAgICB9CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLnBhY2tlZExlbmd0aDsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hFbGxpcHNvaWQ2ID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoRWxsaXBzb2lkX2RlZmF1bHQuVU5JVF9TUEhFUkUpOwogICAgICBzY3JhdGNoVmVydGV4Rm9ybWF0OSA9IG5ldyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdCgpOwogICAgICBkdW1teU9wdGlvbnMgPSB7CiAgICAgICAgcG9seWdvbkhpZXJhcmNoeToge30KICAgICAgfTsKICAgICAgUG9seWdvbkdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCBwb2x5Z29uSGllcmFyY2h5ID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnVucGFja1BvbHlnb25IaWVyYXJjaHkoCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQKICAgICAgICApOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBwb2x5Z29uSGllcmFyY2h5LnN0YXJ0aW5nSW5kZXg7CiAgICAgICAgZGVsZXRlIHBvbHlnb25IaWVyYXJjaHkuc3RhcnRpbmdJbmRleDsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hFbGxpcHNvaWQ2KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBzY3JhdGNoVmVydGV4Rm9ybWF0OQogICAgICAgICk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgaGVpZ2h0ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHN0Um90YXRpb24gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHBlclBvc2l0aW9uSGVpZ2h0RXh0cnVkZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPT09IDE7CiAgICAgICAgY29uc3QgcGVyUG9zaXRpb25IZWlnaHQgPSBhcnJheVtzdGFydGluZ0luZGV4KytdID09PSAxOwogICAgICAgIGNvbnN0IGNsb3NlVG9wID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9PT0gMTsKICAgICAgICBjb25zdCBjbG9zZUJvdHRvbSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPT09IDE7CiAgICAgICAgY29uc3Qgc2hhZG93Vm9sdW1lID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9PT0gMTsKICAgICAgICBjb25zdCBvZmZzZXRBdHRyaWJ1dGUgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGFyY1R5cGUgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHRleHR1cmVDb29yZGluYXRlcyA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdID09PSAtMSA/IHZvaWQgMCA6IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC51bnBhY2tQb2x5Z29uSGllcmFyY2h5KAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0CiAgICAgICAgKTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHRleHR1cmVDb29yZGluYXRlcykpIHsKICAgICAgICAgIHN0YXJ0aW5nSW5kZXggPSB0ZXh0dXJlQ29vcmRpbmF0ZXMuc3RhcnRpbmdJbmRleDsKICAgICAgICAgIGRlbGV0ZSB0ZXh0dXJlQ29vcmRpbmF0ZXMuc3RhcnRpbmdJbmRleDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc3RhcnRpbmdJbmRleCsrOwogICAgICAgIH0KICAgICAgICBjb25zdCBwYWNrZWRMZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBQb2x5Z29uR2VvbWV0cnkoZHVtbXlPcHRpb25zKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Ll9wb2x5Z29uSGllcmFyY2h5ID0gcG9seWdvbkhpZXJhcmNoeTsKICAgICAgICByZXN1bHQuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKGVsbGlwc29pZCwgcmVzdWx0Ll9lbGxpcHNvaWQpOwogICAgICAgIHJlc3VsdC5fdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQuY2xvbmUodmVydGV4Rm9ybWF0LCByZXN1bHQuX3ZlcnRleEZvcm1hdCk7CiAgICAgICAgcmVzdWx0Ll9oZWlnaHQgPSBoZWlnaHQ7CiAgICAgICAgcmVzdWx0Ll9leHRydWRlZEhlaWdodCA9IGV4dHJ1ZGVkSGVpZ2h0OwogICAgICAgIHJlc3VsdC5fZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICByZXN1bHQuX3N0Um90YXRpb24gPSBzdFJvdGF0aW9uOwogICAgICAgIHJlc3VsdC5fcGVyUG9zaXRpb25IZWlnaHRFeHRydWRlID0gcGVyUG9zaXRpb25IZWlnaHRFeHRydWRlOwogICAgICAgIHJlc3VsdC5fcGVyUG9zaXRpb25IZWlnaHQgPSBwZXJQb3NpdGlvbkhlaWdodDsKICAgICAgICByZXN1bHQuX2Nsb3NlVG9wID0gY2xvc2VUb3A7CiAgICAgICAgcmVzdWx0Ll9jbG9zZUJvdHRvbSA9IGNsb3NlQm90dG9tOwogICAgICAgIHJlc3VsdC5fc2hhZG93Vm9sdW1lID0gc2hhZG93Vm9sdW1lOwogICAgICAgIHJlc3VsdC5fb2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICByZXN1bHQuX2FyY1R5cGUgPSBhcmNUeXBlOwogICAgICAgIHJlc3VsdC5fdGV4dHVyZUNvb3JkaW5hdGVzID0gdGV4dHVyZUNvb3JkaW5hdGVzOwogICAgICAgIHJlc3VsdC5wYWNrZWRMZW5ndGggPSBwYWNrZWRMZW5ndGg7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjAyID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuMTggPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQb2xhckNsb3Nlc3QgPSBuZXcgU3RlcmVvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQb2xhciA9IG5ldyBTdGVyZW9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBvbGFyUHJldmlvdXMgPSBuZXcgU3RlcmVvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHBvbHlnb24gPSB7CiAgICAgICAgbm9ydGhBbmdsZTogMCwKICAgICAgICBzb3V0aEFuZ2xlOiAwLAogICAgICAgIHdlc3RPdmVySWRsOiAwLAogICAgICAgIGVhc3RPdmVySWRsOiAwCiAgICAgIH07CiAgICAgIFBvbHlnb25HZW9tZXRyeS5jb21wdXRlUmVjdGFuZ2xlRnJvbVBvc2l0aW9ucyA9IGZ1bmN0aW9uKHBvc2l0aW9ucywgZWxsaXBzb2lkLCBhcmNUeXBlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInBvc2l0aW9ucyIsIHBvc2l0aW9ucyk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IFJlY3RhbmdsZV9kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIGlmIChwb3NpdGlvbnMubGVuZ3RoIDwgMykgewogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Lndlc3QgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CiAgICAgICAgcmVzdWx0LmVhc3QgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CiAgICAgICAgcmVzdWx0LnNvdXRoID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgICAgIHJlc3VsdC5ub3J0aCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgICAgICBwb2x5Z29uLm5vcnRoQW5nbGUgPSAwOwogICAgICAgIHBvbHlnb24uc291dGhBbmdsZSA9IDA7CiAgICAgICAgcG9seWdvbi53ZXN0T3ZlcklkbCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgICAgICBwb2x5Z29uLmVhc3RPdmVySWRsID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgICAgIGNvbnN0IHBvc2l0aW9uc0xlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgbGV0IGxhc3RQb2xhclBvc2l0aW9uID0gU3RlcmVvZ3JhcGhpY19kZWZhdWx0LmZyb21DYXJ0ZXNpYW4oCiAgICAgICAgICBwb3NpdGlvbnNbMF0sCiAgICAgICAgICBzY3JhdGNoUG9sYXJQcmV2aW91cwogICAgICAgICk7CiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBwb3NpdGlvbnNMZW5ndGg7IGkrKykgewogICAgICAgICAgY29uc3QgcG9sYXJQb3NpdGlvbiA9IFN0ZXJlb2dyYXBoaWNfZGVmYXVsdC5mcm9tQ2FydGVzaWFuKAogICAgICAgICAgICBwb3NpdGlvbnNbaV0sCiAgICAgICAgICAgIHNjcmF0Y2hQb2xhcgogICAgICAgICAgKTsKICAgICAgICAgIGV4cGFuZFJlY3RhbmdsZSgKICAgICAgICAgICAgcG9sYXJQb3NpdGlvbiwKICAgICAgICAgICAgbGFzdFBvbGFyUG9zaXRpb24sCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgYXJjVHlwZSwKICAgICAgICAgICAgcG9seWdvbiwKICAgICAgICAgICAgcmVzdWx0CiAgICAgICAgICApOwogICAgICAgICAgbGFzdFBvbGFyUG9zaXRpb24gPSBTdGVyZW9ncmFwaGljX2RlZmF1bHQuY2xvbmUocG9sYXJQb3NpdGlvbiwgbGFzdFBvbGFyUG9zaXRpb24pOwogICAgICAgIH0KICAgICAgICBleHBhbmRSZWN0YW5nbGUoCiAgICAgICAgICBTdGVyZW9ncmFwaGljX2RlZmF1bHQuZnJvbUNhcnRlc2lhbihwb3NpdGlvbnNbMF0sIHNjcmF0Y2hQb2xhciksCiAgICAgICAgICBsYXN0UG9sYXJQb3NpdGlvbiwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIGFyY1R5cGUsCiAgICAgICAgICBwb2x5Z29uLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgICBpZiAocmVzdWx0LmVhc3QgLSByZXN1bHQud2VzdCA+IHBvbHlnb24uZWFzdE92ZXJJZGwgLSBwb2x5Z29uLndlc3RPdmVySWRsKSB7CiAgICAgICAgICByZXN1bHQud2VzdCA9IHBvbHlnb24ud2VzdE92ZXJJZGw7CiAgICAgICAgICByZXN1bHQuZWFzdCA9IHBvbHlnb24uZWFzdE92ZXJJZGw7CiAgICAgICAgICBpZiAocmVzdWx0LmVhc3QgPiBNYXRoX2RlZmF1bHQuUEkpIHsKICAgICAgICAgICAgcmVzdWx0LmVhc3QgPSByZXN1bHQuZWFzdCAtIE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocmVzdWx0Lndlc3QgPiBNYXRoX2RlZmF1bHQuUEkpIHsKICAgICAgICAgICAgcmVzdWx0Lndlc3QgPSByZXN1bHQud2VzdCAtIE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIE1hdGguYWJzKHBvbHlnb24ubm9ydGhBbmdsZSksCiAgICAgICAgICBNYXRoX2RlZmF1bHQuVFdPX1BJLAogICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT04xMAogICAgICAgICkpIHsKICAgICAgICAgIHJlc3VsdC5ub3J0aCA9IE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTzsKICAgICAgICAgIHJlc3VsdC5lYXN0ID0gTWF0aF9kZWZhdWx0LlBJOwogICAgICAgICAgcmVzdWx0Lndlc3QgPSAtTWF0aF9kZWZhdWx0LlBJOwogICAgICAgIH0KICAgICAgICBpZiAoTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICBNYXRoLmFicyhwb2x5Z29uLnNvdXRoQW5nbGUpLAogICAgICAgICAgTWF0aF9kZWZhdWx0LlRXT19QSSwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTAKICAgICAgICApKSB7CiAgICAgICAgICByZXN1bHQuc291dGggPSAtTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPOwogICAgICAgICAgcmVzdWx0LmVhc3QgPSBNYXRoX2RlZmF1bHQuUEk7CiAgICAgICAgICByZXN1bHQud2VzdCA9IC1NYXRoX2RlZmF1bHQuUEk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFBvbHlnb25HZW9tZXRyeS5jb21wdXRlUmVjdGFuZ2xlID0gZnVuY3Rpb24ob3B0aW9ucywgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJvcHRpb25zIiwgb3B0aW9ucyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJvcHRpb25zLnBvbHlnb25IaWVyYXJjaHkiLCBvcHRpb25zLnBvbHlnb25IaWVyYXJjaHkpOwogICAgICAgIGRlcHJlY2F0aW9uV2FybmluZ19kZWZhdWx0KAogICAgICAgICAgIlBvbHlnb25HZW9tZXRyeS5jb21wdXRlUmVjdGFuZ2xlIiwKICAgICAgICAgICJQb2x5Z29uR2VvbWV0cnkuY29tcHV0ZVJlY3RhbmdsZSB3YXMgZGVwcmVjYXRlZCBpbiBDZXNpdW1KUyAxLjExMC4gIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiBDZXNpdW1KUyAxLjExMi4gVXNlIFBvbHlnb25HZW9tZXRyeS5jb21wdXRlUmVjdGFuZ2xlRnJvbVBvc2l0aW9ucyBpbnN0ZWFkLiIKICAgICAgICApOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgICAgICBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICAgICAgTWF0aF9kZWZhdWx0LlJBRElBTlNfUEVSX0RFR1JFRQogICAgICAgICk7CiAgICAgICAgY29uc3QgYXJjVHlwZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuYXJjVHlwZSwgQXJjVHlwZV9kZWZhdWx0LkdFT0RFU0lDKTsKICAgICAgICBpZiAoYXJjVHlwZSAhPT0gQXJjVHlwZV9kZWZhdWx0LkdFT0RFU0lDICYmIGFyY1R5cGUgIT09IEFyY1R5cGVfZGVmYXVsdC5SSFVNQikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJJbnZhbGlkIGFyY1R5cGUuIFZhbGlkIG9wdGlvbnMgYXJlIEFyY1R5cGUuR0VPREVTSUMgYW5kIEFyY1R5cGUuUkhVTUIuIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgcG9seWdvbkhpZXJhcmNoeSA9IG9wdGlvbnMucG9seWdvbkhpZXJhcmNoeTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuV0dTODQpOwogICAgICAgIHJldHVybiBjb21wdXRlUmVjdGFuZ2xlMygKICAgICAgICAgIHBvbHlnb25IaWVyYXJjaHkucG9zaXRpb25zLAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgYXJjVHlwZSwKICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgc2NyYXRjaFBvbGFyRm9yUGxhbmUgPSBuZXcgU3RlcmVvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNDeWxsaW5kcmljYWwgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgUG9seWdvbkdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24ocG9seWdvbkdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gcG9seWdvbkdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQ7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gcG9seWdvbkdlb21ldHJ5Ll9lbGxpcHNvaWQ7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBwb2x5Z29uR2VvbWV0cnkuX2dyYW51bGFyaXR5OwogICAgICAgIGNvbnN0IHN0Um90YXRpb24gPSBwb2x5Z29uR2VvbWV0cnkuX3N0Um90YXRpb247CiAgICAgICAgY29uc3QgcG9seWdvbkhpZXJhcmNoeSA9IHBvbHlnb25HZW9tZXRyeS5fcG9seWdvbkhpZXJhcmNoeTsKICAgICAgICBjb25zdCBwZXJQb3NpdGlvbkhlaWdodCA9IHBvbHlnb25HZW9tZXRyeS5fcGVyUG9zaXRpb25IZWlnaHQ7CiAgICAgICAgY29uc3QgY2xvc2VUb3AgPSBwb2x5Z29uR2VvbWV0cnkuX2Nsb3NlVG9wOwogICAgICAgIGNvbnN0IGNsb3NlQm90dG9tID0gcG9seWdvbkdlb21ldHJ5Ll9jbG9zZUJvdHRvbTsKICAgICAgICBjb25zdCBhcmNUeXBlID0gcG9seWdvbkdlb21ldHJ5Ll9hcmNUeXBlOwogICAgICAgIGNvbnN0IHRleHR1cmVDb29yZGluYXRlcyA9IHBvbHlnb25HZW9tZXRyeS5fdGV4dHVyZUNvb3JkaW5hdGVzOwogICAgICAgIGNvbnN0IGhhc1RleHR1cmVDb29yZGluYXRlcyA9IGRlZmluZWRfZGVmYXVsdCh0ZXh0dXJlQ29vcmRpbmF0ZXMpOwogICAgICAgIGNvbnN0IG91dGVyUG9zaXRpb25zID0gcG9seWdvbkhpZXJhcmNoeS5wb3NpdGlvbnM7CiAgICAgICAgaWYgKG91dGVyUG9zaXRpb25zLmxlbmd0aCA8IDMpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgcmVjdGFuZ2xlID0gcG9seWdvbkdlb21ldHJ5LnJlY3RhbmdsZTsKICAgICAgICBjb25zdCByZXN1bHRzID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnBvbHlnb25zRnJvbUhpZXJhcmNoeSgKICAgICAgICAgIHBvbHlnb25IaWVyYXJjaHksCiAgICAgICAgICBoYXNUZXh0dXJlQ29vcmRpbmF0ZXMsCiAgICAgICAgICBjcmVhdGVQcm9qZWN0VG8yZChyZWN0YW5nbGUsIG91dGVyUG9zaXRpb25zLCBlbGxpcHNvaWQpLAogICAgICAgICAgIXBlclBvc2l0aW9uSGVpZ2h0LAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgY3JlYXRlU3BsaXRQb2x5Z29ucyhyZWN0YW5nbGUsIGVsbGlwc29pZCwgYXJjVHlwZSwgcGVyUG9zaXRpb25IZWlnaHQpCiAgICAgICAgKTsKICAgICAgICBjb25zdCBoaWVyYXJjaHkgPSByZXN1bHRzLmhpZXJhcmNoeTsKICAgICAgICBjb25zdCBwb2x5Z29ucyA9IHJlc3VsdHMucG9seWdvbnM7CiAgICAgICAgY29uc3QgZHVtbXlGdW5jdGlvbiA9IGZ1bmN0aW9uKGlkZW50aXR5KSB7CiAgICAgICAgICByZXR1cm4gaWRlbnRpdHk7CiAgICAgICAgfTsKICAgICAgICBjb25zdCB0ZXh0dXJlQ29vcmRpbmF0ZVBvbHlnb25zID0gaGFzVGV4dHVyZUNvb3JkaW5hdGVzID8gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnBvbHlnb25zRnJvbUhpZXJhcmNoeSgKICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlcywKICAgICAgICAgIHRydWUsCiAgICAgICAgICBkdW1teUZ1bmN0aW9uLAogICAgICAgICAgZmFsc2UsCiAgICAgICAgICBlbGxpcHNvaWQKICAgICAgICApLnBvbHlnb25zIDogdm9pZCAwOwogICAgICAgIGlmIChoaWVyYXJjaHkubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IG91dGVyUmluZyA9IGhpZXJhcmNoeVswXS5vdXRlclJpbmc7CiAgICAgICAgY29uc3QgYm91bmRpbmdSZWN0YW5nbGUgPSBjb21wdXRlQm91bmRpbmdSZWN0YW5nbGUoCiAgICAgICAgICBvdXRlclJpbmcsCiAgICAgICAgICByZWN0YW5nbGUsCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBzdFJvdGF0aW9uCiAgICAgICAgKTsKICAgICAgICBjb25zdCBnZW9tZXRyaWVzID0gW107CiAgICAgICAgY29uc3QgaGVpZ2h0ID0gcG9seWdvbkdlb21ldHJ5Ll9oZWlnaHQ7CiAgICAgICAgY29uc3QgZXh0cnVkZWRIZWlnaHQgPSBwb2x5Z29uR2VvbWV0cnkuX2V4dHJ1ZGVkSGVpZ2h0OwogICAgICAgIGNvbnN0IGV4dHJ1ZGUgPSBwb2x5Z29uR2VvbWV0cnkuX3BlclBvc2l0aW9uSGVpZ2h0RXh0cnVkZSB8fCAhTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oaGVpZ2h0LCBleHRydWRlZEhlaWdodCwgMCwgTWF0aF9kZWZhdWx0LkVQU0lMT04yKTsKICAgICAgICBjb25zdCBvcHRpb25zID0gewogICAgICAgICAgcGVyUG9zaXRpb25IZWlnaHQsCiAgICAgICAgICB2ZXJ0ZXhGb3JtYXQsCiAgICAgICAgICBnZW9tZXRyeTogdm9pZCAwLAogICAgICAgICAgcm90YXRpb25BeGlzOiBnZXRUYW5nZW50UGxhbmUocmVjdGFuZ2xlLCBvdXRlclJpbmcsIGVsbGlwc29pZCkucGxhbmUubm9ybWFsLAogICAgICAgICAgcHJvamVjdFRvMmQ6IGNyZWF0ZVByb2plY3RQb3NpdGlvblRvMmQocmVjdGFuZ2xlLCBvdXRlclJpbmcsIGVsbGlwc29pZCksCiAgICAgICAgICBib3VuZGluZ1JlY3RhbmdsZSwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHN0Um90YXRpb24sCiAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXM6IHZvaWQgMCwKICAgICAgICAgIGJvdHRvbTogZmFsc2UsCiAgICAgICAgICB0b3A6IHRydWUsCiAgICAgICAgICB3YWxsOiBmYWxzZSwKICAgICAgICAgIGV4dHJ1ZGU6IGZhbHNlLAogICAgICAgICAgYXJjVHlwZQogICAgICAgIH07CiAgICAgICAgbGV0IGk7CiAgICAgICAgaWYgKGV4dHJ1ZGUpIHsKICAgICAgICAgIG9wdGlvbnMuZXh0cnVkZSA9IHRydWU7CiAgICAgICAgICBvcHRpb25zLnRvcCA9IGNsb3NlVG9wOwogICAgICAgICAgb3B0aW9ucy5ib3R0b20gPSBjbG9zZUJvdHRvbTsKICAgICAgICAgIG9wdGlvbnMuc2hhZG93Vm9sdW1lID0gcG9seWdvbkdlb21ldHJ5Ll9zaGFkb3dWb2x1bWU7CiAgICAgICAgICBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSA9IHBvbHlnb25HZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBvbHlnb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IHNwbGl0R2VvbWV0cnkgPSBjcmVhdGVHZW9tZXRyeUZyb21Qb3NpdGlvbnNFeHRydWRlZCgKICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgcG9seWdvbnNbaV0sCiAgICAgICAgICAgICAgaGFzVGV4dHVyZUNvb3JkaW5hdGVzID8gdGV4dHVyZUNvb3JkaW5hdGVQb2x5Z29uc1tpXSA6IHZvaWQgMCwKICAgICAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgICAgICBoaWVyYXJjaHlbaV0sCiAgICAgICAgICAgICAgcGVyUG9zaXRpb25IZWlnaHQsCiAgICAgICAgICAgICAgY2xvc2VUb3AsCiAgICAgICAgICAgICAgY2xvc2VCb3R0b20sCiAgICAgICAgICAgICAgdmVydGV4Rm9ybWF0LAogICAgICAgICAgICAgIGFyY1R5cGUKICAgICAgICAgICAgKTsKICAgICAgICAgICAgbGV0IHRvcEFuZEJvdHRvbTsKICAgICAgICAgICAgaWYgKGNsb3NlVG9wICYmIGNsb3NlQm90dG9tKSB7CiAgICAgICAgICAgICAgdG9wQW5kQm90dG9tID0gc3BsaXRHZW9tZXRyeS50b3BBbmRCb3R0b207CiAgICAgICAgICAgICAgb3B0aW9ucy5nZW9tZXRyeSA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5zY2FsZVRvR2VvZGV0aWNIZWlnaHRFeHRydWRlZCgKICAgICAgICAgICAgICAgIHRvcEFuZEJvdHRvbS5nZW9tZXRyeSwKICAgICAgICAgICAgICAgIGhlaWdodCwKICAgICAgICAgICAgICAgIGV4dHJ1ZGVkSGVpZ2h0LAogICAgICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICAgICAgcGVyUG9zaXRpb25IZWlnaHQKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9IGVsc2UgaWYgKGNsb3NlVG9wKSB7CiAgICAgICAgICAgICAgdG9wQW5kQm90dG9tID0gc3BsaXRHZW9tZXRyeS50b3BBbmRCb3R0b207CiAgICAgICAgICAgICAgdG9wQW5kQm90dG9tLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzID0gUG9seWdvblBpcGVsaW5lX2RlZmF1bHQuc2NhbGVUb0dlb2RldGljSGVpZ2h0KAogICAgICAgICAgICAgICAgdG9wQW5kQm90dG9tLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLAogICAgICAgICAgICAgICAgaGVpZ2h0LAogICAgICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICAgICAgIXBlclBvc2l0aW9uSGVpZ2h0CiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBvcHRpb25zLmdlb21ldHJ5ID0gdG9wQW5kQm90dG9tLmdlb21ldHJ5OwogICAgICAgICAgICB9IGVsc2UgaWYgKGNsb3NlQm90dG9tKSB7CiAgICAgICAgICAgICAgdG9wQW5kQm90dG9tID0gc3BsaXRHZW9tZXRyeS50b3BBbmRCb3R0b207CiAgICAgICAgICAgICAgdG9wQW5kQm90dG9tLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzID0gUG9seWdvblBpcGVsaW5lX2RlZmF1bHQuc2NhbGVUb0dlb2RldGljSGVpZ2h0KAogICAgICAgICAgICAgICAgdG9wQW5kQm90dG9tLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLAogICAgICAgICAgICAgICAgZXh0cnVkZWRIZWlnaHQsCiAgICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgICB0cnVlCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBvcHRpb25zLmdlb21ldHJ5ID0gdG9wQW5kQm90dG9tLmdlb21ldHJ5OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjbG9zZVRvcCB8fCBjbG9zZUJvdHRvbSkgewogICAgICAgICAgICAgIG9wdGlvbnMud2FsbCA9IGZhbHNlOwogICAgICAgICAgICAgIHRvcEFuZEJvdHRvbS5nZW9tZXRyeSA9IGNvbXB1dGVBdHRyaWJ1dGVzKG9wdGlvbnMpOwogICAgICAgICAgICAgIGdlb21ldHJpZXMucHVzaCh0b3BBbmRCb3R0b20pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IHdhbGxzID0gc3BsaXRHZW9tZXRyeS53YWxsczsKICAgICAgICAgICAgb3B0aW9ucy53YWxsID0gdHJ1ZTsKICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCB3YWxscy5sZW5ndGg7IGsrKykgewogICAgICAgICAgICAgIGNvbnN0IHdhbGwgPSB3YWxsc1trXTsKICAgICAgICAgICAgICBvcHRpb25zLmdlb21ldHJ5ID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodEV4dHJ1ZGVkKAogICAgICAgICAgICAgICAgd2FsbC5nZW9tZXRyeSwKICAgICAgICAgICAgICAgIGhlaWdodCwKICAgICAgICAgICAgICAgIGV4dHJ1ZGVkSGVpZ2h0LAogICAgICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICAgICAgcGVyUG9zaXRpb25IZWlnaHQKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIHdhbGwuZ2VvbWV0cnkgPSBjb21wdXRlQXR0cmlidXRlcyhvcHRpb25zKTsKICAgICAgICAgICAgICBnZW9tZXRyaWVzLnB1c2god2FsbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBvbHlnb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IGdlb21ldHJ5SW5zdGFuY2UgPSBuZXcgR2VvbWV0cnlJbnN0YW5jZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBnZW9tZXRyeTogUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9ucygKICAgICAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgICAgIHBvbHlnb25zW2ldLAogICAgICAgICAgICAgICAgaGFzVGV4dHVyZUNvb3JkaW5hdGVzID8gdGV4dHVyZUNvb3JkaW5hdGVQb2x5Z29uc1tpXSA6IHZvaWQgMCwKICAgICAgICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgICAgICAgcGVyUG9zaXRpb25IZWlnaHQsCiAgICAgICAgICAgICAgICB2ZXJ0ZXhGb3JtYXQsCiAgICAgICAgICAgICAgICBhcmNUeXBlCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZ2VvbWV0cnlJbnN0YW5jZS5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodCgKICAgICAgICAgICAgICBnZW9tZXRyeUluc3RhbmNlLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLAogICAgICAgICAgICAgIGhlaWdodCwKICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgIXBlclBvc2l0aW9uSGVpZ2h0CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIG9wdGlvbnMuZ2VvbWV0cnkgPSBnZW9tZXRyeUluc3RhbmNlLmdlb21ldHJ5OwogICAgICAgICAgICBnZW9tZXRyeUluc3RhbmNlLmdlb21ldHJ5ID0gY29tcHV0ZUF0dHJpYnV0ZXMob3B0aW9ucyk7CiAgICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQocG9seWdvbkdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUpKSB7CiAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gZ2VvbWV0cnlJbnN0YW5jZS5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGg7CiAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0VmFsdWUgPSBwb2x5Z29uR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5OT05FID8gMCA6IDE7CiAgICAgICAgICAgICAgY29uc3QgYXBwbHlPZmZzZXQgPSBuZXcgVWludDhBcnJheShsZW5ndGggLyAzKS5maWxsKG9mZnNldFZhbHVlKTsKICAgICAgICAgICAgICBnZW9tZXRyeUluc3RhbmNlLmdlb21ldHJ5LmF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCgKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICAgICAgICAgICAgdmFsdWVzOiBhcHBseU9mZnNldAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZ2VvbWV0cmllcy5wdXNoKGdlb21ldHJ5SW5zdGFuY2UpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCBnZW9tZXRyeSA9IEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5jb21iaW5lSW5zdGFuY2VzKGdlb21ldHJpZXMpWzBdOwogICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzID0gbmV3IEZsb2F0NjRBcnJheSgKICAgICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzCiAgICAgICAgKTsKICAgICAgICBnZW9tZXRyeS5pbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGggLyAzLAogICAgICAgICAgZ2VvbWV0cnkuaW5kaWNlcwogICAgICAgICk7CiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICAgICAgY29uc3QgYm91bmRpbmdTcGhlcmUgPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmZyb21WZXJ0aWNlcygKICAgICAgICAgIGF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzCiAgICAgICAgKTsKICAgICAgICBpZiAoIXZlcnRleEZvcm1hdC5wb3NpdGlvbikgewogICAgICAgICAgZGVsZXRlIGF0dHJpYnV0ZXMucG9zaXRpb247CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgICBhdHRyaWJ1dGVzLAogICAgICAgICAgaW5kaWNlczogZ2VvbWV0cnkuaW5kaWNlcywKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZSwKICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZTogcG9seWdvbkdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgUG9seWdvbkdlb21ldHJ5LmNyZWF0ZVNoYWRvd1ZvbHVtZSA9IGZ1bmN0aW9uKHBvbHlnb25HZW9tZXRyeSwgbWluSGVpZ2h0RnVuYywgbWF4SGVpZ2h0RnVuYykgewogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gcG9seWdvbkdlb21ldHJ5Ll9ncmFudWxhcml0eTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBwb2x5Z29uR2VvbWV0cnkuX2VsbGlwc29pZDsKICAgICAgICBjb25zdCBtaW5IZWlnaHQgPSBtaW5IZWlnaHRGdW5jKGdyYW51bGFyaXR5LCBlbGxpcHNvaWQpOwogICAgICAgIGNvbnN0IG1heEhlaWdodCA9IG1heEhlaWdodEZ1bmMoZ3JhbnVsYXJpdHksIGVsbGlwc29pZCk7CiAgICAgICAgcmV0dXJuIG5ldyBQb2x5Z29uR2VvbWV0cnkoewogICAgICAgICAgcG9seWdvbkhpZXJhcmNoeTogcG9seWdvbkdlb21ldHJ5Ll9wb2x5Z29uSGllcmFyY2h5LAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgc3RSb3RhdGlvbjogcG9seWdvbkdlb21ldHJ5Ll9zdFJvdGF0aW9uLAogICAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgICBwZXJQb3NpdGlvbkhlaWdodDogZmFsc2UsCiAgICAgICAgICBleHRydWRlZEhlaWdodDogbWluSGVpZ2h0LAogICAgICAgICAgaGVpZ2h0OiBtYXhIZWlnaHQsCiAgICAgICAgICB2ZXJ0ZXhGb3JtYXQ6IFZlcnRleEZvcm1hdF9kZWZhdWx0LlBPU0lUSU9OX09OTFksCiAgICAgICAgICBzaGFkb3dWb2x1bWU6IHRydWUsCiAgICAgICAgICBhcmNUeXBlOiBwb2x5Z29uR2VvbWV0cnkuX2FyY1R5cGUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUG9seWdvbkdlb21ldHJ5LnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICovCiAgICAgICAgcmVjdGFuZ2xlOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh0aGlzLl9yZWN0YW5nbGUpKSB7CiAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb25zID0gdGhpcy5fcG9seWdvbkhpZXJhcmNoeS5wb3NpdGlvbnM7CiAgICAgICAgICAgICAgdGhpcy5fcmVjdGFuZ2xlID0gUG9seWdvbkdlb21ldHJ5LmNvbXB1dGVSZWN0YW5nbGVGcm9tUG9zaXRpb25zKAogICAgICAgICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgICAgICAgdGhpcy5fZWxsaXBzb2lkLAogICAgICAgICAgICAgICAgdGhpcy5fYXJjVHlwZQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY3RhbmdsZTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEZvciByZW1hcHBpbmcgdGV4dHVyZSBjb29yZGluYXRlcyB3aGVuIHJlbmRlcmluZyBQb2x5Z29uR2VvbWV0cmllcyBhcyBHcm91bmRQcmltaXRpdmVzLgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICovCiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVSb3RhdGlvblBvaW50czogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodGhpcy5fdGV4dHVyZUNvb3JkaW5hdGVSb3RhdGlvblBvaW50cykpIHsKICAgICAgICAgICAgICB0aGlzLl90ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzID0gdGV4dHVyZUNvb3JkaW5hdGVSb3RhdGlvblBvaW50czIoCiAgICAgICAgICAgICAgICB0aGlzCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5fdGV4dHVyZUNvb3JkaW5hdGVSb3RhdGlvblBvaW50czsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBQb2x5Z29uR2VvbWV0cnlfZGVmYXVsdCA9IFBvbHlnb25HZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVBvbHlnb25HZW9tZXRyeS5qcwogIHZhciBjcmVhdGVQb2x5Z29uR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZVBvbHlnb25HZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVQb2x5Z29uR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZVBvbHlnb25HZW9tZXRyeShwb2x5Z29uR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIHBvbHlnb25HZW9tZXRyeSA9IFBvbHlnb25HZW9tZXRyeV9kZWZhdWx0LnVucGFjayhwb2x5Z29uR2VvbWV0cnksIG9mZnNldCk7CiAgICB9CiAgICBwb2x5Z29uR2VvbWV0cnkuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKHBvbHlnb25HZW9tZXRyeS5fZWxsaXBzb2lkKTsKICAgIHJldHVybiBQb2x5Z29uR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShwb2x5Z29uR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlUG9seWdvbkdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlUG9seWdvbkdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVQb2x5Z29uR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9Qb2x5Z29uR2VvbWV0cnkoKTsKICAgICAgY3JlYXRlUG9seWdvbkdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVQb2x5Z29uR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Qb2x5Z29uT3V0bGluZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zMihlbGxpcHNvaWQsIHBvc2l0aW9ucywgbWluRGlzdGFuY2UsIHBlclBvc2l0aW9uSGVpZ2h0LCBhcmNUeXBlKSB7CiAgICBjb25zdCB0YW5nZW50UGxhbmUgPSBFbGxpcHNvaWRUYW5nZW50UGxhbmVfZGVmYXVsdC5mcm9tUG9pbnRzKHBvc2l0aW9ucywgZWxsaXBzb2lkKTsKICAgIGNvbnN0IHBvc2l0aW9uczJEID0gdGFuZ2VudFBsYW5lLnByb2plY3RQb2ludHNPbnRvUGxhbmUoCiAgICAgIHBvc2l0aW9ucywKICAgICAgY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zUG9zaXRpb25zCiAgICApOwogICAgY29uc3Qgb3JpZ2luYWxXaW5kaW5nT3JkZXIgPSBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdC5jb21wdXRlV2luZGluZ09yZGVyMkQoCiAgICAgIHBvc2l0aW9uczJECiAgICApOwogICAgaWYgKG9yaWdpbmFsV2luZGluZ09yZGVyID09PSBXaW5kaW5nT3JkZXJfZGVmYXVsdC5DTE9DS1dJU0UpIHsKICAgICAgcG9zaXRpb25zMkQucmV2ZXJzZSgpOwogICAgICBwb3NpdGlvbnMgPSBwb3NpdGlvbnMuc2xpY2UoKS5yZXZlcnNlKCk7CiAgICB9CiAgICBsZXQgc3ViZGl2aWRlZFBvc2l0aW9uczsKICAgIGxldCBpOwogICAgbGV0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICBsZXQgaW5kZXggPSAwOwogICAgaWYgKCFwZXJQb3NpdGlvbkhlaWdodCkgewogICAgICBsZXQgbnVtVmVydGljZXMgPSAwOwogICAgICBpZiAoYXJjVHlwZSA9PT0gQXJjVHlwZV9kZWZhdWx0LkdFT0RFU0lDKSB7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBudW1WZXJ0aWNlcyArPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuc3ViZGl2aWRlTGluZUNvdW50KAogICAgICAgICAgICBwb3NpdGlvbnNbaV0sCiAgICAgICAgICAgIHBvc2l0aW9uc1soaSArIDEpICUgbGVuZ3RoXSwKICAgICAgICAgICAgbWluRGlzdGFuY2UKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5SSFVNQikgewogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgbnVtVmVydGljZXMgKz0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnN1YmRpdmlkZVJodW1iTGluZUNvdW50KAogICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgIHBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgcG9zaXRpb25zWyhpICsgMSkgJSBsZW5ndGhdLAogICAgICAgICAgICBtaW5EaXN0YW5jZQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgc3ViZGl2aWRlZFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkobnVtVmVydGljZXMgKiAzKTsKICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgbGV0IHRlbXBQb3NpdGlvbnM7CiAgICAgICAgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQykgewogICAgICAgICAgdGVtcFBvc2l0aW9ucyA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5zdWJkaXZpZGVMaW5lKAogICAgICAgICAgICBwb3NpdGlvbnNbaV0sCiAgICAgICAgICAgIHBvc2l0aW9uc1soaSArIDEpICUgbGVuZ3RoXSwKICAgICAgICAgICAgbWluRGlzdGFuY2UsCiAgICAgICAgICAgIGNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9uc1N1YmRpdmlkZWQKICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIGlmIChhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuUkhVTUIpIHsKICAgICAgICAgIHRlbXBQb3NpdGlvbnMgPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuc3ViZGl2aWRlUmh1bWJMaW5lKAogICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgIHBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgcG9zaXRpb25zWyhpICsgMSkgJSBsZW5ndGhdLAogICAgICAgICAgICBtaW5EaXN0YW5jZSwKICAgICAgICAgICAgY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zU3ViZGl2aWRlZAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgdGVtcFBvc2l0aW9uc0xlbmd0aCA9IHRlbXBQb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGVtcFBvc2l0aW9uc0xlbmd0aDsgKytqKSB7CiAgICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zW2luZGV4KytdID0gdGVtcFBvc2l0aW9uc1tqXTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KGxlbmd0aCAqIDIgKiAzKTsKICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgY29uc3QgcDAgPSBwb3NpdGlvbnNbaV07CiAgICAgICAgY29uc3QgcDEgPSBwb3NpdGlvbnNbKGkgKyAxKSAlIGxlbmd0aF07CiAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1tpbmRleCsrXSA9IHAwLng7CiAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1tpbmRleCsrXSA9IHAwLnk7CiAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1tpbmRleCsrXSA9IHAwLno7CiAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1tpbmRleCsrXSA9IHAxLng7CiAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1tpbmRleCsrXSA9IHAxLnk7CiAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1tpbmRleCsrXSA9IHAxLno7CiAgICAgIH0KICAgIH0KICAgIGxlbmd0aCA9IHN1YmRpdmlkZWRQb3NpdGlvbnMubGVuZ3RoIC8gMzsKICAgIGNvbnN0IGluZGljZXNTaXplID0gbGVuZ3RoICogMjsKICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShsZW5ndGgsIGluZGljZXNTaXplKTsKICAgIGluZGV4ID0gMDsKICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGggLSAxOyBpKyspIHsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGk7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpICsgMTsKICAgIH0KICAgIGluZGljZXNbaW5kZXgrK10gPSBsZW5ndGggLSAxOwogICAgaW5kaWNlc1tpbmRleCsrXSA9IDA7CiAgICByZXR1cm4gbmV3IEdlb21ldHJ5SW5zdGFuY2VfZGVmYXVsdCh7CiAgICAgIGdlb21ldHJ5OiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgYXR0cmlidXRlczogbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KHsKICAgICAgICAgIHBvc2l0aW9uOiBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgdmFsdWVzOiBzdWJkaXZpZGVkUG9zaXRpb25zCiAgICAgICAgICB9KQogICAgICAgIH0pLAogICAgICAgIGluZGljZXMsCiAgICAgICAgcHJpbWl0aXZlVHlwZTogUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVTCiAgICAgIH0pCiAgICB9KTsKICB9CiAgZnVuY3Rpb24gY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zRXh0cnVkZWQyKGVsbGlwc29pZCwgcG9zaXRpb25zLCBtaW5EaXN0YW5jZSwgcGVyUG9zaXRpb25IZWlnaHQsIGFyY1R5cGUpIHsKICAgIGNvbnN0IHRhbmdlbnRQbGFuZSA9IEVsbGlwc29pZFRhbmdlbnRQbGFuZV9kZWZhdWx0LmZyb21Qb2ludHMocG9zaXRpb25zLCBlbGxpcHNvaWQpOwogICAgY29uc3QgcG9zaXRpb25zMkQgPSB0YW5nZW50UGxhbmUucHJvamVjdFBvaW50c09udG9QbGFuZSgKICAgICAgcG9zaXRpb25zLAogICAgICBjcmVhdGVHZW9tZXRyeUZyb21Qb3NpdGlvbnNQb3NpdGlvbnMKICAgICk7CiAgICBjb25zdCBvcmlnaW5hbFdpbmRpbmdPcmRlciA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LmNvbXB1dGVXaW5kaW5nT3JkZXIyRCgKICAgICAgcG9zaXRpb25zMkQKICAgICk7CiAgICBpZiAob3JpZ2luYWxXaW5kaW5nT3JkZXIgPT09IFdpbmRpbmdPcmRlcl9kZWZhdWx0LkNMT0NLV0lTRSkgewogICAgICBwb3NpdGlvbnMyRC5yZXZlcnNlKCk7CiAgICAgIHBvc2l0aW9ucyA9IHBvc2l0aW9ucy5zbGljZSgpLnJldmVyc2UoKTsKICAgIH0KICAgIGxldCBzdWJkaXZpZGVkUG9zaXRpb25zOwogICAgbGV0IGk7CiAgICBsZXQgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgIGNvbnN0IGNvcm5lcnMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgIGxldCBpbmRleCA9IDA7CiAgICBpZiAoIXBlclBvc2l0aW9uSGVpZ2h0KSB7CiAgICAgIGxldCBudW1WZXJ0aWNlcyA9IDA7CiAgICAgIGlmIChhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuR0VPREVTSUMpIHsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgIG51bVZlcnRpY2VzICs9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5zdWJkaXZpZGVMaW5lQ291bnQoCiAgICAgICAgICAgIHBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgcG9zaXRpb25zWyhpICsgMSkgJSBsZW5ndGhdLAogICAgICAgICAgICBtaW5EaXN0YW5jZQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoYXJjVHlwZSA9PT0gQXJjVHlwZV9kZWZhdWx0LlJIVU1CKSB7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBudW1WZXJ0aWNlcyArPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuc3ViZGl2aWRlUmh1bWJMaW5lQ291bnQoCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgcG9zaXRpb25zW2ldLAogICAgICAgICAgICBwb3NpdGlvbnNbKGkgKyAxKSAlIGxlbmd0aF0sCiAgICAgICAgICAgIG1pbkRpc3RhbmNlCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfQogICAgICBzdWJkaXZpZGVkUG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShudW1WZXJ0aWNlcyAqIDMgKiAyKTsKICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgY29ybmVyc1tpXSA9IGluZGV4IC8gMzsKICAgICAgICBsZXQgdGVtcFBvc2l0aW9uczsKICAgICAgICBpZiAoYXJjVHlwZSA9PT0gQXJjVHlwZV9kZWZhdWx0LkdFT0RFU0lDKSB7CiAgICAgICAgICB0ZW1wUG9zaXRpb25zID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnN1YmRpdmlkZUxpbmUoCiAgICAgICAgICAgIHBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgcG9zaXRpb25zWyhpICsgMSkgJSBsZW5ndGhdLAogICAgICAgICAgICBtaW5EaXN0YW5jZSwKICAgICAgICAgICAgY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zU3ViZGl2aWRlZAogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5SSFVNQikgewogICAgICAgICAgdGVtcFBvc2l0aW9ucyA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5zdWJkaXZpZGVSaHVtYkxpbmUoCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgcG9zaXRpb25zW2ldLAogICAgICAgICAgICBwb3NpdGlvbnNbKGkgKyAxKSAlIGxlbmd0aF0sCiAgICAgICAgICAgIG1pbkRpc3RhbmNlLAogICAgICAgICAgICBjcmVhdGVHZW9tZXRyeUZyb21Qb3NpdGlvbnNTdWJkaXZpZGVkCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCB0ZW1wUG9zaXRpb25zTGVuZ3RoID0gdGVtcFBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0ZW1wUG9zaXRpb25zTGVuZ3RoOyArK2opIHsKICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnNbaW5kZXgrK10gPSB0ZW1wUG9zaXRpb25zW2pdOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgc3ViZGl2aWRlZFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkobGVuZ3RoICogMiAqIDMgKiAyKTsKICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgY29ybmVyc1tpXSA9IGluZGV4IC8gMzsKICAgICAgICBjb25zdCBwMCA9IHBvc2l0aW9uc1tpXTsKICAgICAgICBjb25zdCBwMSA9IHBvc2l0aW9uc1soaSArIDEpICUgbGVuZ3RoXTsKICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zW2luZGV4KytdID0gcDAueDsKICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zW2luZGV4KytdID0gcDAueTsKICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zW2luZGV4KytdID0gcDAuejsKICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zW2luZGV4KytdID0gcDEueDsKICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zW2luZGV4KytdID0gcDEueTsKICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zW2luZGV4KytdID0gcDEuejsKICAgICAgfQogICAgfQogICAgbGVuZ3RoID0gc3ViZGl2aWRlZFBvc2l0aW9ucy5sZW5ndGggLyAoMyAqIDIpOwogICAgY29uc3QgY29ybmVyc0xlbmd0aCA9IGNvcm5lcnMubGVuZ3RoOwogICAgY29uc3QgaW5kaWNlc1NpemUgPSAobGVuZ3RoICogMiArIGNvcm5lcnNMZW5ndGgpICogMjsKICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgbGVuZ3RoICsgY29ybmVyc0xlbmd0aCwKICAgICAgaW5kaWNlc1NpemUKICAgICk7CiAgICBpbmRleCA9IDA7CiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGk7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSAoaSArIDEpICUgbGVuZ3RoOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gaSArIGxlbmd0aDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IChpICsgMSkgJSBsZW5ndGggKyBsZW5ndGg7CiAgICB9CiAgICBmb3IgKGkgPSAwOyBpIDwgY29ybmVyc0xlbmd0aDsgaSsrKSB7CiAgICAgIGNvbnN0IGNvcm5lciA9IGNvcm5lcnNbaV07CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBjb3JuZXI7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBjb3JuZXIgKyBsZW5ndGg7CiAgICB9CiAgICByZXR1cm4gbmV3IEdlb21ldHJ5SW5zdGFuY2VfZGVmYXVsdCh7CiAgICAgIGdlb21ldHJ5OiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgYXR0cmlidXRlczogbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KHsKICAgICAgICAgIHBvc2l0aW9uOiBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgdmFsdWVzOiBzdWJkaXZpZGVkUG9zaXRpb25zCiAgICAgICAgICB9KQogICAgICAgIH0pLAogICAgICAgIGluZGljZXMsCiAgICAgICAgcHJpbWl0aXZlVHlwZTogUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVTCiAgICAgIH0pCiAgICB9KTsKICB9CiAgZnVuY3Rpb24gUG9seWdvbk91dGxpbmVHZW9tZXRyeShvcHRpb25zKSB7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm9wdGlvbnMiLCBvcHRpb25zKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgib3B0aW9ucy5wb2x5Z29uSGllcmFyY2h5Iiwgb3B0aW9ucy5wb2x5Z29uSGllcmFyY2h5KTsKICAgIGlmIChvcHRpb25zLnBlclBvc2l0aW9uSGVpZ2h0ICYmIGRlZmluZWRfZGVmYXVsdChvcHRpb25zLmhlaWdodCkpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIkNhbm5vdCB1c2UgYm90aCBvcHRpb25zLnBlclBvc2l0aW9uSGVpZ2h0IGFuZCBvcHRpb25zLmhlaWdodCIKICAgICAgKTsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5hcmNUeXBlKSAmJiBvcHRpb25zLmFyY1R5cGUgIT09IEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQyAmJiBvcHRpb25zLmFyY1R5cGUgIT09IEFyY1R5cGVfZGVmYXVsdC5SSFVNQikgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAiSW52YWxpZCBhcmNUeXBlLiBWYWxpZCBvcHRpb25zIGFyZSBBcmNUeXBlLkdFT0RFU0lDIGFuZCBBcmNUeXBlLlJIVU1CLiIKICAgICAgKTsKICAgIH0KICAgIGNvbnN0IHBvbHlnb25IaWVyYXJjaHkgPSBvcHRpb25zLnBvbHlnb25IaWVyYXJjaHk7CiAgICBjb25zdCBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuV0dTODQpOwogICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgb3B0aW9ucy5ncmFudWxhcml0eSwKICAgICAgTWF0aF9kZWZhdWx0LlJBRElBTlNfUEVSX0RFR1JFRQogICAgKTsKICAgIGNvbnN0IHBlclBvc2l0aW9uSGVpZ2h0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5wZXJQb3NpdGlvbkhlaWdodCwgZmFsc2UpOwogICAgY29uc3QgcGVyUG9zaXRpb25IZWlnaHRFeHRydWRlID0gcGVyUG9zaXRpb25IZWlnaHQgJiYgZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMuZXh0cnVkZWRIZWlnaHQpOwogICAgY29uc3QgYXJjVHlwZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuYXJjVHlwZSwgQXJjVHlwZV9kZWZhdWx0LkdFT0RFU0lDKTsKICAgIGxldCBoZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmhlaWdodCwgMCk7CiAgICBsZXQgZXh0cnVkZWRIZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmV4dHJ1ZGVkSGVpZ2h0LCBoZWlnaHQpOwogICAgaWYgKCFwZXJQb3NpdGlvbkhlaWdodEV4dHJ1ZGUpIHsKICAgICAgY29uc3QgaCA9IE1hdGgubWF4KGhlaWdodCwgZXh0cnVkZWRIZWlnaHQpOwogICAgICBleHRydWRlZEhlaWdodCA9IE1hdGgubWluKGhlaWdodCwgZXh0cnVkZWRIZWlnaHQpOwogICAgICBoZWlnaHQgPSBoOwogICAgfQogICAgdGhpcy5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkKTsKICAgIHRoaXMuX2dyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7CiAgICB0aGlzLl9leHRydWRlZEhlaWdodCA9IGV4dHJ1ZGVkSGVpZ2h0OwogICAgdGhpcy5fYXJjVHlwZSA9IGFyY1R5cGU7CiAgICB0aGlzLl9wb2x5Z29uSGllcmFyY2h5ID0gcG9seWdvbkhpZXJhcmNoeTsKICAgIHRoaXMuX3BlclBvc2l0aW9uSGVpZ2h0ID0gcGVyUG9zaXRpb25IZWlnaHQ7CiAgICB0aGlzLl9wZXJQb3NpdGlvbkhlaWdodEV4dHJ1ZGUgPSBwZXJQb3NpdGlvbkhlaWdodEV4dHJ1ZGU7CiAgICB0aGlzLl9vZmZzZXRBdHRyaWJ1dGUgPSBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlUG9seWdvbk91dGxpbmVHZW9tZXRyeSI7CiAgICB0aGlzLnBhY2tlZExlbmd0aCA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlSGllcmFyY2h5UGFja2VkTGVuZ3RoKAogICAgICBwb2x5Z29uSGllcmFyY2h5LAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQKICAgICkgKyBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyA4OwogIH0KICB2YXIgY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zUG9zaXRpb25zLCBjcmVhdGVHZW9tZXRyeUZyb21Qb3NpdGlvbnNTdWJkaXZpZGVkLCBzY3JhdGNoRWxsaXBzb2lkNywgZHVtbXlPcHRpb25zMiwgUG9seWdvbk91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X1BvbHlnb25PdXRsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BvbHlnb25PdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0FyY1R5cGUoKTsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkVGFuZ2VudFBsYW5lKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X0dlb21ldHJ5SW5zdGFuY2UoKTsKICAgICAgaW5pdF9HZW9tZXRyeU9mZnNldEF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5UGlwZWxpbmUoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X1BvbHlnb25HZW9tZXRyeUxpYnJhcnkoKTsKICAgICAgaW5pdF9Qb2x5Z29uUGlwZWxpbmUoKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIGluaXRfV2luZGluZ09yZGVyKCk7CiAgICAgIGNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9uc1Bvc2l0aW9ucyA9IFtdOwogICAgICBjcmVhdGVHZW9tZXRyeUZyb21Qb3NpdGlvbnNTdWJkaXZpZGVkID0gW107CiAgICAgIFBvbHlnb25PdXRsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5wYWNrUG9seWdvbkhpZXJhcmNoeSgKICAgICAgICAgIHZhbHVlLl9wb2x5Z29uSGllcmFyY2h5LAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0CiAgICAgICAgKTsKICAgICAgICBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrKHZhbHVlLl9lbGxpcHNvaWQsIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2hlaWdodDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2V4dHJ1ZGVkSGVpZ2h0OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fZ3JhbnVsYXJpdHk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9wZXJQb3NpdGlvbkhlaWdodEV4dHJ1ZGUgPyAxIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3BlclBvc2l0aW9uSGVpZ2h0ID8gMSA6IDA7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9hcmNUeXBlOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh2YWx1ZS5fb2Zmc2V0QXR0cmlidXRlLCAtMSk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSB2YWx1ZS5wYWNrZWRMZW5ndGg7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBzY3JhdGNoRWxsaXBzb2lkNyA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKEVsbGlwc29pZF9kZWZhdWx0LlVOSVRfU1BIRVJFKTsKICAgICAgZHVtbXlPcHRpb25zMiA9IHsKICAgICAgICBwb2x5Z29uSGllcmFyY2h5OiB7fQogICAgICB9OwogICAgICBQb2x5Z29uT3V0bGluZUdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCBwb2x5Z29uSGllcmFyY2h5ID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnVucGFja1BvbHlnb25IaWVyYXJjaHkoCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQKICAgICAgICApOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBwb2x5Z29uSGllcmFyY2h5LnN0YXJ0aW5nSW5kZXg7CiAgICAgICAgZGVsZXRlIHBvbHlnb25IaWVyYXJjaHkuc3RhcnRpbmdJbmRleDsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hFbGxpcHNvaWQ3KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBoZWlnaHQgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgcGVyUG9zaXRpb25IZWlnaHRFeHRydWRlID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9PT0gMTsKICAgICAgICBjb25zdCBwZXJQb3NpdGlvbkhlaWdodCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPT09IDE7CiAgICAgICAgY29uc3QgYXJjVHlwZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgb2Zmc2V0QXR0cmlidXRlID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBwYWNrZWRMZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgUG9seWdvbk91dGxpbmVHZW9tZXRyeShkdW1teU9wdGlvbnMyKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Ll9wb2x5Z29uSGllcmFyY2h5ID0gcG9seWdvbkhpZXJhcmNoeTsKICAgICAgICByZXN1bHQuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKGVsbGlwc29pZCwgcmVzdWx0Ll9lbGxpcHNvaWQpOwogICAgICAgIHJlc3VsdC5faGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgIHJlc3VsdC5fZXh0cnVkZWRIZWlnaHQgPSBleHRydWRlZEhlaWdodDsKICAgICAgICByZXN1bHQuX2dyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICAgICAgcmVzdWx0Ll9wZXJQb3NpdGlvbkhlaWdodCA9IHBlclBvc2l0aW9uSGVpZ2h0OwogICAgICAgIHJlc3VsdC5fcGVyUG9zaXRpb25IZWlnaHRFeHRydWRlID0gcGVyUG9zaXRpb25IZWlnaHRFeHRydWRlOwogICAgICAgIHJlc3VsdC5fYXJjVHlwZSA9IGFyY1R5cGU7CiAgICAgICAgcmVzdWx0Ll9vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgIHJlc3VsdC5wYWNrZWRMZW5ndGggPSBwYWNrZWRMZW5ndGg7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUG9seWdvbk91dGxpbmVHZW9tZXRyeS5mcm9tUG9zaXRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgib3B0aW9ucy5wb3NpdGlvbnMiLCBvcHRpb25zLnBvc2l0aW9ucyk7CiAgICAgICAgY29uc3QgbmV3T3B0aW9ucyA9IHsKICAgICAgICAgIHBvbHlnb25IaWVyYXJjaHk6IHsKICAgICAgICAgICAgcG9zaXRpb25zOiBvcHRpb25zLnBvc2l0aW9ucwogICAgICAgICAgfSwKICAgICAgICAgIGhlaWdodDogb3B0aW9ucy5oZWlnaHQsCiAgICAgICAgICBleHRydWRlZEhlaWdodDogb3B0aW9ucy5leHRydWRlZEhlaWdodCwKICAgICAgICAgIGVsbGlwc29pZDogb3B0aW9ucy5lbGxpcHNvaWQsCiAgICAgICAgICBncmFudWxhcml0eTogb3B0aW9ucy5ncmFudWxhcml0eSwKICAgICAgICAgIHBlclBvc2l0aW9uSGVpZ2h0OiBvcHRpb25zLnBlclBvc2l0aW9uSGVpZ2h0LAogICAgICAgICAgYXJjVHlwZTogb3B0aW9ucy5hcmNUeXBlLAogICAgICAgICAgb2Zmc2V0QXR0cmlidXRlOiBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZQogICAgICAgIH07CiAgICAgICAgcmV0dXJuIG5ldyBQb2x5Z29uT3V0bGluZUdlb21ldHJ5KG5ld09wdGlvbnMpOwogICAgICB9OwogICAgICBQb2x5Z29uT3V0bGluZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24ocG9seWdvbkdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gcG9seWdvbkdlb21ldHJ5Ll9lbGxpcHNvaWQ7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBwb2x5Z29uR2VvbWV0cnkuX2dyYW51bGFyaXR5OwogICAgICAgIGNvbnN0IHBvbHlnb25IaWVyYXJjaHkgPSBwb2x5Z29uR2VvbWV0cnkuX3BvbHlnb25IaWVyYXJjaHk7CiAgICAgICAgY29uc3QgcGVyUG9zaXRpb25IZWlnaHQgPSBwb2x5Z29uR2VvbWV0cnkuX3BlclBvc2l0aW9uSGVpZ2h0OwogICAgICAgIGNvbnN0IGFyY1R5cGUgPSBwb2x5Z29uR2VvbWV0cnkuX2FyY1R5cGU7CiAgICAgICAgY29uc3QgcG9seWdvbnMgPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQucG9seWdvbk91dGxpbmVzRnJvbUhpZXJhcmNoeSgKICAgICAgICAgIHBvbHlnb25IaWVyYXJjaHksCiAgICAgICAgICAhcGVyUG9zaXRpb25IZWlnaHQsCiAgICAgICAgICBlbGxpcHNvaWQKICAgICAgICApOwogICAgICAgIGlmIChwb2x5Z29ucy5sZW5ndGggPT09IDApIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGxldCBnZW9tZXRyeUluc3RhbmNlOwogICAgICAgIGNvbnN0IGdlb21ldHJpZXMgPSBbXTsKICAgICAgICBjb25zdCBtaW5EaXN0YW5jZSA9IE1hdGhfZGVmYXVsdC5jaG9yZExlbmd0aCgKICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgZWxsaXBzb2lkLm1heGltdW1SYWRpdXMKICAgICAgICApOwogICAgICAgIGNvbnN0IGhlaWdodCA9IHBvbHlnb25HZW9tZXRyeS5faGVpZ2h0OwogICAgICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gcG9seWdvbkdlb21ldHJ5Ll9leHRydWRlZEhlaWdodDsKICAgICAgICBjb25zdCBleHRydWRlID0gcG9seWdvbkdlb21ldHJ5Ll9wZXJQb3NpdGlvbkhlaWdodEV4dHJ1ZGUgfHwgIU1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKGhlaWdodCwgZXh0cnVkZWRIZWlnaHQsIDAsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMik7CiAgICAgICAgbGV0IG9mZnNldFZhbHVlOwogICAgICAgIGxldCBpOwogICAgICAgIGlmIChleHRydWRlKSB7CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcG9seWdvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgZ2VvbWV0cnlJbnN0YW5jZSA9IGNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9uc0V4dHJ1ZGVkMigKICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgcG9seWdvbnNbaV0sCiAgICAgICAgICAgICAgbWluRGlzdGFuY2UsCiAgICAgICAgICAgICAgcGVyUG9zaXRpb25IZWlnaHQsCiAgICAgICAgICAgICAgYXJjVHlwZQogICAgICAgICAgICApOwogICAgICAgICAgICBnZW9tZXRyeUluc3RhbmNlLmdlb21ldHJ5ID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodEV4dHJ1ZGVkKAogICAgICAgICAgICAgIGdlb21ldHJ5SW5zdGFuY2UuZ2VvbWV0cnksCiAgICAgICAgICAgICAgaGVpZ2h0LAogICAgICAgICAgICAgIGV4dHJ1ZGVkSGVpZ2h0LAogICAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgICBwZXJQb3NpdGlvbkhlaWdodAogICAgICAgICAgICApOwogICAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHBvbHlnb25HZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlKSkgewogICAgICAgICAgICAgIGNvbnN0IHNpemUgPSBnZW9tZXRyeUluc3RhbmNlLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLmxlbmd0aCAvIDM7CiAgICAgICAgICAgICAgbGV0IG9mZnNldEF0dHJpYnV0ZSA9IG5ldyBVaW50OEFycmF5KHNpemUpOwogICAgICAgICAgICAgIGlmIChwb2x5Z29uR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5UT1ApIHsKICAgICAgICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZS5maWxsKDEsIDAsIHNpemUgLyAyKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgb2Zmc2V0VmFsdWUgPSBwb2x5Z29uR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5OT05FID8gMCA6IDE7CiAgICAgICAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUuZmlsbChvZmZzZXRWYWx1ZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGdlb21ldHJ5SW5zdGFuY2UuZ2VvbWV0cnkuYXR0cmlidXRlcy5hcHBseU9mZnNldCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAxLAogICAgICAgICAgICAgICAgICB2YWx1ZXM6IG9mZnNldEF0dHJpYnV0ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZ2VvbWV0cmllcy5wdXNoKGdlb21ldHJ5SW5zdGFuY2UpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcG9seWdvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgZ2VvbWV0cnlJbnN0YW5jZSA9IGNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9uczIoCiAgICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICAgIHBvbHlnb25zW2ldLAogICAgICAgICAgICAgIG1pbkRpc3RhbmNlLAogICAgICAgICAgICAgIHBlclBvc2l0aW9uSGVpZ2h0LAogICAgICAgICAgICAgIGFyY1R5cGUKICAgICAgICAgICAgKTsKICAgICAgICAgICAgZ2VvbWV0cnlJbnN0YW5jZS5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodCgKICAgICAgICAgICAgICBnZW9tZXRyeUluc3RhbmNlLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLAogICAgICAgICAgICAgIGhlaWdodCwKICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgIXBlclBvc2l0aW9uSGVpZ2h0CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQocG9seWdvbkdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUpKSB7CiAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gZ2VvbWV0cnlJbnN0YW5jZS5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGg7CiAgICAgICAgICAgICAgb2Zmc2V0VmFsdWUgPSBwb2x5Z29uR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5OT05FID8gMCA6IDE7CiAgICAgICAgICAgICAgY29uc3QgYXBwbHlPZmZzZXQgPSBuZXcgVWludDhBcnJheShsZW5ndGggLyAzKS5maWxsKG9mZnNldFZhbHVlKTsKICAgICAgICAgICAgICBnZW9tZXRyeUluc3RhbmNlLmdlb21ldHJ5LmF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCgKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICAgICAgICAgICAgdmFsdWVzOiBhcHBseU9mZnNldAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZ2VvbWV0cmllcy5wdXNoKGdlb21ldHJ5SW5zdGFuY2UpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCBnZW9tZXRyeSA9IEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5jb21iaW5lSW5zdGFuY2VzKGdlb21ldHJpZXMpWzBdOwogICAgICAgIGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tVmVydGljZXMoCiAgICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcwogICAgICAgICk7CiAgICAgICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgIGF0dHJpYnV0ZXM6IGdlb21ldHJ5LmF0dHJpYnV0ZXMsCiAgICAgICAgICBpbmRpY2VzOiBnZW9tZXRyeS5pbmRpY2VzLAogICAgICAgICAgcHJpbWl0aXZlVHlwZTogZ2VvbWV0cnkucHJpbWl0aXZlVHlwZSwKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlLAogICAgICAgICAgb2Zmc2V0QXR0cmlidXRlOiBwb2x5Z29uR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBQb2x5Z29uT3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlUG9seWdvbk91dGxpbmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVBvbHlnb25PdXRsaW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZVBvbHlnb25PdXRsaW5lR2VvbWV0cnkocG9seWdvbkdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICBwb2x5Z29uR2VvbWV0cnkgPSBQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKHBvbHlnb25HZW9tZXRyeSwgb2Zmc2V0KTsKICAgIH0KICAgIHBvbHlnb25HZW9tZXRyeS5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUocG9seWdvbkdlb21ldHJ5Ll9lbGxpcHNvaWQpOwogICAgcmV0dXJuIFBvbHlnb25PdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShwb2x5Z29uR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlUG9seWdvbk91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVBvbHlnb25PdXRsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVBvbHlnb25PdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9Qb2x5Z29uT3V0bGluZUdlb21ldHJ5KCk7CiAgICAgIGNyZWF0ZVBvbHlnb25PdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZVBvbHlnb25PdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Db2xvci5qcwogIGZ1bmN0aW9uIGh1ZTJyZ2IobTEsIG0yLCBoKSB7CiAgICBpZiAoaCA8IDApIHsKICAgICAgaCArPSAxOwogICAgfQogICAgaWYgKGggPiAxKSB7CiAgICAgIGggLT0gMTsKICAgIH0KICAgIGlmIChoICogNiA8IDEpIHsKICAgICAgcmV0dXJuIG0xICsgKG0yIC0gbTEpICogNiAqIGg7CiAgICB9CiAgICBpZiAoaCAqIDIgPCAxKSB7CiAgICAgIHJldHVybiBtMjsKICAgIH0KICAgIGlmIChoICogMyA8IDIpIHsKICAgICAgcmV0dXJuIG0xICsgKG0yIC0gbTEpICogKDIgLyAzIC0gaCkgKiA2OwogICAgfQogICAgcmV0dXJuIG0xOwogIH0KICBmdW5jdGlvbiBDb2xvcihyZWQsIGdyZWVuLCBibHVlLCBhbHBoYSkgewogICAgdGhpcy5yZWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChyZWQsIDEpOwogICAgdGhpcy5ncmVlbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGdyZWVuLCAxKTsKICAgIHRoaXMuYmx1ZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGJsdWUsIDEpOwogICAgdGhpcy5hbHBoYSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGFscGhhLCAxKTsKICB9CiAgdmFyIHNjcmF0Y2hBcnJheUJ1ZmZlciwgc2NyYXRjaFVpbnQzMkFycmF5LCBzY3JhdGNoVWludDhBcnJheSwgcmdiYU1hdGNoZXIsIHJyZ2diYmFhTWF0Y2hlciwgcmdiUGFyZW50aGVzZXNNYXRjaGVyLCBoc2xQYXJlbnRoZXNlc01hdGNoZXIsIENvbG9yX2RlZmF1bHQ7CiAgdmFyIGluaXRfQ29sb3IgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NvbG9yLmpzIigpIHsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9GZWF0dXJlRGV0ZWN0aW9uKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBDb2xvci5mcm9tQ2FydGVzaWFuNCA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKGNhcnRlc2lhbjExLngsIGNhcnRlc2lhbjExLnksIGNhcnRlc2lhbjExLnosIGNhcnRlc2lhbjExLncpOwogICAgICAgIH0KICAgICAgICByZXN1bHQucmVkID0gY2FydGVzaWFuMTEueDsKICAgICAgICByZXN1bHQuZ3JlZW4gPSBjYXJ0ZXNpYW4xMS55OwogICAgICAgIHJlc3VsdC5ibHVlID0gY2FydGVzaWFuMTEuejsKICAgICAgICByZXN1bHQuYWxwaGEgPSBjYXJ0ZXNpYW4xMS53OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENvbG9yLmZyb21CeXRlcyA9IGZ1bmN0aW9uKHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhLCByZXN1bHQpIHsKICAgICAgICByZWQgPSBDb2xvci5ieXRlVG9GbG9hdChkZWZhdWx0VmFsdWVfZGVmYXVsdChyZWQsIDI1NSkpOwogICAgICAgIGdyZWVuID0gQ29sb3IuYnl0ZVRvRmxvYXQoZGVmYXVsdFZhbHVlX2RlZmF1bHQoZ3JlZW4sIDI1NSkpOwogICAgICAgIGJsdWUgPSBDb2xvci5ieXRlVG9GbG9hdChkZWZhdWx0VmFsdWVfZGVmYXVsdChibHVlLCAyNTUpKTsKICAgICAgICBhbHBoYSA9IENvbG9yLmJ5dGVUb0Zsb2F0KGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGFscGhhLCAyNTUpKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnJlZCA9IHJlZDsKICAgICAgICByZXN1bHQuZ3JlZW4gPSBncmVlbjsKICAgICAgICByZXN1bHQuYmx1ZSA9IGJsdWU7CiAgICAgICAgcmVzdWx0LmFscGhhID0gYWxwaGE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ29sb3IuZnJvbUFscGhhID0gZnVuY3Rpb24oY29sb3IsIGFscGhhLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNvbG9yIiwgY29sb3IpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigiYWxwaGEiLCBhbHBoYSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihjb2xvci5yZWQsIGNvbG9yLmdyZWVuLCBjb2xvci5ibHVlLCBhbHBoYSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5yZWQgPSBjb2xvci5yZWQ7CiAgICAgICAgcmVzdWx0LmdyZWVuID0gY29sb3IuZ3JlZW47CiAgICAgICAgcmVzdWx0LmJsdWUgPSBjb2xvci5ibHVlOwogICAgICAgIHJlc3VsdC5hbHBoYSA9IGFscGhhOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIGlmIChGZWF0dXJlRGV0ZWN0aW9uX2RlZmF1bHQuc3VwcG9ydHNUeXBlZEFycmF5cygpKSB7CiAgICAgICAgc2NyYXRjaEFycmF5QnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDQpOwogICAgICAgIHNjcmF0Y2hVaW50MzJBcnJheSA9IG5ldyBVaW50MzJBcnJheShzY3JhdGNoQXJyYXlCdWZmZXIpOwogICAgICAgIHNjcmF0Y2hVaW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoc2NyYXRjaEFycmF5QnVmZmVyKTsKICAgICAgfQogICAgICBDb2xvci5mcm9tUmdiYSA9IGZ1bmN0aW9uKHJnYmEsIHJlc3VsdCkgewogICAgICAgIHNjcmF0Y2hVaW50MzJBcnJheVswXSA9IHJnYmE7CiAgICAgICAgcmV0dXJuIENvbG9yLmZyb21CeXRlcygKICAgICAgICAgIHNjcmF0Y2hVaW50OEFycmF5WzBdLAogICAgICAgICAgc2NyYXRjaFVpbnQ4QXJyYXlbMV0sCiAgICAgICAgICBzY3JhdGNoVWludDhBcnJheVsyXSwKICAgICAgICAgIHNjcmF0Y2hVaW50OEFycmF5WzNdLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgQ29sb3IuZnJvbUhzbCA9IGZ1bmN0aW9uKGh1ZSwgc2F0dXJhdGlvbiwgbGlnaHRuZXNzLCBhbHBoYSwgcmVzdWx0KSB7CiAgICAgICAgaHVlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoaHVlLCAwKSAlIDE7CiAgICAgICAgc2F0dXJhdGlvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHNhdHVyYXRpb24sIDApOwogICAgICAgIGxpZ2h0bmVzcyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGxpZ2h0bmVzcywgMCk7CiAgICAgICAgYWxwaGEgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChhbHBoYSwgMSk7CiAgICAgICAgbGV0IHJlZCA9IGxpZ2h0bmVzczsKICAgICAgICBsZXQgZ3JlZW4gPSBsaWdodG5lc3M7CiAgICAgICAgbGV0IGJsdWUgPSBsaWdodG5lc3M7CiAgICAgICAgaWYgKHNhdHVyYXRpb24gIT09IDApIHsKICAgICAgICAgIGxldCBtMjsKICAgICAgICAgIGlmIChsaWdodG5lc3MgPCAwLjUpIHsKICAgICAgICAgICAgbTIgPSBsaWdodG5lc3MgKiAoMSArIHNhdHVyYXRpb24pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbTIgPSBsaWdodG5lc3MgKyBzYXR1cmF0aW9uIC0gbGlnaHRuZXNzICogc2F0dXJhdGlvbjsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IG0xID0gMiAqIGxpZ2h0bmVzcyAtIG0yOwogICAgICAgICAgcmVkID0gaHVlMnJnYihtMSwgbTIsIGh1ZSArIDEgLyAzKTsKICAgICAgICAgIGdyZWVuID0gaHVlMnJnYihtMSwgbTIsIGh1ZSk7CiAgICAgICAgICBibHVlID0gaHVlMnJnYihtMSwgbTIsIGh1ZSAtIDEgLyAzKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihyZWQsIGdyZWVuLCBibHVlLCBhbHBoYSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5yZWQgPSByZWQ7CiAgICAgICAgcmVzdWx0LmdyZWVuID0gZ3JlZW47CiAgICAgICAgcmVzdWx0LmJsdWUgPSBibHVlOwogICAgICAgIHJlc3VsdC5hbHBoYSA9IGFscGhhOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENvbG9yLmZyb21SYW5kb20gPSBmdW5jdGlvbihvcHRpb25zLCByZXN1bHQpIHsKICAgICAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgICAgICBsZXQgcmVkID0gb3B0aW9ucy5yZWQ7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVkKSkgewogICAgICAgICAgY29uc3QgbWluaW11bVJlZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMubWluaW11bVJlZCwgMCk7CiAgICAgICAgICBjb25zdCBtYXhpbXVtUmVkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5tYXhpbXVtUmVkLCAxKTsKICAgICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJtaW5pbXVtUmVkIiwgbWluaW11bVJlZCwgbWF4aW11bVJlZCk7CiAgICAgICAgICByZWQgPSBtaW5pbXVtUmVkICsgTWF0aF9kZWZhdWx0Lm5leHRSYW5kb21OdW1iZXIoKSAqIChtYXhpbXVtUmVkIC0gbWluaW11bVJlZCk7CiAgICAgICAgfQogICAgICAgIGxldCBncmVlbiA9IG9wdGlvbnMuZ3JlZW47CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZ3JlZW4pKSB7CiAgICAgICAgICBjb25zdCBtaW5pbXVtR3JlZW4gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLm1pbmltdW1HcmVlbiwgMCk7CiAgICAgICAgICBjb25zdCBtYXhpbXVtR3JlZW4gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLm1heGltdW1HcmVlbiwgMSk7CiAgICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygKICAgICAgICAgICAgIm1pbmltdW1HcmVlbiIsCiAgICAgICAgICAgIG1pbmltdW1HcmVlbiwKICAgICAgICAgICAgbWF4aW11bUdyZWVuCiAgICAgICAgICApOwogICAgICAgICAgZ3JlZW4gPSBtaW5pbXVtR3JlZW4gKyBNYXRoX2RlZmF1bHQubmV4dFJhbmRvbU51bWJlcigpICogKG1heGltdW1HcmVlbiAtIG1pbmltdW1HcmVlbik7CiAgICAgICAgfQogICAgICAgIGxldCBibHVlID0gb3B0aW9ucy5ibHVlOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGJsdWUpKSB7CiAgICAgICAgICBjb25zdCBtaW5pbXVtQmx1ZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMubWluaW11bUJsdWUsIDApOwogICAgICAgICAgY29uc3QgbWF4aW11bUJsdWUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLm1heGltdW1CbHVlLCAxKTsKICAgICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKAogICAgICAgICAgICAibWluaW11bUJsdWUiLAogICAgICAgICAgICBtaW5pbXVtQmx1ZSwKICAgICAgICAgICAgbWF4aW11bUJsdWUKICAgICAgICAgICk7CiAgICAgICAgICBibHVlID0gbWluaW11bUJsdWUgKyBNYXRoX2RlZmF1bHQubmV4dFJhbmRvbU51bWJlcigpICogKG1heGltdW1CbHVlIC0gbWluaW11bUJsdWUpOwogICAgICAgIH0KICAgICAgICBsZXQgYWxwaGEgPSBvcHRpb25zLmFscGhhOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFscGhhKSkgewogICAgICAgICAgY29uc3QgbWluaW11bUFscGhhID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5taW5pbXVtQWxwaGEsIDApOwogICAgICAgICAgY29uc3QgbWF4aW11bUFscGhhID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5tYXhpbXVtQWxwaGEsIDEpOwogICAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoCiAgICAgICAgICAgICJtaW51bXVtQWxwaGEiLAogICAgICAgICAgICBtaW5pbXVtQWxwaGEsCiAgICAgICAgICAgIG1heGltdW1BbHBoYQogICAgICAgICAgKTsKICAgICAgICAgIGFscGhhID0gbWluaW11bUFscGhhICsgTWF0aF9kZWZhdWx0Lm5leHRSYW5kb21OdW1iZXIoKSAqIChtYXhpbXVtQWxwaGEgLSBtaW5pbXVtQWxwaGEpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnJlZCA9IHJlZDsKICAgICAgICByZXN1bHQuZ3JlZW4gPSBncmVlbjsKICAgICAgICByZXN1bHQuYmx1ZSA9IGJsdWU7CiAgICAgICAgcmVzdWx0LmFscGhhID0gYWxwaGE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgcmdiYU1hdGNoZXIgPSAvXiMoWzAtOWEtZl0pKFswLTlhLWZdKShbMC05YS1mXSkoWzAtOWEtZl0pPyQvaTsKICAgICAgcnJnZ2JiYWFNYXRjaGVyID0gL14jKFswLTlhLWZdezJ9KShbMC05YS1mXXsyfSkoWzAtOWEtZl17Mn0pKFswLTlhLWZdezJ9KT8kL2k7CiAgICAgIHJnYlBhcmVudGhlc2VzTWF0Y2hlciA9IC9ecmdiYT9ccypcKFxzKihbMC05Ll0rJT8pXHMqWyxcc10rXHMqKFswLTkuXSslPylccypbLFxzXStccyooWzAtOS5dKyU/KSg/OlxzKlssXHMvXStccyooWzAtOS5dKykpP1xzKlwpJC9pOwogICAgICBoc2xQYXJlbnRoZXNlc01hdGNoZXIgPSAvXmhzbGE/XHMqXChccyooWzAtOS5dKylccypbLFxzXStccyooWzAtOS5dKyUpXHMqWyxcc10rXHMqKFswLTkuXSslKSg/OlxzKlssXHMvXStccyooWzAtOS5dKykpP1xzKlwpJC9pOwogICAgICBDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcgPSBmdW5jdGlvbihjb2xvciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yuc3RyaW5nKCJjb2xvciIsIGNvbG9yKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ29sb3IoKTsKICAgICAgICB9CiAgICAgICAgY29sb3IgPSBjb2xvci50cmltKCk7CiAgICAgICAgY29uc3QgbmFtZWRDb2xvciA9IENvbG9yW2NvbG9yLnRvVXBwZXJDYXNlKCldOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobmFtZWRDb2xvcikpIHsKICAgICAgICAgIENvbG9yLmNsb25lKG5hbWVkQ29sb3IsIHJlc3VsdCk7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBsZXQgbWF0Y2hlcyA9IHJnYmFNYXRjaGVyLmV4ZWMoY29sb3IpOwogICAgICAgIGlmIChtYXRjaGVzICE9PSBudWxsKSB7CiAgICAgICAgICByZXN1bHQucmVkID0gcGFyc2VJbnQobWF0Y2hlc1sxXSwgMTYpIC8gMTU7CiAgICAgICAgICByZXN1bHQuZ3JlZW4gPSBwYXJzZUludChtYXRjaGVzWzJdLCAxNikgLyAxNTsKICAgICAgICAgIHJlc3VsdC5ibHVlID0gcGFyc2VJbnQobWF0Y2hlc1szXSwgMTYpIC8gMTU7CiAgICAgICAgICByZXN1bHQuYWxwaGEgPSBwYXJzZUludChkZWZhdWx0VmFsdWVfZGVmYXVsdChtYXRjaGVzWzRdLCAiZiIpLCAxNikgLyAxNTsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIG1hdGNoZXMgPSBycmdnYmJhYU1hdGNoZXIuZXhlYyhjb2xvcik7CiAgICAgICAgaWYgKG1hdGNoZXMgIT09IG51bGwpIHsKICAgICAgICAgIHJlc3VsdC5yZWQgPSBwYXJzZUludChtYXRjaGVzWzFdLCAxNikgLyAyNTU7CiAgICAgICAgICByZXN1bHQuZ3JlZW4gPSBwYXJzZUludChtYXRjaGVzWzJdLCAxNikgLyAyNTU7CiAgICAgICAgICByZXN1bHQuYmx1ZSA9IHBhcnNlSW50KG1hdGNoZXNbM10sIDE2KSAvIDI1NTsKICAgICAgICAgIHJlc3VsdC5hbHBoYSA9IHBhcnNlSW50KGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG1hdGNoZXNbNF0sICJmZiIpLCAxNikgLyAyNTU7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBtYXRjaGVzID0gcmdiUGFyZW50aGVzZXNNYXRjaGVyLmV4ZWMoY29sb3IpOwogICAgICAgIGlmIChtYXRjaGVzICE9PSBudWxsKSB7CiAgICAgICAgICByZXN1bHQucmVkID0gcGFyc2VGbG9hdChtYXRjaGVzWzFdKSAvICgiJSIgPT09IG1hdGNoZXNbMV0uc3Vic3RyKC0xKSA/IDEwMCA6IDI1NSk7CiAgICAgICAgICByZXN1bHQuZ3JlZW4gPSBwYXJzZUZsb2F0KG1hdGNoZXNbMl0pIC8gKCIlIiA9PT0gbWF0Y2hlc1syXS5zdWJzdHIoLTEpID8gMTAwIDogMjU1KTsKICAgICAgICAgIHJlc3VsdC5ibHVlID0gcGFyc2VGbG9hdChtYXRjaGVzWzNdKSAvICgiJSIgPT09IG1hdGNoZXNbM10uc3Vic3RyKC0xKSA/IDEwMCA6IDI1NSk7CiAgICAgICAgICByZXN1bHQuYWxwaGEgPSBwYXJzZUZsb2F0KGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG1hdGNoZXNbNF0sICIxLjAiKSk7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBtYXRjaGVzID0gaHNsUGFyZW50aGVzZXNNYXRjaGVyLmV4ZWMoY29sb3IpOwogICAgICAgIGlmIChtYXRjaGVzICE9PSBudWxsKSB7CiAgICAgICAgICByZXR1cm4gQ29sb3IuZnJvbUhzbCgKICAgICAgICAgICAgcGFyc2VGbG9hdChtYXRjaGVzWzFdKSAvIDM2MCwKICAgICAgICAgICAgcGFyc2VGbG9hdChtYXRjaGVzWzJdKSAvIDEwMCwKICAgICAgICAgICAgcGFyc2VGbG9hdChtYXRjaGVzWzNdKSAvIDEwMCwKICAgICAgICAgICAgcGFyc2VGbG9hdChkZWZhdWx0VmFsdWVfZGVmYXVsdChtYXRjaGVzWzRdLCAiMS4wIikpLAogICAgICAgICAgICByZXN1bHQKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdCA9IHZvaWQgMDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDb2xvci5wYWNrZWRMZW5ndGggPSA0OwogICAgICBDb2xvci5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUucmVkOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5ncmVlbjsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuYmx1ZTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlLmFscGhhOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgQ29sb3IudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBDb2xvcigpOwogICAgICAgIH0KICAgICAgICByZXN1bHQucmVkID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHQuZ3JlZW4gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC5ibHVlID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHQuYWxwaGEgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDb2xvci5ieXRlVG9GbG9hdCA9IGZ1bmN0aW9uKG51bWJlcikgewogICAgICAgIHJldHVybiBudW1iZXIgLyAyNTU7CiAgICAgIH07CiAgICAgIENvbG9yLmZsb2F0VG9CeXRlID0gZnVuY3Rpb24obnVtYmVyKSB7CiAgICAgICAgcmV0dXJuIG51bWJlciA9PT0gMSA/IDI1NSA6IG51bWJlciAqIDI1NiB8IDA7CiAgICAgIH07CiAgICAgIENvbG9yLmNsb25lID0gZnVuY3Rpb24oY29sb3IsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNvbG9yKSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihjb2xvci5yZWQsIGNvbG9yLmdyZWVuLCBjb2xvci5ibHVlLCBjb2xvci5hbHBoYSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5yZWQgPSBjb2xvci5yZWQ7CiAgICAgICAgcmVzdWx0LmdyZWVuID0gY29sb3IuZ3JlZW47CiAgICAgICAgcmVzdWx0LmJsdWUgPSBjb2xvci5ibHVlOwogICAgICAgIHJlc3VsdC5hbHBoYSA9IGNvbG9yLmFscGhhOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENvbG9yLmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IC8vCiAgICAgICAgZGVmaW5lZF9kZWZhdWx0KGxlZnQpICYmIC8vCiAgICAgICAgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiAvLwogICAgICAgIGxlZnQucmVkID09PSByaWdodC5yZWQgJiYgLy8KICAgICAgICBsZWZ0LmdyZWVuID09PSByaWdodC5ncmVlbiAmJiAvLwogICAgICAgIGxlZnQuYmx1ZSA9PT0gcmlnaHQuYmx1ZSAmJiAvLwogICAgICAgIGxlZnQuYWxwaGEgPT09IHJpZ2h0LmFscGhhOwogICAgICB9OwogICAgICBDb2xvci5lcXVhbHNBcnJheSA9IGZ1bmN0aW9uKGNvbG9yLCBhcnJheSwgb2Zmc2V0KSB7CiAgICAgICAgcmV0dXJuIGNvbG9yLnJlZCA9PT0gYXJyYXlbb2Zmc2V0XSAmJiBjb2xvci5ncmVlbiA9PT0gYXJyYXlbb2Zmc2V0ICsgMV0gJiYgY29sb3IuYmx1ZSA9PT0gYXJyYXlbb2Zmc2V0ICsgMl0gJiYgY29sb3IuYWxwaGEgPT09IGFycmF5W29mZnNldCArIDNdOwogICAgICB9OwogICAgICBDb2xvci5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICByZXR1cm4gQ29sb3IuY2xvbmUodGhpcywgcmVzdWx0KTsKICAgICAgfTsKICAgICAgQ29sb3IucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKG90aGVyKSB7CiAgICAgICAgcmV0dXJuIENvbG9yLmVxdWFscyh0aGlzLCBvdGhlcik7CiAgICAgIH07CiAgICAgIENvbG9yLnByb3RvdHlwZS5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24ob3RoZXIsIGVwc2lsb24pIHsKICAgICAgICByZXR1cm4gdGhpcyA9PT0gb3RoZXIgfHwgLy8KICAgICAgICBkZWZpbmVkX2RlZmF1bHQob3RoZXIpICYmIC8vCiAgICAgICAgTWF0aC5hYnModGhpcy5yZWQgLSBvdGhlci5yZWQpIDw9IGVwc2lsb24gJiYgLy8KICAgICAgICBNYXRoLmFicyh0aGlzLmdyZWVuIC0gb3RoZXIuZ3JlZW4pIDw9IGVwc2lsb24gJiYgLy8KICAgICAgICBNYXRoLmFicyh0aGlzLmJsdWUgLSBvdGhlci5ibHVlKSA8PSBlcHNpbG9uICYmIC8vCiAgICAgICAgTWF0aC5hYnModGhpcy5hbHBoYSAtIG90aGVyLmFscGhhKSA8PSBlcHNpbG9uOwogICAgICB9OwogICAgICBDb2xvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gYCgke3RoaXMucmVkfSwgJHt0aGlzLmdyZWVufSwgJHt0aGlzLmJsdWV9LCAke3RoaXMuYWxwaGF9KWA7CiAgICAgIH07CiAgICAgIENvbG9yLnByb3RvdHlwZS50b0Nzc0NvbG9yU3RyaW5nID0gZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3QgcmVkID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5yZWQpOwogICAgICAgIGNvbnN0IGdyZWVuID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5ncmVlbik7CiAgICAgICAgY29uc3QgYmx1ZSA9IENvbG9yLmZsb2F0VG9CeXRlKHRoaXMuYmx1ZSk7CiAgICAgICAgaWYgKHRoaXMuYWxwaGEgPT09IDEpIHsKICAgICAgICAgIHJldHVybiBgcmdiKCR7cmVkfSwke2dyZWVufSwke2JsdWV9KWA7CiAgICAgICAgfQogICAgICAgIHJldHVybiBgcmdiYSgke3JlZH0sJHtncmVlbn0sJHtibHVlfSwke3RoaXMuYWxwaGF9KWA7CiAgICAgIH07CiAgICAgIENvbG9yLnByb3RvdHlwZS50b0Nzc0hleFN0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgIGxldCByID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5yZWQpLnRvU3RyaW5nKDE2KTsKICAgICAgICBpZiAoci5sZW5ndGggPCAyKSB7CiAgICAgICAgICByID0gYDAke3J9YDsKICAgICAgICB9CiAgICAgICAgbGV0IGcgPSBDb2xvci5mbG9hdFRvQnl0ZSh0aGlzLmdyZWVuKS50b1N0cmluZygxNik7CiAgICAgICAgaWYgKGcubGVuZ3RoIDwgMikgewogICAgICAgICAgZyA9IGAwJHtnfWA7CiAgICAgICAgfQogICAgICAgIGxldCBiID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5ibHVlKS50b1N0cmluZygxNik7CiAgICAgICAgaWYgKGIubGVuZ3RoIDwgMikgewogICAgICAgICAgYiA9IGAwJHtifWA7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLmFscGhhIDwgMSkgewogICAgICAgICAgbGV0IGhleEFscGhhID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5hbHBoYSkudG9TdHJpbmcoMTYpOwogICAgICAgICAgaWYgKGhleEFscGhhLmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgaGV4QWxwaGEgPSBgMCR7aGV4QWxwaGF9YDsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBgIyR7cn0ke2d9JHtifSR7aGV4QWxwaGF9YDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGAjJHtyfSR7Z30ke2J9YDsKICAgICAgfTsKICAgICAgQ29sb3IucHJvdG90eXBlLnRvQnl0ZXMgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICBjb25zdCByZWQgPSBDb2xvci5mbG9hdFRvQnl0ZSh0aGlzLnJlZCk7CiAgICAgICAgY29uc3QgZ3JlZW4gPSBDb2xvci5mbG9hdFRvQnl0ZSh0aGlzLmdyZWVuKTsKICAgICAgICBjb25zdCBibHVlID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5ibHVlKTsKICAgICAgICBjb25zdCBhbHBoYSA9IENvbG9yLmZsb2F0VG9CeXRlKHRoaXMuYWxwaGEpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBbcmVkLCBncmVlbiwgYmx1ZSwgYWxwaGFdOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSByZWQ7CiAgICAgICAgcmVzdWx0WzFdID0gZ3JlZW47CiAgICAgICAgcmVzdWx0WzJdID0gYmx1ZTsKICAgICAgICByZXN1bHRbM10gPSBhbHBoYTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDb2xvci5wcm90b3R5cGUudG9SZ2JhID0gZnVuY3Rpb24oKSB7CiAgICAgICAgc2NyYXRjaFVpbnQ4QXJyYXlbMF0gPSBDb2xvci5mbG9hdFRvQnl0ZSh0aGlzLnJlZCk7CiAgICAgICAgc2NyYXRjaFVpbnQ4QXJyYXlbMV0gPSBDb2xvci5mbG9hdFRvQnl0ZSh0aGlzLmdyZWVuKTsKICAgICAgICBzY3JhdGNoVWludDhBcnJheVsyXSA9IENvbG9yLmZsb2F0VG9CeXRlKHRoaXMuYmx1ZSk7CiAgICAgICAgc2NyYXRjaFVpbnQ4QXJyYXlbM10gPSBDb2xvci5mbG9hdFRvQnl0ZSh0aGlzLmFscGhhKTsKICAgICAgICByZXR1cm4gc2NyYXRjaFVpbnQzMkFycmF5WzBdOwogICAgICB9OwogICAgICBDb2xvci5wcm90b3R5cGUuYnJpZ2h0ZW4gPSBmdW5jdGlvbihtYWduaXR1ZGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigibWFnbml0dWRlIiwgbWFnbml0dWRlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygibWFnbml0dWRlIiwgbWFnbml0dWRlLCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgbWFnbml0dWRlID0gMSAtIG1hZ25pdHVkZTsKICAgICAgICByZXN1bHQucmVkID0gMSAtICgxIC0gdGhpcy5yZWQpICogbWFnbml0dWRlOwogICAgICAgIHJlc3VsdC5ncmVlbiA9IDEgLSAoMSAtIHRoaXMuZ3JlZW4pICogbWFnbml0dWRlOwogICAgICAgIHJlc3VsdC5ibHVlID0gMSAtICgxIC0gdGhpcy5ibHVlKSAqIG1hZ25pdHVkZTsKICAgICAgICByZXN1bHQuYWxwaGEgPSB0aGlzLmFscGhhOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENvbG9yLnByb3RvdHlwZS5kYXJrZW4gPSBmdW5jdGlvbihtYWduaXR1ZGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigibWFnbml0dWRlIiwgbWFnbml0dWRlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygibWFnbml0dWRlIiwgbWFnbml0dWRlLCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgbWFnbml0dWRlID0gMSAtIG1hZ25pdHVkZTsKICAgICAgICByZXN1bHQucmVkID0gdGhpcy5yZWQgKiBtYWduaXR1ZGU7CiAgICAgICAgcmVzdWx0LmdyZWVuID0gdGhpcy5ncmVlbiAqIG1hZ25pdHVkZTsKICAgICAgICByZXN1bHQuYmx1ZSA9IHRoaXMuYmx1ZSAqIG1hZ25pdHVkZTsKICAgICAgICByZXN1bHQuYWxwaGEgPSB0aGlzLmFscGhhOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENvbG9yLnByb3RvdHlwZS53aXRoQWxwaGEgPSBmdW5jdGlvbihhbHBoYSwgcmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIENvbG9yLmZyb21BbHBoYSh0aGlzLCBhbHBoYSwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgQ29sb3IuYWRkID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC5yZWQgPSBsZWZ0LnJlZCArIHJpZ2h0LnJlZDsKICAgICAgICByZXN1bHQuZ3JlZW4gPSBsZWZ0LmdyZWVuICsgcmlnaHQuZ3JlZW47CiAgICAgICAgcmVzdWx0LmJsdWUgPSBsZWZ0LmJsdWUgKyByaWdodC5ibHVlOwogICAgICAgIHJlc3VsdC5hbHBoYSA9IGxlZnQuYWxwaGEgKyByaWdodC5hbHBoYTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDb2xvci5zdWJ0cmFjdCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQucmVkID0gbGVmdC5yZWQgLSByaWdodC5yZWQ7CiAgICAgICAgcmVzdWx0LmdyZWVuID0gbGVmdC5ncmVlbiAtIHJpZ2h0LmdyZWVuOwogICAgICAgIHJlc3VsdC5ibHVlID0gbGVmdC5ibHVlIC0gcmlnaHQuYmx1ZTsKICAgICAgICByZXN1bHQuYWxwaGEgPSBsZWZ0LmFscGhhIC0gcmlnaHQuYWxwaGE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ29sb3IubXVsdGlwbHkgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnJlZCA9IGxlZnQucmVkICogcmlnaHQucmVkOwogICAgICAgIHJlc3VsdC5ncmVlbiA9IGxlZnQuZ3JlZW4gKiByaWdodC5ncmVlbjsKICAgICAgICByZXN1bHQuYmx1ZSA9IGxlZnQuYmx1ZSAqIHJpZ2h0LmJsdWU7CiAgICAgICAgcmVzdWx0LmFscGhhID0gbGVmdC5hbHBoYSAqIHJpZ2h0LmFscGhhOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENvbG9yLmRpdmlkZSA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQucmVkID0gbGVmdC5yZWQgLyByaWdodC5yZWQ7CiAgICAgICAgcmVzdWx0LmdyZWVuID0gbGVmdC5ncmVlbiAvIHJpZ2h0LmdyZWVuOwogICAgICAgIHJlc3VsdC5ibHVlID0gbGVmdC5ibHVlIC8gcmlnaHQuYmx1ZTsKICAgICAgICByZXN1bHQuYWxwaGEgPSBsZWZ0LmFscGhhIC8gcmlnaHQuYWxwaGE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ29sb3IubW9kID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC5yZWQgPSBsZWZ0LnJlZCAlIHJpZ2h0LnJlZDsKICAgICAgICByZXN1bHQuZ3JlZW4gPSBsZWZ0LmdyZWVuICUgcmlnaHQuZ3JlZW47CiAgICAgICAgcmVzdWx0LmJsdWUgPSBsZWZ0LmJsdWUgJSByaWdodC5ibHVlOwogICAgICAgIHJlc3VsdC5hbHBoYSA9IGxlZnQuYWxwaGEgJSByaWdodC5hbHBoYTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDb2xvci5sZXJwID0gZnVuY3Rpb24oc3RhcnQsIGVuZCwgdCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzdGFydCIsIHN0YXJ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImVuZCIsIGVuZCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJ0IiwgdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC5yZWQgPSBNYXRoX2RlZmF1bHQubGVycChzdGFydC5yZWQsIGVuZC5yZWQsIHQpOwogICAgICAgIHJlc3VsdC5ncmVlbiA9IE1hdGhfZGVmYXVsdC5sZXJwKHN0YXJ0LmdyZWVuLCBlbmQuZ3JlZW4sIHQpOwogICAgICAgIHJlc3VsdC5ibHVlID0gTWF0aF9kZWZhdWx0LmxlcnAoc3RhcnQuYmx1ZSwgZW5kLmJsdWUsIHQpOwogICAgICAgIHJlc3VsdC5hbHBoYSA9IE1hdGhfZGVmYXVsdC5sZXJwKHN0YXJ0LmFscGhhLCBlbmQuYWxwaGEsIHQpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENvbG9yLm11bHRpcGx5QnlTY2FsYXIgPSBmdW5jdGlvbihjb2xvciwgc2NhbGFyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNvbG9yIiwgY29sb3IpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGFyIiwgc2NhbGFyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnJlZCA9IGNvbG9yLnJlZCAqIHNjYWxhcjsKICAgICAgICByZXN1bHQuZ3JlZW4gPSBjb2xvci5ncmVlbiAqIHNjYWxhcjsKICAgICAgICByZXN1bHQuYmx1ZSA9IGNvbG9yLmJsdWUgKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0LmFscGhhID0gY29sb3IuYWxwaGEgKiBzY2FsYXI7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ29sb3IuZGl2aWRlQnlTY2FsYXIgPSBmdW5jdGlvbihjb2xvciwgc2NhbGFyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNvbG9yIiwgY29sb3IpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGFyIiwgc2NhbGFyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnJlZCA9IGNvbG9yLnJlZCAvIHNjYWxhcjsKICAgICAgICByZXN1bHQuZ3JlZW4gPSBjb2xvci5ncmVlbiAvIHNjYWxhcjsKICAgICAgICByZXN1bHQuYmx1ZSA9IGNvbG9yLmJsdWUgLyBzY2FsYXI7CiAgICAgICAgcmVzdWx0LmFscGhhID0gY29sb3IuYWxwaGEgLyBzY2FsYXI7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ29sb3IuQUxJQ0VCTFVFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGMEY4RkYiKSk7CiAgICAgIENvbG9yLkFOVElRVUVXSElURSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRkFFQkQ3IikpOwogICAgICBDb2xvci5BUVVBID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMwMEZGRkYiKSk7CiAgICAgIENvbG9yLkFRVUFNQVJJTkUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzdGRkZENCIpKTsKICAgICAgQ29sb3IuQVpVUkUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0YwRkZGRiIpKTsKICAgICAgQ29sb3IuQkVJR0UgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0Y1RjVEQyIpKTsKICAgICAgQ29sb3IuQklTUVVFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRkU0QzQiKSk7CiAgICAgIENvbG9yLkJMQUNLID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMwMDAwMDAiKSk7CiAgICAgIENvbG9yLkJMQU5DSEVEQUxNT05EID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRkVCQ0QiKSk7CiAgICAgIENvbG9yLkJMVUUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzAwMDBGRiIpKTsKICAgICAgQ29sb3IuQkxVRVZJT0xFVCA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjOEEyQkUyIikpOwogICAgICBDb2xvci5CUk9XTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjQTUyQTJBIikpOwogICAgICBDb2xvci5CVVJMWVdPT0QgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0RFQjg4NyIpKTsKICAgICAgQ29sb3IuQ0FERVRCTFVFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM1RjlFQTAiKSk7CiAgICAgIENvbG9yLkNIQVJUUkVVU0UgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzdGRkYwMCIpKTsKICAgICAgQ29sb3IuQ0hPQ09MQVRFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNEMjY5MUUiKSk7CiAgICAgIENvbG9yLkNPUkFMID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRjdGNTAiKSk7CiAgICAgIENvbG9yLkNPUk5GTE9XRVJCTFVFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM2NDk1RUQiKSk7CiAgICAgIENvbG9yLkNPUk5TSUxLID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRkY4REMiKSk7CiAgICAgIENvbG9yLkNSSU1TT04gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0RDMTQzQyIpKTsKICAgICAgQ29sb3IuQ1lBTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMDBGRkZGIikpOwogICAgICBDb2xvci5EQVJLQkxVRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMDAwMDhCIikpOwogICAgICBDb2xvci5EQVJLQ1lBTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMDA4QjhCIikpOwogICAgICBDb2xvci5EQVJLR09MREVOUk9EID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNCODg2MEIiKSk7CiAgICAgIENvbG9yLkRBUktHUkFZID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNBOUE5QTkiKSk7CiAgICAgIENvbG9yLkRBUktHUkVFTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMDA2NDAwIikpOwogICAgICBDb2xvci5EQVJLR1JFWSA9IENvbG9yLkRBUktHUkFZOwogICAgICBDb2xvci5EQVJLS0hBS0kgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0JEQjc2QiIpKTsKICAgICAgQ29sb3IuREFSS01BR0VOVEEgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzhCMDA4QiIpKTsKICAgICAgQ29sb3IuREFSS09MSVZFR1JFRU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzU1NkIyRiIpKTsKICAgICAgQ29sb3IuREFSS09SQU5HRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRkY4QzAwIikpOwogICAgICBDb2xvci5EQVJLT1JDSElEID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM5OTMyQ0MiKSk7CiAgICAgIENvbG9yLkRBUktSRUQgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzhCMDAwMCIpKTsKICAgICAgQ29sb3IuREFSS1NBTE1PTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRTk5NjdBIikpOwogICAgICBDb2xvci5EQVJLU0VBR1JFRU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzhGQkM4RiIpKTsKICAgICAgQ29sb3IuREFSS1NMQVRFQkxVRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjNDgzRDhCIikpOwogICAgICBDb2xvci5EQVJLU0xBVEVHUkFZID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMyRjRGNEYiKSk7CiAgICAgIENvbG9yLkRBUktTTEFURUdSRVkgPSBDb2xvci5EQVJLU0xBVEVHUkFZOwogICAgICBDb2xvci5EQVJLVFVSUVVPSVNFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMwMENFRDEiKSk7CiAgICAgIENvbG9yLkRBUktWSU9MRVQgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzk0MDBEMyIpKTsKICAgICAgQ29sb3IuREVFUFBJTksgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGMTQ5MyIpKTsKICAgICAgQ29sb3IuREVFUFNLWUJMVUUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzAwQkZGRiIpKTsKICAgICAgQ29sb3IuRElNR1JBWSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjNjk2OTY5IikpOwogICAgICBDb2xvci5ESU1HUkVZID0gQ29sb3IuRElNR1JBWTsKICAgICAgQ29sb3IuRE9ER0VSQkxVRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMUU5MEZGIikpOwogICAgICBDb2xvci5GSVJFQlJJQ0sgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0IyMjIyMiIpKTsKICAgICAgQ29sb3IuRkxPUkFMV0hJVEUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGRkFGMCIpKTsKICAgICAgQ29sb3IuRk9SRVNUR1JFRU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzIyOEIyMiIpKTsKICAgICAgQ29sb3IuRlVDSFNJQSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRkYwMEZGIikpOwogICAgICBDb2xvci5HQUlOU0JPUk8gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0RDRENEQyIpKTsKICAgICAgQ29sb3IuR0hPU1RXSElURSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRjhGOEZGIikpOwogICAgICBDb2xvci5HT0xEID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRkQ3MDAiKSk7CiAgICAgIENvbG9yLkdPTERFTlJPRCA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjREFBNTIwIikpOwogICAgICBDb2xvci5HUkFZID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM4MDgwODAiKSk7CiAgICAgIENvbG9yLkdSRUVOID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMwMDgwMDAiKSk7CiAgICAgIENvbG9yLkdSRUVOWUVMTE9XID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNBREZGMkYiKSk7CiAgICAgIENvbG9yLkdSRVkgPSBDb2xvci5HUkFZOwogICAgICBDb2xvci5IT05FWURFVyA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRjBGRkYwIikpOwogICAgICBDb2xvci5IT1RQSU5LID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRjY5QjQiKSk7CiAgICAgIENvbG9yLklORElBTlJFRCA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjQ0Q1QzVDIikpOwogICAgICBDb2xvci5JTkRJR08gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzRCMDA4MiIpKTsKICAgICAgQ29sb3IuSVZPUlkgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGRkZGMCIpKTsKICAgICAgQ29sb3IuS0hBS0kgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0YwRTY4QyIpKTsKICAgICAgQ29sb3IuTEFWRU5ERVIgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0U2RTZGQSIpKTsKICAgICAgQ29sb3IuTEFWRU5EQVJfQkxVU0ggPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGRjBGNSIpKTsKICAgICAgQ29sb3IuTEFXTkdSRUVOID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM3Q0ZDMDAiKSk7CiAgICAgIENvbG9yLkxFTU9OQ0hJRkZPTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRkZGQUNEIikpOwogICAgICBDb2xvci5MSUdIVEJMVUUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0FERDhFNiIpKTsKICAgICAgQ29sb3IuTElHSFRDT1JBTCA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRjA4MDgwIikpOwogICAgICBDb2xvci5MSUdIVENZQU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0UwRkZGRiIpKTsKICAgICAgQ29sb3IuTElHSFRHT0xERU5ST0RZRUxMT1cgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZBRkFEMiIpKTsKICAgICAgQ29sb3IuTElHSFRHUkFZID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNEM0QzRDMiKSk7CiAgICAgIENvbG9yLkxJR0hUR1JFRU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzkwRUU5MCIpKTsKICAgICAgQ29sb3IuTElHSFRHUkVZID0gQ29sb3IuTElHSFRHUkFZOwogICAgICBDb2xvci5MSUdIVFBJTksgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGQjZDMSIpKTsKICAgICAgQ29sb3IuTElHSFRTRUFHUkVFTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMjBCMkFBIikpOwogICAgICBDb2xvci5MSUdIVFNLWUJMVUUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzg3Q0VGQSIpKTsKICAgICAgQ29sb3IuTElHSFRTTEFURUdSQVkgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzc3ODg5OSIpKTsKICAgICAgQ29sb3IuTElHSFRTTEFURUdSRVkgPSBDb2xvci5MSUdIVFNMQVRFR1JBWTsKICAgICAgQ29sb3IuTElHSFRTVEVFTEJMVUUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0IwQzRERSIpKTsKICAgICAgQ29sb3IuTElHSFRZRUxMT1cgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGRkZFMCIpKTsKICAgICAgQ29sb3IuTElNRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMDBGRjAwIikpOwogICAgICBDb2xvci5MSU1FR1JFRU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzMyQ0QzMiIpKTsKICAgICAgQ29sb3IuTElORU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZBRjBFNiIpKTsKICAgICAgQ29sb3IuTUFHRU5UQSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRkYwMEZGIikpOwogICAgICBDb2xvci5NQVJPT04gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzgwMDAwMCIpKTsKICAgICAgQ29sb3IuTUVESVVNQVFVQU1BUklORSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjNjZDREFBIikpOwogICAgICBDb2xvci5NRURJVU1CTFVFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMwMDAwQ0QiKSk7CiAgICAgIENvbG9yLk1FRElVTU9SQ0hJRCA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjQkE1NUQzIikpOwogICAgICBDb2xvci5NRURJVU1QVVJQTEUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzkzNzBEQiIpKTsKICAgICAgQ29sb3IuTUVESVVNU0VBR1JFRU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzNDQjM3MSIpKTsKICAgICAgQ29sb3IuTUVESVVNU0xBVEVCTFVFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM3QjY4RUUiKSk7CiAgICAgIENvbG9yLk1FRElVTVNQUklOR0dSRUVOID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMwMEZBOUEiKSk7CiAgICAgIENvbG9yLk1FRElVTVRVUlFVT0lTRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjNDhEMUNDIikpOwogICAgICBDb2xvci5NRURJVU1WSU9MRVRSRUQgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0M3MTU4NSIpKTsKICAgICAgQ29sb3IuTUlETklHSFRCTFVFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMxOTE5NzAiKSk7CiAgICAgIENvbG9yLk1JTlRDUkVBTSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRjVGRkZBIikpOwogICAgICBDb2xvci5NSVNUWVJPU0UgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGRTRFMSIpKTsKICAgICAgQ29sb3IuTU9DQ0FTSU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGRTRCNSIpKTsKICAgICAgQ29sb3IuTkFWQUpPV0hJVEUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGREVBRCIpKTsKICAgICAgQ29sb3IuTkFWWSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMDAwMDgwIikpOwogICAgICBDb2xvci5PTERMQUNFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGREY1RTYiKSk7CiAgICAgIENvbG9yLk9MSVZFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM4MDgwMDAiKSk7CiAgICAgIENvbG9yLk9MSVZFRFJBQiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjNkI4RTIzIikpOwogICAgICBDb2xvci5PUkFOR0UgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGQTUwMCIpKTsKICAgICAgQ29sb3IuT1JBTkdFUkVEID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRjQ1MDAiKSk7CiAgICAgIENvbG9yLk9SQ0hJRCA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjREE3MEQ2IikpOwogICAgICBDb2xvci5QQUxFR09MREVOUk9EID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNFRUU4QUEiKSk7CiAgICAgIENvbG9yLlBBTEVHUkVFTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjOThGQjk4IikpOwogICAgICBDb2xvci5QQUxFVFVSUVVPSVNFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNBRkVFRUUiKSk7CiAgICAgIENvbG9yLlBBTEVWSU9MRVRSRUQgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0RCNzA5MyIpKTsKICAgICAgQ29sb3IuUEFQQVlBV0hJUCA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRkZFRkQ1IikpOwogICAgICBDb2xvci5QRUFDSFBVRkYgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGREFCOSIpKTsKICAgICAgQ29sb3IuUEVSVSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjQ0Q4NTNGIikpOwogICAgICBDb2xvci5QSU5LID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRkMwQ0IiKSk7CiAgICAgIENvbG9yLlBMVU0gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0REQTBERCIpKTsKICAgICAgQ29sb3IuUE9XREVSQkxVRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjQjBFMEU2IikpOwogICAgICBDb2xvci5QVVJQTEUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzgwMDA4MCIpKTsKICAgICAgQ29sb3IuUkVEID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRjAwMDAiKSk7CiAgICAgIENvbG9yLlJPU1lCUk9XTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjQkM4RjhGIikpOwogICAgICBDb2xvci5ST1lBTEJMVUUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzQxNjlFMSIpKTsKICAgICAgQ29sb3IuU0FERExFQlJPV04gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzhCNDUxMyIpKTsKICAgICAgQ29sb3IuU0FMTU9OID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGQTgwNzIiKSk7CiAgICAgIENvbG9yLlNBTkRZQlJPV04gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0Y0QTQ2MCIpKTsKICAgICAgQ29sb3IuU0VBR1JFRU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzJFOEI1NyIpKTsKICAgICAgQ29sb3IuU0VBU0hFTEwgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGRjVFRSIpKTsKICAgICAgQ29sb3IuU0lFTk5BID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNBMDUyMkQiKSk7CiAgICAgIENvbG9yLlNJTFZFUiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjQzBDMEMwIikpOwogICAgICBDb2xvci5TS1lCTFVFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM4N0NFRUIiKSk7CiAgICAgIENvbG9yLlNMQVRFQkxVRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjNkE1QUNEIikpOwogICAgICBDb2xvci5TTEFURUdSQVkgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzcwODA5MCIpKTsKICAgICAgQ29sb3IuU0xBVEVHUkVZID0gQ29sb3IuU0xBVEVHUkFZOwogICAgICBDb2xvci5TTk9XID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRkZBRkEiKSk7CiAgICAgIENvbG9yLlNQUklOR0dSRUVOID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMwMEZGN0YiKSk7CiAgICAgIENvbG9yLlNURUVMQkxVRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjNDY4MkI0IikpOwogICAgICBDb2xvci5UQU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0QyQjQ4QyIpKTsKICAgICAgQ29sb3IuVEVBTCA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMDA4MDgwIikpOwogICAgICBDb2xvci5USElTVExFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNEOEJGRDgiKSk7CiAgICAgIENvbG9yLlRPTUFUTyA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRkY2MzQ3IikpOwogICAgICBDb2xvci5UVVJRVU9JU0UgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzQwRTBEMCIpKTsKICAgICAgQ29sb3IuVklPTEVUID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNFRTgyRUUiKSk7CiAgICAgIENvbG9yLldIRUFUID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGNURFQjMiKSk7CiAgICAgIENvbG9yLldISVRFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRkZGRkYiKSk7CiAgICAgIENvbG9yLldISVRFU01PS0UgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0Y1RjVGNSIpKTsKICAgICAgQ29sb3IuWUVMTE9XID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRkZGMDAiKSk7CiAgICAgIENvbG9yLllFTExPV0dSRUVOID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM5QUNEMzIiKSk7CiAgICAgIENvbG9yLlRSQU5TUEFSRU5UID0gT2JqZWN0LmZyZWV6ZShuZXcgQ29sb3IoMCwgMCwgMCwgMCkpOwogICAgICBDb2xvcl9kZWZhdWx0ID0gQ29sb3I7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Qb2x5bGluZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gaW50ZXJwb2xhdGVDb2xvcnMocDAsIHAxLCBjb2xvcjAsIGNvbG9yMSwgbnVtUG9pbnRzKSB7CiAgICBjb25zdCBjb2xvcnMgPSBzY3JhdGNoSW50ZXJwb2xhdGVDb2xvcnNBcnJheTsKICAgIGNvbG9ycy5sZW5ndGggPSBudW1Qb2ludHM7CiAgICBsZXQgaTsKICAgIGNvbnN0IHIwID0gY29sb3IwLnJlZDsKICAgIGNvbnN0IGcwID0gY29sb3IwLmdyZWVuOwogICAgY29uc3QgYjAgPSBjb2xvcjAuYmx1ZTsKICAgIGNvbnN0IGEwID0gY29sb3IwLmFscGhhOwogICAgY29uc3QgcjEgPSBjb2xvcjEucmVkOwogICAgY29uc3QgZzEgPSBjb2xvcjEuZ3JlZW47CiAgICBjb25zdCBiMSA9IGNvbG9yMS5ibHVlOwogICAgY29uc3QgYTEgPSBjb2xvcjEuYWxwaGE7CiAgICBpZiAoQ29sb3JfZGVmYXVsdC5lcXVhbHMoY29sb3IwLCBjb2xvcjEpKSB7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1Qb2ludHM7IGkrKykgewogICAgICAgIGNvbG9yc1tpXSA9IENvbG9yX2RlZmF1bHQuY2xvbmUoY29sb3IwKTsKICAgICAgfQogICAgICByZXR1cm4gY29sb3JzOwogICAgfQogICAgY29uc3QgcmVkUGVyVmVydGV4ID0gKHIxIC0gcjApIC8gbnVtUG9pbnRzOwogICAgY29uc3QgZ3JlZW5QZXJWZXJ0ZXggPSAoZzEgLSBnMCkgLyBudW1Qb2ludHM7CiAgICBjb25zdCBibHVlUGVyVmVydGV4ID0gKGIxIC0gYjApIC8gbnVtUG9pbnRzOwogICAgY29uc3QgYWxwaGFQZXJWZXJ0ZXggPSAoYTEgLSBhMCkgLyBudW1Qb2ludHM7CiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtUG9pbnRzOyBpKyspIHsKICAgICAgY29sb3JzW2ldID0gbmV3IENvbG9yX2RlZmF1bHQoCiAgICAgICAgcjAgKyBpICogcmVkUGVyVmVydGV4LAogICAgICAgIGcwICsgaSAqIGdyZWVuUGVyVmVydGV4LAogICAgICAgIGIwICsgaSAqIGJsdWVQZXJWZXJ0ZXgsCiAgICAgICAgYTAgKyBpICogYWxwaGFQZXJWZXJ0ZXgKICAgICAgKTsKICAgIH0KICAgIHJldHVybiBjb2xvcnM7CiAgfQogIGZ1bmN0aW9uIFBvbHlsaW5lR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBvcHRpb25zLnBvc2l0aW9uczsKICAgIGNvbnN0IGNvbG9ycyA9IG9wdGlvbnMuY29sb3JzOwogICAgY29uc3Qgd2lkdGggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLndpZHRoLCAxKTsKICAgIGNvbnN0IGNvbG9yc1BlclZlcnRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuY29sb3JzUGVyVmVydGV4LCBmYWxzZSk7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwb3NpdGlvbnMpIHx8IHBvc2l0aW9ucy5sZW5ndGggPCAyKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJBdCBsZWFzdCB0d28gcG9zaXRpb25zIGFyZSByZXF1aXJlZC4iKTsKICAgIH0KICAgIGlmICh0eXBlb2Ygd2lkdGggIT09ICJudW1iZXIiKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ3aWR0aCBtdXN0IGJlIGEgbnVtYmVyIik7CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGNvbG9ycykgJiYgKGNvbG9yc1BlclZlcnRleCAmJiBjb2xvcnMubGVuZ3RoIDwgcG9zaXRpb25zLmxlbmd0aCB8fCAhY29sb3JzUGVyVmVydGV4ICYmIGNvbG9ycy5sZW5ndGggPCBwb3NpdGlvbnMubGVuZ3RoIC0gMSkpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImNvbG9ycyBoYXMgYW4gaW52YWxpZCBsZW5ndGguIik7CiAgICB9CiAgICB0aGlzLl9wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICB0aGlzLl9jb2xvcnMgPSBjb2xvcnM7CiAgICB0aGlzLl93aWR0aCA9IHdpZHRoOwogICAgdGhpcy5fY29sb3JzUGVyVmVydGV4ID0gY29sb3JzUGVyVmVydGV4OwogICAgdGhpcy5fdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQuY2xvbmUoCiAgICAgIGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMudmVydGV4Rm9ybWF0LCBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5ERUZBVUxUKQogICAgKTsKICAgIHRoaXMuX2FyY1R5cGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmFyY1R5cGUsIEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQyk7CiAgICB0aGlzLl9ncmFudWxhcml0eSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFCiAgICApOwogICAgdGhpcy5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoCiAgICAgIGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NCkKICAgICk7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZVBvbHlsaW5lR2VvbWV0cnkiOwogICAgbGV0IG51bUNvbXBvbmVudHMgPSAxICsgcG9zaXRpb25zLmxlbmd0aCAqIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICBudW1Db21wb25lbnRzICs9IGRlZmluZWRfZGVmYXVsdChjb2xvcnMpID8gMSArIGNvbG9ycy5sZW5ndGggKiBDb2xvcl9kZWZhdWx0LnBhY2tlZExlbmd0aCA6IDE7CiAgICB0aGlzLnBhY2tlZExlbmd0aCA9IG51bUNvbXBvbmVudHMgKyBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyA0OwogIH0KICB2YXIgc2NyYXRjaEludGVycG9sYXRlQ29sb3JzQXJyYXksIHNjcmF0Y2hFbGxpcHNvaWQ4LCBzY3JhdGNoVmVydGV4Rm9ybWF0MTAsIHNjcmF0Y2hPcHRpb25zMTYsIHNjcmF0Y2hDYXJ0ZXNpYW4zOCwgc2NyYXRjaFBvc2l0aW9uNCwgc2NyYXRjaFByZXZQb3NpdGlvbiwgc2NyYXRjaE5leHRQb3NpdGlvbiwgUG9seWxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X1BvbHlsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BvbHlsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0FyY1R5cGUoKTsKICAgICAgaW5pdF9hcnJheVJlbW92ZUR1cGxpY2F0ZXMoKTsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9Db2xvcigpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X0dlb21ldHJ5VHlwZSgpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfUG9seWxpbmVQaXBlbGluZSgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgaW5pdF9WZXJ0ZXhGb3JtYXQoKTsKICAgICAgc2NyYXRjaEludGVycG9sYXRlQ29sb3JzQXJyYXkgPSBbXTsKICAgICAgUG9seWxpbmVHZW9tZXRyeS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodmFsdWUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgidmFsdWUgaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYXJyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXJyYXkgaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGxldCBpOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IHZhbHVlLl9wb3NpdGlvbnM7CiAgICAgICAgbGV0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IGxlbmd0aDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2ksIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCkgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2socG9zaXRpb25zW2ldLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGNvbG9ycyA9IHZhbHVlLl9jb2xvcnM7CiAgICAgICAgbGVuZ3RoID0gZGVmaW5lZF9kZWZhdWx0KGNvbG9ycykgPyBjb2xvcnMubGVuZ3RoIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gbGVuZ3RoOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDb2xvcl9kZWZhdWx0LnBhY2tlZExlbmd0aCkgewogICAgICAgICAgQ29sb3JfZGVmYXVsdC5wYWNrKGNvbG9yc1tpXSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrKHZhbHVlLl9lbGxpcHNvaWQsIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrKHZhbHVlLl92ZXJ0ZXhGb3JtYXQsIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3dpZHRoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fY29sb3JzUGVyVmVydGV4ID8gMSA6IDA7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9hcmNUeXBlOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gdmFsdWUuX2dyYW51bGFyaXR5OwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaEVsbGlwc29pZDggPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShFbGxpcHNvaWRfZGVmYXVsdC5VTklUX1NQSEVSRSk7CiAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQxMCA9IG5ldyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoT3B0aW9uczE2ID0gewogICAgICAgIHBvc2l0aW9uczogdm9pZCAwLAogICAgICAgIGNvbG9yczogdm9pZCAwLAogICAgICAgIGVsbGlwc29pZDogc2NyYXRjaEVsbGlwc29pZDgsCiAgICAgICAgdmVydGV4Rm9ybWF0OiBzY3JhdGNoVmVydGV4Rm9ybWF0MTAsCiAgICAgICAgd2lkdGg6IHZvaWQgMCwKICAgICAgICBjb2xvcnNQZXJWZXJ0ZXg6IHZvaWQgMCwKICAgICAgICBhcmNUeXBlOiB2b2lkIDAsCiAgICAgICAgZ3JhbnVsYXJpdHk6IHZvaWQgMAogICAgICB9OwogICAgICBQb2x5bGluZUdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhcnJheSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgbGV0IGk7CiAgICAgICAgbGV0IGxlbmd0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIHBvc2l0aW9uc1tpXSA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBsZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGNvbG9ycyA9IGxlbmd0aCA+IDAgPyBuZXcgQXJyYXkobGVuZ3RoKSA6IHZvaWQgMDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2ksIHN0YXJ0aW5nSW5kZXggKz0gQ29sb3JfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIGNvbG9yc1tpXSA9IENvbG9yX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4LCBzY3JhdGNoRWxsaXBzb2lkOCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdDEwCiAgICAgICAgKTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCB3aWR0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgY29sb3JzUGVyVmVydGV4ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9PT0gMTsKICAgICAgICBjb25zdCBhcmNUeXBlID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTYucG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxNi5jb2xvcnMgPSBjb2xvcnM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE2LndpZHRoID0gd2lkdGg7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE2LmNvbG9yc1BlclZlcnRleCA9IGNvbG9yc1BlclZlcnRleDsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTYuYXJjVHlwZSA9IGFyY1R5cGU7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE2LmdyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICAgICAgICByZXR1cm4gbmV3IFBvbHlsaW5lR2VvbWV0cnkoc2NyYXRjaE9wdGlvbnMxNik7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fcG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgICAgIHJlc3VsdC5fY29sb3JzID0gY29sb3JzOwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLCByZXN1bHQuX2VsbGlwc29pZCk7CiAgICAgICAgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSh2ZXJ0ZXhGb3JtYXQsIHJlc3VsdC5fdmVydGV4Rm9ybWF0KTsKICAgICAgICByZXN1bHQuX3dpZHRoID0gd2lkdGg7CiAgICAgICAgcmVzdWx0Ll9jb2xvcnNQZXJWZXJ0ZXggPSBjb2xvcnNQZXJWZXJ0ZXg7CiAgICAgICAgcmVzdWx0Ll9hcmNUeXBlID0gYXJjVHlwZTsKICAgICAgICByZXN1bHQuX2dyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjM4ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUG9zaXRpb240ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUHJldlBvc2l0aW9uID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTmV4dFBvc2l0aW9uID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBQb2x5bGluZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24ocG9seWxpbmVHZW9tZXRyeSkgewogICAgICAgIGNvbnN0IHdpZHRoID0gcG9seWxpbmVHZW9tZXRyeS5fd2lkdGg7CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gcG9seWxpbmVHZW9tZXRyeS5fdmVydGV4Rm9ybWF0OwogICAgICAgIGxldCBjb2xvcnMgPSBwb2x5bGluZUdlb21ldHJ5Ll9jb2xvcnM7CiAgICAgICAgY29uc3QgY29sb3JzUGVyVmVydGV4ID0gcG9seWxpbmVHZW9tZXRyeS5fY29sb3JzUGVyVmVydGV4OwogICAgICAgIGNvbnN0IGFyY1R5cGUgPSBwb2x5bGluZUdlb21ldHJ5Ll9hcmNUeXBlOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gcG9seWxpbmVHZW9tZXRyeS5fZ3JhbnVsYXJpdHk7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gcG9seWxpbmVHZW9tZXRyeS5fZWxsaXBzb2lkOwogICAgICAgIGxldCBpOwogICAgICAgIGxldCBqOwogICAgICAgIGxldCBrOwogICAgICAgIGNvbnN0IHJlbW92ZWRJbmRpY2VzID0gW107CiAgICAgICAgbGV0IHBvc2l0aW9ucyA9IGFycmF5UmVtb3ZlRHVwbGljYXRlc19kZWZhdWx0KAogICAgICAgICAgcG9seWxpbmVHZW9tZXRyeS5fcG9zaXRpb25zLAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24sCiAgICAgICAgICBmYWxzZSwKICAgICAgICAgIHJlbW92ZWRJbmRpY2VzCiAgICAgICAgKTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGNvbG9ycykgJiYgcmVtb3ZlZEluZGljZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgbGV0IHJlbW92ZWRBcnJheUluZGV4ID0gMDsKICAgICAgICAgIGxldCBuZXh0UmVtb3ZlZEluZGV4ID0gcmVtb3ZlZEluZGljZXNbMF07CiAgICAgICAgICBjb2xvcnMgPSBjb2xvcnMuZmlsdGVyKGZ1bmN0aW9uKGNvbG9yLCBpbmRleDIpIHsKICAgICAgICAgICAgbGV0IHJlbW92ZSA9IGZhbHNlOwogICAgICAgICAgICBpZiAoY29sb3JzUGVyVmVydGV4KSB7CiAgICAgICAgICAgICAgcmVtb3ZlID0gaW5kZXgyID09PSBuZXh0UmVtb3ZlZEluZGV4IHx8IGluZGV4MiA9PT0gMCAmJiBuZXh0UmVtb3ZlZEluZGV4ID09PSAxOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJlbW92ZSA9IGluZGV4MiArIDEgPT09IG5leHRSZW1vdmVkSW5kZXg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHJlbW92ZSkgewogICAgICAgICAgICAgIHJlbW92ZWRBcnJheUluZGV4Kys7CiAgICAgICAgICAgICAgbmV4dFJlbW92ZWRJbmRleCA9IHJlbW92ZWRJbmRpY2VzW3JlbW92ZWRBcnJheUluZGV4XTsKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgbGV0IHBvc2l0aW9uc0xlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgaWYgKHBvc2l0aW9uc0xlbmd0aCA8IDIgfHwgd2lkdGggPD0gMCkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQyB8fCBhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuUkhVTUIpIHsKICAgICAgICAgIGxldCBzdWJkaXZpc2lvblNpemU7CiAgICAgICAgICBsZXQgbnVtYmVyT2ZQb2ludHNGdW5jdGlvbjsKICAgICAgICAgIGlmIChhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuR0VPREVTSUMpIHsKICAgICAgICAgICAgc3ViZGl2aXNpb25TaXplID0gTWF0aF9kZWZhdWx0LmNob3JkTGVuZ3RoKAogICAgICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgICAgIGVsbGlwc29pZC5tYXhpbXVtUmFkaXVzCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIG51bWJlck9mUG9pbnRzRnVuY3Rpb24gPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQubnVtYmVyT2ZQb2ludHM7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzdWJkaXZpc2lvblNpemUgPSBncmFudWxhcml0eTsKICAgICAgICAgICAgbnVtYmVyT2ZQb2ludHNGdW5jdGlvbiA9IFBvbHlsaW5lUGlwZWxpbmVfZGVmYXVsdC5udW1iZXJPZlBvaW50c1JodW1iTGluZTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGhlaWdodHMgPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQuZXh0cmFjdEhlaWdodHMocG9zaXRpb25zLCBlbGxpcHNvaWQpOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChjb2xvcnMpKSB7CiAgICAgICAgICAgIGxldCBjb2xvckxlbmd0aCA9IDE7CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwb3NpdGlvbnNMZW5ndGggLSAxOyArK2kpIHsKICAgICAgICAgICAgICBjb2xvckxlbmd0aCArPSBudW1iZXJPZlBvaW50c0Z1bmN0aW9uKAogICAgICAgICAgICAgICAgcG9zaXRpb25zW2ldLAogICAgICAgICAgICAgICAgcG9zaXRpb25zW2kgKyAxXSwKICAgICAgICAgICAgICAgIHN1YmRpdmlzaW9uU2l6ZQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgbmV3Q29sb3JzID0gbmV3IEFycmF5KGNvbG9yTGVuZ3RoKTsKICAgICAgICAgICAgbGV0IG5ld0NvbG9ySW5kZXggPSAwOwogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcG9zaXRpb25zTGVuZ3RoIC0gMTsgKytpKSB7CiAgICAgICAgICAgICAgY29uc3QgcDAgPSBwb3NpdGlvbnNbaV07CiAgICAgICAgICAgICAgY29uc3QgcDEgPSBwb3NpdGlvbnNbaSArIDFdOwogICAgICAgICAgICAgIGNvbnN0IGMwID0gY29sb3JzW2ldOwogICAgICAgICAgICAgIGNvbnN0IG51bUNvbG9ycyA9IG51bWJlck9mUG9pbnRzRnVuY3Rpb24ocDAsIHAxLCBzdWJkaXZpc2lvblNpemUpOwogICAgICAgICAgICAgIGlmIChjb2xvcnNQZXJWZXJ0ZXggJiYgaSA8IGNvbG9yTGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBjb25zdCBjMSA9IGNvbG9yc1tpICsgMV07CiAgICAgICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0ZWRDb2xvcnMgPSBpbnRlcnBvbGF0ZUNvbG9ycygKICAgICAgICAgICAgICAgICAgcDAsCiAgICAgICAgICAgICAgICAgIHAxLAogICAgICAgICAgICAgICAgICBjMCwKICAgICAgICAgICAgICAgICAgYzEsCiAgICAgICAgICAgICAgICAgIG51bUNvbG9ycwogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRlZENvbG9yc0xlbmd0aCA9IGludGVycG9sYXRlZENvbG9ycy5sZW5ndGg7CiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgaW50ZXJwb2xhdGVkQ29sb3JzTGVuZ3RoOyArK2opIHsKICAgICAgICAgICAgICAgICAgbmV3Q29sb3JzW25ld0NvbG9ySW5kZXgrK10gPSBpbnRlcnBvbGF0ZWRDb2xvcnNbal07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBudW1Db2xvcnM7ICsraikgewogICAgICAgICAgICAgICAgICBuZXdDb2xvcnNbbmV3Q29sb3JJbmRleCsrXSA9IENvbG9yX2RlZmF1bHQuY2xvbmUoYzApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBuZXdDb2xvcnNbbmV3Q29sb3JJbmRleF0gPSBDb2xvcl9kZWZhdWx0LmNsb25lKGNvbG9yc1tjb2xvcnMubGVuZ3RoIC0gMV0pOwogICAgICAgICAgICBjb2xvcnMgPSBuZXdDb2xvcnM7CiAgICAgICAgICAgIHNjcmF0Y2hJbnRlcnBvbGF0ZUNvbG9yc0FycmF5Lmxlbmd0aCA9IDA7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoYXJjVHlwZSA9PT0gQXJjVHlwZV9kZWZhdWx0LkdFT0RFU0lDKSB7CiAgICAgICAgICAgIHBvc2l0aW9ucyA9IFBvbHlsaW5lUGlwZWxpbmVfZGVmYXVsdC5nZW5lcmF0ZUNhcnRlc2lhbkFyYyh7CiAgICAgICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgICAgIG1pbkRpc3RhbmNlOiBzdWJkaXZpc2lvblNpemUsCiAgICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0cwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHBvc2l0aW9ucyA9IFBvbHlsaW5lUGlwZWxpbmVfZGVmYXVsdC5nZW5lcmF0ZUNhcnRlc2lhblJodW1iQXJjKHsKICAgICAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICAgICAgZ3JhbnVsYXJpdHk6IHN1YmRpdmlzaW9uU2l6ZSwKICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRzCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBwb3NpdGlvbnNMZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGNvbnN0IHNpemUgPSBwb3NpdGlvbnNMZW5ndGggKiA0IC0gNDsKICAgICAgICBjb25zdCBmaW5hbFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoc2l6ZSAqIDMpOwogICAgICAgIGNvbnN0IHByZXZQb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KHNpemUgKiAzKTsKICAgICAgICBjb25zdCBuZXh0UG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShzaXplICogMyk7CiAgICAgICAgY29uc3QgZXhwYW5kQW5kV2lkdGggPSBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiAyKTsKICAgICAgICBjb25zdCBzdCA9IHZlcnRleEZvcm1hdC5zdCA/IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDIpIDogdm9pZCAwOwogICAgICAgIGNvbnN0IGZpbmFsQ29sb3JzID0gZGVmaW5lZF9kZWZhdWx0KGNvbG9ycykgPyBuZXcgVWludDhBcnJheShzaXplICogNCkgOiB2b2lkIDA7CiAgICAgICAgbGV0IHBvc2l0aW9uSW5kZXggPSAwOwogICAgICAgIGxldCBleHBhbmRBbmRXaWR0aEluZGV4ID0gMDsKICAgICAgICBsZXQgc3RJbmRleCA9IDA7CiAgICAgICAgbGV0IGNvbG9ySW5kZXggPSAwOwogICAgICAgIGxldCBwb3NpdGlvbjsKICAgICAgICBmb3IgKGogPSAwOyBqIDwgcG9zaXRpb25zTGVuZ3RoOyArK2opIHsKICAgICAgICAgIGlmIChqID09PSAwKSB7CiAgICAgICAgICAgIHBvc2l0aW9uID0gc2NyYXRjaENhcnRlc2lhbjM4OwogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocG9zaXRpb25zWzBdLCBwb3NpdGlvbnNbMV0sIHBvc2l0aW9uKTsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChwb3NpdGlvbnNbMF0sIHBvc2l0aW9uLCBwb3NpdGlvbik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uc1tqIC0gMV07CiAgICAgICAgICB9CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocG9zaXRpb24sIHNjcmF0Y2hQcmV2UG9zaXRpb24pOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHBvc2l0aW9uc1tqXSwgc2NyYXRjaFBvc2l0aW9uNCk7CiAgICAgICAgICBpZiAoaiA9PT0gcG9zaXRpb25zTGVuZ3RoIC0gMSkgewogICAgICAgICAgICBwb3NpdGlvbiA9IHNjcmF0Y2hDYXJ0ZXNpYW4zODsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbnNMZW5ndGggLSAxXSwKICAgICAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25zTGVuZ3RoIC0gMl0sCiAgICAgICAgICAgICAgcG9zaXRpb24KICAgICAgICAgICAgKTsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChwb3NpdGlvbnNbcG9zaXRpb25zTGVuZ3RoIC0gMV0sIHBvc2l0aW9uLCBwb3NpdGlvbik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uc1tqICsgMV07CiAgICAgICAgICB9CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocG9zaXRpb24sIHNjcmF0Y2hOZXh0UG9zaXRpb24pOwogICAgICAgICAgbGV0IGNvbG9yMCwgY29sb3IxOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChmaW5hbENvbG9ycykpIHsKICAgICAgICAgICAgaWYgKGogIT09IDAgJiYgIWNvbG9yc1BlclZlcnRleCkgewogICAgICAgICAgICAgIGNvbG9yMCA9IGNvbG9yc1tqIC0gMV07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgY29sb3IwID0gY29sb3JzW2pdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChqICE9PSBwb3NpdGlvbnNMZW5ndGggLSAxKSB7CiAgICAgICAgICAgICAgY29sb3IxID0gY29sb3JzW2pdOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBzdGFydEsgPSBqID09PSAwID8gMiA6IDA7CiAgICAgICAgICBjb25zdCBlbmRLID0gaiA9PT0gcG9zaXRpb25zTGVuZ3RoIC0gMSA/IDIgOiA0OwogICAgICAgICAgZm9yIChrID0gc3RhcnRLOyBrIDwgZW5kSzsgKytrKSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHNjcmF0Y2hQb3NpdGlvbjQsIGZpbmFsUG9zaXRpb25zLCBwb3NpdGlvbkluZGV4KTsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soc2NyYXRjaFByZXZQb3NpdGlvbiwgcHJldlBvc2l0aW9ucywgcG9zaXRpb25JbmRleCk7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHNjcmF0Y2hOZXh0UG9zaXRpb24sIG5leHRQb3NpdGlvbnMsIHBvc2l0aW9uSW5kZXgpOwogICAgICAgICAgICBwb3NpdGlvbkluZGV4ICs9IDM7CiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbjIgPSBrIC0gMiA8IDAgPyAtMSA6IDE7CiAgICAgICAgICAgIGV4cGFuZEFuZFdpZHRoW2V4cGFuZEFuZFdpZHRoSW5kZXgrK10gPSAyICogKGsgJSAyKSAtIDE7CiAgICAgICAgICAgIGV4cGFuZEFuZFdpZHRoW2V4cGFuZEFuZFdpZHRoSW5kZXgrK10gPSBkaXJlY3Rpb24yICogd2lkdGg7CiAgICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICAgICAgICBzdFtzdEluZGV4KytdID0gaiAvIChwb3NpdGlvbnNMZW5ndGggLSAxKTsKICAgICAgICAgICAgICBzdFtzdEluZGV4KytdID0gTWF0aC5tYXgoZXhwYW5kQW5kV2lkdGhbZXhwYW5kQW5kV2lkdGhJbmRleCAtIDJdLCAwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGZpbmFsQ29sb3JzKSkgewogICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gayA8IDIgPyBjb2xvcjAgOiBjb2xvcjE7CiAgICAgICAgICAgICAgZmluYWxDb2xvcnNbY29sb3JJbmRleCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUoY29sb3IucmVkKTsKICAgICAgICAgICAgICBmaW5hbENvbG9yc1tjb2xvckluZGV4KytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShjb2xvci5ncmVlbik7CiAgICAgICAgICAgICAgZmluYWxDb2xvcnNbY29sb3JJbmRleCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUoY29sb3IuYmx1ZSk7CiAgICAgICAgICAgICAgZmluYWxDb2xvcnNbY29sb3JJbmRleCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUoY29sb3IuYWxwaGEpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoKTsKICAgICAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgIHZhbHVlczogZmluYWxQb3NpdGlvbnMKICAgICAgICB9KTsKICAgICAgICBhdHRyaWJ1dGVzLnByZXZQb3NpdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICB2YWx1ZXM6IHByZXZQb3NpdGlvbnMKICAgICAgICB9KTsKICAgICAgICBhdHRyaWJ1dGVzLm5leHRQb3NpdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICB2YWx1ZXM6IG5leHRQb3NpdGlvbnMKICAgICAgICB9KTsKICAgICAgICBhdHRyaWJ1dGVzLmV4cGFuZEFuZFdpZHRoID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgICAgdmFsdWVzOiBleHBhbmRBbmRXaWR0aAogICAgICAgIH0pOwogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICAgIGF0dHJpYnV0ZXMuc3QgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgICAgICB2YWx1ZXM6IHN0CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChmaW5hbENvbG9ycykpIHsKICAgICAgICAgIGF0dHJpYnV0ZXMuY29sb3IgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDQsCiAgICAgICAgICAgIHZhbHVlczogZmluYWxDb2xvcnMsCiAgICAgICAgICAgIG5vcm1hbGl6ZTogdHJ1ZQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShzaXplLCBwb3NpdGlvbnNMZW5ndGggKiA2IC0gNik7CiAgICAgICAgbGV0IGluZGV4ID0gMDsKICAgICAgICBsZXQgaW5kaWNlc0luZGV4ID0gMDsKICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnNMZW5ndGggLSAxOwogICAgICAgIGZvciAoaiA9IDA7IGogPCBsZW5ndGg7ICsraikgewogICAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpbmRleDsKICAgICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gaW5kZXggKyAyOwogICAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpbmRleCArIDE7CiAgICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGluZGV4ICsgMTsKICAgICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gaW5kZXggKyAyOwogICAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpbmRleCArIDM7CiAgICAgICAgICBpbmRleCArPSA0OwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTLAogICAgICAgICAgYm91bmRpbmdTcGhlcmU6IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVBvaW50cyhwb3NpdGlvbnMpLAogICAgICAgICAgZ2VvbWV0cnlUeXBlOiBHZW9tZXRyeVR5cGVfZGVmYXVsdC5QT0xZTElORVMKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgUG9seWxpbmVHZW9tZXRyeV9kZWZhdWx0ID0gUG9seWxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVBvbHlsaW5lR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlUG9seWxpbmVHZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlUG9seWxpbmVHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVQb2x5bGluZUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVQb2x5bGluZUdlb21ldHJ5KHBvbHlsaW5lR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIHBvbHlsaW5lR2VvbWV0cnkgPSBQb2x5bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKHBvbHlsaW5lR2VvbWV0cnksIG9mZnNldCk7CiAgICB9CiAgICBwb2x5bGluZUdlb21ldHJ5Ll9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShwb2x5bGluZUdlb21ldHJ5Ll9lbGxpcHNvaWQpOwogICAgcmV0dXJuIFBvbHlsaW5lR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShwb2x5bGluZUdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZVBvbHlsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVQb2x5bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVQb2x5bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfUG9seWxpbmVHZW9tZXRyeSgpOwogICAgICBjcmVhdGVQb2x5bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVQb2x5bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUG9seWxpbmVWb2x1bWVHZW9tZXRyeS5qcwogIGZ1bmN0aW9uIGNvbXB1dGVBdHRyaWJ1dGVzMihjb21iaW5lZFBvc2l0aW9ucywgc2hhcGUsIGJvdW5kaW5nUmVjdGFuZ2xlLCB2ZXJ0ZXhGb3JtYXQpIHsKICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoKTsKICAgIGlmICh2ZXJ0ZXhGb3JtYXQucG9zaXRpb24pIHsKICAgICAgYXR0cmlidXRlcy5wb3NpdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IGNvbWJpbmVkUG9zaXRpb25zCiAgICAgIH0pOwogICAgfQogICAgY29uc3Qgc2hhcGVMZW5ndGggPSBzaGFwZS5sZW5ndGg7CiAgICBjb25zdCB2ZXJ0ZXhDb3VudCA9IGNvbWJpbmVkUG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICBjb25zdCBsZW5ndGggPSAodmVydGV4Q291bnQgLSBzaGFwZUxlbmd0aCAqIDIpIC8gKHNoYXBlTGVuZ3RoICogMik7CiAgICBjb25zdCBmaXJzdEVuZEluZGljZXMgPSBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdC50cmlhbmd1bGF0ZShzaGFwZSk7CiAgICBjb25zdCBpbmRpY2VzQ291bnQgPSAobGVuZ3RoIC0gMSkgKiBzaGFwZUxlbmd0aCAqIDYgKyBmaXJzdEVuZEluZGljZXMubGVuZ3RoICogMjsKICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSh2ZXJ0ZXhDb3VudCwgaW5kaWNlc0NvdW50KTsKICAgIGxldCBpLCBqOwogICAgbGV0IGxsLCB1bCwgdXIsIGxyOwogICAgY29uc3Qgb2Zmc2V0ID0gc2hhcGVMZW5ndGggKiAyOwogICAgbGV0IGluZGV4ID0gMDsKICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGggLSAxOyBpKyspIHsKICAgICAgZm9yIChqID0gMDsgaiA8IHNoYXBlTGVuZ3RoIC0gMTsgaisrKSB7CiAgICAgICAgbGwgPSBqICogMiArIGkgKiBzaGFwZUxlbmd0aCAqIDI7CiAgICAgICAgbHIgPSBsbCArIG9mZnNldDsKICAgICAgICB1bCA9IGxsICsgMTsKICAgICAgICB1ciA9IHVsICsgb2Zmc2V0OwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSB1bDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gbGw7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHVyOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSB1cjsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gbGw7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGxyOwogICAgICB9CiAgICAgIGxsID0gc2hhcGVMZW5ndGggKiAyIC0gMiArIGkgKiBzaGFwZUxlbmd0aCAqIDI7CiAgICAgIHVsID0gbGwgKyAxOwogICAgICB1ciA9IHVsICsgb2Zmc2V0OwogICAgICBsciA9IGxsICsgb2Zmc2V0OwogICAgICBpbmRpY2VzW2luZGV4KytdID0gdWw7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBsbDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHVyOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gdXI7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBsbDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGxyOwogICAgfQogICAgaWYgKHZlcnRleEZvcm1hdC5zdCB8fCB2ZXJ0ZXhGb3JtYXQudGFuZ2VudCB8fCB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgIGNvbnN0IHN0ID0gbmV3IEZsb2F0MzJBcnJheSh2ZXJ0ZXhDb3VudCAqIDIpOwogICAgICBjb25zdCBsZW5ndGhTdCA9IDEgLyAobGVuZ3RoIC0gMSk7CiAgICAgIGNvbnN0IGhlaWdodFN0ID0gMSAvIGJvdW5kaW5nUmVjdGFuZ2xlLmhlaWdodDsKICAgICAgY29uc3QgaGVpZ2h0T2Zmc2V0ID0gYm91bmRpbmdSZWN0YW5nbGUuaGVpZ2h0IC8gMjsKICAgICAgbGV0IHMsIHQ7CiAgICAgIGxldCBzdGluZGV4ID0gMDsKICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgcyA9IGkgKiBsZW5ndGhTdDsKICAgICAgICB0ID0gaGVpZ2h0U3QgKiAoc2hhcGVbMF0ueSArIGhlaWdodE9mZnNldCk7CiAgICAgICAgc3Rbc3RpbmRleCsrXSA9IHM7CiAgICAgICAgc3Rbc3RpbmRleCsrXSA9IHQ7CiAgICAgICAgZm9yIChqID0gMTsgaiA8IHNoYXBlTGVuZ3RoOyBqKyspIHsKICAgICAgICAgIHQgPSBoZWlnaHRTdCAqIChzaGFwZVtqXS55ICsgaGVpZ2h0T2Zmc2V0KTsKICAgICAgICAgIHN0W3N0aW5kZXgrK10gPSBzOwogICAgICAgICAgc3Rbc3RpbmRleCsrXSA9IHQ7CiAgICAgICAgICBzdFtzdGluZGV4KytdID0gczsKICAgICAgICAgIHN0W3N0aW5kZXgrK10gPSB0OwogICAgICAgIH0KICAgICAgICB0ID0gaGVpZ2h0U3QgKiAoc2hhcGVbMF0ueSArIGhlaWdodE9mZnNldCk7CiAgICAgICAgc3Rbc3RpbmRleCsrXSA9IHM7CiAgICAgICAgc3Rbc3RpbmRleCsrXSA9IHQ7CiAgICAgIH0KICAgICAgZm9yIChqID0gMDsgaiA8IHNoYXBlTGVuZ3RoOyBqKyspIHsKICAgICAgICBzID0gMDsKICAgICAgICB0ID0gaGVpZ2h0U3QgKiAoc2hhcGVbal0ueSArIGhlaWdodE9mZnNldCk7CiAgICAgICAgc3Rbc3RpbmRleCsrXSA9IHM7CiAgICAgICAgc3Rbc3RpbmRleCsrXSA9IHQ7CiAgICAgIH0KICAgICAgZm9yIChqID0gMDsgaiA8IHNoYXBlTGVuZ3RoOyBqKyspIHsKICAgICAgICBzID0gKGxlbmd0aCAtIDEpICogbGVuZ3RoU3Q7CiAgICAgICAgdCA9IGhlaWdodFN0ICogKHNoYXBlW2pdLnkgKyBoZWlnaHRPZmZzZXQpOwogICAgICAgIHN0W3N0aW5kZXgrK10gPSBzOwogICAgICAgIHN0W3N0aW5kZXgrK10gPSB0OwogICAgICB9CiAgICAgIGF0dHJpYnV0ZXMuc3QgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMiwKICAgICAgICB2YWx1ZXM6IG5ldyBGbG9hdDMyQXJyYXkoc3QpCiAgICAgIH0pOwogICAgfQogICAgY29uc3QgZW5kT2Zmc2V0ID0gdmVydGV4Q291bnQgLSBzaGFwZUxlbmd0aCAqIDI7CiAgICBmb3IgKGkgPSAwOyBpIDwgZmlyc3RFbmRJbmRpY2VzLmxlbmd0aDsgaSArPSAzKSB7CiAgICAgIGNvbnN0IHYwMiA9IGZpcnN0RW5kSW5kaWNlc1tpXSArIGVuZE9mZnNldDsKICAgICAgY29uc3QgdjEyID0gZmlyc3RFbmRJbmRpY2VzW2kgKyAxXSArIGVuZE9mZnNldDsKICAgICAgY29uc3QgdjIyID0gZmlyc3RFbmRJbmRpY2VzW2kgKyAyXSArIGVuZE9mZnNldDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHYwMjsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHYxMjsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHYyMjsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHYyMiArIHNoYXBlTGVuZ3RoOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gdjEyICsgc2hhcGVMZW5ndGg7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSB2MDIgKyBzaGFwZUxlbmd0aDsKICAgIH0KICAgIGxldCBnZW9tZXRyeSA9IG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgYXR0cmlidXRlcywKICAgICAgaW5kaWNlcywKICAgICAgYm91bmRpbmdTcGhlcmU6IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVZlcnRpY2VzKGNvbWJpbmVkUG9zaXRpb25zKSwKICAgICAgcHJpbWl0aXZlVHlwZTogUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlRSSUFOR0xFUwogICAgfSk7CiAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICBnZW9tZXRyeSA9IEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5jb21wdXRlTm9ybWFsKGdlb21ldHJ5KTsKICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCB8fCB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgIHRyeSB7CiAgICAgICAgZ2VvbWV0cnkgPSBHZW9tZXRyeVBpcGVsaW5lX2RlZmF1bHQuY29tcHV0ZVRhbmdlbnRBbmRCaXRhbmdlbnQoZ2VvbWV0cnkpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgb25lVGltZVdhcm5pbmdfZGVmYXVsdCgKICAgICAgICAgICJwb2x5bGluZS12b2x1bWUtdGFuZ2VudC1iaXRhbmdlbnQiLAogICAgICAgICAgIlVuYWJsZSB0byBjb21wdXRlIHRhbmdlbnRzIGFuZCBiaXRhbmdlbnRzIGZvciBwb2x5bGluZSB2b2x1bWUgZ2VvbWV0cnkiCiAgICAgICAgKTsKICAgICAgfQogICAgICBpZiAoIXZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy50YW5nZW50ID0gdm9pZCAwOwogICAgICB9CiAgICAgIGlmICghdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMuYml0YW5nZW50ID0gdm9pZCAwOwogICAgICB9CiAgICAgIGlmICghdmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5zdCA9IHZvaWQgMDsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGdlb21ldHJ5OwogIH0KICBmdW5jdGlvbiBQb2x5bGluZVZvbHVtZUdlb21ldHJ5KG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgY29uc3QgcG9zaXRpb25zID0gb3B0aW9ucy5wb2x5bGluZVBvc2l0aW9uczsKICAgIGNvbnN0IHNoYXBlID0gb3B0aW9ucy5zaGFwZVBvc2l0aW9uczsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9ucykpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm9wdGlvbnMucG9seWxpbmVQb3NpdGlvbnMgaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChzaGFwZSkpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm9wdGlvbnMuc2hhcGVQb3NpdGlvbnMgaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICB0aGlzLl9wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICB0aGlzLl9zaGFwZSA9IHNoYXBlOwogICAgdGhpcy5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoCiAgICAgIGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NCkKICAgICk7CiAgICB0aGlzLl9jb3JuZXJUeXBlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5jb3JuZXJUeXBlLCBDb3JuZXJUeXBlX2RlZmF1bHQuUk9VTkRFRCk7CiAgICB0aGlzLl92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSgKICAgICAgZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy52ZXJ0ZXhGb3JtYXQsIFZlcnRleEZvcm1hdF9kZWZhdWx0LkRFRkFVTFQpCiAgICApOwogICAgdGhpcy5fZ3JhbnVsYXJpdHkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgb3B0aW9ucy5ncmFudWxhcml0eSwKICAgICAgTWF0aF9kZWZhdWx0LlJBRElBTlNfUEVSX0RFR1JFRQogICAgKTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlUG9seWxpbmVWb2x1bWVHZW9tZXRyeSI7CiAgICBsZXQgbnVtQ29tcG9uZW50cyA9IDEgKyBwb3NpdGlvbnMubGVuZ3RoICogQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgIG51bUNvbXBvbmVudHMgKz0gMSArIHNoYXBlLmxlbmd0aCAqIENhcnRlc2lhbjJfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICB0aGlzLnBhY2tlZExlbmd0aCA9IG51bUNvbXBvbmVudHMgKyBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyAyOwogIH0KICB2YXIgc2NyYXRjaEVsbGlwc29pZDksIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQxMSwgc2NyYXRjaE9wdGlvbnMxNywgYnJTY3JhdGNoLCBQb2x5bGluZVZvbHVtZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfUG9seWxpbmVWb2x1bWVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUG9seWxpbmVWb2x1bWVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfYXJyYXlSZW1vdmVEdXBsaWNhdGVzKCk7CiAgICAgIGluaXRfQm91bmRpbmdSZWN0YW5nbGUoKTsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9Db3JuZXJUeXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X0dlb21ldHJ5UGlwZWxpbmUoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X29uZVRpbWVXYXJuaW5nKCk7CiAgICAgIGluaXRfUG9seWdvblBpcGVsaW5lKCk7CiAgICAgIGluaXRfUG9seWxpbmVWb2x1bWVHZW9tZXRyeUxpYnJhcnkoKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIGluaXRfVmVydGV4Rm9ybWF0KCk7CiAgICAgIGluaXRfV2luZGluZ09yZGVyKCk7CiAgICAgIFBvbHlsaW5lVm9sdW1lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHZhbHVlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInZhbHVlIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBsZXQgaTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSB2YWx1ZS5fcG9zaXRpb25zOwogICAgICAgIGxldCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBsZW5ndGg7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHBvc2l0aW9uc1tpXSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBzaGFwZSA9IHZhbHVlLl9zaGFwZTsKICAgICAgICBsZW5ndGggPSBzaGFwZS5sZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IGxlbmd0aDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2ksIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuMl9kZWZhdWx0LnBhY2tlZExlbmd0aCkgewogICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0LnBhY2soc2hhcGVbaV0sIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgRWxsaXBzb2lkX2RlZmF1bHQucGFjayh2YWx1ZS5fZWxsaXBzb2lkLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFjayh2YWx1ZS5fdmVydGV4Rm9ybWF0LCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9jb3JuZXJUeXBlOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gdmFsdWUuX2dyYW51bGFyaXR5OwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaEVsbGlwc29pZDkgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShFbGxpcHNvaWRfZGVmYXVsdC5VTklUX1NQSEVSRSk7CiAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQxMSA9IG5ldyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoT3B0aW9uczE3ID0gewogICAgICAgIHBvbHlsaW5lUG9zaXRpb25zOiB2b2lkIDAsCiAgICAgICAgc2hhcGVQb3NpdGlvbnM6IHZvaWQgMCwKICAgICAgICBlbGxpcHNvaWQ6IHNjcmF0Y2hFbGxpcHNvaWQ5LAogICAgICAgIHZlcnRleEZvcm1hdDogc2NyYXRjaFZlcnRleEZvcm1hdDExLAogICAgICAgIGNvcm5lclR5cGU6IHZvaWQgMCwKICAgICAgICBncmFudWxhcml0eTogdm9pZCAwCiAgICAgIH07CiAgICAgIFBvbHlsaW5lVm9sdW1lR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBsZXQgaTsKICAgICAgICBsZXQgbGVuZ3RoID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2ksIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCkgewogICAgICAgICAgcG9zaXRpb25zW2ldID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgfQogICAgICAgIGxlbmd0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgc2hhcGUgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2ksIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuMl9kZWZhdWx0LnBhY2tlZExlbmd0aCkgewogICAgICAgICAgc2hhcGVbaV0gPSBDYXJ0ZXNpYW4yX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4LCBzY3JhdGNoRWxsaXBzb2lkOSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdDExCiAgICAgICAgKTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBjb3JuZXJUeXBlID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTcucG9seWxpbmVQb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE3LnNoYXBlUG9zaXRpb25zID0gc2hhcGU7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE3LmNvcm5lclR5cGUgPSBjb3JuZXJUeXBlOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxNy5ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgICAgICAgcmV0dXJuIG5ldyBQb2x5bGluZVZvbHVtZUdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zMTcpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuX3Bvc2l0aW9ucyA9IHBvc2l0aW9uczsKICAgICAgICByZXN1bHQuX3NoYXBlID0gc2hhcGU7CiAgICAgICAgcmVzdWx0Ll9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWQsIHJlc3VsdC5fZWxsaXBzb2lkKTsKICAgICAgICByZXN1bHQuX3ZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LmNsb25lKHZlcnRleEZvcm1hdCwgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQpOwogICAgICAgIHJlc3VsdC5fY29ybmVyVHlwZSA9IGNvcm5lclR5cGU7CiAgICAgICAgcmVzdWx0Ll9ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIGJyU2NyYXRjaCA9IG5ldyBCb3VuZGluZ1JlY3RhbmdsZV9kZWZhdWx0KCk7CiAgICAgIFBvbHlsaW5lVm9sdW1lR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihwb2x5bGluZVZvbHVtZUdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gcG9seWxpbmVWb2x1bWVHZW9tZXRyeS5fcG9zaXRpb25zOwogICAgICAgIGNvbnN0IGNsZWFuUG9zaXRpb25zID0gYXJyYXlSZW1vdmVEdXBsaWNhdGVzX2RlZmF1bHQoCiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbgogICAgICAgICk7CiAgICAgICAgbGV0IHNoYXBlMkQgPSBwb2x5bGluZVZvbHVtZUdlb21ldHJ5Ll9zaGFwZTsKICAgICAgICBzaGFwZTJEID0gUG9seWxpbmVWb2x1bWVHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5yZW1vdmVEdXBsaWNhdGVzRnJvbVNoYXBlKHNoYXBlMkQpOwogICAgICAgIGlmIChjbGVhblBvc2l0aW9ucy5sZW5ndGggPCAyIHx8IHNoYXBlMkQubGVuZ3RoIDwgMykgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LmNvbXB1dGVXaW5kaW5nT3JkZXIyRChzaGFwZTJEKSA9PT0gV2luZGluZ09yZGVyX2RlZmF1bHQuQ0xPQ0tXSVNFKSB7CiAgICAgICAgICBzaGFwZTJELnJldmVyc2UoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgYm91bmRpbmdSZWN0YW5nbGUgPSBCb3VuZGluZ1JlY3RhbmdsZV9kZWZhdWx0LmZyb21Qb2ludHMoc2hhcGUyRCwgYnJTY3JhdGNoKTsKICAgICAgICBjb25zdCBjb21wdXRlZFBvc2l0aW9ucyA9IFBvbHlsaW5lVm9sdW1lR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZVBvc2l0aW9ucygKICAgICAgICAgIGNsZWFuUG9zaXRpb25zLAogICAgICAgICAgc2hhcGUyRCwKICAgICAgICAgIGJvdW5kaW5nUmVjdGFuZ2xlLAogICAgICAgICAgcG9seWxpbmVWb2x1bWVHZW9tZXRyeSwKICAgICAgICAgIHRydWUKICAgICAgICApOwogICAgICAgIHJldHVybiBjb21wdXRlQXR0cmlidXRlczIoCiAgICAgICAgICBjb21wdXRlZFBvc2l0aW9ucywKICAgICAgICAgIHNoYXBlMkQsCiAgICAgICAgICBib3VuZGluZ1JlY3RhbmdsZSwKICAgICAgICAgIHBvbHlsaW5lVm9sdW1lR2VvbWV0cnkuX3ZlcnRleEZvcm1hdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIFBvbHlsaW5lVm9sdW1lR2VvbWV0cnlfZGVmYXVsdCA9IFBvbHlsaW5lVm9sdW1lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVQb2x5bGluZVZvbHVtZUdlb21ldHJ5LmpzCiAgdmFyIGNyZWF0ZVBvbHlsaW5lVm9sdW1lR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZVBvbHlsaW5lVm9sdW1lR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlUG9seWxpbmVWb2x1bWVHZW9tZXRyeV9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY3JlYXRlUG9seWxpbmVWb2x1bWVHZW9tZXRyeShwb2x5bGluZVZvbHVtZUdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICBwb2x5bGluZVZvbHVtZUdlb21ldHJ5ID0gUG9seWxpbmVWb2x1bWVHZW9tZXRyeV9kZWZhdWx0LnVucGFjaygKICAgICAgICBwb2x5bGluZVZvbHVtZUdlb21ldHJ5LAogICAgICAgIG9mZnNldAogICAgICApOwogICAgfQogICAgcG9seWxpbmVWb2x1bWVHZW9tZXRyeS5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoCiAgICAgIHBvbHlsaW5lVm9sdW1lR2VvbWV0cnkuX2VsbGlwc29pZAogICAgKTsKICAgIHJldHVybiBQb2x5bGluZVZvbHVtZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkocG9seWxpbmVWb2x1bWVHZW9tZXRyeSk7CiAgfQogIHZhciBjcmVhdGVQb2x5bGluZVZvbHVtZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlUG9seWxpbmVWb2x1bWVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlUG9seWxpbmVWb2x1bWVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X1BvbHlsaW5lVm9sdW1lR2VvbWV0cnkoKTsKICAgICAgY3JlYXRlUG9seWxpbmVWb2x1bWVHZW9tZXRyeV9kZWZhdWx0ID0gY3JlYXRlUG9seWxpbmVWb2x1bWVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gY29tcHV0ZUF0dHJpYnV0ZXMzKHBvc2l0aW9ucywgc2hhcGUpIHsKICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoKTsKICAgIGF0dHJpYnV0ZXMucG9zaXRpb24gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgdmFsdWVzOiBwb3NpdGlvbnMKICAgIH0pOwogICAgY29uc3Qgc2hhcGVMZW5ndGggPSBzaGFwZS5sZW5ndGg7CiAgICBjb25zdCB2ZXJ0ZXhDb3VudCA9IGF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLmxlbmd0aCAvIDM7CiAgICBjb25zdCBwb3NpdGlvbkxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGggLyAzOwogICAgY29uc3Qgc2hhcGVDb3VudCA9IHBvc2l0aW9uTGVuZ3RoIC8gc2hhcGVMZW5ndGg7CiAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgIHZlcnRleENvdW50LAogICAgICAyICogc2hhcGVMZW5ndGggKiAoc2hhcGVDb3VudCArIDEpCiAgICApOwogICAgbGV0IGksIGo7CiAgICBsZXQgaW5kZXggPSAwOwogICAgaSA9IDA7CiAgICBsZXQgb2Zmc2V0ID0gaSAqIHNoYXBlTGVuZ3RoOwogICAgZm9yIChqID0gMDsgaiA8IHNoYXBlTGVuZ3RoIC0gMTsgaisrKSB7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBqICsgb2Zmc2V0OwogICAgICBpbmRpY2VzW2luZGV4KytdID0gaiArIG9mZnNldCArIDE7CiAgICB9CiAgICBpbmRpY2VzW2luZGV4KytdID0gc2hhcGVMZW5ndGggLSAxICsgb2Zmc2V0OwogICAgaW5kaWNlc1tpbmRleCsrXSA9IG9mZnNldDsKICAgIGkgPSBzaGFwZUNvdW50IC0gMTsKICAgIG9mZnNldCA9IGkgKiBzaGFwZUxlbmd0aDsKICAgIGZvciAoaiA9IDA7IGogPCBzaGFwZUxlbmd0aCAtIDE7IGorKykgewogICAgICBpbmRpY2VzW2luZGV4KytdID0gaiArIG9mZnNldDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGogKyBvZmZzZXQgKyAxOwogICAgfQogICAgaW5kaWNlc1tpbmRleCsrXSA9IHNoYXBlTGVuZ3RoIC0gMSArIG9mZnNldDsKICAgIGluZGljZXNbaW5kZXgrK10gPSBvZmZzZXQ7CiAgICBmb3IgKGkgPSAwOyBpIDwgc2hhcGVDb3VudCAtIDE7IGkrKykgewogICAgICBjb25zdCBmaXJzdE9mZnNldCA9IHNoYXBlTGVuZ3RoICogaTsKICAgICAgY29uc3Qgc2Vjb25kT2Zmc2V0ID0gZmlyc3RPZmZzZXQgKyBzaGFwZUxlbmd0aDsKICAgICAgZm9yIChqID0gMDsgaiA8IHNoYXBlTGVuZ3RoOyBqKyspIHsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaiArIGZpcnN0T2Zmc2V0OwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBqICsgc2Vjb25kT2Zmc2V0OwogICAgICB9CiAgICB9CiAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgYXR0cmlidXRlcywKICAgICAgaW5kaWNlczogSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkodmVydGV4Q291bnQsIGluZGljZXMpLAogICAgICBib3VuZGluZ1NwaGVyZTogQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tVmVydGljZXMocG9zaXRpb25zKSwKICAgICAgcHJpbWl0aXZlVHlwZTogUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVTCiAgICB9KTsKICAgIHJldHVybiBnZW9tZXRyeTsKICB9CiAgZnVuY3Rpb24gUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBvcHRpb25zLnBvbHlsaW5lUG9zaXRpb25zOwogICAgY29uc3Qgc2hhcGUgPSBvcHRpb25zLnNoYXBlUG9zaXRpb25zOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy5wb2x5bGluZVBvc2l0aW9ucyBpcyByZXF1aXJlZC4iKTsKICAgIH0KICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHNoYXBlKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy5zaGFwZVBvc2l0aW9ucyBpcyByZXF1aXJlZC4iKTsKICAgIH0KICAgIHRoaXMuX3Bvc2l0aW9ucyA9IHBvc2l0aW9uczsKICAgIHRoaXMuX3NoYXBlID0gc2hhcGU7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZSgKICAgICAgZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5lbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LldHUzg0KQogICAgKTsKICAgIHRoaXMuX2Nvcm5lclR5cGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmNvcm5lclR5cGUsIENvcm5lclR5cGVfZGVmYXVsdC5ST1VOREVEKTsKICAgIHRoaXMuX2dyYW51bGFyaXR5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgIG9wdGlvbnMuZ3JhbnVsYXJpdHksCiAgICAgIE1hdGhfZGVmYXVsdC5SQURJQU5TX1BFUl9ERUdSRUUKICAgICk7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZVBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5IjsKICAgIGxldCBudW1Db21wb25lbnRzID0gMSArIHBvc2l0aW9ucy5sZW5ndGggKiBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgbnVtQ29tcG9uZW50cyArPSAxICsgc2hhcGUubGVuZ3RoICogQ2FydGVzaWFuMl9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgIHRoaXMucGFja2VkTGVuZ3RoID0gbnVtQ29tcG9uZW50cyArIEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIDI7CiAgfQogIHZhciBzY3JhdGNoRWxsaXBzb2lkMTAsIHNjcmF0Y2hPcHRpb25zMTgsIGJyU2NyYXRjaDIsIFBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9hcnJheVJlbW92ZUR1cGxpY2F0ZXMoKTsKICAgICAgaW5pdF9Cb3VuZGluZ1JlY3RhbmdsZSgpOwogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X0Nvcm5lclR5cGUoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9Qb2x5Z29uUGlwZWxpbmUoKTsKICAgICAgaW5pdF9Qb2x5bGluZVZvbHVtZUdlb21ldHJ5TGlicmFyeSgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgaW5pdF9XaW5kaW5nT3JkZXIoKTsKICAgICAgUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHZhbHVlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInZhbHVlIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBsZXQgaTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSB2YWx1ZS5fcG9zaXRpb25zOwogICAgICAgIGxldCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBsZW5ndGg7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHBvc2l0aW9uc1tpXSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBzaGFwZSA9IHZhbHVlLl9zaGFwZTsKICAgICAgICBsZW5ndGggPSBzaGFwZS5sZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IGxlbmd0aDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2ksIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuMl9kZWZhdWx0LnBhY2tlZExlbmd0aCkgewogICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0LnBhY2soc2hhcGVbaV0sIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgRWxsaXBzb2lkX2RlZmF1bHQucGFjayh2YWx1ZS5fZWxsaXBzb2lkLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9jb3JuZXJUeXBlOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gdmFsdWUuX2dyYW51bGFyaXR5OwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaEVsbGlwc29pZDEwID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoRWxsaXBzb2lkX2RlZmF1bHQuVU5JVF9TUEhFUkUpOwogICAgICBzY3JhdGNoT3B0aW9uczE4ID0gewogICAgICAgIHBvbHlsaW5lUG9zaXRpb25zOiB2b2lkIDAsCiAgICAgICAgc2hhcGVQb3NpdGlvbnM6IHZvaWQgMCwKICAgICAgICBlbGxpcHNvaWQ6IHNjcmF0Y2hFbGxpcHNvaWQxMCwKICAgICAgICBoZWlnaHQ6IHZvaWQgMCwKICAgICAgICBjb3JuZXJUeXBlOiB2b2lkIDAsCiAgICAgICAgZ3JhbnVsYXJpdHk6IHZvaWQgMAogICAgICB9OwogICAgICBQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYXJyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXJyYXkgaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGxldCBpOwogICAgICAgIGxldCBsZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBwb3NpdGlvbnNbaV0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgbGVuZ3RoID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBzaGFwZSA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4yX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBzaGFwZVtpXSA9IENhcnRlc2lhbjJfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hFbGxpcHNvaWQxMCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgY29ybmVyVHlwZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE4LnBvbHlsaW5lUG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxOC5zaGFwZVBvc2l0aW9ucyA9IHNoYXBlOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxOC5jb3JuZXJUeXBlID0gY29ybmVyVHlwZTsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTguZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICAgIHJldHVybiBuZXcgUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkoc2NyYXRjaE9wdGlvbnMxOCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fcG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgICAgIHJlc3VsdC5fc2hhcGUgPSBzaGFwZTsKICAgICAgICByZXN1bHQuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKGVsbGlwc29pZCwgcmVzdWx0Ll9lbGxpcHNvaWQpOwogICAgICAgIHJlc3VsdC5fY29ybmVyVHlwZSA9IGNvcm5lclR5cGU7CiAgICAgICAgcmVzdWx0Ll9ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIGJyU2NyYXRjaDIgPSBuZXcgQm91bmRpbmdSZWN0YW5nbGVfZGVmYXVsdCgpOwogICAgICBQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKHBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gcG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkuX3Bvc2l0aW9uczsKICAgICAgICBjb25zdCBjbGVhblBvc2l0aW9ucyA9IGFycmF5UmVtb3ZlRHVwbGljYXRlc19kZWZhdWx0KAogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24KICAgICAgICApOwogICAgICAgIGxldCBzaGFwZTJEID0gcG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkuX3NoYXBlOwogICAgICAgIHNoYXBlMkQgPSBQb2x5bGluZVZvbHVtZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnJlbW92ZUR1cGxpY2F0ZXNGcm9tU2hhcGUoc2hhcGUyRCk7CiAgICAgICAgaWYgKGNsZWFuUG9zaXRpb25zLmxlbmd0aCA8IDIgfHwgc2hhcGUyRC5sZW5ndGggPCAzKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoUG9seWdvblBpcGVsaW5lX2RlZmF1bHQuY29tcHV0ZVdpbmRpbmdPcmRlcjJEKHNoYXBlMkQpID09PSBXaW5kaW5nT3JkZXJfZGVmYXVsdC5DTE9DS1dJU0UpIHsKICAgICAgICAgIHNoYXBlMkQucmV2ZXJzZSgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBib3VuZGluZ1JlY3RhbmdsZSA9IEJvdW5kaW5nUmVjdGFuZ2xlX2RlZmF1bHQuZnJvbVBvaW50cyhzaGFwZTJELCBiclNjcmF0Y2gyKTsKICAgICAgICBjb25zdCBjb21wdXRlZFBvc2l0aW9ucyA9IFBvbHlsaW5lVm9sdW1lR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZVBvc2l0aW9ucygKICAgICAgICAgIGNsZWFuUG9zaXRpb25zLAogICAgICAgICAgc2hhcGUyRCwKICAgICAgICAgIGJvdW5kaW5nUmVjdGFuZ2xlLAogICAgICAgICAgcG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnksCiAgICAgICAgICBmYWxzZQogICAgICAgICk7CiAgICAgICAgcmV0dXJuIGNvbXB1dGVBdHRyaWJ1dGVzMyhjb21wdXRlZFBvc2l0aW9ucywgc2hhcGUyRCk7CiAgICAgIH07CiAgICAgIFBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5LmpzCiAgdmFyIGNyZWF0ZVBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY3JlYXRlUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkocG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIHBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5ID0gUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soCiAgICAgICAgcG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnksCiAgICAgICAgb2Zmc2V0CiAgICAgICk7CiAgICB9CiAgICBwb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeS5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoCiAgICAgIHBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5Ll9lbGxpcHNvaWQKICAgICk7CiAgICByZXR1cm4gUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeSgKICAgICAgcG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkKICAgICk7CiAgfQogIHZhciBjcmVhdGVQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X1BvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5KCk7CiAgICAgIGNyZWF0ZVBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1JlY3RhbmdsZUdlb21ldHJ5TGlicmFyeS5qcwogIGZ1bmN0aW9uIGdldFJvdGF0aW9uT3B0aW9ucyhud0Nvcm5lciwgcm90YXRpb24sIGdyYW51bGFyaXR5WCwgZ3JhbnVsYXJpdHlZLCBjZW50ZXIsIHdpZHRoLCBoZWlnaHQpIHsKICAgIGNvbnN0IGNvc1JvdGF0aW9uID0gTWF0aC5jb3Mocm90YXRpb24pOwogICAgY29uc3QgZ3JhbllDb3MgPSBncmFudWxhcml0eVkgKiBjb3NSb3RhdGlvbjsKICAgIGNvbnN0IGdyYW5YQ29zID0gZ3JhbnVsYXJpdHlYICogY29zUm90YXRpb247CiAgICBjb25zdCBzaW5Sb3RhdGlvbiA9IE1hdGguc2luKHJvdGF0aW9uKTsKICAgIGNvbnN0IGdyYW5ZU2luID0gZ3JhbnVsYXJpdHlZICogc2luUm90YXRpb247CiAgICBjb25zdCBncmFuWFNpbiA9IGdyYW51bGFyaXR5WCAqIHNpblJvdGF0aW9uOwogICAgbndDYXJ0ZXNpYW4gPSBwcm9qLnByb2plY3QobndDb3JuZXIsIG53Q2FydGVzaWFuKTsKICAgIG53Q2FydGVzaWFuID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KG53Q2FydGVzaWFuLCBjZW50ZXJDYXJ0ZXNpYW4sIG53Q2FydGVzaWFuKTsKICAgIGNvbnN0IHJvdGF0aW9uTWF0cml4ID0gTWF0cml4Ml9kZWZhdWx0LmZyb21Sb3RhdGlvbihyb3RhdGlvbiwgcm90YXRpb25NYXRyaXhTY3JhdGNoKTsKICAgIG53Q2FydGVzaWFuID0gTWF0cml4Ml9kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IoCiAgICAgIHJvdGF0aW9uTWF0cml4LAogICAgICBud0NhcnRlc2lhbiwKICAgICAgbndDYXJ0ZXNpYW4KICAgICk7CiAgICBud0NhcnRlc2lhbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobndDYXJ0ZXNpYW4sIGNlbnRlckNhcnRlc2lhbiwgbndDYXJ0ZXNpYW4pOwogICAgbndDb3JuZXIgPSBwcm9qLnVucHJvamVjdChud0NhcnRlc2lhbiwgbndDb3JuZXIpOwogICAgd2lkdGggLT0gMTsKICAgIGhlaWdodCAtPSAxOwogICAgY29uc3QgbGF0aXR1ZGUgPSBud0Nvcm5lci5sYXRpdHVkZTsKICAgIGNvbnN0IGxhdGl0dWRlMCA9IGxhdGl0dWRlICsgd2lkdGggKiBncmFuWFNpbjsKICAgIGNvbnN0IGxhdGl0dWRlMSA9IGxhdGl0dWRlIC0gZ3JhbllDb3MgKiBoZWlnaHQ7CiAgICBjb25zdCBsYXRpdHVkZTIgPSBsYXRpdHVkZSAtIGdyYW5ZQ29zICogaGVpZ2h0ICsgd2lkdGggKiBncmFuWFNpbjsKICAgIGNvbnN0IG5vcnRoID0gTWF0aC5tYXgobGF0aXR1ZGUsIGxhdGl0dWRlMCwgbGF0aXR1ZGUxLCBsYXRpdHVkZTIpOwogICAgY29uc3Qgc291dGggPSBNYXRoLm1pbihsYXRpdHVkZSwgbGF0aXR1ZGUwLCBsYXRpdHVkZTEsIGxhdGl0dWRlMik7CiAgICBjb25zdCBsb25naXR1ZGUgPSBud0Nvcm5lci5sb25naXR1ZGU7CiAgICBjb25zdCBsb25naXR1ZGUwID0gbG9uZ2l0dWRlICsgd2lkdGggKiBncmFuWENvczsKICAgIGNvbnN0IGxvbmdpdHVkZTEgPSBsb25naXR1ZGUgKyBoZWlnaHQgKiBncmFuWVNpbjsKICAgIGNvbnN0IGxvbmdpdHVkZTIgPSBsb25naXR1ZGUgKyBoZWlnaHQgKiBncmFuWVNpbiArIHdpZHRoICogZ3JhblhDb3M7CiAgICBjb25zdCBlYXN0ID0gTWF0aC5tYXgobG9uZ2l0dWRlLCBsb25naXR1ZGUwLCBsb25naXR1ZGUxLCBsb25naXR1ZGUyKTsKICAgIGNvbnN0IHdlc3QgPSBNYXRoLm1pbihsb25naXR1ZGUsIGxvbmdpdHVkZTAsIGxvbmdpdHVkZTEsIGxvbmdpdHVkZTIpOwogICAgcmV0dXJuIHsKICAgICAgbm9ydGgsCiAgICAgIHNvdXRoLAogICAgICBlYXN0LAogICAgICB3ZXN0LAogICAgICBncmFuWUNvcywKICAgICAgZ3JhbllTaW4sCiAgICAgIGdyYW5YQ29zLAogICAgICBncmFuWFNpbiwKICAgICAgbndDb3JuZXIKICAgIH07CiAgfQogIHZhciBjb3MzLCBzaW4zLCBzcXJ0LCBSZWN0YW5nbGVHZW9tZXRyeUxpYnJhcnksIHJvdGF0aW9uTWF0cml4U2NyYXRjaCwgbndDYXJ0ZXNpYW4sIGNlbnRlclNjcmF0Y2gzLCBjZW50ZXJDYXJ0ZXNpYW4sIHByb2osIFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0OwogIHZhciBpbml0X1JlY3RhbmdsZUdlb21ldHJ5TGlicmFyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUmVjdGFuZ2xlR2VvbWV0cnlMaWJyYXJ5LmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfR2VvZ3JhcGhpY1Byb2plY3Rpb24oKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfTWF0cml4MigpOwogICAgICBpbml0X1JlY3RhbmdsZSgpOwogICAgICBjb3MzID0gTWF0aC5jb3M7CiAgICAgIHNpbjMgPSBNYXRoLnNpbjsKICAgICAgc3FydCA9IE1hdGguc3FydDsKICAgICAgUmVjdGFuZ2xlR2VvbWV0cnlMaWJyYXJ5ID0ge307CiAgICAgIFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeS5jb21wdXRlUG9zaXRpb24gPSBmdW5jdGlvbihjb21wdXRlZE9wdGlvbnMsIGVsbGlwc29pZCwgY29tcHV0ZVNULCByb3csIGNvbCwgcG9zaXRpb24sIHN0KSB7CiAgICAgICAgY29uc3QgcmFkaWlTcXVhcmVkID0gZWxsaXBzb2lkLnJhZGlpU3F1YXJlZDsKICAgICAgICBjb25zdCBud0Nvcm5lciA9IGNvbXB1dGVkT3B0aW9ucy5ud0Nvcm5lcjsKICAgICAgICBjb25zdCByZWN0YW5nbGUgPSBjb21wdXRlZE9wdGlvbnMuYm91bmRpbmdSZWN0YW5nbGU7CiAgICAgICAgbGV0IHN0TGF0aXR1ZGUgPSBud0Nvcm5lci5sYXRpdHVkZSAtIGNvbXB1dGVkT3B0aW9ucy5ncmFuWUNvcyAqIHJvdyArIGNvbCAqIGNvbXB1dGVkT3B0aW9ucy5ncmFuWFNpbjsKICAgICAgICBjb25zdCBjb3NMYXRpdHVkZSA9IGNvczMoc3RMYXRpdHVkZSk7CiAgICAgICAgY29uc3QgblogPSBzaW4zKHN0TGF0aXR1ZGUpOwogICAgICAgIGNvbnN0IGtaID0gcmFkaWlTcXVhcmVkLnogKiBuWjsKICAgICAgICBsZXQgc3RMb25naXR1ZGUgPSBud0Nvcm5lci5sb25naXR1ZGUgKyByb3cgKiBjb21wdXRlZE9wdGlvbnMuZ3JhbllTaW4gKyBjb2wgKiBjb21wdXRlZE9wdGlvbnMuZ3JhblhDb3M7CiAgICAgICAgY29uc3QgblggPSBjb3NMYXRpdHVkZSAqIGNvczMoc3RMb25naXR1ZGUpOwogICAgICAgIGNvbnN0IG5ZID0gY29zTGF0aXR1ZGUgKiBzaW4zKHN0TG9uZ2l0dWRlKTsKICAgICAgICBjb25zdCBrWCA9IHJhZGlpU3F1YXJlZC54ICogblg7CiAgICAgICAgY29uc3Qga1kgPSByYWRpaVNxdWFyZWQueSAqIG5ZOwogICAgICAgIGNvbnN0IGdhbW1hID0gc3FydChrWCAqIG5YICsga1kgKiBuWSArIGtaICogblopOwogICAgICAgIHBvc2l0aW9uLnggPSBrWCAvIGdhbW1hOwogICAgICAgIHBvc2l0aW9uLnkgPSBrWSAvIGdhbW1hOwogICAgICAgIHBvc2l0aW9uLnogPSBrWiAvIGdhbW1hOwogICAgICAgIGlmIChjb21wdXRlU1QpIHsKICAgICAgICAgIGNvbnN0IHN0TndDb3JuZXIgPSBjb21wdXRlZE9wdGlvbnMuc3ROd0Nvcm5lcjsKICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoc3ROd0Nvcm5lcikpIHsKICAgICAgICAgICAgc3RMYXRpdHVkZSA9IHN0TndDb3JuZXIubGF0aXR1ZGUgLSBjb21wdXRlZE9wdGlvbnMuc3RHcmFuWUNvcyAqIHJvdyArIGNvbCAqIGNvbXB1dGVkT3B0aW9ucy5zdEdyYW5YU2luOwogICAgICAgICAgICBzdExvbmdpdHVkZSA9IHN0TndDb3JuZXIubG9uZ2l0dWRlICsgcm93ICogY29tcHV0ZWRPcHRpb25zLnN0R3JhbllTaW4gKyBjb2wgKiBjb21wdXRlZE9wdGlvbnMuc3RHcmFuWENvczsKICAgICAgICAgICAgc3QueCA9IChzdExvbmdpdHVkZSAtIGNvbXB1dGVkT3B0aW9ucy5zdFdlc3QpICogY29tcHV0ZWRPcHRpb25zLmxvblNjYWxhcjsKICAgICAgICAgICAgc3QueSA9IChzdExhdGl0dWRlIC0gY29tcHV0ZWRPcHRpb25zLnN0U291dGgpICogY29tcHV0ZWRPcHRpb25zLmxhdFNjYWxhcjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0LnggPSAoc3RMb25naXR1ZGUgLSByZWN0YW5nbGUud2VzdCkgKiBjb21wdXRlZE9wdGlvbnMubG9uU2NhbGFyOwogICAgICAgICAgICBzdC55ID0gKHN0TGF0aXR1ZGUgLSByZWN0YW5nbGUuc291dGgpICogY29tcHV0ZWRPcHRpb25zLmxhdFNjYWxhcjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH07CiAgICAgIHJvdGF0aW9uTWF0cml4U2NyYXRjaCA9IG5ldyBNYXRyaXgyX2RlZmF1bHQoKTsKICAgICAgbndDYXJ0ZXNpYW4gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNlbnRlclNjcmF0Y2gzID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIGNlbnRlckNhcnRlc2lhbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcHJvaiA9IG5ldyBHZW9ncmFwaGljUHJvamVjdGlvbl9kZWZhdWx0KCk7CiAgICAgIFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeS5jb21wdXRlT3B0aW9ucyA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgZ3JhbnVsYXJpdHksIHJvdGF0aW9uLCBzdFJvdGF0aW9uLCBib3VuZGluZ1JlY3RhbmdsZVNjcmF0Y2gsIG53Q29ybmVyUmVzdWx0LCBzdE53Q29ybmVyUmVzdWx0KSB7CiAgICAgICAgbGV0IGVhc3QgPSByZWN0YW5nbGUuZWFzdDsKICAgICAgICBsZXQgd2VzdCA9IHJlY3RhbmdsZS53ZXN0OwogICAgICAgIGxldCBub3J0aCA9IHJlY3RhbmdsZS5ub3J0aDsKICAgICAgICBsZXQgc291dGggPSByZWN0YW5nbGUuc291dGg7CiAgICAgICAgbGV0IG5vcnRoQ2FwID0gZmFsc2U7CiAgICAgICAgbGV0IHNvdXRoQ2FwID0gZmFsc2U7CiAgICAgICAgaWYgKG5vcnRoID09PSBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08pIHsKICAgICAgICAgIG5vcnRoQ2FwID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKHNvdXRoID09PSAtTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPKSB7CiAgICAgICAgICBzb3V0aENhcCA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGxldCBkeDsKICAgICAgICBjb25zdCBkeSA9IG5vcnRoIC0gc291dGg7CiAgICAgICAgaWYgKHdlc3QgPiBlYXN0KSB7CiAgICAgICAgICBkeCA9IE1hdGhfZGVmYXVsdC5UV09fUEkgLSB3ZXN0ICsgZWFzdDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZHggPSBlYXN0IC0gd2VzdDsKICAgICAgICB9CiAgICAgICAgY29uc3Qgd2lkdGggPSBNYXRoLmNlaWwoZHggLyBncmFudWxhcml0eSkgKyAxOwogICAgICAgIGNvbnN0IGhlaWdodCA9IE1hdGguY2VpbChkeSAvIGdyYW51bGFyaXR5KSArIDE7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHlYID0gZHggLyAod2lkdGggLSAxKTsKICAgICAgICBjb25zdCBncmFudWxhcml0eVkgPSBkeSAvIChoZWlnaHQgLSAxKTsKICAgICAgICBjb25zdCBud0Nvcm5lciA9IFJlY3RhbmdsZV9kZWZhdWx0Lm5vcnRod2VzdChyZWN0YW5nbGUsIG53Q29ybmVyUmVzdWx0KTsKICAgICAgICBjb25zdCBjZW50ZXIgPSBSZWN0YW5nbGVfZGVmYXVsdC5jZW50ZXIocmVjdGFuZ2xlLCBjZW50ZXJTY3JhdGNoMyk7CiAgICAgICAgaWYgKHJvdGF0aW9uICE9PSAwIHx8IHN0Um90YXRpb24gIT09IDApIHsKICAgICAgICAgIGlmIChjZW50ZXIubG9uZ2l0dWRlIDwgbndDb3JuZXIubG9uZ2l0dWRlKSB7CiAgICAgICAgICAgIGNlbnRlci5sb25naXR1ZGUgKz0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICAgIH0KICAgICAgICAgIGNlbnRlckNhcnRlc2lhbiA9IHByb2oucHJvamVjdChjZW50ZXIsIGNlbnRlckNhcnRlc2lhbik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdyYW5ZQ29zID0gZ3JhbnVsYXJpdHlZOwogICAgICAgIGNvbnN0IGdyYW5YQ29zID0gZ3JhbnVsYXJpdHlYOwogICAgICAgIGNvbnN0IGdyYW5ZU2luID0gMDsKICAgICAgICBjb25zdCBncmFuWFNpbiA9IDA7CiAgICAgICAgY29uc3QgYm91bmRpbmdSZWN0YW5nbGUgPSBSZWN0YW5nbGVfZGVmYXVsdC5jbG9uZSgKICAgICAgICAgIHJlY3RhbmdsZSwKICAgICAgICAgIGJvdW5kaW5nUmVjdGFuZ2xlU2NyYXRjaAogICAgICAgICk7CiAgICAgICAgY29uc3QgY29tcHV0ZWRPcHRpb25zID0gewogICAgICAgICAgZ3JhbllDb3MsCiAgICAgICAgICBncmFuWVNpbiwKICAgICAgICAgIGdyYW5YQ29zLAogICAgICAgICAgZ3JhblhTaW4sCiAgICAgICAgICBud0Nvcm5lciwKICAgICAgICAgIGJvdW5kaW5nUmVjdGFuZ2xlLAogICAgICAgICAgd2lkdGgsCiAgICAgICAgICBoZWlnaHQsCiAgICAgICAgICBub3J0aENhcCwKICAgICAgICAgIHNvdXRoQ2FwCiAgICAgICAgfTsKICAgICAgICBpZiAocm90YXRpb24gIT09IDApIHsKICAgICAgICAgIGNvbnN0IHJvdGF0aW9uT3B0aW9ucyA9IGdldFJvdGF0aW9uT3B0aW9ucygKICAgICAgICAgICAgbndDb3JuZXIsCiAgICAgICAgICAgIHJvdGF0aW9uLAogICAgICAgICAgICBncmFudWxhcml0eVgsCiAgICAgICAgICAgIGdyYW51bGFyaXR5WSwKICAgICAgICAgICAgY2VudGVyLAogICAgICAgICAgICB3aWR0aCwKICAgICAgICAgICAgaGVpZ2h0CiAgICAgICAgICApOwogICAgICAgICAgbm9ydGggPSByb3RhdGlvbk9wdGlvbnMubm9ydGg7CiAgICAgICAgICBzb3V0aCA9IHJvdGF0aW9uT3B0aW9ucy5zb3V0aDsKICAgICAgICAgIGVhc3QgPSByb3RhdGlvbk9wdGlvbnMuZWFzdDsKICAgICAgICAgIHdlc3QgPSByb3RhdGlvbk9wdGlvbnMud2VzdDsKICAgICAgICAgIGlmIChub3J0aCA8IC1NYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gfHwgbm9ydGggPiBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gfHwgc291dGggPCAtTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPIHx8IHNvdXRoID4gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAgICJSb3RhdGVkIHJlY3RhbmdsZSBpcyBpbnZhbGlkLiAgSXQgY3Jvc3NlcyBvdmVyIGVpdGhlciB0aGUgbm9ydGggb3Igc291dGggcG9sZS4iCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgICBjb21wdXRlZE9wdGlvbnMuZ3JhbllDb3MgPSByb3RhdGlvbk9wdGlvbnMuZ3JhbllDb3M7CiAgICAgICAgICBjb21wdXRlZE9wdGlvbnMuZ3JhbllTaW4gPSByb3RhdGlvbk9wdGlvbnMuZ3JhbllTaW47CiAgICAgICAgICBjb21wdXRlZE9wdGlvbnMuZ3JhblhDb3MgPSByb3RhdGlvbk9wdGlvbnMuZ3JhblhDb3M7CiAgICAgICAgICBjb21wdXRlZE9wdGlvbnMuZ3JhblhTaW4gPSByb3RhdGlvbk9wdGlvbnMuZ3JhblhTaW47CiAgICAgICAgICBib3VuZGluZ1JlY3RhbmdsZS5ub3J0aCA9IG5vcnRoOwogICAgICAgICAgYm91bmRpbmdSZWN0YW5nbGUuc291dGggPSBzb3V0aDsKICAgICAgICAgIGJvdW5kaW5nUmVjdGFuZ2xlLmVhc3QgPSBlYXN0OwogICAgICAgICAgYm91bmRpbmdSZWN0YW5nbGUud2VzdCA9IHdlc3Q7CiAgICAgICAgfQogICAgICAgIGlmIChzdFJvdGF0aW9uICE9PSAwKSB7CiAgICAgICAgICByb3RhdGlvbiA9IHJvdGF0aW9uIC0gc3RSb3RhdGlvbjsKICAgICAgICAgIGNvbnN0IHN0TndDb3JuZXIgPSBSZWN0YW5nbGVfZGVmYXVsdC5ub3J0aHdlc3QoYm91bmRpbmdSZWN0YW5nbGUsIHN0TndDb3JuZXJSZXN1bHQpOwogICAgICAgICAgY29uc3Qgc3RSb3RhdGlvbk9wdGlvbnMgPSBnZXRSb3RhdGlvbk9wdGlvbnMoCiAgICAgICAgICAgIHN0TndDb3JuZXIsCiAgICAgICAgICAgIHJvdGF0aW9uLAogICAgICAgICAgICBncmFudWxhcml0eVgsCiAgICAgICAgICAgIGdyYW51bGFyaXR5WSwKICAgICAgICAgICAgY2VudGVyLAogICAgICAgICAgICB3aWR0aCwKICAgICAgICAgICAgaGVpZ2h0CiAgICAgICAgICApOwogICAgICAgICAgY29tcHV0ZWRPcHRpb25zLnN0R3JhbllDb3MgPSBzdFJvdGF0aW9uT3B0aW9ucy5ncmFuWUNvczsKICAgICAgICAgIGNvbXB1dGVkT3B0aW9ucy5zdEdyYW5YQ29zID0gc3RSb3RhdGlvbk9wdGlvbnMuZ3JhblhDb3M7CiAgICAgICAgICBjb21wdXRlZE9wdGlvbnMuc3RHcmFuWVNpbiA9IHN0Um90YXRpb25PcHRpb25zLmdyYW5ZU2luOwogICAgICAgICAgY29tcHV0ZWRPcHRpb25zLnN0R3JhblhTaW4gPSBzdFJvdGF0aW9uT3B0aW9ucy5ncmFuWFNpbjsKICAgICAgICAgIGNvbXB1dGVkT3B0aW9ucy5zdE53Q29ybmVyID0gc3ROd0Nvcm5lcjsKICAgICAgICAgIGNvbXB1dGVkT3B0aW9ucy5zdFdlc3QgPSBzdFJvdGF0aW9uT3B0aW9ucy53ZXN0OwogICAgICAgICAgY29tcHV0ZWRPcHRpb25zLnN0U291dGggPSBzdFJvdGF0aW9uT3B0aW9ucy5zb3V0aDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNvbXB1dGVkT3B0aW9uczsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQgPSBSZWN0YW5nbGVHZW9tZXRyeUxpYnJhcnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9SZWN0YW5nbGVHZW9tZXRyeS5qcwogIGZ1bmN0aW9uIGNyZWF0ZUF0dHJpYnV0ZXModmVydGV4Rm9ybWF0LCBhdHRyaWJ1dGVzKSB7CiAgICBjb25zdCBnZW8gPSBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgIGF0dHJpYnV0ZXM6IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCgpLAogICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTCiAgICB9KTsKICAgIGdlby5hdHRyaWJ1dGVzLnBvc2l0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgIHZhbHVlczogYXR0cmlidXRlcy5wb3NpdGlvbnMKICAgIH0pOwogICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgZ2VvLmF0dHJpYnV0ZXMubm9ybWFsID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBhdHRyaWJ1dGVzLm5vcm1hbHMKICAgICAgfSk7CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgZ2VvLmF0dHJpYnV0ZXMudGFuZ2VudCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgIHZhbHVlczogYXR0cmlidXRlcy50YW5nZW50cwogICAgICB9KTsKICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgIGdlby5hdHRyaWJ1dGVzLmJpdGFuZ2VudCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgIHZhbHVlczogYXR0cmlidXRlcy5iaXRhbmdlbnRzCiAgICAgIH0pOwogICAgfQogICAgcmV0dXJuIGdlbzsKICB9CiAgZnVuY3Rpb24gY2FsY3VsYXRlQXR0cmlidXRlcyhwb3NpdGlvbnMsIHZlcnRleEZvcm1hdCwgZWxsaXBzb2lkLCB0YW5nZW50Um90YXRpb25NYXRyaXgpIHsKICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICBjb25zdCBub3JtYWxzID0gdmVydGV4Rm9ybWF0Lm5vcm1hbCA/IG5ldyBGbG9hdDMyQXJyYXkobGVuZ3RoKSA6IHZvaWQgMDsKICAgIGNvbnN0IHRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LnRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCkgOiB2b2lkIDA7CiAgICBjb25zdCBiaXRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCA/IG5ldyBGbG9hdDMyQXJyYXkobGVuZ3RoKSA6IHZvaWQgMDsKICAgIGxldCBhdHRySW5kZXggPSAwOwogICAgY29uc3QgYml0YW5nZW50ID0gYml0YW5nZW50U2NyYXRjaDI7CiAgICBjb25zdCB0YW5nZW50ID0gdGFuZ2VudFNjcmF0Y2gyOwogICAgbGV0IG5vcm1hbDIgPSBub3JtYWxTY3JhdGNoNDsKICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsIHx8IHZlcnRleEZvcm1hdC50YW5nZW50IHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMykgewogICAgICAgIGNvbnN0IHAgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHBvc2l0aW9ucywgaSwgcG9zaXRpb25TY3JhdGNoMik7CiAgICAgICAgY29uc3QgYXR0ckluZGV4MSA9IGF0dHJJbmRleCArIDE7CiAgICAgICAgY29uc3QgYXR0ckluZGV4MiA9IGF0dHJJbmRleCArIDI7CiAgICAgICAgbm9ybWFsMiA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwocCwgbm9ybWFsMik7CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50IHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9aLCBub3JtYWwyLCB0YW5nZW50KTsKICAgICAgICAgIE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKHRhbmdlbnRSb3RhdGlvbk1hdHJpeCwgdGFuZ2VudCwgdGFuZ2VudCk7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHRhbmdlbnQsIHRhbmdlbnQpOwogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3Mobm9ybWFsMiwgdGFuZ2VudCwgYml0YW5nZW50KSwKICAgICAgICAgICAgICBiaXRhbmdlbnQKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgICAgIG5vcm1hbHNbYXR0ckluZGV4XSA9IG5vcm1hbDIueDsKICAgICAgICAgIG5vcm1hbHNbYXR0ckluZGV4MV0gPSBub3JtYWwyLnk7CiAgICAgICAgICBub3JtYWxzW2F0dHJJbmRleDJdID0gbm9ybWFsMi56OwogICAgICAgIH0KICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgICAgIHRhbmdlbnRzW2F0dHJJbmRleF0gPSB0YW5nZW50Lng7CiAgICAgICAgICB0YW5nZW50c1thdHRySW5kZXgxXSA9IHRhbmdlbnQueTsKICAgICAgICAgIHRhbmdlbnRzW2F0dHJJbmRleDJdID0gdGFuZ2VudC56OwogICAgICAgIH0KICAgICAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgYml0YW5nZW50c1thdHRySW5kZXhdID0gYml0YW5nZW50Lng7CiAgICAgICAgICBiaXRhbmdlbnRzW2F0dHJJbmRleDFdID0gYml0YW5nZW50Lnk7CiAgICAgICAgICBiaXRhbmdlbnRzW2F0dHJJbmRleDJdID0gYml0YW5nZW50Lno7CiAgICAgICAgfQogICAgICAgIGF0dHJJbmRleCArPSAzOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gY3JlYXRlQXR0cmlidXRlcyh2ZXJ0ZXhGb3JtYXQsIHsKICAgICAgcG9zaXRpb25zLAogICAgICBub3JtYWxzLAogICAgICB0YW5nZW50cywKICAgICAgYml0YW5nZW50cwogICAgfSk7CiAgfQogIGZ1bmN0aW9uIGNhbGN1bGF0ZUF0dHJpYnV0ZXNXYWxsKHBvc2l0aW9ucywgdmVydGV4Rm9ybWF0LCBlbGxpcHNvaWQpIHsKICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICBjb25zdCBub3JtYWxzID0gdmVydGV4Rm9ybWF0Lm5vcm1hbCA/IG5ldyBGbG9hdDMyQXJyYXkobGVuZ3RoKSA6IHZvaWQgMDsKICAgIGNvbnN0IHRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LnRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCkgOiB2b2lkIDA7CiAgICBjb25zdCBiaXRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCA/IG5ldyBGbG9hdDMyQXJyYXkobGVuZ3RoKSA6IHZvaWQgMDsKICAgIGxldCBub3JtYWxJbmRleCA9IDA7CiAgICBsZXQgdGFuZ2VudEluZGV4ID0gMDsKICAgIGxldCBiaXRhbmdlbnRJbmRleCA9IDA7CiAgICBsZXQgcmVjb21wdXRlTm9ybWFsID0gdHJ1ZTsKICAgIGxldCBiaXRhbmdlbnQgPSBiaXRhbmdlbnRTY3JhdGNoMjsKICAgIGxldCB0YW5nZW50ID0gdGFuZ2VudFNjcmF0Y2gyOwogICAgbGV0IG5vcm1hbDIgPSBub3JtYWxTY3JhdGNoNDsKICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsIHx8IHZlcnRleEZvcm1hdC50YW5nZW50IHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gNikgewogICAgICAgIGNvbnN0IHAgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHBvc2l0aW9ucywgaSwgcG9zaXRpb25TY3JhdGNoMik7CiAgICAgICAgY29uc3QgcDEgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHBvc2l0aW9ucywgKGkgKyA2KSAlIGxlbmd0aCwgdjFTY3JhdGNoKTsKICAgICAgICBpZiAocmVjb21wdXRlTm9ybWFsKSB7CiAgICAgICAgICBjb25zdCBwMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCAoaSArIDMpICUgbGVuZ3RoLCB2MlNjcmF0Y2gpOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHAxLCBwLCBwMSk7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocDIsIHAsIHAyKTsKICAgICAgICAgIG5vcm1hbDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhwMiwgcDEsIG5vcm1hbDIpLCBub3JtYWwyKTsKICAgICAgICAgIHJlY29tcHV0ZU5vcm1hbCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24ocDEsIHAsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTApKSB7CiAgICAgICAgICByZWNvbXB1dGVOb3JtYWwgPSB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQgfHwgdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgYml0YW5nZW50ID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwLCBiaXRhbmdlbnQpOwogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgICAgIHRhbmdlbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhiaXRhbmdlbnQsIG5vcm1hbDIsIHRhbmdlbnQpLAogICAgICAgICAgICAgIHRhbmdlbnQKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSBub3JtYWwyLng7CiAgICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gbm9ybWFsMi55OwogICAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IG5vcm1hbDIuejsKICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSBub3JtYWwyLng7CiAgICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gbm9ybWFsMi55OwogICAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IG5vcm1hbDIuejsKICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgICB0YW5nZW50c1t0YW5nZW50SW5kZXgrK10gPSB0YW5nZW50Lng7CiAgICAgICAgICB0YW5nZW50c1t0YW5nZW50SW5kZXgrK10gPSB0YW5nZW50Lnk7CiAgICAgICAgICB0YW5nZW50c1t0YW5nZW50SW5kZXgrK10gPSB0YW5nZW50Lno7CiAgICAgICAgICB0YW5nZW50c1t0YW5nZW50SW5kZXgrK10gPSB0YW5nZW50Lng7CiAgICAgICAgICB0YW5nZW50c1t0YW5nZW50SW5kZXgrK10gPSB0YW5nZW50Lnk7CiAgICAgICAgICB0YW5nZW50c1t0YW5nZW50SW5kZXgrK10gPSB0YW5nZW50Lno7CiAgICAgICAgfQogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lng7CiAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lnk7CiAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lno7CiAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lng7CiAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lnk7CiAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lno7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gY3JlYXRlQXR0cmlidXRlcyh2ZXJ0ZXhGb3JtYXQsIHsKICAgICAgcG9zaXRpb25zLAogICAgICBub3JtYWxzLAogICAgICB0YW5nZW50cywKICAgICAgYml0YW5nZW50cwogICAgfSk7CiAgfQogIGZ1bmN0aW9uIGNvbnN0cnVjdFJlY3RhbmdsZShyZWN0YW5nbGVHZW9tZXRyeSwgY29tcHV0ZWRPcHRpb25zKSB7CiAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSByZWN0YW5nbGVHZW9tZXRyeS5fdmVydGV4Rm9ybWF0OwogICAgY29uc3QgZWxsaXBzb2lkID0gcmVjdGFuZ2xlR2VvbWV0cnkuX2VsbGlwc29pZDsKICAgIGNvbnN0IGhlaWdodCA9IGNvbXB1dGVkT3B0aW9ucy5oZWlnaHQ7CiAgICBjb25zdCB3aWR0aCA9IGNvbXB1dGVkT3B0aW9ucy53aWR0aDsKICAgIGNvbnN0IG5vcnRoQ2FwID0gY29tcHV0ZWRPcHRpb25zLm5vcnRoQ2FwOwogICAgY29uc3Qgc291dGhDYXAgPSBjb21wdXRlZE9wdGlvbnMuc291dGhDYXA7CiAgICBsZXQgcm93U3RhcnQgPSAwOwogICAgbGV0IHJvd0VuZCA9IGhlaWdodDsKICAgIGxldCByb3dIZWlnaHQgPSBoZWlnaHQ7CiAgICBsZXQgc2l6ZSA9IDA7CiAgICBpZiAobm9ydGhDYXApIHsKICAgICAgcm93U3RhcnQgPSAxOwogICAgICByb3dIZWlnaHQgLT0gMTsKICAgICAgc2l6ZSArPSAxOwogICAgfQogICAgaWYgKHNvdXRoQ2FwKSB7CiAgICAgIHJvd0VuZCAtPSAxOwogICAgICByb3dIZWlnaHQgLT0gMTsKICAgICAgc2l6ZSArPSAxOwogICAgfQogICAgc2l6ZSArPSB3aWR0aCAqIHJvd0hlaWdodDsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IHZlcnRleEZvcm1hdC5wb3NpdGlvbiA/IG5ldyBGbG9hdDY0QXJyYXkoc2l6ZSAqIDMpIDogdm9pZCAwOwogICAgY29uc3QgdGV4dHVyZUNvb3JkaW5hdGVzID0gdmVydGV4Rm9ybWF0LnN0ID8gbmV3IEZsb2F0MzJBcnJheShzaXplICogMikgOiB2b2lkIDA7CiAgICBsZXQgcG9zSW5kZXggPSAwOwogICAgbGV0IHN0SW5kZXggPSAwOwogICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvblNjcmF0Y2gyOwogICAgY29uc3Qgc3QgPSBzdFNjcmF0Y2gyOwogICAgbGV0IG1pblggPSBOdW1iZXIuTUFYX1ZBTFVFOwogICAgbGV0IG1pblkgPSBOdW1iZXIuTUFYX1ZBTFVFOwogICAgbGV0IG1heFggPSAtTnVtYmVyLk1BWF9WQUxVRTsKICAgIGxldCBtYXhZID0gLU51bWJlci5NQVhfVkFMVUU7CiAgICBmb3IgKGxldCByb3cgPSByb3dTdGFydDsgcm93IDwgcm93RW5kOyArK3JvdykgewogICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCB3aWR0aDsgKytjb2wpIHsKICAgICAgICBSZWN0YW5nbGVHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlUG9zaXRpb24oCiAgICAgICAgICBjb21wdXRlZE9wdGlvbnMsCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICB2ZXJ0ZXhGb3JtYXQuc3QsCiAgICAgICAgICByb3csCiAgICAgICAgICBjb2wsCiAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgIHN0CiAgICAgICAgKTsKICAgICAgICBwb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBwb3NpdGlvbi54OwogICAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLnk7CiAgICAgICAgcG9zaXRpb25zW3Bvc0luZGV4KytdID0gcG9zaXRpb24uejsKICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbc3RJbmRleCsrXSA9IHN0Lng7CiAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbc3RJbmRleCsrXSA9IHN0Lnk7CiAgICAgICAgICBtaW5YID0gTWF0aC5taW4obWluWCwgc3QueCk7CiAgICAgICAgICBtaW5ZID0gTWF0aC5taW4obWluWSwgc3QueSk7CiAgICAgICAgICBtYXhYID0gTWF0aC5tYXgobWF4WCwgc3QueCk7CiAgICAgICAgICBtYXhZID0gTWF0aC5tYXgobWF4WSwgc3QueSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAobm9ydGhDYXApIHsKICAgICAgUmVjdGFuZ2xlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZVBvc2l0aW9uKAogICAgICAgIGNvbXB1dGVkT3B0aW9ucywKICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgdmVydGV4Rm9ybWF0LnN0LAogICAgICAgIDAsCiAgICAgICAgMCwKICAgICAgICBwb3NpdGlvbiwKICAgICAgICBzdAogICAgICApOwogICAgICBwb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBwb3NpdGlvbi54OwogICAgICBwb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBwb3NpdGlvbi55OwogICAgICBwb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBwb3NpdGlvbi56OwogICAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW3N0SW5kZXgrK10gPSBzdC54OwogICAgICAgIHRleHR1cmVDb29yZGluYXRlc1tzdEluZGV4KytdID0gc3QueTsKICAgICAgICBtaW5YID0gc3QueDsKICAgICAgICBtaW5ZID0gc3QueTsKICAgICAgICBtYXhYID0gc3QueDsKICAgICAgICBtYXhZID0gc3QueTsKICAgICAgfQogICAgfQogICAgaWYgKHNvdXRoQ2FwKSB7CiAgICAgIFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbigKICAgICAgICBjb21wdXRlZE9wdGlvbnMsCiAgICAgICAgZWxsaXBzb2lkLAogICAgICAgIHZlcnRleEZvcm1hdC5zdCwKICAgICAgICBoZWlnaHQgLSAxLAogICAgICAgIDAsCiAgICAgICAgcG9zaXRpb24sCiAgICAgICAgc3QKICAgICAgKTsKICAgICAgcG9zaXRpb25zW3Bvc0luZGV4KytdID0gcG9zaXRpb24ueDsKICAgICAgcG9zaXRpb25zW3Bvc0luZGV4KytdID0gcG9zaXRpb24ueTsKICAgICAgcG9zaXRpb25zW3Bvc0luZGV4XSA9IHBvc2l0aW9uLno7CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbc3RJbmRleCsrXSA9IHN0Lng7CiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW3N0SW5kZXhdID0gc3QueTsKICAgICAgICBtaW5YID0gTWF0aC5taW4obWluWCwgc3QueCk7CiAgICAgICAgbWluWSA9IE1hdGgubWluKG1pblksIHN0LnkpOwogICAgICAgIG1heFggPSBNYXRoLm1heChtYXhYLCBzdC54KTsKICAgICAgICBtYXhZID0gTWF0aC5tYXgobWF4WSwgc3QueSk7CiAgICAgIH0KICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QgJiYgKG1pblggPCAwIHx8IG1pblkgPCAwIHx8IG1heFggPiAxIHx8IG1heFkgPiAxKSkgewogICAgICBmb3IgKGxldCBrID0gMDsgayA8IHRleHR1cmVDb29yZGluYXRlcy5sZW5ndGg7IGsgKz0gMikgewogICAgICAgIHRleHR1cmVDb29yZGluYXRlc1trXSA9ICh0ZXh0dXJlQ29vcmRpbmF0ZXNba10gLSBtaW5YKSAvIChtYXhYIC0gbWluWCk7CiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW2sgKyAxXSA9ICh0ZXh0dXJlQ29vcmRpbmF0ZXNbayArIDFdIC0gbWluWSkgLyAobWF4WSAtIG1pblkpOwogICAgICB9CiAgICB9CiAgICBjb25zdCBnZW8gPSBjYWxjdWxhdGVBdHRyaWJ1dGVzKAogICAgICBwb3NpdGlvbnMsCiAgICAgIHZlcnRleEZvcm1hdCwKICAgICAgZWxsaXBzb2lkLAogICAgICBjb21wdXRlZE9wdGlvbnMudGFuZ2VudFJvdGF0aW9uTWF0cml4CiAgICApOwogICAgbGV0IGluZGljZXNTaXplID0gNiAqICh3aWR0aCAtIDEpICogKHJvd0hlaWdodCAtIDEpOwogICAgaWYgKG5vcnRoQ2FwKSB7CiAgICAgIGluZGljZXNTaXplICs9IDMgKiAod2lkdGggLSAxKTsKICAgIH0KICAgIGlmIChzb3V0aENhcCkgewogICAgICBpbmRpY2VzU2l6ZSArPSAzICogKHdpZHRoIC0gMSk7CiAgICB9CiAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoc2l6ZSwgaW5kaWNlc1NpemUpOwogICAgbGV0IGluZGV4ID0gMDsKICAgIGxldCBpbmRpY2VzSW5kZXggPSAwOwogICAgbGV0IGk7CiAgICBmb3IgKGkgPSAwOyBpIDwgcm93SGVpZ2h0IC0gMTsgKytpKSB7CiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgd2lkdGggLSAxOyArK2opIHsKICAgICAgICBjb25zdCB1cHBlckxlZnQgPSBpbmRleDsKICAgICAgICBjb25zdCBsb3dlckxlZnQgPSB1cHBlckxlZnQgKyB3aWR0aDsKICAgICAgICBjb25zdCBsb3dlclJpZ2h0ID0gbG93ZXJMZWZ0ICsgMTsKICAgICAgICBjb25zdCB1cHBlclJpZ2h0ID0gdXBwZXJMZWZ0ICsgMTsKICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHVwcGVyTGVmdDsKICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGxvd2VyTGVmdDsKICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHVwcGVyUmlnaHQ7CiAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSB1cHBlclJpZ2h0OwogICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gbG93ZXJMZWZ0OwogICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gbG93ZXJSaWdodDsKICAgICAgICArK2luZGV4OwogICAgICB9CiAgICAgICsraW5kZXg7CiAgICB9CiAgICBpZiAobm9ydGhDYXAgfHwgc291dGhDYXApIHsKICAgICAgbGV0IG5vcnRoSW5kZXggPSBzaXplIC0gMTsKICAgICAgY29uc3Qgc291dGhJbmRleCA9IHNpemUgLSAxOwogICAgICBpZiAobm9ydGhDYXAgJiYgc291dGhDYXApIHsKICAgICAgICBub3J0aEluZGV4ID0gc2l6ZSAtIDI7CiAgICAgIH0KICAgICAgbGV0IHAxOwogICAgICBsZXQgcDI7CiAgICAgIGluZGV4ID0gMDsKICAgICAgaWYgKG5vcnRoQ2FwKSB7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHdpZHRoIC0gMTsgaSsrKSB7CiAgICAgICAgICBwMSA9IGluZGV4OwogICAgICAgICAgcDIgPSBwMSArIDE7CiAgICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IG5vcnRoSW5kZXg7CiAgICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHAxOwogICAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwMjsKICAgICAgICAgICsraW5kZXg7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChzb3V0aENhcCkgewogICAgICAgIGluZGV4ID0gKHJvd0hlaWdodCAtIDEpICogd2lkdGg7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHdpZHRoIC0gMTsgaSsrKSB7CiAgICAgICAgICBwMSA9IGluZGV4OwogICAgICAgICAgcDIgPSBwMSArIDE7CiAgICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHAxOwogICAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBzb3V0aEluZGV4OwogICAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwMjsKICAgICAgICAgICsraW5kZXg7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBnZW8uaW5kaWNlcyA9IGluZGljZXM7CiAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgIGdlby5hdHRyaWJ1dGVzLnN0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDIsCiAgICAgICAgdmFsdWVzOiB0ZXh0dXJlQ29vcmRpbmF0ZXMKICAgICAgfSk7CiAgICB9CiAgICByZXR1cm4gZ2VvOwogIH0KICBmdW5jdGlvbiBhZGRXYWxsUG9zaXRpb25zMih3YWxsUG9zaXRpb25zLCBwb3NJbmRleCwgaSwgdG9wUG9zaXRpb25zLCBib3R0b21Qb3NpdGlvbnMpIHsKICAgIHdhbGxQb3NpdGlvbnNbcG9zSW5kZXgrK10gPSB0b3BQb3NpdGlvbnNbaV07CiAgICB3YWxsUG9zaXRpb25zW3Bvc0luZGV4KytdID0gdG9wUG9zaXRpb25zW2kgKyAxXTsKICAgIHdhbGxQb3NpdGlvbnNbcG9zSW5kZXgrK10gPSB0b3BQb3NpdGlvbnNbaSArIDJdOwogICAgd2FsbFBvc2l0aW9uc1twb3NJbmRleCsrXSA9IGJvdHRvbVBvc2l0aW9uc1tpXTsKICAgIHdhbGxQb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBib3R0b21Qb3NpdGlvbnNbaSArIDFdOwogICAgd2FsbFBvc2l0aW9uc1twb3NJbmRleF0gPSBib3R0b21Qb3NpdGlvbnNbaSArIDJdOwogICAgcmV0dXJuIHdhbGxQb3NpdGlvbnM7CiAgfQogIGZ1bmN0aW9uIGFkZFdhbGxUZXh0dXJlQ29vcmRpbmF0ZXMod2FsbFRleHR1cmVzLCBzdEluZGV4LCBpLCBzdCkgewogICAgd2FsbFRleHR1cmVzW3N0SW5kZXgrK10gPSBzdFtpXTsKICAgIHdhbGxUZXh0dXJlc1tzdEluZGV4KytdID0gc3RbaSArIDFdOwogICAgd2FsbFRleHR1cmVzW3N0SW5kZXgrK10gPSBzdFtpXTsKICAgIHdhbGxUZXh0dXJlc1tzdEluZGV4XSA9IHN0W2kgKyAxXTsKICAgIHJldHVybiB3YWxsVGV4dHVyZXM7CiAgfQogIGZ1bmN0aW9uIGNvbnN0cnVjdEV4dHJ1ZGVkUmVjdGFuZ2xlKHJlY3RhbmdsZUdlb21ldHJ5LCBjb21wdXRlZE9wdGlvbnMpIHsKICAgIGNvbnN0IHNoYWRvd1ZvbHVtZSA9IHJlY3RhbmdsZUdlb21ldHJ5Ll9zaGFkb3dWb2x1bWU7CiAgICBjb25zdCBvZmZzZXRBdHRyaWJ1dGVWYWx1ZSA9IHJlY3RhbmdsZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGU7CiAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSByZWN0YW5nbGVHZW9tZXRyeS5fdmVydGV4Rm9ybWF0OwogICAgY29uc3QgbWluSGVpZ2h0ID0gcmVjdGFuZ2xlR2VvbWV0cnkuX2V4dHJ1ZGVkSGVpZ2h0OwogICAgY29uc3QgbWF4SGVpZ2h0ID0gcmVjdGFuZ2xlR2VvbWV0cnkuX3N1cmZhY2VIZWlnaHQ7CiAgICBjb25zdCBlbGxpcHNvaWQgPSByZWN0YW5nbGVHZW9tZXRyeS5fZWxsaXBzb2lkOwogICAgY29uc3QgaGVpZ2h0ID0gY29tcHV0ZWRPcHRpb25zLmhlaWdodDsKICAgIGNvbnN0IHdpZHRoID0gY29tcHV0ZWRPcHRpb25zLndpZHRoOwogICAgbGV0IGk7CiAgICBpZiAoc2hhZG93Vm9sdW1lKSB7CiAgICAgIGNvbnN0IG5ld1ZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LmNsb25lKAogICAgICAgIHZlcnRleEZvcm1hdCwKICAgICAgICBzY3JhdGNoVmVydGV4Rm9ybWF0MTIKICAgICAgKTsKICAgICAgbmV3VmVydGV4Rm9ybWF0Lm5vcm1hbCA9IHRydWU7CiAgICAgIHJlY3RhbmdsZUdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQgPSBuZXdWZXJ0ZXhGb3JtYXQ7CiAgICB9CiAgICBjb25zdCB0b3BCb3R0b21HZW8gPSBjb25zdHJ1Y3RSZWN0YW5nbGUocmVjdGFuZ2xlR2VvbWV0cnksIGNvbXB1dGVkT3B0aW9ucyk7CiAgICBpZiAoc2hhZG93Vm9sdW1lKSB7CiAgICAgIHJlY3RhbmdsZUdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQgPSB2ZXJ0ZXhGb3JtYXQ7CiAgICB9CiAgICBsZXQgdG9wUG9zaXRpb25zID0gUG9seWdvblBpcGVsaW5lX2RlZmF1bHQuc2NhbGVUb0dlb2RldGljSGVpZ2h0KAogICAgICB0b3BCb3R0b21HZW8uYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMsCiAgICAgIG1heEhlaWdodCwKICAgICAgZWxsaXBzb2lkLAogICAgICBmYWxzZQogICAgKTsKICAgIHRvcFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkodG9wUG9zaXRpb25zKTsKICAgIGxldCBsZW5ndGggPSB0b3BQb3NpdGlvbnMubGVuZ3RoOwogICAgY29uc3QgbmV3TGVuZ3RoID0gbGVuZ3RoICogMjsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkobmV3TGVuZ3RoKTsKICAgIHBvc2l0aW9ucy5zZXQodG9wUG9zaXRpb25zKTsKICAgIGNvbnN0IGJvdHRvbVBvc2l0aW9ucyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodCgKICAgICAgdG9wQm90dG9tR2VvLmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLAogICAgICBtaW5IZWlnaHQsCiAgICAgIGVsbGlwc29pZAogICAgKTsKICAgIHBvc2l0aW9ucy5zZXQoYm90dG9tUG9zaXRpb25zLCBsZW5ndGgpOwogICAgdG9wQm90dG9tR2VvLmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzID0gcG9zaXRpb25zOwogICAgY29uc3Qgbm9ybWFscyA9IHZlcnRleEZvcm1hdC5ub3JtYWwgPyBuZXcgRmxvYXQzMkFycmF5KG5ld0xlbmd0aCkgOiB2b2lkIDA7CiAgICBjb25zdCB0YW5nZW50cyA9IHZlcnRleEZvcm1hdC50YW5nZW50ID8gbmV3IEZsb2F0MzJBcnJheShuZXdMZW5ndGgpIDogdm9pZCAwOwogICAgY29uc3QgYml0YW5nZW50cyA9IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KG5ld0xlbmd0aCkgOiB2b2lkIDA7CiAgICBjb25zdCB0ZXh0dXJlcyA9IHZlcnRleEZvcm1hdC5zdCA/IG5ldyBGbG9hdDMyQXJyYXkobmV3TGVuZ3RoIC8gMyAqIDIpIDogdm9pZCAwOwogICAgbGV0IHRvcFN0OwogICAgbGV0IHRvcE5vcm1hbHM7CiAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICB0b3BOb3JtYWxzID0gdG9wQm90dG9tR2VvLmF0dHJpYnV0ZXMubm9ybWFsLnZhbHVlczsKICAgICAgbm9ybWFscy5zZXQodG9wTm9ybWFscyk7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgIHRvcE5vcm1hbHNbaV0gPSAtdG9wTm9ybWFsc1tpXTsKICAgICAgfQogICAgICBub3JtYWxzLnNldCh0b3BOb3JtYWxzLCBsZW5ndGgpOwogICAgICB0b3BCb3R0b21HZW8uYXR0cmlidXRlcy5ub3JtYWwudmFsdWVzID0gbm9ybWFsczsKICAgIH0KICAgIGlmIChzaGFkb3dWb2x1bWUpIHsKICAgICAgdG9wTm9ybWFscyA9IHRvcEJvdHRvbUdlby5hdHRyaWJ1dGVzLm5vcm1hbC52YWx1ZXM7CiAgICAgIGlmICghdmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICAgIHRvcEJvdHRvbUdlby5hdHRyaWJ1dGVzLm5vcm1hbCA9IHZvaWQgMDsKICAgICAgfQogICAgICBjb25zdCBleHRydWRlTm9ybWFscyA9IG5ldyBGbG9hdDMyQXJyYXkobmV3TGVuZ3RoKTsKICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgdG9wTm9ybWFsc1tpXSA9IC10b3BOb3JtYWxzW2ldOwogICAgICB9CiAgICAgIGV4dHJ1ZGVOb3JtYWxzLnNldCh0b3BOb3JtYWxzLCBsZW5ndGgpOwogICAgICB0b3BCb3R0b21HZW8uYXR0cmlidXRlcy5leHRydWRlRGlyZWN0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBleHRydWRlTm9ybWFscwogICAgICB9KTsKICAgIH0KICAgIGxldCBvZmZzZXRWYWx1ZTsKICAgIGNvbnN0IGhhc09mZnNldHMgPSBkZWZpbmVkX2RlZmF1bHQob2Zmc2V0QXR0cmlidXRlVmFsdWUpOwogICAgaWYgKGhhc09mZnNldHMpIHsKICAgICAgY29uc3Qgc2l6ZSA9IGxlbmd0aCAvIDMgKiAyOwogICAgICBsZXQgb2Zmc2V0QXR0cmlidXRlID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7CiAgICAgIGlmIChvZmZzZXRBdHRyaWJ1dGVWYWx1ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5UT1ApIHsKICAgICAgICBvZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUuZmlsbCgxLCAwLCBzaXplIC8gMik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgb2Zmc2V0VmFsdWUgPSBvZmZzZXRBdHRyaWJ1dGVWYWx1ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5OT05FID8gMCA6IDE7CiAgICAgICAgb2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlLmZpbGwob2Zmc2V0VmFsdWUpOwogICAgICB9CiAgICAgIHRvcEJvdHRvbUdlby5hdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICB2YWx1ZXM6IG9mZnNldEF0dHJpYnV0ZQogICAgICB9KTsKICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICBjb25zdCB0b3BUYW5nZW50cyA9IHRvcEJvdHRvbUdlby5hdHRyaWJ1dGVzLnRhbmdlbnQudmFsdWVzOwogICAgICB0YW5nZW50cy5zZXQodG9wVGFuZ2VudHMpOwogICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICB0b3BUYW5nZW50c1tpXSA9IC10b3BUYW5nZW50c1tpXTsKICAgICAgfQogICAgICB0YW5nZW50cy5zZXQodG9wVGFuZ2VudHMsIGxlbmd0aCk7CiAgICAgIHRvcEJvdHRvbUdlby5hdHRyaWJ1dGVzLnRhbmdlbnQudmFsdWVzID0gdGFuZ2VudHM7CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICBjb25zdCB0b3BCaXRhbmdlbnRzID0gdG9wQm90dG9tR2VvLmF0dHJpYnV0ZXMuYml0YW5nZW50LnZhbHVlczsKICAgICAgYml0YW5nZW50cy5zZXQodG9wQml0YW5nZW50cyk7CiAgICAgIGJpdGFuZ2VudHMuc2V0KHRvcEJpdGFuZ2VudHMsIGxlbmd0aCk7CiAgICAgIHRvcEJvdHRvbUdlby5hdHRyaWJ1dGVzLmJpdGFuZ2VudC52YWx1ZXMgPSBiaXRhbmdlbnRzOwogICAgfQogICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICB0b3BTdCA9IHRvcEJvdHRvbUdlby5hdHRyaWJ1dGVzLnN0LnZhbHVlczsKICAgICAgdGV4dHVyZXMuc2V0KHRvcFN0KTsKICAgICAgdGV4dHVyZXMuc2V0KHRvcFN0LCBsZW5ndGggLyAzICogMik7CiAgICAgIHRvcEJvdHRvbUdlby5hdHRyaWJ1dGVzLnN0LnZhbHVlcyA9IHRleHR1cmVzOwogICAgfQogICAgY29uc3QgaW5kaWNlcyA9IHRvcEJvdHRvbUdlby5pbmRpY2VzOwogICAgY29uc3QgaW5kaWNlc0xlbmd0aCA9IGluZGljZXMubGVuZ3RoOwogICAgY29uc3QgcG9zTGVuZ3RoID0gbGVuZ3RoIC8gMzsKICAgIGNvbnN0IG5ld0luZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgbmV3TGVuZ3RoIC8gMywKICAgICAgaW5kaWNlc0xlbmd0aCAqIDIKICAgICk7CiAgICBuZXdJbmRpY2VzLnNldChpbmRpY2VzKTsKICAgIGZvciAoaSA9IDA7IGkgPCBpbmRpY2VzTGVuZ3RoOyBpICs9IDMpIHsKICAgICAgbmV3SW5kaWNlc1tpICsgaW5kaWNlc0xlbmd0aF0gPSBpbmRpY2VzW2kgKyAyXSArIHBvc0xlbmd0aDsKICAgICAgbmV3SW5kaWNlc1tpICsgMSArIGluZGljZXNMZW5ndGhdID0gaW5kaWNlc1tpICsgMV0gKyBwb3NMZW5ndGg7CiAgICAgIG5ld0luZGljZXNbaSArIDIgKyBpbmRpY2VzTGVuZ3RoXSA9IGluZGljZXNbaV0gKyBwb3NMZW5ndGg7CiAgICB9CiAgICB0b3BCb3R0b21HZW8uaW5kaWNlcyA9IG5ld0luZGljZXM7CiAgICBjb25zdCBub3J0aENhcCA9IGNvbXB1dGVkT3B0aW9ucy5ub3J0aENhcDsKICAgIGNvbnN0IHNvdXRoQ2FwID0gY29tcHV0ZWRPcHRpb25zLnNvdXRoQ2FwOwogICAgbGV0IHJvd0hlaWdodCA9IGhlaWdodDsKICAgIGxldCB3aWR0aE11bHRpcGxpZXIgPSAyOwogICAgbGV0IHBlcmltZXRlclBvc2l0aW9ucyA9IDA7CiAgICBsZXQgY29ybmVycyA9IDQ7CiAgICBsZXQgZHVwbGlhdGVDb3JuZXJzID0gNDsKICAgIGlmIChub3J0aENhcCkgewogICAgICB3aWR0aE11bHRpcGxpZXIgLT0gMTsKICAgICAgcm93SGVpZ2h0IC09IDE7CiAgICAgIHBlcmltZXRlclBvc2l0aW9ucyArPSAxOwogICAgICBjb3JuZXJzIC09IDI7CiAgICAgIGR1cGxpYXRlQ29ybmVycyAtPSAxOwogICAgfQogICAgaWYgKHNvdXRoQ2FwKSB7CiAgICAgIHdpZHRoTXVsdGlwbGllciAtPSAxOwogICAgICByb3dIZWlnaHQgLT0gMTsKICAgICAgcGVyaW1ldGVyUG9zaXRpb25zICs9IDE7CiAgICAgIGNvcm5lcnMgLT0gMjsKICAgICAgZHVwbGlhdGVDb3JuZXJzIC09IDE7CiAgICB9CiAgICBwZXJpbWV0ZXJQb3NpdGlvbnMgKz0gd2lkdGhNdWx0aXBsaWVyICogd2lkdGggKyAyICogcm93SGVpZ2h0IC0gY29ybmVyczsKICAgIGNvbnN0IHdhbGxDb3VudCA9IChwZXJpbWV0ZXJQb3NpdGlvbnMgKyBkdXBsaWF0ZUNvcm5lcnMpICogMjsKICAgIGxldCB3YWxsUG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheSh3YWxsQ291bnQgKiAzKTsKICAgIGNvbnN0IHdhbGxFeHRydWRlTm9ybWFscyA9IHNoYWRvd1ZvbHVtZSA/IG5ldyBGbG9hdDMyQXJyYXkod2FsbENvdW50ICogMykgOiB2b2lkIDA7CiAgICBsZXQgd2FsbE9mZnNldEF0dHJpYnV0ZSA9IGhhc09mZnNldHMgPyBuZXcgVWludDhBcnJheSh3YWxsQ291bnQpIDogdm9pZCAwOwogICAgbGV0IHdhbGxUZXh0dXJlcyA9IHZlcnRleEZvcm1hdC5zdCA/IG5ldyBGbG9hdDMyQXJyYXkod2FsbENvdW50ICogMikgOiB2b2lkIDA7CiAgICBjb25zdCBjb21wdXRlVG9wT2Zmc2V0cyA9IG9mZnNldEF0dHJpYnV0ZVZhbHVlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0LlRPUDsKICAgIGlmIChoYXNPZmZzZXRzICYmICFjb21wdXRlVG9wT2Zmc2V0cykgewogICAgICBvZmZzZXRWYWx1ZSA9IG9mZnNldEF0dHJpYnV0ZVZhbHVlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0LkFMTCA/IDEgOiAwOwogICAgICB3YWxsT2Zmc2V0QXR0cmlidXRlID0gd2FsbE9mZnNldEF0dHJpYnV0ZS5maWxsKG9mZnNldFZhbHVlKTsKICAgIH0KICAgIGxldCBwb3NJbmRleCA9IDA7CiAgICBsZXQgc3RJbmRleCA9IDA7CiAgICBsZXQgZXh0cnVkZU5vcm1hbEluZGV4ID0gMDsKICAgIGxldCB3YWxsT2Zmc2V0SW5kZXggPSAwOwogICAgY29uc3QgYXJlYSA9IHdpZHRoICogcm93SGVpZ2h0OwogICAgbGV0IHRocmVlSTsKICAgIGZvciAoaSA9IDA7IGkgPCBhcmVhOyBpICs9IHdpZHRoKSB7CiAgICAgIHRocmVlSSA9IGkgKiAzOwogICAgICB3YWxsUG9zaXRpb25zID0gYWRkV2FsbFBvc2l0aW9uczIoCiAgICAgICAgd2FsbFBvc2l0aW9ucywKICAgICAgICBwb3NJbmRleCwKICAgICAgICB0aHJlZUksCiAgICAgICAgdG9wUG9zaXRpb25zLAogICAgICAgIGJvdHRvbVBvc2l0aW9ucwogICAgICApOwogICAgICBwb3NJbmRleCArPSA2OwogICAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgICAgd2FsbFRleHR1cmVzID0gYWRkV2FsbFRleHR1cmVDb29yZGluYXRlcygKICAgICAgICAgIHdhbGxUZXh0dXJlcywKICAgICAgICAgIHN0SW5kZXgsCiAgICAgICAgICBpICogMiwKICAgICAgICAgIHRvcFN0CiAgICAgICAgKTsKICAgICAgICBzdEluZGV4ICs9IDQ7CiAgICAgIH0KICAgICAgaWYgKHNoYWRvd1ZvbHVtZSkgewogICAgICAgIGV4dHJ1ZGVOb3JtYWxJbmRleCArPSAzOwogICAgICAgIHdhbGxFeHRydWRlTm9ybWFsc1tleHRydWRlTm9ybWFsSW5kZXgrK10gPSB0b3BOb3JtYWxzW3RocmVlSV07CiAgICAgICAgd2FsbEV4dHJ1ZGVOb3JtYWxzW2V4dHJ1ZGVOb3JtYWxJbmRleCsrXSA9IHRvcE5vcm1hbHNbdGhyZWVJICsgMV07CiAgICAgICAgd2FsbEV4dHJ1ZGVOb3JtYWxzW2V4dHJ1ZGVOb3JtYWxJbmRleCsrXSA9IHRvcE5vcm1hbHNbdGhyZWVJICsgMl07CiAgICAgIH0KICAgICAgaWYgKGNvbXB1dGVUb3BPZmZzZXRzKSB7CiAgICAgICAgd2FsbE9mZnNldEF0dHJpYnV0ZVt3YWxsT2Zmc2V0SW5kZXgrK10gPSAxOwogICAgICAgIHdhbGxPZmZzZXRJbmRleCArPSAxOwogICAgICB9CiAgICB9CiAgICBpZiAoIXNvdXRoQ2FwKSB7CiAgICAgIGZvciAoaSA9IGFyZWEgLSB3aWR0aDsgaSA8IGFyZWE7IGkrKykgewogICAgICAgIHRocmVlSSA9IGkgKiAzOwogICAgICAgIHdhbGxQb3NpdGlvbnMgPSBhZGRXYWxsUG9zaXRpb25zMigKICAgICAgICAgIHdhbGxQb3NpdGlvbnMsCiAgICAgICAgICBwb3NJbmRleCwKICAgICAgICAgIHRocmVlSSwKICAgICAgICAgIHRvcFBvc2l0aW9ucywKICAgICAgICAgIGJvdHRvbVBvc2l0aW9ucwogICAgICAgICk7CiAgICAgICAgcG9zSW5kZXggKz0gNjsKICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgICAgICB3YWxsVGV4dHVyZXMgPSBhZGRXYWxsVGV4dHVyZUNvb3JkaW5hdGVzKAogICAgICAgICAgICB3YWxsVGV4dHVyZXMsCiAgICAgICAgICAgIHN0SW5kZXgsCiAgICAgICAgICAgIGkgKiAyLAogICAgICAgICAgICB0b3BTdAogICAgICAgICAgKTsKICAgICAgICAgIHN0SW5kZXggKz0gNDsKICAgICAgICB9CiAgICAgICAgaWYgKHNoYWRvd1ZvbHVtZSkgewogICAgICAgICAgZXh0cnVkZU5vcm1hbEluZGV4ICs9IDM7CiAgICAgICAgICB3YWxsRXh0cnVkZU5vcm1hbHNbZXh0cnVkZU5vcm1hbEluZGV4KytdID0gdG9wTm9ybWFsc1t0aHJlZUldOwogICAgICAgICAgd2FsbEV4dHJ1ZGVOb3JtYWxzW2V4dHJ1ZGVOb3JtYWxJbmRleCsrXSA9IHRvcE5vcm1hbHNbdGhyZWVJICsgMV07CiAgICAgICAgICB3YWxsRXh0cnVkZU5vcm1hbHNbZXh0cnVkZU5vcm1hbEluZGV4KytdID0gdG9wTm9ybWFsc1t0aHJlZUkgKyAyXTsKICAgICAgICB9CiAgICAgICAgaWYgKGNvbXB1dGVUb3BPZmZzZXRzKSB7CiAgICAgICAgICB3YWxsT2Zmc2V0QXR0cmlidXRlW3dhbGxPZmZzZXRJbmRleCsrXSA9IDE7CiAgICAgICAgICB3YWxsT2Zmc2V0SW5kZXggKz0gMTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGNvbnN0IHNvdXRoSW5kZXggPSBub3J0aENhcCA/IGFyZWEgKyAxIDogYXJlYTsKICAgICAgdGhyZWVJID0gc291dGhJbmRleCAqIDM7CiAgICAgIGZvciAoaSA9IDA7IGkgPCAyOyBpKyspIHsKICAgICAgICB3YWxsUG9zaXRpb25zID0gYWRkV2FsbFBvc2l0aW9uczIoCiAgICAgICAgICB3YWxsUG9zaXRpb25zLAogICAgICAgICAgcG9zSW5kZXgsCiAgICAgICAgICB0aHJlZUksCiAgICAgICAgICB0b3BQb3NpdGlvbnMsCiAgICAgICAgICBib3R0b21Qb3NpdGlvbnMKICAgICAgICApOwogICAgICAgIHBvc0luZGV4ICs9IDY7CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICAgICAgd2FsbFRleHR1cmVzID0gYWRkV2FsbFRleHR1cmVDb29yZGluYXRlcygKICAgICAgICAgICAgd2FsbFRleHR1cmVzLAogICAgICAgICAgICBzdEluZGV4LAogICAgICAgICAgICBzb3V0aEluZGV4ICogMiwKICAgICAgICAgICAgdG9wU3QKICAgICAgICAgICk7CiAgICAgICAgICBzdEluZGV4ICs9IDQ7CiAgICAgICAgfQogICAgICAgIGlmIChzaGFkb3dWb2x1bWUpIHsKICAgICAgICAgIGV4dHJ1ZGVOb3JtYWxJbmRleCArPSAzOwogICAgICAgICAgd2FsbEV4dHJ1ZGVOb3JtYWxzW2V4dHJ1ZGVOb3JtYWxJbmRleCsrXSA9IHRvcE5vcm1hbHNbdGhyZWVJXTsKICAgICAgICAgIHdhbGxFeHRydWRlTm9ybWFsc1tleHRydWRlTm9ybWFsSW5kZXgrK10gPSB0b3BOb3JtYWxzW3RocmVlSSArIDFdOwogICAgICAgICAgd2FsbEV4dHJ1ZGVOb3JtYWxzW2V4dHJ1ZGVOb3JtYWxJbmRleCsrXSA9IHRvcE5vcm1hbHNbdGhyZWVJICsgMl07CiAgICAgICAgfQogICAgICAgIGlmIChjb21wdXRlVG9wT2Zmc2V0cykgewogICAgICAgICAgd2FsbE9mZnNldEF0dHJpYnV0ZVt3YWxsT2Zmc2V0SW5kZXgrK10gPSAxOwogICAgICAgICAgd2FsbE9mZnNldEluZGV4ICs9IDE7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBmb3IgKGkgPSBhcmVhIC0gMTsgaSA+IDA7IGkgLT0gd2lkdGgpIHsKICAgICAgdGhyZWVJID0gaSAqIDM7CiAgICAgIHdhbGxQb3NpdGlvbnMgPSBhZGRXYWxsUG9zaXRpb25zMigKICAgICAgICB3YWxsUG9zaXRpb25zLAogICAgICAgIHBvc0luZGV4LAogICAgICAgIHRocmVlSSwKICAgICAgICB0b3BQb3NpdGlvbnMsCiAgICAgICAgYm90dG9tUG9zaXRpb25zCiAgICAgICk7CiAgICAgIHBvc0luZGV4ICs9IDY7CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICB3YWxsVGV4dHVyZXMgPSBhZGRXYWxsVGV4dHVyZUNvb3JkaW5hdGVzKAogICAgICAgICAgd2FsbFRleHR1cmVzLAogICAgICAgICAgc3RJbmRleCwKICAgICAgICAgIGkgKiAyLAogICAgICAgICAgdG9wU3QKICAgICAgICApOwogICAgICAgIHN0SW5kZXggKz0gNDsKICAgICAgfQogICAgICBpZiAoc2hhZG93Vm9sdW1lKSB7CiAgICAgICAgZXh0cnVkZU5vcm1hbEluZGV4ICs9IDM7CiAgICAgICAgd2FsbEV4dHJ1ZGVOb3JtYWxzW2V4dHJ1ZGVOb3JtYWxJbmRleCsrXSA9IHRvcE5vcm1hbHNbdGhyZWVJXTsKICAgICAgICB3YWxsRXh0cnVkZU5vcm1hbHNbZXh0cnVkZU5vcm1hbEluZGV4KytdID0gdG9wTm9ybWFsc1t0aHJlZUkgKyAxXTsKICAgICAgICB3YWxsRXh0cnVkZU5vcm1hbHNbZXh0cnVkZU5vcm1hbEluZGV4KytdID0gdG9wTm9ybWFsc1t0aHJlZUkgKyAyXTsKICAgICAgfQogICAgICBpZiAoY29tcHV0ZVRvcE9mZnNldHMpIHsKICAgICAgICB3YWxsT2Zmc2V0QXR0cmlidXRlW3dhbGxPZmZzZXRJbmRleCsrXSA9IDE7CiAgICAgICAgd2FsbE9mZnNldEluZGV4ICs9IDE7CiAgICAgIH0KICAgIH0KICAgIGlmICghbm9ydGhDYXApIHsKICAgICAgZm9yIChpID0gd2lkdGggLSAxOyBpID49IDA7IGktLSkgewogICAgICAgIHRocmVlSSA9IGkgKiAzOwogICAgICAgIHdhbGxQb3NpdGlvbnMgPSBhZGRXYWxsUG9zaXRpb25zMigKICAgICAgICAgIHdhbGxQb3NpdGlvbnMsCiAgICAgICAgICBwb3NJbmRleCwKICAgICAgICAgIHRocmVlSSwKICAgICAgICAgIHRvcFBvc2l0aW9ucywKICAgICAgICAgIGJvdHRvbVBvc2l0aW9ucwogICAgICAgICk7CiAgICAgICAgcG9zSW5kZXggKz0gNjsKICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgICAgICB3YWxsVGV4dHVyZXMgPSBhZGRXYWxsVGV4dHVyZUNvb3JkaW5hdGVzKAogICAgICAgICAgICB3YWxsVGV4dHVyZXMsCiAgICAgICAgICAgIHN0SW5kZXgsCiAgICAgICAgICAgIGkgKiAyLAogICAgICAgICAgICB0b3BTdAogICAgICAgICAgKTsKICAgICAgICAgIHN0SW5kZXggKz0gNDsKICAgICAgICB9CiAgICAgICAgaWYgKHNoYWRvd1ZvbHVtZSkgewogICAgICAgICAgZXh0cnVkZU5vcm1hbEluZGV4ICs9IDM7CiAgICAgICAgICB3YWxsRXh0cnVkZU5vcm1hbHNbZXh0cnVkZU5vcm1hbEluZGV4KytdID0gdG9wTm9ybWFsc1t0aHJlZUldOwogICAgICAgICAgd2FsbEV4dHJ1ZGVOb3JtYWxzW2V4dHJ1ZGVOb3JtYWxJbmRleCsrXSA9IHRvcE5vcm1hbHNbdGhyZWVJICsgMV07CiAgICAgICAgICB3YWxsRXh0cnVkZU5vcm1hbHNbZXh0cnVkZU5vcm1hbEluZGV4KytdID0gdG9wTm9ybWFsc1t0aHJlZUkgKyAyXTsKICAgICAgICB9CiAgICAgICAgaWYgKGNvbXB1dGVUb3BPZmZzZXRzKSB7CiAgICAgICAgICB3YWxsT2Zmc2V0QXR0cmlidXRlW3dhbGxPZmZzZXRJbmRleCsrXSA9IDE7CiAgICAgICAgICB3YWxsT2Zmc2V0SW5kZXggKz0gMTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGNvbnN0IG5vcnRoSW5kZXggPSBhcmVhOwogICAgICB0aHJlZUkgPSBub3J0aEluZGV4ICogMzsKICAgICAgZm9yIChpID0gMDsgaSA8IDI7IGkrKykgewogICAgICAgIHdhbGxQb3NpdGlvbnMgPSBhZGRXYWxsUG9zaXRpb25zMigKICAgICAgICAgIHdhbGxQb3NpdGlvbnMsCiAgICAgICAgICBwb3NJbmRleCwKICAgICAgICAgIHRocmVlSSwKICAgICAgICAgIHRvcFBvc2l0aW9ucywKICAgICAgICAgIGJvdHRvbVBvc2l0aW9ucwogICAgICAgICk7CiAgICAgICAgcG9zSW5kZXggKz0gNjsKICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgICAgICB3YWxsVGV4dHVyZXMgPSBhZGRXYWxsVGV4dHVyZUNvb3JkaW5hdGVzKAogICAgICAgICAgICB3YWxsVGV4dHVyZXMsCiAgICAgICAgICAgIHN0SW5kZXgsCiAgICAgICAgICAgIG5vcnRoSW5kZXggKiAyLAogICAgICAgICAgICB0b3BTdAogICAgICAgICAgKTsKICAgICAgICAgIHN0SW5kZXggKz0gNDsKICAgICAgICB9CiAgICAgICAgaWYgKHNoYWRvd1ZvbHVtZSkgewogICAgICAgICAgZXh0cnVkZU5vcm1hbEluZGV4ICs9IDM7CiAgICAgICAgICB3YWxsRXh0cnVkZU5vcm1hbHNbZXh0cnVkZU5vcm1hbEluZGV4KytdID0gdG9wTm9ybWFsc1t0aHJlZUldOwogICAgICAgICAgd2FsbEV4dHJ1ZGVOb3JtYWxzW2V4dHJ1ZGVOb3JtYWxJbmRleCsrXSA9IHRvcE5vcm1hbHNbdGhyZWVJICsgMV07CiAgICAgICAgICB3YWxsRXh0cnVkZU5vcm1hbHNbZXh0cnVkZU5vcm1hbEluZGV4KytdID0gdG9wTm9ybWFsc1t0aHJlZUkgKyAyXTsKICAgICAgICB9CiAgICAgICAgaWYgKGNvbXB1dGVUb3BPZmZzZXRzKSB7CiAgICAgICAgICB3YWxsT2Zmc2V0QXR0cmlidXRlW3dhbGxPZmZzZXRJbmRleCsrXSA9IDE7CiAgICAgICAgICB3YWxsT2Zmc2V0SW5kZXggKz0gMTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGxldCBnZW8gPSBjYWxjdWxhdGVBdHRyaWJ1dGVzV2FsbCh3YWxsUG9zaXRpb25zLCB2ZXJ0ZXhGb3JtYXQsIGVsbGlwc29pZCk7CiAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgIGdlby5hdHRyaWJ1dGVzLnN0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDIsCiAgICAgICAgdmFsdWVzOiB3YWxsVGV4dHVyZXMKICAgICAgfSk7CiAgICB9CiAgICBpZiAoc2hhZG93Vm9sdW1lKSB7CiAgICAgIGdlby5hdHRyaWJ1dGVzLmV4dHJ1ZGVEaXJlY3Rpb24gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IHdhbGxFeHRydWRlTm9ybWFscwogICAgICB9KTsKICAgIH0KICAgIGlmIChoYXNPZmZzZXRzKSB7CiAgICAgIGdlby5hdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICB2YWx1ZXM6IHdhbGxPZmZzZXRBdHRyaWJ1dGUKICAgICAgfSk7CiAgICB9CiAgICBjb25zdCB3YWxsSW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICB3YWxsQ291bnQsCiAgICAgIHBlcmltZXRlclBvc2l0aW9ucyAqIDYKICAgICk7CiAgICBsZXQgdXBwZXJMZWZ0OwogICAgbGV0IGxvd2VyTGVmdDsKICAgIGxldCBsb3dlclJpZ2h0OwogICAgbGV0IHVwcGVyUmlnaHQ7CiAgICBsZW5ndGggPSB3YWxsUG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICBsZXQgaW5kZXggPSAwOwogICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aCAtIDE7IGkgKz0gMikgewogICAgICB1cHBlckxlZnQgPSBpOwogICAgICB1cHBlclJpZ2h0ID0gKHVwcGVyTGVmdCArIDIpICUgbGVuZ3RoOwogICAgICBjb25zdCBwMSA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkod2FsbFBvc2l0aW9ucywgdXBwZXJMZWZ0ICogMywgdjFTY3JhdGNoKTsKICAgICAgY29uc3QgcDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHdhbGxQb3NpdGlvbnMsIHVwcGVyUmlnaHQgKiAzLCB2MlNjcmF0Y2gpOwogICAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24ocDEsIHAyLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjEwKSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGxvd2VyTGVmdCA9ICh1cHBlckxlZnQgKyAxKSAlIGxlbmd0aDsKICAgICAgbG93ZXJSaWdodCA9IChsb3dlckxlZnQgKyAyKSAlIGxlbmd0aDsKICAgICAgd2FsbEluZGljZXNbaW5kZXgrK10gPSB1cHBlckxlZnQ7CiAgICAgIHdhbGxJbmRpY2VzW2luZGV4KytdID0gbG93ZXJMZWZ0OwogICAgICB3YWxsSW5kaWNlc1tpbmRleCsrXSA9IHVwcGVyUmlnaHQ7CiAgICAgIHdhbGxJbmRpY2VzW2luZGV4KytdID0gdXBwZXJSaWdodDsKICAgICAgd2FsbEluZGljZXNbaW5kZXgrK10gPSBsb3dlckxlZnQ7CiAgICAgIHdhbGxJbmRpY2VzW2luZGV4KytdID0gbG93ZXJSaWdodDsKICAgIH0KICAgIGdlby5pbmRpY2VzID0gd2FsbEluZGljZXM7CiAgICBnZW8gPSBHZW9tZXRyeVBpcGVsaW5lX2RlZmF1bHQuY29tYmluZUluc3RhbmNlcyhbCiAgICAgIG5ldyBHZW9tZXRyeUluc3RhbmNlX2RlZmF1bHQoewogICAgICAgIGdlb21ldHJ5OiB0b3BCb3R0b21HZW8KICAgICAgfSksCiAgICAgIG5ldyBHZW9tZXRyeUluc3RhbmNlX2RlZmF1bHQoewogICAgICAgIGdlb21ldHJ5OiBnZW8KICAgICAgfSkKICAgIF0pOwogICAgcmV0dXJuIGdlb1swXTsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZVJlY3RhbmdsZTQocmVjdGFuZ2xlLCBncmFudWxhcml0eSwgcm90YXRpb24sIGVsbGlwc29pZCwgcmVzdWx0KSB7CiAgICBpZiAocm90YXRpb24gPT09IDApIHsKICAgICAgcmV0dXJuIFJlY3RhbmdsZV9kZWZhdWx0LmNsb25lKHJlY3RhbmdsZSwgcmVzdWx0KTsKICAgIH0KICAgIGNvbnN0IGNvbXB1dGVkT3B0aW9ucyA9IFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVPcHRpb25zKAogICAgICByZWN0YW5nbGUsCiAgICAgIGdyYW51bGFyaXR5LAogICAgICByb3RhdGlvbiwKICAgICAgMCwKICAgICAgcmVjdGFuZ2xlU2NyYXRjaCwKICAgICAgbndTY3JhdGNoCiAgICApOwogICAgY29uc3QgaGVpZ2h0ID0gY29tcHV0ZWRPcHRpb25zLmhlaWdodDsKICAgIGNvbnN0IHdpZHRoID0gY29tcHV0ZWRPcHRpb25zLndpZHRoOwogICAgY29uc3QgcG9zaXRpb25zID0gc2NyYXRjaFJlY3RhbmdsZVBvaW50czsKICAgIFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbigKICAgICAgY29tcHV0ZWRPcHRpb25zLAogICAgICBlbGxpcHNvaWQsCiAgICAgIGZhbHNlLAogICAgICAwLAogICAgICAwLAogICAgICBwb3NpdGlvbnNbMF0KICAgICk7CiAgICBSZWN0YW5nbGVHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlUG9zaXRpb24oCiAgICAgIGNvbXB1dGVkT3B0aW9ucywKICAgICAgZWxsaXBzb2lkLAogICAgICBmYWxzZSwKICAgICAgMCwKICAgICAgd2lkdGggLSAxLAogICAgICBwb3NpdGlvbnNbMV0KICAgICk7CiAgICBSZWN0YW5nbGVHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlUG9zaXRpb24oCiAgICAgIGNvbXB1dGVkT3B0aW9ucywKICAgICAgZWxsaXBzb2lkLAogICAgICBmYWxzZSwKICAgICAgaGVpZ2h0IC0gMSwKICAgICAgMCwKICAgICAgcG9zaXRpb25zWzJdCiAgICApOwogICAgUmVjdGFuZ2xlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZVBvc2l0aW9uKAogICAgICBjb21wdXRlZE9wdGlvbnMsCiAgICAgIGVsbGlwc29pZCwKICAgICAgZmFsc2UsCiAgICAgIGhlaWdodCAtIDEsCiAgICAgIHdpZHRoIC0gMSwKICAgICAgcG9zaXRpb25zWzNdCiAgICApOwogICAgcmV0dXJuIFJlY3RhbmdsZV9kZWZhdWx0LmZyb21DYXJ0ZXNpYW5BcnJheShwb3NpdGlvbnMsIGVsbGlwc29pZCwgcmVzdWx0KTsKICB9CiAgZnVuY3Rpb24gUmVjdGFuZ2xlR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCByZWN0YW5nbGUgPSBvcHRpb25zLnJlY3RhbmdsZTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVjdGFuZ2xlIiwgcmVjdGFuZ2xlKTsKICAgIFJlY3RhbmdsZV9kZWZhdWx0LnZhbGlkYXRlKHJlY3RhbmdsZSk7CiAgICBpZiAocmVjdGFuZ2xlLm5vcnRoIDwgcmVjdGFuZ2xlLnNvdXRoKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJvcHRpb25zLnJlY3RhbmdsZS5ub3J0aCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBvcHRpb25zLnJlY3RhbmdsZS5zb3V0aCIKICAgICAgKTsKICAgIH0KICAgIGNvbnN0IGhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuaGVpZ2h0LCAwKTsKICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5leHRydWRlZEhlaWdodCwgaGVpZ2h0KTsKICAgIHRoaXMuX3JlY3RhbmdsZSA9IFJlY3RhbmdsZV9kZWZhdWx0LmNsb25lKHJlY3RhbmdsZSk7CiAgICB0aGlzLl9ncmFudWxhcml0eSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFCiAgICApOwogICAgdGhpcy5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoCiAgICAgIGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NCkKICAgICk7CiAgICB0aGlzLl9zdXJmYWNlSGVpZ2h0ID0gTWF0aC5tYXgoaGVpZ2h0LCBleHRydWRlZEhlaWdodCk7CiAgICB0aGlzLl9yb3RhdGlvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMucm90YXRpb24sIDApOwogICAgdGhpcy5fc3RSb3RhdGlvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuc3RSb3RhdGlvbiwgMCk7CiAgICB0aGlzLl92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSgKICAgICAgZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy52ZXJ0ZXhGb3JtYXQsIFZlcnRleEZvcm1hdF9kZWZhdWx0LkRFRkFVTFQpCiAgICApOwogICAgdGhpcy5fZXh0cnVkZWRIZWlnaHQgPSBNYXRoLm1pbihoZWlnaHQsIGV4dHJ1ZGVkSGVpZ2h0KTsKICAgIHRoaXMuX3NoYWRvd1ZvbHVtZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuc2hhZG93Vm9sdW1lLCBmYWxzZSk7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZVJlY3RhbmdsZUdlb21ldHJ5IjsKICAgIHRoaXMuX29mZnNldEF0dHJpYnV0ZSA9IG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlOwogICAgdGhpcy5fcm90YXRlZFJlY3RhbmdsZSA9IHZvaWQgMDsKICAgIHRoaXMuX3RleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHMgPSB2b2lkIDA7CiAgfQogIGZ1bmN0aW9uIHRleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHMzKHJlY3RhbmdsZUdlb21ldHJ5KSB7CiAgICBpZiAocmVjdGFuZ2xlR2VvbWV0cnkuX3N0Um90YXRpb24gPT09IDApIHsKICAgICAgcmV0dXJuIFswLCAwLCAwLCAxLCAxLCAwXTsKICAgIH0KICAgIGNvbnN0IHJlY3RhbmdsZSA9IFJlY3RhbmdsZV9kZWZhdWx0LmNsb25lKAogICAgICByZWN0YW5nbGVHZW9tZXRyeS5fcmVjdGFuZ2xlLAogICAgICB1bnJvdGF0ZWRUZXh0dXJlUmVjdGFuZ2xlU2NyYXRjaAogICAgKTsKICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gcmVjdGFuZ2xlR2VvbWV0cnkuX2dyYW51bGFyaXR5OwogICAgY29uc3QgZWxsaXBzb2lkID0gcmVjdGFuZ2xlR2VvbWV0cnkuX2VsbGlwc29pZDsKICAgIGNvbnN0IHJvdGF0aW9uID0gcmVjdGFuZ2xlR2VvbWV0cnkuX3JvdGF0aW9uIC0gcmVjdGFuZ2xlR2VvbWV0cnkuX3N0Um90YXRpb247CiAgICBjb25zdCB1bnJvdGF0ZWRUZXh0dXJlUmVjdGFuZ2xlID0gY29tcHV0ZVJlY3RhbmdsZTQoCiAgICAgIHJlY3RhbmdsZSwKICAgICAgZ3JhbnVsYXJpdHksCiAgICAgIHJvdGF0aW9uLAogICAgICBlbGxpcHNvaWQsCiAgICAgIHVucm90YXRlZFRleHR1cmVSZWN0YW5nbGVTY3JhdGNoCiAgICApOwogICAgY29uc3QgcG9pbnRzMkQgPSBwb2ludHMyRFNjcmF0Y2gyOwogICAgcG9pbnRzMkRbMF0ueCA9IHVucm90YXRlZFRleHR1cmVSZWN0YW5nbGUud2VzdDsKICAgIHBvaW50czJEWzBdLnkgPSB1bnJvdGF0ZWRUZXh0dXJlUmVjdGFuZ2xlLnNvdXRoOwogICAgcG9pbnRzMkRbMV0ueCA9IHVucm90YXRlZFRleHR1cmVSZWN0YW5nbGUud2VzdDsKICAgIHBvaW50czJEWzFdLnkgPSB1bnJvdGF0ZWRUZXh0dXJlUmVjdGFuZ2xlLm5vcnRoOwogICAgcG9pbnRzMkRbMl0ueCA9IHVucm90YXRlZFRleHR1cmVSZWN0YW5nbGUuZWFzdDsKICAgIHBvaW50czJEWzJdLnkgPSB1bnJvdGF0ZWRUZXh0dXJlUmVjdGFuZ2xlLnNvdXRoOwogICAgY29uc3QgYm91bmRpbmdSZWN0YW5nbGUgPSByZWN0YW5nbGVHZW9tZXRyeS5yZWN0YW5nbGU7CiAgICBjb25zdCB0b0Rlc2lyZWRJbkNvbXB1dGVkID0gTWF0cml4Ml9kZWZhdWx0LmZyb21Sb3RhdGlvbigKICAgICAgcmVjdGFuZ2xlR2VvbWV0cnkuX3N0Um90YXRpb24sCiAgICAgIHJvdGF0aW9uMkRTY3JhdGNoMgogICAgKTsKICAgIGNvbnN0IGJvdW5kaW5nUmVjdGFuZ2xlQ2VudGVyID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2VudGVyKAogICAgICBib3VuZGluZ1JlY3RhbmdsZSwKICAgICAgcmVjdGFuZ2xlQ2VudGVyU2NyYXRjaDIKICAgICk7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7ICsraSkgewogICAgICBjb25zdCBwb2ludDJEID0gcG9pbnRzMkRbaV07CiAgICAgIHBvaW50MkQueCAtPSBib3VuZGluZ1JlY3RhbmdsZUNlbnRlci5sb25naXR1ZGU7CiAgICAgIHBvaW50MkQueSAtPSBib3VuZGluZ1JlY3RhbmdsZUNlbnRlci5sYXRpdHVkZTsKICAgICAgTWF0cml4Ml9kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IodG9EZXNpcmVkSW5Db21wdXRlZCwgcG9pbnQyRCwgcG9pbnQyRCk7CiAgICAgIHBvaW50MkQueCArPSBib3VuZGluZ1JlY3RhbmdsZUNlbnRlci5sb25naXR1ZGU7CiAgICAgIHBvaW50MkQueSArPSBib3VuZGluZ1JlY3RhbmdsZUNlbnRlci5sYXRpdHVkZTsKICAgICAgcG9pbnQyRC54ID0gKHBvaW50MkQueCAtIGJvdW5kaW5nUmVjdGFuZ2xlLndlc3QpIC8gYm91bmRpbmdSZWN0YW5nbGUud2lkdGg7CiAgICAgIHBvaW50MkQueSA9IChwb2ludDJELnkgLSBib3VuZGluZ1JlY3RhbmdsZS5zb3V0aCkgLyBib3VuZGluZ1JlY3RhbmdsZS5oZWlnaHQ7CiAgICB9CiAgICBjb25zdCBtaW5YWUNvcm5lciA9IHBvaW50czJEWzBdOwogICAgY29uc3QgbWF4WUNvcm5lciA9IHBvaW50czJEWzFdOwogICAgY29uc3QgbWF4WENvcm5lciA9IHBvaW50czJEWzJdOwogICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KDYpOwogICAgQ2FydGVzaWFuMl9kZWZhdWx0LnBhY2sobWluWFlDb3JuZXIsIHJlc3VsdCk7CiAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQucGFjayhtYXhZQ29ybmVyLCByZXN1bHQsIDIpOwogICAgQ2FydGVzaWFuMl9kZWZhdWx0LnBhY2sobWF4WENvcm5lciwgcmVzdWx0LCA0KTsKICAgIHJldHVybiByZXN1bHQ7CiAgfQogIHZhciBwb3NpdGlvblNjcmF0Y2gyLCBub3JtYWxTY3JhdGNoNCwgdGFuZ2VudFNjcmF0Y2gyLCBiaXRhbmdlbnRTY3JhdGNoMiwgcmVjdGFuZ2xlU2NyYXRjaCwgc3RTY3JhdGNoMiwgYm90dG9tQm91bmRpbmdTcGhlcmUzLCB0b3BCb3VuZGluZ1NwaGVyZTMsIHYxU2NyYXRjaCwgdjJTY3JhdGNoLCBzY3JhdGNoVmVydGV4Rm9ybWF0MTIsIHNjcmF0Y2hSZWN0YW5nbGVQb2ludHMsIG53U2NyYXRjaCwgc3ROd1NjcmF0Y2gsIHNjcmF0Y2hSZWN0YW5nbGUsIHNjcmF0Y2hFbGxpcHNvaWQxMSwgc2NyYXRjaE9wdGlvbnMxOSwgdGFuZ2VudFJvdGF0aW9uTWF0cml4U2NyYXRjaCwgcXVhdGVybmlvblNjcmF0Y2g0LCBjZW50ZXJTY3JhdGNoNCwgdW5yb3RhdGVkVGV4dHVyZVJlY3RhbmdsZVNjcmF0Y2gsIHBvaW50czJEU2NyYXRjaDIsIHJvdGF0aW9uMkRTY3JhdGNoMiwgcmVjdGFuZ2xlQ2VudGVyU2NyYXRjaDIsIFJlY3RhbmdsZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfUmVjdGFuZ2xlR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1JlY3RhbmdsZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9HZW9tZXRyeUluc3RhbmNlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeVBpcGVsaW5lKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9NYXRyaXgyKCk7CiAgICAgIGluaXRfTWF0cml4MygpOwogICAgICBpbml0X1BvbHlnb25QaXBlbGluZSgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgaW5pdF9RdWF0ZXJuaW9uKCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlR2VvbWV0cnlMaWJyYXJ5KCk7CiAgICAgIGluaXRfVmVydGV4Rm9ybWF0KCk7CiAgICAgIHBvc2l0aW9uU2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIG5vcm1hbFNjcmF0Y2g0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB0YW5nZW50U2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGJpdGFuZ2VudFNjcmF0Y2gyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICByZWN0YW5nbGVTY3JhdGNoID0gbmV3IFJlY3RhbmdsZV9kZWZhdWx0KCk7CiAgICAgIHN0U2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIGJvdHRvbUJvdW5kaW5nU3BoZXJlMyA9IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KCk7CiAgICAgIHRvcEJvdW5kaW5nU3BoZXJlMyA9IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KCk7CiAgICAgIHYxU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgdjJTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoVmVydGV4Rm9ybWF0MTIgPSBuZXcgVmVydGV4Rm9ybWF0X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFJlY3RhbmdsZVBvaW50cyA9IFsKICAgICAgICBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksCiAgICAgICAgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLAogICAgICAgIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwKICAgICAgICBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCkKICAgICAgXTsKICAgICAgbndTY3JhdGNoID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHN0TndTY3JhdGNoID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIFJlY3RhbmdsZUdlb21ldHJ5LnBhY2tlZExlbmd0aCA9IFJlY3RhbmdsZV9kZWZhdWx0LnBhY2tlZExlbmd0aCArIEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIDc7CiAgICAgIFJlY3RhbmdsZUdlb21ldHJ5LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIFJlY3RhbmdsZV9kZWZhdWx0LnBhY2sodmFsdWUuX3JlY3RhbmdsZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gUmVjdGFuZ2xlX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIEVsbGlwc29pZF9kZWZhdWx0LnBhY2sodmFsdWUuX2VsbGlwc29pZCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2sodmFsdWUuX3ZlcnRleEZvcm1hdCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fZ3JhbnVsYXJpdHk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9zdXJmYWNlSGVpZ2h0OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fcm90YXRpb247CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9zdFJvdGF0aW9uOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9zaGFkb3dWb2x1bWUgPyAxIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHZhbHVlLl9vZmZzZXRBdHRyaWJ1dGUsIC0xKTsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hSZWN0YW5nbGUgPSBuZXcgUmVjdGFuZ2xlX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEVsbGlwc29pZDExID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoRWxsaXBzb2lkX2RlZmF1bHQuVU5JVF9TUEhFUkUpOwogICAgICBzY3JhdGNoT3B0aW9uczE5ID0gewogICAgICAgIHJlY3RhbmdsZTogc2NyYXRjaFJlY3RhbmdsZSwKICAgICAgICBlbGxpcHNvaWQ6IHNjcmF0Y2hFbGxpcHNvaWQxMSwKICAgICAgICB2ZXJ0ZXhGb3JtYXQ6IHNjcmF0Y2hWZXJ0ZXhGb3JtYXQxMiwKICAgICAgICBncmFudWxhcml0eTogdm9pZCAwLAogICAgICAgIGhlaWdodDogdm9pZCAwLAogICAgICAgIHJvdGF0aW9uOiB2b2lkIDAsCiAgICAgICAgc3RSb3RhdGlvbjogdm9pZCAwLAogICAgICAgIGV4dHJ1ZGVkSGVpZ2h0OiB2b2lkIDAsCiAgICAgICAgc2hhZG93Vm9sdW1lOiB2b2lkIDAsCiAgICAgICAgb2Zmc2V0QXR0cmlidXRlOiB2b2lkIDAKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGNvbnN0IHJlY3RhbmdsZSA9IFJlY3RhbmdsZV9kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgc2NyYXRjaFJlY3RhbmdsZSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBSZWN0YW5nbGVfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4LCBzY3JhdGNoRWxsaXBzb2lkMTEpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnVucGFjaygKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQxMgogICAgICAgICk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHN1cmZhY2VIZWlnaHQgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHJvdGF0aW9uID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBzdFJvdGF0aW9uID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgc2hhZG93Vm9sdW1lID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9PT0gMTsKICAgICAgICBjb25zdCBvZmZzZXRBdHRyaWJ1dGUgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE5LmdyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE5LmhlaWdodCA9IHN1cmZhY2VIZWlnaHQ7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE5LnJvdGF0aW9uID0gcm90YXRpb247CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE5LnN0Um90YXRpb24gPSBzdFJvdGF0aW9uOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxOS5leHRydWRlZEhlaWdodCA9IGV4dHJ1ZGVkSGVpZ2h0OwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxOS5zaGFkb3dWb2x1bWUgPSBzaGFkb3dWb2x1bWU7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE5Lm9mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZSA9PT0gLTEgPyB2b2lkIDAgOiBvZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgICByZXR1cm4gbmV3IFJlY3RhbmdsZUdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zMTkpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuX3JlY3RhbmdsZSA9IFJlY3RhbmdsZV9kZWZhdWx0LmNsb25lKHJlY3RhbmdsZSwgcmVzdWx0Ll9yZWN0YW5nbGUpOwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLCByZXN1bHQuX2VsbGlwc29pZCk7CiAgICAgICAgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSh2ZXJ0ZXhGb3JtYXQsIHJlc3VsdC5fdmVydGV4Rm9ybWF0KTsKICAgICAgICByZXN1bHQuX2dyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICAgICAgcmVzdWx0Ll9zdXJmYWNlSGVpZ2h0ID0gc3VyZmFjZUhlaWdodDsKICAgICAgICByZXN1bHQuX3JvdGF0aW9uID0gcm90YXRpb247CiAgICAgICAgcmVzdWx0Ll9zdFJvdGF0aW9uID0gc3RSb3RhdGlvbjsKICAgICAgICByZXN1bHQuX2V4dHJ1ZGVkSGVpZ2h0ID0gZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgcmVzdWx0Ll9zaGFkb3dWb2x1bWUgPSBzaGFkb3dWb2x1bWU7CiAgICAgICAgcmVzdWx0Ll9vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFJlY3RhbmdsZUdlb21ldHJ5LmNvbXB1dGVSZWN0YW5nbGUgPSBmdW5jdGlvbihvcHRpb25zLCByZXN1bHQpIHsKICAgICAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgICAgICBjb25zdCByZWN0YW5nbGUgPSBvcHRpb25zLnJlY3RhbmdsZTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgUmVjdGFuZ2xlX2RlZmF1bHQudmFsaWRhdGUocmVjdGFuZ2xlKTsKICAgICAgICBpZiAocmVjdGFuZ2xlLm5vcnRoIDwgcmVjdGFuZ2xlLnNvdXRoKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgIm9wdGlvbnMucmVjdGFuZ2xlLm5vcnRoIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIG9wdGlvbnMucmVjdGFuZ2xlLnNvdXRoIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgICAgIG9wdGlvbnMuZ3JhbnVsYXJpdHksCiAgICAgICAgICBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFCiAgICAgICAgKTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuV0dTODQpOwogICAgICAgIGNvbnN0IHJvdGF0aW9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5yb3RhdGlvbiwgMCk7CiAgICAgICAgcmV0dXJuIGNvbXB1dGVSZWN0YW5nbGU0KHJlY3RhbmdsZSwgZ3JhbnVsYXJpdHksIHJvdGF0aW9uLCBlbGxpcHNvaWQsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIHRhbmdlbnRSb3RhdGlvbk1hdHJpeFNjcmF0Y2ggPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIHF1YXRlcm5pb25TY3JhdGNoNCA9IG5ldyBRdWF0ZXJuaW9uX2RlZmF1bHQoKTsKICAgICAgY2VudGVyU2NyYXRjaDQgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgUmVjdGFuZ2xlR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihyZWN0YW5nbGVHZW9tZXRyeSkgewogICAgICAgIGlmIChNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHJlY3RhbmdsZUdlb21ldHJ5Ll9yZWN0YW5nbGUubm9ydGgsCiAgICAgICAgICByZWN0YW5nbGVHZW9tZXRyeS5fcmVjdGFuZ2xlLnNvdXRoLAogICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT04xMAogICAgICAgICkgfHwgTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICByZWN0YW5nbGVHZW9tZXRyeS5fcmVjdGFuZ2xlLmVhc3QsCiAgICAgICAgICByZWN0YW5nbGVHZW9tZXRyeS5fcmVjdGFuZ2xlLndlc3QsCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjEwCiAgICAgICAgKSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgbGV0IHJlY3RhbmdsZSA9IHJlY3RhbmdsZUdlb21ldHJ5Ll9yZWN0YW5nbGU7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gcmVjdGFuZ2xlR2VvbWV0cnkuX2VsbGlwc29pZDsKICAgICAgICBjb25zdCByb3RhdGlvbiA9IHJlY3RhbmdsZUdlb21ldHJ5Ll9yb3RhdGlvbjsKICAgICAgICBjb25zdCBzdFJvdGF0aW9uID0gcmVjdGFuZ2xlR2VvbWV0cnkuX3N0Um90YXRpb247CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gcmVjdGFuZ2xlR2VvbWV0cnkuX3ZlcnRleEZvcm1hdDsKICAgICAgICBjb25zdCBjb21wdXRlZE9wdGlvbnMgPSBSZWN0YW5nbGVHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlT3B0aW9ucygKICAgICAgICAgIHJlY3RhbmdsZSwKICAgICAgICAgIHJlY3RhbmdsZUdlb21ldHJ5Ll9ncmFudWxhcml0eSwKICAgICAgICAgIHJvdGF0aW9uLAogICAgICAgICAgc3RSb3RhdGlvbiwKICAgICAgICAgIHJlY3RhbmdsZVNjcmF0Y2gsCiAgICAgICAgICBud1NjcmF0Y2gsCiAgICAgICAgICBzdE53U2NyYXRjaAogICAgICAgICk7CiAgICAgICAgY29uc3QgdGFuZ2VudFJvdGF0aW9uTWF0cml4ID0gdGFuZ2VudFJvdGF0aW9uTWF0cml4U2NyYXRjaDsKICAgICAgICBpZiAoc3RSb3RhdGlvbiAhPT0gMCB8fCByb3RhdGlvbiAhPT0gMCkgewogICAgICAgICAgY29uc3QgY2VudGVyID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2VudGVyKHJlY3RhbmdsZSwgY2VudGVyU2NyYXRjaDQpOwogICAgICAgICAgY29uc3QgYXhpcyA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWxDYXJ0b2dyYXBoaWMoY2VudGVyLCB2MVNjcmF0Y2gpOwogICAgICAgICAgUXVhdGVybmlvbl9kZWZhdWx0LmZyb21BeGlzQW5nbGUoYXhpcywgLXN0Um90YXRpb24sIHF1YXRlcm5pb25TY3JhdGNoNCk7CiAgICAgICAgICBNYXRyaXgzX2RlZmF1bHQuZnJvbVF1YXRlcm5pb24ocXVhdGVybmlvblNjcmF0Y2g0LCB0YW5nZW50Um90YXRpb25NYXRyaXgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBNYXRyaXgzX2RlZmF1bHQuY2xvbmUoTWF0cml4M19kZWZhdWx0LklERU5USVRZLCB0YW5nZW50Um90YXRpb25NYXRyaXgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBzdXJmYWNlSGVpZ2h0ID0gcmVjdGFuZ2xlR2VvbWV0cnkuX3N1cmZhY2VIZWlnaHQ7CiAgICAgICAgY29uc3QgZXh0cnVkZWRIZWlnaHQgPSByZWN0YW5nbGVHZW9tZXRyeS5fZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgY29uc3QgZXh0cnVkZSA9ICFNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHN1cmZhY2VIZWlnaHQsCiAgICAgICAgICBleHRydWRlZEhlaWdodCwKICAgICAgICAgIDAsCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjIKICAgICAgICApOwogICAgICAgIGNvbXB1dGVkT3B0aW9ucy5sb25TY2FsYXIgPSAxIC8gcmVjdGFuZ2xlR2VvbWV0cnkuX3JlY3RhbmdsZS53aWR0aDsKICAgICAgICBjb21wdXRlZE9wdGlvbnMubGF0U2NhbGFyID0gMSAvIHJlY3RhbmdsZUdlb21ldHJ5Ll9yZWN0YW5nbGUuaGVpZ2h0OwogICAgICAgIGNvbXB1dGVkT3B0aW9ucy50YW5nZW50Um90YXRpb25NYXRyaXggPSB0YW5nZW50Um90YXRpb25NYXRyaXg7CiAgICAgICAgbGV0IGdlb21ldHJ5OwogICAgICAgIGxldCBib3VuZGluZ1NwaGVyZTsKICAgICAgICByZWN0YW5nbGUgPSByZWN0YW5nbGVHZW9tZXRyeS5fcmVjdGFuZ2xlOwogICAgICAgIGlmIChleHRydWRlKSB7CiAgICAgICAgICBnZW9tZXRyeSA9IGNvbnN0cnVjdEV4dHJ1ZGVkUmVjdGFuZ2xlKHJlY3RhbmdsZUdlb21ldHJ5LCBjb21wdXRlZE9wdGlvbnMpOwogICAgICAgICAgY29uc3QgdG9wQlMgPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmZyb21SZWN0YW5nbGUzRCgKICAgICAgICAgICAgcmVjdGFuZ2xlLAogICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgIHN1cmZhY2VIZWlnaHQsCiAgICAgICAgICAgIHRvcEJvdW5kaW5nU3BoZXJlMwogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IGJvdHRvbUJTID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tUmVjdGFuZ2xlM0QoCiAgICAgICAgICAgIHJlY3RhbmdsZSwKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICBleHRydWRlZEhlaWdodCwKICAgICAgICAgICAgYm90dG9tQm91bmRpbmdTcGhlcmUzCiAgICAgICAgICApOwogICAgICAgICAgYm91bmRpbmdTcGhlcmUgPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnVuaW9uKHRvcEJTLCBib3R0b21CUyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGdlb21ldHJ5ID0gY29uc3RydWN0UmVjdGFuZ2xlKHJlY3RhbmdsZUdlb21ldHJ5LCBjb21wdXRlZE9wdGlvbnMpOwogICAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMgPSBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdC5zY2FsZVRvR2VvZGV0aWNIZWlnaHQoCiAgICAgICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLAogICAgICAgICAgICBzdXJmYWNlSGVpZ2h0LAogICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgIGZhbHNlCiAgICAgICAgICApOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZWN0YW5nbGVHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlKSkgewogICAgICAgICAgICBjb25zdCBsZW5ndGggPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGg7CiAgICAgICAgICAgIGNvbnN0IG9mZnNldFZhbHVlID0gcmVjdGFuZ2xlR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5OT05FID8gMCA6IDE7CiAgICAgICAgICAgIGNvbnN0IGFwcGx5T2Zmc2V0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoIC8gMykuZmlsbChvZmZzZXRWYWx1ZSk7CiAgICAgICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAxLAogICAgICAgICAgICAgIHZhbHVlczogYXBwbHlPZmZzZXQKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBib3VuZGluZ1NwaGVyZSA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVJlY3RhbmdsZTNEKAogICAgICAgICAgICByZWN0YW5nbGUsCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgc3VyZmFjZUhlaWdodAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgaWYgKCF2ZXJ0ZXhGb3JtYXQucG9zaXRpb24pIHsKICAgICAgICAgIGRlbGV0ZSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlczogZ2VvbWV0cnkuYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXM6IGdlb21ldHJ5LmluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBnZW9tZXRyeS5wcmltaXRpdmVUeXBlLAogICAgICAgICAgYm91bmRpbmdTcGhlcmUsCiAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IHJlY3RhbmdsZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlR2VvbWV0cnkuY3JlYXRlU2hhZG93Vm9sdW1lID0gZnVuY3Rpb24ocmVjdGFuZ2xlR2VvbWV0cnksIG1pbkhlaWdodEZ1bmMsIG1heEhlaWdodEZ1bmMpIHsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IHJlY3RhbmdsZUdlb21ldHJ5Ll9ncmFudWxhcml0eTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSByZWN0YW5nbGVHZW9tZXRyeS5fZWxsaXBzb2lkOwogICAgICAgIGNvbnN0IG1pbkhlaWdodCA9IG1pbkhlaWdodEZ1bmMoZ3JhbnVsYXJpdHksIGVsbGlwc29pZCk7CiAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gbWF4SGVpZ2h0RnVuYyhncmFudWxhcml0eSwgZWxsaXBzb2lkKTsKICAgICAgICByZXR1cm4gbmV3IFJlY3RhbmdsZUdlb21ldHJ5KHsKICAgICAgICAgIHJlY3RhbmdsZTogcmVjdGFuZ2xlR2VvbWV0cnkuX3JlY3RhbmdsZSwKICAgICAgICAgIHJvdGF0aW9uOiByZWN0YW5nbGVHZW9tZXRyeS5fcm90YXRpb24sCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBzdFJvdGF0aW9uOiByZWN0YW5nbGVHZW9tZXRyeS5fc3RSb3RhdGlvbiwKICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgZXh0cnVkZWRIZWlnaHQ6IG1heEhlaWdodCwKICAgICAgICAgIGhlaWdodDogbWluSGVpZ2h0LAogICAgICAgICAgdmVydGV4Rm9ybWF0OiBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5QT1NJVElPTl9PTkxZLAogICAgICAgICAgc2hhZG93Vm9sdW1lOiB0cnVlCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIHVucm90YXRlZFRleHR1cmVSZWN0YW5nbGVTY3JhdGNoID0gbmV3IFJlY3RhbmdsZV9kZWZhdWx0KCk7CiAgICAgIHBvaW50czJEU2NyYXRjaDIgPSBbbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpLCBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCksIG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKV07CiAgICAgIHJvdGF0aW9uMkRTY3JhdGNoMiA9IG5ldyBNYXRyaXgyX2RlZmF1bHQoKTsKICAgICAgcmVjdGFuZ2xlQ2VudGVyU2NyYXRjaDIgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVjdGFuZ2xlR2VvbWV0cnkucHJvdG90eXBlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKi8KICAgICAgICByZWN0YW5nbGU6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHRoaXMuX3JvdGF0ZWRSZWN0YW5nbGUpKSB7CiAgICAgICAgICAgICAgdGhpcy5fcm90YXRlZFJlY3RhbmdsZSA9IGNvbXB1dGVSZWN0YW5nbGU0KAogICAgICAgICAgICAgICAgdGhpcy5fcmVjdGFuZ2xlLAogICAgICAgICAgICAgICAgdGhpcy5fZ3JhbnVsYXJpdHksCiAgICAgICAgICAgICAgICB0aGlzLl9yb3RhdGlvbiwKICAgICAgICAgICAgICAgIHRoaXMuX2VsbGlwc29pZAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JvdGF0ZWRSZWN0YW5nbGU7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBGb3IgcmVtYXBwaW5nIHRleHR1cmUgY29vcmRpbmF0ZXMgd2hlbiByZW5kZXJpbmcgUmVjdGFuZ2xlR2VvbWV0cmllcyBhcyBHcm91bmRQcmltaXRpdmVzLgogICAgICAgICAqIFRoaXMgdmVyc2lvbiBwZXJtaXRzIHNrZXcgaW4gdGV4dHVyZXMgYnkgY29tcHV0aW5nIG9mZnNldHMgZGlyZWN0bHkgaW4gY2FydG9ncmFwaGljIHNwYWNlIGFuZAogICAgICAgICAqIG1vcmUgYWNjdXJhdGVseSBhcHByb3hpbWF0ZXMgcmVuZGVyaW5nIFJlY3RhbmdsZUdlb21ldHJpZXMgd2l0aCBoZWlnaHQgYXMgc3RhbmRhcmQgUHJpbWl0aXZlcy4KICAgICAgICAgKiBAc2VlIEdlb21ldHJ5I190ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKi8KICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh0aGlzLl90ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzKSkgewogICAgICAgICAgICAgIHRoaXMuX3RleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHMgPSB0ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzMygKICAgICAgICAgICAgICAgIHRoaXMKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIFJlY3RhbmdsZUdlb21ldHJ5X2RlZmF1bHQgPSBSZWN0YW5nbGVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVJlY3RhbmdsZUdlb21ldHJ5LmpzCiAgdmFyIGNyZWF0ZVJlY3RhbmdsZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVSZWN0YW5nbGVHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVSZWN0YW5nbGVHZW9tZXRyeV9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY3JlYXRlUmVjdGFuZ2xlR2VvbWV0cnkocmVjdGFuZ2xlR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIHJlY3RhbmdsZUdlb21ldHJ5ID0gUmVjdGFuZ2xlR2VvbWV0cnlfZGVmYXVsdC51bnBhY2socmVjdGFuZ2xlR2VvbWV0cnksIG9mZnNldCk7CiAgICB9CiAgICByZWN0YW5nbGVHZW9tZXRyeS5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUocmVjdGFuZ2xlR2VvbWV0cnkuX2VsbGlwc29pZCk7CiAgICByZWN0YW5nbGVHZW9tZXRyeS5fcmVjdGFuZ2xlID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2xvbmUocmVjdGFuZ2xlR2VvbWV0cnkuX3JlY3RhbmdsZSk7CiAgICByZXR1cm4gUmVjdGFuZ2xlR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShyZWN0YW5nbGVHZW9tZXRyeSk7CiAgfQogIHZhciBjcmVhdGVSZWN0YW5nbGVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVJlY3RhbmdsZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVSZWN0YW5nbGVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X1JlY3RhbmdsZSgpOwogICAgICBpbml0X1JlY3RhbmdsZUdlb21ldHJ5KCk7CiAgICAgIGNyZWF0ZVJlY3RhbmdsZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVSZWN0YW5nbGVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1JlY3RhbmdsZU91dGxpbmVHZW9tZXRyeS5qcwogIGZ1bmN0aW9uIGNvbnN0cnVjdFJlY3RhbmdsZTIoZ2VvbWV0cnksIGNvbXB1dGVkT3B0aW9ucykgewogICAgY29uc3QgZWxsaXBzb2lkID0gZ2VvbWV0cnkuX2VsbGlwc29pZDsKICAgIGNvbnN0IGhlaWdodCA9IGNvbXB1dGVkT3B0aW9ucy5oZWlnaHQ7CiAgICBjb25zdCB3aWR0aCA9IGNvbXB1dGVkT3B0aW9ucy53aWR0aDsKICAgIGNvbnN0IG5vcnRoQ2FwID0gY29tcHV0ZWRPcHRpb25zLm5vcnRoQ2FwOwogICAgY29uc3Qgc291dGhDYXAgPSBjb21wdXRlZE9wdGlvbnMuc291dGhDYXA7CiAgICBsZXQgcm93SGVpZ2h0ID0gaGVpZ2h0OwogICAgbGV0IHdpZHRoTXVsdGlwbGllciA9IDI7CiAgICBsZXQgc2l6ZSA9IDA7CiAgICBsZXQgY29ybmVycyA9IDQ7CiAgICBpZiAobm9ydGhDYXApIHsKICAgICAgd2lkdGhNdWx0aXBsaWVyIC09IDE7CiAgICAgIHJvd0hlaWdodCAtPSAxOwogICAgICBzaXplICs9IDE7CiAgICAgIGNvcm5lcnMgLT0gMjsKICAgIH0KICAgIGlmIChzb3V0aENhcCkgewogICAgICB3aWR0aE11bHRpcGxpZXIgLT0gMTsKICAgICAgcm93SGVpZ2h0IC09IDE7CiAgICAgIHNpemUgKz0gMTsKICAgICAgY29ybmVycyAtPSAyOwogICAgfQogICAgc2l6ZSArPSB3aWR0aE11bHRpcGxpZXIgKiB3aWR0aCArIDIgKiByb3dIZWlnaHQgLSBjb3JuZXJzOwogICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShzaXplICogMyk7CiAgICBsZXQgcG9zSW5kZXggPSAwOwogICAgbGV0IHJvdyA9IDA7CiAgICBsZXQgY29sOwogICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvblNjcmF0Y2gzOwogICAgaWYgKG5vcnRoQ2FwKSB7CiAgICAgIFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbigKICAgICAgICBjb21wdXRlZE9wdGlvbnMsCiAgICAgICAgZWxsaXBzb2lkLAogICAgICAgIGZhbHNlLAogICAgICAgIHJvdywKICAgICAgICAwLAogICAgICAgIHBvc2l0aW9uCiAgICAgICk7CiAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLng7CiAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLnk7CiAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLno7CiAgICB9IGVsc2UgewogICAgICBmb3IgKGNvbCA9IDA7IGNvbCA8IHdpZHRoOyBjb2wrKykgewogICAgICAgIFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbigKICAgICAgICAgIGNvbXB1dGVkT3B0aW9ucywKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIGZhbHNlLAogICAgICAgICAgcm93LAogICAgICAgICAgY29sLAogICAgICAgICAgcG9zaXRpb24KICAgICAgICApOwogICAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLng7CiAgICAgICAgcG9zaXRpb25zW3Bvc0luZGV4KytdID0gcG9zaXRpb24ueTsKICAgICAgICBwb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBwb3NpdGlvbi56OwogICAgICB9CiAgICB9CiAgICBjb2wgPSB3aWR0aCAtIDE7CiAgICBmb3IgKHJvdyA9IDE7IHJvdyA8IGhlaWdodDsgcm93KyspIHsKICAgICAgUmVjdGFuZ2xlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZVBvc2l0aW9uKAogICAgICAgIGNvbXB1dGVkT3B0aW9ucywKICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgZmFsc2UsCiAgICAgICAgcm93LAogICAgICAgIGNvbCwKICAgICAgICBwb3NpdGlvbgogICAgICApOwogICAgICBwb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBwb3NpdGlvbi54OwogICAgICBwb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBwb3NpdGlvbi55OwogICAgICBwb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBwb3NpdGlvbi56OwogICAgfQogICAgcm93ID0gaGVpZ2h0IC0gMTsKICAgIGlmICghc291dGhDYXApIHsKICAgICAgZm9yIChjb2wgPSB3aWR0aCAtIDI7IGNvbCA+PSAwOyBjb2wtLSkgewogICAgICAgIFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbigKICAgICAgICAgIGNvbXB1dGVkT3B0aW9ucywKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIGZhbHNlLAogICAgICAgICAgcm93LAogICAgICAgICAgY29sLAogICAgICAgICAgcG9zaXRpb24KICAgICAgICApOwogICAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLng7CiAgICAgICAgcG9zaXRpb25zW3Bvc0luZGV4KytdID0gcG9zaXRpb24ueTsKICAgICAgICBwb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBwb3NpdGlvbi56OwogICAgICB9CiAgICB9CiAgICBjb2wgPSAwOwogICAgZm9yIChyb3cgPSBoZWlnaHQgLSAyOyByb3cgPiAwOyByb3ctLSkgewogICAgICBSZWN0YW5nbGVHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlUG9zaXRpb24oCiAgICAgICAgY29tcHV0ZWRPcHRpb25zLAogICAgICAgIGVsbGlwc29pZCwKICAgICAgICBmYWxzZSwKICAgICAgICByb3csCiAgICAgICAgY29sLAogICAgICAgIHBvc2l0aW9uCiAgICAgICk7CiAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLng7CiAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLnk7CiAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLno7CiAgICB9CiAgICBjb25zdCBpbmRpY2VzU2l6ZSA9IHBvc2l0aW9ucy5sZW5ndGggLyAzICogMjsKICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgcG9zaXRpb25zLmxlbmd0aCAvIDMsCiAgICAgIGluZGljZXNTaXplCiAgICApOwogICAgbGV0IGluZGV4ID0gMDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aCAvIDMgLSAxOyBpKyspIHsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGk7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpICsgMTsKICAgIH0KICAgIGluZGljZXNbaW5kZXgrK10gPSBwb3NpdGlvbnMubGVuZ3RoIC8gMyAtIDE7CiAgICBpbmRpY2VzW2luZGV4KytdID0gMDsKICAgIGNvbnN0IGdlbyA9IG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgYXR0cmlidXRlczogbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KCksCiAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5MSU5FUwogICAgfSk7CiAgICBnZW8uYXR0cmlidXRlcy5wb3NpdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICB2YWx1ZXM6IHBvc2l0aW9ucwogICAgfSk7CiAgICBnZW8uaW5kaWNlcyA9IGluZGljZXM7CiAgICByZXR1cm4gZ2VvOwogIH0KICBmdW5jdGlvbiBjb25zdHJ1Y3RFeHRydWRlZFJlY3RhbmdsZTIocmVjdGFuZ2xlR2VvbWV0cnksIGNvbXB1dGVkT3B0aW9ucykgewogICAgY29uc3Qgc3VyZmFjZUhlaWdodCA9IHJlY3RhbmdsZUdlb21ldHJ5Ll9zdXJmYWNlSGVpZ2h0OwogICAgY29uc3QgZXh0cnVkZWRIZWlnaHQgPSByZWN0YW5nbGVHZW9tZXRyeS5fZXh0cnVkZWRIZWlnaHQ7CiAgICBjb25zdCBlbGxpcHNvaWQgPSByZWN0YW5nbGVHZW9tZXRyeS5fZWxsaXBzb2lkOwogICAgY29uc3QgbWluSGVpZ2h0ID0gZXh0cnVkZWRIZWlnaHQ7CiAgICBjb25zdCBtYXhIZWlnaHQgPSBzdXJmYWNlSGVpZ2h0OwogICAgY29uc3QgZ2VvID0gY29uc3RydWN0UmVjdGFuZ2xlMihyZWN0YW5nbGVHZW9tZXRyeSwgY29tcHV0ZWRPcHRpb25zKTsKICAgIGNvbnN0IGhlaWdodCA9IGNvbXB1dGVkT3B0aW9ucy5oZWlnaHQ7CiAgICBjb25zdCB3aWR0aCA9IGNvbXB1dGVkT3B0aW9ucy53aWR0aDsKICAgIGNvbnN0IHRvcFBvc2l0aW9ucyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodCgKICAgICAgZ2VvLmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLAogICAgICBtYXhIZWlnaHQsCiAgICAgIGVsbGlwc29pZCwKICAgICAgZmFsc2UKICAgICk7CiAgICBsZXQgbGVuZ3RoID0gdG9wUG9zaXRpb25zLmxlbmd0aDsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkobGVuZ3RoICogMik7CiAgICBwb3NpdGlvbnMuc2V0KHRvcFBvc2l0aW9ucyk7CiAgICBjb25zdCBib3R0b21Qb3NpdGlvbnMgPSBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdC5zY2FsZVRvR2VvZGV0aWNIZWlnaHQoCiAgICAgIGdlby5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcywKICAgICAgbWluSGVpZ2h0LAogICAgICBlbGxpcHNvaWQKICAgICk7CiAgICBwb3NpdGlvbnMuc2V0KGJvdHRvbVBvc2l0aW9ucywgbGVuZ3RoKTsKICAgIGdlby5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcyA9IHBvc2l0aW9uczsKICAgIGNvbnN0IG5vcnRoQ2FwID0gY29tcHV0ZWRPcHRpb25zLm5vcnRoQ2FwOwogICAgY29uc3Qgc291dGhDYXAgPSBjb21wdXRlZE9wdGlvbnMuc291dGhDYXA7CiAgICBsZXQgY29ybmVycyA9IDQ7CiAgICBpZiAobm9ydGhDYXApIHsKICAgICAgY29ybmVycyAtPSAxOwogICAgfQogICAgaWYgKHNvdXRoQ2FwKSB7CiAgICAgIGNvcm5lcnMgLT0gMTsKICAgIH0KICAgIGNvbnN0IGluZGljZXNTaXplID0gKHBvc2l0aW9ucy5sZW5ndGggLyAzICsgY29ybmVycykgKiAyOwogICAgY29uc3QgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICBwb3NpdGlvbnMubGVuZ3RoIC8gMywKICAgICAgaW5kaWNlc1NpemUKICAgICk7CiAgICBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoIC8gNjsKICAgIGxldCBpbmRleCA9IDA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aCAtIDE7IGkrKykgewogICAgICBpbmRpY2VzW2luZGV4KytdID0gaTsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGkgKyAxOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gaSArIGxlbmd0aDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGkgKyBsZW5ndGggKyAxOwogICAgfQogICAgaW5kaWNlc1tpbmRleCsrXSA9IGxlbmd0aCAtIDE7CiAgICBpbmRpY2VzW2luZGV4KytdID0gMDsKICAgIGluZGljZXNbaW5kZXgrK10gPSBsZW5ndGggKyBsZW5ndGggLSAxOwogICAgaW5kaWNlc1tpbmRleCsrXSA9IGxlbmd0aDsKICAgIGluZGljZXNbaW5kZXgrK10gPSAwOwogICAgaW5kaWNlc1tpbmRleCsrXSA9IGxlbmd0aDsKICAgIGxldCBib3R0b21Db3JuZXI7CiAgICBpZiAobm9ydGhDYXApIHsKICAgICAgYm90dG9tQ29ybmVyID0gaGVpZ2h0IC0gMTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnN0IHRvcFJpZ2h0Q29ybmVyID0gd2lkdGggLSAxOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gdG9wUmlnaHRDb3JuZXI7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSB0b3BSaWdodENvcm5lciArIGxlbmd0aDsKICAgICAgYm90dG9tQ29ybmVyID0gd2lkdGggKyBoZWlnaHQgLSAyOwogICAgfQogICAgaW5kaWNlc1tpbmRleCsrXSA9IGJvdHRvbUNvcm5lcjsKICAgIGluZGljZXNbaW5kZXgrK10gPSBib3R0b21Db3JuZXIgKyBsZW5ndGg7CiAgICBpZiAoIXNvdXRoQ2FwKSB7CiAgICAgIGNvbnN0IGJvdHRvbUxlZnRDb3JuZXIgPSB3aWR0aCArIGJvdHRvbUNvcm5lciAtIDE7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBib3R0b21MZWZ0Q29ybmVyOwogICAgICBpbmRpY2VzW2luZGV4XSA9IGJvdHRvbUxlZnRDb3JuZXIgKyBsZW5ndGg7CiAgICB9CiAgICBnZW8uaW5kaWNlcyA9IGluZGljZXM7CiAgICByZXR1cm4gZ2VvOwogIH0KICBmdW5jdGlvbiBSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCByZWN0YW5nbGUgPSBvcHRpb25zLnJlY3RhbmdsZTsKICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgIG9wdGlvbnMuZ3JhbnVsYXJpdHksCiAgICAgIE1hdGhfZGVmYXVsdC5SQURJQU5TX1BFUl9ERUdSRUUKICAgICk7CiAgICBjb25zdCBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuV0dTODQpOwogICAgY29uc3Qgcm90YXRpb24gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnJvdGF0aW9uLCAwKTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlY3RhbmdsZSkpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInJlY3RhbmdsZSBpcyByZXF1aXJlZC4iKTsKICAgIH0KICAgIFJlY3RhbmdsZV9kZWZhdWx0LnZhbGlkYXRlKHJlY3RhbmdsZSk7CiAgICBpZiAocmVjdGFuZ2xlLm5vcnRoIDwgcmVjdGFuZ2xlLnNvdXRoKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJvcHRpb25zLnJlY3RhbmdsZS5ub3J0aCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvcHRpb25zLnJlY3RhbmdsZS5zb3V0aCIKICAgICAgKTsKICAgIH0KICAgIGNvbnN0IGhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuaGVpZ2h0LCAwKTsKICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5leHRydWRlZEhlaWdodCwgaGVpZ2h0KTsKICAgIHRoaXMuX3JlY3RhbmdsZSA9IFJlY3RhbmdsZV9kZWZhdWx0LmNsb25lKHJlY3RhbmdsZSk7CiAgICB0aGlzLl9ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgdGhpcy5fZWxsaXBzb2lkID0gZWxsaXBzb2lkOwogICAgdGhpcy5fc3VyZmFjZUhlaWdodCA9IE1hdGgubWF4KGhlaWdodCwgZXh0cnVkZWRIZWlnaHQpOwogICAgdGhpcy5fcm90YXRpb24gPSByb3RhdGlvbjsKICAgIHRoaXMuX2V4dHJ1ZGVkSGVpZ2h0ID0gTWF0aC5taW4oaGVpZ2h0LCBleHRydWRlZEhlaWdodCk7CiAgICB0aGlzLl9vZmZzZXRBdHRyaWJ1dGUgPSBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5IjsKICB9CiAgdmFyIGJvdHRvbUJvdW5kaW5nU3BoZXJlNCwgdG9wQm91bmRpbmdTcGhlcmU0LCBwb3NpdGlvblNjcmF0Y2gzLCByZWN0YW5nbGVTY3JhdGNoMiwgc2NyYXRjaFJlY3RhbmdsZTIsIHNjcmF0Y2hFbGxpcHNvaWQxMiwgc2NyYXRjaE9wdGlvbnMyMCwgbndTY3JhdGNoMiwgUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9SZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X0dlb21ldHJ5T2Zmc2V0QXR0cmlidXRlKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9Qb2x5Z29uUGlwZWxpbmUoKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlR2VvbWV0cnlMaWJyYXJ5KCk7CiAgICAgIGJvdHRvbUJvdW5kaW5nU3BoZXJlNCA9IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KCk7CiAgICAgIHRvcEJvdW5kaW5nU3BoZXJlNCA9IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KCk7CiAgICAgIHBvc2l0aW9uU2NyYXRjaDMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHJlY3RhbmdsZVNjcmF0Y2gyID0gbmV3IFJlY3RhbmdsZV9kZWZhdWx0KCk7CiAgICAgIFJlY3RhbmdsZU91dGxpbmVHZW9tZXRyeS5wYWNrZWRMZW5ndGggPSBSZWN0YW5nbGVfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyA1OwogICAgICBSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHZhbHVlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInZhbHVlIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBSZWN0YW5nbGVfZGVmYXVsdC5wYWNrKHZhbHVlLl9yZWN0YW5nbGUsIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IFJlY3RhbmdsZV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrKHZhbHVlLl9lbGxpcHNvaWQsIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2dyYW51bGFyaXR5OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fc3VyZmFjZUhlaWdodDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3JvdGF0aW9uOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh2YWx1ZS5fb2Zmc2V0QXR0cmlidXRlLCAtMSk7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBzY3JhdGNoUmVjdGFuZ2xlMiA9IG5ldyBSZWN0YW5nbGVfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoRWxsaXBzb2lkMTIgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShFbGxpcHNvaWRfZGVmYXVsdC5VTklUX1NQSEVSRSk7CiAgICAgIHNjcmF0Y2hPcHRpb25zMjAgPSB7CiAgICAgICAgcmVjdGFuZ2xlOiBzY3JhdGNoUmVjdGFuZ2xlMiwKICAgICAgICBlbGxpcHNvaWQ6IHNjcmF0Y2hFbGxpcHNvaWQxMiwKICAgICAgICBncmFudWxhcml0eTogdm9pZCAwLAogICAgICAgIGhlaWdodDogdm9pZCAwLAogICAgICAgIHJvdGF0aW9uOiB2b2lkIDAsCiAgICAgICAgZXh0cnVkZWRIZWlnaHQ6IHZvaWQgMCwKICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IHZvaWQgMAogICAgICB9OwogICAgICBSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCByZWN0YW5nbGUgPSBSZWN0YW5nbGVfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hSZWN0YW5nbGUyKTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IFJlY3RhbmdsZV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hFbGxpcHNvaWQxMik7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGhlaWdodCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgcm90YXRpb24gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBvZmZzZXRBdHRyaWJ1dGUgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczIwLmdyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczIwLmhlaWdodCA9IGhlaWdodDsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMjAucm90YXRpb24gPSByb3RhdGlvbjsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMjAuZXh0cnVkZWRIZWlnaHQgPSBleHRydWRlZEhlaWdodDsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMjAub2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zMjApOwogICAgICAgIH0KICAgICAgICByZXN1bHQuX3JlY3RhbmdsZSA9IFJlY3RhbmdsZV9kZWZhdWx0LmNsb25lKHJlY3RhbmdsZSwgcmVzdWx0Ll9yZWN0YW5nbGUpOwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLCByZXN1bHQuX2VsbGlwc29pZCk7CiAgICAgICAgcmVzdWx0Ll9zdXJmYWNlSGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgIHJlc3VsdC5fcm90YXRpb24gPSByb3RhdGlvbjsKICAgICAgICByZXN1bHQuX2V4dHJ1ZGVkSGVpZ2h0ID0gZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgcmVzdWx0Ll9vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIG53U2NyYXRjaDIgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24ocmVjdGFuZ2xlR2VvbWV0cnkpIHsKICAgICAgICBjb25zdCByZWN0YW5nbGUgPSByZWN0YW5nbGVHZW9tZXRyeS5fcmVjdGFuZ2xlOwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IHJlY3RhbmdsZUdlb21ldHJ5Ll9lbGxpcHNvaWQ7CiAgICAgICAgY29uc3QgY29tcHV0ZWRPcHRpb25zID0gUmVjdGFuZ2xlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZU9wdGlvbnMoCiAgICAgICAgICByZWN0YW5nbGUsCiAgICAgICAgICByZWN0YW5nbGVHZW9tZXRyeS5fZ3JhbnVsYXJpdHksCiAgICAgICAgICByZWN0YW5nbGVHZW9tZXRyeS5fcm90YXRpb24sCiAgICAgICAgICAwLAogICAgICAgICAgcmVjdGFuZ2xlU2NyYXRjaDIsCiAgICAgICAgICBud1NjcmF0Y2gyCiAgICAgICAgKTsKICAgICAgICBsZXQgZ2VvbWV0cnk7CiAgICAgICAgbGV0IGJvdW5kaW5nU3BoZXJlOwogICAgICAgIGlmIChNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHJlY3RhbmdsZS5ub3J0aCwKICAgICAgICAgIHJlY3RhbmdsZS5zb3V0aCwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTAKICAgICAgICApIHx8IE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgcmVjdGFuZ2xlLmVhc3QsCiAgICAgICAgICByZWN0YW5nbGUud2VzdCwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTAKICAgICAgICApKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBjb25zdCBzdXJmYWNlSGVpZ2h0ID0gcmVjdGFuZ2xlR2VvbWV0cnkuX3N1cmZhY2VIZWlnaHQ7CiAgICAgICAgY29uc3QgZXh0cnVkZWRIZWlnaHQgPSByZWN0YW5nbGVHZW9tZXRyeS5fZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgY29uc3QgZXh0cnVkZSA9ICFNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHN1cmZhY2VIZWlnaHQsCiAgICAgICAgICBleHRydWRlZEhlaWdodCwKICAgICAgICAgIDAsCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjIKICAgICAgICApOwogICAgICAgIGxldCBvZmZzZXRWYWx1ZTsKICAgICAgICBpZiAoZXh0cnVkZSkgewogICAgICAgICAgZ2VvbWV0cnkgPSBjb25zdHJ1Y3RFeHRydWRlZFJlY3RhbmdsZTIocmVjdGFuZ2xlR2VvbWV0cnksIGNvbXB1dGVkT3B0aW9ucyk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHJlY3RhbmdsZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUpKSB7CiAgICAgICAgICAgIGNvbnN0IHNpemUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGggLyAzOwogICAgICAgICAgICBsZXQgb2Zmc2V0QXR0cmlidXRlID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7CiAgICAgICAgICAgIGlmIChyZWN0YW5nbGVHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0LlRPUCkgewogICAgICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZS5maWxsKDEsIDAsIHNpemUgLyAyKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBvZmZzZXRWYWx1ZSA9IHJlY3RhbmdsZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuTk9ORSA/IDAgOiAxOwogICAgICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZS5maWxsKG9mZnNldFZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICAgICAgICB2YWx1ZXM6IG9mZnNldEF0dHJpYnV0ZQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IHRvcEJTID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tUmVjdGFuZ2xlM0QoCiAgICAgICAgICAgIHJlY3RhbmdsZSwKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICBzdXJmYWNlSGVpZ2h0LAogICAgICAgICAgICB0b3BCb3VuZGluZ1NwaGVyZTQKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBib3R0b21CUyA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVJlY3RhbmdsZTNEKAogICAgICAgICAgICByZWN0YW5nbGUsCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgZXh0cnVkZWRIZWlnaHQsCiAgICAgICAgICAgIGJvdHRvbUJvdW5kaW5nU3BoZXJlNAogICAgICAgICAgKTsKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC51bmlvbih0b3BCUywgYm90dG9tQlMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBnZW9tZXRyeSA9IGNvbnN0cnVjdFJlY3RhbmdsZTIocmVjdGFuZ2xlR2VvbWV0cnksIGNvbXB1dGVkT3B0aW9ucyk7CiAgICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodCgKICAgICAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMsCiAgICAgICAgICAgIHN1cmZhY2VIZWlnaHQsCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgZmFsc2UKICAgICAgICAgICk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHJlY3RhbmdsZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUpKSB7CiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLmxlbmd0aDsKICAgICAgICAgICAgb2Zmc2V0VmFsdWUgPSByZWN0YW5nbGVHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0Lk5PTkUgPyAwIDogMTsKICAgICAgICAgICAgY29uc3QgYXBwbHlPZmZzZXQgPSBuZXcgVWludDhBcnJheShsZW5ndGggLyAzKS5maWxsKG9mZnNldFZhbHVlKTsKICAgICAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5hcHBseU9mZnNldCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDEsCiAgICAgICAgICAgICAgdmFsdWVzOiBhcHBseU9mZnNldAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGJvdW5kaW5nU3BoZXJlID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tUmVjdGFuZ2xlM0QoCiAgICAgICAgICAgIHJlY3RhbmdsZSwKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICBzdXJmYWNlSGVpZ2h0CiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlczogZ2VvbWV0cnkuYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXM6IGdlb21ldHJ5LmluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuTElORVMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZSwKICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZTogcmVjdGFuZ2xlR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IFJlY3RhbmdsZU91dGxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVJlY3RhbmdsZU91dGxpbmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZVJlY3RhbmdsZU91dGxpbmVHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZVJlY3RhbmdsZU91dGxpbmVHZW9tZXRyeShyZWN0YW5nbGVHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgcmVjdGFuZ2xlR2VvbWV0cnkgPSBSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soCiAgICAgICAgcmVjdGFuZ2xlR2VvbWV0cnksCiAgICAgICAgb2Zmc2V0CiAgICAgICk7CiAgICB9CiAgICByZWN0YW5nbGVHZW9tZXRyeS5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUocmVjdGFuZ2xlR2VvbWV0cnkuX2VsbGlwc29pZCk7CiAgICByZWN0YW5nbGVHZW9tZXRyeS5fcmVjdGFuZ2xlID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2xvbmUocmVjdGFuZ2xlR2VvbWV0cnkuX3JlY3RhbmdsZSk7CiAgICByZXR1cm4gUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkocmVjdGFuZ2xlR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgaW5pdF9SZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnkoKTsKICAgICAgY3JlYXRlUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9TaW1wbGVQb2x5bGluZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gaW50ZXJwb2xhdGVDb2xvcnMyKHAwLCBwMSwgY29sb3IwLCBjb2xvcjEsIG1pbkRpc3RhbmNlLCBhcnJheSwgb2Zmc2V0KSB7CiAgICBjb25zdCBudW1Qb2ludHMgPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQubnVtYmVyT2ZQb2ludHMocDAsIHAxLCBtaW5EaXN0YW5jZSk7CiAgICBsZXQgaTsKICAgIGNvbnN0IHIwID0gY29sb3IwLnJlZDsKICAgIGNvbnN0IGcwID0gY29sb3IwLmdyZWVuOwogICAgY29uc3QgYjAgPSBjb2xvcjAuYmx1ZTsKICAgIGNvbnN0IGEwID0gY29sb3IwLmFscGhhOwogICAgY29uc3QgcjEgPSBjb2xvcjEucmVkOwogICAgY29uc3QgZzEgPSBjb2xvcjEuZ3JlZW47CiAgICBjb25zdCBiMSA9IGNvbG9yMS5ibHVlOwogICAgY29uc3QgYTEgPSBjb2xvcjEuYWxwaGE7CiAgICBpZiAoQ29sb3JfZGVmYXVsdC5lcXVhbHMoY29sb3IwLCBjb2xvcjEpKSB7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1Qb2ludHM7IGkrKykgewogICAgICAgIGFycmF5W29mZnNldCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUocjApOwogICAgICAgIGFycmF5W29mZnNldCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUoZzApOwogICAgICAgIGFycmF5W29mZnNldCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUoYjApOwogICAgICAgIGFycmF5W29mZnNldCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUoYTApOwogICAgICB9CiAgICAgIHJldHVybiBvZmZzZXQ7CiAgICB9CiAgICBjb25zdCByZWRQZXJWZXJ0ZXggPSAocjEgLSByMCkgLyBudW1Qb2ludHM7CiAgICBjb25zdCBncmVlblBlclZlcnRleCA9IChnMSAtIGcwKSAvIG51bVBvaW50czsKICAgIGNvbnN0IGJsdWVQZXJWZXJ0ZXggPSAoYjEgLSBiMCkgLyBudW1Qb2ludHM7CiAgICBjb25zdCBhbHBoYVBlclZlcnRleCA9IChhMSAtIGEwKSAvIG51bVBvaW50czsKICAgIGxldCBpbmRleCA9IG9mZnNldDsKICAgIGZvciAoaSA9IDA7IGkgPCBudW1Qb2ludHM7IGkrKykgewogICAgICBhcnJheVtpbmRleCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUocjAgKyBpICogcmVkUGVyVmVydGV4KTsKICAgICAgYXJyYXlbaW5kZXgrK10gPSBDb2xvcl9kZWZhdWx0LmZsb2F0VG9CeXRlKGcwICsgaSAqIGdyZWVuUGVyVmVydGV4KTsKICAgICAgYXJyYXlbaW5kZXgrK10gPSBDb2xvcl9kZWZhdWx0LmZsb2F0VG9CeXRlKGIwICsgaSAqIGJsdWVQZXJWZXJ0ZXgpOwogICAgICBhcnJheVtpbmRleCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUoYTAgKyBpICogYWxwaGFQZXJWZXJ0ZXgpOwogICAgfQogICAgcmV0dXJuIGluZGV4OwogIH0KICBmdW5jdGlvbiBTaW1wbGVQb2x5bGluZUdlb21ldHJ5KG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgY29uc3QgcG9zaXRpb25zID0gb3B0aW9ucy5wb3NpdGlvbnM7CiAgICBjb25zdCBjb2xvcnMgPSBvcHRpb25zLmNvbG9yczsKICAgIGNvbnN0IGNvbG9yc1BlclZlcnRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuY29sb3JzUGVyVmVydGV4LCBmYWxzZSk7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwb3NpdGlvbnMpIHx8IHBvc2l0aW9ucy5sZW5ndGggPCAyKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJBdCBsZWFzdCB0d28gcG9zaXRpb25zIGFyZSByZXF1aXJlZC4iKTsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSAmJiAoY29sb3JzUGVyVmVydGV4ICYmIGNvbG9ycy5sZW5ndGggPCBwb3NpdGlvbnMubGVuZ3RoIHx8ICFjb2xvcnNQZXJWZXJ0ZXggJiYgY29sb3JzLmxlbmd0aCA8IHBvc2l0aW9ucy5sZW5ndGggLSAxKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiY29sb3JzIGhhcyBhbiBpbnZhbGlkIGxlbmd0aC4iKTsKICAgIH0KICAgIHRoaXMuX3Bvc2l0aW9ucyA9IHBvc2l0aW9uczsKICAgIHRoaXMuX2NvbG9ycyA9IGNvbG9yczsKICAgIHRoaXMuX2NvbG9yc1BlclZlcnRleCA9IGNvbG9yc1BlclZlcnRleDsKICAgIHRoaXMuX2FyY1R5cGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmFyY1R5cGUsIEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQyk7CiAgICB0aGlzLl9ncmFudWxhcml0eSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFCiAgICApOwogICAgdGhpcy5fZWxsaXBzb2lkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5lbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LldHUzg0KTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlU2ltcGxlUG9seWxpbmVHZW9tZXRyeSI7CiAgICBsZXQgbnVtQ29tcG9uZW50cyA9IDEgKyBwb3NpdGlvbnMubGVuZ3RoICogQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgIG51bUNvbXBvbmVudHMgKz0gZGVmaW5lZF9kZWZhdWx0KGNvbG9ycykgPyAxICsgY29sb3JzLmxlbmd0aCAqIENvbG9yX2RlZmF1bHQucGFja2VkTGVuZ3RoIDogMTsKICAgIHRoaXMucGFja2VkTGVuZ3RoID0gbnVtQ29tcG9uZW50cyArIEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIDM7CiAgfQogIHZhciBzY3JhdGNoQXJyYXkxLCBzY3JhdGNoQXJyYXkyLCBnZW5lcmF0ZUFyY09wdGlvbnNTY3JhdGNoLCBTaW1wbGVQb2x5bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfU2ltcGxlUG9seWxpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvU2ltcGxlUG9seWxpbmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQXJjVHlwZSgpOwogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NvbG9yKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9Qb2x5bGluZVBpcGVsaW5lKCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBTaW1wbGVQb2x5bGluZUdlb21ldHJ5LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh2YWx1ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ2YWx1ZSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhcnJheSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgbGV0IGk7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gdmFsdWUuX3Bvc2l0aW9uczsKICAgICAgICBsZXQgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gbGVuZ3RoOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhwb3NpdGlvbnNbaV0sIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgY29uc3QgY29sb3JzID0gdmFsdWUuX2NvbG9yczsKICAgICAgICBsZW5ndGggPSBkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSA/IGNvbG9ycy5sZW5ndGggOiAwOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBsZW5ndGg7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENvbG9yX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBDb2xvcl9kZWZhdWx0LnBhY2soY29sb3JzW2ldLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgfQogICAgICAgIEVsbGlwc29pZF9kZWZhdWx0LnBhY2sodmFsdWUuX2VsbGlwc29pZCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fY29sb3JzUGVyVmVydGV4ID8gMSA6IDA7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9hcmNUeXBlOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gdmFsdWUuX2dyYW51bGFyaXR5OwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgU2ltcGxlUG9seWxpbmVHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYXJyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXJyYXkgaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGxldCBpOwogICAgICAgIGxldCBsZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBwb3NpdGlvbnNbaV0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgbGVuZ3RoID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBjb2xvcnMgPSBsZW5ndGggPiAwID8gbmV3IEFycmF5KGxlbmd0aCkgOiB2b2lkIDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENvbG9yX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBjb2xvcnNbaV0gPSBDb2xvcl9kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgY29sb3JzUGVyVmVydGV4ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9PT0gMTsKICAgICAgICBjb25zdCBhcmNUeXBlID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgU2ltcGxlUG9seWxpbmVHZW9tZXRyeSh7CiAgICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgICAgY29sb3JzLAogICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgIGNvbG9yc1BlclZlcnRleCwKICAgICAgICAgICAgYXJjVHlwZSwKICAgICAgICAgICAgZ3JhbnVsYXJpdHkKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXN1bHQuX3Bvc2l0aW9ucyA9IHBvc2l0aW9uczsKICAgICAgICByZXN1bHQuX2NvbG9ycyA9IGNvbG9yczsKICAgICAgICByZXN1bHQuX2VsbGlwc29pZCA9IGVsbGlwc29pZDsKICAgICAgICByZXN1bHQuX2NvbG9yc1BlclZlcnRleCA9IGNvbG9yc1BlclZlcnRleDsKICAgICAgICByZXN1bHQuX2FyY1R5cGUgPSBhcmNUeXBlOwogICAgICAgIHJlc3VsdC5fZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY3JhdGNoQXJyYXkxID0gbmV3IEFycmF5KDIpOwogICAgICBzY3JhdGNoQXJyYXkyID0gbmV3IEFycmF5KDIpOwogICAgICBnZW5lcmF0ZUFyY09wdGlvbnNTY3JhdGNoID0gewogICAgICAgIHBvc2l0aW9uczogc2NyYXRjaEFycmF5MSwKICAgICAgICBoZWlnaHQ6IHNjcmF0Y2hBcnJheTIsCiAgICAgICAgZWxsaXBzb2lkOiB2b2lkIDAsCiAgICAgICAgbWluRGlzdGFuY2U6IHZvaWQgMCwKICAgICAgICBncmFudWxhcml0eTogdm9pZCAwCiAgICAgIH07CiAgICAgIFNpbXBsZVBvbHlsaW5lR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihzaW1wbGVQb2x5bGluZUdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gc2ltcGxlUG9seWxpbmVHZW9tZXRyeS5fcG9zaXRpb25zOwogICAgICAgIGNvbnN0IGNvbG9ycyA9IHNpbXBsZVBvbHlsaW5lR2VvbWV0cnkuX2NvbG9yczsKICAgICAgICBjb25zdCBjb2xvcnNQZXJWZXJ0ZXggPSBzaW1wbGVQb2x5bGluZUdlb21ldHJ5Ll9jb2xvcnNQZXJWZXJ0ZXg7CiAgICAgICAgY29uc3QgYXJjVHlwZSA9IHNpbXBsZVBvbHlsaW5lR2VvbWV0cnkuX2FyY1R5cGU7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBzaW1wbGVQb2x5bGluZUdlb21ldHJ5Ll9ncmFudWxhcml0eTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBzaW1wbGVQb2x5bGluZUdlb21ldHJ5Ll9lbGxpcHNvaWQ7CiAgICAgICAgY29uc3QgbWluRGlzdGFuY2UgPSBNYXRoX2RlZmF1bHQuY2hvcmRMZW5ndGgoCiAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgIGVsbGlwc29pZC5tYXhpbXVtUmFkaXVzCiAgICAgICAgKTsKICAgICAgICBjb25zdCBwZXJTZWdtZW50Q29sb3JzID0gZGVmaW5lZF9kZWZhdWx0KGNvbG9ycykgJiYgIWNvbG9yc1BlclZlcnRleDsKICAgICAgICBsZXQgaTsKICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGxldCBwb3NpdGlvblZhbHVlczsKICAgICAgICBsZXQgbnVtYmVyT2ZQb3NpdGlvbnM7CiAgICAgICAgbGV0IGNvbG9yVmFsdWVzOwogICAgICAgIGxldCBjb2xvcjsKICAgICAgICBsZXQgb2Zmc2V0ID0gMDsKICAgICAgICBpZiAoYXJjVHlwZSA9PT0gQXJjVHlwZV9kZWZhdWx0LkdFT0RFU0lDIHx8IGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5SSFVNQikgewogICAgICAgICAgbGV0IHN1YmRpdmlzaW9uU2l6ZTsKICAgICAgICAgIGxldCBudW1iZXJPZlBvaW50c0Z1bmN0aW9uOwogICAgICAgICAgbGV0IGdlbmVyYXRlQXJjRnVuY3Rpb247CiAgICAgICAgICBpZiAoYXJjVHlwZSA9PT0gQXJjVHlwZV9kZWZhdWx0LkdFT0RFU0lDKSB7CiAgICAgICAgICAgIHN1YmRpdmlzaW9uU2l6ZSA9IE1hdGhfZGVmYXVsdC5jaG9yZExlbmd0aCgKICAgICAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgICAgICBlbGxpcHNvaWQubWF4aW11bVJhZGl1cwogICAgICAgICAgICApOwogICAgICAgICAgICBudW1iZXJPZlBvaW50c0Z1bmN0aW9uID0gUG9seWxpbmVQaXBlbGluZV9kZWZhdWx0Lm51bWJlck9mUG9pbnRzOwogICAgICAgICAgICBnZW5lcmF0ZUFyY0Z1bmN0aW9uID0gUG9seWxpbmVQaXBlbGluZV9kZWZhdWx0LmdlbmVyYXRlQXJjOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3ViZGl2aXNpb25TaXplID0gZ3JhbnVsYXJpdHk7CiAgICAgICAgICAgIG51bWJlck9mUG9pbnRzRnVuY3Rpb24gPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQubnVtYmVyT2ZQb2ludHNSaHVtYkxpbmU7CiAgICAgICAgICAgIGdlbmVyYXRlQXJjRnVuY3Rpb24gPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQuZ2VuZXJhdGVSaHVtYkFyYzsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGhlaWdodHMgPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQuZXh0cmFjdEhlaWdodHMocG9zaXRpb25zLCBlbGxpcHNvaWQpOwogICAgICAgICAgY29uc3QgZ2VuZXJhdGVBcmNPcHRpb25zID0gZ2VuZXJhdGVBcmNPcHRpb25zU2NyYXRjaDsKICAgICAgICAgIGlmIChhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuR0VPREVTSUMpIHsKICAgICAgICAgICAgZ2VuZXJhdGVBcmNPcHRpb25zLm1pbkRpc3RhbmNlID0gbWluRGlzdGFuY2U7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBnZW5lcmF0ZUFyY09wdGlvbnMuZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICAgIH0KICAgICAgICAgIGdlbmVyYXRlQXJjT3B0aW9ucy5lbGxpcHNvaWQgPSBlbGxpcHNvaWQ7CiAgICAgICAgICBpZiAocGVyU2VnbWVudENvbG9ycykgewogICAgICAgICAgICBsZXQgcG9zaXRpb25Db3VudCA9IDA7CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGggLSAxOyBpKyspIHsKICAgICAgICAgICAgICBwb3NpdGlvbkNvdW50ICs9IG51bWJlck9mUG9pbnRzRnVuY3Rpb24oCiAgICAgICAgICAgICAgICBwb3NpdGlvbnNbaV0sCiAgICAgICAgICAgICAgICBwb3NpdGlvbnNbaSArIDFdLAogICAgICAgICAgICAgICAgc3ViZGl2aXNpb25TaXplCiAgICAgICAgICAgICAgKSArIDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcG9zaXRpb25WYWx1ZXMgPSBuZXcgRmxvYXQ2NEFycmF5KHBvc2l0aW9uQ291bnQgKiAzKTsKICAgICAgICAgICAgY29sb3JWYWx1ZXMgPSBuZXcgVWludDhBcnJheShwb3NpdGlvbkNvdW50ICogNCk7CiAgICAgICAgICAgIGdlbmVyYXRlQXJjT3B0aW9ucy5wb3NpdGlvbnMgPSBzY3JhdGNoQXJyYXkxOwogICAgICAgICAgICBnZW5lcmF0ZUFyY09wdGlvbnMuaGVpZ2h0ID0gc2NyYXRjaEFycmF5MjsKICAgICAgICAgICAgbGV0IGNpID0gMDsKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aCAtIDE7ICsraSkgewogICAgICAgICAgICAgIHNjcmF0Y2hBcnJheTFbMF0gPSBwb3NpdGlvbnNbaV07CiAgICAgICAgICAgICAgc2NyYXRjaEFycmF5MVsxXSA9IHBvc2l0aW9uc1tpICsgMV07CiAgICAgICAgICAgICAgc2NyYXRjaEFycmF5MlswXSA9IGhlaWdodHNbaV07CiAgICAgICAgICAgICAgc2NyYXRjaEFycmF5MlsxXSA9IGhlaWdodHNbaSArIDFdOwogICAgICAgICAgICAgIGNvbnN0IHBvcyA9IGdlbmVyYXRlQXJjRnVuY3Rpb24oZ2VuZXJhdGVBcmNPcHRpb25zKTsKICAgICAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGNvbG9ycykpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHNlZ0xlbiA9IHBvcy5sZW5ndGggLyAzOwogICAgICAgICAgICAgICAgY29sb3IgPSBjb2xvcnNbaV07CiAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHNlZ0xlbjsgKytrKSB7CiAgICAgICAgICAgICAgICAgIGNvbG9yVmFsdWVzW2NpKytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShjb2xvci5yZWQpOwogICAgICAgICAgICAgICAgICBjb2xvclZhbHVlc1tjaSsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUoY29sb3IuZ3JlZW4pOwogICAgICAgICAgICAgICAgICBjb2xvclZhbHVlc1tjaSsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUoY29sb3IuYmx1ZSk7CiAgICAgICAgICAgICAgICAgIGNvbG9yVmFsdWVzW2NpKytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShjb2xvci5hbHBoYSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHBvc2l0aW9uVmFsdWVzLnNldChwb3MsIG9mZnNldCk7CiAgICAgICAgICAgICAgb2Zmc2V0ICs9IHBvcy5sZW5ndGg7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGdlbmVyYXRlQXJjT3B0aW9ucy5wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICAgICAgICAgIGdlbmVyYXRlQXJjT3B0aW9ucy5oZWlnaHQgPSBoZWlnaHRzOwogICAgICAgICAgICBwb3NpdGlvblZhbHVlcyA9IG5ldyBGbG9hdDY0QXJyYXkoCiAgICAgICAgICAgICAgZ2VuZXJhdGVBcmNGdW5jdGlvbihnZW5lcmF0ZUFyY09wdGlvbnMpCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSkgewogICAgICAgICAgICAgIGNvbG9yVmFsdWVzID0gbmV3IFVpbnQ4QXJyYXkocG9zaXRpb25WYWx1ZXMubGVuZ3RoIC8gMyAqIDQpOwogICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGggLSAxOyArK2kpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHAwID0gcG9zaXRpb25zW2ldOwogICAgICAgICAgICAgICAgY29uc3QgcDEgPSBwb3NpdGlvbnNbaSArIDFdOwogICAgICAgICAgICAgICAgY29uc3QgYzAgPSBjb2xvcnNbaV07CiAgICAgICAgICAgICAgICBjb25zdCBjMSA9IGNvbG9yc1tpICsgMV07CiAgICAgICAgICAgICAgICBvZmZzZXQgPSBpbnRlcnBvbGF0ZUNvbG9yczIoCiAgICAgICAgICAgICAgICAgIHAwLAogICAgICAgICAgICAgICAgICBwMSwKICAgICAgICAgICAgICAgICAgYzAsCiAgICAgICAgICAgICAgICAgIGMxLAogICAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSwKICAgICAgICAgICAgICAgICAgY29sb3JWYWx1ZXMsCiAgICAgICAgICAgICAgICAgIG9mZnNldAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29uc3QgbGFzdENvbG9yID0gY29sb3JzW2xlbmd0aCAtIDFdOwogICAgICAgICAgICAgIGNvbG9yVmFsdWVzW29mZnNldCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUobGFzdENvbG9yLnJlZCk7CiAgICAgICAgICAgICAgY29sb3JWYWx1ZXNbb2Zmc2V0KytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShsYXN0Q29sb3IuZ3JlZW4pOwogICAgICAgICAgICAgIGNvbG9yVmFsdWVzW29mZnNldCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUobGFzdENvbG9yLmJsdWUpOwogICAgICAgICAgICAgIGNvbG9yVmFsdWVzW29mZnNldCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUobGFzdENvbG9yLmFscGhhKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBudW1iZXJPZlBvc2l0aW9ucyA9IHBlclNlZ21lbnRDb2xvcnMgPyBsZW5ndGggKiAyIC0gMiA6IGxlbmd0aDsKICAgICAgICAgIHBvc2l0aW9uVmFsdWVzID0gbmV3IEZsb2F0NjRBcnJheShudW1iZXJPZlBvc2l0aW9ucyAqIDMpOwogICAgICAgICAgY29sb3JWYWx1ZXMgPSBkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSA/IG5ldyBVaW50OEFycmF5KG51bWJlck9mUG9zaXRpb25zICogNCkgOiB2b2lkIDA7CiAgICAgICAgICBsZXQgcG9zaXRpb25JbmRleCA9IDA7CiAgICAgICAgICBsZXQgY29sb3JJbmRleCA9IDA7CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgY29uc3QgcCA9IHBvc2l0aW9uc1tpXTsKICAgICAgICAgICAgaWYgKHBlclNlZ21lbnRDb2xvcnMgJiYgaSA+IDApIHsKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhwLCBwb3NpdGlvblZhbHVlcywgcG9zaXRpb25JbmRleCk7CiAgICAgICAgICAgICAgcG9zaXRpb25JbmRleCArPSAzOwogICAgICAgICAgICAgIGNvbG9yID0gY29sb3JzW2kgLSAxXTsKICAgICAgICAgICAgICBjb2xvclZhbHVlc1tjb2xvckluZGV4KytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShjb2xvci5yZWQpOwogICAgICAgICAgICAgIGNvbG9yVmFsdWVzW2NvbG9ySW5kZXgrK10gPSBDb2xvcl9kZWZhdWx0LmZsb2F0VG9CeXRlKGNvbG9yLmdyZWVuKTsKICAgICAgICAgICAgICBjb2xvclZhbHVlc1tjb2xvckluZGV4KytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShjb2xvci5ibHVlKTsKICAgICAgICAgICAgICBjb2xvclZhbHVlc1tjb2xvckluZGV4KytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShjb2xvci5hbHBoYSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHBlclNlZ21lbnRDb2xvcnMgJiYgaSA9PT0gbGVuZ3RoIC0gMSkgewogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHAsIHBvc2l0aW9uVmFsdWVzLCBwb3NpdGlvbkluZGV4KTsKICAgICAgICAgICAgcG9zaXRpb25JbmRleCArPSAzOwogICAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGNvbG9ycykpIHsKICAgICAgICAgICAgICBjb2xvciA9IGNvbG9yc1tpXTsKICAgICAgICAgICAgICBjb2xvclZhbHVlc1tjb2xvckluZGV4KytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShjb2xvci5yZWQpOwogICAgICAgICAgICAgIGNvbG9yVmFsdWVzW2NvbG9ySW5kZXgrK10gPSBDb2xvcl9kZWZhdWx0LmZsb2F0VG9CeXRlKGNvbG9yLmdyZWVuKTsKICAgICAgICAgICAgICBjb2xvclZhbHVlc1tjb2xvckluZGV4KytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShjb2xvci5ibHVlKTsKICAgICAgICAgICAgICBjb2xvclZhbHVlc1tjb2xvckluZGV4KytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShjb2xvci5hbHBoYSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCgpOwogICAgICAgIGF0dHJpYnV0ZXMucG9zaXRpb24gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgdmFsdWVzOiBwb3NpdGlvblZhbHVlcwogICAgICAgIH0pOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSkgewogICAgICAgICAgYXR0cmlidXRlcy5jb2xvciA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogNCwKICAgICAgICAgICAgdmFsdWVzOiBjb2xvclZhbHVlcywKICAgICAgICAgICAgbm9ybWFsaXplOiB0cnVlCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgbnVtYmVyT2ZQb3NpdGlvbnMgPSBwb3NpdGlvblZhbHVlcy5sZW5ndGggLyAzOwogICAgICAgIGNvbnN0IG51bWJlck9mSW5kaWNlcyA9IChudW1iZXJPZlBvc2l0aW9ucyAtIDEpICogMjsKICAgICAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgICAgICBudW1iZXJPZlBvc2l0aW9ucywKICAgICAgICAgIG51bWJlck9mSW5kaWNlcwogICAgICAgICk7CiAgICAgICAgbGV0IGluZGV4ID0gMDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtYmVyT2ZQb3NpdGlvbnMgLSAxOyArK2kpIHsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpOwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGkgKyAxOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuTElORVMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZTogQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tUG9pbnRzKHBvc2l0aW9ucykKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgU2ltcGxlUG9seWxpbmVHZW9tZXRyeV9kZWZhdWx0ID0gU2ltcGxlUG9seWxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVNpbXBsZVBvbHlsaW5lR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlU2ltcGxlUG9seWxpbmVHZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlU2ltcGxlUG9seWxpbmVHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVTaW1wbGVQb2x5bGluZUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVTaW1wbGVQb2x5bGluZUdlb21ldHJ5KHNpbXBsZVBvbHlsaW5lR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIHNpbXBsZVBvbHlsaW5lR2VvbWV0cnkgPSBTaW1wbGVQb2x5bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKAogICAgICAgIHNpbXBsZVBvbHlsaW5lR2VvbWV0cnksCiAgICAgICAgb2Zmc2V0CiAgICAgICk7CiAgICB9CiAgICBzaW1wbGVQb2x5bGluZUdlb21ldHJ5Ll9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZSgKICAgICAgc2ltcGxlUG9seWxpbmVHZW9tZXRyeS5fZWxsaXBzb2lkCiAgICApOwogICAgcmV0dXJuIFNpbXBsZVBvbHlsaW5lR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShzaW1wbGVQb2x5bGluZUdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZVNpbXBsZVBvbHlsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVTaW1wbGVQb2x5bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVTaW1wbGVQb2x5bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfU2ltcGxlUG9seWxpbmVHZW9tZXRyeSgpOwogICAgICBjcmVhdGVTaW1wbGVQb2x5bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVTaW1wbGVQb2x5bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvU3BoZXJlR2VvbWV0cnkuanMKICBmdW5jdGlvbiBTcGhlcmVHZW9tZXRyeShvcHRpb25zKSB7CiAgICBjb25zdCByYWRpdXMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnJhZGl1cywgMSk7CiAgICBjb25zdCByYWRpaSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQocmFkaXVzLCByYWRpdXMsIHJhZGl1cyk7CiAgICBjb25zdCBlbGxpcHNvaWRPcHRpb25zID0gewogICAgICByYWRpaSwKICAgICAgc3RhY2tQYXJ0aXRpb25zOiBvcHRpb25zLnN0YWNrUGFydGl0aW9ucywKICAgICAgc2xpY2VQYXJ0aXRpb25zOiBvcHRpb25zLnNsaWNlUGFydGl0aW9ucywKICAgICAgdmVydGV4Rm9ybWF0OiBvcHRpb25zLnZlcnRleEZvcm1hdAogICAgfTsKICAgIHRoaXMuX2VsbGlwc29pZEdlb21ldHJ5ID0gbmV3IEVsbGlwc29pZEdlb21ldHJ5X2RlZmF1bHQoZWxsaXBzb2lkT3B0aW9ucyk7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZVNwaGVyZUdlb21ldHJ5IjsKICB9CiAgdmFyIHNjcmF0Y2hFbGxpcHNvaWRHZW9tZXRyeSwgc2NyYXRjaE9wdGlvbnMyMSwgU3BoZXJlR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9TcGhlcmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvU3BoZXJlR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWRHZW9tZXRyeSgpOwogICAgICBpbml0X1ZlcnRleEZvcm1hdCgpOwogICAgICBTcGhlcmVHZW9tZXRyeS5wYWNrZWRMZW5ndGggPSBFbGxpcHNvaWRHZW9tZXRyeV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgU3BoZXJlR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgcmV0dXJuIEVsbGlwc29pZEdlb21ldHJ5X2RlZmF1bHQucGFjayh2YWx1ZS5fZWxsaXBzb2lkR2VvbWV0cnksIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgfTsKICAgICAgc2NyYXRjaEVsbGlwc29pZEdlb21ldHJ5ID0gbmV3IEVsbGlwc29pZEdlb21ldHJ5X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE9wdGlvbnMyMSA9IHsKICAgICAgICByYWRpdXM6IHZvaWQgMCwKICAgICAgICByYWRpaTogbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLAogICAgICAgIHZlcnRleEZvcm1hdDogbmV3IFZlcnRleEZvcm1hdF9kZWZhdWx0KCksCiAgICAgICAgc3RhY2tQYXJ0aXRpb25zOiB2b2lkIDAsCiAgICAgICAgc2xpY2VQYXJ0aXRpb25zOiB2b2lkIDAKICAgICAgfTsKICAgICAgU3BoZXJlR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIGNvbnN0IGVsbGlwc29pZEdlb21ldHJ5ID0gRWxsaXBzb2lkR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBzY3JhdGNoRWxsaXBzb2lkR2VvbWV0cnkKICAgICAgICApOwogICAgICAgIHNjcmF0Y2hPcHRpb25zMjEudmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQuY2xvbmUoCiAgICAgICAgICBlbGxpcHNvaWRHZW9tZXRyeS5fdmVydGV4Rm9ybWF0LAogICAgICAgICAgc2NyYXRjaE9wdGlvbnMyMS52ZXJ0ZXhGb3JtYXQKICAgICAgICApOwogICAgICAgIHNjcmF0Y2hPcHRpb25zMjEuc3RhY2tQYXJ0aXRpb25zID0gZWxsaXBzb2lkR2VvbWV0cnkuX3N0YWNrUGFydGl0aW9uczsKICAgICAgICBzY3JhdGNoT3B0aW9uczIxLnNsaWNlUGFydGl0aW9ucyA9IGVsbGlwc29pZEdlb21ldHJ5Ll9zbGljZVBhcnRpdGlvbnM7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgc2NyYXRjaE9wdGlvbnMyMS5yYWRpdXMgPSBlbGxpcHNvaWRHZW9tZXRyeS5fcmFkaWkueDsKICAgICAgICAgIHJldHVybiBuZXcgU3BoZXJlR2VvbWV0cnkoc2NyYXRjaE9wdGlvbnMyMSk7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWRHZW9tZXRyeS5fcmFkaWksIHNjcmF0Y2hPcHRpb25zMjEucmFkaWkpOwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkR2VvbWV0cnkgPSBuZXcgRWxsaXBzb2lkR2VvbWV0cnlfZGVmYXVsdChzY3JhdGNoT3B0aW9uczIxKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBTcGhlcmVHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKHNwaGVyZUdlb21ldHJ5KSB7CiAgICAgICAgcmV0dXJuIEVsbGlwc29pZEdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkoc3BoZXJlR2VvbWV0cnkuX2VsbGlwc29pZEdlb21ldHJ5KTsKICAgICAgfTsKICAgICAgU3BoZXJlR2VvbWV0cnlfZGVmYXVsdCA9IFNwaGVyZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlU3BoZXJlR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlU3BoZXJlR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZVNwaGVyZUdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVNwaGVyZUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVTcGhlcmVHZW9tZXRyeShzcGhlcmVHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgc3BoZXJlR2VvbWV0cnkgPSBTcGhlcmVHZW9tZXRyeV9kZWZhdWx0LnVucGFjayhzcGhlcmVHZW9tZXRyeSwgb2Zmc2V0KTsKICAgIH0KICAgIHJldHVybiBTcGhlcmVHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KHNwaGVyZUdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZVNwaGVyZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlU3BoZXJlR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVNwaGVyZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfU3BoZXJlR2VvbWV0cnkoKTsKICAgICAgY3JlYXRlU3BoZXJlR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZVNwaGVyZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvU3BoZXJlT3V0bGluZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gU3BoZXJlT3V0bGluZUdlb21ldHJ5KG9wdGlvbnMpIHsKICAgIGNvbnN0IHJhZGl1cyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMucmFkaXVzLCAxKTsKICAgIGNvbnN0IHJhZGlpID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdChyYWRpdXMsIHJhZGl1cywgcmFkaXVzKTsKICAgIGNvbnN0IGVsbGlwc29pZE9wdGlvbnMgPSB7CiAgICAgIHJhZGlpLAogICAgICBzdGFja1BhcnRpdGlvbnM6IG9wdGlvbnMuc3RhY2tQYXJ0aXRpb25zLAogICAgICBzbGljZVBhcnRpdGlvbnM6IG9wdGlvbnMuc2xpY2VQYXJ0aXRpb25zLAogICAgICBzdWJkaXZpc2lvbnM6IG9wdGlvbnMuc3ViZGl2aXNpb25zCiAgICB9OwogICAgdGhpcy5fZWxsaXBzb2lkR2VvbWV0cnkgPSBuZXcgRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQoZWxsaXBzb2lkT3B0aW9ucyk7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZVNwaGVyZU91dGxpbmVHZW9tZXRyeSI7CiAgfQogIHZhciBzY3JhdGNoRWxsaXBzb2lkR2VvbWV0cnkyLCBzY3JhdGNoT3B0aW9uczIyLCBTcGhlcmVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9TcGhlcmVPdXRsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1NwaGVyZU91dGxpbmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZE91dGxpbmVHZW9tZXRyeSgpOwogICAgICBTcGhlcmVPdXRsaW5lR2VvbWV0cnkucGFja2VkTGVuZ3RoID0gRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICBTcGhlcmVPdXRsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgcmV0dXJuIEVsbGlwc29pZE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0LnBhY2soCiAgICAgICAgICB2YWx1ZS5fZWxsaXBzb2lkR2VvbWV0cnksCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgKICAgICAgICApOwogICAgICB9OwogICAgICBzY3JhdGNoRWxsaXBzb2lkR2VvbWV0cnkyID0gbmV3IEVsbGlwc29pZE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hPcHRpb25zMjIgPSB7CiAgICAgICAgcmFkaXVzOiB2b2lkIDAsCiAgICAgICAgcmFkaWk6IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwKICAgICAgICBzdGFja1BhcnRpdGlvbnM6IHZvaWQgMCwKICAgICAgICBzbGljZVBhcnRpdGlvbnM6IHZvaWQgMCwKICAgICAgICBzdWJkaXZpc2lvbnM6IHZvaWQgMAogICAgICB9OwogICAgICBTcGhlcmVPdXRsaW5lR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIGNvbnN0IGVsbGlwc29pZEdlb21ldHJ5ID0gRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgc2NyYXRjaEVsbGlwc29pZEdlb21ldHJ5MgogICAgICAgICk7CiAgICAgICAgc2NyYXRjaE9wdGlvbnMyMi5zdGFja1BhcnRpdGlvbnMgPSBlbGxpcHNvaWRHZW9tZXRyeS5fc3RhY2tQYXJ0aXRpb25zOwogICAgICAgIHNjcmF0Y2hPcHRpb25zMjIuc2xpY2VQYXJ0aXRpb25zID0gZWxsaXBzb2lkR2VvbWV0cnkuX3NsaWNlUGFydGl0aW9uczsKICAgICAgICBzY3JhdGNoT3B0aW9uczIyLnN1YmRpdmlzaW9ucyA9IGVsbGlwc29pZEdlb21ldHJ5Ll9zdWJkaXZpc2lvbnM7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgc2NyYXRjaE9wdGlvbnMyMi5yYWRpdXMgPSBlbGxpcHNvaWRHZW9tZXRyeS5fcmFkaWkueDsKICAgICAgICAgIHJldHVybiBuZXcgU3BoZXJlT3V0bGluZUdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zMjIpOwogICAgICAgIH0KICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkR2VvbWV0cnkuX3JhZGlpLCBzY3JhdGNoT3B0aW9uczIyLnJhZGlpKTsKICAgICAgICByZXN1bHQuX2VsbGlwc29pZEdlb21ldHJ5ID0gbmV3IEVsbGlwc29pZE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0KHNjcmF0Y2hPcHRpb25zMjIpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFNwaGVyZU91dGxpbmVHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKHNwaGVyZUdlb21ldHJ5KSB7CiAgICAgICAgcmV0dXJuIEVsbGlwc29pZE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KAogICAgICAgICAgc3BoZXJlR2VvbWV0cnkuX2VsbGlwc29pZEdlb21ldHJ5CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgU3BoZXJlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBTcGhlcmVPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVTcGhlcmVPdXRsaW5lR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlU3BoZXJlT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVTcGhlcmVPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlU3BoZXJlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVTcGhlcmVPdXRsaW5lR2VvbWV0cnkoc3BoZXJlR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIHNwaGVyZUdlb21ldHJ5ID0gU3BoZXJlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKHNwaGVyZUdlb21ldHJ5LCBvZmZzZXQpOwogICAgfQogICAgcmV0dXJuIFNwaGVyZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KHNwaGVyZUdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZVNwaGVyZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVNwaGVyZU91dGxpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlU3BoZXJlT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfU3BoZXJlT3V0bGluZUdlb21ldHJ5KCk7CiAgICAgIGNyZWF0ZVNwaGVyZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0ID0gY3JlYXRlU3BoZXJlT3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlVmVjdG9yVGlsZUNsYW1wZWRQb2x5bGluZXMuanMKICB2YXIgY3JlYXRlVmVjdG9yVGlsZUNsYW1wZWRQb2x5bGluZXNfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZVZlY3RvclRpbGVDbGFtcGVkUG9seWxpbmVzX2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVZlY3RvclRpbGVDbGFtcGVkUG9seWxpbmVzX2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBkZWNvZGVQb3NpdGlvbnModUJ1ZmZlciwgdkJ1ZmZlciwgaGVpZ2h0QnVmZmVyLCByZWN0YW5nbGUsIG1pbmltdW1IZWlnaHQsIG1heGltdW1IZWlnaHQsIGVsbGlwc29pZCkgewogICAgY29uc3QgcG9zaXRpb25zTGVuZ3RoID0gdUJ1ZmZlci5sZW5ndGg7CiAgICBjb25zdCBkZWNvZGVkUG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShwb3NpdGlvbnNMZW5ndGggKiAzKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zTGVuZ3RoOyArK2kpIHsKICAgICAgY29uc3QgdTMgPSB1QnVmZmVyW2ldOwogICAgICBjb25zdCB2MyA9IHZCdWZmZXJbaV07CiAgICAgIGNvbnN0IGggPSBoZWlnaHRCdWZmZXJbaV07CiAgICAgIGNvbnN0IGxvbiA9IE1hdGhfZGVmYXVsdC5sZXJwKHJlY3RhbmdsZS53ZXN0LCByZWN0YW5nbGUuZWFzdCwgdTMgLyBNQVhfU0hPUlQpOwogICAgICBjb25zdCBsYXQgPSBNYXRoX2RlZmF1bHQubGVycCgKICAgICAgICByZWN0YW5nbGUuc291dGgsCiAgICAgICAgcmVjdGFuZ2xlLm5vcnRoLAogICAgICAgIHYzIC8gTUFYX1NIT1JUCiAgICAgICk7CiAgICAgIGNvbnN0IGFsdCA9IE1hdGhfZGVmYXVsdC5sZXJwKG1pbmltdW1IZWlnaHQsIG1heGltdW1IZWlnaHQsIGggLyBNQVhfU0hPUlQpOwogICAgICBjb25zdCBjYXJ0b2dyYXBoaWMyID0gQ2FydG9ncmFwaGljX2RlZmF1bHQuZnJvbVJhZGlhbnMoCiAgICAgICAgbG9uLAogICAgICAgIGxhdCwKICAgICAgICBhbHQsCiAgICAgICAgc2NyYXRjaEJWQ2FydG9ncmFwaGljCiAgICAgICk7CiAgICAgIGNvbnN0IGRlY29kZWRQb3NpdGlvbiA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbigKICAgICAgICBjYXJ0b2dyYXBoaWMyLAogICAgICAgIHNjcmF0Y2hFbmNvZGVkUG9zaXRpb24KICAgICAgKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soZGVjb2RlZFBvc2l0aW9uLCBkZWNvZGVkUG9zaXRpb25zLCBpICogMyk7CiAgICB9CiAgICByZXR1cm4gZGVjb2RlZFBvc2l0aW9uczsKICB9CiAgZnVuY3Rpb24gZ2V0UG9zaXRpb25PZmZzZXRzKGNvdW50cykgewogICAgY29uc3QgY291bnRzTGVuZ3RoID0gY291bnRzLmxlbmd0aDsKICAgIGNvbnN0IHBvc2l0aW9uT2Zmc2V0cyA9IG5ldyBVaW50MzJBcnJheShjb3VudHNMZW5ndGggKyAxKTsKICAgIGxldCBvZmZzZXQgPSAwOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudHNMZW5ndGg7ICsraSkgewogICAgICBwb3NpdGlvbk9mZnNldHNbaV0gPSBvZmZzZXQ7CiAgICAgIG9mZnNldCArPSBjb3VudHNbaV07CiAgICB9CiAgICBwb3NpdGlvbk9mZnNldHNbY291bnRzTGVuZ3RoXSA9IG9mZnNldDsKICAgIHJldHVybiBwb3NpdGlvbk9mZnNldHM7CiAgfQogIGZ1bmN0aW9uIHJlbW92ZUR1cGxpY2F0ZXModUJ1ZmZlciwgdkJ1ZmZlciwgaGVpZ2h0QnVmZmVyLCBjb3VudHMpIHsKICAgIGNvbnN0IGNvdW50c0xlbmd0aCA9IGNvdW50cy5sZW5ndGg7CiAgICBjb25zdCBwb3NpdGlvbnNMZW5ndGggPSB1QnVmZmVyLmxlbmd0aDsKICAgIGNvbnN0IG1hcmtSZW1vdmFsID0gbmV3IFVpbnQ4QXJyYXkocG9zaXRpb25zTGVuZ3RoKTsKICAgIGNvbnN0IHByZXZpb3VzID0gcHJldmlvdXNDb21wcmVzc2VkQ2FydG9ncmFwaGljU2NyYXRjaDsKICAgIGNvbnN0IGN1cnJlbnQgPSBjdXJyZW50Q29tcHJlc3NlZENhcnRvZ3JhcGhpY1NjcmF0Y2g7CiAgICBsZXQgb2Zmc2V0ID0gMDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnRzTGVuZ3RoOyBpKyspIHsKICAgICAgY29uc3QgY291bnQgPSBjb3VudHNbaV07CiAgICAgIGxldCB1cGRhdGVkQ291bnQgPSBjb3VudDsKICAgICAgZm9yIChsZXQgaiA9IDE7IGogPCBjb3VudDsgaisrKSB7CiAgICAgICAgY29uc3QgaW5kZXggPSBvZmZzZXQgKyBqOwogICAgICAgIGNvbnN0IHByZXZpb3VzSW5kZXggPSBpbmRleCAtIDE7CiAgICAgICAgY3VycmVudC5sb25naXR1ZGUgPSB1QnVmZmVyW2luZGV4XTsKICAgICAgICBjdXJyZW50LmxhdGl0dWRlID0gdkJ1ZmZlcltpbmRleF07CiAgICAgICAgcHJldmlvdXMubG9uZ2l0dWRlID0gdUJ1ZmZlcltwcmV2aW91c0luZGV4XTsKICAgICAgICBwcmV2aW91cy5sYXRpdHVkZSA9IHZCdWZmZXJbcHJldmlvdXNJbmRleF07CiAgICAgICAgaWYgKENhcnRvZ3JhcGhpY19kZWZhdWx0LmVxdWFscyhjdXJyZW50LCBwcmV2aW91cykpIHsKICAgICAgICAgIHVwZGF0ZWRDb3VudC0tOwogICAgICAgICAgbWFya1JlbW92YWxbcHJldmlvdXNJbmRleF0gPSAxOwogICAgICAgIH0KICAgICAgfQogICAgICBjb3VudHNbaV0gPSB1cGRhdGVkQ291bnQ7CiAgICAgIG9mZnNldCArPSBjb3VudDsKICAgIH0KICAgIGxldCBuZXh0QXZhaWxhYmxlSW5kZXggPSAwOwogICAgZm9yIChsZXQgayA9IDA7IGsgPCBwb3NpdGlvbnNMZW5ndGg7IGsrKykgewogICAgICBpZiAobWFya1JlbW92YWxba10gIT09IDEpIHsKICAgICAgICB1QnVmZmVyW25leHRBdmFpbGFibGVJbmRleF0gPSB1QnVmZmVyW2tdOwogICAgICAgIHZCdWZmZXJbbmV4dEF2YWlsYWJsZUluZGV4XSA9IHZCdWZmZXJba107CiAgICAgICAgaGVpZ2h0QnVmZmVyW25leHRBdmFpbGFibGVJbmRleF0gPSBoZWlnaHRCdWZmZXJba107CiAgICAgICAgbmV4dEF2YWlsYWJsZUluZGV4Kys7CiAgICAgIH0KICAgIH0KICB9CiAgZnVuY3Rpb24gVmVydGV4QXR0cmlidXRlc0FuZEluZGljZXModm9sdW1lc0NvdW50KSB7CiAgICBjb25zdCB2ZXJ0ZXhDb3VudCA9IHZvbHVtZXNDb3VudCAqIDg7CiAgICBjb25zdCB2ZWMzRmxvYXRzID0gdmVydGV4Q291bnQgKiAzOwogICAgY29uc3QgdmVjNEZsb2F0cyA9IHZlcnRleENvdW50ICogNDsKICAgIHRoaXMuc3RhcnRFbGxpcHNvaWROb3JtYWxzID0gbmV3IEZsb2F0MzJBcnJheSh2ZWMzRmxvYXRzKTsKICAgIHRoaXMuZW5kRWxsaXBzb2lkTm9ybWFscyA9IG5ldyBGbG9hdDMyQXJyYXkodmVjM0Zsb2F0cyk7CiAgICB0aGlzLnN0YXJ0UG9zaXRpb25BbmRIZWlnaHRzID0gbmV3IEZsb2F0MzJBcnJheSh2ZWM0RmxvYXRzKTsKICAgIHRoaXMuc3RhcnRGYWNlTm9ybWFsQW5kVmVydGV4Q29ybmVySWRzID0gbmV3IEZsb2F0MzJBcnJheSh2ZWM0RmxvYXRzKTsKICAgIHRoaXMuZW5kUG9zaXRpb25BbmRIZWlnaHRzID0gbmV3IEZsb2F0MzJBcnJheSh2ZWM0RmxvYXRzKTsKICAgIHRoaXMuZW5kRmFjZU5vcm1hbEFuZEhhbGZXaWR0aHMgPSBuZXcgRmxvYXQzMkFycmF5KHZlYzRGbG9hdHMpOwogICAgdGhpcy52ZXJ0ZXhCYXRjaElkcyA9IG5ldyBVaW50MTZBcnJheSh2ZXJ0ZXhDb3VudCk7CiAgICB0aGlzLmluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSh2ZXJ0ZXhDb3VudCwgMzYgKiB2b2x1bWVzQ291bnQpOwogICAgdGhpcy52ZWMzT2Zmc2V0ID0gMDsKICAgIHRoaXMudmVjNE9mZnNldCA9IDA7CiAgICB0aGlzLmJhdGNoSWRPZmZzZXQgPSAwOwogICAgdGhpcy5pbmRleE9mZnNldCA9IDA7CiAgICB0aGlzLnZvbHVtZVN0YXJ0SW5kZXggPSAwOwogIH0KICBmdW5jdGlvbiBjb21wdXRlTWl0ZXJlZE5vcm1hbChwcmV2aW91c1Bvc2l0aW9uLCBwb3NpdGlvbiwgbmV4dFBvc2l0aW9uLCBlbGxpcHNvaWRTdXJmYWNlTm9ybWFsLCByZXN1bHQpIHsKICAgIGNvbnN0IHRvd2FyZE5leHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgIG5leHRQb3NpdGlvbiwKICAgICAgcG9zaXRpb24sCiAgICAgIHRvd2FyZE5leHRTY3JhdGNoCiAgICApOwogICAgbGV0IHRvd2FyZEN1cnIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgIHBvc2l0aW9uLAogICAgICBwcmV2aW91c1Bvc2l0aW9uLAogICAgICB0b3dhcmRDdXJyU2NyYXRjaAogICAgKTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUodG93YXJkTmV4dCwgdG93YXJkTmV4dCk7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHRvd2FyZEN1cnIsIHRvd2FyZEN1cnIpOwogICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodG93YXJkTmV4dCwgdG93YXJkQ3VycikgPCBNSVRFUl9CUkVBSykgewogICAgICB0b3dhcmRDdXJyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgdG93YXJkQ3VyciwKICAgICAgICAtMSwKICAgICAgICB0b3dhcmRDdXJyU2NyYXRjaAogICAgICApOwogICAgfQogICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZCh0b3dhcmROZXh0LCB0b3dhcmRDdXJyLCByZXN1bHQpOwogICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHMocmVzdWx0LCBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTykpIHsKICAgICAgcmVzdWx0ID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHByZXZpb3VzUG9zaXRpb24sIHBvc2l0aW9uKTsKICAgIH0KICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhyZXN1bHQsIGVsbGlwc29pZFN1cmZhY2VOb3JtYWwsIHJlc3VsdCk7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoZWxsaXBzb2lkU3VyZmFjZU5vcm1hbCwgcmVzdWx0LCByZXN1bHQpOwogICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShyZXN1bHQsIHJlc3VsdCk7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICBmdW5jdGlvbiBjcmVhdGVWZWN0b3JUaWxlQ2xhbXBlZFBvbHlsaW5lcyhwYXJhbWV0ZXJzLCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICBjb25zdCBlbmNvZGVkUG9zaXRpb25zID0gbmV3IFVpbnQxNkFycmF5KHBhcmFtZXRlcnMucG9zaXRpb25zKTsKICAgIGNvbnN0IHdpZHRocyA9IG5ldyBVaW50MTZBcnJheShwYXJhbWV0ZXJzLndpZHRocyk7CiAgICBjb25zdCBjb3VudHMgPSBuZXcgVWludDMyQXJyYXkocGFyYW1ldGVycy5jb3VudHMpOwogICAgY29uc3QgYmF0Y2hJZHMgPSBuZXcgVWludDE2QXJyYXkocGFyYW1ldGVycy5iYXRjaElkcyk7CiAgICBjb25zdCByZWN0YW5nbGUgPSBzY3JhdGNoUmVjdGFuZ2xlMzsKICAgIGNvbnN0IGVsbGlwc29pZCA9IHNjcmF0Y2hFbGxpcHNvaWQxMzsKICAgIGNvbnN0IGNlbnRlciA9IHNjcmF0Y2hDZW50ZXI0OwogICAgY29uc3QgcGFja2VkQnVmZmVyID0gbmV3IEZsb2F0NjRBcnJheShwYXJhbWV0ZXJzLnBhY2tlZEJ1ZmZlcik7CiAgICBsZXQgb2Zmc2V0ID0gMDsKICAgIGNvbnN0IG1pbmltdW1IZWlnaHQgPSBwYWNrZWRCdWZmZXJbb2Zmc2V0KytdOwogICAgY29uc3QgbWF4aW11bUhlaWdodCA9IHBhY2tlZEJ1ZmZlcltvZmZzZXQrK107CiAgICBSZWN0YW5nbGVfZGVmYXVsdC51bnBhY2socGFja2VkQnVmZmVyLCBvZmZzZXQsIHJlY3RhbmdsZSk7CiAgICBvZmZzZXQgKz0gUmVjdGFuZ2xlX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgRWxsaXBzb2lkX2RlZmF1bHQudW5wYWNrKHBhY2tlZEJ1ZmZlciwgb2Zmc2V0LCBlbGxpcHNvaWQpOwogICAgb2Zmc2V0ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2socGFja2VkQnVmZmVyLCBvZmZzZXQsIGNlbnRlcik7CiAgICBsZXQgaTsKICAgIGxldCBwb3NpdGlvbnNMZW5ndGggPSBlbmNvZGVkUG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICBjb25zdCB1QnVmZmVyID0gZW5jb2RlZFBvc2l0aW9ucy5zdWJhcnJheSgwLCBwb3NpdGlvbnNMZW5ndGgpOwogICAgY29uc3QgdkJ1ZmZlciA9IGVuY29kZWRQb3NpdGlvbnMuc3ViYXJyYXkoCiAgICAgIHBvc2l0aW9uc0xlbmd0aCwKICAgICAgMiAqIHBvc2l0aW9uc0xlbmd0aAogICAgKTsKICAgIGNvbnN0IGhlaWdodEJ1ZmZlciA9IGVuY29kZWRQb3NpdGlvbnMuc3ViYXJyYXkoCiAgICAgIDIgKiBwb3NpdGlvbnNMZW5ndGgsCiAgICAgIDMgKiBwb3NpdGlvbnNMZW5ndGgKICAgICk7CiAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbl9kZWZhdWx0LnppZ1phZ0RlbHRhRGVjb2RlKHVCdWZmZXIsIHZCdWZmZXIsIGhlaWdodEJ1ZmZlcik7CiAgICByZW1vdmVEdXBsaWNhdGVzKHVCdWZmZXIsIHZCdWZmZXIsIGhlaWdodEJ1ZmZlciwgY291bnRzKTsKICAgIGNvbnN0IGNvdW50c0xlbmd0aCA9IGNvdW50cy5sZW5ndGg7CiAgICBsZXQgdm9sdW1lc0NvdW50ID0gMDsKICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudHNMZW5ndGg7IGkrKykgewogICAgICBjb25zdCBwb2x5bGluZVBvc2l0aW9uQ291bnQgPSBjb3VudHNbaV07CiAgICAgIHZvbHVtZXNDb3VudCArPSBwb2x5bGluZVBvc2l0aW9uQ291bnQgLSAxOwogICAgfQogICAgY29uc3QgYXR0cmlic0FuZEluZGljZXMgPSBuZXcgVmVydGV4QXR0cmlidXRlc0FuZEluZGljZXModm9sdW1lc0NvdW50KTsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IGRlY29kZVBvc2l0aW9ucygKICAgICAgdUJ1ZmZlciwKICAgICAgdkJ1ZmZlciwKICAgICAgaGVpZ2h0QnVmZmVyLAogICAgICByZWN0YW5nbGUsCiAgICAgIG1pbmltdW1IZWlnaHQsCiAgICAgIG1heGltdW1IZWlnaHQsCiAgICAgIGVsbGlwc29pZCwKICAgICAgY2VudGVyCiAgICApOwogICAgcG9zaXRpb25zTGVuZ3RoID0gdUJ1ZmZlci5sZW5ndGg7CiAgICBjb25zdCBwb3NpdGlvbnNSVEMgPSBuZXcgRmxvYXQzMkFycmF5KHBvc2l0aW9uc0xlbmd0aCAqIDMpOwogICAgZm9yIChpID0gMDsgaSA8IHBvc2l0aW9uc0xlbmd0aDsgKytpKSB7CiAgICAgIHBvc2l0aW9uc1JUQ1tpICogM10gPSBwb3NpdGlvbnNbaSAqIDNdIC0gY2VudGVyLng7CiAgICAgIHBvc2l0aW9uc1JUQ1tpICogMyArIDFdID0gcG9zaXRpb25zW2kgKiAzICsgMV0gLSBjZW50ZXIueTsKICAgICAgcG9zaXRpb25zUlRDW2kgKiAzICsgMl0gPSBwb3NpdGlvbnNbaSAqIDMgKyAyXSAtIGNlbnRlci56OwogICAgfQogICAgbGV0IGN1cnJlbnRQb3NpdGlvbkluZGV4ID0gMDsKICAgIGxldCBjdXJyZW50SGVpZ2h0SW5kZXggPSAwOwogICAgZm9yIChpID0gMDsgaSA8IGNvdW50c0xlbmd0aDsgaSsrKSB7CiAgICAgIGNvbnN0IHBvbHlsaW5lVm9sdW1lQ291bnQgPSBjb3VudHNbaV0gLSAxOwogICAgICBjb25zdCBoYWxmV2lkdGggPSB3aWR0aHNbaV0gKiAwLjU7CiAgICAgIGNvbnN0IGJhdGNoSWQgPSBiYXRjaElkc1tpXTsKICAgICAgY29uc3Qgdm9sdW1lRmlyc3RQb3NpdGlvbkluZGV4ID0gY3VycmVudFBvc2l0aW9uSW5kZXg7CiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcG9seWxpbmVWb2x1bWVDb3VudDsgaisrKSB7CiAgICAgICAgY29uc3Qgdm9sdW1lU3RhcnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgcG9zaXRpb25zUlRDLAogICAgICAgICAgY3VycmVudFBvc2l0aW9uSW5kZXgsCiAgICAgICAgICBzY3JhdGNoUDAKICAgICAgICApOwogICAgICAgIGNvbnN0IHZvbHVtZUVuZCA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBwb3NpdGlvbnNSVEMsCiAgICAgICAgICBjdXJyZW50UG9zaXRpb25JbmRleCArIDMsCiAgICAgICAgICBzY3JhdGNoUDEKICAgICAgICApOwogICAgICAgIGxldCBzdGFydEhlaWdodCA9IGhlaWdodEJ1ZmZlcltjdXJyZW50SGVpZ2h0SW5kZXhdOwogICAgICAgIGxldCBlbmRIZWlnaHQgPSBoZWlnaHRCdWZmZXJbY3VycmVudEhlaWdodEluZGV4ICsgMV07CiAgICAgICAgc3RhcnRIZWlnaHQgPSBNYXRoX2RlZmF1bHQubGVycCgKICAgICAgICAgIG1pbmltdW1IZWlnaHQsCiAgICAgICAgICBtYXhpbXVtSGVpZ2h0LAogICAgICAgICAgc3RhcnRIZWlnaHQgLyBNQVhfU0hPUlQKICAgICAgICApOwogICAgICAgIGVuZEhlaWdodCA9IE1hdGhfZGVmYXVsdC5sZXJwKAogICAgICAgICAgbWluaW11bUhlaWdodCwKICAgICAgICAgIG1heGltdW1IZWlnaHQsCiAgICAgICAgICBlbmRIZWlnaHQgLyBNQVhfU0hPUlQKICAgICAgICApOwogICAgICAgIGN1cnJlbnRIZWlnaHRJbmRleCsrOwogICAgICAgIGxldCBwcmVTdGFydCA9IHNjcmF0Y2hQcmV2OwogICAgICAgIGxldCBwb3N0RW5kID0gc2NyYXRjaE5leHQ7CiAgICAgICAgaWYgKGogPT09IDApIHsKICAgICAgICAgIGNvbnN0IGZpbmFsUG9zaXRpb25JbmRleCA9IHZvbHVtZUZpcnN0UG9zaXRpb25JbmRleCArIHBvbHlsaW5lVm9sdW1lQ291bnQgKiAzOwogICAgICAgICAgY29uc3QgZmluYWxQb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICAgIHBvc2l0aW9uc1JUQywKICAgICAgICAgICAgZmluYWxQb3NpdGlvbkluZGV4LAogICAgICAgICAgICBzY3JhdGNoUHJldgogICAgICAgICAgKTsKICAgICAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzKGZpbmFsUG9zaXRpb24sIHZvbHVtZVN0YXJ0KSkgewogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKHBvc2l0aW9uc1JUQywgZmluYWxQb3NpdGlvbkluZGV4IC0gMywgcHJlU3RhcnQpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc3Qgb2Zmc2V0UGFzdFN0YXJ0ID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgICAgICAgIHZvbHVtZVN0YXJ0LAogICAgICAgICAgICAgIHZvbHVtZUVuZCwKICAgICAgICAgICAgICBzY3JhdGNoUHJldgogICAgICAgICAgICApOwogICAgICAgICAgICBwcmVTdGFydCA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQob2Zmc2V0UGFzdFN0YXJ0LCB2b2x1bWVTdGFydCwgc2NyYXRjaFByZXYpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKHBvc2l0aW9uc1JUQywgY3VycmVudFBvc2l0aW9uSW5kZXggLSAzLCBwcmVTdGFydCk7CiAgICAgICAgfQogICAgICAgIGlmIChqID09PSBwb2x5bGluZVZvbHVtZUNvdW50IC0gMSkgewogICAgICAgICAgY29uc3QgZmlyc3RQb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICAgIHBvc2l0aW9uc1JUQywKICAgICAgICAgICAgdm9sdW1lRmlyc3RQb3NpdGlvbkluZGV4LAogICAgICAgICAgICBzY3JhdGNoTmV4dAogICAgICAgICAgKTsKICAgICAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzKGZpcnN0UG9zaXRpb24sIHZvbHVtZUVuZCkpIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICAgICAgICBwb3NpdGlvbnNSVEMsCiAgICAgICAgICAgICAgdm9sdW1lRmlyc3RQb3NpdGlvbkluZGV4ICsgMywKICAgICAgICAgICAgICBwb3N0RW5kCiAgICAgICAgICAgICk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zdCBvZmZzZXRQYXN0RW5kID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgICAgICAgIHZvbHVtZUVuZCwKICAgICAgICAgICAgICB2b2x1bWVTdGFydCwKICAgICAgICAgICAgICBzY3JhdGNoTmV4dAogICAgICAgICAgICApOwogICAgICAgICAgICBwb3N0RW5kID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZChvZmZzZXRQYXN0RW5kLCB2b2x1bWVFbmQsIHNjcmF0Y2hOZXh0KTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhwb3NpdGlvbnNSVEMsIGN1cnJlbnRQb3NpdGlvbkluZGV4ICsgNiwgcG9zdEVuZCk7CiAgICAgICAgfQogICAgICAgIGF0dHJpYnNBbmRJbmRpY2VzLmFkZFZvbHVtZSgKICAgICAgICAgIHByZVN0YXJ0LAogICAgICAgICAgdm9sdW1lU3RhcnQsCiAgICAgICAgICB2b2x1bWVFbmQsCiAgICAgICAgICBwb3N0RW5kLAogICAgICAgICAgc3RhcnRIZWlnaHQsCiAgICAgICAgICBlbmRIZWlnaHQsCiAgICAgICAgICBoYWxmV2lkdGgsCiAgICAgICAgICBiYXRjaElkLAogICAgICAgICAgY2VudGVyLAogICAgICAgICAgZWxsaXBzb2lkCiAgICAgICAgKTsKICAgICAgICBjdXJyZW50UG9zaXRpb25JbmRleCArPSAzOwogICAgICB9CiAgICAgIGN1cnJlbnRQb3NpdGlvbkluZGV4ICs9IDM7CiAgICAgIGN1cnJlbnRIZWlnaHRJbmRleCsrOwogICAgfQogICAgY29uc3QgaW5kaWNlcyA9IGF0dHJpYnNBbmRJbmRpY2VzLmluZGljZXM7CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goYXR0cmlic0FuZEluZGljZXMuc3RhcnRFbGxpcHNvaWROb3JtYWxzLmJ1ZmZlcik7CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goYXR0cmlic0FuZEluZGljZXMuZW5kRWxsaXBzb2lkTm9ybWFscy5idWZmZXIpOwogICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKGF0dHJpYnNBbmRJbmRpY2VzLnN0YXJ0UG9zaXRpb25BbmRIZWlnaHRzLmJ1ZmZlcik7CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goCiAgICAgIGF0dHJpYnNBbmRJbmRpY2VzLnN0YXJ0RmFjZU5vcm1hbEFuZFZlcnRleENvcm5lcklkcy5idWZmZXIKICAgICk7CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goYXR0cmlic0FuZEluZGljZXMuZW5kUG9zaXRpb25BbmRIZWlnaHRzLmJ1ZmZlcik7CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goYXR0cmlic0FuZEluZGljZXMuZW5kRmFjZU5vcm1hbEFuZEhhbGZXaWR0aHMuYnVmZmVyKTsKICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaChhdHRyaWJzQW5kSW5kaWNlcy52ZXJ0ZXhCYXRjaElkcy5idWZmZXIpOwogICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKGluZGljZXMuYnVmZmVyKTsKICAgIGxldCByZXN1bHRzID0gewogICAgICBpbmRleERhdGF0eXBlOiBpbmRpY2VzLkJZVEVTX1BFUl9FTEVNRU5UID09PSAyID8gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX1NIT1JUIDogSW5kZXhEYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0lOVCwKICAgICAgc3RhcnRFbGxpcHNvaWROb3JtYWxzOiBhdHRyaWJzQW5kSW5kaWNlcy5zdGFydEVsbGlwc29pZE5vcm1hbHMuYnVmZmVyLAogICAgICBlbmRFbGxpcHNvaWROb3JtYWxzOiBhdHRyaWJzQW5kSW5kaWNlcy5lbmRFbGxpcHNvaWROb3JtYWxzLmJ1ZmZlciwKICAgICAgc3RhcnRQb3NpdGlvbkFuZEhlaWdodHM6IGF0dHJpYnNBbmRJbmRpY2VzLnN0YXJ0UG9zaXRpb25BbmRIZWlnaHRzLmJ1ZmZlciwKICAgICAgc3RhcnRGYWNlTm9ybWFsQW5kVmVydGV4Q29ybmVySWRzOiBhdHRyaWJzQW5kSW5kaWNlcy5zdGFydEZhY2VOb3JtYWxBbmRWZXJ0ZXhDb3JuZXJJZHMuYnVmZmVyLAogICAgICBlbmRQb3NpdGlvbkFuZEhlaWdodHM6IGF0dHJpYnNBbmRJbmRpY2VzLmVuZFBvc2l0aW9uQW5kSGVpZ2h0cy5idWZmZXIsCiAgICAgIGVuZEZhY2VOb3JtYWxBbmRIYWxmV2lkdGhzOiBhdHRyaWJzQW5kSW5kaWNlcy5lbmRGYWNlTm9ybWFsQW5kSGFsZldpZHRocy5idWZmZXIsCiAgICAgIHZlcnRleEJhdGNoSWRzOiBhdHRyaWJzQW5kSW5kaWNlcy52ZXJ0ZXhCYXRjaElkcy5idWZmZXIsCiAgICAgIGluZGljZXM6IGluZGljZXMuYnVmZmVyCiAgICB9OwogICAgaWYgKHBhcmFtZXRlcnMua2VlcERlY29kZWRQb3NpdGlvbnMpIHsKICAgICAgY29uc3QgcG9zaXRpb25PZmZzZXRzID0gZ2V0UG9zaXRpb25PZmZzZXRzKGNvdW50cyk7CiAgICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaChwb3NpdGlvbnMuYnVmZmVyLCBwb3NpdGlvbk9mZnNldHMuYnVmZmVyKTsKICAgICAgcmVzdWx0cyA9IGNvbWJpbmVfZGVmYXVsdChyZXN1bHRzLCB7CiAgICAgICAgZGVjb2RlZFBvc2l0aW9uczogcG9zaXRpb25zLmJ1ZmZlciwKICAgICAgICBkZWNvZGVkUG9zaXRpb25PZmZzZXRzOiBwb3NpdGlvbk9mZnNldHMuYnVmZmVyCiAgICAgIH0pOwogICAgfQogICAgcmV0dXJuIHJlc3VsdHM7CiAgfQogIHZhciBNQVhfU0hPUlQsIE1JVEVSX0JSRUFLLCBzY3JhdGNoQlZDYXJ0b2dyYXBoaWMsIHNjcmF0Y2hFbmNvZGVkUG9zaXRpb24sIHByZXZpb3VzQ29tcHJlc3NlZENhcnRvZ3JhcGhpY1NjcmF0Y2gsIGN1cnJlbnRDb21wcmVzc2VkQ2FydG9ncmFwaGljU2NyYXRjaCwgdG93YXJkQ3VyclNjcmF0Y2gsIHRvd2FyZE5leHRTY3JhdGNoLCBSRUZFUkVOQ0VfSU5ESUNFUzIsIFJFRkVSRU5DRV9JTkRJQ0VTX0xFTkdUSDIsIHBvc2l0aW9uU2NyYXRjaDQsIHNjcmF0Y2hTdGFydEVsbGlwc29pZE5vcm1hbCwgc2NyYXRjaFN0YXJ0RmFjZU5vcm1hbCwgc2NyYXRjaEVuZEVsbGlwc29pZE5vcm1hbCwgc2NyYXRjaEVuZEZhY2VOb3JtYWwsIHNjcmF0Y2hSZWN0YW5nbGUzLCBzY3JhdGNoRWxsaXBzb2lkMTMsIHNjcmF0Y2hDZW50ZXI0LCBzY3JhdGNoUHJldiwgc2NyYXRjaFAwLCBzY3JhdGNoUDEsIHNjcmF0Y2hOZXh0LCBjcmVhdGVWZWN0b3JUaWxlQ2xhbXBlZFBvbHlsaW5lc19kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVZlY3RvclRpbGVDbGFtcGVkUG9seWxpbmVzID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVWZWN0b3JUaWxlQ2xhbXBlZFBvbHlsaW5lcy5qcyIoKSB7CiAgICAgIGluaXRfQXR0cmlidXRlQ29tcHJlc3Npb24oKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfY29tYmluZSgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfY3JlYXRlVGFza1Byb2Nlc3NvcldvcmtlcigpOwogICAgICBNQVhfU0hPUlQgPSAzMjc2NzsKICAgICAgTUlURVJfQlJFQUsgPSBNYXRoLmNvcyhNYXRoX2RlZmF1bHQudG9SYWRpYW5zKDE1MCkpOwogICAgICBzY3JhdGNoQlZDYXJ0b2dyYXBoaWMgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEVuY29kZWRQb3NpdGlvbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcHJldmlvdXNDb21wcmVzc2VkQ2FydG9ncmFwaGljU2NyYXRjaCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBjdXJyZW50Q29tcHJlc3NlZENhcnRvZ3JhcGhpY1NjcmF0Y2ggPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgdG93YXJkQ3VyclNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHRvd2FyZE5leHRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBSRUZFUkVOQ0VfSU5ESUNFUzIgPSBbCiAgICAgICAgMCwKICAgICAgICAyLAogICAgICAgIDYsCiAgICAgICAgMCwKICAgICAgICA2LAogICAgICAgIDQsCiAgICAgICAgLy8gcmlnaHQKICAgICAgICAwLAogICAgICAgIDEsCiAgICAgICAgMywKICAgICAgICAwLAogICAgICAgIDMsCiAgICAgICAgMiwKICAgICAgICAvLyBzdGFydCBmYWNlCiAgICAgICAgMCwKICAgICAgICA0LAogICAgICAgIDUsCiAgICAgICAgMCwKICAgICAgICA1LAogICAgICAgIDEsCiAgICAgICAgLy8gYm90dG9tCiAgICAgICAgNSwKICAgICAgICAzLAogICAgICAgIDEsCiAgICAgICAgNSwKICAgICAgICA3LAogICAgICAgIDMsCiAgICAgICAgLy8gbGVmdAogICAgICAgIDcsCiAgICAgICAgNSwKICAgICAgICA0LAogICAgICAgIDcsCiAgICAgICAgNCwKICAgICAgICA2LAogICAgICAgIC8vIGVuZCBmYWNlCiAgICAgICAgNywKICAgICAgICA2LAogICAgICAgIDIsCiAgICAgICAgNywKICAgICAgICAyLAogICAgICAgIDMKICAgICAgICAvLyB0b3AKICAgICAgXTsKICAgICAgUkVGRVJFTkNFX0lORElDRVNfTEVOR1RIMiA9IFJFRkVSRU5DRV9JTkRJQ0VTMi5sZW5ndGg7CiAgICAgIHBvc2l0aW9uU2NyYXRjaDQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hTdGFydEVsbGlwc29pZE5vcm1hbCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFN0YXJ0RmFjZU5vcm1hbCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEVuZEVsbGlwc29pZE5vcm1hbCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEVuZEZhY2VOb3JtYWwgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIFZlcnRleEF0dHJpYnV0ZXNBbmRJbmRpY2VzLnByb3RvdHlwZS5hZGRWb2x1bWUgPSBmdW5jdGlvbihwcmVTdGFydFJUQywgc3RhcnRSVEMsIGVuZFJUQywgcG9zdEVuZFJUQywgc3RhcnRIZWlnaHQsIGVuZEhlaWdodCwgaGFsZldpZHRoLCBiYXRjaElkLCBjZW50ZXIsIGVsbGlwc29pZCkgewogICAgICAgIGxldCBwb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoc3RhcnRSVEMsIGNlbnRlciwgcG9zaXRpb25TY3JhdGNoNCk7CiAgICAgICAgY29uc3Qgc3RhcnRFbGxpcHNvaWROb3JtYWwgPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKAogICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICBzY3JhdGNoU3RhcnRFbGxpcHNvaWROb3JtYWwKICAgICAgICApOwogICAgICAgIHBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZChlbmRSVEMsIGNlbnRlciwgcG9zaXRpb25TY3JhdGNoNCk7CiAgICAgICAgY29uc3QgZW5kRWxsaXBzb2lkTm9ybWFsID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbCgKICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgc2NyYXRjaEVuZEVsbGlwc29pZE5vcm1hbAogICAgICAgICk7CiAgICAgICAgY29uc3Qgc3RhcnRGYWNlTm9ybWFsID0gY29tcHV0ZU1pdGVyZWROb3JtYWwoCiAgICAgICAgICBwcmVTdGFydFJUQywKICAgICAgICAgIHN0YXJ0UlRDLAogICAgICAgICAgZW5kUlRDLAogICAgICAgICAgc3RhcnRFbGxpcHNvaWROb3JtYWwsCiAgICAgICAgICBzY3JhdGNoU3RhcnRGYWNlTm9ybWFsCiAgICAgICAgKTsKICAgICAgICBjb25zdCBlbmRGYWNlTm9ybWFsID0gY29tcHV0ZU1pdGVyZWROb3JtYWwoCiAgICAgICAgICBwb3N0RW5kUlRDLAogICAgICAgICAgZW5kUlRDLAogICAgICAgICAgc3RhcnRSVEMsCiAgICAgICAgICBlbmRFbGxpcHNvaWROb3JtYWwsCiAgICAgICAgICBzY3JhdGNoRW5kRmFjZU5vcm1hbAogICAgICAgICk7CiAgICAgICAgY29uc3Qgc3RhcnRFbGxpcHNvaWROb3JtYWxzID0gdGhpcy5zdGFydEVsbGlwc29pZE5vcm1hbHM7CiAgICAgICAgY29uc3QgZW5kRWxsaXBzb2lkTm9ybWFscyA9IHRoaXMuZW5kRWxsaXBzb2lkTm9ybWFsczsKICAgICAgICBjb25zdCBzdGFydFBvc2l0aW9uQW5kSGVpZ2h0cyA9IHRoaXMuc3RhcnRQb3NpdGlvbkFuZEhlaWdodHM7CiAgICAgICAgY29uc3Qgc3RhcnRGYWNlTm9ybWFsQW5kVmVydGV4Q29ybmVySWRzID0gdGhpcy5zdGFydEZhY2VOb3JtYWxBbmRWZXJ0ZXhDb3JuZXJJZHM7CiAgICAgICAgY29uc3QgZW5kUG9zaXRpb25BbmRIZWlnaHRzID0gdGhpcy5lbmRQb3NpdGlvbkFuZEhlaWdodHM7CiAgICAgICAgY29uc3QgZW5kRmFjZU5vcm1hbEFuZEhhbGZXaWR0aHMgPSB0aGlzLmVuZEZhY2VOb3JtYWxBbmRIYWxmV2lkdGhzOwogICAgICAgIGNvbnN0IHZlcnRleEJhdGNoSWRzID0gdGhpcy52ZXJ0ZXhCYXRjaElkczsKICAgICAgICBsZXQgYmF0Y2hJZE9mZnNldCA9IHRoaXMuYmF0Y2hJZE9mZnNldDsKICAgICAgICBsZXQgdmVjM09mZnNldCA9IHRoaXMudmVjM09mZnNldDsKICAgICAgICBsZXQgdmVjNE9mZnNldCA9IHRoaXMudmVjNE9mZnNldDsKICAgICAgICBsZXQgaTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgODsgaSsrKSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhzdGFydEVsbGlwc29pZE5vcm1hbCwgc3RhcnRFbGxpcHNvaWROb3JtYWxzLCB2ZWMzT2Zmc2V0KTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGVuZEVsbGlwc29pZE5vcm1hbCwgZW5kRWxsaXBzb2lkTm9ybWFscywgdmVjM09mZnNldCk7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhzdGFydFJUQywgc3RhcnRQb3NpdGlvbkFuZEhlaWdodHMsIHZlYzRPZmZzZXQpOwogICAgICAgICAgc3RhcnRQb3NpdGlvbkFuZEhlaWdodHNbdmVjNE9mZnNldCArIDNdID0gc3RhcnRIZWlnaHQ7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhlbmRSVEMsIGVuZFBvc2l0aW9uQW5kSGVpZ2h0cywgdmVjNE9mZnNldCk7CiAgICAgICAgICBlbmRQb3NpdGlvbkFuZEhlaWdodHNbdmVjNE9mZnNldCArIDNdID0gZW5kSGVpZ2h0OwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soCiAgICAgICAgICAgIHN0YXJ0RmFjZU5vcm1hbCwKICAgICAgICAgICAgc3RhcnRGYWNlTm9ybWFsQW5kVmVydGV4Q29ybmVySWRzLAogICAgICAgICAgICB2ZWM0T2Zmc2V0CiAgICAgICAgICApOwogICAgICAgICAgc3RhcnRGYWNlTm9ybWFsQW5kVmVydGV4Q29ybmVySWRzW3ZlYzRPZmZzZXQgKyAzXSA9IGk7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhlbmRGYWNlTm9ybWFsLCBlbmRGYWNlTm9ybWFsQW5kSGFsZldpZHRocywgdmVjNE9mZnNldCk7CiAgICAgICAgICBlbmRGYWNlTm9ybWFsQW5kSGFsZldpZHRoc1t2ZWM0T2Zmc2V0ICsgM10gPSBoYWxmV2lkdGg7CiAgICAgICAgICB2ZXJ0ZXhCYXRjaElkc1tiYXRjaElkT2Zmc2V0KytdID0gYmF0Y2hJZDsKICAgICAgICAgIHZlYzNPZmZzZXQgKz0gMzsKICAgICAgICAgIHZlYzRPZmZzZXQgKz0gNDsKICAgICAgICB9CiAgICAgICAgdGhpcy5iYXRjaElkT2Zmc2V0ID0gYmF0Y2hJZE9mZnNldDsKICAgICAgICB0aGlzLnZlYzNPZmZzZXQgPSB2ZWMzT2Zmc2V0OwogICAgICAgIHRoaXMudmVjNE9mZnNldCA9IHZlYzRPZmZzZXQ7CiAgICAgICAgY29uc3QgaW5kaWNlcyA9IHRoaXMuaW5kaWNlczsKICAgICAgICBjb25zdCB2b2x1bWVTdGFydEluZGV4ID0gdGhpcy52b2x1bWVTdGFydEluZGV4OwogICAgICAgIGNvbnN0IGluZGV4T2Zmc2V0ID0gdGhpcy5pbmRleE9mZnNldDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgUkVGRVJFTkNFX0lORElDRVNfTEVOR1RIMjsgaSsrKSB7CiAgICAgICAgICBpbmRpY2VzW2luZGV4T2Zmc2V0ICsgaV0gPSBSRUZFUkVOQ0VfSU5ESUNFUzJbaV0gKyB2b2x1bWVTdGFydEluZGV4OwogICAgICAgIH0KICAgICAgICB0aGlzLnZvbHVtZVN0YXJ0SW5kZXggKz0gODsKICAgICAgICB0aGlzLmluZGV4T2Zmc2V0ICs9IFJFRkVSRU5DRV9JTkRJQ0VTX0xFTkdUSDI7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hSZWN0YW5nbGUzID0gbmV3IFJlY3RhbmdsZV9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hFbGxpcHNvaWQxMyA9IG5ldyBFbGxpcHNvaWRfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2VudGVyNCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFByZXYgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQMCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFAxID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTmV4dCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY3JlYXRlVmVjdG9yVGlsZUNsYW1wZWRQb2x5bGluZXNfZGVmYXVsdCA9IGNyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXJfZGVmYXVsdChjcmVhdGVWZWN0b3JUaWxlQ2xhbXBlZFBvbHlsaW5lcyk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvU2NlbmUvVmVjdG9yM0RUaWxlQmF0Y2guanMKICBmdW5jdGlvbiBWZWN0b3IzRFRpbGVCYXRjaChvcHRpb25zKSB7CiAgICB0aGlzLm9mZnNldCA9IG9wdGlvbnMub2Zmc2V0OwogICAgdGhpcy5jb3VudCA9IG9wdGlvbnMuY291bnQ7CiAgICB0aGlzLmNvbG9yID0gb3B0aW9ucy5jb2xvcjsKICAgIHRoaXMuYmF0Y2hJZHMgPSBvcHRpb25zLmJhdGNoSWRzOwogIH0KICB2YXIgVmVjdG9yM0RUaWxlQmF0Y2hfZGVmYXVsdDsKICB2YXIgaW5pdF9WZWN0b3IzRFRpbGVCYXRjaCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1NjZW5lL1ZlY3RvcjNEVGlsZUJhdGNoLmpzIigpIHsKICAgICAgVmVjdG9yM0RUaWxlQmF0Y2hfZGVmYXVsdCA9IFZlY3RvcjNEVGlsZUJhdGNoOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlVmVjdG9yVGlsZUdlb21ldHJpZXMuanMKICB2YXIgY3JlYXRlVmVjdG9yVGlsZUdlb21ldHJpZXNfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZVZlY3RvclRpbGVHZW9tZXRyaWVzX2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVZlY3RvclRpbGVHZW9tZXRyaWVzX2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBib3hNb2RlbE1hdHJpeEFuZEJvdW5kaW5nVm9sdW1lKGJveGVzLCBpbmRleCkgewogICAgbGV0IGJveEluZGV4ID0gaW5kZXggKiBwYWNrZWRCb3hMZW5ndGg7CiAgICBjb25zdCBkaW1lbnNpb25zID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhib3hlcywgYm94SW5kZXgsIHNjcmF0Y2hDYXJ0ZXNpYW4xMSk7CiAgICBib3hJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgY29uc3QgYm94TW9kZWxNYXRyaXggPSBNYXRyaXg0X2RlZmF1bHQudW5wYWNrKAogICAgICBib3hlcywKICAgICAgYm94SW5kZXgsCiAgICAgIHNjcmF0Y2hNb2RlbE1hdHJpeEFuZEJWLm1vZGVsTWF0cml4CiAgICApOwogICAgTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlTY2FsZShib3hNb2RlbE1hdHJpeCwgZGltZW5zaW9ucywgYm94TW9kZWxNYXRyaXgpOwogICAgY29uc3QgYm91bmRpbmdWb2x1bWUgPSBzY3JhdGNoTW9kZWxNYXRyaXhBbmRCVi5ib3VuZGluZ1ZvbHVtZTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgYm91bmRpbmdWb2x1bWUuY2VudGVyKTsKICAgIGJvdW5kaW5nVm9sdW1lLnJhZGl1cyA9IE1hdGguc3FydCgzKTsKICAgIHJldHVybiBzY3JhdGNoTW9kZWxNYXRyaXhBbmRCVjsKICB9CiAgZnVuY3Rpb24gY3lsaW5kZXJNb2RlbE1hdHJpeEFuZEJvdW5kaW5nVm9sdW1lKGN5bGluZGVycywgaW5kZXgpIHsKICAgIGxldCBjeWxpbmRlckluZGV4ID0gaW5kZXggKiBwYWNrZWRDeWxpbmRlckxlbmd0aDsKICAgIGNvbnN0IGN5bGluZGVyUmFkaXVzID0gY3lsaW5kZXJzW2N5bGluZGVySW5kZXgrK107CiAgICBjb25zdCBsZW5ndGggPSBjeWxpbmRlcnNbY3lsaW5kZXJJbmRleCsrXTsKICAgIGNvbnN0IHNjYWxlID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21FbGVtZW50cygKICAgICAgY3lsaW5kZXJSYWRpdXMsCiAgICAgIGN5bGluZGVyUmFkaXVzLAogICAgICBsZW5ndGgsCiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xMQogICAgKTsKICAgIGNvbnN0IGN5bGluZGVyTW9kZWxNYXRyaXggPSBNYXRyaXg0X2RlZmF1bHQudW5wYWNrKAogICAgICBjeWxpbmRlcnMsCiAgICAgIGN5bGluZGVySW5kZXgsCiAgICAgIHNjcmF0Y2hNb2RlbE1hdHJpeEFuZEJWLm1vZGVsTWF0cml4CiAgICApOwogICAgTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlTY2FsZShjeWxpbmRlck1vZGVsTWF0cml4LCBzY2FsZSwgY3lsaW5kZXJNb2RlbE1hdHJpeCk7CiAgICBjb25zdCBib3VuZGluZ1ZvbHVtZSA9IHNjcmF0Y2hNb2RlbE1hdHJpeEFuZEJWLmJvdW5kaW5nVm9sdW1lOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLCBib3VuZGluZ1ZvbHVtZS5jZW50ZXIpOwogICAgYm91bmRpbmdWb2x1bWUucmFkaXVzID0gTWF0aC5zcXJ0KDIpOwogICAgcmV0dXJuIHNjcmF0Y2hNb2RlbE1hdHJpeEFuZEJWOwogIH0KICBmdW5jdGlvbiBlbGxpcHNvaWRNb2RlbE1hdHJpeEFuZEJvdW5kaW5nVm9sdW1lKGVsbGlwc29pZHMsIGluZGV4KSB7CiAgICBsZXQgZWxsaXBzb2lkSW5kZXggPSBpbmRleCAqIHBhY2tlZEVsbGlwc29pZExlbmd0aDsKICAgIGNvbnN0IHJhZGlpID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhlbGxpcHNvaWRzLCBlbGxpcHNvaWRJbmRleCwgc2NyYXRjaENhcnRlc2lhbjExKTsKICAgIGVsbGlwc29pZEluZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICBjb25zdCBlbGxpcHNvaWRNb2RlbE1hdHJpeCA9IE1hdHJpeDRfZGVmYXVsdC51bnBhY2soCiAgICAgIGVsbGlwc29pZHMsCiAgICAgIGVsbGlwc29pZEluZGV4LAogICAgICBzY3JhdGNoTW9kZWxNYXRyaXhBbmRCVi5tb2RlbE1hdHJpeAogICAgKTsKICAgIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGUoZWxsaXBzb2lkTW9kZWxNYXRyaXgsIHJhZGlpLCBlbGxpcHNvaWRNb2RlbE1hdHJpeCk7CiAgICBjb25zdCBib3VuZGluZ1ZvbHVtZSA9IHNjcmF0Y2hNb2RlbE1hdHJpeEFuZEJWLmJvdW5kaW5nVm9sdW1lOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLCBib3VuZGluZ1ZvbHVtZS5jZW50ZXIpOwogICAgYm91bmRpbmdWb2x1bWUucmFkaXVzID0gMTsKICAgIHJldHVybiBzY3JhdGNoTW9kZWxNYXRyaXhBbmRCVjsKICB9CiAgZnVuY3Rpb24gc3BoZXJlTW9kZWxNYXRyaXhBbmRCb3VuZGluZ1ZvbHVtZShzcGhlcmVzLCBpbmRleCkgewogICAgbGV0IHNwaGVyZUluZGV4ID0gaW5kZXggKiBwYWNrZWRTcGhlcmVMZW5ndGg7CiAgICBjb25zdCBzcGhlcmVSYWRpdXMgPSBzcGhlcmVzW3NwaGVyZUluZGV4KytdOwogICAgY29uc3Qgc3BoZXJlVHJhbnNsYXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKAogICAgICBzcGhlcmVzLAogICAgICBzcGhlcmVJbmRleCwKICAgICAgc2NyYXRjaENhcnRlc2lhbjExCiAgICApOwogICAgY29uc3Qgc3BoZXJlTW9kZWxNYXRyaXggPSBNYXRyaXg0X2RlZmF1bHQuZnJvbVRyYW5zbGF0aW9uKAogICAgICBzcGhlcmVUcmFuc2xhdGlvbiwKICAgICAgc2NyYXRjaE1vZGVsTWF0cml4QW5kQlYubW9kZWxNYXRyaXgKICAgICk7CiAgICBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVVuaWZvcm1TY2FsZSgKICAgICAgc3BoZXJlTW9kZWxNYXRyaXgsCiAgICAgIHNwaGVyZVJhZGl1cywKICAgICAgc3BoZXJlTW9kZWxNYXRyaXgKICAgICk7CiAgICBjb25zdCBib3VuZGluZ1ZvbHVtZSA9IHNjcmF0Y2hNb2RlbE1hdHJpeEFuZEJWLmJvdW5kaW5nVm9sdW1lOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLCBib3VuZGluZ1ZvbHVtZS5jZW50ZXIpOwogICAgYm91bmRpbmdWb2x1bWUucmFkaXVzID0gMTsKICAgIHJldHVybiBzY3JhdGNoTW9kZWxNYXRyaXhBbmRCVjsKICB9CiAgZnVuY3Rpb24gY3JlYXRlUHJpbWl0aXZlKG9wdGlvbnMsIHByaW1pdGl2ZSwgcHJpbWl0aXZlQmF0Y2hJZHMsIGdlb21ldHJ5LCBnZXRNb2RlbE1hdHJpeEFuZEJvdW5kaW5nVm9sdW1lKSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwcmltaXRpdmUpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IG51bWJlck9mUHJpbWl0aXZlcyA9IHByaW1pdGl2ZUJhdGNoSWRzLmxlbmd0aDsKICAgIGNvbnN0IGdlb21ldHJ5UG9zaXRpb25zID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXM7CiAgICBjb25zdCBnZW9tZXRyeUluZGljZXMgPSBnZW9tZXRyeS5pbmRpY2VzOwogICAgY29uc3QgcG9zaXRpb25zID0gb3B0aW9ucy5wb3NpdGlvbnM7CiAgICBjb25zdCB2ZXJ0ZXhCYXRjaElkcyA9IG9wdGlvbnMudmVydGV4QmF0Y2hJZHM7CiAgICBjb25zdCBpbmRpY2VzID0gb3B0aW9ucy5pbmRpY2VzOwogICAgY29uc3QgYmF0Y2hJZHMgPSBvcHRpb25zLmJhdGNoSWRzOwogICAgY29uc3QgYmF0Y2hUYWJsZUNvbG9ycyA9IG9wdGlvbnMuYmF0Y2hUYWJsZUNvbG9yczsKICAgIGNvbnN0IGJhdGNoZWRJbmRpY2VzID0gb3B0aW9ucy5iYXRjaGVkSW5kaWNlczsKICAgIGNvbnN0IGluZGV4T2Zmc2V0cyA9IG9wdGlvbnMuaW5kZXhPZmZzZXRzOwogICAgY29uc3QgaW5kZXhDb3VudHMgPSBvcHRpb25zLmluZGV4Q291bnRzOwogICAgY29uc3QgYm91bmRpbmdWb2x1bWVzID0gb3B0aW9ucy5ib3VuZGluZ1ZvbHVtZXM7CiAgICBjb25zdCBtb2RlbE1hdHJpeCA9IG9wdGlvbnMubW9kZWxNYXRyaXg7CiAgICBjb25zdCBjZW50ZXIgPSBvcHRpb25zLmNlbnRlcjsKICAgIGxldCBwb3NpdGlvbk9mZnNldCA9IG9wdGlvbnMucG9zaXRpb25PZmZzZXQ7CiAgICBsZXQgYmF0Y2hJZEluZGV4ID0gb3B0aW9ucy5iYXRjaElkSW5kZXg7CiAgICBsZXQgaW5kZXhPZmZzZXQgPSBvcHRpb25zLmluZGV4T2Zmc2V0OwogICAgY29uc3QgYmF0Y2hlZEluZGljZXNPZmZzZXQgPSBvcHRpb25zLmJhdGNoZWRJbmRpY2VzT2Zmc2V0OwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZlByaW1pdGl2ZXM7ICsraSkgewogICAgICBjb25zdCBwcmltaXRpdmVNb2RlbE1hdHJpeEFuZEJWID0gZ2V0TW9kZWxNYXRyaXhBbmRCb3VuZGluZ1ZvbHVtZSgKICAgICAgICBwcmltaXRpdmUsCiAgICAgICAgaQogICAgICApOwogICAgICBjb25zdCBwcmltaXRpdmVNb2RlbE1hdHJpeCA9IHByaW1pdGl2ZU1vZGVsTWF0cml4QW5kQlYubW9kZWxNYXRyaXg7CiAgICAgIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseShtb2RlbE1hdHJpeCwgcHJpbWl0aXZlTW9kZWxNYXRyaXgsIHByaW1pdGl2ZU1vZGVsTWF0cml4KTsKICAgICAgY29uc3QgYmF0Y2hJZCA9IHByaW1pdGl2ZUJhdGNoSWRzW2ldOwogICAgICBjb25zdCBwb3NpdGlvbnNMZW5ndGggPSBnZW9tZXRyeVBvc2l0aW9ucy5sZW5ndGg7CiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcG9zaXRpb25zTGVuZ3RoOyBqICs9IDMpIHsKICAgICAgICBjb25zdCBwb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soZ2VvbWV0cnlQb3NpdGlvbnMsIGosIHNjcmF0Y2hQb3NpdGlvbjUpOwogICAgICAgIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseUJ5UG9pbnQocHJpbWl0aXZlTW9kZWxNYXRyaXgsIHBvc2l0aW9uLCBwb3NpdGlvbik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHBvc2l0aW9uLCBjZW50ZXIsIHBvc2l0aW9uKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhwb3NpdGlvbiwgcG9zaXRpb25zLCBwb3NpdGlvbk9mZnNldCAqIDMgKyBqKTsKICAgICAgICB2ZXJ0ZXhCYXRjaElkc1tiYXRjaElkSW5kZXgrK10gPSBiYXRjaElkOwogICAgICB9CiAgICAgIGNvbnN0IGluZGljZXNMZW5ndGggPSBnZW9tZXRyeUluZGljZXMubGVuZ3RoOwogICAgICBmb3IgKGxldCBrID0gMDsgayA8IGluZGljZXNMZW5ndGg7ICsraykgewogICAgICAgIGluZGljZXNbaW5kZXhPZmZzZXQgKyBrXSA9IGdlb21ldHJ5SW5kaWNlc1trXSArIHBvc2l0aW9uT2Zmc2V0OwogICAgICB9CiAgICAgIGNvbnN0IG9mZnNldCA9IGkgKyBiYXRjaGVkSW5kaWNlc09mZnNldDsKICAgICAgYmF0Y2hlZEluZGljZXNbb2Zmc2V0XSA9IG5ldyBWZWN0b3IzRFRpbGVCYXRjaF9kZWZhdWx0KHsKICAgICAgICBvZmZzZXQ6IGluZGV4T2Zmc2V0LAogICAgICAgIGNvdW50OiBpbmRpY2VzTGVuZ3RoLAogICAgICAgIGNvbG9yOiBDb2xvcl9kZWZhdWx0LmZyb21SZ2JhKGJhdGNoVGFibGVDb2xvcnNbYmF0Y2hJZF0pLAogICAgICAgIGJhdGNoSWRzOiBbYmF0Y2hJZF0KICAgICAgfSk7CiAgICAgIGJhdGNoSWRzW29mZnNldF0gPSBiYXRjaElkOwogICAgICBpbmRleE9mZnNldHNbb2Zmc2V0XSA9IGluZGV4T2Zmc2V0OwogICAgICBpbmRleENvdW50c1tvZmZzZXRdID0gaW5kaWNlc0xlbmd0aDsKICAgICAgYm91bmRpbmdWb2x1bWVzW29mZnNldF0gPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnRyYW5zZm9ybSgKICAgICAgICBwcmltaXRpdmVNb2RlbE1hdHJpeEFuZEJWLmJvdW5kaW5nVm9sdW1lLAogICAgICAgIHByaW1pdGl2ZU1vZGVsTWF0cml4CiAgICAgICk7CiAgICAgIHBvc2l0aW9uT2Zmc2V0ICs9IHBvc2l0aW9uc0xlbmd0aCAvIDM7CiAgICAgIGluZGV4T2Zmc2V0ICs9IGluZGljZXNMZW5ndGg7CiAgICB9CiAgICBvcHRpb25zLnBvc2l0aW9uT2Zmc2V0ID0gcG9zaXRpb25PZmZzZXQ7CiAgICBvcHRpb25zLmJhdGNoSWRJbmRleCA9IGJhdGNoSWRJbmRleDsKICAgIG9wdGlvbnMuaW5kZXhPZmZzZXQgPSBpbmRleE9mZnNldDsKICAgIG9wdGlvbnMuYmF0Y2hlZEluZGljZXNPZmZzZXQgKz0gbnVtYmVyT2ZQcmltaXRpdmVzOwogIH0KICBmdW5jdGlvbiB1bnBhY2tCdWZmZXIoYnVmZmVyKSB7CiAgICBjb25zdCBwYWNrZWRCdWZmZXIgPSBuZXcgRmxvYXQ2NEFycmF5KGJ1ZmZlcik7CiAgICBsZXQgb2Zmc2V0ID0gMDsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2socGFja2VkQnVmZmVyLCBvZmZzZXQsIHNjcmF0Y2hDZW50ZXI1KTsKICAgIG9mZnNldCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgTWF0cml4NF9kZWZhdWx0LnVucGFjayhwYWNrZWRCdWZmZXIsIG9mZnNldCwgc2NyYXRjaE1hdHJpeDQpOwogIH0KICBmdW5jdGlvbiBwYWNrZWRCYXRjaGVkSW5kaWNlc0xlbmd0aChiYXRjaGVkSW5kaWNlcykgewogICAgY29uc3QgbGVuZ3RoID0gYmF0Y2hlZEluZGljZXMubGVuZ3RoOwogICAgbGV0IGNvdW50ID0gMDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgY291bnQgKz0gQ29sb3JfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyAzICsgYmF0Y2hlZEluZGljZXNbaV0uYmF0Y2hJZHMubGVuZ3RoOwogICAgfQogICAgcmV0dXJuIGNvdW50OwogIH0KICBmdW5jdGlvbiBwYWNrQnVmZmVyKGluZGljZXNCeXRlc1BlckVsZW1lbnQsIGJhdGNoZWRJbmRpY2VzLCBib3VuZGluZ1ZvbHVtZXMpIHsKICAgIGNvbnN0IG51bUJWcyA9IGJvdW5kaW5nVm9sdW1lcy5sZW5ndGg7CiAgICBjb25zdCBsZW5ndGggPSAxICsgMSArIG51bUJWcyAqIEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgMSArIHBhY2tlZEJhdGNoZWRJbmRpY2VzTGVuZ3RoKGJhdGNoZWRJbmRpY2VzKTsKICAgIGNvbnN0IHBhY2tlZEJ1ZmZlciA9IG5ldyBGbG9hdDY0QXJyYXkobGVuZ3RoKTsKICAgIGxldCBvZmZzZXQgPSAwOwogICAgcGFja2VkQnVmZmVyW29mZnNldCsrXSA9IGluZGljZXNCeXRlc1BlckVsZW1lbnQ7CiAgICBwYWNrZWRCdWZmZXJbb2Zmc2V0KytdID0gbnVtQlZzOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1CVnM7ICsraSkgewogICAgICBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnBhY2soYm91bmRpbmdWb2x1bWVzW2ldLCBwYWNrZWRCdWZmZXIsIG9mZnNldCk7CiAgICAgIG9mZnNldCArPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgIH0KICAgIGNvbnN0IGluZGljZXNMZW5ndGggPSBiYXRjaGVkSW5kaWNlcy5sZW5ndGg7CiAgICBwYWNrZWRCdWZmZXJbb2Zmc2V0KytdID0gaW5kaWNlc0xlbmd0aDsKICAgIGZvciAobGV0IGogPSAwOyBqIDwgaW5kaWNlc0xlbmd0aDsgKytqKSB7CiAgICAgIGNvbnN0IGJhdGNoZWRJbmRleCA9IGJhdGNoZWRJbmRpY2VzW2pdOwogICAgICBDb2xvcl9kZWZhdWx0LnBhY2soYmF0Y2hlZEluZGV4LmNvbG9yLCBwYWNrZWRCdWZmZXIsIG9mZnNldCk7CiAgICAgIG9mZnNldCArPSBDb2xvcl9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgcGFja2VkQnVmZmVyW29mZnNldCsrXSA9IGJhdGNoZWRJbmRleC5vZmZzZXQ7CiAgICAgIHBhY2tlZEJ1ZmZlcltvZmZzZXQrK10gPSBiYXRjaGVkSW5kZXguY291bnQ7CiAgICAgIGNvbnN0IGJhdGNoSWRzID0gYmF0Y2hlZEluZGV4LmJhdGNoSWRzOwogICAgICBjb25zdCBiYXRjaElkc0xlbmd0aCA9IGJhdGNoSWRzLmxlbmd0aDsKICAgICAgcGFja2VkQnVmZmVyW29mZnNldCsrXSA9IGJhdGNoSWRzTGVuZ3RoOwogICAgICBmb3IgKGxldCBrID0gMDsgayA8IGJhdGNoSWRzTGVuZ3RoOyArK2spIHsKICAgICAgICBwYWNrZWRCdWZmZXJbb2Zmc2V0KytdID0gYmF0Y2hJZHNba107CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBwYWNrZWRCdWZmZXI7CiAgfQogIGZ1bmN0aW9uIGNyZWF0ZVZlY3RvclRpbGVHZW9tZXRyaWVzKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIGNvbnN0IGJveGVzID0gZGVmaW5lZF9kZWZhdWx0KHBhcmFtZXRlcnMuYm94ZXMpID8gbmV3IEZsb2F0MzJBcnJheShwYXJhbWV0ZXJzLmJveGVzKSA6IHZvaWQgMDsKICAgIGNvbnN0IGJveEJhdGNoSWRzID0gZGVmaW5lZF9kZWZhdWx0KHBhcmFtZXRlcnMuYm94QmF0Y2hJZHMpID8gbmV3IFVpbnQxNkFycmF5KHBhcmFtZXRlcnMuYm94QmF0Y2hJZHMpIDogdm9pZCAwOwogICAgY29uc3QgY3lsaW5kZXJzID0gZGVmaW5lZF9kZWZhdWx0KHBhcmFtZXRlcnMuY3lsaW5kZXJzKSA/IG5ldyBGbG9hdDMyQXJyYXkocGFyYW1ldGVycy5jeWxpbmRlcnMpIDogdm9pZCAwOwogICAgY29uc3QgY3lsaW5kZXJCYXRjaElkcyA9IGRlZmluZWRfZGVmYXVsdChwYXJhbWV0ZXJzLmN5bGluZGVyQmF0Y2hJZHMpID8gbmV3IFVpbnQxNkFycmF5KHBhcmFtZXRlcnMuY3lsaW5kZXJCYXRjaElkcykgOiB2b2lkIDA7CiAgICBjb25zdCBlbGxpcHNvaWRzID0gZGVmaW5lZF9kZWZhdWx0KHBhcmFtZXRlcnMuZWxsaXBzb2lkcykgPyBuZXcgRmxvYXQzMkFycmF5KHBhcmFtZXRlcnMuZWxsaXBzb2lkcykgOiB2b2lkIDA7CiAgICBjb25zdCBlbGxpcHNvaWRCYXRjaElkcyA9IGRlZmluZWRfZGVmYXVsdChwYXJhbWV0ZXJzLmVsbGlwc29pZEJhdGNoSWRzKSA/IG5ldyBVaW50MTZBcnJheShwYXJhbWV0ZXJzLmVsbGlwc29pZEJhdGNoSWRzKSA6IHZvaWQgMDsKICAgIGNvbnN0IHNwaGVyZXMgPSBkZWZpbmVkX2RlZmF1bHQocGFyYW1ldGVycy5zcGhlcmVzKSA/IG5ldyBGbG9hdDMyQXJyYXkocGFyYW1ldGVycy5zcGhlcmVzKSA6IHZvaWQgMDsKICAgIGNvbnN0IHNwaGVyZUJhdGNoSWRzID0gZGVmaW5lZF9kZWZhdWx0KHBhcmFtZXRlcnMuc3BoZXJlQmF0Y2hJZHMpID8gbmV3IFVpbnQxNkFycmF5KHBhcmFtZXRlcnMuc3BoZXJlQmF0Y2hJZHMpIDogdm9pZCAwOwogICAgY29uc3QgbnVtYmVyT2ZCb3hlcyA9IGRlZmluZWRfZGVmYXVsdChib3hlcykgPyBib3hCYXRjaElkcy5sZW5ndGggOiAwOwogICAgY29uc3QgbnVtYmVyT2ZDeWxpbmRlcnMgPSBkZWZpbmVkX2RlZmF1bHQoY3lsaW5kZXJzKSA/IGN5bGluZGVyQmF0Y2hJZHMubGVuZ3RoIDogMDsKICAgIGNvbnN0IG51bWJlck9mRWxsaXBzb2lkcyA9IGRlZmluZWRfZGVmYXVsdChlbGxpcHNvaWRzKSA/IGVsbGlwc29pZEJhdGNoSWRzLmxlbmd0aCA6IDA7CiAgICBjb25zdCBudW1iZXJPZlNwaGVyZXMgPSBkZWZpbmVkX2RlZmF1bHQoc3BoZXJlcykgPyBzcGhlcmVCYXRjaElkcy5sZW5ndGggOiAwOwogICAgY29uc3QgYm94R2VvbWV0cnkgPSBCb3hHZW9tZXRyeV9kZWZhdWx0LmdldFVuaXRCb3goKTsKICAgIGNvbnN0IGN5bGluZGVyR2VvbWV0cnkgPSBDeWxpbmRlckdlb21ldHJ5X2RlZmF1bHQuZ2V0VW5pdEN5bGluZGVyKCk7CiAgICBjb25zdCBlbGxpcHNvaWRHZW9tZXRyeSA9IEVsbGlwc29pZEdlb21ldHJ5X2RlZmF1bHQuZ2V0VW5pdEVsbGlwc29pZCgpOwogICAgY29uc3QgYm94UG9zaXRpb25zID0gYm94R2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXM7CiAgICBjb25zdCBjeWxpbmRlclBvc2l0aW9ucyA9IGN5bGluZGVyR2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXM7CiAgICBjb25zdCBlbGxpcHNvaWRQb3NpdGlvbnMgPSBlbGxpcHNvaWRHZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlczsKICAgIGxldCBudW1iZXJPZlBvc2l0aW9ucyA9IGJveFBvc2l0aW9ucy5sZW5ndGggKiBudW1iZXJPZkJveGVzOwogICAgbnVtYmVyT2ZQb3NpdGlvbnMgKz0gY3lsaW5kZXJQb3NpdGlvbnMubGVuZ3RoICogbnVtYmVyT2ZDeWxpbmRlcnM7CiAgICBudW1iZXJPZlBvc2l0aW9ucyArPSBlbGxpcHNvaWRQb3NpdGlvbnMubGVuZ3RoICogKG51bWJlck9mRWxsaXBzb2lkcyArIG51bWJlck9mU3BoZXJlcyk7CiAgICBjb25zdCBib3hJbmRpY2VzID0gYm94R2VvbWV0cnkuaW5kaWNlczsKICAgIGNvbnN0IGN5bGluZGVySW5kaWNlcyA9IGN5bGluZGVyR2VvbWV0cnkuaW5kaWNlczsKICAgIGNvbnN0IGVsbGlwc29pZEluZGljZXMgPSBlbGxpcHNvaWRHZW9tZXRyeS5pbmRpY2VzOwogICAgbGV0IG51bWJlck9mSW5kaWNlcyA9IGJveEluZGljZXMubGVuZ3RoICogbnVtYmVyT2ZCb3hlczsKICAgIG51bWJlck9mSW5kaWNlcyArPSBjeWxpbmRlckluZGljZXMubGVuZ3RoICogbnVtYmVyT2ZDeWxpbmRlcnM7CiAgICBudW1iZXJPZkluZGljZXMgKz0gZWxsaXBzb2lkSW5kaWNlcy5sZW5ndGggKiAobnVtYmVyT2ZFbGxpcHNvaWRzICsgbnVtYmVyT2ZTcGhlcmVzKTsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkobnVtYmVyT2ZQb3NpdGlvbnMpOwogICAgY29uc3QgdmVydGV4QmF0Y2hJZHMgPSBuZXcgVWludDE2QXJyYXkobnVtYmVyT2ZQb3NpdGlvbnMgLyAzKTsKICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgbnVtYmVyT2ZQb3NpdGlvbnMgLyAzLAogICAgICBudW1iZXJPZkluZGljZXMKICAgICk7CiAgICBjb25zdCBudW1iZXJPZkdlb21ldHJpZXMgPSBudW1iZXJPZkJveGVzICsgbnVtYmVyT2ZDeWxpbmRlcnMgKyBudW1iZXJPZkVsbGlwc29pZHMgKyBudW1iZXJPZlNwaGVyZXM7CiAgICBjb25zdCBiYXRjaElkcyA9IG5ldyBVaW50MTZBcnJheShudW1iZXJPZkdlb21ldHJpZXMpOwogICAgY29uc3QgYmF0Y2hlZEluZGljZXMgPSBuZXcgQXJyYXkobnVtYmVyT2ZHZW9tZXRyaWVzKTsKICAgIGNvbnN0IGluZGV4T2Zmc2V0cyA9IG5ldyBVaW50MzJBcnJheShudW1iZXJPZkdlb21ldHJpZXMpOwogICAgY29uc3QgaW5kZXhDb3VudHMgPSBuZXcgVWludDMyQXJyYXkobnVtYmVyT2ZHZW9tZXRyaWVzKTsKICAgIGNvbnN0IGJvdW5kaW5nVm9sdW1lcyA9IG5ldyBBcnJheShudW1iZXJPZkdlb21ldHJpZXMpOwogICAgdW5wYWNrQnVmZmVyKHBhcmFtZXRlcnMucGFja2VkQnVmZmVyKTsKICAgIGNvbnN0IG9wdGlvbnMgPSB7CiAgICAgIGJhdGNoVGFibGVDb2xvcnM6IG5ldyBVaW50MzJBcnJheShwYXJhbWV0ZXJzLmJhdGNoVGFibGVDb2xvcnMpLAogICAgICBwb3NpdGlvbnMsCiAgICAgIHZlcnRleEJhdGNoSWRzLAogICAgICBpbmRpY2VzLAogICAgICBiYXRjaElkcywKICAgICAgYmF0Y2hlZEluZGljZXMsCiAgICAgIGluZGV4T2Zmc2V0cywKICAgICAgaW5kZXhDb3VudHMsCiAgICAgIGJvdW5kaW5nVm9sdW1lcywKICAgICAgcG9zaXRpb25PZmZzZXQ6IDAsCiAgICAgIGJhdGNoSWRJbmRleDogMCwKICAgICAgaW5kZXhPZmZzZXQ6IDAsCiAgICAgIGJhdGNoZWRJbmRpY2VzT2Zmc2V0OiAwLAogICAgICBtb2RlbE1hdHJpeDogc2NyYXRjaE1hdHJpeDQsCiAgICAgIGNlbnRlcjogc2NyYXRjaENlbnRlcjUKICAgIH07CiAgICBjcmVhdGVQcmltaXRpdmUoCiAgICAgIG9wdGlvbnMsCiAgICAgIGJveGVzLAogICAgICBib3hCYXRjaElkcywKICAgICAgYm94R2VvbWV0cnksCiAgICAgIGJveE1vZGVsTWF0cml4QW5kQm91bmRpbmdWb2x1bWUKICAgICk7CiAgICBjcmVhdGVQcmltaXRpdmUoCiAgICAgIG9wdGlvbnMsCiAgICAgIGN5bGluZGVycywKICAgICAgY3lsaW5kZXJCYXRjaElkcywKICAgICAgY3lsaW5kZXJHZW9tZXRyeSwKICAgICAgY3lsaW5kZXJNb2RlbE1hdHJpeEFuZEJvdW5kaW5nVm9sdW1lCiAgICApOwogICAgY3JlYXRlUHJpbWl0aXZlKAogICAgICBvcHRpb25zLAogICAgICBlbGxpcHNvaWRzLAogICAgICBlbGxpcHNvaWRCYXRjaElkcywKICAgICAgZWxsaXBzb2lkR2VvbWV0cnksCiAgICAgIGVsbGlwc29pZE1vZGVsTWF0cml4QW5kQm91bmRpbmdWb2x1bWUKICAgICk7CiAgICBjcmVhdGVQcmltaXRpdmUoCiAgICAgIG9wdGlvbnMsCiAgICAgIHNwaGVyZXMsCiAgICAgIHNwaGVyZUJhdGNoSWRzLAogICAgICBlbGxpcHNvaWRHZW9tZXRyeSwKICAgICAgc3BoZXJlTW9kZWxNYXRyaXhBbmRCb3VuZGluZ1ZvbHVtZQogICAgKTsKICAgIGNvbnN0IHBhY2tlZEJ1ZmZlciA9IHBhY2tCdWZmZXIoCiAgICAgIGluZGljZXMuQllURVNfUEVSX0VMRU1FTlQsCiAgICAgIGJhdGNoZWRJbmRpY2VzLAogICAgICBib3VuZGluZ1ZvbHVtZXMKICAgICk7CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goCiAgICAgIHBvc2l0aW9ucy5idWZmZXIsCiAgICAgIHZlcnRleEJhdGNoSWRzLmJ1ZmZlciwKICAgICAgaW5kaWNlcy5idWZmZXIKICAgICk7CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goCiAgICAgIGJhdGNoSWRzLmJ1ZmZlciwKICAgICAgaW5kZXhPZmZzZXRzLmJ1ZmZlciwKICAgICAgaW5kZXhDb3VudHMuYnVmZmVyCiAgICApOwogICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKHBhY2tlZEJ1ZmZlci5idWZmZXIpOwogICAgcmV0dXJuIHsKICAgICAgcG9zaXRpb25zOiBwb3NpdGlvbnMuYnVmZmVyLAogICAgICB2ZXJ0ZXhCYXRjaElkczogdmVydGV4QmF0Y2hJZHMuYnVmZmVyLAogICAgICBpbmRpY2VzOiBpbmRpY2VzLmJ1ZmZlciwKICAgICAgaW5kZXhPZmZzZXRzOiBpbmRleE9mZnNldHMuYnVmZmVyLAogICAgICBpbmRleENvdW50czogaW5kZXhDb3VudHMuYnVmZmVyLAogICAgICBiYXRjaElkczogYmF0Y2hJZHMuYnVmZmVyLAogICAgICBwYWNrZWRCdWZmZXI6IHBhY2tlZEJ1ZmZlci5idWZmZXIKICAgIH07CiAgfQogIHZhciBzY3JhdGNoQ2FydGVzaWFuMTEsIHBhY2tlZEJveExlbmd0aCwgcGFja2VkQ3lsaW5kZXJMZW5ndGgsIHBhY2tlZEVsbGlwc29pZExlbmd0aCwgcGFja2VkU3BoZXJlTGVuZ3RoLCBzY3JhdGNoTW9kZWxNYXRyaXhBbmRCViwgc2NyYXRjaFBvc2l0aW9uNSwgc2NyYXRjaENlbnRlcjUsIHNjcmF0Y2hNYXRyaXg0LCBjcmVhdGVWZWN0b3JUaWxlR2VvbWV0cmllc19kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVZlY3RvclRpbGVHZW9tZXRyaWVzID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVWZWN0b3JUaWxlR2VvbWV0cmllcy5qcyIoKSB7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9Cb3hHZW9tZXRyeSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9Db2xvcigpOwogICAgICBpbml0X0N5bGluZGVyR2VvbWV0cnkoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkR2VvbWV0cnkoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0cml4NCgpOwogICAgICBpbml0X1ZlY3RvcjNEVGlsZUJhdGNoKCk7CiAgICAgIGluaXRfY3JlYXRlVGFza1Byb2Nlc3NvcldvcmtlcigpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuMTEgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHBhY2tlZEJveExlbmd0aCA9IE1hdHJpeDRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICBwYWNrZWRDeWxpbmRlckxlbmd0aCA9IE1hdHJpeDRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyAyOwogICAgICBwYWNrZWRFbGxpcHNvaWRMZW5ndGggPSBNYXRyaXg0X2RlZmF1bHQucGFja2VkTGVuZ3RoICsgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgcGFja2VkU3BoZXJlTGVuZ3RoID0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCArIDE7CiAgICAgIHNjcmF0Y2hNb2RlbE1hdHJpeEFuZEJWID0gewogICAgICAgIG1vZGVsTWF0cml4OiBuZXcgTWF0cml4NF9kZWZhdWx0KCksCiAgICAgICAgYm91bmRpbmdWb2x1bWU6IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KCkKICAgICAgfTsKICAgICAgc2NyYXRjaFBvc2l0aW9uNSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENlbnRlcjUgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hNYXRyaXg0ID0gbmV3IE1hdHJpeDRfZGVmYXVsdCgpOwogICAgICBjcmVhdGVWZWN0b3JUaWxlR2VvbWV0cmllc19kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0KGNyZWF0ZVZlY3RvclRpbGVHZW9tZXRyaWVzKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVZlY3RvclRpbGVQb2ludHMuanMKICB2YXIgY3JlYXRlVmVjdG9yVGlsZVBvaW50c19leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlVmVjdG9yVGlsZVBvaW50c19leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVWZWN0b3JUaWxlUG9pbnRzX2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiB1bnBhY2tCdWZmZXIyKHBhY2tlZEJ1ZmZlcikgewogICAgcGFja2VkQnVmZmVyID0gbmV3IEZsb2F0NjRBcnJheShwYWNrZWRCdWZmZXIpOwogICAgbGV0IG9mZnNldCA9IDA7CiAgICBzY3JhdGNoTWluTWF4SGVpZ2h0cy5taW4gPSBwYWNrZWRCdWZmZXJbb2Zmc2V0KytdOwogICAgc2NyYXRjaE1pbk1heEhlaWdodHMubWF4ID0gcGFja2VkQnVmZmVyW29mZnNldCsrXTsKICAgIFJlY3RhbmdsZV9kZWZhdWx0LnVucGFjayhwYWNrZWRCdWZmZXIsIG9mZnNldCwgc2NyYXRjaFJlY3RhbmdsZTQpOwogICAgb2Zmc2V0ICs9IFJlY3RhbmdsZV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgIEVsbGlwc29pZF9kZWZhdWx0LnVucGFjayhwYWNrZWRCdWZmZXIsIG9mZnNldCwgc2NyYXRjaEVsbGlwc29pZDE0KTsKICB9CiAgZnVuY3Rpb24gY3JlYXRlVmVjdG9yVGlsZVBvaW50cyhwYXJhbWV0ZXJzLCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgVWludDE2QXJyYXkocGFyYW1ldGVycy5wb3NpdGlvbnMpOwogICAgdW5wYWNrQnVmZmVyMihwYXJhbWV0ZXJzLnBhY2tlZEJ1ZmZlcik7CiAgICBjb25zdCByZWN0YW5nbGUgPSBzY3JhdGNoUmVjdGFuZ2xlNDsKICAgIGNvbnN0IGVsbGlwc29pZCA9IHNjcmF0Y2hFbGxpcHNvaWQxNDsKICAgIGNvbnN0IG1pbmltdW1IZWlnaHQgPSBzY3JhdGNoTWluTWF4SGVpZ2h0cy5taW47CiAgICBjb25zdCBtYXhpbXVtSGVpZ2h0ID0gc2NyYXRjaE1pbk1heEhlaWdodHMubWF4OwogICAgY29uc3QgcG9zaXRpb25zTGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICBjb25zdCB1QnVmZmVyID0gcG9zaXRpb25zLnN1YmFycmF5KDAsIHBvc2l0aW9uc0xlbmd0aCk7CiAgICBjb25zdCB2QnVmZmVyID0gcG9zaXRpb25zLnN1YmFycmF5KHBvc2l0aW9uc0xlbmd0aCwgMiAqIHBvc2l0aW9uc0xlbmd0aCk7CiAgICBjb25zdCBoZWlnaHRCdWZmZXIgPSBwb3NpdGlvbnMuc3ViYXJyYXkoCiAgICAgIDIgKiBwb3NpdGlvbnNMZW5ndGgsCiAgICAgIDMgKiBwb3NpdGlvbnNMZW5ndGgKICAgICk7CiAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbl9kZWZhdWx0LnppZ1phZ0RlbHRhRGVjb2RlKHVCdWZmZXIsIHZCdWZmZXIsIGhlaWdodEJ1ZmZlcik7CiAgICBjb25zdCBkZWNvZGVkID0gbmV3IEZsb2F0NjRBcnJheShwb3NpdGlvbnMubGVuZ3RoKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zTGVuZ3RoOyArK2kpIHsKICAgICAgY29uc3QgdTMgPSB1QnVmZmVyW2ldOwogICAgICBjb25zdCB2MyA9IHZCdWZmZXJbaV07CiAgICAgIGNvbnN0IGggPSBoZWlnaHRCdWZmZXJbaV07CiAgICAgIGNvbnN0IGxvbiA9IE1hdGhfZGVmYXVsdC5sZXJwKHJlY3RhbmdsZS53ZXN0LCByZWN0YW5nbGUuZWFzdCwgdTMgLyBtYXhTaG9ydCk7CiAgICAgIGNvbnN0IGxhdCA9IE1hdGhfZGVmYXVsdC5sZXJwKHJlY3RhbmdsZS5zb3V0aCwgcmVjdGFuZ2xlLm5vcnRoLCB2MyAvIG1heFNob3J0KTsKICAgICAgY29uc3QgYWx0ID0gTWF0aF9kZWZhdWx0LmxlcnAobWluaW11bUhlaWdodCwgbWF4aW11bUhlaWdodCwgaCAvIG1heFNob3J0KTsKICAgICAgY29uc3QgY2FydG9ncmFwaGljMiA9IENhcnRvZ3JhcGhpY19kZWZhdWx0LmZyb21SYWRpYW5zKAogICAgICAgIGxvbiwKICAgICAgICBsYXQsCiAgICAgICAgYWx0LAogICAgICAgIHNjcmF0Y2hCVkNhcnRvZ3JhcGhpYzIKICAgICAgKTsKICAgICAgY29uc3QgZGVjb2RlZFBvc2l0aW9uID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKAogICAgICAgIGNhcnRvZ3JhcGhpYzIsCiAgICAgICAgc2NyYXRjaEVuY29kZWRQb3NpdGlvbjIKICAgICAgKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soZGVjb2RlZFBvc2l0aW9uLCBkZWNvZGVkLCBpICogMyk7CiAgICB9CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goZGVjb2RlZC5idWZmZXIpOwogICAgcmV0dXJuIHsKICAgICAgcG9zaXRpb25zOiBkZWNvZGVkLmJ1ZmZlcgogICAgfTsKICB9CiAgdmFyIG1heFNob3J0LCBzY3JhdGNoQlZDYXJ0b2dyYXBoaWMyLCBzY3JhdGNoRW5jb2RlZFBvc2l0aW9uMiwgc2NyYXRjaFJlY3RhbmdsZTQsIHNjcmF0Y2hFbGxpcHNvaWQxNCwgc2NyYXRjaE1pbk1heEhlaWdodHMsIGNyZWF0ZVZlY3RvclRpbGVQb2ludHNfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVWZWN0b3JUaWxlUG9pbnRzID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVWZWN0b3JUaWxlUG9pbnRzLmpzIigpIHsKICAgICAgaW5pdF9BdHRyaWJ1dGVDb21wcmVzc2lvbigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfY3JlYXRlVGFza1Byb2Nlc3NvcldvcmtlcigpOwogICAgICBtYXhTaG9ydCA9IDMyNzY3OwogICAgICBzY3JhdGNoQlZDYXJ0b2dyYXBoaWMyID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hFbmNvZGVkUG9zaXRpb24yID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUmVjdGFuZ2xlNCA9IG5ldyBSZWN0YW5nbGVfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoRWxsaXBzb2lkMTQgPSBuZXcgRWxsaXBzb2lkX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE1pbk1heEhlaWdodHMgPSB7CiAgICAgICAgbWluOiB2b2lkIDAsCiAgICAgICAgbWF4OiB2b2lkIDAKICAgICAgfTsKICAgICAgY3JlYXRlVmVjdG9yVGlsZVBvaW50c19kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0KGNyZWF0ZVZlY3RvclRpbGVQb2ludHMpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlVmVjdG9yVGlsZVBvbHlnb25zLmpzCiAgdmFyIGNyZWF0ZVZlY3RvclRpbGVQb2x5Z29uc19leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlVmVjdG9yVGlsZVBvbHlnb25zX2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVZlY3RvclRpbGVQb2x5Z29uc19kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gdW5wYWNrQnVmZmVyMyhidWZmZXIpIHsKICAgIGNvbnN0IHBhY2tlZEJ1ZmZlciA9IG5ldyBGbG9hdDY0QXJyYXkoYnVmZmVyKTsKICAgIGxldCBvZmZzZXQgPSAwOwogICAgc2NyYXRjaFNjYWxhcnMuaW5kZXhCeXRlc1BlckVsZW1lbnQgPSBwYWNrZWRCdWZmZXJbb2Zmc2V0KytdOwogICAgc2NyYXRjaFNjYWxhcnMubWluID0gcGFja2VkQnVmZmVyW29mZnNldCsrXTsKICAgIHNjcmF0Y2hTY2FsYXJzLm1heCA9IHBhY2tlZEJ1ZmZlcltvZmZzZXQrK107CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKHBhY2tlZEJ1ZmZlciwgb2Zmc2V0LCBzY3JhdGNoQ2VudGVyNik7CiAgICBvZmZzZXQgKz0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgIEVsbGlwc29pZF9kZWZhdWx0LnVucGFjayhwYWNrZWRCdWZmZXIsIG9mZnNldCwgc2NyYXRjaEVsbGlwc29pZDE1KTsKICAgIG9mZnNldCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICBSZWN0YW5nbGVfZGVmYXVsdC51bnBhY2socGFja2VkQnVmZmVyLCBvZmZzZXQsIHNjcmF0Y2hSZWN0YW5nbGU1KTsKICB9CiAgZnVuY3Rpb24gcGFja2VkQmF0Y2hlZEluZGljZXNMZW5ndGgyKGJhdGNoZWRJbmRpY2VzKSB7CiAgICBjb25zdCBsZW5ndGggPSBiYXRjaGVkSW5kaWNlcy5sZW5ndGg7CiAgICBsZXQgY291bnQgPSAwOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICBjb3VudCArPSBDb2xvcl9kZWZhdWx0LnBhY2tlZExlbmd0aCArIDMgKyBiYXRjaGVkSW5kaWNlc1tpXS5iYXRjaElkcy5sZW5ndGg7CiAgICB9CiAgICByZXR1cm4gY291bnQ7CiAgfQogIGZ1bmN0aW9uIHBhY2tCdWZmZXIyKGluZGV4RGF0YXR5cGUsIGJvdW5kaW5nVm9sdW1lcywgYmF0Y2hlZEluZGljZXMpIHsKICAgIGNvbnN0IG51bUJWcyA9IGJvdW5kaW5nVm9sdW1lcy5sZW5ndGg7CiAgICBjb25zdCBsZW5ndGggPSAxICsgMSArIG51bUJWcyAqIE9yaWVudGVkQm91bmRpbmdCb3hfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyAxICsgcGFja2VkQmF0Y2hlZEluZGljZXNMZW5ndGgyKGJhdGNoZWRJbmRpY2VzKTsKICAgIGNvbnN0IHBhY2tlZEJ1ZmZlciA9IG5ldyBGbG9hdDY0QXJyYXkobGVuZ3RoKTsKICAgIGxldCBvZmZzZXQgPSAwOwogICAgcGFja2VkQnVmZmVyW29mZnNldCsrXSA9IGluZGV4RGF0YXR5cGU7CiAgICBwYWNrZWRCdWZmZXJbb2Zmc2V0KytdID0gbnVtQlZzOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1CVnM7ICsraSkgewogICAgICBPcmllbnRlZEJvdW5kaW5nQm94X2RlZmF1bHQucGFjayhib3VuZGluZ1ZvbHVtZXNbaV0sIHBhY2tlZEJ1ZmZlciwgb2Zmc2V0KTsKICAgICAgb2Zmc2V0ICs9IE9yaWVudGVkQm91bmRpbmdCb3hfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICB9CiAgICBjb25zdCBpbmRpY2VzTGVuZ3RoID0gYmF0Y2hlZEluZGljZXMubGVuZ3RoOwogICAgcGFja2VkQnVmZmVyW29mZnNldCsrXSA9IGluZGljZXNMZW5ndGg7CiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGluZGljZXNMZW5ndGg7ICsraikgewogICAgICBjb25zdCBiYXRjaGVkSW5kZXggPSBiYXRjaGVkSW5kaWNlc1tqXTsKICAgICAgQ29sb3JfZGVmYXVsdC5wYWNrKGJhdGNoZWRJbmRleC5jb2xvciwgcGFja2VkQnVmZmVyLCBvZmZzZXQpOwogICAgICBvZmZzZXQgKz0gQ29sb3JfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgIHBhY2tlZEJ1ZmZlcltvZmZzZXQrK10gPSBiYXRjaGVkSW5kZXgub2Zmc2V0OwogICAgICBwYWNrZWRCdWZmZXJbb2Zmc2V0KytdID0gYmF0Y2hlZEluZGV4LmNvdW50OwogICAgICBjb25zdCBiYXRjaElkcyA9IGJhdGNoZWRJbmRleC5iYXRjaElkczsKICAgICAgY29uc3QgYmF0Y2hJZHNMZW5ndGggPSBiYXRjaElkcy5sZW5ndGg7CiAgICAgIHBhY2tlZEJ1ZmZlcltvZmZzZXQrK10gPSBiYXRjaElkc0xlbmd0aDsKICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBiYXRjaElkc0xlbmd0aDsgKytrKSB7CiAgICAgICAgcGFja2VkQnVmZmVyW29mZnNldCsrXSA9IGJhdGNoSWRzW2tdOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gcGFja2VkQnVmZmVyOwogIH0KICBmdW5jdGlvbiBjcmVhdGVWZWN0b3JUaWxlUG9seWdvbnMocGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cykgewogICAgdW5wYWNrQnVmZmVyMyhwYXJhbWV0ZXJzLnBhY2tlZEJ1ZmZlcik7CiAgICBsZXQgaW5kaWNlczsKICAgIGNvbnN0IGluZGV4Qnl0ZXNQZXJFbGVtZW50ID0gc2NyYXRjaFNjYWxhcnMuaW5kZXhCeXRlc1BlckVsZW1lbnQ7CiAgICBpZiAoaW5kZXhCeXRlc1BlckVsZW1lbnQgPT09IDIpIHsKICAgICAgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheShwYXJhbWV0ZXJzLmluZGljZXMpOwogICAgfSBlbHNlIHsKICAgICAgaW5kaWNlcyA9IG5ldyBVaW50MzJBcnJheShwYXJhbWV0ZXJzLmluZGljZXMpOwogICAgfQogICAgY29uc3QgcG9zaXRpb25zID0gbmV3IFVpbnQxNkFycmF5KHBhcmFtZXRlcnMucG9zaXRpb25zKTsKICAgIGNvbnN0IGNvdW50cyA9IG5ldyBVaW50MzJBcnJheShwYXJhbWV0ZXJzLmNvdW50cyk7CiAgICBjb25zdCBpbmRleENvdW50cyA9IG5ldyBVaW50MzJBcnJheShwYXJhbWV0ZXJzLmluZGV4Q291bnRzKTsKICAgIGNvbnN0IGJhdGNoSWRzID0gbmV3IFVpbnQzMkFycmF5KHBhcmFtZXRlcnMuYmF0Y2hJZHMpOwogICAgY29uc3QgYmF0Y2hUYWJsZUNvbG9ycyA9IG5ldyBVaW50MzJBcnJheShwYXJhbWV0ZXJzLmJhdGNoVGFibGVDb2xvcnMpOwogICAgY29uc3QgYm91bmRpbmdWb2x1bWVzID0gbmV3IEFycmF5KGNvdW50cy5sZW5ndGgpOwogICAgY29uc3QgY2VudGVyID0gc2NyYXRjaENlbnRlcjY7CiAgICBjb25zdCBlbGxpcHNvaWQgPSBzY3JhdGNoRWxsaXBzb2lkMTU7CiAgICBsZXQgcmVjdGFuZ2xlID0gc2NyYXRjaFJlY3RhbmdsZTU7CiAgICBjb25zdCBtaW5IZWlnaHQgPSBzY3JhdGNoU2NhbGFycy5taW47CiAgICBjb25zdCBtYXhIZWlnaHQgPSBzY3JhdGNoU2NhbGFycy5tYXg7CiAgICBsZXQgbWluaW11bUhlaWdodHMgPSBwYXJhbWV0ZXJzLm1pbmltdW1IZWlnaHRzOwogICAgbGV0IG1heGltdW1IZWlnaHRzID0gcGFyYW1ldGVycy5tYXhpbXVtSGVpZ2h0czsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWluaW11bUhlaWdodHMpICYmIGRlZmluZWRfZGVmYXVsdChtYXhpbXVtSGVpZ2h0cykpIHsKICAgICAgbWluaW11bUhlaWdodHMgPSBuZXcgRmxvYXQzMkFycmF5KG1pbmltdW1IZWlnaHRzKTsKICAgICAgbWF4aW11bUhlaWdodHMgPSBuZXcgRmxvYXQzMkFycmF5KG1heGltdW1IZWlnaHRzKTsKICAgIH0KICAgIGxldCBpOwogICAgbGV0IGo7CiAgICBsZXQgcmdiYTsKICAgIGNvbnN0IHBvc2l0aW9uc0xlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGggLyAyOwogICAgY29uc3QgdUJ1ZmZlciA9IHBvc2l0aW9ucy5zdWJhcnJheSgwLCBwb3NpdGlvbnNMZW5ndGgpOwogICAgY29uc3QgdkJ1ZmZlciA9IHBvc2l0aW9ucy5zdWJhcnJheShwb3NpdGlvbnNMZW5ndGgsIDIgKiBwb3NpdGlvbnNMZW5ndGgpOwogICAgQXR0cmlidXRlQ29tcHJlc3Npb25fZGVmYXVsdC56aWdaYWdEZWx0YURlY29kZSh1QnVmZmVyLCB2QnVmZmVyKTsKICAgIGNvbnN0IGRlY29kZWRQb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KHBvc2l0aW9uc0xlbmd0aCAqIDMpOwogICAgZm9yIChpID0gMDsgaSA8IHBvc2l0aW9uc0xlbmd0aDsgKytpKSB7CiAgICAgIGNvbnN0IHUzID0gdUJ1ZmZlcltpXTsKICAgICAgY29uc3QgdjMgPSB2QnVmZmVyW2ldOwogICAgICBjb25zdCB4ID0gTWF0aF9kZWZhdWx0LmxlcnAocmVjdGFuZ2xlLndlc3QsIHJlY3RhbmdsZS5lYXN0LCB1MyAvIG1heFNob3J0Mik7CiAgICAgIGNvbnN0IHkgPSBNYXRoX2RlZmF1bHQubGVycChyZWN0YW5nbGUuc291dGgsIHJlY3RhbmdsZS5ub3J0aCwgdjMgLyBtYXhTaG9ydDIpOwogICAgICBjb25zdCBjYXJ0ID0gQ2FydG9ncmFwaGljX2RlZmF1bHQuZnJvbVJhZGlhbnMoeCwgeSwgMCwgc2NyYXRjaEJWQ2FydG9ncmFwaGljMyk7CiAgICAgIGNvbnN0IGRlY29kZWRQb3NpdGlvbiA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbigKICAgICAgICBjYXJ0LAogICAgICAgIHNjcmF0Y2hFbmNvZGVkUG9zaXRpb24zCiAgICAgICk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGRlY29kZWRQb3NpdGlvbiwgZGVjb2RlZFBvc2l0aW9ucywgaSAqIDMpOwogICAgfQogICAgY29uc3QgY291bnRzTGVuZ3RoID0gY291bnRzLmxlbmd0aDsKICAgIGNvbnN0IG9mZnNldHMgPSBuZXcgQXJyYXkoY291bnRzTGVuZ3RoKTsKICAgIGNvbnN0IGluZGV4T2Zmc2V0cyA9IG5ldyBBcnJheShjb3VudHNMZW5ndGgpOwogICAgbGV0IGN1cnJlbnRPZmZzZXQgPSAwOwogICAgbGV0IGN1cnJlbnRJbmRleE9mZnNldCA9IDA7CiAgICBmb3IgKGkgPSAwOyBpIDwgY291bnRzTGVuZ3RoOyArK2kpIHsKICAgICAgb2Zmc2V0c1tpXSA9IGN1cnJlbnRPZmZzZXQ7CiAgICAgIGluZGV4T2Zmc2V0c1tpXSA9IGN1cnJlbnRJbmRleE9mZnNldDsKICAgICAgY3VycmVudE9mZnNldCArPSBjb3VudHNbaV07CiAgICAgIGN1cnJlbnRJbmRleE9mZnNldCArPSBpbmRleENvdW50c1tpXTsKICAgIH0KICAgIGNvbnN0IGJhdGNoZWRQb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KHBvc2l0aW9uc0xlbmd0aCAqIDMgKiAyKTsKICAgIGNvbnN0IGJhdGNoZWRJZHMgPSBuZXcgVWludDE2QXJyYXkocG9zaXRpb25zTGVuZ3RoICogMik7CiAgICBjb25zdCBiYXRjaGVkSW5kZXhPZmZzZXRzID0gbmV3IFVpbnQzMkFycmF5KGluZGV4T2Zmc2V0cy5sZW5ndGgpOwogICAgY29uc3QgYmF0Y2hlZEluZGV4Q291bnRzID0gbmV3IFVpbnQzMkFycmF5KGluZGV4Q291bnRzLmxlbmd0aCk7CiAgICBsZXQgYmF0Y2hlZEluZGljZXMgPSBbXTsKICAgIGNvbnN0IGNvbG9yVG9CdWZmZXJzID0ge307CiAgICBmb3IgKGkgPSAwOyBpIDwgY291bnRzTGVuZ3RoOyArK2kpIHsKICAgICAgcmdiYSA9IGJhdGNoVGFibGVDb2xvcnNbaV07CiAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNvbG9yVG9CdWZmZXJzW3JnYmFdKSkgewogICAgICAgIGNvbG9yVG9CdWZmZXJzW3JnYmFdID0gewogICAgICAgICAgcG9zaXRpb25MZW5ndGg6IGNvdW50c1tpXSwKICAgICAgICAgIGluZGV4TGVuZ3RoOiBpbmRleENvdW50c1tpXSwKICAgICAgICAgIG9mZnNldDogMCwKICAgICAgICAgIGluZGV4T2Zmc2V0OiAwLAogICAgICAgICAgYmF0Y2hJZHM6IFtpXQogICAgICAgIH07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29sb3JUb0J1ZmZlcnNbcmdiYV0ucG9zaXRpb25MZW5ndGggKz0gY291bnRzW2ldOwogICAgICAgIGNvbG9yVG9CdWZmZXJzW3JnYmFdLmluZGV4TGVuZ3RoICs9IGluZGV4Q291bnRzW2ldOwogICAgICAgIGNvbG9yVG9CdWZmZXJzW3JnYmFdLmJhdGNoSWRzLnB1c2goaSk7CiAgICAgIH0KICAgIH0KICAgIGxldCBidWZmZXI7CiAgICBsZXQgYnlDb2xvclBvc2l0aW9uT2Zmc2V0ID0gMDsKICAgIGxldCBieUNvbG9ySW5kZXhPZmZzZXQgPSAwOwogICAgZm9yIChyZ2JhIGluIGNvbG9yVG9CdWZmZXJzKSB7CiAgICAgIGlmIChjb2xvclRvQnVmZmVycy5oYXNPd25Qcm9wZXJ0eShyZ2JhKSkgewogICAgICAgIGJ1ZmZlciA9IGNvbG9yVG9CdWZmZXJzW3JnYmFdOwogICAgICAgIGJ1ZmZlci5vZmZzZXQgPSBieUNvbG9yUG9zaXRpb25PZmZzZXQ7CiAgICAgICAgYnVmZmVyLmluZGV4T2Zmc2V0ID0gYnlDb2xvckluZGV4T2Zmc2V0OwogICAgICAgIGNvbnN0IHBvc2l0aW9uTGVuZ3RoID0gYnVmZmVyLnBvc2l0aW9uTGVuZ3RoICogMjsKICAgICAgICBjb25zdCBpbmRleExlbmd0aCA9IGJ1ZmZlci5pbmRleExlbmd0aCAqIDIgKyBidWZmZXIucG9zaXRpb25MZW5ndGggKiA2OwogICAgICAgIGJ5Q29sb3JQb3NpdGlvbk9mZnNldCArPSBwb3NpdGlvbkxlbmd0aDsKICAgICAgICBieUNvbG9ySW5kZXhPZmZzZXQgKz0gaW5kZXhMZW5ndGg7CiAgICAgICAgYnVmZmVyLmluZGV4TGVuZ3RoID0gaW5kZXhMZW5ndGg7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IGJhdGNoZWREcmF3Q2FsbHMgPSBbXTsKICAgIGZvciAocmdiYSBpbiBjb2xvclRvQnVmZmVycykgewogICAgICBpZiAoY29sb3JUb0J1ZmZlcnMuaGFzT3duUHJvcGVydHkocmdiYSkpIHsKICAgICAgICBidWZmZXIgPSBjb2xvclRvQnVmZmVyc1tyZ2JhXTsKICAgICAgICBiYXRjaGVkRHJhd0NhbGxzLnB1c2goewogICAgICAgICAgY29sb3I6IENvbG9yX2RlZmF1bHQuZnJvbVJnYmEocGFyc2VJbnQocmdiYSkpLAogICAgICAgICAgb2Zmc2V0OiBidWZmZXIuaW5kZXhPZmZzZXQsCiAgICAgICAgICBjb3VudDogYnVmZmVyLmluZGV4TGVuZ3RoLAogICAgICAgICAgYmF0Y2hJZHM6IGJ1ZmZlci5iYXRjaElkcwogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgICBmb3IgKGkgPSAwOyBpIDwgY291bnRzTGVuZ3RoOyArK2kpIHsKICAgICAgcmdiYSA9IGJhdGNoVGFibGVDb2xvcnNbaV07CiAgICAgIGJ1ZmZlciA9IGNvbG9yVG9CdWZmZXJzW3JnYmFdOwogICAgICBjb25zdCBwb3NpdGlvbk9mZnNldCA9IGJ1ZmZlci5vZmZzZXQ7CiAgICAgIGxldCBwb3NpdGlvbkluZGV4ID0gcG9zaXRpb25PZmZzZXQgKiAzOwogICAgICBsZXQgYmF0Y2hJZEluZGV4ID0gcG9zaXRpb25PZmZzZXQ7CiAgICAgIGNvbnN0IHBvbHlnb25PZmZzZXQgPSBvZmZzZXRzW2ldOwogICAgICBjb25zdCBwb2x5Z29uQ291bnQgPSBjb3VudHNbaV07CiAgICAgIGNvbnN0IGJhdGNoSWQgPSBiYXRjaElkc1tpXTsKICAgICAgbGV0IHBvbHlnb25NaW5pbXVtSGVpZ2h0ID0gbWluSGVpZ2h0OwogICAgICBsZXQgcG9seWdvbk1heGltdW1IZWlnaHQgPSBtYXhIZWlnaHQ7CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWluaW11bUhlaWdodHMpICYmIGRlZmluZWRfZGVmYXVsdChtYXhpbXVtSGVpZ2h0cykpIHsKICAgICAgICBwb2x5Z29uTWluaW11bUhlaWdodCA9IG1pbmltdW1IZWlnaHRzW2ldOwogICAgICAgIHBvbHlnb25NYXhpbXVtSGVpZ2h0ID0gbWF4aW11bUhlaWdodHNbaV07CiAgICAgIH0KICAgICAgbGV0IG1pbkxhdCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgICAgbGV0IG1heExhdCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgICAgbGV0IG1pbkxvbiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgICAgbGV0IG1heExvbiA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgICAgZm9yIChqID0gMDsgaiA8IHBvbHlnb25Db3VudDsgKytqKSB7CiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgZGVjb2RlZFBvc2l0aW9ucywKICAgICAgICAgIHBvbHlnb25PZmZzZXQgKiAzICsgaiAqIDMsCiAgICAgICAgICBzY3JhdGNoRW5jb2RlZFBvc2l0aW9uMwogICAgICAgICk7CiAgICAgICAgZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2UocG9zaXRpb24sIHBvc2l0aW9uKTsKICAgICAgICBjb25zdCBjYXJ0byA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYygKICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgc2NyYXRjaEJWQ2FydG9ncmFwaGljMwogICAgICAgICk7CiAgICAgICAgY29uc3QgbGF0ID0gY2FydG8ubGF0aXR1ZGU7CiAgICAgICAgY29uc3QgbG9uID0gY2FydG8ubG9uZ2l0dWRlOwogICAgICAgIG1pbkxhdCA9IE1hdGgubWluKGxhdCwgbWluTGF0KTsKICAgICAgICBtYXhMYXQgPSBNYXRoLm1heChsYXQsIG1heExhdCk7CiAgICAgICAgbWluTG9uID0gTWF0aC5taW4obG9uLCBtaW5Mb24pOwogICAgICAgIG1heExvbiA9IE1hdGgubWF4KGxvbiwgbWF4TG9uKTsKICAgICAgICBjb25zdCBub3JtYWwyID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwb3NpdGlvbiwgc2NyYXRjaE5vcm1hbDcpOwogICAgICAgIGxldCBzY2FsZWROb3JtYWwgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgIG5vcm1hbDIsCiAgICAgICAgICBwb2x5Z29uTWluaW11bUhlaWdodCwKICAgICAgICAgIHNjcmF0Y2hTY2FsZWROb3JtYWwKICAgICAgICApOwogICAgICAgIGNvbnN0IG1pbkhlaWdodFBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZCgKICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgc2NhbGVkTm9ybWFsLAogICAgICAgICAgc2NyYXRjaE1pbkhlaWdodFBvc2l0aW9uCiAgICAgICAgKTsKICAgICAgICBzY2FsZWROb3JtYWwgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgIG5vcm1hbDIsCiAgICAgICAgICBwb2x5Z29uTWF4aW11bUhlaWdodCwKICAgICAgICAgIHNjYWxlZE5vcm1hbAogICAgICAgICk7CiAgICAgICAgY29uc3QgbWF4SGVpZ2h0UG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICBzY2FsZWROb3JtYWwsCiAgICAgICAgICBzY3JhdGNoTWF4SGVpZ2h0UG9zaXRpb24KICAgICAgICApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChtYXhIZWlnaHRQb3NpdGlvbiwgY2VudGVyLCBtYXhIZWlnaHRQb3NpdGlvbik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KG1pbkhlaWdodFBvc2l0aW9uLCBjZW50ZXIsIG1pbkhlaWdodFBvc2l0aW9uKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhtYXhIZWlnaHRQb3NpdGlvbiwgYmF0Y2hlZFBvc2l0aW9ucywgcG9zaXRpb25JbmRleCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2sobWluSGVpZ2h0UG9zaXRpb24sIGJhdGNoZWRQb3NpdGlvbnMsIHBvc2l0aW9uSW5kZXggKyAzKTsKICAgICAgICBiYXRjaGVkSWRzW2JhdGNoSWRJbmRleF0gPSBiYXRjaElkOwogICAgICAgIGJhdGNoZWRJZHNbYmF0Y2hJZEluZGV4ICsgMV0gPSBiYXRjaElkOwogICAgICAgIHBvc2l0aW9uSW5kZXggKz0gNjsKICAgICAgICBiYXRjaElkSW5kZXggKz0gMjsKICAgICAgfQogICAgICByZWN0YW5nbGUgPSBzY3JhdGNoQlZSZWN0YW5nbGU7CiAgICAgIHJlY3RhbmdsZS53ZXN0ID0gbWluTG9uOwogICAgICByZWN0YW5nbGUuZWFzdCA9IG1heExvbjsKICAgICAgcmVjdGFuZ2xlLnNvdXRoID0gbWluTGF0OwogICAgICByZWN0YW5nbGUubm9ydGggPSBtYXhMYXQ7CiAgICAgIGJvdW5kaW5nVm9sdW1lc1tpXSA9IE9yaWVudGVkQm91bmRpbmdCb3hfZGVmYXVsdC5mcm9tUmVjdGFuZ2xlKAogICAgICAgIHJlY3RhbmdsZSwKICAgICAgICBtaW5IZWlnaHQsCiAgICAgICAgbWF4SGVpZ2h0LAogICAgICAgIGVsbGlwc29pZAogICAgICApOwogICAgICBsZXQgaW5kaWNlc0luZGV4ID0gYnVmZmVyLmluZGV4T2Zmc2V0OwogICAgICBjb25zdCBpbmRleE9mZnNldCA9IGluZGV4T2Zmc2V0c1tpXTsKICAgICAgY29uc3QgaW5kZXhDb3VudCA9IGluZGV4Q291bnRzW2ldOwogICAgICBiYXRjaGVkSW5kZXhPZmZzZXRzW2ldID0gaW5kaWNlc0luZGV4OwogICAgICBmb3IgKGogPSAwOyBqIDwgaW5kZXhDb3VudDsgaiArPSAzKSB7CiAgICAgICAgY29uc3QgaTAgPSBpbmRpY2VzW2luZGV4T2Zmc2V0ICsgal0gLSBwb2x5Z29uT2Zmc2V0OwogICAgICAgIGNvbnN0IGkxID0gaW5kaWNlc1tpbmRleE9mZnNldCArIGogKyAxXSAtIHBvbHlnb25PZmZzZXQ7CiAgICAgICAgY29uc3QgaTIgPSBpbmRpY2VzW2luZGV4T2Zmc2V0ICsgaiArIDJdIC0gcG9seWdvbk9mZnNldDsKICAgICAgICBiYXRjaGVkSW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpMCAqIDIgKyBwb3NpdGlvbk9mZnNldDsKICAgICAgICBiYXRjaGVkSW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpMSAqIDIgKyBwb3NpdGlvbk9mZnNldDsKICAgICAgICBiYXRjaGVkSW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpMiAqIDIgKyBwb3NpdGlvbk9mZnNldDsKICAgICAgICBiYXRjaGVkSW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpMiAqIDIgKyAxICsgcG9zaXRpb25PZmZzZXQ7CiAgICAgICAgYmF0Y2hlZEluZGljZXNbaW5kaWNlc0luZGV4KytdID0gaTEgKiAyICsgMSArIHBvc2l0aW9uT2Zmc2V0OwogICAgICAgIGJhdGNoZWRJbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGkwICogMiArIDEgKyBwb3NpdGlvbk9mZnNldDsKICAgICAgfQogICAgICBmb3IgKGogPSAwOyBqIDwgcG9seWdvbkNvdW50OyArK2opIHsKICAgICAgICBjb25zdCB2MDIgPSBqOwogICAgICAgIGNvbnN0IHYxMiA9IChqICsgMSkgJSBwb2x5Z29uQ291bnQ7CiAgICAgICAgYmF0Y2hlZEluZGljZXNbaW5kaWNlc0luZGV4KytdID0gdjAyICogMiArIDEgKyBwb3NpdGlvbk9mZnNldDsKICAgICAgICBiYXRjaGVkSW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSB2MTIgKiAyICsgcG9zaXRpb25PZmZzZXQ7CiAgICAgICAgYmF0Y2hlZEluZGljZXNbaW5kaWNlc0luZGV4KytdID0gdjAyICogMiArIHBvc2l0aW9uT2Zmc2V0OwogICAgICAgIGJhdGNoZWRJbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHYwMiAqIDIgKyAxICsgcG9zaXRpb25PZmZzZXQ7CiAgICAgICAgYmF0Y2hlZEluZGljZXNbaW5kaWNlc0luZGV4KytdID0gdjEyICogMiArIDEgKyBwb3NpdGlvbk9mZnNldDsKICAgICAgICBiYXRjaGVkSW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSB2MTIgKiAyICsgcG9zaXRpb25PZmZzZXQ7CiAgICAgIH0KICAgICAgYnVmZmVyLm9mZnNldCArPSBwb2x5Z29uQ291bnQgKiAyOwogICAgICBidWZmZXIuaW5kZXhPZmZzZXQgPSBpbmRpY2VzSW5kZXg7CiAgICAgIGJhdGNoZWRJbmRleENvdW50c1tpXSA9IGluZGljZXNJbmRleCAtIGJhdGNoZWRJbmRleE9mZnNldHNbaV07CiAgICB9CiAgICBiYXRjaGVkSW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICBiYXRjaGVkUG9zaXRpb25zLmxlbmd0aCAvIDMsCiAgICAgIGJhdGNoZWRJbmRpY2VzCiAgICApOwogICAgY29uc3QgYmF0Y2hlZEluZGljZXNMZW5ndGggPSBiYXRjaGVkRHJhd0NhbGxzLmxlbmd0aDsKICAgIGZvciAobGV0IG0gPSAwOyBtIDwgYmF0Y2hlZEluZGljZXNMZW5ndGg7ICsrbSkgewogICAgICBjb25zdCB0ZW1wSWRzID0gYmF0Y2hlZERyYXdDYWxsc1ttXS5iYXRjaElkczsKICAgICAgbGV0IGNvdW50ID0gMDsKICAgICAgY29uc3QgdGVtcElkc0xlbmd0aCA9IHRlbXBJZHMubGVuZ3RoOwogICAgICBmb3IgKGxldCBuID0gMDsgbiA8IHRlbXBJZHNMZW5ndGg7ICsrbikgewogICAgICAgIGNvdW50ICs9IGJhdGNoZWRJbmRleENvdW50c1t0ZW1wSWRzW25dXTsKICAgICAgfQogICAgICBiYXRjaGVkRHJhd0NhbGxzW21dLmNvdW50ID0gY291bnQ7CiAgICB9CiAgICBjb25zdCBpbmRleERhdGF0eXBlID0gYmF0Y2hlZEluZGljZXMuQllURVNfUEVSX0VMRU1FTlQgPT09IDIgPyBJbmRleERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfU0hPUlQgOiBJbmRleERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfSU5UOwogICAgY29uc3QgcGFja2VkQnVmZmVyID0gcGFja0J1ZmZlcjIoCiAgICAgIGluZGV4RGF0YXR5cGUsCiAgICAgIGJvdW5kaW5nVm9sdW1lcywKICAgICAgYmF0Y2hlZERyYXdDYWxscwogICAgKTsKICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaCgKICAgICAgYmF0Y2hlZFBvc2l0aW9ucy5idWZmZXIsCiAgICAgIGJhdGNoZWRJbmRpY2VzLmJ1ZmZlciwKICAgICAgYmF0Y2hlZEluZGV4T2Zmc2V0cy5idWZmZXIsCiAgICAgIGJhdGNoZWRJbmRleENvdW50cy5idWZmZXIsCiAgICAgIGJhdGNoZWRJZHMuYnVmZmVyLAogICAgICBwYWNrZWRCdWZmZXIuYnVmZmVyCiAgICApOwogICAgcmV0dXJuIHsKICAgICAgcG9zaXRpb25zOiBiYXRjaGVkUG9zaXRpb25zLmJ1ZmZlciwKICAgICAgaW5kaWNlczogYmF0Y2hlZEluZGljZXMuYnVmZmVyLAogICAgICBpbmRleE9mZnNldHM6IGJhdGNoZWRJbmRleE9mZnNldHMuYnVmZmVyLAogICAgICBpbmRleENvdW50czogYmF0Y2hlZEluZGV4Q291bnRzLmJ1ZmZlciwKICAgICAgYmF0Y2hJZHM6IGJhdGNoZWRJZHMuYnVmZmVyLAogICAgICBwYWNrZWRCdWZmZXI6IHBhY2tlZEJ1ZmZlci5idWZmZXIKICAgIH07CiAgfQogIHZhciBzY3JhdGNoQ2VudGVyNiwgc2NyYXRjaEVsbGlwc29pZDE1LCBzY3JhdGNoUmVjdGFuZ2xlNSwgc2NyYXRjaFNjYWxhcnMsIG1heFNob3J0Miwgc2NyYXRjaEVuY29kZWRQb3NpdGlvbjMsIHNjcmF0Y2hOb3JtYWw3LCBzY3JhdGNoU2NhbGVkTm9ybWFsLCBzY3JhdGNoTWluSGVpZ2h0UG9zaXRpb24sIHNjcmF0Y2hNYXhIZWlnaHRQb3NpdGlvbiwgc2NyYXRjaEJWQ2FydG9ncmFwaGljMywgc2NyYXRjaEJWUmVjdGFuZ2xlLCBjcmVhdGVWZWN0b3JUaWxlUG9seWdvbnNfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVWZWN0b3JUaWxlUG9seWdvbnMgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVZlY3RvclRpbGVQb2x5Z29ucy5qcyIoKSB7CiAgICAgIGluaXRfQXR0cmlidXRlQ29tcHJlc3Npb24oKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfQ29sb3IoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9PcmllbnRlZEJvdW5kaW5nQm94KCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfY3JlYXRlVGFza1Byb2Nlc3NvcldvcmtlcigpOwogICAgICBzY3JhdGNoQ2VudGVyNiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEVsbGlwc29pZDE1ID0gbmV3IEVsbGlwc29pZF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hSZWN0YW5nbGU1ID0gbmV3IFJlY3RhbmdsZV9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hTY2FsYXJzID0gewogICAgICAgIG1pbjogdm9pZCAwLAogICAgICAgIG1heDogdm9pZCAwLAogICAgICAgIGluZGV4Qnl0ZXNQZXJFbGVtZW50OiB2b2lkIDAKICAgICAgfTsKICAgICAgbWF4U2hvcnQyID0gMzI3Njc7CiAgICAgIHNjcmF0Y2hFbmNvZGVkUG9zaXRpb24zID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTm9ybWFsNyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFNjYWxlZE5vcm1hbCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE1pbkhlaWdodFBvc2l0aW9uID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTWF4SGVpZ2h0UG9zaXRpb24gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hCVkNhcnRvZ3JhcGhpYzMgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEJWUmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZV9kZWZhdWx0KCk7CiAgICAgIGNyZWF0ZVZlY3RvclRpbGVQb2x5Z29uc19kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0KGNyZWF0ZVZlY3RvclRpbGVQb2x5Z29ucyk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9kZWNvZGVWZWN0b3JQb2x5bGluZVBvc2l0aW9ucy5qcwogIGZ1bmN0aW9uIGRlY29kZVZlY3RvclBvbHlsaW5lUG9zaXRpb25zKHBvc2l0aW9ucywgcmVjdGFuZ2xlLCBtaW5pbXVtSGVpZ2h0LCBtYXhpbXVtSGVpZ2h0LCBlbGxpcHNvaWQpIHsKICAgIGNvbnN0IHBvc2l0aW9uc0xlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGggLyAzOwogICAgY29uc3QgdUJ1ZmZlciA9IHBvc2l0aW9ucy5zdWJhcnJheSgwLCBwb3NpdGlvbnNMZW5ndGgpOwogICAgY29uc3QgdkJ1ZmZlciA9IHBvc2l0aW9ucy5zdWJhcnJheShwb3NpdGlvbnNMZW5ndGgsIDIgKiBwb3NpdGlvbnNMZW5ndGgpOwogICAgY29uc3QgaGVpZ2h0QnVmZmVyID0gcG9zaXRpb25zLnN1YmFycmF5KAogICAgICAyICogcG9zaXRpb25zTGVuZ3RoLAogICAgICAzICogcG9zaXRpb25zTGVuZ3RoCiAgICApOwogICAgQXR0cmlidXRlQ29tcHJlc3Npb25fZGVmYXVsdC56aWdaYWdEZWx0YURlY29kZSh1QnVmZmVyLCB2QnVmZmVyLCBoZWlnaHRCdWZmZXIpOwogICAgY29uc3QgZGVjb2RlZCA9IG5ldyBGbG9hdDY0QXJyYXkocG9zaXRpb25zLmxlbmd0aCk7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9uc0xlbmd0aDsgKytpKSB7CiAgICAgIGNvbnN0IHUzID0gdUJ1ZmZlcltpXTsKICAgICAgY29uc3QgdjMgPSB2QnVmZmVyW2ldOwogICAgICBjb25zdCBoID0gaGVpZ2h0QnVmZmVyW2ldOwogICAgICBjb25zdCBsb24gPSBNYXRoX2RlZmF1bHQubGVycChyZWN0YW5nbGUud2VzdCwgcmVjdGFuZ2xlLmVhc3QsIHUzIC8gbWF4U2hvcnQzKTsKICAgICAgY29uc3QgbGF0ID0gTWF0aF9kZWZhdWx0LmxlcnAocmVjdGFuZ2xlLnNvdXRoLCByZWN0YW5nbGUubm9ydGgsIHYzIC8gbWF4U2hvcnQzKTsKICAgICAgY29uc3QgYWx0ID0gTWF0aF9kZWZhdWx0LmxlcnAobWluaW11bUhlaWdodCwgbWF4aW11bUhlaWdodCwgaCAvIG1heFNob3J0Myk7CiAgICAgIGNvbnN0IGNhcnRvZ3JhcGhpYzIgPSBDYXJ0b2dyYXBoaWNfZGVmYXVsdC5mcm9tUmFkaWFucygKICAgICAgICBsb24sCiAgICAgICAgbGF0LAogICAgICAgIGFsdCwKICAgICAgICBzY3JhdGNoQlZDYXJ0b2dyYXBoaWM0CiAgICAgICk7CiAgICAgIGNvbnN0IGRlY29kZWRQb3NpdGlvbiA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbigKICAgICAgICBjYXJ0b2dyYXBoaWMyLAogICAgICAgIHNjcmF0Y2hFbmNvZGVkUG9zaXRpb240CiAgICAgICk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGRlY29kZWRQb3NpdGlvbiwgZGVjb2RlZCwgaSAqIDMpOwogICAgfQogICAgcmV0dXJuIGRlY29kZWQ7CiAgfQogIHZhciBtYXhTaG9ydDMsIHNjcmF0Y2hCVkNhcnRvZ3JhcGhpYzQsIHNjcmF0Y2hFbmNvZGVkUG9zaXRpb240LCBkZWNvZGVWZWN0b3JQb2x5bGluZVBvc2l0aW9uc19kZWZhdWx0OwogIHZhciBpbml0X2RlY29kZVZlY3RvclBvbHlsaW5lUG9zaXRpb25zID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9kZWNvZGVWZWN0b3JQb2x5bGluZVBvc2l0aW9ucy5qcyIoKSB7CiAgICAgIGluaXRfQXR0cmlidXRlQ29tcHJlc3Npb24oKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBtYXhTaG9ydDMgPSAzMjc2NzsKICAgICAgc2NyYXRjaEJWQ2FydG9ncmFwaGljNCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoRW5jb2RlZFBvc2l0aW9uNCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZGVjb2RlVmVjdG9yUG9seWxpbmVQb3NpdGlvbnNfZGVmYXVsdCA9IGRlY29kZVZlY3RvclBvbHlsaW5lUG9zaXRpb25zOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlVmVjdG9yVGlsZVBvbHlsaW5lcy5qcwogIHZhciBjcmVhdGVWZWN0b3JUaWxlUG9seWxpbmVzX2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVWZWN0b3JUaWxlUG9seWxpbmVzX2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVZlY3RvclRpbGVQb2x5bGluZXNfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIHVucGFja0J1ZmZlcjQocGFja2VkQnVmZmVyKSB7CiAgICBwYWNrZWRCdWZmZXIgPSBuZXcgRmxvYXQ2NEFycmF5KHBhY2tlZEJ1ZmZlcik7CiAgICBsZXQgb2Zmc2V0ID0gMDsKICAgIHNjcmF0Y2hNaW5NYXhIZWlnaHRzMi5taW4gPSBwYWNrZWRCdWZmZXJbb2Zmc2V0KytdOwogICAgc2NyYXRjaE1pbk1heEhlaWdodHMyLm1heCA9IHBhY2tlZEJ1ZmZlcltvZmZzZXQrK107CiAgICBSZWN0YW5nbGVfZGVmYXVsdC51bnBhY2socGFja2VkQnVmZmVyLCBvZmZzZXQsIHNjcmF0Y2hSZWN0YW5nbGU2KTsKICAgIG9mZnNldCArPSBSZWN0YW5nbGVfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICBFbGxpcHNvaWRfZGVmYXVsdC51bnBhY2socGFja2VkQnVmZmVyLCBvZmZzZXQsIHNjcmF0Y2hFbGxpcHNvaWQxNik7CiAgICBvZmZzZXQgKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhwYWNrZWRCdWZmZXIsIG9mZnNldCwgc2NyYXRjaENlbnRlcjcpOwogIH0KICBmdW5jdGlvbiBnZXRQb3NpdGlvbk9mZnNldHMyKGNvdW50cykgewogICAgY29uc3QgY291bnRzTGVuZ3RoID0gY291bnRzLmxlbmd0aDsKICAgIGNvbnN0IHBvc2l0aW9uT2Zmc2V0cyA9IG5ldyBVaW50MzJBcnJheShjb3VudHNMZW5ndGggKyAxKTsKICAgIGxldCBvZmZzZXQgPSAwOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudHNMZW5ndGg7ICsraSkgewogICAgICBwb3NpdGlvbk9mZnNldHNbaV0gPSBvZmZzZXQ7CiAgICAgIG9mZnNldCArPSBjb3VudHNbaV07CiAgICB9CiAgICBwb3NpdGlvbk9mZnNldHNbY291bnRzTGVuZ3RoXSA9IG9mZnNldDsKICAgIHJldHVybiBwb3NpdGlvbk9mZnNldHM7CiAgfQogIGZ1bmN0aW9uIGNyZWF0ZVZlY3RvclRpbGVQb2x5bGluZXMocGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cykgewogICAgY29uc3QgZW5jb2RlZFBvc2l0aW9ucyA9IG5ldyBVaW50MTZBcnJheShwYXJhbWV0ZXJzLnBvc2l0aW9ucyk7CiAgICBjb25zdCB3aWR0aHMgPSBuZXcgVWludDE2QXJyYXkocGFyYW1ldGVycy53aWR0aHMpOwogICAgY29uc3QgY291bnRzID0gbmV3IFVpbnQzMkFycmF5KHBhcmFtZXRlcnMuY291bnRzKTsKICAgIGNvbnN0IGJhdGNoSWRzID0gbmV3IFVpbnQxNkFycmF5KHBhcmFtZXRlcnMuYmF0Y2hJZHMpOwogICAgdW5wYWNrQnVmZmVyNChwYXJhbWV0ZXJzLnBhY2tlZEJ1ZmZlcik7CiAgICBjb25zdCByZWN0YW5nbGUgPSBzY3JhdGNoUmVjdGFuZ2xlNjsKICAgIGNvbnN0IGVsbGlwc29pZCA9IHNjcmF0Y2hFbGxpcHNvaWQxNjsKICAgIGNvbnN0IGNlbnRlciA9IHNjcmF0Y2hDZW50ZXI3OwogICAgY29uc3QgbWluaW11bUhlaWdodCA9IHNjcmF0Y2hNaW5NYXhIZWlnaHRzMi5taW47CiAgICBjb25zdCBtYXhpbXVtSGVpZ2h0ID0gc2NyYXRjaE1pbk1heEhlaWdodHMyLm1heDsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IGRlY29kZVZlY3RvclBvbHlsaW5lUG9zaXRpb25zX2RlZmF1bHQoCiAgICAgIGVuY29kZWRQb3NpdGlvbnMsCiAgICAgIHJlY3RhbmdsZSwKICAgICAgbWluaW11bUhlaWdodCwKICAgICAgbWF4aW11bUhlaWdodCwKICAgICAgZWxsaXBzb2lkCiAgICApOwogICAgY29uc3QgcG9zaXRpb25zTGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICBjb25zdCBzaXplID0gcG9zaXRpb25zTGVuZ3RoICogNCAtIDQ7CiAgICBjb25zdCBjdXJQb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiAzKTsKICAgIGNvbnN0IHByZXZQb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiAzKTsKICAgIGNvbnN0IG5leHRQb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiAzKTsKICAgIGNvbnN0IGV4cGFuZEFuZFdpZHRoID0gbmV3IEZsb2F0MzJBcnJheShzaXplICogMik7CiAgICBjb25zdCB2ZXJ0ZXhCYXRjaElkcyA9IG5ldyBVaW50MTZBcnJheShzaXplKTsKICAgIGxldCBwb3NpdGlvbkluZGV4ID0gMDsKICAgIGxldCBleHBhbmRBbmRXaWR0aEluZGV4ID0gMDsKICAgIGxldCBiYXRjaElkSW5kZXggPSAwOwogICAgbGV0IGk7CiAgICBsZXQgb2Zmc2V0ID0gMDsKICAgIGxldCBsZW5ndGggPSBjb3VudHMubGVuZ3RoOwogICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgIGNvbnN0IGNvdW50ID0gY291bnRzW2ldOwogICAgICBjb25zdCB3aWR0aCA9IHdpZHRoc1tpXTsKICAgICAgY29uc3QgYmF0Y2hJZCA9IGJhdGNoSWRzW2ldOwogICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvdW50OyArK2opIHsKICAgICAgICBsZXQgcHJldmlvdXM7CiAgICAgICAgaWYgKGogPT09IDApIHsKICAgICAgICAgIGNvbnN0IHAwID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhwb3NpdGlvbnMsIG9mZnNldCAqIDMsIHNjcmF0Y2hQMDIpOwogICAgICAgICAgY29uc3QgcDEgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKHBvc2l0aW9ucywgKG9mZnNldCArIDEpICogMywgc2NyYXRjaFAxMik7CiAgICAgICAgICBwcmV2aW91cyA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChwMCwgcDEsIHNjcmF0Y2hQcmV2Mik7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHAwLCBwcmV2aW91cywgcHJldmlvdXMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBwcmV2aW91cyA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgICAgKG9mZnNldCArIGogLSAxKSAqIDMsCiAgICAgICAgICAgIHNjcmF0Y2hQcmV2MgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgY3VycmVudCA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICAob2Zmc2V0ICsgaikgKiAzLAogICAgICAgICAgc2NyYXRjaEN1cgogICAgICAgICk7CiAgICAgICAgbGV0IG5leHQ7CiAgICAgICAgaWYgKGogPT09IGNvdW50IC0gMSkgewogICAgICAgICAgY29uc3QgcDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICAgIChvZmZzZXQgKyBjb3VudCAtIDEpICogMywKICAgICAgICAgICAgc2NyYXRjaFAwMgogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHAzID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgICAob2Zmc2V0ICsgY291bnQgLSAyKSAqIDMsCiAgICAgICAgICAgIHNjcmF0Y2hQMTIKICAgICAgICAgICk7CiAgICAgICAgICBuZXh0ID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHAyLCBwMywgc2NyYXRjaE5leHQyKTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocDIsIG5leHQsIG5leHQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBuZXh0ID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhwb3NpdGlvbnMsIChvZmZzZXQgKyBqICsgMSkgKiAzLCBzY3JhdGNoTmV4dDIpOwogICAgICAgIH0KICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocHJldmlvdXMsIGNlbnRlciwgcHJldmlvdXMpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjdXJyZW50LCBjZW50ZXIsIGN1cnJlbnQpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChuZXh0LCBjZW50ZXIsIG5leHQpOwogICAgICAgIGNvbnN0IHN0YXJ0SyA9IGogPT09IDAgPyAyIDogMDsKICAgICAgICBjb25zdCBlbmRLID0gaiA9PT0gY291bnQgLSAxID8gMiA6IDQ7CiAgICAgICAgZm9yIChsZXQgayA9IHN0YXJ0SzsgayA8IGVuZEs7ICsraykgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soY3VycmVudCwgY3VyUG9zaXRpb25zLCBwb3NpdGlvbkluZGV4KTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHByZXZpb3VzLCBwcmV2UG9zaXRpb25zLCBwb3NpdGlvbkluZGV4KTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKG5leHQsIG5leHRQb3NpdGlvbnMsIHBvc2l0aW9uSW5kZXgpOwogICAgICAgICAgcG9zaXRpb25JbmRleCArPSAzOwogICAgICAgICAgY29uc3QgZGlyZWN0aW9uMiA9IGsgLSAyIDwgMCA/IC0xIDogMTsKICAgICAgICAgIGV4cGFuZEFuZFdpZHRoW2V4cGFuZEFuZFdpZHRoSW5kZXgrK10gPSAyICogKGsgJSAyKSAtIDE7CiAgICAgICAgICBleHBhbmRBbmRXaWR0aFtleHBhbmRBbmRXaWR0aEluZGV4KytdID0gZGlyZWN0aW9uMiAqIHdpZHRoOwogICAgICAgICAgdmVydGV4QmF0Y2hJZHNbYmF0Y2hJZEluZGV4KytdID0gYmF0Y2hJZDsKICAgICAgICB9CiAgICAgIH0KICAgICAgb2Zmc2V0ICs9IGNvdW50OwogICAgfQogICAgY29uc3QgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KHNpemUsIHBvc2l0aW9uc0xlbmd0aCAqIDYgLSA2KTsKICAgIGxldCBpbmRleCA9IDA7CiAgICBsZXQgaW5kaWNlc0luZGV4ID0gMDsKICAgIGxlbmd0aCA9IHBvc2l0aW9uc0xlbmd0aCAtIDE7CiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpbmRleDsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpbmRleCArIDI7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gaW5kZXggKyAxOwogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGluZGV4ICsgMTsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpbmRleCArIDI7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gaW5kZXggKyAzOwogICAgICBpbmRleCArPSA0OwogICAgfQogICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKAogICAgICBjdXJQb3NpdGlvbnMuYnVmZmVyLAogICAgICBwcmV2UG9zaXRpb25zLmJ1ZmZlciwKICAgICAgbmV4dFBvc2l0aW9ucy5idWZmZXIKICAgICk7CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goCiAgICAgIGV4cGFuZEFuZFdpZHRoLmJ1ZmZlciwKICAgICAgdmVydGV4QmF0Y2hJZHMuYnVmZmVyLAogICAgICBpbmRpY2VzLmJ1ZmZlcgogICAgKTsKICAgIGxldCByZXN1bHRzID0gewogICAgICBpbmRleERhdGF0eXBlOiBpbmRpY2VzLkJZVEVTX1BFUl9FTEVNRU5UID09PSAyID8gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX1NIT1JUIDogSW5kZXhEYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0lOVCwKICAgICAgY3VycmVudFBvc2l0aW9uczogY3VyUG9zaXRpb25zLmJ1ZmZlciwKICAgICAgcHJldmlvdXNQb3NpdGlvbnM6IHByZXZQb3NpdGlvbnMuYnVmZmVyLAogICAgICBuZXh0UG9zaXRpb25zOiBuZXh0UG9zaXRpb25zLmJ1ZmZlciwKICAgICAgZXhwYW5kQW5kV2lkdGg6IGV4cGFuZEFuZFdpZHRoLmJ1ZmZlciwKICAgICAgYmF0Y2hJZHM6IHZlcnRleEJhdGNoSWRzLmJ1ZmZlciwKICAgICAgaW5kaWNlczogaW5kaWNlcy5idWZmZXIKICAgIH07CiAgICBpZiAocGFyYW1ldGVycy5rZWVwRGVjb2RlZFBvc2l0aW9ucykgewogICAgICBjb25zdCBwb3NpdGlvbk9mZnNldHMgPSBnZXRQb3NpdGlvbk9mZnNldHMyKGNvdW50cyk7CiAgICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaChwb3NpdGlvbnMuYnVmZmVyLCBwb3NpdGlvbk9mZnNldHMuYnVmZmVyKTsKICAgICAgcmVzdWx0cyA9IGNvbWJpbmVfZGVmYXVsdChyZXN1bHRzLCB7CiAgICAgICAgZGVjb2RlZFBvc2l0aW9uczogcG9zaXRpb25zLmJ1ZmZlciwKICAgICAgICBkZWNvZGVkUG9zaXRpb25PZmZzZXRzOiBwb3NpdGlvbk9mZnNldHMuYnVmZmVyCiAgICAgIH0pOwogICAgfQogICAgcmV0dXJuIHJlc3VsdHM7CiAgfQogIHZhciBzY3JhdGNoUmVjdGFuZ2xlNiwgc2NyYXRjaEVsbGlwc29pZDE2LCBzY3JhdGNoQ2VudGVyNywgc2NyYXRjaE1pbk1heEhlaWdodHMyLCBzY3JhdGNoUDAyLCBzY3JhdGNoUDEyLCBzY3JhdGNoUHJldjIsIHNjcmF0Y2hDdXIsIHNjcmF0Y2hOZXh0MiwgY3JlYXRlVmVjdG9yVGlsZVBvbHlsaW5lc19kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVZlY3RvclRpbGVQb2x5bGluZXMgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVZlY3RvclRpbGVQb2x5bGluZXMuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9jb21iaW5lKCk7CiAgICAgIGluaXRfZGVjb2RlVmVjdG9yUG9seWxpbmVQb3NpdGlvbnMoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfY3JlYXRlVGFza1Byb2Nlc3NvcldvcmtlcigpOwogICAgICBzY3JhdGNoUmVjdGFuZ2xlNiA9IG5ldyBSZWN0YW5nbGVfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoRWxsaXBzb2lkMTYgPSBuZXcgRWxsaXBzb2lkX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENlbnRlcjcgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hNaW5NYXhIZWlnaHRzMiA9IHsKICAgICAgICBtaW46IHZvaWQgMCwKICAgICAgICBtYXg6IHZvaWQgMAogICAgICB9OwogICAgICBzY3JhdGNoUDAyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUDEyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUHJldjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDdXIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hOZXh0MiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY3JlYXRlVmVjdG9yVGlsZVBvbHlsaW5lc19kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0KGNyZWF0ZVZlY3RvclRpbGVQb2x5bGluZXMpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRWxsaXBzb2lkYWxPY2NsdWRlci5qcwogIGZ1bmN0aW9uIEVsbGlwc29pZGFsT2NjbHVkZXIoZWxsaXBzb2lkLCBjYW1lcmFQb3NpdGlvbikgewogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJlbGxpcHNvaWQiLCBlbGxpcHNvaWQpOwogICAgdGhpcy5fZWxsaXBzb2lkID0gZWxsaXBzb2lkOwogICAgdGhpcy5fY2FtZXJhUG9zaXRpb24gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICB0aGlzLl9jYW1lcmFQb3NpdGlvbkluU2NhbGVkU3BhY2UgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICB0aGlzLl9kaXN0YW5jZVRvTGltYkluU2NhbGVkU3BhY2VTcXVhcmVkID0gMDsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoY2FtZXJhUG9zaXRpb24pKSB7CiAgICAgIHRoaXMuY2FtZXJhUG9zaXRpb24gPSBjYW1lcmFQb3NpdGlvbjsKICAgIH0KICB9CiAgZnVuY3Rpb24gZ2V0UG9zc2libHlTaHJ1bmtFbGxpcHNvaWQoZWxsaXBzb2lkLCBtaW5pbXVtSGVpZ2h0LCByZXN1bHQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWluaW11bUhlaWdodCkgJiYgbWluaW11bUhlaWdodCA8IDAgJiYgZWxsaXBzb2lkLm1pbmltdW1SYWRpdXMgPiAtbWluaW11bUhlaWdodCkgewogICAgICBjb25zdCBlbGxpcHNvaWRTaHJ1bmtSYWRpaSA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tRWxlbWVudHMoCiAgICAgICAgZWxsaXBzb2lkLnJhZGlpLnggKyBtaW5pbXVtSGVpZ2h0LAogICAgICAgIGVsbGlwc29pZC5yYWRpaS55ICsgbWluaW11bUhlaWdodCwKICAgICAgICBlbGxpcHNvaWQucmFkaWkueiArIG1pbmltdW1IZWlnaHQsCiAgICAgICAgc2NyYXRjaEVsbGlwc29pZFNocnVua1JhZGlpCiAgICAgICk7CiAgICAgIGVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmZyb21DYXJ0ZXNpYW4zKGVsbGlwc29pZFNocnVua1JhZGlpLCByZXN1bHQpOwogICAgfQogICAgcmV0dXJuIGVsbGlwc29pZDsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZUhvcml6b25DdWxsaW5nUG9pbnRGcm9tUG9zaXRpb25zKGVsbGlwc29pZCwgZGlyZWN0aW9uVG9Qb2ludCwgcG9zaXRpb25zLCByZXN1bHQpIHsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZGlyZWN0aW9uVG9Qb2ludCIsIGRpcmVjdGlvblRvUG9pbnQpOwogICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJwb3NpdGlvbnMiLCBwb3NpdGlvbnMpOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICB9CiAgICBjb25zdCBzY2FsZWRTcGFjZURpcmVjdGlvblRvUG9pbnQgPSBjb21wdXRlU2NhbGVkU3BhY2VEaXJlY3Rpb25Ub1BvaW50KAogICAgICBlbGxpcHNvaWQsCiAgICAgIGRpcmVjdGlvblRvUG9pbnQKICAgICk7CiAgICBsZXQgcmVzdWx0TWFnbml0dWRlID0gMDsKICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwb3NpdGlvbnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICAgICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbnNbaV07CiAgICAgIGNvbnN0IGNhbmRpZGF0ZU1hZ25pdHVkZSA9IGNvbXB1dGVNYWduaXR1ZGUoCiAgICAgICAgZWxsaXBzb2lkLAogICAgICAgIHBvc2l0aW9uLAogICAgICAgIHNjYWxlZFNwYWNlRGlyZWN0aW9uVG9Qb2ludAogICAgICApOwogICAgICBpZiAoY2FuZGlkYXRlTWFnbml0dWRlIDwgMCkgewogICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgIH0KICAgICAgcmVzdWx0TWFnbml0dWRlID0gTWF0aC5tYXgocmVzdWx0TWFnbml0dWRlLCBjYW5kaWRhdGVNYWduaXR1ZGUpOwogICAgfQogICAgcmV0dXJuIG1hZ25pdHVkZVRvUG9pbnQoc2NhbGVkU3BhY2VEaXJlY3Rpb25Ub1BvaW50LCByZXN1bHRNYWduaXR1ZGUsIHJlc3VsdCk7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVIb3Jpem9uQ3VsbGluZ1BvaW50RnJvbVZlcnRpY2VzKGVsbGlwc29pZCwgZGlyZWN0aW9uVG9Qb2ludCwgdmVydGljZXMsIHN0cmlkZSwgY2VudGVyLCByZXN1bHQpIHsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZGlyZWN0aW9uVG9Qb2ludCIsIGRpcmVjdGlvblRvUG9pbnQpOwogICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJ2ZXJ0aWNlcyIsIHZlcnRpY2VzKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic3RyaWRlIiwgc3RyaWRlKTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgfQogICAgc3RyaWRlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RyaWRlLCAzKTsKICAgIGNlbnRlciA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNlbnRlciwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pOwogICAgY29uc3Qgc2NhbGVkU3BhY2VEaXJlY3Rpb25Ub1BvaW50ID0gY29tcHV0ZVNjYWxlZFNwYWNlRGlyZWN0aW9uVG9Qb2ludCgKICAgICAgZWxsaXBzb2lkLAogICAgICBkaXJlY3Rpb25Ub1BvaW50CiAgICApOwogICAgbGV0IHJlc3VsdE1hZ25pdHVkZSA9IDA7CiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdmVydGljZXMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IHN0cmlkZSkgewogICAgICBwb3NpdGlvblNjcmF0Y2g1LnggPSB2ZXJ0aWNlc1tpXSArIGNlbnRlci54OwogICAgICBwb3NpdGlvblNjcmF0Y2g1LnkgPSB2ZXJ0aWNlc1tpICsgMV0gKyBjZW50ZXIueTsKICAgICAgcG9zaXRpb25TY3JhdGNoNS56ID0gdmVydGljZXNbaSArIDJdICsgY2VudGVyLno7CiAgICAgIGNvbnN0IGNhbmRpZGF0ZU1hZ25pdHVkZSA9IGNvbXB1dGVNYWduaXR1ZGUoCiAgICAgICAgZWxsaXBzb2lkLAogICAgICAgIHBvc2l0aW9uU2NyYXRjaDUsCiAgICAgICAgc2NhbGVkU3BhY2VEaXJlY3Rpb25Ub1BvaW50CiAgICAgICk7CiAgICAgIGlmIChjYW5kaWRhdGVNYWduaXR1ZGUgPCAwKSB7CiAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgfQogICAgICByZXN1bHRNYWduaXR1ZGUgPSBNYXRoLm1heChyZXN1bHRNYWduaXR1ZGUsIGNhbmRpZGF0ZU1hZ25pdHVkZSk7CiAgICB9CiAgICByZXR1cm4gbWFnbml0dWRlVG9Qb2ludChzY2FsZWRTcGFjZURpcmVjdGlvblRvUG9pbnQsIHJlc3VsdE1hZ25pdHVkZSwgcmVzdWx0KTsKICB9CiAgZnVuY3Rpb24gaXNTY2FsZWRTcGFjZVBvaW50VmlzaWJsZShvY2NsdWRlZVNjYWxlZFNwYWNlUG9zaXRpb24sIGNhbWVyYVBvc2l0aW9uSW5TY2FsZWRTcGFjZSwgZGlzdGFuY2VUb0xpbWJJblNjYWxlZFNwYWNlU3F1YXJlZCkgewogICAgY29uc3QgY3YgPSBjYW1lcmFQb3NpdGlvbkluU2NhbGVkU3BhY2U7CiAgICBjb25zdCB2aE1hZ25pdHVkZVNxdWFyZWQgPSBkaXN0YW5jZVRvTGltYkluU2NhbGVkU3BhY2VTcXVhcmVkOwogICAgY29uc3QgdnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgIG9jY2x1ZGVlU2NhbGVkU3BhY2VQb3NpdGlvbiwKICAgICAgY3YsCiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xOQogICAgKTsKICAgIGNvbnN0IHZ0RG90VmMgPSAtQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh2dCwgY3YpOwogICAgY29uc3QgaXNPY2NsdWRlZCA9IHZoTWFnbml0dWRlU3F1YXJlZCA8IDAgPyB2dERvdFZjID4gMCA6IHZ0RG90VmMgPiB2aE1hZ25pdHVkZVNxdWFyZWQgJiYgdnREb3RWYyAqIHZ0RG90VmMgLyBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCh2dCkgPiB2aE1hZ25pdHVkZVNxdWFyZWQ7CiAgICByZXR1cm4gIWlzT2NjbHVkZWQ7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVNYWduaXR1ZGUoZWxsaXBzb2lkLCBwb3NpdGlvbiwgc2NhbGVkU3BhY2VEaXJlY3Rpb25Ub1BvaW50KSB7CiAgICBjb25zdCBzY2FsZWRTcGFjZVBvc2l0aW9uID0gZWxsaXBzb2lkLnRyYW5zZm9ybVBvc2l0aW9uVG9TY2FsZWRTcGFjZSgKICAgICAgcG9zaXRpb24sCiAgICAgIHNjYWxlZFNwYWNlU2NyYXRjaAogICAgKTsKICAgIGxldCBtYWduaXR1ZGVTcXVhcmVkID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZVNxdWFyZWQoc2NhbGVkU3BhY2VQb3NpdGlvbik7CiAgICBsZXQgbWFnbml0dWRlID0gTWF0aC5zcXJ0KG1hZ25pdHVkZVNxdWFyZWQpOwogICAgY29uc3QgZGlyZWN0aW9uMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5kaXZpZGVCeVNjYWxhcigKICAgICAgc2NhbGVkU3BhY2VQb3NpdGlvbiwKICAgICAgbWFnbml0dWRlLAogICAgICBkaXJlY3Rpb25TY3JhdGNoCiAgICApOwogICAgbWFnbml0dWRlU3F1YXJlZCA9IE1hdGgubWF4KDEsIG1hZ25pdHVkZVNxdWFyZWQpOwogICAgbWFnbml0dWRlID0gTWF0aC5tYXgoMSwgbWFnbml0dWRlKTsKICAgIGNvbnN0IGNvc0FscGhhID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChkaXJlY3Rpb24yLCBzY2FsZWRTcGFjZURpcmVjdGlvblRvUG9pbnQpOwogICAgY29uc3Qgc2luQWxwaGEgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoZGlyZWN0aW9uMiwgc2NhbGVkU3BhY2VEaXJlY3Rpb25Ub1BvaW50LCBkaXJlY3Rpb24yKQogICAgKTsKICAgIGNvbnN0IGNvc0JldGEgPSAxIC8gbWFnbml0dWRlOwogICAgY29uc3Qgc2luQmV0YSA9IE1hdGguc3FydChtYWduaXR1ZGVTcXVhcmVkIC0gMSkgKiBjb3NCZXRhOwogICAgcmV0dXJuIDEgLyAoY29zQWxwaGEgKiBjb3NCZXRhIC0gc2luQWxwaGEgKiBzaW5CZXRhKTsKICB9CiAgZnVuY3Rpb24gbWFnbml0dWRlVG9Qb2ludChzY2FsZWRTcGFjZURpcmVjdGlvblRvUG9pbnQsIHJlc3VsdE1hZ25pdHVkZSwgcmVzdWx0KSB7CiAgICBpZiAocmVzdWx0TWFnbml0dWRlIDw9IDAgfHwgcmVzdWx0TWFnbml0dWRlID09PSAxIC8gMCB8fCByZXN1bHRNYWduaXR1ZGUgIT09IHJlc3VsdE1hZ25pdHVkZSkgewogICAgICByZXR1cm4gdm9pZCAwOwogICAgfQogICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICBzY2FsZWRTcGFjZURpcmVjdGlvblRvUG9pbnQsCiAgICAgIHJlc3VsdE1hZ25pdHVkZSwKICAgICAgcmVzdWx0CiAgICApOwogIH0KICBmdW5jdGlvbiBjb21wdXRlU2NhbGVkU3BhY2VEaXJlY3Rpb25Ub1BvaW50KGVsbGlwc29pZCwgZGlyZWN0aW9uVG9Qb2ludCkgewogICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHMoZGlyZWN0aW9uVG9Qb2ludCwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pKSB7CiAgICAgIHJldHVybiBkaXJlY3Rpb25Ub1BvaW50OwogICAgfQogICAgZWxsaXBzb2lkLnRyYW5zZm9ybVBvc2l0aW9uVG9TY2FsZWRTcGFjZSgKICAgICAgZGlyZWN0aW9uVG9Qb2ludCwKICAgICAgZGlyZWN0aW9uVG9Qb2ludFNjcmF0Y2gKICAgICk7CiAgICByZXR1cm4gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShkaXJlY3Rpb25Ub1BvaW50U2NyYXRjaCwgZGlyZWN0aW9uVG9Qb2ludFNjcmF0Y2gpOwogIH0KICB2YXIgc2NyYXRjaENhcnRlc2lhbjE5LCBzY3JhdGNoQ2FtZXJhUG9zaXRpb25JblNjYWxlZFNwYWNlU2hydW5rLCBzY3JhdGNoRWxsaXBzb2lkU2hydW5rLCBzdWJzYW1wbGVTY3JhdGNoLCBzY3JhdGNoRWxsaXBzb2lkU2hydW5rUmFkaWksIHBvc2l0aW9uU2NyYXRjaDUsIHNjYWxlZFNwYWNlU2NyYXRjaCwgZGlyZWN0aW9uU2NyYXRjaCwgZGlyZWN0aW9uVG9Qb2ludFNjcmF0Y2gsIEVsbGlwc29pZGFsT2NjbHVkZXJfZGVmYXVsdDsKICB2YXIgaW5pdF9FbGxpcHNvaWRhbE9jY2x1ZGVyID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbGxpcHNvaWRhbE9jY2x1ZGVyLmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoRWxsaXBzb2lkYWxPY2NsdWRlci5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBvY2NsdWRpbmcgZWxsaXBzb2lkLgogICAgICAgICAqIEBtZW1iZXJvZiBFbGxpcHNvaWRhbE9jY2x1ZGVyLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtFbGxpcHNvaWR9CiAgICAgICAgICovCiAgICAgICAgZWxsaXBzb2lkOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fZWxsaXBzb2lkOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyBvciBzZXRzIHRoZSBwb3NpdGlvbiBvZiB0aGUgY2FtZXJhLgogICAgICAgICAqIEBtZW1iZXJvZiBFbGxpcHNvaWRhbE9jY2x1ZGVyLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfQogICAgICAgICAqLwogICAgICAgIGNhbWVyYVBvc2l0aW9uOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FtZXJhUG9zaXRpb247CiAgICAgICAgICB9LAogICAgICAgICAgc2V0OiBmdW5jdGlvbihjYW1lcmFQb3NpdGlvbikgewogICAgICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSB0aGlzLl9lbGxpcHNvaWQ7CiAgICAgICAgICAgIGNvbnN0IGN2ID0gZWxsaXBzb2lkLnRyYW5zZm9ybVBvc2l0aW9uVG9TY2FsZWRTcGFjZSgKICAgICAgICAgICAgICBjYW1lcmFQb3NpdGlvbiwKICAgICAgICAgICAgICB0aGlzLl9jYW1lcmFQb3NpdGlvbkluU2NhbGVkU3BhY2UKICAgICAgICAgICAgKTsKICAgICAgICAgICAgY29uc3QgdmhNYWduaXR1ZGVTcXVhcmVkID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZVNxdWFyZWQoY3YpIC0gMTsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGNhbWVyYVBvc2l0aW9uLCB0aGlzLl9jYW1lcmFQb3NpdGlvbik7CiAgICAgICAgICAgIHRoaXMuX2NhbWVyYVBvc2l0aW9uSW5TY2FsZWRTcGFjZSA9IGN2OwogICAgICAgICAgICB0aGlzLl9kaXN0YW5jZVRvTGltYkluU2NhbGVkU3BhY2VTcXVhcmVkID0gdmhNYWduaXR1ZGVTcXVhcmVkOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xOSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgRWxsaXBzb2lkYWxPY2NsdWRlci5wcm90b3R5cGUuaXNQb2ludFZpc2libGUgPSBmdW5jdGlvbihvY2NsdWRlZSkgewogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IHRoaXMuX2VsbGlwc29pZDsKICAgICAgICBjb25zdCBvY2NsdWRlZVNjYWxlZFNwYWNlUG9zaXRpb24gPSBlbGxpcHNvaWQudHJhbnNmb3JtUG9zaXRpb25Ub1NjYWxlZFNwYWNlKAogICAgICAgICAgb2NjbHVkZWUsCiAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuMTkKICAgICAgICApOwogICAgICAgIHJldHVybiBpc1NjYWxlZFNwYWNlUG9pbnRWaXNpYmxlKAogICAgICAgICAgb2NjbHVkZWVTY2FsZWRTcGFjZVBvc2l0aW9uLAogICAgICAgICAgdGhpcy5fY2FtZXJhUG9zaXRpb25JblNjYWxlZFNwYWNlLAogICAgICAgICAgdGhpcy5fZGlzdGFuY2VUb0xpbWJJblNjYWxlZFNwYWNlU3F1YXJlZAogICAgICAgICk7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZGFsT2NjbHVkZXIucHJvdG90eXBlLmlzU2NhbGVkU3BhY2VQb2ludFZpc2libGUgPSBmdW5jdGlvbihvY2NsdWRlZVNjYWxlZFNwYWNlUG9zaXRpb24pIHsKICAgICAgICByZXR1cm4gaXNTY2FsZWRTcGFjZVBvaW50VmlzaWJsZSgKICAgICAgICAgIG9jY2x1ZGVlU2NhbGVkU3BhY2VQb3NpdGlvbiwKICAgICAgICAgIHRoaXMuX2NhbWVyYVBvc2l0aW9uSW5TY2FsZWRTcGFjZSwKICAgICAgICAgIHRoaXMuX2Rpc3RhbmNlVG9MaW1iSW5TY2FsZWRTcGFjZVNxdWFyZWQKICAgICAgICApOwogICAgICB9OwogICAgICBzY3JhdGNoQ2FtZXJhUG9zaXRpb25JblNjYWxlZFNwYWNlU2hydW5rID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBFbGxpcHNvaWRhbE9jY2x1ZGVyLnByb3RvdHlwZS5pc1NjYWxlZFNwYWNlUG9pbnRWaXNpYmxlUG9zc2libHlVbmRlckVsbGlwc29pZCA9IGZ1bmN0aW9uKG9jY2x1ZGVlU2NhbGVkU3BhY2VQb3NpdGlvbiwgbWluaW11bUhlaWdodCkgewogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IHRoaXMuX2VsbGlwc29pZDsKICAgICAgICBsZXQgdmhNYWduaXR1ZGVTcXVhcmVkOwogICAgICAgIGxldCBjdjsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG1pbmltdW1IZWlnaHQpICYmIG1pbmltdW1IZWlnaHQgPCAwICYmIGVsbGlwc29pZC5taW5pbXVtUmFkaXVzID4gLW1pbmltdW1IZWlnaHQpIHsKICAgICAgICAgIGN2ID0gc2NyYXRjaENhbWVyYVBvc2l0aW9uSW5TY2FsZWRTcGFjZVNocnVuazsKICAgICAgICAgIGN2LnggPSB0aGlzLl9jYW1lcmFQb3NpdGlvbi54IC8gKGVsbGlwc29pZC5yYWRpaS54ICsgbWluaW11bUhlaWdodCk7CiAgICAgICAgICBjdi55ID0gdGhpcy5fY2FtZXJhUG9zaXRpb24ueSAvIChlbGxpcHNvaWQucmFkaWkueSArIG1pbmltdW1IZWlnaHQpOwogICAgICAgICAgY3YueiA9IHRoaXMuX2NhbWVyYVBvc2l0aW9uLnogLyAoZWxsaXBzb2lkLnJhZGlpLnogKyBtaW5pbXVtSGVpZ2h0KTsKICAgICAgICAgIHZoTWFnbml0dWRlU3F1YXJlZCA9IGN2LnggKiBjdi54ICsgY3YueSAqIGN2LnkgKyBjdi56ICogY3YueiAtIDE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGN2ID0gdGhpcy5fY2FtZXJhUG9zaXRpb25JblNjYWxlZFNwYWNlOwogICAgICAgICAgdmhNYWduaXR1ZGVTcXVhcmVkID0gdGhpcy5fZGlzdGFuY2VUb0xpbWJJblNjYWxlZFNwYWNlU3F1YXJlZDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGlzU2NhbGVkU3BhY2VQb2ludFZpc2libGUoCiAgICAgICAgICBvY2NsdWRlZVNjYWxlZFNwYWNlUG9zaXRpb24sCiAgICAgICAgICBjdiwKICAgICAgICAgIHZoTWFnbml0dWRlU3F1YXJlZAogICAgICAgICk7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZGFsT2NjbHVkZXIucHJvdG90eXBlLmNvbXB1dGVIb3Jpem9uQ3VsbGluZ1BvaW50ID0gZnVuY3Rpb24oZGlyZWN0aW9uVG9Qb2ludCwgcG9zaXRpb25zLCByZXN1bHQpIHsKICAgICAgICByZXR1cm4gY29tcHV0ZUhvcml6b25DdWxsaW5nUG9pbnRGcm9tUG9zaXRpb25zKAogICAgICAgICAgdGhpcy5fZWxsaXBzb2lkLAogICAgICAgICAgZGlyZWN0aW9uVG9Qb2ludCwKICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hFbGxpcHNvaWRTaHJ1bmsgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShFbGxpcHNvaWRfZGVmYXVsdC5VTklUX1NQSEVSRSk7CiAgICAgIEVsbGlwc29pZGFsT2NjbHVkZXIucHJvdG90eXBlLmNvbXB1dGVIb3Jpem9uQ3VsbGluZ1BvaW50UG9zc2libHlVbmRlckVsbGlwc29pZCA9IGZ1bmN0aW9uKGRpcmVjdGlvblRvUG9pbnQsIHBvc2l0aW9ucywgbWluaW11bUhlaWdodCwgcmVzdWx0KSB7CiAgICAgICAgY29uc3QgcG9zc2libHlTaHJ1bmtFbGxpcHNvaWQgPSBnZXRQb3NzaWJseVNocnVua0VsbGlwc29pZCgKICAgICAgICAgIHRoaXMuX2VsbGlwc29pZCwKICAgICAgICAgIG1pbmltdW1IZWlnaHQsCiAgICAgICAgICBzY3JhdGNoRWxsaXBzb2lkU2hydW5rCiAgICAgICAgKTsKICAgICAgICByZXR1cm4gY29tcHV0ZUhvcml6b25DdWxsaW5nUG9pbnRGcm9tUG9zaXRpb25zKAogICAgICAgICAgcG9zc2libHlTaHJ1bmtFbGxpcHNvaWQsCiAgICAgICAgICBkaXJlY3Rpb25Ub1BvaW50LAogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkYWxPY2NsdWRlci5wcm90b3R5cGUuY29tcHV0ZUhvcml6b25DdWxsaW5nUG9pbnRGcm9tVmVydGljZXMgPSBmdW5jdGlvbihkaXJlY3Rpb25Ub1BvaW50LCB2ZXJ0aWNlcywgc3RyaWRlLCBjZW50ZXIsIHJlc3VsdCkgewogICAgICAgIHJldHVybiBjb21wdXRlSG9yaXpvbkN1bGxpbmdQb2ludEZyb21WZXJ0aWNlcygKICAgICAgICAgIHRoaXMuX2VsbGlwc29pZCwKICAgICAgICAgIGRpcmVjdGlvblRvUG9pbnQsCiAgICAgICAgICB2ZXJ0aWNlcywKICAgICAgICAgIHN0cmlkZSwKICAgICAgICAgIGNlbnRlciwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZGFsT2NjbHVkZXIucHJvdG90eXBlLmNvbXB1dGVIb3Jpem9uQ3VsbGluZ1BvaW50RnJvbVZlcnRpY2VzUG9zc2libHlVbmRlckVsbGlwc29pZCA9IGZ1bmN0aW9uKGRpcmVjdGlvblRvUG9pbnQsIHZlcnRpY2VzLCBzdHJpZGUsIGNlbnRlciwgbWluaW11bUhlaWdodCwgcmVzdWx0KSB7CiAgICAgICAgY29uc3QgcG9zc2libHlTaHJ1bmtFbGxpcHNvaWQgPSBnZXRQb3NzaWJseVNocnVua0VsbGlwc29pZCgKICAgICAgICAgIHRoaXMuX2VsbGlwc29pZCwKICAgICAgICAgIG1pbmltdW1IZWlnaHQsCiAgICAgICAgICBzY3JhdGNoRWxsaXBzb2lkU2hydW5rCiAgICAgICAgKTsKICAgICAgICByZXR1cm4gY29tcHV0ZUhvcml6b25DdWxsaW5nUG9pbnRGcm9tVmVydGljZXMoCiAgICAgICAgICBwb3NzaWJseVNocnVua0VsbGlwc29pZCwKICAgICAgICAgIGRpcmVjdGlvblRvUG9pbnQsCiAgICAgICAgICB2ZXJ0aWNlcywKICAgICAgICAgIHN0cmlkZSwKICAgICAgICAgIGNlbnRlciwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIHN1YnNhbXBsZVNjcmF0Y2ggPSBbXTsKICAgICAgRWxsaXBzb2lkYWxPY2NsdWRlci5wcm90b3R5cGUuY29tcHV0ZUhvcml6b25DdWxsaW5nUG9pbnRGcm9tUmVjdGFuZ2xlID0gZnVuY3Rpb24ocmVjdGFuZ2xlLCBlbGxpcHNvaWQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVjdGFuZ2xlIiwgcmVjdGFuZ2xlKTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBSZWN0YW5nbGVfZGVmYXVsdC5zdWJzYW1wbGUoCiAgICAgICAgICByZWN0YW5nbGUsCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAwLAogICAgICAgICAgc3Vic2FtcGxlU2NyYXRjaAogICAgICAgICk7CiAgICAgICAgY29uc3QgYnMgPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmZyb21Qb2ludHMocG9zaXRpb25zKTsKICAgICAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZShicy5jZW50ZXIpIDwgMC4xICogZWxsaXBzb2lkLm1pbmltdW1SYWRpdXMpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVIb3Jpem9uQ3VsbGluZ1BvaW50KGJzLmNlbnRlciwgcG9zaXRpb25zLCByZXN1bHQpOwogICAgICB9OwogICAgICBzY3JhdGNoRWxsaXBzb2lkU2hydW5rUmFkaWkgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHBvc2l0aW9uU2NyYXRjaDUgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjYWxlZFNwYWNlU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZGlyZWN0aW9uU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZGlyZWN0aW9uVG9Qb2ludFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEVsbGlwc29pZGFsT2NjbHVkZXJfZGVmYXVsdCA9IEVsbGlwc29pZGFsT2NjbHVkZXI7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9UZXJyYWluRXhhZ2dlcmF0aW9uLmpzCiAgdmFyIFRlcnJhaW5FeGFnZ2VyYXRpb24sIHNjcmF0Y2hDYXJ0b2dyYXBoaWM2LCBUZXJyYWluRXhhZ2dlcmF0aW9uX2RlZmF1bHQ7CiAgdmFyIGluaXRfVGVycmFpbkV4YWdnZXJhdGlvbiA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVGVycmFpbkV4YWdnZXJhdGlvbi5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBUZXJyYWluRXhhZ2dlcmF0aW9uID0ge307CiAgICAgIFRlcnJhaW5FeGFnZ2VyYXRpb24uZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oaGVpZ2h0LCBzY2FsZSwgcmVsYXRpdmVIZWlnaHQpIHsKICAgICAgICByZXR1cm4gKGhlaWdodCAtIHJlbGF0aXZlSGVpZ2h0KSAqIHNjYWxlICsgcmVsYXRpdmVIZWlnaHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWM2ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBUZXJyYWluRXhhZ2dlcmF0aW9uLmdldFBvc2l0aW9uID0gZnVuY3Rpb24ocG9zaXRpb24sIGVsbGlwc29pZCwgdGVycmFpbkV4YWdnZXJhdGlvbiwgdGVycmFpbkV4YWdnZXJhdGlvblJlbGF0aXZlSGVpZ2h0LCByZXN1bHQpIHsKICAgICAgICBjb25zdCBjYXJ0b2dyYXBoaWMyID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKAogICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljNgogICAgICAgICk7CiAgICAgICAgY29uc3QgbmV3SGVpZ2h0ID0gVGVycmFpbkV4YWdnZXJhdGlvbi5nZXRIZWlnaHQoCiAgICAgICAgICBjYXJ0b2dyYXBoaWMyLmhlaWdodCwKICAgICAgICAgIHRlcnJhaW5FeGFnZ2VyYXRpb24sCiAgICAgICAgICB0ZXJyYWluRXhhZ2dlcmF0aW9uUmVsYXRpdmVIZWlnaHQKICAgICAgICApOwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbVJhZGlhbnMoCiAgICAgICAgICBjYXJ0b2dyYXBoaWMyLmxvbmdpdHVkZSwKICAgICAgICAgIGNhcnRvZ3JhcGhpYzIubGF0aXR1ZGUsCiAgICAgICAgICBuZXdIZWlnaHQsCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICByZXN1bHQKICAgICAgICApOwogICAgICB9OwogICAgICBUZXJyYWluRXhhZ2dlcmF0aW9uX2RlZmF1bHQgPSBUZXJyYWluRXhhZ2dlcmF0aW9uOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVGVycmFpblF1YW50aXphdGlvbi5qcwogIHZhciBUZXJyYWluUXVhbnRpemF0aW9uLCBUZXJyYWluUXVhbnRpemF0aW9uX2RlZmF1bHQ7CiAgdmFyIGluaXRfVGVycmFpblF1YW50aXphdGlvbiA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVGVycmFpblF1YW50aXphdGlvbi5qcyIoKSB7CiAgICAgIFRlcnJhaW5RdWFudGl6YXRpb24gPSB7CiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIHZlcnRpY2VzIGFyZSBub3QgY29tcHJlc3NlZC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgTk9ORTogMCwKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgdmVydGljZXMgYXJlIGNvbXByZXNzZWQgdG8gMTIgYml0cy4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgQklUUzEyOiAxCiAgICAgIH07CiAgICAgIFRlcnJhaW5RdWFudGl6YXRpb25fZGVmYXVsdCA9IE9iamVjdC5mcmVlemUoVGVycmFpblF1YW50aXphdGlvbik7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9UZXJyYWluRW5jb2RpbmcuanMKICBmdW5jdGlvbiBUZXJyYWluRW5jb2RpbmcoY2VudGVyLCBheGlzQWxpZ25lZEJvdW5kaW5nQm94LCBtaW5pbXVtSGVpZ2h0LCBtYXhpbXVtSGVpZ2h0LCBmcm9tRU5VLCBoYXNWZXJ0ZXhOb3JtYWxzLCBoYXNXZWJNZXJjYXRvclQsIGhhc0dlb2RldGljU3VyZmFjZU5vcm1hbHMsIGV4YWdnZXJhdGlvbiwgZXhhZ2dlcmF0aW9uUmVsYXRpdmVIZWlnaHQpIHsKICAgIGxldCBxdWFudGl6YXRpb24gPSBUZXJyYWluUXVhbnRpemF0aW9uX2RlZmF1bHQuTk9ORTsKICAgIGxldCB0b0VOVTsKICAgIGxldCBtYXRyaXg7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGF4aXNBbGlnbmVkQm91bmRpbmdCb3gpICYmIGRlZmluZWRfZGVmYXVsdChtaW5pbXVtSGVpZ2h0KSAmJiBkZWZpbmVkX2RlZmF1bHQobWF4aW11bUhlaWdodCkgJiYgZGVmaW5lZF9kZWZhdWx0KGZyb21FTlUpKSB7CiAgICAgIGNvbnN0IG1pbmltdW0gPSBheGlzQWxpZ25lZEJvdW5kaW5nQm94Lm1pbmltdW07CiAgICAgIGNvbnN0IG1heGltdW0gPSBheGlzQWxpZ25lZEJvdW5kaW5nQm94Lm1heGltdW07CiAgICAgIGNvbnN0IGRpbWVuc2lvbnMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgbWF4aW11bSwKICAgICAgICBtaW5pbXVtLAogICAgICAgIGNhcnRlc2lhbjNEaW1TY3JhdGNoCiAgICAgICk7CiAgICAgIGNvbnN0IGhEaW0gPSBtYXhpbXVtSGVpZ2h0IC0gbWluaW11bUhlaWdodDsKICAgICAgY29uc3QgbWF4RGltID0gTWF0aC5tYXgoQ2FydGVzaWFuM19kZWZhdWx0Lm1heGltdW1Db21wb25lbnQoZGltZW5zaW9ucyksIGhEaW0pOwogICAgICBpZiAobWF4RGltIDwgU0hJRlRfTEVGVF8xMiAtIDEpIHsKICAgICAgICBxdWFudGl6YXRpb24gPSBUZXJyYWluUXVhbnRpemF0aW9uX2RlZmF1bHQuQklUUzEyOwogICAgICB9IGVsc2UgewogICAgICAgIHF1YW50aXphdGlvbiA9IFRlcnJhaW5RdWFudGl6YXRpb25fZGVmYXVsdC5OT05FOwogICAgICB9CiAgICAgIHRvRU5VID0gTWF0cml4NF9kZWZhdWx0LmludmVyc2VUcmFuc2Zvcm1hdGlvbihmcm9tRU5VLCBuZXcgTWF0cml4NF9kZWZhdWx0KCkpOwogICAgICBjb25zdCB0cmFuc2xhdGlvbjIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKG1pbmltdW0sIGNhcnRlc2lhbjNTY3JhdGNoKTsKICAgICAgTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5KAogICAgICAgIE1hdHJpeDRfZGVmYXVsdC5mcm9tVHJhbnNsYXRpb24odHJhbnNsYXRpb24yLCBtYXRyaXg0U2NyYXRjaCksCiAgICAgICAgdG9FTlUsCiAgICAgICAgdG9FTlUKICAgICAgKTsKICAgICAgY29uc3Qgc2NhbGUgPSBjYXJ0ZXNpYW4zU2NyYXRjaDsKICAgICAgc2NhbGUueCA9IDEgLyBkaW1lbnNpb25zLng7CiAgICAgIHNjYWxlLnkgPSAxIC8gZGltZW5zaW9ucy55OwogICAgICBzY2FsZS56ID0gMSAvIGRpbWVuc2lvbnMuejsKICAgICAgTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5KE1hdHJpeDRfZGVmYXVsdC5mcm9tU2NhbGUoc2NhbGUsIG1hdHJpeDRTY3JhdGNoKSwgdG9FTlUsIHRvRU5VKTsKICAgICAgbWF0cml4ID0gTWF0cml4NF9kZWZhdWx0LmNsb25lKGZyb21FTlUpOwogICAgICBNYXRyaXg0X2RlZmF1bHQuc2V0VHJhbnNsYXRpb24obWF0cml4LCBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgbWF0cml4KTsKICAgICAgZnJvbUVOVSA9IE1hdHJpeDRfZGVmYXVsdC5jbG9uZShmcm9tRU5VLCBuZXcgTWF0cml4NF9kZWZhdWx0KCkpOwogICAgICBjb25zdCB0cmFuc2xhdGlvbk1hdHJpeCA9IE1hdHJpeDRfZGVmYXVsdC5mcm9tVHJhbnNsYXRpb24obWluaW11bSwgbWF0cml4NFNjcmF0Y2gpOwogICAgICBjb25zdCBzY2FsZU1hdHJpeDIgPSBNYXRyaXg0X2RlZmF1bHQuZnJvbVNjYWxlKGRpbWVuc2lvbnMsIG1hdHJpeDRTY3JhdGNoMik7CiAgICAgIGNvbnN0IHN0ID0gTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5KHRyYW5zbGF0aW9uTWF0cml4LCBzY2FsZU1hdHJpeDIsIG1hdHJpeDRTY3JhdGNoKTsKICAgICAgTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5KGZyb21FTlUsIHN0LCBmcm9tRU5VKTsKICAgICAgTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5KG1hdHJpeCwgc3QsIG1hdHJpeCk7CiAgICB9CiAgICB0aGlzLnF1YW50aXphdGlvbiA9IHF1YW50aXphdGlvbjsKICAgIHRoaXMubWluaW11bUhlaWdodCA9IG1pbmltdW1IZWlnaHQ7CiAgICB0aGlzLm1heGltdW1IZWlnaHQgPSBtYXhpbXVtSGVpZ2h0OwogICAgdGhpcy5jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY2VudGVyKTsKICAgIHRoaXMudG9TY2FsZWRFTlUgPSB0b0VOVTsKICAgIHRoaXMuZnJvbVNjYWxlZEVOVSA9IGZyb21FTlU7CiAgICB0aGlzLm1hdHJpeCA9IG1hdHJpeDsKICAgIHRoaXMuaGFzVmVydGV4Tm9ybWFscyA9IGhhc1ZlcnRleE5vcm1hbHM7CiAgICB0aGlzLmhhc1dlYk1lcmNhdG9yVCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGhhc1dlYk1lcmNhdG9yVCwgZmFsc2UpOwogICAgdGhpcy5oYXNHZW9kZXRpY1N1cmZhY2VOb3JtYWxzID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgIGhhc0dlb2RldGljU3VyZmFjZU5vcm1hbHMsCiAgICAgIGZhbHNlCiAgICApOwogICAgdGhpcy5leGFnZ2VyYXRpb24gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChleGFnZ2VyYXRpb24sIDEpOwogICAgdGhpcy5leGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICBleGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodCwKICAgICAgMAogICAgKTsKICAgIHRoaXMuc3RyaWRlID0gMDsKICAgIHRoaXMuX29mZnNldEdlb2RldGljU3VyZmFjZU5vcm1hbCA9IDA7CiAgICB0aGlzLl9vZmZzZXRWZXJ0ZXhOb3JtYWwgPSAwOwogICAgdGhpcy5fY2FsY3VsYXRlU3RyaWRlQW5kT2Zmc2V0cygpOwogIH0KICB2YXIgY2FydGVzaWFuM1NjcmF0Y2gsIGNhcnRlc2lhbjNEaW1TY3JhdGNoLCBjYXJ0ZXNpYW4yU2NyYXRjaCwgbWF0cml4NFNjcmF0Y2gsIG1hdHJpeDRTY3JhdGNoMiwgU0hJRlRfTEVGVF8xMiwgc2NyYXRjaFBvc2l0aW9uNiwgc2NyYXRjaEdlb2RldGljU3VyZmFjZU5vcm1hbCwgYXR0cmlidXRlc0luZGljZXNOb25lLCBhdHRyaWJ1dGVzSW5kaWNlc0JpdHMxMiwgVGVycmFpbkVuY29kaW5nX2RlZmF1bHQ7CiAgdmFyIGluaXRfVGVycmFpbkVuY29kaW5nID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9UZXJyYWluRW5jb2RpbmcuanMiKCkgewogICAgICBpbml0X0F0dHJpYnV0ZUNvbXByZXNzaW9uKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfTWF0cml4NCgpOwogICAgICBpbml0X1RlcnJhaW5FeGFnZ2VyYXRpb24oKTsKICAgICAgaW5pdF9UZXJyYWluUXVhbnRpemF0aW9uKCk7CiAgICAgIGNhcnRlc2lhbjNTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjYXJ0ZXNpYW4zRGltU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuMlNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIG1hdHJpeDRTY3JhdGNoID0gbmV3IE1hdHJpeDRfZGVmYXVsdCgpOwogICAgICBtYXRyaXg0U2NyYXRjaDIgPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgICAgIFNISUZUX0xFRlRfMTIgPSBNYXRoLnBvdygyLCAxMik7CiAgICAgIFRlcnJhaW5FbmNvZGluZy5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24odmVydGV4QnVmZmVyLCBidWZmZXJJbmRleCwgcG9zaXRpb24sIHV2LCBoZWlnaHQsIG5vcm1hbFRvUGFjaywgd2ViTWVyY2F0b3JULCBnZW9kZXRpY1N1cmZhY2VOb3JtYWwpIHsKICAgICAgICBjb25zdCB1MyA9IHV2Lng7CiAgICAgICAgY29uc3QgdjMgPSB1di55OwogICAgICAgIGlmICh0aGlzLnF1YW50aXphdGlvbiA9PT0gVGVycmFpblF1YW50aXphdGlvbl9kZWZhdWx0LkJJVFMxMikgewogICAgICAgICAgcG9zaXRpb24gPSBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVBvaW50KAogICAgICAgICAgICB0aGlzLnRvU2NhbGVkRU5VLAogICAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgICAgY2FydGVzaWFuM1NjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgICBwb3NpdGlvbi54ID0gTWF0aF9kZWZhdWx0LmNsYW1wKHBvc2l0aW9uLngsIDAsIDEpOwogICAgICAgICAgcG9zaXRpb24ueSA9IE1hdGhfZGVmYXVsdC5jbGFtcChwb3NpdGlvbi55LCAwLCAxKTsKICAgICAgICAgIHBvc2l0aW9uLnogPSBNYXRoX2RlZmF1bHQuY2xhbXAocG9zaXRpb24ueiwgMCwgMSk7CiAgICAgICAgICBjb25zdCBoRGltID0gdGhpcy5tYXhpbXVtSGVpZ2h0IC0gdGhpcy5taW5pbXVtSGVpZ2h0OwogICAgICAgICAgY29uc3QgaCA9IE1hdGhfZGVmYXVsdC5jbGFtcCgoaGVpZ2h0IC0gdGhpcy5taW5pbXVtSGVpZ2h0KSAvIGhEaW0sIDAsIDEpOwogICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0LmZyb21FbGVtZW50cyhwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBjYXJ0ZXNpYW4yU2NyYXRjaCk7CiAgICAgICAgICBjb25zdCBjb21wcmVzc2VkMCA9IEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQuY29tcHJlc3NUZXh0dXJlQ29vcmRpbmF0ZXMoCiAgICAgICAgICAgIGNhcnRlc2lhbjJTY3JhdGNoCiAgICAgICAgICApOwogICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0LmZyb21FbGVtZW50cyhwb3NpdGlvbi56LCBoLCBjYXJ0ZXNpYW4yU2NyYXRjaCk7CiAgICAgICAgICBjb25zdCBjb21wcmVzc2VkMSA9IEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQuY29tcHJlc3NUZXh0dXJlQ29vcmRpbmF0ZXMoCiAgICAgICAgICAgIGNhcnRlc2lhbjJTY3JhdGNoCiAgICAgICAgICApOwogICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0LmZyb21FbGVtZW50cyh1MywgdjMsIGNhcnRlc2lhbjJTY3JhdGNoKTsKICAgICAgICAgIGNvbnN0IGNvbXByZXNzZWQyID0gQXR0cmlidXRlQ29tcHJlc3Npb25fZGVmYXVsdC5jb21wcmVzc1RleHR1cmVDb29yZGluYXRlcygKICAgICAgICAgICAgY2FydGVzaWFuMlNjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgICB2ZXJ0ZXhCdWZmZXJbYnVmZmVySW5kZXgrK10gPSBjb21wcmVzc2VkMDsKICAgICAgICAgIHZlcnRleEJ1ZmZlcltidWZmZXJJbmRleCsrXSA9IGNvbXByZXNzZWQxOwogICAgICAgICAgdmVydGV4QnVmZmVyW2J1ZmZlckluZGV4KytdID0gY29tcHJlc3NlZDI7CiAgICAgICAgICBpZiAodGhpcy5oYXNXZWJNZXJjYXRvclQpIHsKICAgICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0LmZyb21FbGVtZW50cyh3ZWJNZXJjYXRvclQsIDAsIGNhcnRlc2lhbjJTY3JhdGNoKTsKICAgICAgICAgICAgY29uc3QgY29tcHJlc3NlZDMgPSBBdHRyaWJ1dGVDb21wcmVzc2lvbl9kZWZhdWx0LmNvbXByZXNzVGV4dHVyZUNvb3JkaW5hdGVzKAogICAgICAgICAgICAgIGNhcnRlc2lhbjJTY3JhdGNoCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHZlcnRleEJ1ZmZlcltidWZmZXJJbmRleCsrXSA9IGNvbXByZXNzZWQzOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocG9zaXRpb24sIHRoaXMuY2VudGVyLCBjYXJ0ZXNpYW4zU2NyYXRjaCk7CiAgICAgICAgICB2ZXJ0ZXhCdWZmZXJbYnVmZmVySW5kZXgrK10gPSBjYXJ0ZXNpYW4zU2NyYXRjaC54OwogICAgICAgICAgdmVydGV4QnVmZmVyW2J1ZmZlckluZGV4KytdID0gY2FydGVzaWFuM1NjcmF0Y2gueTsKICAgICAgICAgIHZlcnRleEJ1ZmZlcltidWZmZXJJbmRleCsrXSA9IGNhcnRlc2lhbjNTY3JhdGNoLno7CiAgICAgICAgICB2ZXJ0ZXhCdWZmZXJbYnVmZmVySW5kZXgrK10gPSBoZWlnaHQ7CiAgICAgICAgICB2ZXJ0ZXhCdWZmZXJbYnVmZmVySW5kZXgrK10gPSB1MzsKICAgICAgICAgIHZlcnRleEJ1ZmZlcltidWZmZXJJbmRleCsrXSA9IHYzOwogICAgICAgICAgaWYgKHRoaXMuaGFzV2ViTWVyY2F0b3JUKSB7CiAgICAgICAgICAgIHZlcnRleEJ1ZmZlcltidWZmZXJJbmRleCsrXSA9IHdlYk1lcmNhdG9yVDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMuaGFzVmVydGV4Tm9ybWFscykgewogICAgICAgICAgdmVydGV4QnVmZmVyW2J1ZmZlckluZGV4KytdID0gQXR0cmlidXRlQ29tcHJlc3Npb25fZGVmYXVsdC5vY3RQYWNrRmxvYXQoCiAgICAgICAgICAgIG5vcm1hbFRvUGFjawogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMuaGFzR2VvZGV0aWNTdXJmYWNlTm9ybWFscykgewogICAgICAgICAgdmVydGV4QnVmZmVyW2J1ZmZlckluZGV4KytdID0gZ2VvZGV0aWNTdXJmYWNlTm9ybWFsLng7CiAgICAgICAgICB2ZXJ0ZXhCdWZmZXJbYnVmZmVySW5kZXgrK10gPSBnZW9kZXRpY1N1cmZhY2VOb3JtYWwueTsKICAgICAgICAgIHZlcnRleEJ1ZmZlcltidWZmZXJJbmRleCsrXSA9IGdlb2RldGljU3VyZmFjZU5vcm1hbC56OwogICAgICAgIH0KICAgICAgICByZXR1cm4gYnVmZmVySW5kZXg7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hQb3NpdGlvbjYgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hHZW9kZXRpY1N1cmZhY2VOb3JtYWwgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIFRlcnJhaW5FbmNvZGluZy5wcm90b3R5cGUuYWRkR2VvZGV0aWNTdXJmYWNlTm9ybWFscyA9IGZ1bmN0aW9uKG9sZEJ1ZmZlciwgbmV3QnVmZmVyLCBlbGxpcHNvaWQpIHsKICAgICAgICBpZiAodGhpcy5oYXNHZW9kZXRpY1N1cmZhY2VOb3JtYWxzKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IG9sZFN0cmlkZSA9IHRoaXMuc3RyaWRlOwogICAgICAgIGNvbnN0IHZlcnRleENvdW50ID0gb2xkQnVmZmVyLmxlbmd0aCAvIG9sZFN0cmlkZTsKICAgICAgICB0aGlzLmhhc0dlb2RldGljU3VyZmFjZU5vcm1hbHMgPSB0cnVlOwogICAgICAgIHRoaXMuX2NhbGN1bGF0ZVN0cmlkZUFuZE9mZnNldHMoKTsKICAgICAgICBjb25zdCBuZXdTdHJpZGUgPSB0aGlzLnN0cmlkZTsKICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdmVydGV4Q291bnQ7IGluZGV4KyspIHsKICAgICAgICAgIGZvciAobGV0IG9mZnNldCA9IDA7IG9mZnNldCA8IG9sZFN0cmlkZTsgb2Zmc2V0KyspIHsKICAgICAgICAgICAgY29uc3Qgb2xkSW5kZXggPSBpbmRleCAqIG9sZFN0cmlkZSArIG9mZnNldDsKICAgICAgICAgICAgY29uc3QgbmV3SW5kZXggPSBpbmRleCAqIG5ld1N0cmlkZSArIG9mZnNldDsKICAgICAgICAgICAgbmV3QnVmZmVyW25ld0luZGV4XSA9IG9sZEJ1ZmZlcltvbGRJbmRleF07CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZGVjb2RlUG9zaXRpb24obmV3QnVmZmVyLCBpbmRleCwgc2NyYXRjaFBvc2l0aW9uNik7CiAgICAgICAgICBjb25zdCBnZW9kZXRpY1N1cmZhY2VOb3JtYWwgPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKAogICAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgICAgc2NyYXRjaEdlb2RldGljU3VyZmFjZU5vcm1hbAogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IGJ1ZmZlckluZGV4ID0gaW5kZXggKiBuZXdTdHJpZGUgKyB0aGlzLl9vZmZzZXRHZW9kZXRpY1N1cmZhY2VOb3JtYWw7CiAgICAgICAgICBuZXdCdWZmZXJbYnVmZmVySW5kZXhdID0gZ2VvZGV0aWNTdXJmYWNlTm9ybWFsLng7CiAgICAgICAgICBuZXdCdWZmZXJbYnVmZmVySW5kZXggKyAxXSA9IGdlb2RldGljU3VyZmFjZU5vcm1hbC55OwogICAgICAgICAgbmV3QnVmZmVyW2J1ZmZlckluZGV4ICsgMl0gPSBnZW9kZXRpY1N1cmZhY2VOb3JtYWwuejsKICAgICAgICB9CiAgICAgIH07CiAgICAgIFRlcnJhaW5FbmNvZGluZy5wcm90b3R5cGUucmVtb3ZlR2VvZGV0aWNTdXJmYWNlTm9ybWFscyA9IGZ1bmN0aW9uKG9sZEJ1ZmZlciwgbmV3QnVmZmVyKSB7CiAgICAgICAgaWYgKCF0aGlzLmhhc0dlb2RldGljU3VyZmFjZU5vcm1hbHMpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3Qgb2xkU3RyaWRlID0gdGhpcy5zdHJpZGU7CiAgICAgICAgY29uc3QgdmVydGV4Q291bnQgPSBvbGRCdWZmZXIubGVuZ3RoIC8gb2xkU3RyaWRlOwogICAgICAgIHRoaXMuaGFzR2VvZGV0aWNTdXJmYWNlTm9ybWFscyA9IGZhbHNlOwogICAgICAgIHRoaXMuX2NhbGN1bGF0ZVN0cmlkZUFuZE9mZnNldHMoKTsKICAgICAgICBjb25zdCBuZXdTdHJpZGUgPSB0aGlzLnN0cmlkZTsKICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdmVydGV4Q291bnQ7IGluZGV4KyspIHsKICAgICAgICAgIGZvciAobGV0IG9mZnNldCA9IDA7IG9mZnNldCA8IG5ld1N0cmlkZTsgb2Zmc2V0KyspIHsKICAgICAgICAgICAgY29uc3Qgb2xkSW5kZXggPSBpbmRleCAqIG9sZFN0cmlkZSArIG9mZnNldDsKICAgICAgICAgICAgY29uc3QgbmV3SW5kZXggPSBpbmRleCAqIG5ld1N0cmlkZSArIG9mZnNldDsKICAgICAgICAgICAgbmV3QnVmZmVyW25ld0luZGV4XSA9IG9sZEJ1ZmZlcltvbGRJbmRleF07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwogICAgICBUZXJyYWluRW5jb2RpbmcucHJvdG90eXBlLmRlY29kZVBvc2l0aW9uID0gZnVuY3Rpb24oYnVmZmVyLCBpbmRleCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBpbmRleCAqPSB0aGlzLnN0cmlkZTsKICAgICAgICBpZiAodGhpcy5xdWFudGl6YXRpb24gPT09IFRlcnJhaW5RdWFudGl6YXRpb25fZGVmYXVsdC5CSVRTMTIpIHsKICAgICAgICAgIGNvbnN0IHh5ID0gQXR0cmlidXRlQ29tcHJlc3Npb25fZGVmYXVsdC5kZWNvbXByZXNzVGV4dHVyZUNvb3JkaW5hdGVzKAogICAgICAgICAgICBidWZmZXJbaW5kZXhdLAogICAgICAgICAgICBjYXJ0ZXNpYW4yU2NyYXRjaAogICAgICAgICAgKTsKICAgICAgICAgIHJlc3VsdC54ID0geHkueDsKICAgICAgICAgIHJlc3VsdC55ID0geHkueTsKICAgICAgICAgIGNvbnN0IHpoID0gQXR0cmlidXRlQ29tcHJlc3Npb25fZGVmYXVsdC5kZWNvbXByZXNzVGV4dHVyZUNvb3JkaW5hdGVzKAogICAgICAgICAgICBidWZmZXJbaW5kZXggKyAxXSwKICAgICAgICAgICAgY2FydGVzaWFuMlNjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgICByZXN1bHQueiA9IHpoLng7CiAgICAgICAgICByZXR1cm4gTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlQb2ludCh0aGlzLmZyb21TY2FsZWRFTlUsIHJlc3VsdCwgcmVzdWx0KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSBidWZmZXJbaW5kZXhdOwogICAgICAgIHJlc3VsdC55ID0gYnVmZmVyW2luZGV4ICsgMV07CiAgICAgICAgcmVzdWx0LnogPSBidWZmZXJbaW5kZXggKyAyXTsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuM19kZWZhdWx0LmFkZChyZXN1bHQsIHRoaXMuY2VudGVyLCByZXN1bHQpOwogICAgICB9OwogICAgICBUZXJyYWluRW5jb2RpbmcucHJvdG90eXBlLmdldEV4YWdnZXJhdGVkUG9zaXRpb24gPSBmdW5jdGlvbihidWZmZXIsIGluZGV4LCByZXN1bHQpIHsKICAgICAgICByZXN1bHQgPSB0aGlzLmRlY29kZVBvc2l0aW9uKGJ1ZmZlciwgaW5kZXgsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgZXhhZ2dlcmF0aW9uID0gdGhpcy5leGFnZ2VyYXRpb247CiAgICAgICAgY29uc3QgZXhhZ2dlcmF0aW9uUmVsYXRpdmVIZWlnaHQgPSB0aGlzLmV4YWdnZXJhdGlvblJlbGF0aXZlSGVpZ2h0OwogICAgICAgIGNvbnN0IGhhc0V4YWdnZXJhdGlvbiA9IGV4YWdnZXJhdGlvbiAhPT0gMTsKICAgICAgICBpZiAoaGFzRXhhZ2dlcmF0aW9uICYmIHRoaXMuaGFzR2VvZGV0aWNTdXJmYWNlTm9ybWFscykgewogICAgICAgICAgY29uc3QgZ2VvZGV0aWNTdXJmYWNlTm9ybWFsID0gdGhpcy5kZWNvZGVHZW9kZXRpY1N1cmZhY2VOb3JtYWwoCiAgICAgICAgICAgIGJ1ZmZlciwKICAgICAgICAgICAgaW5kZXgsCiAgICAgICAgICAgIHNjcmF0Y2hHZW9kZXRpY1N1cmZhY2VOb3JtYWwKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCByYXdIZWlnaHQgPSB0aGlzLmRlY29kZUhlaWdodChidWZmZXIsIGluZGV4KTsKICAgICAgICAgIGNvbnN0IGhlaWdodERpZmZlcmVuY2UgPSBUZXJyYWluRXhhZ2dlcmF0aW9uX2RlZmF1bHQuZ2V0SGVpZ2h0KAogICAgICAgICAgICByYXdIZWlnaHQsCiAgICAgICAgICAgIGV4YWdnZXJhdGlvbiwKICAgICAgICAgICAgZXhhZ2dlcmF0aW9uUmVsYXRpdmVIZWlnaHQKICAgICAgICAgICkgLSByYXdIZWlnaHQ7CiAgICAgICAgICByZXN1bHQueCArPSBnZW9kZXRpY1N1cmZhY2VOb3JtYWwueCAqIGhlaWdodERpZmZlcmVuY2U7CiAgICAgICAgICByZXN1bHQueSArPSBnZW9kZXRpY1N1cmZhY2VOb3JtYWwueSAqIGhlaWdodERpZmZlcmVuY2U7CiAgICAgICAgICByZXN1bHQueiArPSBnZW9kZXRpY1N1cmZhY2VOb3JtYWwueiAqIGhlaWdodERpZmZlcmVuY2U7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFRlcnJhaW5FbmNvZGluZy5wcm90b3R5cGUuZGVjb2RlVGV4dHVyZUNvb3JkaW5hdGVzID0gZnVuY3Rpb24oYnVmZmVyLCBpbmRleCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBpbmRleCAqPSB0aGlzLnN0cmlkZTsKICAgICAgICBpZiAodGhpcy5xdWFudGl6YXRpb24gPT09IFRlcnJhaW5RdWFudGl6YXRpb25fZGVmYXVsdC5CSVRTMTIpIHsKICAgICAgICAgIHJldHVybiBBdHRyaWJ1dGVDb21wcmVzc2lvbl9kZWZhdWx0LmRlY29tcHJlc3NUZXh0dXJlQ29vcmRpbmF0ZXMoCiAgICAgICAgICAgIGJ1ZmZlcltpbmRleCArIDJdLAogICAgICAgICAgICByZXN1bHQKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUVsZW1lbnRzKGJ1ZmZlcltpbmRleCArIDRdLCBidWZmZXJbaW5kZXggKyA1XSwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgVGVycmFpbkVuY29kaW5nLnByb3RvdHlwZS5kZWNvZGVIZWlnaHQgPSBmdW5jdGlvbihidWZmZXIsIGluZGV4KSB7CiAgICAgICAgaW5kZXggKj0gdGhpcy5zdHJpZGU7CiAgICAgICAgaWYgKHRoaXMucXVhbnRpemF0aW9uID09PSBUZXJyYWluUXVhbnRpemF0aW9uX2RlZmF1bHQuQklUUzEyKSB7CiAgICAgICAgICBjb25zdCB6aCA9IEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQuZGVjb21wcmVzc1RleHR1cmVDb29yZGluYXRlcygKICAgICAgICAgICAgYnVmZmVyW2luZGV4ICsgMV0sCiAgICAgICAgICAgIGNhcnRlc2lhbjJTY3JhdGNoCiAgICAgICAgICApOwogICAgICAgICAgcmV0dXJuIHpoLnkgKiAodGhpcy5tYXhpbXVtSGVpZ2h0IC0gdGhpcy5taW5pbXVtSGVpZ2h0KSArIHRoaXMubWluaW11bUhlaWdodDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGJ1ZmZlcltpbmRleCArIDNdOwogICAgICB9OwogICAgICBUZXJyYWluRW5jb2RpbmcucHJvdG90eXBlLmRlY29kZVdlYk1lcmNhdG9yVCA9IGZ1bmN0aW9uKGJ1ZmZlciwgaW5kZXgpIHsKICAgICAgICBpbmRleCAqPSB0aGlzLnN0cmlkZTsKICAgICAgICBpZiAodGhpcy5xdWFudGl6YXRpb24gPT09IFRlcnJhaW5RdWFudGl6YXRpb25fZGVmYXVsdC5CSVRTMTIpIHsKICAgICAgICAgIHJldHVybiBBdHRyaWJ1dGVDb21wcmVzc2lvbl9kZWZhdWx0LmRlY29tcHJlc3NUZXh0dXJlQ29vcmRpbmF0ZXMoCiAgICAgICAgICAgIGJ1ZmZlcltpbmRleCArIDNdLAogICAgICAgICAgICBjYXJ0ZXNpYW4yU2NyYXRjaAogICAgICAgICAgKS54OwogICAgICAgIH0KICAgICAgICByZXR1cm4gYnVmZmVyW2luZGV4ICsgNl07CiAgICAgIH07CiAgICAgIFRlcnJhaW5FbmNvZGluZy5wcm90b3R5cGUuZ2V0T2N0RW5jb2RlZE5vcm1hbCA9IGZ1bmN0aW9uKGJ1ZmZlciwgaW5kZXgsIHJlc3VsdCkgewogICAgICAgIGluZGV4ID0gaW5kZXggKiB0aGlzLnN0cmlkZSArIHRoaXMuX29mZnNldFZlcnRleE5vcm1hbDsKICAgICAgICBjb25zdCB0ZW1wID0gYnVmZmVyW2luZGV4XSAvIDI1NjsKICAgICAgICBjb25zdCB4ID0gTWF0aC5mbG9vcih0ZW1wKTsKICAgICAgICBjb25zdCB5ID0gKHRlbXAgLSB4KSAqIDI1NjsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuMl9kZWZhdWx0LmZyb21FbGVtZW50cyh4LCB5LCByZXN1bHQpOwogICAgICB9OwogICAgICBUZXJyYWluRW5jb2RpbmcucHJvdG90eXBlLmRlY29kZUdlb2RldGljU3VyZmFjZU5vcm1hbCA9IGZ1bmN0aW9uKGJ1ZmZlciwgaW5kZXgsIHJlc3VsdCkgewogICAgICAgIGluZGV4ID0gaW5kZXggKiB0aGlzLnN0cmlkZSArIHRoaXMuX29mZnNldEdlb2RldGljU3VyZmFjZU5vcm1hbDsKICAgICAgICByZXN1bHQueCA9IGJ1ZmZlcltpbmRleF07CiAgICAgICAgcmVzdWx0LnkgPSBidWZmZXJbaW5kZXggKyAxXTsKICAgICAgICByZXN1bHQueiA9IGJ1ZmZlcltpbmRleCArIDJdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFRlcnJhaW5FbmNvZGluZy5wcm90b3R5cGUuX2NhbGN1bGF0ZVN0cmlkZUFuZE9mZnNldHMgPSBmdW5jdGlvbigpIHsKICAgICAgICBsZXQgdmVydGV4U3RyaWRlID0gMDsKICAgICAgICBzd2l0Y2ggKHRoaXMucXVhbnRpemF0aW9uKSB7CiAgICAgICAgICBjYXNlIFRlcnJhaW5RdWFudGl6YXRpb25fZGVmYXVsdC5CSVRTMTI6CiAgICAgICAgICAgIHZlcnRleFN0cmlkZSArPSAzOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHZlcnRleFN0cmlkZSArPSA2OwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5oYXNXZWJNZXJjYXRvclQpIHsKICAgICAgICAgIHZlcnRleFN0cmlkZSArPSAxOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5oYXNWZXJ0ZXhOb3JtYWxzKSB7CiAgICAgICAgICB0aGlzLl9vZmZzZXRWZXJ0ZXhOb3JtYWwgPSB2ZXJ0ZXhTdHJpZGU7CiAgICAgICAgICB2ZXJ0ZXhTdHJpZGUgKz0gMTsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMuaGFzR2VvZGV0aWNTdXJmYWNlTm9ybWFscykgewogICAgICAgICAgdGhpcy5fb2Zmc2V0R2VvZGV0aWNTdXJmYWNlTm9ybWFsID0gdmVydGV4U3RyaWRlOwogICAgICAgICAgdmVydGV4U3RyaWRlICs9IDM7CiAgICAgICAgfQogICAgICAgIHRoaXMuc3RyaWRlID0gdmVydGV4U3RyaWRlOwogICAgICB9OwogICAgICBhdHRyaWJ1dGVzSW5kaWNlc05vbmUgPSB7CiAgICAgICAgcG9zaXRpb24zREFuZEhlaWdodDogMCwKICAgICAgICB0ZXh0dXJlQ29vcmRBbmRFbmNvZGVkTm9ybWFsczogMSwKICAgICAgICBnZW9kZXRpY1N1cmZhY2VOb3JtYWw6IDIKICAgICAgfTsKICAgICAgYXR0cmlidXRlc0luZGljZXNCaXRzMTIgPSB7CiAgICAgICAgY29tcHJlc3NlZDA6IDAsCiAgICAgICAgY29tcHJlc3NlZDE6IDEsCiAgICAgICAgZ2VvZGV0aWNTdXJmYWNlTm9ybWFsOiAyCiAgICAgIH07CiAgICAgIFRlcnJhaW5FbmNvZGluZy5wcm90b3R5cGUuZ2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uKGJ1ZmZlcikgewogICAgICAgIGNvbnN0IGRhdGF0eXBlID0gQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVDsKICAgICAgICBjb25zdCBzaXplSW5CeXRlcyA9IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuZ2V0U2l6ZUluQnl0ZXMoZGF0YXR5cGUpOwogICAgICAgIGNvbnN0IHN0cmlkZUluQnl0ZXMgPSB0aGlzLnN0cmlkZSAqIHNpemVJbkJ5dGVzOwogICAgICAgIGxldCBvZmZzZXRJbkJ5dGVzID0gMDsKICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gW107CiAgICAgICAgZnVuY3Rpb24gYWRkQXR0cmlidXRlKGluZGV4LCBjb21wb25lbnRzUGVyQXR0cmlidXRlKSB7CiAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2goewogICAgICAgICAgICBpbmRleCwKICAgICAgICAgICAgdmVydGV4QnVmZmVyOiBidWZmZXIsCiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBkYXRhdHlwZSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZSwKICAgICAgICAgICAgb2Zmc2V0SW5CeXRlcywKICAgICAgICAgICAgc3RyaWRlSW5CeXRlcwogICAgICAgICAgfSk7CiAgICAgICAgICBvZmZzZXRJbkJ5dGVzICs9IGNvbXBvbmVudHNQZXJBdHRyaWJ1dGUgKiBzaXplSW5CeXRlczsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMucXVhbnRpemF0aW9uID09PSBUZXJyYWluUXVhbnRpemF0aW9uX2RlZmF1bHQuTk9ORSkgewogICAgICAgICAgYWRkQXR0cmlidXRlKGF0dHJpYnV0ZXNJbmRpY2VzTm9uZS5wb3NpdGlvbjNEQW5kSGVpZ2h0LCA0KTsKICAgICAgICAgIGxldCBjb21wb25lbnRzVGV4Q29vcmRBbmROb3JtYWxzID0gMjsKICAgICAgICAgIGNvbXBvbmVudHNUZXhDb29yZEFuZE5vcm1hbHMgKz0gdGhpcy5oYXNXZWJNZXJjYXRvclQgPyAxIDogMDsKICAgICAgICAgIGNvbXBvbmVudHNUZXhDb29yZEFuZE5vcm1hbHMgKz0gdGhpcy5oYXNWZXJ0ZXhOb3JtYWxzID8gMSA6IDA7CiAgICAgICAgICBhZGRBdHRyaWJ1dGUoCiAgICAgICAgICAgIGF0dHJpYnV0ZXNJbmRpY2VzTm9uZS50ZXh0dXJlQ29vcmRBbmRFbmNvZGVkTm9ybWFscywKICAgICAgICAgICAgY29tcG9uZW50c1RleENvb3JkQW5kTm9ybWFscwogICAgICAgICAgKTsKICAgICAgICAgIGlmICh0aGlzLmhhc0dlb2RldGljU3VyZmFjZU5vcm1hbHMpIHsKICAgICAgICAgICAgYWRkQXR0cmlidXRlKGF0dHJpYnV0ZXNJbmRpY2VzTm9uZS5nZW9kZXRpY1N1cmZhY2VOb3JtYWwsIDMpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zdCB1c2luZ0F0dHJpYnV0ZTBDb21wb25lbnQ0ID0gdGhpcy5oYXNXZWJNZXJjYXRvclQgfHwgdGhpcy5oYXNWZXJ0ZXhOb3JtYWxzOwogICAgICAgICAgY29uc3QgdXNpbmdBdHRyaWJ1dGUxQ29tcG9uZW50MSA9IHRoaXMuaGFzV2ViTWVyY2F0b3JUICYmIHRoaXMuaGFzVmVydGV4Tm9ybWFsczsKICAgICAgICAgIGFkZEF0dHJpYnV0ZSgKICAgICAgICAgICAgYXR0cmlidXRlc0luZGljZXNCaXRzMTIuY29tcHJlc3NlZDAsCiAgICAgICAgICAgIHVzaW5nQXR0cmlidXRlMENvbXBvbmVudDQgPyA0IDogMwogICAgICAgICAgKTsKICAgICAgICAgIGlmICh1c2luZ0F0dHJpYnV0ZTFDb21wb25lbnQxKSB7CiAgICAgICAgICAgIGFkZEF0dHJpYnV0ZShhdHRyaWJ1dGVzSW5kaWNlc0JpdHMxMi5jb21wcmVzc2VkMSwgMSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodGhpcy5oYXNHZW9kZXRpY1N1cmZhY2VOb3JtYWxzKSB7CiAgICAgICAgICAgIGFkZEF0dHJpYnV0ZShhdHRyaWJ1dGVzSW5kaWNlc0JpdHMxMi5nZW9kZXRpY1N1cmZhY2VOb3JtYWwsIDMpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gYXR0cmlidXRlczsKICAgICAgfTsKICAgICAgVGVycmFpbkVuY29kaW5nLnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVMb2NhdGlvbnMgPSBmdW5jdGlvbigpIHsKICAgICAgICBpZiAodGhpcy5xdWFudGl6YXRpb24gPT09IFRlcnJhaW5RdWFudGl6YXRpb25fZGVmYXVsdC5OT05FKSB7CiAgICAgICAgICByZXR1cm4gYXR0cmlidXRlc0luZGljZXNOb25lOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYXR0cmlidXRlc0luZGljZXNCaXRzMTI7CiAgICAgIH07CiAgICAgIFRlcnJhaW5FbmNvZGluZy5jbG9uZSA9IGZ1bmN0aW9uKGVuY29kaW5nLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChlbmNvZGluZykpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBUZXJyYWluRW5jb2RpbmcoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnF1YW50aXphdGlvbiA9IGVuY29kaW5nLnF1YW50aXphdGlvbjsKICAgICAgICByZXN1bHQubWluaW11bUhlaWdodCA9IGVuY29kaW5nLm1pbmltdW1IZWlnaHQ7CiAgICAgICAgcmVzdWx0Lm1heGltdW1IZWlnaHQgPSBlbmNvZGluZy5tYXhpbXVtSGVpZ2h0OwogICAgICAgIHJlc3VsdC5jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoZW5jb2RpbmcuY2VudGVyKTsKICAgICAgICByZXN1bHQudG9TY2FsZWRFTlUgPSBNYXRyaXg0X2RlZmF1bHQuY2xvbmUoZW5jb2RpbmcudG9TY2FsZWRFTlUpOwogICAgICAgIHJlc3VsdC5mcm9tU2NhbGVkRU5VID0gTWF0cml4NF9kZWZhdWx0LmNsb25lKGVuY29kaW5nLmZyb21TY2FsZWRFTlUpOwogICAgICAgIHJlc3VsdC5tYXRyaXggPSBNYXRyaXg0X2RlZmF1bHQuY2xvbmUoZW5jb2RpbmcubWF0cml4KTsKICAgICAgICByZXN1bHQuaGFzVmVydGV4Tm9ybWFscyA9IGVuY29kaW5nLmhhc1ZlcnRleE5vcm1hbHM7CiAgICAgICAgcmVzdWx0Lmhhc1dlYk1lcmNhdG9yVCA9IGVuY29kaW5nLmhhc1dlYk1lcmNhdG9yVDsKICAgICAgICByZXN1bHQuaGFzR2VvZGV0aWNTdXJmYWNlTm9ybWFscyA9IGVuY29kaW5nLmhhc0dlb2RldGljU3VyZmFjZU5vcm1hbHM7CiAgICAgICAgcmVzdWx0LmV4YWdnZXJhdGlvbiA9IGVuY29kaW5nLmV4YWdnZXJhdGlvbjsKICAgICAgICByZXN1bHQuZXhhZ2dlcmF0aW9uUmVsYXRpdmVIZWlnaHQgPSBlbmNvZGluZy5leGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodDsKICAgICAgICByZXN1bHQuX2NhbGN1bGF0ZVN0cmlkZUFuZE9mZnNldHMoKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBUZXJyYWluRW5jb2RpbmdfZGVmYXVsdCA9IFRlcnJhaW5FbmNvZGluZzsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVZlcnRpY2VzRnJvbUdvb2dsZUVhcnRoRW50ZXJwcmlzZUJ1ZmZlci5qcwogIHZhciBjcmVhdGVWZXJ0aWNlc0Zyb21Hb29nbGVFYXJ0aEVudGVycHJpc2VCdWZmZXJfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZVZlcnRpY2VzRnJvbUdvb2dsZUVhcnRoRW50ZXJwcmlzZUJ1ZmZlcl9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVWZXJ0aWNlc0Zyb21Hb29nbGVFYXJ0aEVudGVycHJpc2VCdWZmZXJfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGluZGV4T2ZFcHNpbG9uKGFyciwgZWxlbSwgZWxlbVR5cGUpIHsKICAgIGVsZW1UeXBlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZWxlbVR5cGUsIE1hdGhfZGVmYXVsdCk7CiAgICBjb25zdCBjb3VudCA9IGFyci5sZW5ndGg7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyArK2kpIHsKICAgICAgaWYgKGVsZW1UeXBlLmVxdWFsc0Vwc2lsb24oYXJyW2ldLCBlbGVtLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjEyKSkgewogICAgICAgIHJldHVybiBpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gLTE7CiAgfQogIGZ1bmN0aW9uIGNyZWF0ZVZlcnRpY2VzRnJvbUdvb2dsZUVhcnRoRW50ZXJwcmlzZUJ1ZmZlcihwYXJhbWV0ZXJzLCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICBwYXJhbWV0ZXJzLmVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKHBhcmFtZXRlcnMuZWxsaXBzb2lkKTsKICAgIHBhcmFtZXRlcnMucmVjdGFuZ2xlID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2xvbmUocGFyYW1ldGVycy5yZWN0YW5nbGUpOwogICAgY29uc3Qgc3RhdGlzdGljczIgPSBwcm9jZXNzQnVmZmVyKAogICAgICBwYXJhbWV0ZXJzLmJ1ZmZlciwKICAgICAgcGFyYW1ldGVycy5yZWxhdGl2ZVRvQ2VudGVyLAogICAgICBwYXJhbWV0ZXJzLmVsbGlwc29pZCwKICAgICAgcGFyYW1ldGVycy5yZWN0YW5nbGUsCiAgICAgIHBhcmFtZXRlcnMubmF0aXZlUmVjdGFuZ2xlLAogICAgICBwYXJhbWV0ZXJzLmV4YWdnZXJhdGlvbiwKICAgICAgcGFyYW1ldGVycy5leGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodCwKICAgICAgcGFyYW1ldGVycy5za2lydEhlaWdodCwKICAgICAgcGFyYW1ldGVycy5pbmNsdWRlV2ViTWVyY2F0b3JULAogICAgICBwYXJhbWV0ZXJzLm5lZ2F0aXZlQWx0aXR1ZGVFeHBvbmVudEJpYXMsCiAgICAgIHBhcmFtZXRlcnMubmVnYXRpdmVFbGV2YXRpb25UaHJlc2hvbGQKICAgICk7CiAgICBjb25zdCB2ZXJ0aWNlcyA9IHN0YXRpc3RpY3MyLnZlcnRpY2VzOwogICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKHZlcnRpY2VzLmJ1ZmZlcik7CiAgICBjb25zdCBpbmRpY2VzID0gc3RhdGlzdGljczIuaW5kaWNlczsKICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaChpbmRpY2VzLmJ1ZmZlcik7CiAgICByZXR1cm4gewogICAgICB2ZXJ0aWNlczogdmVydGljZXMuYnVmZmVyLAogICAgICBpbmRpY2VzOiBpbmRpY2VzLmJ1ZmZlciwKICAgICAgbnVtYmVyT2ZBdHRyaWJ1dGVzOiBzdGF0aXN0aWNzMi5lbmNvZGluZy5zdHJpZGUsCiAgICAgIG1pbmltdW1IZWlnaHQ6IHN0YXRpc3RpY3MyLm1pbmltdW1IZWlnaHQsCiAgICAgIG1heGltdW1IZWlnaHQ6IHN0YXRpc3RpY3MyLm1heGltdW1IZWlnaHQsCiAgICAgIGJvdW5kaW5nU3BoZXJlM0Q6IHN0YXRpc3RpY3MyLmJvdW5kaW5nU3BoZXJlM0QsCiAgICAgIG9yaWVudGVkQm91bmRpbmdCb3g6IHN0YXRpc3RpY3MyLm9yaWVudGVkQm91bmRpbmdCb3gsCiAgICAgIG9jY2x1ZGVlUG9pbnRJblNjYWxlZFNwYWNlOiBzdGF0aXN0aWNzMi5vY2NsdWRlZVBvaW50SW5TY2FsZWRTcGFjZSwKICAgICAgZW5jb2Rpbmc6IHN0YXRpc3RpY3MyLmVuY29kaW5nLAogICAgICB2ZXJ0ZXhDb3VudFdpdGhvdXRTa2lydHM6IHN0YXRpc3RpY3MyLnZlcnRleENvdW50V2l0aG91dFNraXJ0cywKICAgICAgaW5kZXhDb3VudFdpdGhvdXRTa2lydHM6IHN0YXRpc3RpY3MyLmluZGV4Q291bnRXaXRob3V0U2tpcnRzLAogICAgICB3ZXN0SW5kaWNlc1NvdXRoVG9Ob3J0aDogc3RhdGlzdGljczIud2VzdEluZGljZXNTb3V0aFRvTm9ydGgsCiAgICAgIHNvdXRoSW5kaWNlc0Vhc3RUb1dlc3Q6IHN0YXRpc3RpY3MyLnNvdXRoSW5kaWNlc0Vhc3RUb1dlc3QsCiAgICAgIGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoOiBzdGF0aXN0aWNzMi5lYXN0SW5kaWNlc05vcnRoVG9Tb3V0aCwKICAgICAgbm9ydGhJbmRpY2VzV2VzdFRvRWFzdDogc3RhdGlzdGljczIubm9ydGhJbmRpY2VzV2VzdFRvRWFzdAogICAgfTsKICB9CiAgZnVuY3Rpb24gcHJvY2Vzc0J1ZmZlcihidWZmZXIsIHJlbGF0aXZlVG9DZW50ZXIsIGVsbGlwc29pZCwgcmVjdGFuZ2xlLCBuYXRpdmVSZWN0YW5nbGUsIGV4YWdnZXJhdGlvbiwgZXhhZ2dlcmF0aW9uUmVsYXRpdmVIZWlnaHQsIHNraXJ0SGVpZ2h0LCBpbmNsdWRlV2ViTWVyY2F0b3JULCBuZWdhdGl2ZUFsdGl0dWRlRXhwb25lbnRCaWFzLCBuZWdhdGl2ZUVsZXZhdGlvblRocmVzaG9sZCkgewogICAgbGV0IGdlb2dyYXBoaWNXZXN0OwogICAgbGV0IGdlb2dyYXBoaWNTb3V0aDsKICAgIGxldCBnZW9ncmFwaGljRWFzdDsKICAgIGxldCBnZW9ncmFwaGljTm9ydGg7CiAgICBsZXQgcmVjdGFuZ2xlV2lkdGgsIHJlY3RhbmdsZUhlaWdodDsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlY3RhbmdsZSkpIHsKICAgICAgZ2VvZ3JhcGhpY1dlc3QgPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKG5hdGl2ZVJlY3RhbmdsZS53ZXN0KTsKICAgICAgZ2VvZ3JhcGhpY1NvdXRoID0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucyhuYXRpdmVSZWN0YW5nbGUuc291dGgpOwogICAgICBnZW9ncmFwaGljRWFzdCA9IE1hdGhfZGVmYXVsdC50b1JhZGlhbnMobmF0aXZlUmVjdGFuZ2xlLmVhc3QpOwogICAgICBnZW9ncmFwaGljTm9ydGggPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKG5hdGl2ZVJlY3RhbmdsZS5ub3J0aCk7CiAgICAgIHJlY3RhbmdsZVdpZHRoID0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucyhyZWN0YW5nbGUud2lkdGgpOwogICAgICByZWN0YW5nbGVIZWlnaHQgPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKHJlY3RhbmdsZS5oZWlnaHQpOwogICAgfSBlbHNlIHsKICAgICAgZ2VvZ3JhcGhpY1dlc3QgPSByZWN0YW5nbGUud2VzdDsKICAgICAgZ2VvZ3JhcGhpY1NvdXRoID0gcmVjdGFuZ2xlLnNvdXRoOwogICAgICBnZW9ncmFwaGljRWFzdCA9IHJlY3RhbmdsZS5lYXN0OwogICAgICBnZW9ncmFwaGljTm9ydGggPSByZWN0YW5nbGUubm9ydGg7CiAgICAgIHJlY3RhbmdsZVdpZHRoID0gcmVjdGFuZ2xlLndpZHRoOwogICAgICByZWN0YW5nbGVIZWlnaHQgPSByZWN0YW5nbGUuaGVpZ2h0OwogICAgfQogICAgY29uc3QgcXVhZEJvcmRlckxhdGl0dWRlcyA9IFtnZW9ncmFwaGljU291dGgsIGdlb2dyYXBoaWNOb3J0aF07CiAgICBjb25zdCBxdWFkQm9yZGVyTG9uZ2l0dWRlcyA9IFtnZW9ncmFwaGljV2VzdCwgZ2VvZ3JhcGhpY0Vhc3RdOwogICAgY29uc3QgZnJvbUVOVSA9IFRyYW5zZm9ybXNfZGVmYXVsdC5lYXN0Tm9ydGhVcFRvRml4ZWRGcmFtZSgKICAgICAgcmVsYXRpdmVUb0NlbnRlciwKICAgICAgZWxsaXBzb2lkCiAgICApOwogICAgY29uc3QgdG9FTlUgPSBNYXRyaXg0X2RlZmF1bHQuaW52ZXJzZVRyYW5zZm9ybWF0aW9uKGZyb21FTlUsIG1hdHJpeDRTY3JhdGNoMyk7CiAgICBsZXQgc291dGhNZXJjYXRvclk7CiAgICBsZXQgb25lT3Zlck1lcmNhdG9ySGVpZ2h0OwogICAgaWYgKGluY2x1ZGVXZWJNZXJjYXRvclQpIHsKICAgICAgc291dGhNZXJjYXRvclkgPSBXZWJNZXJjYXRvclByb2plY3Rpb25fZGVmYXVsdC5nZW9kZXRpY0xhdGl0dWRlVG9NZXJjYXRvckFuZ2xlKAogICAgICAgIGdlb2dyYXBoaWNTb3V0aAogICAgICApOwogICAgICBvbmVPdmVyTWVyY2F0b3JIZWlnaHQgPSAxIC8gKFdlYk1lcmNhdG9yUHJvamVjdGlvbl9kZWZhdWx0Lmdlb2RldGljTGF0aXR1ZGVUb01lcmNhdG9yQW5nbGUoZ2VvZ3JhcGhpY05vcnRoKSAtIHNvdXRoTWVyY2F0b3JZKTsKICAgIH0KICAgIGNvbnN0IGhhc0V4YWdnZXJhdGlvbiA9IGV4YWdnZXJhdGlvbiAhPT0gMTsKICAgIGNvbnN0IGluY2x1ZGVHZW9kZXRpY1N1cmZhY2VOb3JtYWxzID0gaGFzRXhhZ2dlcmF0aW9uOwogICAgY29uc3QgZHYgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTsKICAgIGxldCBtaW5IZWlnaHQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CiAgICBsZXQgbWF4SGVpZ2h0ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgY29uc3QgbWluaW11bSA9IG1pbmltdW1TY3JhdGNoOwogICAgbWluaW11bS54ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgbWluaW11bS55ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgbWluaW11bS56ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgY29uc3QgbWF4aW11bSA9IG1heGltdW1TY3JhdGNoOwogICAgbWF4aW11bS54ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgbWF4aW11bS55ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgbWF4aW11bS56ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgbGV0IG9mZnNldCA9IDA7CiAgICBsZXQgc2l6ZSA9IDA7CiAgICBsZXQgaW5kaWNlc1NpemUgPSAwOwogICAgbGV0IHF1YWRTaXplOwogICAgbGV0IHF1YWQ7CiAgICBmb3IgKHF1YWQgPSAwOyBxdWFkIDwgNDsgKytxdWFkKSB7CiAgICAgIGxldCBvID0gb2Zmc2V0OwogICAgICBxdWFkU2l6ZSA9IGR2LmdldFVpbnQzMihvLCB0cnVlKTsKICAgICAgbyArPSBzaXplT2ZVaW50MzI7CiAgICAgIGNvbnN0IHggPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKGR2LmdldEZsb2F0NjQobywgdHJ1ZSkgKiAxODApOwogICAgICBvICs9IHNpemVPZkRvdWJsZTsKICAgICAgaWYgKGluZGV4T2ZFcHNpbG9uKHF1YWRCb3JkZXJMb25naXR1ZGVzLCB4KSA9PT0gLTEpIHsKICAgICAgICBxdWFkQm9yZGVyTG9uZ2l0dWRlcy5wdXNoKHgpOwogICAgICB9CiAgICAgIGNvbnN0IHkgPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKGR2LmdldEZsb2F0NjQobywgdHJ1ZSkgKiAxODApOwogICAgICBvICs9IHNpemVPZkRvdWJsZTsKICAgICAgaWYgKGluZGV4T2ZFcHNpbG9uKHF1YWRCb3JkZXJMYXRpdHVkZXMsIHkpID09PSAtMSkgewogICAgICAgIHF1YWRCb3JkZXJMYXRpdHVkZXMucHVzaCh5KTsKICAgICAgfQogICAgICBvICs9IDIgKiBzaXplT2ZEb3VibGU7CiAgICAgIGxldCBjID0gZHYuZ2V0SW50MzIobywgdHJ1ZSk7CiAgICAgIG8gKz0gc2l6ZU9mSW50MzI7CiAgICAgIHNpemUgKz0gYzsKICAgICAgYyA9IGR2LmdldEludDMyKG8sIHRydWUpOwogICAgICBpbmRpY2VzU2l6ZSArPSBjICogMzsKICAgICAgb2Zmc2V0ICs9IHF1YWRTaXplICsgc2l6ZU9mVWludDMyOwogICAgfQogICAgY29uc3QgcXVhZEJvcmRlclBvaW50cyA9IFtdOwogICAgY29uc3QgcXVhZEJvcmRlckluZGljZXMgPSBbXTsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBBcnJheShzaXplKTsKICAgIGNvbnN0IHV2cyA9IG5ldyBBcnJheShzaXplKTsKICAgIGNvbnN0IGhlaWdodHMgPSBuZXcgQXJyYXkoc2l6ZSk7CiAgICBjb25zdCB3ZWJNZXJjYXRvclRzID0gaW5jbHVkZVdlYk1lcmNhdG9yVCA/IG5ldyBBcnJheShzaXplKSA6IFtdOwogICAgY29uc3QgZ2VvZGV0aWNTdXJmYWNlTm9ybWFscyA9IGluY2x1ZGVHZW9kZXRpY1N1cmZhY2VOb3JtYWxzID8gbmV3IEFycmF5KHNpemUpIDogW107CiAgICBjb25zdCBpbmRpY2VzID0gbmV3IEFycmF5KGluZGljZXNTaXplKTsKICAgIGNvbnN0IHdlc3RCb3JkZXIgPSBbXTsKICAgIGNvbnN0IHNvdXRoQm9yZGVyID0gW107CiAgICBjb25zdCBlYXN0Qm9yZGVyID0gW107CiAgICBjb25zdCBub3J0aEJvcmRlciA9IFtdOwogICAgbGV0IHBvaW50T2Zmc2V0ID0gMDsKICAgIGxldCBpbmRpY2VzT2Zmc2V0ID0gMDsKICAgIG9mZnNldCA9IDA7CiAgICBmb3IgKHF1YWQgPSAwOyBxdWFkIDwgNDsgKytxdWFkKSB7CiAgICAgIHF1YWRTaXplID0gZHYuZ2V0VWludDMyKG9mZnNldCwgdHJ1ZSk7CiAgICAgIG9mZnNldCArPSBzaXplT2ZVaW50MzI7CiAgICAgIGNvbnN0IHN0YXJ0UXVhZCA9IG9mZnNldDsKICAgICAgY29uc3Qgb3JpZ2luWCA9IE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoZHYuZ2V0RmxvYXQ2NChvZmZzZXQsIHRydWUpICogMTgwKTsKICAgICAgb2Zmc2V0ICs9IHNpemVPZkRvdWJsZTsKICAgICAgY29uc3Qgb3JpZ2luWSA9IE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoZHYuZ2V0RmxvYXQ2NChvZmZzZXQsIHRydWUpICogMTgwKTsKICAgICAgb2Zmc2V0ICs9IHNpemVPZkRvdWJsZTsKICAgICAgY29uc3Qgc3RlcFggPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKGR2LmdldEZsb2F0NjQob2Zmc2V0LCB0cnVlKSAqIDE4MCk7CiAgICAgIGNvbnN0IGhhbGZTdGVwWCA9IHN0ZXBYICogMC41OwogICAgICBvZmZzZXQgKz0gc2l6ZU9mRG91YmxlOwogICAgICBjb25zdCBzdGVwWSA9IE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoZHYuZ2V0RmxvYXQ2NChvZmZzZXQsIHRydWUpICogMTgwKTsKICAgICAgY29uc3QgaGFsZlN0ZXBZID0gc3RlcFkgKiAwLjU7CiAgICAgIG9mZnNldCArPSBzaXplT2ZEb3VibGU7CiAgICAgIGNvbnN0IG51bVBvaW50cyA9IGR2LmdldEludDMyKG9mZnNldCwgdHJ1ZSk7CiAgICAgIG9mZnNldCArPSBzaXplT2ZJbnQzMjsKICAgICAgY29uc3QgbnVtRmFjZXMgPSBkdi5nZXRJbnQzMihvZmZzZXQsIHRydWUpOwogICAgICBvZmZzZXQgKz0gc2l6ZU9mSW50MzI7CiAgICAgIG9mZnNldCArPSBzaXplT2ZJbnQzMjsKICAgICAgY29uc3QgaW5kaWNlc01hcHBpbmcgPSBuZXcgQXJyYXkobnVtUG9pbnRzKTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Qb2ludHM7ICsraSkgewogICAgICAgIGNvbnN0IGxvbmdpdHVkZSA9IG9yaWdpblggKyBkdi5nZXRVaW50OChvZmZzZXQrKykgKiBzdGVwWDsKICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljNy5sb25naXR1ZGUgPSBsb25naXR1ZGU7CiAgICAgICAgY29uc3QgbGF0aXR1ZGUgPSBvcmlnaW5ZICsgZHYuZ2V0VWludDgob2Zmc2V0KyspICogc3RlcFk7CiAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYzcubGF0aXR1ZGUgPSBsYXRpdHVkZTsKICAgICAgICBsZXQgaGVpZ2h0ID0gZHYuZ2V0RmxvYXQzMihvZmZzZXQsIHRydWUpOwogICAgICAgIG9mZnNldCArPSBzaXplT2ZGbG9hdDsKICAgICAgICBpZiAoaGVpZ2h0ICE9PSAwICYmIGhlaWdodCA8IG5lZ2F0aXZlRWxldmF0aW9uVGhyZXNob2xkKSB7CiAgICAgICAgICBoZWlnaHQgKj0gLU1hdGgucG93KDIsIG5lZ2F0aXZlQWx0aXR1ZGVFeHBvbmVudEJpYXMpOwogICAgICAgIH0KICAgICAgICBoZWlnaHQgKj0gNjM3MTAxMDsKICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljNy5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgICAgaWYgKGluZGV4T2ZFcHNpbG9uKHF1YWRCb3JkZXJMb25naXR1ZGVzLCBsb25naXR1ZGUpICE9PSAtMSB8fCBpbmRleE9mRXBzaWxvbihxdWFkQm9yZGVyTGF0aXR1ZGVzLCBsYXRpdHVkZSkgIT09IC0xKSB7CiAgICAgICAgICBjb25zdCBpbmRleCA9IGluZGV4T2ZFcHNpbG9uKAogICAgICAgICAgICBxdWFkQm9yZGVyUG9pbnRzLAogICAgICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljNywKICAgICAgICAgICAgQ2FydG9ncmFwaGljX2RlZmF1bHQKICAgICAgICAgICk7CiAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7CiAgICAgICAgICAgIHF1YWRCb3JkZXJQb2ludHMucHVzaChDYXJ0b2dyYXBoaWNfZGVmYXVsdC5jbG9uZShzY3JhdGNoQ2FydG9ncmFwaGljNykpOwogICAgICAgICAgICBxdWFkQm9yZGVySW5kaWNlcy5wdXNoKHBvaW50T2Zmc2V0KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGluZGljZXNNYXBwaW5nW2ldID0gcXVhZEJvcmRlckluZGljZXNbaW5kZXhdOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaW5kaWNlc01hcHBpbmdbaV0gPSBwb2ludE9mZnNldDsKICAgICAgICBpZiAoTWF0aC5hYnMobG9uZ2l0dWRlIC0gZ2VvZ3JhcGhpY1dlc3QpIDwgaGFsZlN0ZXBYKSB7CiAgICAgICAgICB3ZXN0Qm9yZGVyLnB1c2goewogICAgICAgICAgICBpbmRleDogcG9pbnRPZmZzZXQsCiAgICAgICAgICAgIGNhcnRvZ3JhcGhpYzogQ2FydG9ncmFwaGljX2RlZmF1bHQuY2xvbmUoc2NyYXRjaENhcnRvZ3JhcGhpYzcpCiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGxvbmdpdHVkZSAtIGdlb2dyYXBoaWNFYXN0KSA8IGhhbGZTdGVwWCkgewogICAgICAgICAgZWFzdEJvcmRlci5wdXNoKHsKICAgICAgICAgICAgaW5kZXg6IHBvaW50T2Zmc2V0LAogICAgICAgICAgICBjYXJ0b2dyYXBoaWM6IENhcnRvZ3JhcGhpY19kZWZhdWx0LmNsb25lKHNjcmF0Y2hDYXJ0b2dyYXBoaWM3KQogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhsYXRpdHVkZSAtIGdlb2dyYXBoaWNTb3V0aCkgPCBoYWxmU3RlcFkpIHsKICAgICAgICAgIHNvdXRoQm9yZGVyLnB1c2goewogICAgICAgICAgICBpbmRleDogcG9pbnRPZmZzZXQsCiAgICAgICAgICAgIGNhcnRvZ3JhcGhpYzogQ2FydG9ncmFwaGljX2RlZmF1bHQuY2xvbmUoc2NyYXRjaENhcnRvZ3JhcGhpYzcpCiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGxhdGl0dWRlIC0gZ2VvZ3JhcGhpY05vcnRoKSA8IGhhbGZTdGVwWSkgewogICAgICAgICAgbm9ydGhCb3JkZXIucHVzaCh7CiAgICAgICAgICAgIGluZGV4OiBwb2ludE9mZnNldCwKICAgICAgICAgICAgY2FydG9ncmFwaGljOiBDYXJ0b2dyYXBoaWNfZGVmYXVsdC5jbG9uZShzY3JhdGNoQ2FydG9ncmFwaGljNykKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBtaW5IZWlnaHQgPSBNYXRoLm1pbihoZWlnaHQsIG1pbkhlaWdodCk7CiAgICAgICAgbWF4SGVpZ2h0ID0gTWF0aC5tYXgoaGVpZ2h0LCBtYXhIZWlnaHQpOwogICAgICAgIGhlaWdodHNbcG9pbnRPZmZzZXRdID0gaGVpZ2h0OwogICAgICAgIGNvbnN0IHBvcyA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihzY3JhdGNoQ2FydG9ncmFwaGljNyk7CiAgICAgICAgcG9zaXRpb25zW3BvaW50T2Zmc2V0XSA9IHBvczsKICAgICAgICBpZiAoaW5jbHVkZVdlYk1lcmNhdG9yVCkgewogICAgICAgICAgd2ViTWVyY2F0b3JUc1twb2ludE9mZnNldF0gPSAoV2ViTWVyY2F0b3JQcm9qZWN0aW9uX2RlZmF1bHQuZ2VvZGV0aWNMYXRpdHVkZVRvTWVyY2F0b3JBbmdsZShsYXRpdHVkZSkgLSBzb3V0aE1lcmNhdG9yWSkgKiBvbmVPdmVyTWVyY2F0b3JIZWlnaHQ7CiAgICAgICAgfQogICAgICAgIGlmIChpbmNsdWRlR2VvZGV0aWNTdXJmYWNlTm9ybWFscykgewogICAgICAgICAgY29uc3Qgbm9ybWFsMiA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwocG9zKTsKICAgICAgICAgIGdlb2RldGljU3VyZmFjZU5vcm1hbHNbcG9pbnRPZmZzZXRdID0gbm9ybWFsMjsKICAgICAgICB9CiAgICAgICAgTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlQb2ludCh0b0VOVSwgcG9zLCBzY3JhdGNoQ2FydGVzaWFuMjApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5taW5pbXVtQnlDb21wb25lbnQoc2NyYXRjaENhcnRlc2lhbjIwLCBtaW5pbXVtLCBtaW5pbXVtKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubWF4aW11bUJ5Q29tcG9uZW50KHNjcmF0Y2hDYXJ0ZXNpYW4yMCwgbWF4aW11bSwgbWF4aW11bSk7CiAgICAgICAgbGV0IHUzID0gKGxvbmdpdHVkZSAtIGdlb2dyYXBoaWNXZXN0KSAvIChnZW9ncmFwaGljRWFzdCAtIGdlb2dyYXBoaWNXZXN0KTsKICAgICAgICB1MyA9IE1hdGhfZGVmYXVsdC5jbGFtcCh1MywgMCwgMSk7CiAgICAgICAgbGV0IHYzID0gKGxhdGl0dWRlIC0gZ2VvZ3JhcGhpY1NvdXRoKSAvIChnZW9ncmFwaGljTm9ydGggLSBnZW9ncmFwaGljU291dGgpOwogICAgICAgIHYzID0gTWF0aF9kZWZhdWx0LmNsYW1wKHYzLCAwLCAxKTsKICAgICAgICB1dnNbcG9pbnRPZmZzZXRdID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCh1MywgdjMpOwogICAgICAgICsrcG9pbnRPZmZzZXQ7CiAgICAgIH0KICAgICAgY29uc3QgZmFjZXNFbGVtZW50Q291bnQgPSBudW1GYWNlcyAqIDM7CiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZmFjZXNFbGVtZW50Q291bnQ7ICsraiwgKytpbmRpY2VzT2Zmc2V0KSB7CiAgICAgICAgaW5kaWNlc1tpbmRpY2VzT2Zmc2V0XSA9IGluZGljZXNNYXBwaW5nW2R2LmdldFVpbnQxNihvZmZzZXQsIHRydWUpXTsKICAgICAgICBvZmZzZXQgKz0gc2l6ZU9mVWludDE2OwogICAgICB9CiAgICAgIGlmIChxdWFkU2l6ZSAhPT0gb2Zmc2V0IC0gc3RhcnRRdWFkKSB7CiAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KCJJbnZhbGlkIHRlcnJhaW4gdGlsZS4iKTsKICAgICAgfQogICAgfQogICAgcG9zaXRpb25zLmxlbmd0aCA9IHBvaW50T2Zmc2V0OwogICAgdXZzLmxlbmd0aCA9IHBvaW50T2Zmc2V0OwogICAgaGVpZ2h0cy5sZW5ndGggPSBwb2ludE9mZnNldDsKICAgIGlmIChpbmNsdWRlV2ViTWVyY2F0b3JUKSB7CiAgICAgIHdlYk1lcmNhdG9yVHMubGVuZ3RoID0gcG9pbnRPZmZzZXQ7CiAgICB9CiAgICBpZiAoaW5jbHVkZUdlb2RldGljU3VyZmFjZU5vcm1hbHMpIHsKICAgICAgZ2VvZGV0aWNTdXJmYWNlTm9ybWFscy5sZW5ndGggPSBwb2ludE9mZnNldDsKICAgIH0KICAgIGNvbnN0IHZlcnRleENvdW50V2l0aG91dFNraXJ0cyA9IHBvaW50T2Zmc2V0OwogICAgY29uc3QgaW5kZXhDb3VudFdpdGhvdXRTa2lydHMgPSBpbmRpY2VzT2Zmc2V0OwogICAgY29uc3Qgc2tpcnRPcHRpb25zID0gewogICAgICBoTWluOiBtaW5IZWlnaHQsCiAgICAgIGxhc3RCb3JkZXJQb2ludDogdm9pZCAwLAogICAgICBza2lydEhlaWdodCwKICAgICAgdG9FTlUsCiAgICAgIGVsbGlwc29pZCwKICAgICAgbWluaW11bSwKICAgICAgbWF4aW11bQogICAgfTsKICAgIHdlc3RCb3JkZXIuc29ydChmdW5jdGlvbihhMywgYikgewogICAgICByZXR1cm4gYi5jYXJ0b2dyYXBoaWMubGF0aXR1ZGUgLSBhMy5jYXJ0b2dyYXBoaWMubGF0aXR1ZGU7CiAgICB9KTsKICAgIHNvdXRoQm9yZGVyLnNvcnQoZnVuY3Rpb24oYTMsIGIpIHsKICAgICAgcmV0dXJuIGEzLmNhcnRvZ3JhcGhpYy5sb25naXR1ZGUgLSBiLmNhcnRvZ3JhcGhpYy5sb25naXR1ZGU7CiAgICB9KTsKICAgIGVhc3RCb3JkZXIuc29ydChmdW5jdGlvbihhMywgYikgewogICAgICByZXR1cm4gYTMuY2FydG9ncmFwaGljLmxhdGl0dWRlIC0gYi5jYXJ0b2dyYXBoaWMubGF0aXR1ZGU7CiAgICB9KTsKICAgIG5vcnRoQm9yZGVyLnNvcnQoZnVuY3Rpb24oYTMsIGIpIHsKICAgICAgcmV0dXJuIGIuY2FydG9ncmFwaGljLmxvbmdpdHVkZSAtIGEzLmNhcnRvZ3JhcGhpYy5sb25naXR1ZGU7CiAgICB9KTsKICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSAxZS01OwogICAgYWRkU2tpcnQoCiAgICAgIHBvc2l0aW9ucywKICAgICAgaGVpZ2h0cywKICAgICAgdXZzLAogICAgICB3ZWJNZXJjYXRvclRzLAogICAgICBnZW9kZXRpY1N1cmZhY2VOb3JtYWxzLAogICAgICBpbmRpY2VzLAogICAgICBza2lydE9wdGlvbnMsCiAgICAgIHdlc3RCb3JkZXIsCiAgICAgIC1wZXJjZW50YWdlICogcmVjdGFuZ2xlV2lkdGgsCiAgICAgIHRydWUsCiAgICAgIC1wZXJjZW50YWdlICogcmVjdGFuZ2xlSGVpZ2h0CiAgICApOwogICAgYWRkU2tpcnQoCiAgICAgIHBvc2l0aW9ucywKICAgICAgaGVpZ2h0cywKICAgICAgdXZzLAogICAgICB3ZWJNZXJjYXRvclRzLAogICAgICBnZW9kZXRpY1N1cmZhY2VOb3JtYWxzLAogICAgICBpbmRpY2VzLAogICAgICBza2lydE9wdGlvbnMsCiAgICAgIHNvdXRoQm9yZGVyLAogICAgICAtcGVyY2VudGFnZSAqIHJlY3RhbmdsZUhlaWdodCwKICAgICAgZmFsc2UKICAgICk7CiAgICBhZGRTa2lydCgKICAgICAgcG9zaXRpb25zLAogICAgICBoZWlnaHRzLAogICAgICB1dnMsCiAgICAgIHdlYk1lcmNhdG9yVHMsCiAgICAgIGdlb2RldGljU3VyZmFjZU5vcm1hbHMsCiAgICAgIGluZGljZXMsCiAgICAgIHNraXJ0T3B0aW9ucywKICAgICAgZWFzdEJvcmRlciwKICAgICAgcGVyY2VudGFnZSAqIHJlY3RhbmdsZVdpZHRoLAogICAgICB0cnVlLAogICAgICBwZXJjZW50YWdlICogcmVjdGFuZ2xlSGVpZ2h0CiAgICApOwogICAgYWRkU2tpcnQoCiAgICAgIHBvc2l0aW9ucywKICAgICAgaGVpZ2h0cywKICAgICAgdXZzLAogICAgICB3ZWJNZXJjYXRvclRzLAogICAgICBnZW9kZXRpY1N1cmZhY2VOb3JtYWxzLAogICAgICBpbmRpY2VzLAogICAgICBza2lydE9wdGlvbnMsCiAgICAgIG5vcnRoQm9yZGVyLAogICAgICBwZXJjZW50YWdlICogcmVjdGFuZ2xlSGVpZ2h0LAogICAgICBmYWxzZQogICAgKTsKICAgIGlmICh3ZXN0Qm9yZGVyLmxlbmd0aCA+IDAgJiYgbm9ydGhCb3JkZXIubGVuZ3RoID4gMCkgewogICAgICBjb25zdCBmaXJzdEJvcmRlckluZGV4ID0gd2VzdEJvcmRlclswXS5pbmRleDsKICAgICAgY29uc3QgZmlyc3RTa2lydEluZGV4ID0gdmVydGV4Q291bnRXaXRob3V0U2tpcnRzOwogICAgICBjb25zdCBsYXN0Qm9yZGVySW5kZXggPSBub3J0aEJvcmRlcltub3J0aEJvcmRlci5sZW5ndGggLSAxXS5pbmRleDsKICAgICAgY29uc3QgbGFzdFNraXJ0SW5kZXggPSBwb3NpdGlvbnMubGVuZ3RoIC0gMTsKICAgICAgaW5kaWNlcy5wdXNoKAogICAgICAgIGxhc3RCb3JkZXJJbmRleCwKICAgICAgICBsYXN0U2tpcnRJbmRleCwKICAgICAgICBmaXJzdFNraXJ0SW5kZXgsCiAgICAgICAgZmlyc3RTa2lydEluZGV4LAogICAgICAgIGZpcnN0Qm9yZGVySW5kZXgsCiAgICAgICAgbGFzdEJvcmRlckluZGV4CiAgICAgICk7CiAgICB9CiAgICBzaXplID0gcG9zaXRpb25zLmxlbmd0aDsKICAgIGNvbnN0IGJvdW5kaW5nU3BoZXJlM0QgPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmZyb21Qb2ludHMocG9zaXRpb25zKTsKICAgIGxldCBvcmllbnRlZEJvdW5kaW5nQm94OwogICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZWN0YW5nbGUpKSB7CiAgICAgIG9yaWVudGVkQm91bmRpbmdCb3ggPSBPcmllbnRlZEJvdW5kaW5nQm94X2RlZmF1bHQuZnJvbVJlY3RhbmdsZSgKICAgICAgICByZWN0YW5nbGUsCiAgICAgICAgbWluSGVpZ2h0LAogICAgICAgIG1heEhlaWdodCwKICAgICAgICBlbGxpcHNvaWQKICAgICAgKTsKICAgIH0KICAgIGNvbnN0IG9jY2x1ZGVyID0gbmV3IEVsbGlwc29pZGFsT2NjbHVkZXJfZGVmYXVsdChlbGxpcHNvaWQpOwogICAgY29uc3Qgb2NjbHVkZWVQb2ludEluU2NhbGVkU3BhY2UgPSBvY2NsdWRlci5jb21wdXRlSG9yaXpvbkN1bGxpbmdQb2ludFBvc3NpYmx5VW5kZXJFbGxpcHNvaWQoCiAgICAgIHJlbGF0aXZlVG9DZW50ZXIsCiAgICAgIHBvc2l0aW9ucywKICAgICAgbWluSGVpZ2h0CiAgICApOwogICAgY29uc3QgYWFCb3ggPSBuZXcgQXhpc0FsaWduZWRCb3VuZGluZ0JveF9kZWZhdWx0KG1pbmltdW0sIG1heGltdW0sIHJlbGF0aXZlVG9DZW50ZXIpOwogICAgY29uc3QgZW5jb2RpbmcgPSBuZXcgVGVycmFpbkVuY29kaW5nX2RlZmF1bHQoCiAgICAgIHJlbGF0aXZlVG9DZW50ZXIsCiAgICAgIGFhQm94LAogICAgICBza2lydE9wdGlvbnMuaE1pbiwKICAgICAgbWF4SGVpZ2h0LAogICAgICBmcm9tRU5VLAogICAgICBmYWxzZSwKICAgICAgaW5jbHVkZVdlYk1lcmNhdG9yVCwKICAgICAgaW5jbHVkZUdlb2RldGljU3VyZmFjZU5vcm1hbHMsCiAgICAgIGV4YWdnZXJhdGlvbiwKICAgICAgZXhhZ2dlcmF0aW9uUmVsYXRpdmVIZWlnaHQKICAgICk7CiAgICBjb25zdCB2ZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIGVuY29kaW5nLnN0cmlkZSk7CiAgICBsZXQgYnVmZmVySW5kZXggPSAwOwogICAgZm9yIChsZXQgayA9IDA7IGsgPCBzaXplOyArK2spIHsKICAgICAgYnVmZmVySW5kZXggPSBlbmNvZGluZy5lbmNvZGUoCiAgICAgICAgdmVydGljZXMsCiAgICAgICAgYnVmZmVySW5kZXgsCiAgICAgICAgcG9zaXRpb25zW2tdLAogICAgICAgIHV2c1trXSwKICAgICAgICBoZWlnaHRzW2tdLAogICAgICAgIHZvaWQgMCwKICAgICAgICB3ZWJNZXJjYXRvclRzW2tdLAogICAgICAgIGdlb2RldGljU3VyZmFjZU5vcm1hbHNba10KICAgICAgKTsKICAgIH0KICAgIGNvbnN0IHdlc3RJbmRpY2VzU291dGhUb05vcnRoID0gd2VzdEJvcmRlci5tYXAoZnVuY3Rpb24odmVydGV4KSB7CiAgICAgIHJldHVybiB2ZXJ0ZXguaW5kZXg7CiAgICB9KS5yZXZlcnNlKCk7CiAgICBjb25zdCBzb3V0aEluZGljZXNFYXN0VG9XZXN0ID0gc291dGhCb3JkZXIubWFwKGZ1bmN0aW9uKHZlcnRleCkgewogICAgICByZXR1cm4gdmVydGV4LmluZGV4OwogICAgfSkucmV2ZXJzZSgpOwogICAgY29uc3QgZWFzdEluZGljZXNOb3J0aFRvU291dGggPSBlYXN0Qm9yZGVyLm1hcChmdW5jdGlvbih2ZXJ0ZXgpIHsKICAgICAgcmV0dXJuIHZlcnRleC5pbmRleDsKICAgIH0pLnJldmVyc2UoKTsKICAgIGNvbnN0IG5vcnRoSW5kaWNlc1dlc3RUb0Vhc3QgPSBub3J0aEJvcmRlci5tYXAoZnVuY3Rpb24odmVydGV4KSB7CiAgICAgIHJldHVybiB2ZXJ0ZXguaW5kZXg7CiAgICB9KS5yZXZlcnNlKCk7CiAgICBzb3V0aEluZGljZXNFYXN0VG9XZXN0LnVuc2hpZnQoCiAgICAgIGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoW2Vhc3RJbmRpY2VzTm9ydGhUb1NvdXRoLmxlbmd0aCAtIDFdCiAgICApOwogICAgc291dGhJbmRpY2VzRWFzdFRvV2VzdC5wdXNoKHdlc3RJbmRpY2VzU291dGhUb05vcnRoWzBdKTsKICAgIG5vcnRoSW5kaWNlc1dlc3RUb0Vhc3QudW5zaGlmdCgKICAgICAgd2VzdEluZGljZXNTb3V0aFRvTm9ydGhbd2VzdEluZGljZXNTb3V0aFRvTm9ydGgubGVuZ3RoIC0gMV0KICAgICk7CiAgICBub3J0aEluZGljZXNXZXN0VG9FYXN0LnB1c2goZWFzdEluZGljZXNOb3J0aFRvU291dGhbMF0pOwogICAgcmV0dXJuIHsKICAgICAgdmVydGljZXMsCiAgICAgIGluZGljZXM6IG5ldyBVaW50MTZBcnJheShpbmRpY2VzKSwKICAgICAgbWF4aW11bUhlaWdodDogbWF4SGVpZ2h0LAogICAgICBtaW5pbXVtSGVpZ2h0OiBtaW5IZWlnaHQsCiAgICAgIGVuY29kaW5nLAogICAgICBib3VuZGluZ1NwaGVyZTNELAogICAgICBvcmllbnRlZEJvdW5kaW5nQm94LAogICAgICBvY2NsdWRlZVBvaW50SW5TY2FsZWRTcGFjZSwKICAgICAgdmVydGV4Q291bnRXaXRob3V0U2tpcnRzLAogICAgICBpbmRleENvdW50V2l0aG91dFNraXJ0cywKICAgICAgd2VzdEluZGljZXNTb3V0aFRvTm9ydGgsCiAgICAgIHNvdXRoSW5kaWNlc0Vhc3RUb1dlc3QsCiAgICAgIGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoLAogICAgICBub3J0aEluZGljZXNXZXN0VG9FYXN0CiAgICB9OwogIH0KICBmdW5jdGlvbiBhZGRTa2lydChwb3NpdGlvbnMsIGhlaWdodHMsIHV2cywgd2ViTWVyY2F0b3JUcywgZ2VvZGV0aWNTdXJmYWNlTm9ybWFscywgaW5kaWNlcywgc2tpcnRPcHRpb25zLCBib3JkZXJQb2ludHMsIGZ1ZGdlRmFjdG9yLCBlYXN0T3JXZXN0LCBjb3JuZXJGdWRnZSkgewogICAgY29uc3QgY291bnQgPSBib3JkZXJQb2ludHMubGVuZ3RoOwogICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb3VudDsgKytqKSB7CiAgICAgIGNvbnN0IGJvcmRlclBvaW50ID0gYm9yZGVyUG9pbnRzW2pdOwogICAgICBjb25zdCBib3JkZXJDYXJ0b2dyYXBoaWMgPSBib3JkZXJQb2ludC5jYXJ0b2dyYXBoaWM7CiAgICAgIGNvbnN0IGJvcmRlckluZGV4ID0gYm9yZGVyUG9pbnQuaW5kZXg7CiAgICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgIGNvbnN0IGxvbmdpdHVkZSA9IGJvcmRlckNhcnRvZ3JhcGhpYy5sb25naXR1ZGU7CiAgICAgIGxldCBsYXRpdHVkZSA9IGJvcmRlckNhcnRvZ3JhcGhpYy5sYXRpdHVkZTsKICAgICAgbGF0aXR1ZGUgPSBNYXRoX2RlZmF1bHQuY2xhbXAoCiAgICAgICAgbGF0aXR1ZGUsCiAgICAgICAgLU1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTywKICAgICAgICBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08KICAgICAgKTsKICAgICAgY29uc3QgaGVpZ2h0ID0gYm9yZGVyQ2FydG9ncmFwaGljLmhlaWdodCAtIHNraXJ0T3B0aW9ucy5za2lydEhlaWdodDsKICAgICAgc2tpcnRPcHRpb25zLmhNaW4gPSBNYXRoLm1pbihza2lydE9wdGlvbnMuaE1pbiwgaGVpZ2h0KTsKICAgICAgQ2FydG9ncmFwaGljX2RlZmF1bHQuZnJvbVJhZGlhbnMobG9uZ2l0dWRlLCBsYXRpdHVkZSwgaGVpZ2h0LCBzY3JhdGNoQ2FydG9ncmFwaGljNyk7CiAgICAgIGlmIChlYXN0T3JXZXN0KSB7CiAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYzcubG9uZ2l0dWRlICs9IGZ1ZGdlRmFjdG9yOwogICAgICB9CiAgICAgIGlmICghZWFzdE9yV2VzdCkgewogICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWM3LmxhdGl0dWRlICs9IGZ1ZGdlRmFjdG9yOwogICAgICB9IGVsc2UgaWYgKGogPT09IGNvdW50IC0gMSkgewogICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWM3LmxhdGl0dWRlICs9IGNvcm5lckZ1ZGdlOwogICAgICB9IGVsc2UgaWYgKGogPT09IDApIHsKICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljNy5sYXRpdHVkZSAtPSBjb3JuZXJGdWRnZTsKICAgICAgfQogICAgICBjb25zdCBwb3MgPSBza2lydE9wdGlvbnMuZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKAogICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWM3CiAgICAgICk7CiAgICAgIHBvc2l0aW9ucy5wdXNoKHBvcyk7CiAgICAgIGhlaWdodHMucHVzaChoZWlnaHQpOwogICAgICB1dnMucHVzaChDYXJ0ZXNpYW4yX2RlZmF1bHQuY2xvbmUodXZzW2JvcmRlckluZGV4XSkpOwogICAgICBpZiAod2ViTWVyY2F0b3JUcy5sZW5ndGggPiAwKSB7CiAgICAgICAgd2ViTWVyY2F0b3JUcy5wdXNoKHdlYk1lcmNhdG9yVHNbYm9yZGVySW5kZXhdKTsKICAgICAgfQogICAgICBpZiAoZ2VvZGV0aWNTdXJmYWNlTm9ybWFscy5sZW5ndGggPiAwKSB7CiAgICAgICAgZ2VvZGV0aWNTdXJmYWNlTm9ybWFscy5wdXNoKGdlb2RldGljU3VyZmFjZU5vcm1hbHNbYm9yZGVySW5kZXhdKTsKICAgICAgfQogICAgICBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVBvaW50KHNraXJ0T3B0aW9ucy50b0VOVSwgcG9zLCBzY3JhdGNoQ2FydGVzaWFuMjApOwogICAgICBjb25zdCBtaW5pbXVtID0gc2tpcnRPcHRpb25zLm1pbmltdW07CiAgICAgIGNvbnN0IG1heGltdW0gPSBza2lydE9wdGlvbnMubWF4aW11bTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm1pbmltdW1CeUNvbXBvbmVudChzY3JhdGNoQ2FydGVzaWFuMjAsIG1pbmltdW0sIG1pbmltdW0pOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubWF4aW11bUJ5Q29tcG9uZW50KHNjcmF0Y2hDYXJ0ZXNpYW4yMCwgbWF4aW11bSwgbWF4aW11bSk7CiAgICAgIGNvbnN0IGxhc3RCb3JkZXJQb2ludCA9IHNraXJ0T3B0aW9ucy5sYXN0Qm9yZGVyUG9pbnQ7CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobGFzdEJvcmRlclBvaW50KSkgewogICAgICAgIGNvbnN0IGxhc3RCb3JkZXJJbmRleCA9IGxhc3RCb3JkZXJQb2ludC5pbmRleDsKICAgICAgICBpbmRpY2VzLnB1c2goCiAgICAgICAgICBsYXN0Qm9yZGVySW5kZXgsCiAgICAgICAgICBjdXJyZW50SW5kZXggLSAxLAogICAgICAgICAgY3VycmVudEluZGV4LAogICAgICAgICAgY3VycmVudEluZGV4LAogICAgICAgICAgYm9yZGVySW5kZXgsCiAgICAgICAgICBsYXN0Qm9yZGVySW5kZXgKICAgICAgICApOwogICAgICB9CiAgICAgIHNraXJ0T3B0aW9ucy5sYXN0Qm9yZGVyUG9pbnQgPSBib3JkZXJQb2ludDsKICAgIH0KICB9CiAgdmFyIHNpemVPZlVpbnQxNiwgc2l6ZU9mSW50MzIsIHNpemVPZlVpbnQzMiwgc2l6ZU9mRmxvYXQsIHNpemVPZkRvdWJsZSwgc2NyYXRjaENhcnRvZ3JhcGhpYzcsIHNjcmF0Y2hDYXJ0ZXNpYW4yMCwgbWluaW11bVNjcmF0Y2gsIG1heGltdW1TY3JhdGNoLCBtYXRyaXg0U2NyYXRjaDMsIGNyZWF0ZVZlcnRpY2VzRnJvbUdvb2dsZUVhcnRoRW50ZXJwcmlzZUJ1ZmZlcl9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVZlcnRpY2VzRnJvbUdvb2dsZUVhcnRoRW50ZXJwcmlzZUJ1ZmZlciA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlVmVydGljZXNGcm9tR29vZ2xlRWFydGhFbnRlcnByaXNlQnVmZmVyLmpzIigpIHsKICAgICAgaW5pdF9BeGlzQWxpZ25lZEJvdW5kaW5nQm94KCk7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWRhbE9jY2x1ZGVyKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDQoKTsKICAgICAgaW5pdF9PcmllbnRlZEJvdW5kaW5nQm94KCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfUnVudGltZUVycm9yKCk7CiAgICAgIGluaXRfVGVycmFpbkVuY29kaW5nKCk7CiAgICAgIGluaXRfVHJhbnNmb3JtcygpOwogICAgICBpbml0X1dlYk1lcmNhdG9yUHJvamVjdGlvbigpOwogICAgICBpbml0X2NyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXIoKTsKICAgICAgc2l6ZU9mVWludDE2ID0gVWludDE2QXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7CiAgICAgIHNpemVPZkludDMyID0gSW50MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVDsKICAgICAgc2l6ZU9mVWludDMyID0gVWludDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7CiAgICAgIHNpemVPZkZsb2F0ID0gRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UOwogICAgICBzaXplT2ZEb3VibGUgPSBGbG9hdDY0QXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWM3ID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4yMCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgbWluaW11bVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIG1heGltdW1TY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBtYXRyaXg0U2NyYXRjaDMgPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgICAgIGNyZWF0ZVZlcnRpY2VzRnJvbUdvb2dsZUVhcnRoRW50ZXJwcmlzZUJ1ZmZlcl9kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0KAogICAgICAgIGNyZWF0ZVZlcnRpY2VzRnJvbUdvb2dsZUVhcnRoRW50ZXJwcmlzZUJ1ZmZlcgogICAgICApOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSGVpZ2h0bWFwRW5jb2RpbmcuanMKICB2YXIgSGVpZ2h0bWFwRW5jb2RpbmcsIEhlaWdodG1hcEVuY29kaW5nX2RlZmF1bHQ7CiAgdmFyIGluaXRfSGVpZ2h0bWFwRW5jb2RpbmcgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0hlaWdodG1hcEVuY29kaW5nLmpzIigpIHsKICAgICAgSGVpZ2h0bWFwRW5jb2RpbmcgPSB7CiAgICAgICAgLyoqCiAgICAgICAgICogTm8gZW5jb2RpbmcKICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgTk9ORTogMCwKICAgICAgICAvKioKICAgICAgICAgKiBMRVJDIGVuY29kaW5nCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqCiAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvbGVyY3xUaGUgTEVSQyBzcGVjaWZpY2F0aW9ufQogICAgICAgICAqLwogICAgICAgIExFUkM6IDEKICAgICAgfTsKICAgICAgSGVpZ2h0bWFwRW5jb2RpbmdfZGVmYXVsdCA9IE9iamVjdC5mcmVlemUoSGVpZ2h0bWFwRW5jb2RpbmcpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSGVpZ2h0bWFwVGVzc2VsbGF0b3IuanMKICB2YXIgSGVpZ2h0bWFwVGVzc2VsbGF0b3IsIGNhcnRlc2lhbjNTY3JhdGNoNywgbWF0cml4NFNjcmF0Y2g0LCBtaW5pbXVtU2NyYXRjaDIsIG1heGltdW1TY3JhdGNoMiwgSGVpZ2h0bWFwVGVzc2VsbGF0b3JfZGVmYXVsdDsKICB2YXIgaW5pdF9IZWlnaHRtYXBUZXNzZWxsYXRvciA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSGVpZ2h0bWFwVGVzc2VsbGF0b3IuanMiKCkgewogICAgICBpbml0X0F4aXNBbGlnbmVkQm91bmRpbmdCb3goKTsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkYWxPY2NsdWRlcigpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9NYXRyaXg0KCk7CiAgICAgIGluaXRfT3JpZW50ZWRCb3VuZGluZ0JveCgpOwogICAgICBpbml0X1JlY3RhbmdsZSgpOwogICAgICBpbml0X1RlcnJhaW5FbmNvZGluZygpOwogICAgICBpbml0X1RyYW5zZm9ybXMoKTsKICAgICAgaW5pdF9XZWJNZXJjYXRvclByb2plY3Rpb24oKTsKICAgICAgSGVpZ2h0bWFwVGVzc2VsbGF0b3IgPSB7fTsKICAgICAgSGVpZ2h0bWFwVGVzc2VsbGF0b3IuREVGQVVMVF9TVFJVQ1RVUkUgPSBPYmplY3QuZnJlZXplKHsKICAgICAgICBoZWlnaHRTY2FsZTogMSwKICAgICAgICBoZWlnaHRPZmZzZXQ6IDAsCiAgICAgICAgZWxlbWVudHNQZXJIZWlnaHQ6IDEsCiAgICAgICAgc3RyaWRlOiAxLAogICAgICAgIGVsZW1lbnRNdWx0aXBsaWVyOiAyNTYsCiAgICAgICAgaXNCaWdFbmRpYW46IGZhbHNlCiAgICAgIH0pOwogICAgICBjYXJ0ZXNpYW4zU2NyYXRjaDcgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIG1hdHJpeDRTY3JhdGNoNCA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICAgICAgbWluaW11bVNjcmF0Y2gyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBtYXhpbXVtU2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEhlaWdodG1hcFRlc3NlbGxhdG9yLmNvbXB1dGVWZXJ0aWNlcyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChvcHRpb25zKSB8fCAhZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMuaGVpZ2h0bWFwKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm9wdGlvbnMuaGVpZ2h0bWFwIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChvcHRpb25zLndpZHRoKSB8fCAhZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMuaGVpZ2h0KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm9wdGlvbnMud2lkdGggYW5kIG9wdGlvbnMuaGVpZ2h0IGFyZSByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5uYXRpdmVSZWN0YW5nbGUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy5uYXRpdmVSZWN0YW5nbGUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMuc2tpcnRIZWlnaHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy5za2lydEhlaWdodCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgY29zNCA9IE1hdGguY29zOwogICAgICAgIGNvbnN0IHNpbjQgPSBNYXRoLnNpbjsKICAgICAgICBjb25zdCBzcXJ0MiA9IE1hdGguc3FydDsKICAgICAgICBjb25zdCBhdGFuID0gTWF0aC5hdGFuOwogICAgICAgIGNvbnN0IGV4cCA9IE1hdGguZXhwOwogICAgICAgIGNvbnN0IHBpT3ZlclR3byA9IE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTzsKICAgICAgICBjb25zdCB0b1JhZGlhbnMgPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zOwogICAgICAgIGNvbnN0IGhlaWdodG1hcCA9IG9wdGlvbnMuaGVpZ2h0bWFwOwogICAgICAgIGNvbnN0IHdpZHRoID0gb3B0aW9ucy53aWR0aDsKICAgICAgICBjb25zdCBoZWlnaHQgPSBvcHRpb25zLmhlaWdodDsKICAgICAgICBjb25zdCBza2lydEhlaWdodCA9IG9wdGlvbnMuc2tpcnRIZWlnaHQ7CiAgICAgICAgY29uc3QgaGFzU2tpcnRzID0gc2tpcnRIZWlnaHQgPiAwOwogICAgICAgIGNvbnN0IGlzR2VvZ3JhcGhpYyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuaXNHZW9ncmFwaGljLCB0cnVlKTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuV0dTODQpOwogICAgICAgIGNvbnN0IG9uZU92ZXJHbG9iZVNlbWltYWpvckF4aXMgPSAxIC8gZWxsaXBzb2lkLm1heGltdW1SYWRpdXM7CiAgICAgICAgY29uc3QgbmF0aXZlUmVjdGFuZ2xlID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2xvbmUob3B0aW9ucy5uYXRpdmVSZWN0YW5nbGUpOwogICAgICAgIGNvbnN0IHJlY3RhbmdsZSA9IFJlY3RhbmdsZV9kZWZhdWx0LmNsb25lKG9wdGlvbnMucmVjdGFuZ2xlKTsKICAgICAgICBsZXQgZ2VvZ3JhcGhpY1dlc3Q7CiAgICAgICAgbGV0IGdlb2dyYXBoaWNTb3V0aDsKICAgICAgICBsZXQgZ2VvZ3JhcGhpY0Vhc3Q7CiAgICAgICAgbGV0IGdlb2dyYXBoaWNOb3J0aDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZWN0YW5nbGUpKSB7CiAgICAgICAgICBpZiAoaXNHZW9ncmFwaGljKSB7CiAgICAgICAgICAgIGdlb2dyYXBoaWNXZXN0ID0gdG9SYWRpYW5zKG5hdGl2ZVJlY3RhbmdsZS53ZXN0KTsKICAgICAgICAgICAgZ2VvZ3JhcGhpY1NvdXRoID0gdG9SYWRpYW5zKG5hdGl2ZVJlY3RhbmdsZS5zb3V0aCk7CiAgICAgICAgICAgIGdlb2dyYXBoaWNFYXN0ID0gdG9SYWRpYW5zKG5hdGl2ZVJlY3RhbmdsZS5lYXN0KTsKICAgICAgICAgICAgZ2VvZ3JhcGhpY05vcnRoID0gdG9SYWRpYW5zKG5hdGl2ZVJlY3RhbmdsZS5ub3J0aCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBnZW9ncmFwaGljV2VzdCA9IG5hdGl2ZVJlY3RhbmdsZS53ZXN0ICogb25lT3Zlckdsb2JlU2VtaW1ham9yQXhpczsKICAgICAgICAgICAgZ2VvZ3JhcGhpY1NvdXRoID0gcGlPdmVyVHdvIC0gMiAqIGF0YW4oZXhwKC1uYXRpdmVSZWN0YW5nbGUuc291dGggKiBvbmVPdmVyR2xvYmVTZW1pbWFqb3JBeGlzKSk7CiAgICAgICAgICAgIGdlb2dyYXBoaWNFYXN0ID0gbmF0aXZlUmVjdGFuZ2xlLmVhc3QgKiBvbmVPdmVyR2xvYmVTZW1pbWFqb3JBeGlzOwogICAgICAgICAgICBnZW9ncmFwaGljTm9ydGggPSBwaU92ZXJUd28gLSAyICogYXRhbihleHAoLW5hdGl2ZVJlY3RhbmdsZS5ub3J0aCAqIG9uZU92ZXJHbG9iZVNlbWltYWpvckF4aXMpKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgZ2VvZ3JhcGhpY1dlc3QgPSByZWN0YW5nbGUud2VzdDsKICAgICAgICAgIGdlb2dyYXBoaWNTb3V0aCA9IHJlY3RhbmdsZS5zb3V0aDsKICAgICAgICAgIGdlb2dyYXBoaWNFYXN0ID0gcmVjdGFuZ2xlLmVhc3Q7CiAgICAgICAgICBnZW9ncmFwaGljTm9ydGggPSByZWN0YW5nbGUubm9ydGg7CiAgICAgICAgfQogICAgICAgIGxldCByZWxhdGl2ZVRvQ2VudGVyID0gb3B0aW9ucy5yZWxhdGl2ZVRvQ2VudGVyOwogICAgICAgIGNvbnN0IGhhc1JlbGF0aXZlVG9DZW50ZXIgPSBkZWZpbmVkX2RlZmF1bHQocmVsYXRpdmVUb0NlbnRlcik7CiAgICAgICAgcmVsYXRpdmVUb0NlbnRlciA9IGhhc1JlbGF0aXZlVG9DZW50ZXIgPyByZWxhdGl2ZVRvQ2VudGVyIDogQ2FydGVzaWFuM19kZWZhdWx0LlpFUk87CiAgICAgICAgY29uc3QgaW5jbHVkZVdlYk1lcmNhdG9yVCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuaW5jbHVkZVdlYk1lcmNhdG9yVCwgZmFsc2UpOwogICAgICAgIGNvbnN0IGV4YWdnZXJhdGlvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZXhhZ2dlcmF0aW9uLCAxKTsKICAgICAgICBjb25zdCBleGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICAgICAgb3B0aW9ucy5leGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodCwKICAgICAgICAgIDAKICAgICAgICApOwogICAgICAgIGNvbnN0IGhhc0V4YWdnZXJhdGlvbiA9IGV4YWdnZXJhdGlvbiAhPT0gMTsKICAgICAgICBjb25zdCBpbmNsdWRlR2VvZGV0aWNTdXJmYWNlTm9ybWFscyA9IGhhc0V4YWdnZXJhdGlvbjsKICAgICAgICBjb25zdCBzdHJ1Y3R1cmUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgICAgIG9wdGlvbnMuc3RydWN0dXJlLAogICAgICAgICAgSGVpZ2h0bWFwVGVzc2VsbGF0b3IuREVGQVVMVF9TVFJVQ1RVUkUKICAgICAgICApOwogICAgICAgIGNvbnN0IGhlaWdodFNjYWxlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgICAgICBzdHJ1Y3R1cmUuaGVpZ2h0U2NhbGUsCiAgICAgICAgICBIZWlnaHRtYXBUZXNzZWxsYXRvci5ERUZBVUxUX1NUUlVDVFVSRS5oZWlnaHRTY2FsZQogICAgICAgICk7CiAgICAgICAgY29uc3QgaGVpZ2h0T2Zmc2V0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgICAgICBzdHJ1Y3R1cmUuaGVpZ2h0T2Zmc2V0LAogICAgICAgICAgSGVpZ2h0bWFwVGVzc2VsbGF0b3IuREVGQVVMVF9TVFJVQ1RVUkUuaGVpZ2h0T2Zmc2V0CiAgICAgICAgKTsKICAgICAgICBjb25zdCBlbGVtZW50c1BlckhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICAgICAgc3RydWN0dXJlLmVsZW1lbnRzUGVySGVpZ2h0LAogICAgICAgICAgSGVpZ2h0bWFwVGVzc2VsbGF0b3IuREVGQVVMVF9TVFJVQ1RVUkUuZWxlbWVudHNQZXJIZWlnaHQKICAgICAgICApOwogICAgICAgIGNvbnN0IHN0cmlkZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICAgICAgc3RydWN0dXJlLnN0cmlkZSwKICAgICAgICAgIEhlaWdodG1hcFRlc3NlbGxhdG9yLkRFRkFVTFRfU1RSVUNUVVJFLnN0cmlkZQogICAgICAgICk7CiAgICAgICAgY29uc3QgZWxlbWVudE11bHRpcGxpZXIgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgICAgIHN0cnVjdHVyZS5lbGVtZW50TXVsdGlwbGllciwKICAgICAgICAgIEhlaWdodG1hcFRlc3NlbGxhdG9yLkRFRkFVTFRfU1RSVUNUVVJFLmVsZW1lbnRNdWx0aXBsaWVyCiAgICAgICAgKTsKICAgICAgICBjb25zdCBpc0JpZ0VuZGlhbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICAgICAgc3RydWN0dXJlLmlzQmlnRW5kaWFuLAogICAgICAgICAgSGVpZ2h0bWFwVGVzc2VsbGF0b3IuREVGQVVMVF9TVFJVQ1RVUkUuaXNCaWdFbmRpYW4KICAgICAgICApOwogICAgICAgIGxldCByZWN0YW5nbGVXaWR0aCA9IFJlY3RhbmdsZV9kZWZhdWx0LmNvbXB1dGVXaWR0aChuYXRpdmVSZWN0YW5nbGUpOwogICAgICAgIGxldCByZWN0YW5nbGVIZWlnaHQgPSBSZWN0YW5nbGVfZGVmYXVsdC5jb21wdXRlSGVpZ2h0KG5hdGl2ZVJlY3RhbmdsZSk7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHlYID0gcmVjdGFuZ2xlV2lkdGggLyAod2lkdGggLSAxKTsKICAgICAgICBjb25zdCBncmFudWxhcml0eVkgPSByZWN0YW5nbGVIZWlnaHQgLyAoaGVpZ2h0IC0gMSk7CiAgICAgICAgaWYgKCFpc0dlb2dyYXBoaWMpIHsKICAgICAgICAgIHJlY3RhbmdsZVdpZHRoICo9IG9uZU92ZXJHbG9iZVNlbWltYWpvckF4aXM7CiAgICAgICAgICByZWN0YW5nbGVIZWlnaHQgKj0gb25lT3Zlckdsb2JlU2VtaW1ham9yQXhpczsKICAgICAgICB9CiAgICAgICAgY29uc3QgcmFkaWlTcXVhcmVkID0gZWxsaXBzb2lkLnJhZGlpU3F1YXJlZDsKICAgICAgICBjb25zdCByYWRpaVNxdWFyZWRYID0gcmFkaWlTcXVhcmVkLng7CiAgICAgICAgY29uc3QgcmFkaWlTcXVhcmVkWSA9IHJhZGlpU3F1YXJlZC55OwogICAgICAgIGNvbnN0IHJhZGlpU3F1YXJlZFogPSByYWRpaVNxdWFyZWQuejsKICAgICAgICBsZXQgbWluaW11bUhlaWdodCA9IDY1NTM2OwogICAgICAgIGxldCBtYXhpbXVtSGVpZ2h0ID0gLTY1NTM2OwogICAgICAgIGNvbnN0IGZyb21FTlUgPSBUcmFuc2Zvcm1zX2RlZmF1bHQuZWFzdE5vcnRoVXBUb0ZpeGVkRnJhbWUoCiAgICAgICAgICByZWxhdGl2ZVRvQ2VudGVyLAogICAgICAgICAgZWxsaXBzb2lkCiAgICAgICAgKTsKICAgICAgICBjb25zdCB0b0VOVSA9IE1hdHJpeDRfZGVmYXVsdC5pbnZlcnNlVHJhbnNmb3JtYXRpb24oZnJvbUVOVSwgbWF0cml4NFNjcmF0Y2g0KTsKICAgICAgICBsZXQgc291dGhNZXJjYXRvclk7CiAgICAgICAgbGV0IG9uZU92ZXJNZXJjYXRvckhlaWdodDsKICAgICAgICBpZiAoaW5jbHVkZVdlYk1lcmNhdG9yVCkgewogICAgICAgICAgc291dGhNZXJjYXRvclkgPSBXZWJNZXJjYXRvclByb2plY3Rpb25fZGVmYXVsdC5nZW9kZXRpY0xhdGl0dWRlVG9NZXJjYXRvckFuZ2xlKAogICAgICAgICAgICBnZW9ncmFwaGljU291dGgKICAgICAgICAgICk7CiAgICAgICAgICBvbmVPdmVyTWVyY2F0b3JIZWlnaHQgPSAxIC8gKFdlYk1lcmNhdG9yUHJvamVjdGlvbl9kZWZhdWx0Lmdlb2RldGljTGF0aXR1ZGVUb01lcmNhdG9yQW5nbGUoZ2VvZ3JhcGhpY05vcnRoKSAtIHNvdXRoTWVyY2F0b3JZKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbWluaW11bSA9IG1pbmltdW1TY3JhdGNoMjsKICAgICAgICBtaW5pbXVtLnggPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CiAgICAgICAgbWluaW11bS55ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgICAgIG1pbmltdW0ueiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgICAgICBjb25zdCBtYXhpbXVtID0gbWF4aW11bVNjcmF0Y2gyOwogICAgICAgIG1heGltdW0ueCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgICAgICBtYXhpbXVtLnkgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CiAgICAgICAgbWF4aW11bS56ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgICAgIGxldCBoTWluID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgICAgIGNvbnN0IGdyaWRWZXJ0ZXhDb3VudCA9IHdpZHRoICogaGVpZ2h0OwogICAgICAgIGNvbnN0IGVkZ2VWZXJ0ZXhDb3VudCA9IHNraXJ0SGVpZ2h0ID4gMCA/IHdpZHRoICogMiArIGhlaWdodCAqIDIgOiAwOwogICAgICAgIGNvbnN0IHZlcnRleENvdW50ID0gZ3JpZFZlcnRleENvdW50ICsgZWRnZVZlcnRleENvdW50OwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBBcnJheSh2ZXJ0ZXhDb3VudCk7CiAgICAgICAgY29uc3QgaGVpZ2h0cyA9IG5ldyBBcnJheSh2ZXJ0ZXhDb3VudCk7CiAgICAgICAgY29uc3QgdXZzID0gbmV3IEFycmF5KHZlcnRleENvdW50KTsKICAgICAgICBjb25zdCB3ZWJNZXJjYXRvclRzID0gaW5jbHVkZVdlYk1lcmNhdG9yVCA/IG5ldyBBcnJheSh2ZXJ0ZXhDb3VudCkgOiBbXTsKICAgICAgICBjb25zdCBnZW9kZXRpY1N1cmZhY2VOb3JtYWxzID0gaW5jbHVkZUdlb2RldGljU3VyZmFjZU5vcm1hbHMgPyBuZXcgQXJyYXkodmVydGV4Q291bnQpIDogW107CiAgICAgICAgbGV0IHN0YXJ0Um93ID0gMDsKICAgICAgICBsZXQgZW5kUm93ID0gaGVpZ2h0OwogICAgICAgIGxldCBzdGFydENvbCA9IDA7CiAgICAgICAgbGV0IGVuZENvbCA9IHdpZHRoOwogICAgICAgIGlmIChoYXNTa2lydHMpIHsKICAgICAgICAgIC0tc3RhcnRSb3c7CiAgICAgICAgICArK2VuZFJvdzsKICAgICAgICAgIC0tc3RhcnRDb2w7CiAgICAgICAgICArK2VuZENvbDsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc2tpcnRPZmZzZXRQZXJjZW50YWdlID0gMWUtNTsKICAgICAgICBmb3IgKGxldCByb3dJbmRleCA9IHN0YXJ0Um93OyByb3dJbmRleCA8IGVuZFJvdzsgKytyb3dJbmRleCkgewogICAgICAgICAgbGV0IHJvdyA9IHJvd0luZGV4OwogICAgICAgICAgaWYgKHJvdyA8IDApIHsKICAgICAgICAgICAgcm93ID0gMDsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChyb3cgPj0gaGVpZ2h0KSB7CiAgICAgICAgICAgIHJvdyA9IGhlaWdodCAtIDE7CiAgICAgICAgICB9CiAgICAgICAgICBsZXQgbGF0aXR1ZGUgPSBuYXRpdmVSZWN0YW5nbGUubm9ydGggLSBncmFudWxhcml0eVkgKiByb3c7CiAgICAgICAgICBpZiAoIWlzR2VvZ3JhcGhpYykgewogICAgICAgICAgICBsYXRpdHVkZSA9IHBpT3ZlclR3byAtIDIgKiBhdGFuKGV4cCgtbGF0aXR1ZGUgKiBvbmVPdmVyR2xvYmVTZW1pbWFqb3JBeGlzKSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsYXRpdHVkZSA9IHRvUmFkaWFucyhsYXRpdHVkZSk7CiAgICAgICAgICB9CiAgICAgICAgICBsZXQgdjMgPSAobGF0aXR1ZGUgLSBnZW9ncmFwaGljU291dGgpIC8gKGdlb2dyYXBoaWNOb3J0aCAtIGdlb2dyYXBoaWNTb3V0aCk7CiAgICAgICAgICB2MyA9IE1hdGhfZGVmYXVsdC5jbGFtcCh2MywgMCwgMSk7CiAgICAgICAgICBjb25zdCBpc05vcnRoRWRnZSA9IHJvd0luZGV4ID09PSBzdGFydFJvdzsKICAgICAgICAgIGNvbnN0IGlzU291dGhFZGdlID0gcm93SW5kZXggPT09IGVuZFJvdyAtIDE7CiAgICAgICAgICBpZiAoc2tpcnRIZWlnaHQgPiAwKSB7CiAgICAgICAgICAgIGlmIChpc05vcnRoRWRnZSkgewogICAgICAgICAgICAgIGxhdGl0dWRlICs9IHNraXJ0T2Zmc2V0UGVyY2VudGFnZSAqIHJlY3RhbmdsZUhlaWdodDsKICAgICAgICAgICAgfSBlbHNlIGlmIChpc1NvdXRoRWRnZSkgewogICAgICAgICAgICAgIGxhdGl0dWRlIC09IHNraXJ0T2Zmc2V0UGVyY2VudGFnZSAqIHJlY3RhbmdsZUhlaWdodDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgY29uc3QgY29zTGF0aXR1ZGUgPSBjb3M0KGxhdGl0dWRlKTsKICAgICAgICAgIGNvbnN0IG5aID0gc2luNChsYXRpdHVkZSk7CiAgICAgICAgICBjb25zdCBrWiA9IHJhZGlpU3F1YXJlZFogKiBuWjsKICAgICAgICAgIGxldCB3ZWJNZXJjYXRvclQ7CiAgICAgICAgICBpZiAoaW5jbHVkZVdlYk1lcmNhdG9yVCkgewogICAgICAgICAgICB3ZWJNZXJjYXRvclQgPSAoV2ViTWVyY2F0b3JQcm9qZWN0aW9uX2RlZmF1bHQuZ2VvZGV0aWNMYXRpdHVkZVRvTWVyY2F0b3JBbmdsZShsYXRpdHVkZSkgLSBzb3V0aE1lcmNhdG9yWSkgKiBvbmVPdmVyTWVyY2F0b3JIZWlnaHQ7CiAgICAgICAgICB9CiAgICAgICAgICBmb3IgKGxldCBjb2xJbmRleCA9IHN0YXJ0Q29sOyBjb2xJbmRleCA8IGVuZENvbDsgKytjb2xJbmRleCkgewogICAgICAgICAgICBsZXQgY29sID0gY29sSW5kZXg7CiAgICAgICAgICAgIGlmIChjb2wgPCAwKSB7CiAgICAgICAgICAgICAgY29sID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoY29sID49IHdpZHRoKSB7CiAgICAgICAgICAgICAgY29sID0gd2lkdGggLSAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IHRlcnJhaW5PZmZzZXQgPSByb3cgKiAod2lkdGggKiBzdHJpZGUpICsgY29sICogc3RyaWRlOwogICAgICAgICAgICBsZXQgaGVpZ2h0U2FtcGxlOwogICAgICAgICAgICBpZiAoZWxlbWVudHNQZXJIZWlnaHQgPT09IDEpIHsKICAgICAgICAgICAgICBoZWlnaHRTYW1wbGUgPSBoZWlnaHRtYXBbdGVycmFpbk9mZnNldF07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgaGVpZ2h0U2FtcGxlID0gMDsKICAgICAgICAgICAgICBsZXQgZWxlbWVudE9mZnNldDsKICAgICAgICAgICAgICBpZiAoaXNCaWdFbmRpYW4pIHsKICAgICAgICAgICAgICAgIGZvciAoZWxlbWVudE9mZnNldCA9IDA7IGVsZW1lbnRPZmZzZXQgPCBlbGVtZW50c1BlckhlaWdodDsgKytlbGVtZW50T2Zmc2V0KSB7CiAgICAgICAgICAgICAgICAgIGhlaWdodFNhbXBsZSA9IGhlaWdodFNhbXBsZSAqIGVsZW1lbnRNdWx0aXBsaWVyICsgaGVpZ2h0bWFwW3RlcnJhaW5PZmZzZXQgKyBlbGVtZW50T2Zmc2V0XTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZm9yIChlbGVtZW50T2Zmc2V0ID0gZWxlbWVudHNQZXJIZWlnaHQgLSAxOyBlbGVtZW50T2Zmc2V0ID49IDA7IC0tZWxlbWVudE9mZnNldCkgewogICAgICAgICAgICAgICAgICBoZWlnaHRTYW1wbGUgPSBoZWlnaHRTYW1wbGUgKiBlbGVtZW50TXVsdGlwbGllciArIGhlaWdodG1hcFt0ZXJyYWluT2Zmc2V0ICsgZWxlbWVudE9mZnNldF07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGhlaWdodFNhbXBsZSA9IGhlaWdodFNhbXBsZSAqIGhlaWdodFNjYWxlICsgaGVpZ2h0T2Zmc2V0OwogICAgICAgICAgICBtYXhpbXVtSGVpZ2h0ID0gTWF0aC5tYXgobWF4aW11bUhlaWdodCwgaGVpZ2h0U2FtcGxlKTsKICAgICAgICAgICAgbWluaW11bUhlaWdodCA9IE1hdGgubWluKG1pbmltdW1IZWlnaHQsIGhlaWdodFNhbXBsZSk7CiAgICAgICAgICAgIGxldCBsb25naXR1ZGUgPSBuYXRpdmVSZWN0YW5nbGUud2VzdCArIGdyYW51bGFyaXR5WCAqIGNvbDsKICAgICAgICAgICAgaWYgKCFpc0dlb2dyYXBoaWMpIHsKICAgICAgICAgICAgICBsb25naXR1ZGUgPSBsb25naXR1ZGUgKiBvbmVPdmVyR2xvYmVTZW1pbWFqb3JBeGlzOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGxvbmdpdHVkZSA9IHRvUmFkaWFucyhsb25naXR1ZGUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGxldCB1MyA9IChsb25naXR1ZGUgLSBnZW9ncmFwaGljV2VzdCkgLyAoZ2VvZ3JhcGhpY0Vhc3QgLSBnZW9ncmFwaGljV2VzdCk7CiAgICAgICAgICAgIHUzID0gTWF0aF9kZWZhdWx0LmNsYW1wKHUzLCAwLCAxKTsKICAgICAgICAgICAgbGV0IGluZGV4ID0gcm93ICogd2lkdGggKyBjb2w7CiAgICAgICAgICAgIGlmIChza2lydEhlaWdodCA+IDApIHsKICAgICAgICAgICAgICBjb25zdCBpc1dlc3RFZGdlID0gY29sSW5kZXggPT09IHN0YXJ0Q29sOwogICAgICAgICAgICAgIGNvbnN0IGlzRWFzdEVkZ2UgPSBjb2xJbmRleCA9PT0gZW5kQ29sIC0gMTsKICAgICAgICAgICAgICBjb25zdCBpc0VkZ2UyID0gaXNOb3J0aEVkZ2UgfHwgaXNTb3V0aEVkZ2UgfHwgaXNXZXN0RWRnZSB8fCBpc0Vhc3RFZGdlOwogICAgICAgICAgICAgIGNvbnN0IGlzQ29ybmVyID0gKGlzTm9ydGhFZGdlIHx8IGlzU291dGhFZGdlKSAmJiAoaXNXZXN0RWRnZSB8fCBpc0Vhc3RFZGdlKTsKICAgICAgICAgICAgICBpZiAoaXNDb3JuZXIpIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNFZGdlMikgewogICAgICAgICAgICAgICAgaGVpZ2h0U2FtcGxlIC09IHNraXJ0SGVpZ2h0OwogICAgICAgICAgICAgICAgaWYgKGlzV2VzdEVkZ2UpIHsKICAgICAgICAgICAgICAgICAgaW5kZXggPSBncmlkVmVydGV4Q291bnQgKyAoaGVpZ2h0IC0gcm93IC0gMSk7CiAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZSAtPSBza2lydE9mZnNldFBlcmNlbnRhZ2UgKiByZWN0YW5nbGVXaWR0aDsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNTb3V0aEVkZ2UpIHsKICAgICAgICAgICAgICAgICAgaW5kZXggPSBncmlkVmVydGV4Q291bnQgKyBoZWlnaHQgKyAod2lkdGggLSBjb2wgLSAxKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNFYXN0RWRnZSkgewogICAgICAgICAgICAgICAgICBpbmRleCA9IGdyaWRWZXJ0ZXhDb3VudCArIGhlaWdodCArIHdpZHRoICsgcm93OwogICAgICAgICAgICAgICAgICBsb25naXR1ZGUgKz0gc2tpcnRPZmZzZXRQZXJjZW50YWdlICogcmVjdGFuZ2xlV2lkdGg7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzTm9ydGhFZGdlKSB7CiAgICAgICAgICAgICAgICAgIGluZGV4ID0gZ3JpZFZlcnRleENvdW50ICsgaGVpZ2h0ICsgd2lkdGggKyBoZWlnaHQgKyBjb2w7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG5YID0gY29zTGF0aXR1ZGUgKiBjb3M0KGxvbmdpdHVkZSk7CiAgICAgICAgICAgIGNvbnN0IG5ZID0gY29zTGF0aXR1ZGUgKiBzaW40KGxvbmdpdHVkZSk7CiAgICAgICAgICAgIGNvbnN0IGtYID0gcmFkaWlTcXVhcmVkWCAqIG5YOwogICAgICAgICAgICBjb25zdCBrWSA9IHJhZGlpU3F1YXJlZFkgKiBuWTsKICAgICAgICAgICAgY29uc3QgZ2FtbWEgPSBzcXJ0MihrWCAqIG5YICsga1kgKiBuWSArIGtaICogblopOwogICAgICAgICAgICBjb25zdCBvbmVPdmVyR2FtbWEgPSAxIC8gZ2FtbWE7CiAgICAgICAgICAgIGNvbnN0IHJTdXJmYWNlWCA9IGtYICogb25lT3ZlckdhbW1hOwogICAgICAgICAgICBjb25zdCByU3VyZmFjZVkgPSBrWSAqIG9uZU92ZXJHYW1tYTsKICAgICAgICAgICAgY29uc3QgclN1cmZhY2VaID0ga1ogKiBvbmVPdmVyR2FtbWE7CiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICAgICAgICBwb3NpdGlvbi54ID0gclN1cmZhY2VYICsgblggKiBoZWlnaHRTYW1wbGU7CiAgICAgICAgICAgIHBvc2l0aW9uLnkgPSByU3VyZmFjZVkgKyBuWSAqIGhlaWdodFNhbXBsZTsKICAgICAgICAgICAgcG9zaXRpb24ueiA9IHJTdXJmYWNlWiArIG5aICogaGVpZ2h0U2FtcGxlOwogICAgICAgICAgICBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVBvaW50KHRvRU5VLCBwb3NpdGlvbiwgY2FydGVzaWFuM1NjcmF0Y2g3KTsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm1pbmltdW1CeUNvbXBvbmVudChjYXJ0ZXNpYW4zU2NyYXRjaDcsIG1pbmltdW0sIG1pbmltdW0pOwogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubWF4aW11bUJ5Q29tcG9uZW50KGNhcnRlc2lhbjNTY3JhdGNoNywgbWF4aW11bSwgbWF4aW11bSk7CiAgICAgICAgICAgIGhNaW4gPSBNYXRoLm1pbihoTWluLCBoZWlnaHRTYW1wbGUpOwogICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXhdID0gcG9zaXRpb247CiAgICAgICAgICAgIHV2c1tpbmRleF0gPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KHUzLCB2Myk7CiAgICAgICAgICAgIGhlaWdodHNbaW5kZXhdID0gaGVpZ2h0U2FtcGxlOwogICAgICAgICAgICBpZiAoaW5jbHVkZVdlYk1lcmNhdG9yVCkgewogICAgICAgICAgICAgIHdlYk1lcmNhdG9yVHNbaW5kZXhdID0gd2ViTWVyY2F0b3JUOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChpbmNsdWRlR2VvZGV0aWNTdXJmYWNlTm9ybWFscykgewogICAgICAgICAgICAgIGdlb2RldGljU3VyZmFjZU5vcm1hbHNbaW5kZXhdID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbCgKICAgICAgICAgICAgICAgIHBvc2l0aW9uCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCBib3VuZGluZ1NwaGVyZTNEID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tUG9pbnRzKHBvc2l0aW9ucyk7CiAgICAgICAgbGV0IG9yaWVudGVkQm91bmRpbmdCb3g7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZWN0YW5nbGUpKSB7CiAgICAgICAgICBvcmllbnRlZEJvdW5kaW5nQm94ID0gT3JpZW50ZWRCb3VuZGluZ0JveF9kZWZhdWx0LmZyb21SZWN0YW5nbGUoCiAgICAgICAgICAgIHJlY3RhbmdsZSwKICAgICAgICAgICAgbWluaW11bUhlaWdodCwKICAgICAgICAgICAgbWF4aW11bUhlaWdodCwKICAgICAgICAgICAgZWxsaXBzb2lkCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBsZXQgb2NjbHVkZWVQb2ludEluU2NhbGVkU3BhY2U7CiAgICAgICAgaWYgKGhhc1JlbGF0aXZlVG9DZW50ZXIpIHsKICAgICAgICAgIGNvbnN0IG9jY2x1ZGVyID0gbmV3IEVsbGlwc29pZGFsT2NjbHVkZXJfZGVmYXVsdChlbGxpcHNvaWQpOwogICAgICAgICAgb2NjbHVkZWVQb2ludEluU2NhbGVkU3BhY2UgPSBvY2NsdWRlci5jb21wdXRlSG9yaXpvbkN1bGxpbmdQb2ludFBvc3NpYmx5VW5kZXJFbGxpcHNvaWQoCiAgICAgICAgICAgIHJlbGF0aXZlVG9DZW50ZXIsCiAgICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgICAgbWluaW11bUhlaWdodAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgYWFCb3ggPSBuZXcgQXhpc0FsaWduZWRCb3VuZGluZ0JveF9kZWZhdWx0KG1pbmltdW0sIG1heGltdW0sIHJlbGF0aXZlVG9DZW50ZXIpOwogICAgICAgIGNvbnN0IGVuY29kaW5nID0gbmV3IFRlcnJhaW5FbmNvZGluZ19kZWZhdWx0KAogICAgICAgICAgcmVsYXRpdmVUb0NlbnRlciwKICAgICAgICAgIGFhQm94LAogICAgICAgICAgaE1pbiwKICAgICAgICAgIG1heGltdW1IZWlnaHQsCiAgICAgICAgICBmcm9tRU5VLAogICAgICAgICAgZmFsc2UsCiAgICAgICAgICBpbmNsdWRlV2ViTWVyY2F0b3JULAogICAgICAgICAgaW5jbHVkZUdlb2RldGljU3VyZmFjZU5vcm1hbHMsCiAgICAgICAgICBleGFnZ2VyYXRpb24sCiAgICAgICAgICBleGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodAogICAgICAgICk7CiAgICAgICAgY29uc3QgdmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KHZlcnRleENvdW50ICogZW5jb2Rpbmcuc3RyaWRlKTsKICAgICAgICBsZXQgYnVmZmVySW5kZXggPSAwOwogICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdmVydGV4Q291bnQ7ICsraikgewogICAgICAgICAgYnVmZmVySW5kZXggPSBlbmNvZGluZy5lbmNvZGUoCiAgICAgICAgICAgIHZlcnRpY2VzLAogICAgICAgICAgICBidWZmZXJJbmRleCwKICAgICAgICAgICAgcG9zaXRpb25zW2pdLAogICAgICAgICAgICB1dnNbal0sCiAgICAgICAgICAgIGhlaWdodHNbal0sCiAgICAgICAgICAgIHZvaWQgMCwKICAgICAgICAgICAgd2ViTWVyY2F0b3JUc1tqXSwKICAgICAgICAgICAgZ2VvZGV0aWNTdXJmYWNlTm9ybWFsc1tqXQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHZlcnRpY2VzLAogICAgICAgICAgbWF4aW11bUhlaWdodCwKICAgICAgICAgIG1pbmltdW1IZWlnaHQsCiAgICAgICAgICBlbmNvZGluZywKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlM0QsCiAgICAgICAgICBvcmllbnRlZEJvdW5kaW5nQm94LAogICAgICAgICAgb2NjbHVkZWVQb2ludEluU2NhbGVkU3BhY2UKICAgICAgICB9OwogICAgICB9OwogICAgICBIZWlnaHRtYXBUZXNzZWxsYXRvcl9kZWZhdWx0ID0gSGVpZ2h0bWFwVGVzc2VsbGF0b3I7CiAgICB9CiAgfSk7CgogIC8vIG5vZGVfbW9kdWxlcy9sZXJjL0xlcmNEZWNvZGUuanMKICB2YXIgcmVxdWlyZV9MZXJjRGVjb2RlID0gX19jb21tb25KUyh7CiAgICAibm9kZV9tb2R1bGVzL2xlcmMvTGVyY0RlY29kZS5qcyIoZXhwb3J0czIsIG1vZHVsZSkgewogICAgICAvKiBDb3B5cmlnaHQgMjAxNS0yMDE4IEVzcmkuIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAgQHByZXNlcnZlICovCiAgICAgIChmdW5jdGlvbigpIHsKICAgICAgICB2YXIgTGVyY0RlY29kZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIENudFpJbWFnZSA9IHt9OwogICAgICAgICAgQ250WkltYWdlLmRlZmF1bHROb0RhdGFWYWx1ZSA9IC0zNDAyNzk5OTM4NzkwMTQ4NGUyMjsKICAgICAgICAgIENudFpJbWFnZS5kZWNvZGUgPSBmdW5jdGlvbihpbnB1dCwgb3B0aW9ucykgewogICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgICAgICAgICAgdmFyIHNraXBNYXNrID0gb3B0aW9ucy5lbmNvZGVkTWFza0RhdGEgfHwgb3B0aW9ucy5lbmNvZGVkTWFza0RhdGEgPT09IG51bGw7CiAgICAgICAgICAgIHZhciBwYXJzZWREYXRhID0gcGFyc2UoaW5wdXQsIG9wdGlvbnMuaW5wdXRPZmZzZXQgfHwgMCwgc2tpcE1hc2spOwogICAgICAgICAgICB2YXIgbm9EYXRhVmFsdWUgPSBvcHRpb25zLm5vRGF0YVZhbHVlICE9PSBudWxsID8gb3B0aW9ucy5ub0RhdGFWYWx1ZSA6IENudFpJbWFnZS5kZWZhdWx0Tm9EYXRhVmFsdWU7CiAgICAgICAgICAgIHZhciB1bmNvbXByZXNzZWREYXRhID0gdW5jb21wcmVzc1BpeGVsVmFsdWVzKAogICAgICAgICAgICAgIHBhcnNlZERhdGEsCiAgICAgICAgICAgICAgb3B0aW9ucy5waXhlbFR5cGUgfHwgRmxvYXQzMkFycmF5LAogICAgICAgICAgICAgIG9wdGlvbnMuZW5jb2RlZE1hc2tEYXRhLAogICAgICAgICAgICAgIG5vRGF0YVZhbHVlLAogICAgICAgICAgICAgIG9wdGlvbnMucmV0dXJuTWFzawogICAgICAgICAgICApOwogICAgICAgICAgICB2YXIgcmVzdWx0ID0gewogICAgICAgICAgICAgIHdpZHRoOiBwYXJzZWREYXRhLndpZHRoLAogICAgICAgICAgICAgIGhlaWdodDogcGFyc2VkRGF0YS5oZWlnaHQsCiAgICAgICAgICAgICAgcGl4ZWxEYXRhOiB1bmNvbXByZXNzZWREYXRhLnJlc3VsdFBpeGVscywKICAgICAgICAgICAgICBtaW5WYWx1ZTogdW5jb21wcmVzc2VkRGF0YS5taW5WYWx1ZSwKICAgICAgICAgICAgICBtYXhWYWx1ZTogcGFyc2VkRGF0YS5waXhlbHMubWF4VmFsdWUsCiAgICAgICAgICAgICAgbm9EYXRhVmFsdWUKICAgICAgICAgICAgfTsKICAgICAgICAgICAgaWYgKHVuY29tcHJlc3NlZERhdGEucmVzdWx0TWFzaykgewogICAgICAgICAgICAgIHJlc3VsdC5tYXNrRGF0YSA9IHVuY29tcHJlc3NlZERhdGEucmVzdWx0TWFzazsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAob3B0aW9ucy5yZXR1cm5FbmNvZGVkTWFzayAmJiBwYXJzZWREYXRhLm1hc2spIHsKICAgICAgICAgICAgICByZXN1bHQuZW5jb2RlZE1hc2tEYXRhID0gcGFyc2VkRGF0YS5tYXNrLmJpdHNldCA/IHBhcnNlZERhdGEubWFzay5iaXRzZXQgOiBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChvcHRpb25zLnJldHVybkZpbGVJbmZvKSB7CiAgICAgICAgICAgICAgcmVzdWx0LmZpbGVJbmZvID0gZm9ybWF0RmlsZUluZm8ocGFyc2VkRGF0YSk7CiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY29tcHV0ZVVzZWRCaXREZXB0aHMpIHsKICAgICAgICAgICAgICAgIHJlc3VsdC5maWxlSW5mby5iaXREZXB0aHMgPSBjb21wdXRlVXNlZEJpdERlcHRocyhwYXJzZWREYXRhKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgdW5jb21wcmVzc1BpeGVsVmFsdWVzID0gZnVuY3Rpb24oZGF0YSwgVHlwZWRBcnJheUNsYXNzLCBtYXNrQml0c2V0LCBub0RhdGFWYWx1ZSwgc3RvcmVEZWNvZGVkTWFzaykgewogICAgICAgICAgICB2YXIgYmxvY2tJZHggPSAwOwogICAgICAgICAgICB2YXIgbnVtWCA9IGRhdGEucGl4ZWxzLm51bUJsb2Nrc1g7CiAgICAgICAgICAgIHZhciBudW1ZID0gZGF0YS5waXhlbHMubnVtQmxvY2tzWTsKICAgICAgICAgICAgdmFyIGJsb2NrV2lkdGggPSBNYXRoLmZsb29yKGRhdGEud2lkdGggLyBudW1YKTsKICAgICAgICAgICAgdmFyIGJsb2NrSGVpZ2h0ID0gTWF0aC5mbG9vcihkYXRhLmhlaWdodCAvIG51bVkpOwogICAgICAgICAgICB2YXIgc2NhbGUgPSAyICogZGF0YS5tYXhaRXJyb3I7CiAgICAgICAgICAgIHZhciBtaW5WYWx1ZSA9IE51bWJlci5NQVhfVkFMVUUsIGN1cnJlbnRWYWx1ZTsKICAgICAgICAgICAgbWFza0JpdHNldCA9IG1hc2tCaXRzZXQgfHwgKGRhdGEubWFzayA/IGRhdGEubWFzay5iaXRzZXQgOiBudWxsKTsKICAgICAgICAgICAgdmFyIHJlc3VsdFBpeGVscywgcmVzdWx0TWFzazsKICAgICAgICAgICAgcmVzdWx0UGl4ZWxzID0gbmV3IFR5cGVkQXJyYXlDbGFzcyhkYXRhLndpZHRoICogZGF0YS5oZWlnaHQpOwogICAgICAgICAgICBpZiAoc3RvcmVEZWNvZGVkTWFzayAmJiBtYXNrQml0c2V0KSB7CiAgICAgICAgICAgICAgcmVzdWx0TWFzayA9IG5ldyBVaW50OEFycmF5KGRhdGEud2lkdGggKiBkYXRhLmhlaWdodCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGJsb2NrRGF0YUJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoYmxvY2tXaWR0aCAqIGJsb2NrSGVpZ2h0KTsKICAgICAgICAgICAgdmFyIHh4LCB5eTsKICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPD0gbnVtWTsgeSsrKSB7CiAgICAgICAgICAgICAgdmFyIHRoaXNCbG9ja0hlaWdodCA9IHkgIT09IG51bVkgPyBibG9ja0hlaWdodCA6IGRhdGEuaGVpZ2h0ICUgbnVtWTsKICAgICAgICAgICAgICBpZiAodGhpc0Jsb2NrSGVpZ2h0ID09PSAwKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPD0gbnVtWDsgeCsrKSB7CiAgICAgICAgICAgICAgICB2YXIgdGhpc0Jsb2NrV2lkdGggPSB4ICE9PSBudW1YID8gYmxvY2tXaWR0aCA6IGRhdGEud2lkdGggJSBudW1YOwogICAgICAgICAgICAgICAgaWYgKHRoaXNCbG9ja1dpZHRoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIG91dFB0ciA9IHkgKiBkYXRhLndpZHRoICogYmxvY2tIZWlnaHQgKyB4ICogYmxvY2tXaWR0aDsKICAgICAgICAgICAgICAgIHZhciBvdXRTdHJpZGUgPSBkYXRhLndpZHRoIC0gdGhpc0Jsb2NrV2lkdGg7CiAgICAgICAgICAgICAgICB2YXIgYmxvY2sgPSBkYXRhLnBpeGVscy5ibG9ja3NbYmxvY2tJZHhdOwogICAgICAgICAgICAgICAgdmFyIGJsb2NrRGF0YSwgYmxvY2tQdHIsIGNvbnN0VmFsdWU7CiAgICAgICAgICAgICAgICBpZiAoYmxvY2suZW5jb2RpbmcgPCAyKSB7CiAgICAgICAgICAgICAgICAgIGlmIChibG9jay5lbmNvZGluZyA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJsb2NrRGF0YSA9IGJsb2NrLnJhd0RhdGE7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdW5zdHVmZihibG9jay5zdHVmZmVkRGF0YSwgYmxvY2suYml0c1BlclBpeGVsLCBibG9jay5udW1WYWxpZFBpeGVscywgYmxvY2sub2Zmc2V0LCBzY2FsZSwgYmxvY2tEYXRhQnVmZmVyLCBkYXRhLnBpeGVscy5tYXhWYWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYmxvY2tEYXRhID0gYmxvY2tEYXRhQnVmZmVyOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGJsb2NrUHRyID0gMDsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYmxvY2suZW5jb2RpbmcgPT09IDIpIHsKICAgICAgICAgICAgICAgICAgY29uc3RWYWx1ZSA9IDA7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBjb25zdFZhbHVlID0gYmxvY2sub2Zmc2V0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIG1hc2tCeXRlOwogICAgICAgICAgICAgICAgaWYgKG1hc2tCaXRzZXQpIHsKICAgICAgICAgICAgICAgICAgZm9yICh5eSA9IDA7IHl5IDwgdGhpc0Jsb2NrSGVpZ2h0OyB5eSsrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKG91dFB0ciAmIDcpIHsKICAgICAgICAgICAgICAgICAgICAgIG1hc2tCeXRlID0gbWFza0JpdHNldFtvdXRQdHIgPj4gM107CiAgICAgICAgICAgICAgICAgICAgICBtYXNrQnl0ZSA8PD0gb3V0UHRyICYgNzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZm9yICh4eCA9IDA7IHh4IDwgdGhpc0Jsb2NrV2lkdGg7IHh4KyspIHsKICAgICAgICAgICAgICAgICAgICAgIGlmICghKG91dFB0ciAmIDcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tCeXRlID0gbWFza0JpdHNldFtvdXRQdHIgPj4gM107CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza0J5dGUgJiAxMjgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdE1hc2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRNYXNrW291dFB0cl0gPSAxOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGJsb2NrLmVuY29kaW5nIDwgMiA/IGJsb2NrRGF0YVtibG9ja1B0cisrXSA6IGNvbnN0VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIG1pblZhbHVlID0gbWluVmFsdWUgPiBjdXJyZW50VmFsdWUgPyBjdXJyZW50VmFsdWUgOiBtaW5WYWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0UGl4ZWxzW291dFB0cisrXSA9IGN1cnJlbnRWYWx1ZTsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRNYXNrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0TWFza1tvdXRQdHJdID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRQaXhlbHNbb3V0UHRyKytdID0gbm9EYXRhVmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBtYXNrQnl0ZSA8PD0gMTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgb3V0UHRyICs9IG91dFN0cmlkZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrLmVuY29kaW5nIDwgMikgewogICAgICAgICAgICAgICAgICAgIGZvciAoeXkgPSAwOyB5eSA8IHRoaXNCbG9ja0hlaWdodDsgeXkrKykgewogICAgICAgICAgICAgICAgICAgICAgZm9yICh4eCA9IDA7IHh4IDwgdGhpc0Jsb2NrV2lkdGg7IHh4KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlID0gYmxvY2tEYXRhW2Jsb2NrUHRyKytdOwogICAgICAgICAgICAgICAgICAgICAgICBtaW5WYWx1ZSA9IG1pblZhbHVlID4gY3VycmVudFZhbHVlID8gY3VycmVudFZhbHVlIDogbWluVmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFBpeGVsc1tvdXRQdHIrK10gPSBjdXJyZW50VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBvdXRQdHIgKz0gb3V0U3RyaWRlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBtaW5WYWx1ZSA9IG1pblZhbHVlID4gY29uc3RWYWx1ZSA/IGNvbnN0VmFsdWUgOiBtaW5WYWx1ZTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHl5ID0gMDsgeXkgPCB0aGlzQmxvY2tIZWlnaHQ7IHl5KyspIHsKICAgICAgICAgICAgICAgICAgICAgIGZvciAoeHggPSAwOyB4eCA8IHRoaXNCbG9ja1dpZHRoOyB4eCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFBpeGVsc1tvdXRQdHIrK10gPSBjb25zdFZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgb3V0UHRyICs9IG91dFN0cmlkZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChibG9jay5lbmNvZGluZyA9PT0gMSAmJiBibG9ja1B0ciAhPT0gYmxvY2subnVtVmFsaWRQaXhlbHMpIHsKICAgICAgICAgICAgICAgICAgdGhyb3cgIkJsb2NrIGFuZCBNYXNrIGRvIG5vdCBtYXRjaCI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBibG9ja0lkeCsrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIHJlc3VsdFBpeGVscywKICAgICAgICAgICAgICByZXN1bHRNYXNrLAogICAgICAgICAgICAgIG1pblZhbHVlCiAgICAgICAgICAgIH07CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIGZvcm1hdEZpbGVJbmZvID0gZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICJmaWxlSWRlbnRpZmllclN0cmluZyI6IGRhdGEuZmlsZUlkZW50aWZpZXJTdHJpbmcsCiAgICAgICAgICAgICAgImZpbGVWZXJzaW9uIjogZGF0YS5maWxlVmVyc2lvbiwKICAgICAgICAgICAgICAiaW1hZ2VUeXBlIjogZGF0YS5pbWFnZVR5cGUsCiAgICAgICAgICAgICAgImhlaWdodCI6IGRhdGEuaGVpZ2h0LAogICAgICAgICAgICAgICJ3aWR0aCI6IGRhdGEud2lkdGgsCiAgICAgICAgICAgICAgIm1heFpFcnJvciI6IGRhdGEubWF4WkVycm9yLAogICAgICAgICAgICAgICJlb2ZPZmZzZXQiOiBkYXRhLmVvZk9mZnNldCwKICAgICAgICAgICAgICAibWFzayI6IGRhdGEubWFzayA/IHsKICAgICAgICAgICAgICAgICJudW1CbG9ja3NYIjogZGF0YS5tYXNrLm51bUJsb2Nrc1gsCiAgICAgICAgICAgICAgICAibnVtQmxvY2tzWSI6IGRhdGEubWFzay5udW1CbG9ja3NZLAogICAgICAgICAgICAgICAgIm51bUJ5dGVzIjogZGF0YS5tYXNrLm51bUJ5dGVzLAogICAgICAgICAgICAgICAgIm1heFZhbHVlIjogZGF0YS5tYXNrLm1heFZhbHVlCiAgICAgICAgICAgICAgfSA6IG51bGwsCiAgICAgICAgICAgICAgInBpeGVscyI6IHsKICAgICAgICAgICAgICAgICJudW1CbG9ja3NYIjogZGF0YS5waXhlbHMubnVtQmxvY2tzWCwKICAgICAgICAgICAgICAgICJudW1CbG9ja3NZIjogZGF0YS5waXhlbHMubnVtQmxvY2tzWSwKICAgICAgICAgICAgICAgICJudW1CeXRlcyI6IGRhdGEucGl4ZWxzLm51bUJ5dGVzLAogICAgICAgICAgICAgICAgIm1heFZhbHVlIjogZGF0YS5waXhlbHMubWF4VmFsdWUsCiAgICAgICAgICAgICAgICAibm9EYXRhVmFsdWUiOiBkYXRhLm5vRGF0YVZhbHVlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgfTsKICAgICAgICAgIHZhciBjb21wdXRlVXNlZEJpdERlcHRocyA9IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgdmFyIG51bUJsb2NrcyA9IGRhdGEucGl4ZWxzLm51bUJsb2Nrc1ggKiBkYXRhLnBpeGVscy5udW1CbG9ja3NZOwogICAgICAgICAgICB2YXIgYml0RGVwdGhzID0ge307CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtQmxvY2tzOyBpKyspIHsKICAgICAgICAgICAgICB2YXIgYmxvY2sgPSBkYXRhLnBpeGVscy5ibG9ja3NbaV07CiAgICAgICAgICAgICAgaWYgKGJsb2NrLmVuY29kaW5nID09PSAwKSB7CiAgICAgICAgICAgICAgICBiaXREZXB0aHMuZmxvYXQzMiA9IHRydWU7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChibG9jay5lbmNvZGluZyA9PT0gMSkgewogICAgICAgICAgICAgICAgYml0RGVwdGhzW2Jsb2NrLmJpdHNQZXJQaXhlbF0gPSB0cnVlOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBiaXREZXB0aHNbMF0gPSB0cnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoYml0RGVwdGhzKTsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgcGFyc2UgPSBmdW5jdGlvbihpbnB1dCwgZnAsIHNraXBNYXNrKSB7CiAgICAgICAgICAgIHZhciBkYXRhID0ge307CiAgICAgICAgICAgIHZhciBmaWxlSWRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoaW5wdXQsIGZwLCAxMCk7CiAgICAgICAgICAgIGRhdGEuZmlsZUlkZW50aWZpZXJTdHJpbmcgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGZpbGVJZFZpZXcpOwogICAgICAgICAgICBpZiAoZGF0YS5maWxlSWRlbnRpZmllclN0cmluZy50cmltKCkgIT09ICJDbnRaSW1hZ2UiKSB7CiAgICAgICAgICAgICAgdGhyb3cgIlVuZXhwZWN0ZWQgZmlsZSBpZGVudGlmaWVyIHN0cmluZzogIiArIGRhdGEuZmlsZUlkZW50aWZpZXJTdHJpbmc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnAgKz0gMTA7CiAgICAgICAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGlucHV0LCBmcCwgMjQpOwogICAgICAgICAgICBkYXRhLmZpbGVWZXJzaW9uID0gdmlldy5nZXRJbnQzMigwLCB0cnVlKTsKICAgICAgICAgICAgZGF0YS5pbWFnZVR5cGUgPSB2aWV3LmdldEludDMyKDQsIHRydWUpOwogICAgICAgICAgICBkYXRhLmhlaWdodCA9IHZpZXcuZ2V0VWludDMyKDgsIHRydWUpOwogICAgICAgICAgICBkYXRhLndpZHRoID0gdmlldy5nZXRVaW50MzIoMTIsIHRydWUpOwogICAgICAgICAgICBkYXRhLm1heFpFcnJvciA9IHZpZXcuZ2V0RmxvYXQ2NCgxNiwgdHJ1ZSk7CiAgICAgICAgICAgIGZwICs9IDI0OwogICAgICAgICAgICBpZiAoIXNraXBNYXNrKSB7CiAgICAgICAgICAgICAgdmlldyA9IG5ldyBEYXRhVmlldyhpbnB1dCwgZnAsIDE2KTsKICAgICAgICAgICAgICBkYXRhLm1hc2sgPSB7fTsKICAgICAgICAgICAgICBkYXRhLm1hc2subnVtQmxvY2tzWSA9IHZpZXcuZ2V0VWludDMyKDAsIHRydWUpOwogICAgICAgICAgICAgIGRhdGEubWFzay5udW1CbG9ja3NYID0gdmlldy5nZXRVaW50MzIoNCwgdHJ1ZSk7CiAgICAgICAgICAgICAgZGF0YS5tYXNrLm51bUJ5dGVzID0gdmlldy5nZXRVaW50MzIoOCwgdHJ1ZSk7CiAgICAgICAgICAgICAgZGF0YS5tYXNrLm1heFZhbHVlID0gdmlldy5nZXRGbG9hdDMyKDEyLCB0cnVlKTsKICAgICAgICAgICAgICBmcCArPSAxNjsKICAgICAgICAgICAgICBpZiAoZGF0YS5tYXNrLm51bUJ5dGVzID4gMCkgewogICAgICAgICAgICAgICAgdmFyIGJpdHNldCA9IG5ldyBVaW50OEFycmF5KE1hdGguY2VpbChkYXRhLndpZHRoICogZGF0YS5oZWlnaHQgLyA4KSk7CiAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IERhdGFWaWV3KGlucHV0LCBmcCwgZGF0YS5tYXNrLm51bUJ5dGVzKTsKICAgICAgICAgICAgICAgIHZhciBjbnQgPSB2aWV3LmdldEludDE2KDAsIHRydWUpOwogICAgICAgICAgICAgICAgdmFyIGlwID0gMiwgb3AgPSAwOwogICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICBpZiAoY250ID4gMCkgewogICAgICAgICAgICAgICAgICAgIHdoaWxlIChjbnQtLSkgewogICAgICAgICAgICAgICAgICAgICAgYml0c2V0W29wKytdID0gdmlldy5nZXRVaW50OChpcCsrKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IHZpZXcuZ2V0VWludDgoaXArKyk7CiAgICAgICAgICAgICAgICAgICAgY250ID0gLWNudDsKICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY250LS0pIHsKICAgICAgICAgICAgICAgICAgICAgIGJpdHNldFtvcCsrXSA9IHZhbDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgY250ID0gdmlldy5nZXRJbnQxNihpcCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgIGlwICs9IDI7CiAgICAgICAgICAgICAgICB9IHdoaWxlIChpcCA8IGRhdGEubWFzay5udW1CeXRlcyk7CiAgICAgICAgICAgICAgICBpZiAoY250ICE9PSAtMzI3NjggfHwgb3AgPCBiaXRzZXQubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgIHRocm93ICJVbmV4cGVjdGVkIGVuZCBvZiBtYXNrIFJMRSBlbmNvZGluZyI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBkYXRhLm1hc2suYml0c2V0ID0gYml0c2V0OwogICAgICAgICAgICAgICAgZnAgKz0gZGF0YS5tYXNrLm51bUJ5dGVzOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGRhdGEubWFzay5udW1CeXRlcyB8IGRhdGEubWFzay5udW1CbG9ja3NZIHwgZGF0YS5tYXNrLm1heFZhbHVlKSA9PT0gMCkgewogICAgICAgICAgICAgICAgZGF0YS5tYXNrLmJpdHNldCA9IG5ldyBVaW50OEFycmF5KE1hdGguY2VpbChkYXRhLndpZHRoICogZGF0YS5oZWlnaHQgLyA4KSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHZpZXcgPSBuZXcgRGF0YVZpZXcoaW5wdXQsIGZwLCAxNik7CiAgICAgICAgICAgIGRhdGEucGl4ZWxzID0ge307CiAgICAgICAgICAgIGRhdGEucGl4ZWxzLm51bUJsb2Nrc1kgPSB2aWV3LmdldFVpbnQzMigwLCB0cnVlKTsKICAgICAgICAgICAgZGF0YS5waXhlbHMubnVtQmxvY2tzWCA9IHZpZXcuZ2V0VWludDMyKDQsIHRydWUpOwogICAgICAgICAgICBkYXRhLnBpeGVscy5udW1CeXRlcyA9IHZpZXcuZ2V0VWludDMyKDgsIHRydWUpOwogICAgICAgICAgICBkYXRhLnBpeGVscy5tYXhWYWx1ZSA9IHZpZXcuZ2V0RmxvYXQzMigxMiwgdHJ1ZSk7CiAgICAgICAgICAgIGZwICs9IDE2OwogICAgICAgICAgICB2YXIgbnVtQmxvY2tzWCA9IGRhdGEucGl4ZWxzLm51bUJsb2Nrc1g7CiAgICAgICAgICAgIHZhciBudW1CbG9ja3NZID0gZGF0YS5waXhlbHMubnVtQmxvY2tzWTsKICAgICAgICAgICAgdmFyIGFjdHVhbE51bUJsb2Nrc1ggPSBudW1CbG9ja3NYICsgKGRhdGEud2lkdGggJSBudW1CbG9ja3NYID4gMCA/IDEgOiAwKTsKICAgICAgICAgICAgdmFyIGFjdHVhbE51bUJsb2Nrc1kgPSBudW1CbG9ja3NZICsgKGRhdGEuaGVpZ2h0ICUgbnVtQmxvY2tzWSA+IDAgPyAxIDogMCk7CiAgICAgICAgICAgIGRhdGEucGl4ZWxzLmJsb2NrcyA9IG5ldyBBcnJheShhY3R1YWxOdW1CbG9ja3NYICogYWN0dWFsTnVtQmxvY2tzWSk7CiAgICAgICAgICAgIHZhciBibG9ja0kgPSAwOwogICAgICAgICAgICBmb3IgKHZhciBibG9ja1kgPSAwOyBibG9ja1kgPCBhY3R1YWxOdW1CbG9ja3NZOyBibG9ja1krKykgewogICAgICAgICAgICAgIGZvciAodmFyIGJsb2NrWCA9IDA7IGJsb2NrWCA8IGFjdHVhbE51bUJsb2Nrc1g7IGJsb2NrWCsrKSB7CiAgICAgICAgICAgICAgICB2YXIgc2l6ZSA9IDA7CiAgICAgICAgICAgICAgICB2YXIgYnl0ZXNMZWZ0ID0gaW5wdXQuYnl0ZUxlbmd0aCAtIGZwOwogICAgICAgICAgICAgICAgdmlldyA9IG5ldyBEYXRhVmlldyhpbnB1dCwgZnAsIE1hdGgubWluKDEwLCBieXRlc0xlZnQpKTsKICAgICAgICAgICAgICAgIHZhciBibG9jayA9IHt9OwogICAgICAgICAgICAgICAgZGF0YS5waXhlbHMuYmxvY2tzW2Jsb2NrSSsrXSA9IGJsb2NrOwogICAgICAgICAgICAgICAgdmFyIGhlYWRlckJ5dGUgPSB2aWV3LmdldFVpbnQ4KDApOwogICAgICAgICAgICAgICAgc2l6ZSsrOwogICAgICAgICAgICAgICAgYmxvY2suZW5jb2RpbmcgPSBoZWFkZXJCeXRlICYgNjM7CiAgICAgICAgICAgICAgICBpZiAoYmxvY2suZW5jb2RpbmcgPiAzKSB7CiAgICAgICAgICAgICAgICAgIHRocm93ICJJbnZhbGlkIGJsb2NrIGVuY29kaW5nICgiICsgYmxvY2suZW5jb2RpbmcgKyAiKSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoYmxvY2suZW5jb2RpbmcgPT09IDIpIHsKICAgICAgICAgICAgICAgICAgZnArKzsKICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyQnl0ZSAhPT0gMCAmJiBoZWFkZXJCeXRlICE9PSAyKSB7CiAgICAgICAgICAgICAgICAgIGhlYWRlckJ5dGUgPj49IDY7CiAgICAgICAgICAgICAgICAgIGJsb2NrLm9mZnNldFR5cGUgPSBoZWFkZXJCeXRlOwogICAgICAgICAgICAgICAgICBpZiAoaGVhZGVyQnl0ZSA9PT0gMikgewogICAgICAgICAgICAgICAgICAgIGJsb2NrLm9mZnNldCA9IHZpZXcuZ2V0SW50OCgxKTsKICAgICAgICAgICAgICAgICAgICBzaXplKys7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGVhZGVyQnl0ZSA9PT0gMSkgewogICAgICAgICAgICAgICAgICAgIGJsb2NrLm9mZnNldCA9IHZpZXcuZ2V0SW50MTYoMSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgc2l6ZSArPSAyOwogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhlYWRlckJ5dGUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBibG9jay5vZmZzZXQgPSB2aWV3LmdldEZsb2F0MzIoMSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgc2l6ZSArPSA0OwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRocm93ICJJbnZhbGlkIGJsb2NrIG9mZnNldCB0eXBlIjsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoYmxvY2suZW5jb2RpbmcgPT09IDEpIHsKICAgICAgICAgICAgICAgICAgICBoZWFkZXJCeXRlID0gdmlldy5nZXRVaW50OChzaXplKTsKICAgICAgICAgICAgICAgICAgICBzaXplKys7CiAgICAgICAgICAgICAgICAgICAgYmxvY2suYml0c1BlclBpeGVsID0gaGVhZGVyQnl0ZSAmIDYzOwogICAgICAgICAgICAgICAgICAgIGhlYWRlckJ5dGUgPj49IDY7CiAgICAgICAgICAgICAgICAgICAgYmxvY2subnVtVmFsaWRQaXhlbHNUeXBlID0gaGVhZGVyQnl0ZTsKICAgICAgICAgICAgICAgICAgICBpZiAoaGVhZGVyQnl0ZSA9PT0gMikgewogICAgICAgICAgICAgICAgICAgICAgYmxvY2subnVtVmFsaWRQaXhlbHMgPSB2aWV3LmdldFVpbnQ4KHNpemUpOwogICAgICAgICAgICAgICAgICAgICAgc2l6ZSsrOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGVhZGVyQnl0ZSA9PT0gMSkgewogICAgICAgICAgICAgICAgICAgICAgYmxvY2subnVtVmFsaWRQaXhlbHMgPSB2aWV3LmdldFVpbnQxNihzaXplLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgIHNpemUgKz0gMjsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhlYWRlckJ5dGUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLm51bVZhbGlkUGl4ZWxzID0gdmlldy5nZXRVaW50MzIoc2l6ZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICBzaXplICs9IDQ7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIHRocm93ICJJbnZhbGlkIHZhbGlkIHBpeGVsIGNvdW50IHR5cGUiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZnAgKz0gc2l6ZTsKICAgICAgICAgICAgICAgIGlmIChibG9jay5lbmNvZGluZyA9PT0gMykgewogICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBhcnJheUJ1Ziwgc3RvcmU4OwogICAgICAgICAgICAgICAgaWYgKGJsb2NrLmVuY29kaW5nID09PSAwKSB7CiAgICAgICAgICAgICAgICAgIHZhciBudW1QaXhlbHMgPSAoZGF0YS5waXhlbHMubnVtQnl0ZXMgLSAxKSAvIDQ7CiAgICAgICAgICAgICAgICAgIGlmIChudW1QaXhlbHMgIT09IE1hdGguZmxvb3IobnVtUGl4ZWxzKSkgewogICAgICAgICAgICAgICAgICAgIHRocm93ICJ1bmNvbXByZXNzZWQgYmxvY2sgaGFzIGludmFsaWQgbGVuZ3RoIjsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBhcnJheUJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihudW1QaXhlbHMgKiA0KTsKICAgICAgICAgICAgICAgICAgc3RvcmU4ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgICAgICBzdG9yZTguc2V0KG5ldyBVaW50OEFycmF5KGlucHV0LCBmcCwgbnVtUGl4ZWxzICogNCkpOwogICAgICAgICAgICAgICAgICB2YXIgcmF3RGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgICAgICBibG9jay5yYXdEYXRhID0gcmF3RGF0YTsKICAgICAgICAgICAgICAgICAgZnAgKz0gbnVtUGl4ZWxzICogNDsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYmxvY2suZW5jb2RpbmcgPT09IDEpIHsKICAgICAgICAgICAgICAgICAgdmFyIGRhdGFCeXRlcyA9IE1hdGguY2VpbChibG9jay5udW1WYWxpZFBpeGVscyAqIGJsb2NrLmJpdHNQZXJQaXhlbCAvIDgpOwogICAgICAgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gTWF0aC5jZWlsKGRhdGFCeXRlcyAvIDQpOwogICAgICAgICAgICAgICAgICBhcnJheUJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihkYXRhV29yZHMgKiA0KTsKICAgICAgICAgICAgICAgICAgc3RvcmU4ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgICAgICBzdG9yZTguc2V0KG5ldyBVaW50OEFycmF5KGlucHV0LCBmcCwgZGF0YUJ5dGVzKSk7CiAgICAgICAgICAgICAgICAgIGJsb2NrLnN0dWZmZWREYXRhID0gbmV3IFVpbnQzMkFycmF5KGFycmF5QnVmKTsKICAgICAgICAgICAgICAgICAgZnAgKz0gZGF0YUJ5dGVzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBkYXRhLmVvZk9mZnNldCA9IGZwOwogICAgICAgICAgICByZXR1cm4gZGF0YTsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgdW5zdHVmZiA9IGZ1bmN0aW9uKHNyYywgYml0c1BlclBpeGVsLCBudW1QaXhlbHMsIG9mZnNldCwgc2NhbGUsIGRlc3QsIG1heFZhbHVlKSB7CiAgICAgICAgICAgIHZhciBiaXRNYXNrID0gKDEgPDwgYml0c1BlclBpeGVsKSAtIDE7CiAgICAgICAgICAgIHZhciBpID0gMCwgbzsKICAgICAgICAgICAgdmFyIGJpdHNMZWZ0ID0gMDsKICAgICAgICAgICAgdmFyIG4sIGJ1ZmZlcjsKICAgICAgICAgICAgdmFyIG5tYXggPSBNYXRoLmNlaWwoKG1heFZhbHVlIC0gb2Zmc2V0KSAvIHNjYWxlKTsKICAgICAgICAgICAgdmFyIG51bUludmFsaWRUYWlsQnl0ZXMgPSBzcmMubGVuZ3RoICogNCAtIE1hdGguY2VpbChiaXRzUGVyUGl4ZWwgKiBudW1QaXhlbHMgLyA4KTsKICAgICAgICAgICAgc3JjW3NyYy5sZW5ndGggLSAxXSA8PD0gOCAqIG51bUludmFsaWRUYWlsQnl0ZXM7CiAgICAgICAgICAgIGZvciAobyA9IDA7IG8gPCBudW1QaXhlbHM7IG8rKykgewogICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA9PT0gMCkgewogICAgICAgICAgICAgICAgYnVmZmVyID0gc3JjW2krK107CiAgICAgICAgICAgICAgICBiaXRzTGVmdCA9IDMyOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoYml0c0xlZnQgPj0gYml0c1BlclBpeGVsKSB7CiAgICAgICAgICAgICAgICBuID0gYnVmZmVyID4+PiBiaXRzTGVmdCAtIGJpdHNQZXJQaXhlbCAmIGJpdE1hc2s7CiAgICAgICAgICAgICAgICBiaXRzTGVmdCAtPSBiaXRzUGVyUGl4ZWw7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBtaXNzaW5nQml0cyA9IGJpdHNQZXJQaXhlbCAtIGJpdHNMZWZ0OwogICAgICAgICAgICAgICAgbiA9IChidWZmZXIgJiBiaXRNYXNrKSA8PCBtaXNzaW5nQml0cyAmIGJpdE1hc2s7CiAgICAgICAgICAgICAgICBidWZmZXIgPSBzcmNbaSsrXTsKICAgICAgICAgICAgICAgIGJpdHNMZWZ0ID0gMzIgLSBtaXNzaW5nQml0czsKICAgICAgICAgICAgICAgIG4gKz0gYnVmZmVyID4+PiBiaXRzTGVmdDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZGVzdFtvXSA9IG4gPCBubWF4ID8gb2Zmc2V0ICsgbiAqIHNjYWxlIDogbWF4VmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGRlc3Q7CiAgICAgICAgICB9OwogICAgICAgICAgcmV0dXJuIENudFpJbWFnZTsKICAgICAgICB9KCk7CiAgICAgICAgdmFyIExlcmMyRGVjb2RlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgICB2YXIgQml0U3R1ZmZlciA9IHsKICAgICAgICAgICAgLy9tZXRob2RzIGVuZGluZyB3aXRoIDIgYXJlIGZvciB0aGUgbmV3IGJ5dGUgb3JkZXIgdXNlZCBieSBMZXJjMi4zIGFuZCBhYm92ZS4KICAgICAgICAgICAgLy9vcmlnaW5hbFVuc3R1ZmYgaXMgdXNlZCB0byB1bnBhY2sgSHVmZm1hbiBjb2RlIHRhYmxlLiBjb2RlIGlzIGR1cGxpY2F0ZWQgdG8gdW5zdHVmZnggZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuCiAgICAgICAgICAgIHVuc3R1ZmY6IGZ1bmN0aW9uKHNyYywgZGVzdCwgYml0c1BlclBpeGVsLCBudW1QaXhlbHMsIGx1dEFyciwgb2Zmc2V0LCBzY2FsZSwgbWF4VmFsdWUpIHsKICAgICAgICAgICAgICB2YXIgYml0TWFzayA9ICgxIDw8IGJpdHNQZXJQaXhlbCkgLSAxOwogICAgICAgICAgICAgIHZhciBpID0gMCwgbzsKICAgICAgICAgICAgICB2YXIgYml0c0xlZnQgPSAwOwogICAgICAgICAgICAgIHZhciBuLCBidWZmZXIsIG1pc3NpbmdCaXRzLCBubWF4OwogICAgICAgICAgICAgIHZhciBudW1JbnZhbGlkVGFpbEJ5dGVzID0gc3JjLmxlbmd0aCAqIDQgLSBNYXRoLmNlaWwoYml0c1BlclBpeGVsICogbnVtUGl4ZWxzIC8gOCk7CiAgICAgICAgICAgICAgc3JjW3NyYy5sZW5ndGggLSAxXSA8PD0gOCAqIG51bUludmFsaWRUYWlsQnl0ZXM7CiAgICAgICAgICAgICAgaWYgKGx1dEFycikgewogICAgICAgICAgICAgICAgZm9yIChvID0gMDsgbyA8IG51bVBpeGVsczsgbysrKSB7CiAgICAgICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IHNyY1tpKytdOwogICAgICAgICAgICAgICAgICAgIGJpdHNMZWZ0ID0gMzI7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKGJpdHNMZWZ0ID49IGJpdHNQZXJQaXhlbCkgewogICAgICAgICAgICAgICAgICAgIG4gPSBidWZmZXIgPj4+IGJpdHNMZWZ0IC0gYml0c1BlclBpeGVsICYgYml0TWFzazsKICAgICAgICAgICAgICAgICAgICBiaXRzTGVmdCAtPSBiaXRzUGVyUGl4ZWw7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbWlzc2luZ0JpdHMgPSBiaXRzUGVyUGl4ZWwgLSBiaXRzTGVmdDsKICAgICAgICAgICAgICAgICAgICBuID0gKGJ1ZmZlciAmIGJpdE1hc2spIDw8IG1pc3NpbmdCaXRzICYgYml0TWFzazsKICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBzcmNbaSsrXTsKICAgICAgICAgICAgICAgICAgICBiaXRzTGVmdCA9IDMyIC0gbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgICAgICAgbiArPSBidWZmZXIgPj4+IGJpdHNMZWZ0OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGRlc3Rbb10gPSBsdXRBcnJbbl07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG5tYXggPSBNYXRoLmNlaWwoKG1heFZhbHVlIC0gb2Zmc2V0KSAvIHNjYWxlKTsKICAgICAgICAgICAgICAgIGZvciAobyA9IDA7IG8gPCBudW1QaXhlbHM7IG8rKykgewogICAgICAgICAgICAgICAgICBpZiAoYml0c0xlZnQgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBzcmNbaSsrXTsKICAgICAgICAgICAgICAgICAgICBiaXRzTGVmdCA9IDMyOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA+PSBiaXRzUGVyUGl4ZWwpIHsKICAgICAgICAgICAgICAgICAgICBuID0gYnVmZmVyID4+PiBiaXRzTGVmdCAtIGJpdHNQZXJQaXhlbCAmIGJpdE1hc2s7CiAgICAgICAgICAgICAgICAgICAgYml0c0xlZnQgLT0gYml0c1BlclBpeGVsOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIG1pc3NpbmdCaXRzID0gYml0c1BlclBpeGVsIC0gYml0c0xlZnQ7CiAgICAgICAgICAgICAgICAgICAgbiA9IChidWZmZXIgJiBiaXRNYXNrKSA8PCBtaXNzaW5nQml0cyAmIGJpdE1hc2s7CiAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gc3JjW2krK107CiAgICAgICAgICAgICAgICAgICAgYml0c0xlZnQgPSAzMiAtIG1pc3NpbmdCaXRzOwogICAgICAgICAgICAgICAgICAgIG4gKz0gYnVmZmVyID4+PiBiaXRzTGVmdDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBkZXN0W29dID0gbiA8IG5tYXggPyBvZmZzZXQgKyBuICogc2NhbGUgOiBtYXhWYWx1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHVuc3R1ZmZMVVQ6IGZ1bmN0aW9uKHNyYywgYml0c1BlclBpeGVsLCBudW1QaXhlbHMsIG9mZnNldCwgc2NhbGUsIG1heFZhbHVlKSB7CiAgICAgICAgICAgICAgdmFyIGJpdE1hc2sgPSAoMSA8PCBiaXRzUGVyUGl4ZWwpIC0gMTsKICAgICAgICAgICAgICB2YXIgaSA9IDAsIG8gPSAwLCBtaXNzaW5nQml0cyA9IDAsIGJpdHNMZWZ0ID0gMCwgbiA9IDA7CiAgICAgICAgICAgICAgdmFyIGJ1ZmZlcjsKICAgICAgICAgICAgICB2YXIgZGVzdCA9IFtdOwogICAgICAgICAgICAgIHZhciBudW1JbnZhbGlkVGFpbEJ5dGVzID0gc3JjLmxlbmd0aCAqIDQgLSBNYXRoLmNlaWwoYml0c1BlclBpeGVsICogbnVtUGl4ZWxzIC8gOCk7CiAgICAgICAgICAgICAgc3JjW3NyYy5sZW5ndGggLSAxXSA8PD0gOCAqIG51bUludmFsaWRUYWlsQnl0ZXM7CiAgICAgICAgICAgICAgdmFyIG5tYXggPSBNYXRoLmNlaWwoKG1heFZhbHVlIC0gb2Zmc2V0KSAvIHNjYWxlKTsKICAgICAgICAgICAgICBmb3IgKG8gPSAwOyBvIDwgbnVtUGl4ZWxzOyBvKyspIHsKICAgICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA9PT0gMCkgewogICAgICAgICAgICAgICAgICBidWZmZXIgPSBzcmNbaSsrXTsKICAgICAgICAgICAgICAgICAgYml0c0xlZnQgPSAzMjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA+PSBiaXRzUGVyUGl4ZWwpIHsKICAgICAgICAgICAgICAgICAgbiA9IGJ1ZmZlciA+Pj4gYml0c0xlZnQgLSBiaXRzUGVyUGl4ZWwgJiBiaXRNYXNrOwogICAgICAgICAgICAgICAgICBiaXRzTGVmdCAtPSBiaXRzUGVyUGl4ZWw7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBtaXNzaW5nQml0cyA9IGJpdHNQZXJQaXhlbCAtIGJpdHNMZWZ0OwogICAgICAgICAgICAgICAgICBuID0gKGJ1ZmZlciAmIGJpdE1hc2spIDw8IG1pc3NpbmdCaXRzICYgYml0TWFzazsKICAgICAgICAgICAgICAgICAgYnVmZmVyID0gc3JjW2krK107CiAgICAgICAgICAgICAgICAgIGJpdHNMZWZ0ID0gMzIgLSBtaXNzaW5nQml0czsKICAgICAgICAgICAgICAgICAgbiArPSBidWZmZXIgPj4+IGJpdHNMZWZ0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGVzdFtvXSA9IG4gPCBubWF4ID8gb2Zmc2V0ICsgbiAqIHNjYWxlIDogbWF4VmFsdWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGRlc3QudW5zaGlmdChvZmZzZXQpOwogICAgICAgICAgICAgIHJldHVybiBkZXN0OwogICAgICAgICAgICB9LAogICAgICAgICAgICB1bnN0dWZmMjogZnVuY3Rpb24oc3JjLCBkZXN0LCBiaXRzUGVyUGl4ZWwsIG51bVBpeGVscywgbHV0QXJyLCBvZmZzZXQsIHNjYWxlLCBtYXhWYWx1ZSkgewogICAgICAgICAgICAgIHZhciBiaXRNYXNrID0gKDEgPDwgYml0c1BlclBpeGVsKSAtIDE7CiAgICAgICAgICAgICAgdmFyIGkgPSAwLCBvOwogICAgICAgICAgICAgIHZhciBiaXRzTGVmdCA9IDAsIGJpdFBvcyA9IDA7CiAgICAgICAgICAgICAgdmFyIG4sIGJ1ZmZlciwgbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgaWYgKGx1dEFycikgewogICAgICAgICAgICAgICAgZm9yIChvID0gMDsgbyA8IG51bVBpeGVsczsgbysrKSB7CiAgICAgICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IHNyY1tpKytdOwogICAgICAgICAgICAgICAgICAgIGJpdHNMZWZ0ID0gMzI7CiAgICAgICAgICAgICAgICAgICAgYml0UG9zID0gMDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoYml0c0xlZnQgPj0gYml0c1BlclBpeGVsKSB7CiAgICAgICAgICAgICAgICAgICAgbiA9IGJ1ZmZlciA+Pj4gYml0UG9zICYgYml0TWFzazsKICAgICAgICAgICAgICAgICAgICBiaXRzTGVmdCAtPSBiaXRzUGVyUGl4ZWw7CiAgICAgICAgICAgICAgICAgICAgYml0UG9zICs9IGJpdHNQZXJQaXhlbDsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBtaXNzaW5nQml0cyA9IGJpdHNQZXJQaXhlbCAtIGJpdHNMZWZ0OwogICAgICAgICAgICAgICAgICAgIG4gPSBidWZmZXIgPj4+IGJpdFBvcyAmIGJpdE1hc2s7CiAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gc3JjW2krK107CiAgICAgICAgICAgICAgICAgICAgYml0c0xlZnQgPSAzMiAtIG1pc3NpbmdCaXRzOwogICAgICAgICAgICAgICAgICAgIG4gfD0gKGJ1ZmZlciAmICgxIDw8IG1pc3NpbmdCaXRzKSAtIDEpIDw8IGJpdHNQZXJQaXhlbCAtIG1pc3NpbmdCaXRzOwogICAgICAgICAgICAgICAgICAgIGJpdFBvcyA9IG1pc3NpbmdCaXRzOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGRlc3Rbb10gPSBsdXRBcnJbbl07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBubWF4ID0gTWF0aC5jZWlsKChtYXhWYWx1ZSAtIG9mZnNldCkgLyBzY2FsZSk7CiAgICAgICAgICAgICAgICBmb3IgKG8gPSAwOyBvIDwgbnVtUGl4ZWxzOyBvKyspIHsKICAgICAgICAgICAgICAgICAgaWYgKGJpdHNMZWZ0ID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gc3JjW2krK107CiAgICAgICAgICAgICAgICAgICAgYml0c0xlZnQgPSAzMjsKICAgICAgICAgICAgICAgICAgICBiaXRQb3MgPSAwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA+PSBiaXRzUGVyUGl4ZWwpIHsKICAgICAgICAgICAgICAgICAgICBuID0gYnVmZmVyID4+PiBiaXRQb3MgJiBiaXRNYXNrOwogICAgICAgICAgICAgICAgICAgIGJpdHNMZWZ0IC09IGJpdHNQZXJQaXhlbDsKICAgICAgICAgICAgICAgICAgICBiaXRQb3MgKz0gYml0c1BlclBpeGVsOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIG1pc3NpbmdCaXRzID0gYml0c1BlclBpeGVsIC0gYml0c0xlZnQ7CiAgICAgICAgICAgICAgICAgICAgbiA9IGJ1ZmZlciA+Pj4gYml0UG9zICYgYml0TWFzazsKICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBzcmNbaSsrXTsKICAgICAgICAgICAgICAgICAgICBiaXRzTGVmdCA9IDMyIC0gbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgICAgICAgbiB8PSAoYnVmZmVyICYgKDEgPDwgbWlzc2luZ0JpdHMpIC0gMSkgPDwgYml0c1BlclBpeGVsIC0gbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgICAgICAgYml0UG9zID0gbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZGVzdFtvXSA9IG4gPCBubWF4ID8gb2Zmc2V0ICsgbiAqIHNjYWxlIDogbWF4VmFsdWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBkZXN0OwogICAgICAgICAgICB9LAogICAgICAgICAgICB1bnN0dWZmTFVUMjogZnVuY3Rpb24oc3JjLCBiaXRzUGVyUGl4ZWwsIG51bVBpeGVscywgb2Zmc2V0LCBzY2FsZSwgbWF4VmFsdWUpIHsKICAgICAgICAgICAgICB2YXIgYml0TWFzayA9ICgxIDw8IGJpdHNQZXJQaXhlbCkgLSAxOwogICAgICAgICAgICAgIHZhciBpID0gMCwgbyA9IDAsIG1pc3NpbmdCaXRzID0gMCwgYml0c0xlZnQgPSAwLCBuID0gMCwgYml0UG9zID0gMDsKICAgICAgICAgICAgICB2YXIgYnVmZmVyOwogICAgICAgICAgICAgIHZhciBkZXN0ID0gW107CiAgICAgICAgICAgICAgdmFyIG5tYXggPSBNYXRoLmNlaWwoKG1heFZhbHVlIC0gb2Zmc2V0KSAvIHNjYWxlKTsKICAgICAgICAgICAgICBmb3IgKG8gPSAwOyBvIDwgbnVtUGl4ZWxzOyBvKyspIHsKICAgICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA9PT0gMCkgewogICAgICAgICAgICAgICAgICBidWZmZXIgPSBzcmNbaSsrXTsKICAgICAgICAgICAgICAgICAgYml0c0xlZnQgPSAzMjsKICAgICAgICAgICAgICAgICAgYml0UG9zID0gMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA+PSBiaXRzUGVyUGl4ZWwpIHsKICAgICAgICAgICAgICAgICAgbiA9IGJ1ZmZlciA+Pj4gYml0UG9zICYgYml0TWFzazsKICAgICAgICAgICAgICAgICAgYml0c0xlZnQgLT0gYml0c1BlclBpeGVsOwogICAgICAgICAgICAgICAgICBiaXRQb3MgKz0gYml0c1BlclBpeGVsOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgbWlzc2luZ0JpdHMgPSBiaXRzUGVyUGl4ZWwgLSBiaXRzTGVmdDsKICAgICAgICAgICAgICAgICAgbiA9IGJ1ZmZlciA+Pj4gYml0UG9zICYgYml0TWFzazsKICAgICAgICAgICAgICAgICAgYnVmZmVyID0gc3JjW2krK107CiAgICAgICAgICAgICAgICAgIGJpdHNMZWZ0ID0gMzIgLSBtaXNzaW5nQml0czsKICAgICAgICAgICAgICAgICAgbiB8PSAoYnVmZmVyICYgKDEgPDwgbWlzc2luZ0JpdHMpIC0gMSkgPDwgYml0c1BlclBpeGVsIC0gbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgICAgIGJpdFBvcyA9IG1pc3NpbmdCaXRzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGVzdFtvXSA9IG4gPCBubWF4ID8gb2Zmc2V0ICsgbiAqIHNjYWxlIDogbWF4VmFsdWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGRlc3QudW5zaGlmdChvZmZzZXQpOwogICAgICAgICAgICAgIHJldHVybiBkZXN0OwogICAgICAgICAgICB9LAogICAgICAgICAgICBvcmlnaW5hbFVuc3R1ZmY6IGZ1bmN0aW9uKHNyYywgZGVzdCwgYml0c1BlclBpeGVsLCBudW1QaXhlbHMpIHsKICAgICAgICAgICAgICB2YXIgYml0TWFzayA9ICgxIDw8IGJpdHNQZXJQaXhlbCkgLSAxOwogICAgICAgICAgICAgIHZhciBpID0gMCwgbzsKICAgICAgICAgICAgICB2YXIgYml0c0xlZnQgPSAwOwogICAgICAgICAgICAgIHZhciBuLCBidWZmZXIsIG1pc3NpbmdCaXRzOwogICAgICAgICAgICAgIHZhciBudW1JbnZhbGlkVGFpbEJ5dGVzID0gc3JjLmxlbmd0aCAqIDQgLSBNYXRoLmNlaWwoYml0c1BlclBpeGVsICogbnVtUGl4ZWxzIC8gOCk7CiAgICAgICAgICAgICAgc3JjW3NyYy5sZW5ndGggLSAxXSA8PD0gOCAqIG51bUludmFsaWRUYWlsQnl0ZXM7CiAgICAgICAgICAgICAgZm9yIChvID0gMDsgbyA8IG51bVBpeGVsczsgbysrKSB7CiAgICAgICAgICAgICAgICBpZiAoYml0c0xlZnQgPT09IDApIHsKICAgICAgICAgICAgICAgICAgYnVmZmVyID0gc3JjW2krK107CiAgICAgICAgICAgICAgICAgIGJpdHNMZWZ0ID0gMzI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoYml0c0xlZnQgPj0gYml0c1BlclBpeGVsKSB7CiAgICAgICAgICAgICAgICAgIG4gPSBidWZmZXIgPj4+IGJpdHNMZWZ0IC0gYml0c1BlclBpeGVsICYgYml0TWFzazsKICAgICAgICAgICAgICAgICAgYml0c0xlZnQgLT0gYml0c1BlclBpeGVsOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgbWlzc2luZ0JpdHMgPSBiaXRzUGVyUGl4ZWwgLSBiaXRzTGVmdDsKICAgICAgICAgICAgICAgICAgbiA9IChidWZmZXIgJiBiaXRNYXNrKSA8PCBtaXNzaW5nQml0cyAmIGJpdE1hc2s7CiAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IHNyY1tpKytdOwogICAgICAgICAgICAgICAgICBiaXRzTGVmdCA9IDMyIC0gbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgICAgIG4gKz0gYnVmZmVyID4+PiBiaXRzTGVmdDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGRlc3Rbb10gPSBuOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gZGVzdDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb3JpZ2luYWxVbnN0dWZmMjogZnVuY3Rpb24oc3JjLCBkZXN0LCBiaXRzUGVyUGl4ZWwsIG51bVBpeGVscykgewogICAgICAgICAgICAgIHZhciBiaXRNYXNrID0gKDEgPDwgYml0c1BlclBpeGVsKSAtIDE7CiAgICAgICAgICAgICAgdmFyIGkgPSAwLCBvOwogICAgICAgICAgICAgIHZhciBiaXRzTGVmdCA9IDAsIGJpdFBvcyA9IDA7CiAgICAgICAgICAgICAgdmFyIG4sIGJ1ZmZlciwgbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgZm9yIChvID0gMDsgbyA8IG51bVBpeGVsczsgbysrKSB7CiAgICAgICAgICAgICAgICBpZiAoYml0c0xlZnQgPT09IDApIHsKICAgICAgICAgICAgICAgICAgYnVmZmVyID0gc3JjW2krK107CiAgICAgICAgICAgICAgICAgIGJpdHNMZWZ0ID0gMzI7CiAgICAgICAgICAgICAgICAgIGJpdFBvcyA9IDA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoYml0c0xlZnQgPj0gYml0c1BlclBpeGVsKSB7CiAgICAgICAgICAgICAgICAgIG4gPSBidWZmZXIgPj4+IGJpdFBvcyAmIGJpdE1hc2s7CiAgICAgICAgICAgICAgICAgIGJpdHNMZWZ0IC09IGJpdHNQZXJQaXhlbDsKICAgICAgICAgICAgICAgICAgYml0UG9zICs9IGJpdHNQZXJQaXhlbDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIG1pc3NpbmdCaXRzID0gYml0c1BlclBpeGVsIC0gYml0c0xlZnQ7CiAgICAgICAgICAgICAgICAgIG4gPSBidWZmZXIgPj4+IGJpdFBvcyAmIGJpdE1hc2s7CiAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IHNyY1tpKytdOwogICAgICAgICAgICAgICAgICBiaXRzTGVmdCA9IDMyIC0gbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgICAgIG4gfD0gKGJ1ZmZlciAmICgxIDw8IG1pc3NpbmdCaXRzKSAtIDEpIDw8IGJpdHNQZXJQaXhlbCAtIG1pc3NpbmdCaXRzOwogICAgICAgICAgICAgICAgICBiaXRQb3MgPSBtaXNzaW5nQml0czsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGRlc3Rbb10gPSBuOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gZGVzdDsKICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICAgIHZhciBMZXJjMkhlbHBlcnMgPSB7CiAgICAgICAgICAgIEhVRkZNQU5fTFVUX0JJVFNfTUFYOiAxMiwKICAgICAgICAgICAgLy91c2UgMl4xMiBsdXQsIHRyZWF0IGl0IGxpa2UgY29uc3RhbnQKICAgICAgICAgICAgY29tcHV0ZUNoZWNrc3VtRmxldGNoZXIzMjogZnVuY3Rpb24oaW5wdXQpIHsKICAgICAgICAgICAgICB2YXIgc3VtMSA9IDY1NTM1LCBzdW0yID0gNjU1MzU7CiAgICAgICAgICAgICAgdmFyIGxlbiA9IGlucHV0Lmxlbmd0aDsKICAgICAgICAgICAgICB2YXIgd29yZHMgPSBNYXRoLmZsb29yKGxlbiAvIDIpOwogICAgICAgICAgICAgIHZhciBpID0gMDsKICAgICAgICAgICAgICB3aGlsZSAod29yZHMpIHsKICAgICAgICAgICAgICAgIHZhciB0bGVuID0gd29yZHMgPj0gMzU5ID8gMzU5IDogd29yZHM7CiAgICAgICAgICAgICAgICB3b3JkcyAtPSB0bGVuOwogICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICBzdW0xICs9IGlucHV0W2krK10gPDwgODsKICAgICAgICAgICAgICAgICAgc3VtMiArPSBzdW0xICs9IGlucHV0W2krK107CiAgICAgICAgICAgICAgICB9IHdoaWxlICgtLXRsZW4pOwogICAgICAgICAgICAgICAgc3VtMSA9IChzdW0xICYgNjU1MzUpICsgKHN1bTEgPj4+IDE2KTsKICAgICAgICAgICAgICAgIHN1bTIgPSAoc3VtMiAmIDY1NTM1KSArIChzdW0yID4+PiAxNik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChsZW4gJiAxKSB7CiAgICAgICAgICAgICAgICBzdW0yICs9IHN1bTEgKz0gaW5wdXRbaV0gPDwgODsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgc3VtMSA9IChzdW0xICYgNjU1MzUpICsgKHN1bTEgPj4+IDE2KTsKICAgICAgICAgICAgICBzdW0yID0gKHN1bTIgJiA2NTUzNSkgKyAoc3VtMiA+Pj4gMTYpOwogICAgICAgICAgICAgIHJldHVybiAoc3VtMiA8PCAxNiB8IHN1bTEpID4+PiAwOwogICAgICAgICAgICB9LAogICAgICAgICAgICByZWFkSGVhZGVySW5mbzogZnVuY3Rpb24oaW5wdXQsIGRhdGEpIHsKICAgICAgICAgICAgICB2YXIgcHRyID0gZGF0YS5wdHI7CiAgICAgICAgICAgICAgdmFyIGZpbGVJZFZpZXcgPSBuZXcgVWludDhBcnJheShpbnB1dCwgcHRyLCA2KTsKICAgICAgICAgICAgICB2YXIgaGVhZGVySW5mbyA9IHt9OwogICAgICAgICAgICAgIGhlYWRlckluZm8uZmlsZUlkZW50aWZpZXJTdHJpbmcgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGZpbGVJZFZpZXcpOwogICAgICAgICAgICAgIGlmIChoZWFkZXJJbmZvLmZpbGVJZGVudGlmaWVyU3RyaW5nLmxhc3RJbmRleE9mKCJMZXJjMiIsIDApICE9PSAwKSB7CiAgICAgICAgICAgICAgICB0aHJvdyAiVW5leHBlY3RlZCBmaWxlIGlkZW50aWZpZXIgc3RyaW5nIChleHBlY3QgTGVyYzIgKTogIiArIGhlYWRlckluZm8uZmlsZUlkZW50aWZpZXJTdHJpbmc7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHB0ciArPSA2OwogICAgICAgICAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGlucHV0LCBwdHIsIDgpOwogICAgICAgICAgICAgIHZhciBmaWxlVmVyc2lvbiA9IHZpZXcuZ2V0SW50MzIoMCwgdHJ1ZSk7CiAgICAgICAgICAgICAgaGVhZGVySW5mby5maWxlVmVyc2lvbiA9IGZpbGVWZXJzaW9uOwogICAgICAgICAgICAgIHB0ciArPSA0OwogICAgICAgICAgICAgIGlmIChmaWxlVmVyc2lvbiA+PSAzKSB7CiAgICAgICAgICAgICAgICBoZWFkZXJJbmZvLmNoZWNrc3VtID0gdmlldy5nZXRVaW50MzIoNCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBwdHIgKz0gNDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmlldyA9IG5ldyBEYXRhVmlldyhpbnB1dCwgcHRyLCAxMik7CiAgICAgICAgICAgICAgaGVhZGVySW5mby5oZWlnaHQgPSB2aWV3LmdldFVpbnQzMigwLCB0cnVlKTsKICAgICAgICAgICAgICBoZWFkZXJJbmZvLndpZHRoID0gdmlldy5nZXRVaW50MzIoNCwgdHJ1ZSk7CiAgICAgICAgICAgICAgcHRyICs9IDg7CiAgICAgICAgICAgICAgaWYgKGZpbGVWZXJzaW9uID49IDQpIHsKICAgICAgICAgICAgICAgIGhlYWRlckluZm8ubnVtRGltcyA9IHZpZXcuZ2V0VWludDMyKDgsIHRydWUpOwogICAgICAgICAgICAgICAgcHRyICs9IDQ7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGhlYWRlckluZm8ubnVtRGltcyA9IDE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZpZXcgPSBuZXcgRGF0YVZpZXcoaW5wdXQsIHB0ciwgNDApOwogICAgICAgICAgICAgIGhlYWRlckluZm8ubnVtVmFsaWRQaXhlbCA9IHZpZXcuZ2V0VWludDMyKDAsIHRydWUpOwogICAgICAgICAgICAgIGhlYWRlckluZm8ubWljcm9CbG9ja1NpemUgPSB2aWV3LmdldEludDMyKDQsIHRydWUpOwogICAgICAgICAgICAgIGhlYWRlckluZm8uYmxvYlNpemUgPSB2aWV3LmdldEludDMyKDgsIHRydWUpOwogICAgICAgICAgICAgIGhlYWRlckluZm8uaW1hZ2VUeXBlID0gdmlldy5nZXRJbnQzMigxMiwgdHJ1ZSk7CiAgICAgICAgICAgICAgaGVhZGVySW5mby5tYXhaRXJyb3IgPSB2aWV3LmdldEZsb2F0NjQoMTYsIHRydWUpOwogICAgICAgICAgICAgIGhlYWRlckluZm8uek1pbiA9IHZpZXcuZ2V0RmxvYXQ2NCgyNCwgdHJ1ZSk7CiAgICAgICAgICAgICAgaGVhZGVySW5mby56TWF4ID0gdmlldy5nZXRGbG9hdDY0KDMyLCB0cnVlKTsKICAgICAgICAgICAgICBwdHIgKz0gNDA7CiAgICAgICAgICAgICAgZGF0YS5oZWFkZXJJbmZvID0gaGVhZGVySW5mbzsKICAgICAgICAgICAgICBkYXRhLnB0ciA9IHB0cjsKICAgICAgICAgICAgICB2YXIgY2hlY2tzdW0sIGtleUxlbmd0aDsKICAgICAgICAgICAgICBpZiAoZmlsZVZlcnNpb24gPj0gMykgewogICAgICAgICAgICAgICAga2V5TGVuZ3RoID0gZmlsZVZlcnNpb24gPj0gNCA/IDUyIDogNDg7CiAgICAgICAgICAgICAgICBjaGVja3N1bSA9IHRoaXMuY29tcHV0ZUNoZWNrc3VtRmxldGNoZXIzMihuZXcgVWludDhBcnJheShpbnB1dCwgcHRyIC0ga2V5TGVuZ3RoLCBoZWFkZXJJbmZvLmJsb2JTaXplIC0gMTQpKTsKICAgICAgICAgICAgICAgIGlmIChjaGVja3N1bSAhPT0gaGVhZGVySW5mby5jaGVja3N1bSkgewogICAgICAgICAgICAgICAgICB0aHJvdyAiQ2hlY2tzdW0gZmFpbGVkLiI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBjaGVja01pbk1heFJhbmdlczogZnVuY3Rpb24oaW5wdXQsIGRhdGEpIHsKICAgICAgICAgICAgICB2YXIgaGVhZGVySW5mbyA9IGRhdGEuaGVhZGVySW5mbzsKICAgICAgICAgICAgICB2YXIgT3V0UGl4ZWxUeXBlQXJyYXkgPSB0aGlzLmdldERhdGFUeXBlQXJyYXkoaGVhZGVySW5mby5pbWFnZVR5cGUpOwogICAgICAgICAgICAgIHZhciByYW5nZUJ5dGVzID0gaGVhZGVySW5mby5udW1EaW1zICogdGhpcy5nZXREYXRhVHlwZVNpemUoaGVhZGVySW5mby5pbWFnZVR5cGUpOwogICAgICAgICAgICAgIHZhciBtaW5WYWx1ZXMgPSB0aGlzLnJlYWRTdWJBcnJheShpbnB1dCwgZGF0YS5wdHIsIE91dFBpeGVsVHlwZUFycmF5LCByYW5nZUJ5dGVzKTsKICAgICAgICAgICAgICB2YXIgbWF4VmFsdWVzID0gdGhpcy5yZWFkU3ViQXJyYXkoaW5wdXQsIGRhdGEucHRyICsgcmFuZ2VCeXRlcywgT3V0UGl4ZWxUeXBlQXJyYXksIHJhbmdlQnl0ZXMpOwogICAgICAgICAgICAgIGRhdGEucHRyICs9IDIgKiByYW5nZUJ5dGVzOwogICAgICAgICAgICAgIHZhciBpLCBlcXVhbCA9IHRydWU7CiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGhlYWRlckluZm8ubnVtRGltczsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAobWluVmFsdWVzW2ldICE9PSBtYXhWYWx1ZXNbaV0pIHsKICAgICAgICAgICAgICAgICAgZXF1YWwgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGhlYWRlckluZm8ubWluVmFsdWVzID0gbWluVmFsdWVzOwogICAgICAgICAgICAgIGhlYWRlckluZm8ubWF4VmFsdWVzID0gbWF4VmFsdWVzOwogICAgICAgICAgICAgIHJldHVybiBlcXVhbDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmVhZFN1YkFycmF5OiBmdW5jdGlvbihpbnB1dCwgcHRyLCBPdXRQaXhlbFR5cGVBcnJheSwgbnVtQnl0ZXMpIHsKICAgICAgICAgICAgICB2YXIgcmF3RGF0YTsKICAgICAgICAgICAgICBpZiAoT3V0UGl4ZWxUeXBlQXJyYXkgPT09IFVpbnQ4QXJyYXkpIHsKICAgICAgICAgICAgICAgIHJhd0RhdGEgPSBuZXcgVWludDhBcnJheShpbnB1dCwgcHRyLCBudW1CeXRlcyk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBhcnJheUJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihudW1CeXRlcyk7CiAgICAgICAgICAgICAgICB2YXIgc3RvcmU4ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgICAgc3RvcmU4LnNldChuZXcgVWludDhBcnJheShpbnB1dCwgcHRyLCBudW1CeXRlcykpOwogICAgICAgICAgICAgICAgcmF3RGF0YSA9IG5ldyBPdXRQaXhlbFR5cGVBcnJheShhcnJheUJ1Zik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiByYXdEYXRhOwogICAgICAgICAgICB9LAogICAgICAgICAgICByZWFkTWFzazogZnVuY3Rpb24oaW5wdXQsIGRhdGEpIHsKICAgICAgICAgICAgICB2YXIgcHRyID0gZGF0YS5wdHI7CiAgICAgICAgICAgICAgdmFyIGhlYWRlckluZm8gPSBkYXRhLmhlYWRlckluZm87CiAgICAgICAgICAgICAgdmFyIG51bVBpeGVscyA9IGhlYWRlckluZm8ud2lkdGggKiBoZWFkZXJJbmZvLmhlaWdodDsKICAgICAgICAgICAgICB2YXIgbnVtVmFsaWRQaXhlbCA9IGhlYWRlckluZm8ubnVtVmFsaWRQaXhlbDsKICAgICAgICAgICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhpbnB1dCwgcHRyLCA0KTsKICAgICAgICAgICAgICB2YXIgbWFzayA9IHt9OwogICAgICAgICAgICAgIG1hc2subnVtQnl0ZXMgPSB2aWV3LmdldFVpbnQzMigwLCB0cnVlKTsKICAgICAgICAgICAgICBwdHIgKz0gNDsKICAgICAgICAgICAgICBpZiAoKDAgPT09IG51bVZhbGlkUGl4ZWwgfHwgbnVtUGl4ZWxzID09PSBudW1WYWxpZFBpeGVsKSAmJiAwICE9PSBtYXNrLm51bUJ5dGVzKSB7CiAgICAgICAgICAgICAgICB0aHJvdyAiaW52YWxpZCBtYXNrIjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIGJpdHNldCwgcmVzdWx0TWFzazsKICAgICAgICAgICAgICBpZiAobnVtVmFsaWRQaXhlbCA9PT0gMCkgewogICAgICAgICAgICAgICAgYml0c2V0ID0gbmV3IFVpbnQ4QXJyYXkoTWF0aC5jZWlsKG51bVBpeGVscyAvIDgpKTsKICAgICAgICAgICAgICAgIG1hc2suYml0c2V0ID0gYml0c2V0OwogICAgICAgICAgICAgICAgcmVzdWx0TWFzayA9IG5ldyBVaW50OEFycmF5KG51bVBpeGVscyk7CiAgICAgICAgICAgICAgICBkYXRhLnBpeGVscy5yZXN1bHRNYXNrID0gcmVzdWx0TWFzazsKICAgICAgICAgICAgICAgIHB0ciArPSBtYXNrLm51bUJ5dGVzOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAobWFzay5udW1CeXRlcyA+IDApIHsKICAgICAgICAgICAgICAgIGJpdHNldCA9IG5ldyBVaW50OEFycmF5KE1hdGguY2VpbChudW1QaXhlbHMgLyA4KSk7CiAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IERhdGFWaWV3KGlucHV0LCBwdHIsIG1hc2subnVtQnl0ZXMpOwogICAgICAgICAgICAgICAgdmFyIGNudCA9IHZpZXcuZ2V0SW50MTYoMCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB2YXIgaXAgPSAyLCBvcCA9IDAsIHZhbCA9IDA7CiAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgIGlmIChjbnQgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNudC0tKSB7CiAgICAgICAgICAgICAgICAgICAgICBiaXRzZXRbb3ArK10gPSB2aWV3LmdldFVpbnQ4KGlwKyspOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB2YWwgPSB2aWV3LmdldFVpbnQ4KGlwKyspOwogICAgICAgICAgICAgICAgICAgIGNudCA9IC1jbnQ7CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNudC0tKSB7CiAgICAgICAgICAgICAgICAgICAgICBiaXRzZXRbb3ArK10gPSB2YWw7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGNudCA9IHZpZXcuZ2V0SW50MTYoaXAsIHRydWUpOwogICAgICAgICAgICAgICAgICBpcCArPSAyOwogICAgICAgICAgICAgICAgfSB3aGlsZSAoaXAgPCBtYXNrLm51bUJ5dGVzKTsKICAgICAgICAgICAgICAgIGlmIChjbnQgIT09IC0zMjc2OCB8fCBvcCA8IGJpdHNldC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgdGhyb3cgIlVuZXhwZWN0ZWQgZW5kIG9mIG1hc2sgUkxFIGVuY29kaW5nIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJlc3VsdE1hc2sgPSBuZXcgVWludDhBcnJheShudW1QaXhlbHMpOwogICAgICAgICAgICAgICAgdmFyIG1iID0gMCwgayA9IDA7CiAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbnVtUGl4ZWxzOyBrKyspIHsKICAgICAgICAgICAgICAgICAgaWYgKGsgJiA3KSB7CiAgICAgICAgICAgICAgICAgICAgbWIgPSBiaXRzZXRbayA+PiAzXTsKICAgICAgICAgICAgICAgICAgICBtYiA8PD0gayAmIDc7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbWIgPSBiaXRzZXRbayA+PiAzXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAobWIgJiAxMjgpIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHRNYXNrW2tdID0gMTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGF0YS5waXhlbHMucmVzdWx0TWFzayA9IHJlc3VsdE1hc2s7CiAgICAgICAgICAgICAgICBtYXNrLmJpdHNldCA9IGJpdHNldDsKICAgICAgICAgICAgICAgIHB0ciArPSBtYXNrLm51bUJ5dGVzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBkYXRhLnB0ciA9IHB0cjsKICAgICAgICAgICAgICBkYXRhLm1hc2sgPSBtYXNrOwogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9LAogICAgICAgICAgICByZWFkRGF0YU9uZVN3ZWVwOiBmdW5jdGlvbihpbnB1dCwgZGF0YSwgT3V0UGl4ZWxUeXBlQXJyYXkpIHsKICAgICAgICAgICAgICB2YXIgcHRyID0gZGF0YS5wdHI7CiAgICAgICAgICAgICAgdmFyIGhlYWRlckluZm8gPSBkYXRhLmhlYWRlckluZm87CiAgICAgICAgICAgICAgdmFyIG51bURpbXMgPSBoZWFkZXJJbmZvLm51bURpbXM7CiAgICAgICAgICAgICAgdmFyIG51bVBpeGVscyA9IGhlYWRlckluZm8ud2lkdGggKiBoZWFkZXJJbmZvLmhlaWdodDsKICAgICAgICAgICAgICB2YXIgaW1hZ2VUeXBlID0gaGVhZGVySW5mby5pbWFnZVR5cGU7CiAgICAgICAgICAgICAgdmFyIG51bUJ5dGVzID0gaGVhZGVySW5mby5udW1WYWxpZFBpeGVsICogTGVyYzJIZWxwZXJzLmdldERhdGFUeXBlU2l6ZShpbWFnZVR5cGUpICogbnVtRGltczsKICAgICAgICAgICAgICB2YXIgcmF3RGF0YTsKICAgICAgICAgICAgICB2YXIgbWFzayA9IGRhdGEucGl4ZWxzLnJlc3VsdE1hc2s7CiAgICAgICAgICAgICAgaWYgKE91dFBpeGVsVHlwZUFycmF5ID09PSBVaW50OEFycmF5KSB7CiAgICAgICAgICAgICAgICByYXdEYXRhID0gbmV3IFVpbnQ4QXJyYXkoaW5wdXQsIHB0ciwgbnVtQnl0ZXMpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgYXJyYXlCdWYgPSBuZXcgQXJyYXlCdWZmZXIobnVtQnl0ZXMpOwogICAgICAgICAgICAgICAgdmFyIHN0b3JlOCA9IG5ldyBVaW50OEFycmF5KGFycmF5QnVmKTsKICAgICAgICAgICAgICAgIHN0b3JlOC5zZXQobmV3IFVpbnQ4QXJyYXkoaW5wdXQsIHB0ciwgbnVtQnl0ZXMpKTsKICAgICAgICAgICAgICAgIHJhd0RhdGEgPSBuZXcgT3V0UGl4ZWxUeXBlQXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAocmF3RGF0YS5sZW5ndGggPT09IG51bVBpeGVscyAqIG51bURpbXMpIHsKICAgICAgICAgICAgICAgIGRhdGEucGl4ZWxzLnJlc3VsdFBpeGVscyA9IHJhd0RhdGE7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGRhdGEucGl4ZWxzLnJlc3VsdFBpeGVscyA9IG5ldyBPdXRQaXhlbFR5cGVBcnJheShudW1QaXhlbHMgKiBudW1EaW1zKTsKICAgICAgICAgICAgICAgIHZhciB6ID0gMCwgayA9IDAsIGkgPSAwLCBuU3RhcnQgPSAwOwogICAgICAgICAgICAgICAgaWYgKG51bURpbXMgPiAxKSB7CiAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1EaW1zOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBuU3RhcnQgPSBpICogbnVtUGl4ZWxzOwogICAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBudW1QaXhlbHM7IGsrKykgewogICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tba10pIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5waXhlbHMucmVzdWx0UGl4ZWxzW25TdGFydCArIGtdID0gcmF3RGF0YVt6KytdOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IG51bVBpeGVsczsgaysrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tba10pIHsKICAgICAgICAgICAgICAgICAgICAgIGRhdGEucGl4ZWxzLnJlc3VsdFBpeGVsc1trXSA9IHJhd0RhdGFbeisrXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcHRyICs9IG51bUJ5dGVzOwogICAgICAgICAgICAgIGRhdGEucHRyID0gcHRyOwogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9LAogICAgICAgICAgICByZWFkSHVmZm1hblRyZWU6IGZ1bmN0aW9uKGlucHV0LCBkYXRhKSB7CiAgICAgICAgICAgICAgdmFyIEJJVFNfTUFYID0gdGhpcy5IVUZGTUFOX0xVVF9CSVRTX01BWDsKICAgICAgICAgICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhpbnB1dCwgZGF0YS5wdHIsIDE2KTsKICAgICAgICAgICAgICBkYXRhLnB0ciArPSAxNjsKICAgICAgICAgICAgICB2YXIgdmVyc2lvbiA9IHZpZXcuZ2V0SW50MzIoMCwgdHJ1ZSk7CiAgICAgICAgICAgICAgaWYgKHZlcnNpb24gPCAyKSB7CiAgICAgICAgICAgICAgICB0aHJvdyAidW5zdXBwb3J0ZWQgSHVmZm1hbiB2ZXJzaW9uIjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIHNpemUgPSB2aWV3LmdldEludDMyKDQsIHRydWUpOwogICAgICAgICAgICAgIHZhciBpMCA9IHZpZXcuZ2V0SW50MzIoOCwgdHJ1ZSk7CiAgICAgICAgICAgICAgdmFyIGkxID0gdmlldy5nZXRJbnQzMigxMiwgdHJ1ZSk7CiAgICAgICAgICAgICAgaWYgKGkwID49IGkxKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhciBibG9ja0RhdGFCdWZmZXIgPSBuZXcgVWludDMyQXJyYXkoaTEgLSBpMCk7CiAgICAgICAgICAgICAgTGVyYzJIZWxwZXJzLmRlY29kZUJpdHMoaW5wdXQsIGRhdGEsIGJsb2NrRGF0YUJ1ZmZlcik7CiAgICAgICAgICAgICAgdmFyIGNvZGVUYWJsZSA9IFtdOwogICAgICAgICAgICAgIHZhciBpLCBqLCBrLCBsZW47CiAgICAgICAgICAgICAgZm9yIChpID0gaTA7IGkgPCBpMTsgaSsrKSB7CiAgICAgICAgICAgICAgICBqID0gaSAtIChpIDwgc2l6ZSA/IDAgOiBzaXplKTsKICAgICAgICAgICAgICAgIGNvZGVUYWJsZVtqXSA9IHsgZmlyc3Q6IGJsb2NrRGF0YUJ1ZmZlcltpIC0gaTBdLCBzZWNvbmQ6IG51bGwgfTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIGRhdGFCeXRlcyA9IGlucHV0LmJ5dGVMZW5ndGggLSBkYXRhLnB0cjsKICAgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gTWF0aC5jZWlsKGRhdGFCeXRlcyAvIDQpOwogICAgICAgICAgICAgIHZhciBhcnJheUJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihkYXRhV29yZHMgKiA0KTsKICAgICAgICAgICAgICB2YXIgc3RvcmU4ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgIHN0b3JlOC5zZXQobmV3IFVpbnQ4QXJyYXkoaW5wdXQsIGRhdGEucHRyLCBkYXRhQnl0ZXMpKTsKICAgICAgICAgICAgICB2YXIgc3R1ZmZlZERhdGEgPSBuZXcgVWludDMyQXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgIHZhciBiaXRQb3MgPSAwLCB3b3JkLCBzcmNQdHIgPSAwOwogICAgICAgICAgICAgIHdvcmQgPSBzdHVmZmVkRGF0YVswXTsKICAgICAgICAgICAgICBmb3IgKGkgPSBpMDsgaSA8IGkxOyBpKyspIHsKICAgICAgICAgICAgICAgIGogPSBpIC0gKGkgPCBzaXplID8gMCA6IHNpemUpOwogICAgICAgICAgICAgICAgbGVuID0gY29kZVRhYmxlW2pdLmZpcnN0OwogICAgICAgICAgICAgICAgaWYgKGxlbiA+IDApIHsKICAgICAgICAgICAgICAgICAgY29kZVRhYmxlW2pdLnNlY29uZCA9IHdvcmQgPDwgYml0UG9zID4+PiAzMiAtIGxlbjsKICAgICAgICAgICAgICAgICAgaWYgKDMyIC0gYml0UG9zID49IGxlbikgewogICAgICAgICAgICAgICAgICAgIGJpdFBvcyArPSBsZW47CiAgICAgICAgICAgICAgICAgICAgaWYgKGJpdFBvcyA9PT0gMzIpIHsKICAgICAgICAgICAgICAgICAgICAgIGJpdFBvcyA9IDA7CiAgICAgICAgICAgICAgICAgICAgICBzcmNQdHIrKzsKICAgICAgICAgICAgICAgICAgICAgIHdvcmQgPSBzdHVmZmVkRGF0YVtzcmNQdHJdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBiaXRQb3MgKz0gbGVuIC0gMzI7CiAgICAgICAgICAgICAgICAgICAgc3JjUHRyKys7CiAgICAgICAgICAgICAgICAgICAgd29yZCA9IHN0dWZmZWREYXRhW3NyY1B0cl07CiAgICAgICAgICAgICAgICAgICAgY29kZVRhYmxlW2pdLnNlY29uZCB8PSB3b3JkID4+PiAzMiAtIGJpdFBvczsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgbnVtQml0c0xVVCA9IDAsIG51bUJpdHNMVVRRaWNrID0gMDsKICAgICAgICAgICAgICB2YXIgdHJlZSA9IG5ldyBUcmVlTm9kZSgpOwogICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb2RlVGFibGUubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmIChjb2RlVGFibGVbaV0gIT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgICBudW1CaXRzTFVUID0gTWF0aC5tYXgobnVtQml0c0xVVCwgY29kZVRhYmxlW2ldLmZpcnN0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKG51bUJpdHNMVVQgPj0gQklUU19NQVgpIHsKICAgICAgICAgICAgICAgIG51bUJpdHNMVVRRaWNrID0gQklUU19NQVg7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG51bUJpdHNMVVRRaWNrID0gbnVtQml0c0xVVDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKG51bUJpdHNMVVQgPj0gMzApIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJXQVJuaW5nLCBsYXJnZSBOVU0gTFVUIEJJVFMgSVMgIiArIG51bUJpdHNMVVQpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgZGVjb2RlTHV0ID0gW10sIGVudHJ5LCBjb2RlLCBudW1FbnRyaWVzLCBqaiwgY3VycmVudEJpdCwgbm9kZTsKICAgICAgICAgICAgICBmb3IgKGkgPSBpMDsgaSA8IGkxOyBpKyspIHsKICAgICAgICAgICAgICAgIGogPSBpIC0gKGkgPCBzaXplID8gMCA6IHNpemUpOwogICAgICAgICAgICAgICAgbGVuID0gY29kZVRhYmxlW2pdLmZpcnN0OwogICAgICAgICAgICAgICAgaWYgKGxlbiA+IDApIHsKICAgICAgICAgICAgICAgICAgZW50cnkgPSBbbGVuLCBqXTsKICAgICAgICAgICAgICAgICAgaWYgKGxlbiA8PSBudW1CaXRzTFVUUWljaykgewogICAgICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlVGFibGVbal0uc2Vjb25kIDw8IG51bUJpdHNMVVRRaWNrIC0gbGVuOwogICAgICAgICAgICAgICAgICAgIG51bUVudHJpZXMgPSAxIDw8IG51bUJpdHNMVVRRaWNrIC0gbGVuOwogICAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBudW1FbnRyaWVzOyBrKyspIHsKICAgICAgICAgICAgICAgICAgICAgIGRlY29kZUx1dFtjb2RlIHwga10gPSBlbnRyeTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY29kZSA9IGNvZGVUYWJsZVtqXS5zZWNvbmQ7CiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHRyZWU7CiAgICAgICAgICAgICAgICAgICAgZm9yIChqaiA9IGxlbiAtIDE7IGpqID49IDA7IGpqLS0pIHsKICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCaXQgPSBjb2RlID4+PiBqaiAmIDE7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudEJpdCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5vZGUucmlnaHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJpZ2h0ID0gbmV3IFRyZWVOb2RlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucmlnaHQ7CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5vZGUubGVmdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUubGVmdCA9IG5ldyBUcmVlTm9kZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmxlZnQ7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBpZiAoamogPT09IDAgJiYgIW5vZGUudmFsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUudmFsID0gZW50cnlbMV07CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBkZWNvZGVMdXQsCiAgICAgICAgICAgICAgICBudW1CaXRzTFVUUWljaywKICAgICAgICAgICAgICAgIG51bUJpdHNMVVQsCiAgICAgICAgICAgICAgICB0cmVlLAogICAgICAgICAgICAgICAgc3R1ZmZlZERhdGEsCiAgICAgICAgICAgICAgICBzcmNQdHIsCiAgICAgICAgICAgICAgICBiaXRQb3MKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9LAogICAgICAgICAgICByZWFkSHVmZm1hbjogZnVuY3Rpb24oaW5wdXQsIGRhdGEsIE91dFBpeGVsVHlwZUFycmF5KSB7CiAgICAgICAgICAgICAgdmFyIGhlYWRlckluZm8gPSBkYXRhLmhlYWRlckluZm87CiAgICAgICAgICAgICAgdmFyIG51bURpbXMgPSBoZWFkZXJJbmZvLm51bURpbXM7CiAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IGRhdGEuaGVhZGVySW5mby5oZWlnaHQ7CiAgICAgICAgICAgICAgdmFyIHdpZHRoID0gZGF0YS5oZWFkZXJJbmZvLndpZHRoOwogICAgICAgICAgICAgIHZhciBudW1QaXhlbHMgPSB3aWR0aCAqIGhlaWdodDsKICAgICAgICAgICAgICB2YXIgaHVmZm1hbkluZm8gPSB0aGlzLnJlYWRIdWZmbWFuVHJlZShpbnB1dCwgZGF0YSk7CiAgICAgICAgICAgICAgdmFyIGRlY29kZUx1dCA9IGh1ZmZtYW5JbmZvLmRlY29kZUx1dDsKICAgICAgICAgICAgICB2YXIgdHJlZSA9IGh1ZmZtYW5JbmZvLnRyZWU7CiAgICAgICAgICAgICAgdmFyIHN0dWZmZWREYXRhID0gaHVmZm1hbkluZm8uc3R1ZmZlZERhdGE7CiAgICAgICAgICAgICAgdmFyIHNyY1B0ciA9IGh1ZmZtYW5JbmZvLnNyY1B0cjsKICAgICAgICAgICAgICB2YXIgYml0UG9zID0gaHVmZm1hbkluZm8uYml0UG9zOwogICAgICAgICAgICAgIHZhciBudW1CaXRzTFVUUWljayA9IGh1ZmZtYW5JbmZvLm51bUJpdHNMVVRRaWNrOwogICAgICAgICAgICAgIHZhciBudW1CaXRzTFVUID0gaHVmZm1hbkluZm8ubnVtQml0c0xVVDsKICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gZGF0YS5oZWFkZXJJbmZvLmltYWdlVHlwZSA9PT0gMCA/IDEyOCA6IDA7CiAgICAgICAgICAgICAgdmFyIG5vZGUsIHZhbCwgZGVsdGEsIG1hc2sgPSBkYXRhLnBpeGVscy5yZXN1bHRNYXNrLCB2YWxUbXAsIHZhbFRtcFF1aWNrLCBjdXJyZW50Qml0OwogICAgICAgICAgICAgIHZhciBpLCBqLCBrLCBpaTsKICAgICAgICAgICAgICB2YXIgcHJldlZhbCA9IDA7CiAgICAgICAgICAgICAgaWYgKGJpdFBvcyA+IDApIHsKICAgICAgICAgICAgICAgIHNyY1B0cisrOwogICAgICAgICAgICAgICAgYml0UG9zID0gMDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIHdvcmQgPSBzdHVmZmVkRGF0YVtzcmNQdHJdOwogICAgICAgICAgICAgIHZhciBkZWx0YUVuY29kZSA9IGRhdGEuZW5jb2RlTW9kZSA9PT0gMTsKICAgICAgICAgICAgICB2YXIgcmVzdWx0UGl4ZWxzQWxsRGltID0gbmV3IE91dFBpeGVsVHlwZUFycmF5KG51bVBpeGVscyAqIG51bURpbXMpOwogICAgICAgICAgICAgIHZhciByZXN1bHRQaXhlbHMgPSByZXN1bHRQaXhlbHNBbGxEaW07CiAgICAgICAgICAgICAgdmFyIGlEaW07CiAgICAgICAgICAgICAgZm9yIChpRGltID0gMDsgaURpbSA8IGhlYWRlckluZm8ubnVtRGltczsgaURpbSsrKSB7CiAgICAgICAgICAgICAgICBpZiAobnVtRGltcyA+IDEpIHsKICAgICAgICAgICAgICAgICAgcmVzdWx0UGl4ZWxzID0gbmV3IE91dFBpeGVsVHlwZUFycmF5KHJlc3VsdFBpeGVsc0FsbERpbS5idWZmZXIsIG51bVBpeGVscyAqIGlEaW0sIG51bVBpeGVscyk7CiAgICAgICAgICAgICAgICAgIHByZXZWYWwgPSAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGRhdGEuaGVhZGVySW5mby5udW1WYWxpZFBpeGVsID09PSB3aWR0aCAqIGhlaWdodCkgewogICAgICAgICAgICAgICAgICBmb3IgKGsgPSAwLCBpID0gMDsgaSA8IGhlaWdodDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHdpZHRoOyBqKyssIGsrKykgewogICAgICAgICAgICAgICAgICAgICAgdmFsID0gMDsKICAgICAgICAgICAgICAgICAgICAgIHZhbFRtcCA9IHdvcmQgPDwgYml0UG9zID4+PiAzMiAtIG51bUJpdHNMVVRRaWNrOwogICAgICAgICAgICAgICAgICAgICAgdmFsVG1wUXVpY2sgPSB2YWxUbXA7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoMzIgLSBiaXRQb3MgPCBudW1CaXRzTFVUUWljaykgewogICAgICAgICAgICAgICAgICAgICAgICB2YWxUbXAgfD0gc3R1ZmZlZERhdGFbc3JjUHRyICsgMV0gPj4+IDY0IC0gYml0UG9zIC0gbnVtQml0c0xVVFFpY2s7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbFRtcFF1aWNrID0gdmFsVG1wOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgaWYgKGRlY29kZUx1dFt2YWxUbXBRdWlja10pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gZGVjb2RlTHV0W3ZhbFRtcFF1aWNrXVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgYml0UG9zICs9IGRlY29kZUx1dFt2YWxUbXBRdWlja11bMF07CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB2YWxUbXAgPSB3b3JkIDw8IGJpdFBvcyA+Pj4gMzIgLSBudW1CaXRzTFVUOwogICAgICAgICAgICAgICAgICAgICAgICB2YWxUbXBRdWljayA9IHZhbFRtcDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDMyIC0gYml0UG9zIDwgbnVtQml0c0xVVCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbFRtcCB8PSBzdHVmZmVkRGF0YVtzcmNQdHIgKyAxXSA+Pj4gNjQgLSBiaXRQb3MgLSBudW1CaXRzTFVUOwogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbFRtcFF1aWNrID0gdmFsVG1wOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSB0cmVlOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGlpID0gMDsgaWkgPCBudW1CaXRzTFVUOyBpaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEJpdCA9IHZhbFRtcCA+Pj4gbnVtQml0c0xVVCAtIGlpIC0gMSAmIDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGN1cnJlbnRCaXQgPyBub2RlLnJpZ2h0IDogbm9kZS5sZWZ0OwogICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG5vZGUubGVmdCB8fCBub2RlLnJpZ2h0KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gbm9kZS52YWw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaXRQb3MgPSBiaXRQb3MgKyBpaSArIDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGlmIChiaXRQb3MgPj0gMzIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYml0UG9zIC09IDMyOwogICAgICAgICAgICAgICAgICAgICAgICBzcmNQdHIrKzsKICAgICAgICAgICAgICAgICAgICAgICAgd29yZCA9IHN0dWZmZWREYXRhW3NyY1B0cl07CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBkZWx0YSA9IHZhbCAtIG9mZnNldDsKICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWx0YUVuY29kZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBkZWx0YSArPSBwcmV2VmFsOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGEgKz0gcmVzdWx0UGl4ZWxzW2sgLSB3aWR0aF07CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGEgKz0gcHJldlZhbDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBkZWx0YSAmPSAyNTU7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFBpeGVsc1trXSA9IGRlbHRhOwogICAgICAgICAgICAgICAgICAgICAgICBwcmV2VmFsID0gZGVsdGE7CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRQaXhlbHNba10gPSBkZWx0YTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGZvciAoayA9IDAsIGkgPSAwOyBpIDwgaGVpZ2h0OyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgd2lkdGg7IGorKywgaysrKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1trXSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICB2YWxUbXAgPSB3b3JkIDw8IGJpdFBvcyA+Pj4gMzIgLSBudW1CaXRzTFVUUWljazsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsVG1wUXVpY2sgPSB2YWxUbXA7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgzMiAtIGJpdFBvcyA8IG51bUJpdHNMVVRRaWNrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsVG1wIHw9IHN0dWZmZWREYXRhW3NyY1B0ciArIDFdID4+PiA2NCAtIGJpdFBvcyAtIG51bUJpdHNMVVRRaWNrOwogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbFRtcFF1aWNrID0gdmFsVG1wOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWNvZGVMdXRbdmFsVG1wUXVpY2tdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gZGVjb2RlTHV0W3ZhbFRtcFF1aWNrXVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgICBiaXRQb3MgKz0gZGVjb2RlTHV0W3ZhbFRtcFF1aWNrXVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxUbXAgPSB3b3JkIDw8IGJpdFBvcyA+Pj4gMzIgLSBudW1CaXRzTFVUOwogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbFRtcFF1aWNrID0gdmFsVG1wOwogICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgzMiAtIGJpdFBvcyA8IG51bUJpdHNMVVQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbFRtcCB8PSBzdHVmZmVkRGF0YVtzcmNQdHIgKyAxXSA+Pj4gNjQgLSBiaXRQb3MgLSBudW1CaXRzTFVUOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsVG1wUXVpY2sgPSB2YWxUbXA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSB0cmVlOwogICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaWkgPSAwOyBpaSA8IG51bUJpdHNMVVQ7IGlpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCaXQgPSB2YWxUbXAgPj4+IG51bUJpdHNMVVQgLSBpaSAtIDEgJiAxOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGN1cnJlbnRCaXQgPyBub2RlLnJpZ2h0IDogbm9kZS5sZWZ0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobm9kZS5sZWZ0IHx8IG5vZGUucmlnaHQpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IG5vZGUudmFsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaXRQb3MgPSBiaXRQb3MgKyBpaSArIDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYml0UG9zID49IDMyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYml0UG9zIC09IDMyOwogICAgICAgICAgICAgICAgICAgICAgICAgIHNyY1B0cisrOwogICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmQgPSBzdHVmZmVkRGF0YVtzcmNQdHJdOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhID0gdmFsIC0gb2Zmc2V0OwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsdGFFbmNvZGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiA+IDAgJiYgbWFza1trIC0gMV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhICs9IHByZXZWYWw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID4gMCAmJiBtYXNrW2sgLSB3aWR0aF0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhICs9IHJlc3VsdFBpeGVsc1trIC0gd2lkdGhdOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWx0YSArPSBwcmV2VmFsOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBkZWx0YSAmPSAyNTU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0UGl4ZWxzW2tdID0gZGVsdGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldlZhbCA9IGRlbHRhOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFBpeGVsc1trXSA9IGRlbHRhOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBkYXRhLnB0ciA9IGRhdGEucHRyICsgKHNyY1B0ciArIDEpICogNCArIChiaXRQb3MgPiAwID8gNCA6IDApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBkYXRhLnBpeGVscy5yZXN1bHRQaXhlbHMgPSByZXN1bHRQaXhlbHNBbGxEaW07CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlY29kZUJpdHM6IGZ1bmN0aW9uKGlucHV0LCBkYXRhLCBibG9ja0RhdGFCdWZmZXIsIG9mZnNldCwgaURpbSkgewogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciBoZWFkZXJJbmZvID0gZGF0YS5oZWFkZXJJbmZvOwogICAgICAgICAgICAgICAgdmFyIGZpbGVWZXJzaW9uID0gaGVhZGVySW5mby5maWxlVmVyc2lvbjsKICAgICAgICAgICAgICAgIHZhciBibG9ja1B0ciA9IDA7CiAgICAgICAgICAgICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhpbnB1dCwgZGF0YS5wdHIsIDUpOwogICAgICAgICAgICAgICAgdmFyIGhlYWRlckJ5dGUgPSB2aWV3LmdldFVpbnQ4KDApOwogICAgICAgICAgICAgICAgYmxvY2tQdHIrKzsKICAgICAgICAgICAgICAgIHZhciBiaXRzNjcgPSBoZWFkZXJCeXRlID4+IDY7CiAgICAgICAgICAgICAgICB2YXIgbiA9IGJpdHM2NyA9PT0gMCA/IDQgOiAzIC0gYml0czY3OwogICAgICAgICAgICAgICAgdmFyIGRvTHV0ID0gKGhlYWRlckJ5dGUgJiAzMikgPiAwID8gdHJ1ZSA6IGZhbHNlOwogICAgICAgICAgICAgICAgdmFyIG51bUJpdHMgPSBoZWFkZXJCeXRlICYgMzE7CiAgICAgICAgICAgICAgICB2YXIgbnVtRWxlbWVudHMgPSAwOwogICAgICAgICAgICAgICAgaWYgKG4gPT09IDEpIHsKICAgICAgICAgICAgICAgICAgbnVtRWxlbWVudHMgPSB2aWV3LmdldFVpbnQ4KGJsb2NrUHRyKTsKICAgICAgICAgICAgICAgICAgYmxvY2tQdHIrKzsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobiA9PT0gMikgewogICAgICAgICAgICAgICAgICBudW1FbGVtZW50cyA9IHZpZXcuZ2V0VWludDE2KGJsb2NrUHRyLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgYmxvY2tQdHIgKz0gMjsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobiA9PT0gNCkgewogICAgICAgICAgICAgICAgICBudW1FbGVtZW50cyA9IHZpZXcuZ2V0VWludDMyKGJsb2NrUHRyLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgYmxvY2tQdHIgKz0gNDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHRocm93ICJJbnZhbGlkIHZhbGlkIHBpeGVsIGNvdW50IHR5cGUiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gMiAqIGhlYWRlckluZm8ubWF4WkVycm9yOwogICAgICAgICAgICAgICAgdmFyIHN0dWZmZWREYXRhLCBhcnJheUJ1Ziwgc3RvcmU4LCBkYXRhQnl0ZXMsIGRhdGFXb3JkczsKICAgICAgICAgICAgICAgIHZhciBsdXRBcnIsIGx1dERhdGEsIGx1dEJ5dGVzLCBsdXRCaXRzUGVyRWxlbWVudCwgYml0c1BlclBpeGVsOwogICAgICAgICAgICAgICAgdmFyIHpNYXggPSBoZWFkZXJJbmZvLm51bURpbXMgPiAxID8gaGVhZGVySW5mby5tYXhWYWx1ZXNbaURpbV0gOiBoZWFkZXJJbmZvLnpNYXg7CiAgICAgICAgICAgICAgICBpZiAoZG9MdXQpIHsKICAgICAgICAgICAgICAgICAgZGF0YS5jb3VudGVyLmx1dCsrOwogICAgICAgICAgICAgICAgICBsdXRCeXRlcyA9IHZpZXcuZ2V0VWludDgoYmxvY2tQdHIpOwogICAgICAgICAgICAgICAgICBsdXRCaXRzUGVyRWxlbWVudCA9IG51bUJpdHM7CiAgICAgICAgICAgICAgICAgIGJsb2NrUHRyKys7CiAgICAgICAgICAgICAgICAgIGRhdGFCeXRlcyA9IE1hdGguY2VpbCgobHV0Qnl0ZXMgLSAxKSAqIG51bUJpdHMgLyA4KTsKICAgICAgICAgICAgICAgICAgZGF0YVdvcmRzID0gTWF0aC5jZWlsKGRhdGFCeXRlcyAvIDQpOwogICAgICAgICAgICAgICAgICBhcnJheUJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihkYXRhV29yZHMgKiA0KTsKICAgICAgICAgICAgICAgICAgc3RvcmU4ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgICAgICBkYXRhLnB0ciArPSBibG9ja1B0cjsKICAgICAgICAgICAgICAgICAgc3RvcmU4LnNldChuZXcgVWludDhBcnJheShpbnB1dCwgZGF0YS5wdHIsIGRhdGFCeXRlcykpOwogICAgICAgICAgICAgICAgICBsdXREYXRhID0gbmV3IFVpbnQzMkFycmF5KGFycmF5QnVmKTsKICAgICAgICAgICAgICAgICAgZGF0YS5wdHIgKz0gZGF0YUJ5dGVzOwogICAgICAgICAgICAgICAgICBiaXRzUGVyUGl4ZWwgPSAwOwogICAgICAgICAgICAgICAgICB3aGlsZSAobHV0Qnl0ZXMgLSAxID4+PiBiaXRzUGVyUGl4ZWwpIHsKICAgICAgICAgICAgICAgICAgICBiaXRzUGVyUGl4ZWwrKzsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBkYXRhQnl0ZXMgPSBNYXRoLmNlaWwobnVtRWxlbWVudHMgKiBiaXRzUGVyUGl4ZWwgLyA4KTsKICAgICAgICAgICAgICAgICAgZGF0YVdvcmRzID0gTWF0aC5jZWlsKGRhdGFCeXRlcyAvIDQpOwogICAgICAgICAgICAgICAgICBhcnJheUJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihkYXRhV29yZHMgKiA0KTsKICAgICAgICAgICAgICAgICAgc3RvcmU4ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgICAgICBzdG9yZTguc2V0KG5ldyBVaW50OEFycmF5KGlucHV0LCBkYXRhLnB0ciwgZGF0YUJ5dGVzKSk7CiAgICAgICAgICAgICAgICAgIHN0dWZmZWREYXRhID0gbmV3IFVpbnQzMkFycmF5KGFycmF5QnVmKTsKICAgICAgICAgICAgICAgICAgZGF0YS5wdHIgKz0gZGF0YUJ5dGVzOwogICAgICAgICAgICAgICAgICBpZiAoZmlsZVZlcnNpb24gPj0gMykgewogICAgICAgICAgICAgICAgICAgIGx1dEFyciA9IEJpdFN0dWZmZXIudW5zdHVmZkxVVDIobHV0RGF0YSwgbnVtQml0cywgbHV0Qnl0ZXMgLSAxLCBvZmZzZXQsIHNjYWxlLCB6TWF4KTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBsdXRBcnIgPSBCaXRTdHVmZmVyLnVuc3R1ZmZMVVQobHV0RGF0YSwgbnVtQml0cywgbHV0Qnl0ZXMgLSAxLCBvZmZzZXQsIHNjYWxlLCB6TWF4KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoZmlsZVZlcnNpb24gPj0gMykgewogICAgICAgICAgICAgICAgICAgIEJpdFN0dWZmZXIudW5zdHVmZjIoc3R1ZmZlZERhdGEsIGJsb2NrRGF0YUJ1ZmZlciwgYml0c1BlclBpeGVsLCBudW1FbGVtZW50cywgbHV0QXJyKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBCaXRTdHVmZmVyLnVuc3R1ZmYoc3R1ZmZlZERhdGEsIGJsb2NrRGF0YUJ1ZmZlciwgYml0c1BlclBpeGVsLCBudW1FbGVtZW50cywgbHV0QXJyKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgZGF0YS5jb3VudGVyLmJpdHN0dWZmZXIrKzsKICAgICAgICAgICAgICAgICAgYml0c1BlclBpeGVsID0gbnVtQml0czsKICAgICAgICAgICAgICAgICAgZGF0YS5wdHIgKz0gYmxvY2tQdHI7CiAgICAgICAgICAgICAgICAgIGlmIChiaXRzUGVyUGl4ZWwgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgZGF0YUJ5dGVzID0gTWF0aC5jZWlsKG51bUVsZW1lbnRzICogYml0c1BlclBpeGVsIC8gOCk7CiAgICAgICAgICAgICAgICAgICAgZGF0YVdvcmRzID0gTWF0aC5jZWlsKGRhdGFCeXRlcyAvIDQpOwogICAgICAgICAgICAgICAgICAgIGFycmF5QnVmID0gbmV3IEFycmF5QnVmZmVyKGRhdGFXb3JkcyAqIDQpOwogICAgICAgICAgICAgICAgICAgIHN0b3JlOCA9IG5ldyBVaW50OEFycmF5KGFycmF5QnVmKTsKICAgICAgICAgICAgICAgICAgICBzdG9yZTguc2V0KG5ldyBVaW50OEFycmF5KGlucHV0LCBkYXRhLnB0ciwgZGF0YUJ5dGVzKSk7CiAgICAgICAgICAgICAgICAgICAgc3R1ZmZlZERhdGEgPSBuZXcgVWludDMyQXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgICAgICAgIGRhdGEucHRyICs9IGRhdGFCeXRlczsKICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZVZlcnNpb24gPj0gMykgewogICAgICAgICAgICAgICAgICAgICAgaWYgKG9mZnNldCA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEJpdFN0dWZmZXIub3JpZ2luYWxVbnN0dWZmMihzdHVmZmVkRGF0YSwgYmxvY2tEYXRhQnVmZmVyLCBiaXRzUGVyUGl4ZWwsIG51bUVsZW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEJpdFN0dWZmZXIudW5zdHVmZjIoc3R1ZmZlZERhdGEsIGJsb2NrRGF0YUJ1ZmZlciwgYml0c1BlclBpeGVsLCBudW1FbGVtZW50cywgZmFsc2UsIG9mZnNldCwgc2NhbGUsIHpNYXgpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0ID09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgQml0U3R1ZmZlci5vcmlnaW5hbFVuc3R1ZmYoc3R1ZmZlZERhdGEsIGJsb2NrRGF0YUJ1ZmZlciwgYml0c1BlclBpeGVsLCBudW1FbGVtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBCaXRTdHVmZmVyLnVuc3R1ZmYoc3R1ZmZlZERhdGEsIGJsb2NrRGF0YUJ1ZmZlciwgYml0c1BlclBpeGVsLCBudW1FbGVtZW50cywgZmFsc2UsIG9mZnNldCwgc2NhbGUsIHpNYXgpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmVhZFRpbGVzOiBmdW5jdGlvbihpbnB1dCwgZGF0YSwgT3V0UGl4ZWxUeXBlQXJyYXkpIHsKICAgICAgICAgICAgICB2YXIgaGVhZGVySW5mbyA9IGRhdGEuaGVhZGVySW5mbzsKICAgICAgICAgICAgICB2YXIgd2lkdGggPSBoZWFkZXJJbmZvLndpZHRoOwogICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBoZWFkZXJJbmZvLmhlaWdodDsKICAgICAgICAgICAgICB2YXIgbWljcm9CbG9ja1NpemUgPSBoZWFkZXJJbmZvLm1pY3JvQmxvY2tTaXplOwogICAgICAgICAgICAgIHZhciBpbWFnZVR5cGUgPSBoZWFkZXJJbmZvLmltYWdlVHlwZTsKICAgICAgICAgICAgICB2YXIgZGF0YVR5cGVTaXplID0gTGVyYzJIZWxwZXJzLmdldERhdGFUeXBlU2l6ZShpbWFnZVR5cGUpOwogICAgICAgICAgICAgIHZhciBudW1CbG9ja3NYID0gTWF0aC5jZWlsKHdpZHRoIC8gbWljcm9CbG9ja1NpemUpOwogICAgICAgICAgICAgIHZhciBudW1CbG9ja3NZID0gTWF0aC5jZWlsKGhlaWdodCAvIG1pY3JvQmxvY2tTaXplKTsKICAgICAgICAgICAgICBkYXRhLnBpeGVscy5udW1CbG9ja3NZID0gbnVtQmxvY2tzWTsKICAgICAgICAgICAgICBkYXRhLnBpeGVscy5udW1CbG9ja3NYID0gbnVtQmxvY2tzWDsKICAgICAgICAgICAgICBkYXRhLnBpeGVscy5wdHIgPSAwOwogICAgICAgICAgICAgIHZhciByb3cgPSAwLCBjb2wgPSAwLCBibG9ja1kgPSAwLCBibG9ja1ggPSAwLCB0aGlzQmxvY2tIZWlnaHQgPSAwLCB0aGlzQmxvY2tXaWR0aCA9IDAsIGJ5dGVzTGVmdCA9IDAsIGhlYWRlckJ5dGUgPSAwLCBiaXRzNjcgPSAwLCB0ZXN0Q29kZSA9IDAsIG91dFB0ciA9IDAsIG91dFN0cmlkZSA9IDAsIG51bUJ5dGVzID0gMCwgYnl0ZXNsZWZ0ID0gMCwgeiA9IDAsIGJsb2NrUHRyID0gMDsKICAgICAgICAgICAgICB2YXIgdmlldywgYmxvY2ssIGFycmF5QnVmLCBzdG9yZTgsIHJhd0RhdGE7CiAgICAgICAgICAgICAgdmFyIGJsb2NrRW5jb2Rpbmc7CiAgICAgICAgICAgICAgdmFyIGJsb2NrRGF0YUJ1ZmZlciA9IG5ldyBPdXRQaXhlbFR5cGVBcnJheShtaWNyb0Jsb2NrU2l6ZSAqIG1pY3JvQmxvY2tTaXplKTsKICAgICAgICAgICAgICB2YXIgbGFzdEJsb2NrSGVpZ2h0ID0gaGVpZ2h0ICUgbWljcm9CbG9ja1NpemUgfHwgbWljcm9CbG9ja1NpemU7CiAgICAgICAgICAgICAgdmFyIGxhc3RCbG9ja1dpZHRoID0gd2lkdGggJSBtaWNyb0Jsb2NrU2l6ZSB8fCBtaWNyb0Jsb2NrU2l6ZTsKICAgICAgICAgICAgICB2YXIgb2Zmc2V0VHlwZSwgb2Zmc2V0OwogICAgICAgICAgICAgIHZhciBudW1EaW1zID0gaGVhZGVySW5mby5udW1EaW1zLCBpRGltOwogICAgICAgICAgICAgIHZhciBtYXNrID0gZGF0YS5waXhlbHMucmVzdWx0TWFzazsKICAgICAgICAgICAgICB2YXIgcmVzdWx0UGl4ZWxzID0gZGF0YS5waXhlbHMucmVzdWx0UGl4ZWxzOwogICAgICAgICAgICAgIGZvciAoYmxvY2tZID0gMDsgYmxvY2tZIDwgbnVtQmxvY2tzWTsgYmxvY2tZKyspIHsKICAgICAgICAgICAgICAgIHRoaXNCbG9ja0hlaWdodCA9IGJsb2NrWSAhPT0gbnVtQmxvY2tzWSAtIDEgPyBtaWNyb0Jsb2NrU2l6ZSA6IGxhc3RCbG9ja0hlaWdodDsKICAgICAgICAgICAgICAgIGZvciAoYmxvY2tYID0gMDsgYmxvY2tYIDwgbnVtQmxvY2tzWDsgYmxvY2tYKyspIHsKICAgICAgICAgICAgICAgICAgdGhpc0Jsb2NrV2lkdGggPSBibG9ja1ggIT09IG51bUJsb2Nrc1ggLSAxID8gbWljcm9CbG9ja1NpemUgOiBsYXN0QmxvY2tXaWR0aDsKICAgICAgICAgICAgICAgICAgb3V0UHRyID0gYmxvY2tZICogd2lkdGggKiBtaWNyb0Jsb2NrU2l6ZSArIGJsb2NrWCAqIG1pY3JvQmxvY2tTaXplOwogICAgICAgICAgICAgICAgICBvdXRTdHJpZGUgPSB3aWR0aCAtIHRoaXNCbG9ja1dpZHRoOwogICAgICAgICAgICAgICAgICBmb3IgKGlEaW0gPSAwOyBpRGltIDwgbnVtRGltczsgaURpbSsrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKG51bURpbXMgPiAxKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXN1bHRQaXhlbHMgPSBuZXcgT3V0UGl4ZWxUeXBlQXJyYXkoZGF0YS5waXhlbHMucmVzdWx0UGl4ZWxzLmJ1ZmZlciwgd2lkdGggKiBoZWlnaHQgKiBpRGltICogZGF0YVR5cGVTaXplLCB3aWR0aCAqIGhlaWdodCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGJ5dGVzTGVmdCA9IGlucHV0LmJ5dGVMZW5ndGggLSBkYXRhLnB0cjsKICAgICAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IERhdGFWaWV3KGlucHV0LCBkYXRhLnB0ciwgTWF0aC5taW4oMTAsIGJ5dGVzTGVmdCkpOwogICAgICAgICAgICAgICAgICAgIGJsb2NrID0ge307CiAgICAgICAgICAgICAgICAgICAgYmxvY2tQdHIgPSAwOwogICAgICAgICAgICAgICAgICAgIGhlYWRlckJ5dGUgPSB2aWV3LmdldFVpbnQ4KDApOwogICAgICAgICAgICAgICAgICAgIGJsb2NrUHRyKys7CiAgICAgICAgICAgICAgICAgICAgYml0czY3ID0gaGVhZGVyQnl0ZSA+PiA2ICYgMjU1OwogICAgICAgICAgICAgICAgICAgIHRlc3RDb2RlID0gaGVhZGVyQnl0ZSA+PiAyICYgMTU7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RDb2RlICE9PSAoYmxvY2tYICogbWljcm9CbG9ja1NpemUgPj4gMyAmIDE1KSkgewogICAgICAgICAgICAgICAgICAgICAgdGhyb3cgImludGVncml0eSBpc3N1ZSI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGJsb2NrRW5jb2RpbmcgPSBoZWFkZXJCeXRlICYgMzsKICAgICAgICAgICAgICAgICAgICBpZiAoYmxvY2tFbmNvZGluZyA+IDMpIHsKICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHRyICs9IGJsb2NrUHRyOwogICAgICAgICAgICAgICAgICAgICAgdGhyb3cgIkludmFsaWQgYmxvY2sgZW5jb2RpbmcgKCIgKyBibG9ja0VuY29kaW5nICsgIikiOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYmxvY2tFbmNvZGluZyA9PT0gMikgewogICAgICAgICAgICAgICAgICAgICAgZGF0YS5jb3VudGVyLmNvbnN0YW50Kys7CiAgICAgICAgICAgICAgICAgICAgICBkYXRhLnB0ciArPSBibG9ja1B0cjsKICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYmxvY2tFbmNvZGluZyA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgZGF0YS5jb3VudGVyLnVuY29tcHJlc3NlZCsrOwogICAgICAgICAgICAgICAgICAgICAgZGF0YS5wdHIgKz0gYmxvY2tQdHI7CiAgICAgICAgICAgICAgICAgICAgICBudW1CeXRlcyA9IHRoaXNCbG9ja0hlaWdodCAqIHRoaXNCbG9ja1dpZHRoICogZGF0YVR5cGVTaXplOwogICAgICAgICAgICAgICAgICAgICAgYnl0ZXNsZWZ0ID0gaW5wdXQuYnl0ZUxlbmd0aCAtIGRhdGEucHRyOwogICAgICAgICAgICAgICAgICAgICAgbnVtQnl0ZXMgPSBudW1CeXRlcyA8IGJ5dGVzbGVmdCA/IG51bUJ5dGVzIDogYnl0ZXNsZWZ0OwogICAgICAgICAgICAgICAgICAgICAgYXJyYXlCdWYgPSBuZXcgQXJyYXlCdWZmZXIobnVtQnl0ZXMgJSBkYXRhVHlwZVNpemUgPT09IDAgPyBudW1CeXRlcyA6IG51bUJ5dGVzICsgZGF0YVR5cGVTaXplIC0gbnVtQnl0ZXMgJSBkYXRhVHlwZVNpemUpOwogICAgICAgICAgICAgICAgICAgICAgc3RvcmU4ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgICAgICAgICAgc3RvcmU4LnNldChuZXcgVWludDhBcnJheShpbnB1dCwgZGF0YS5wdHIsIG51bUJ5dGVzKSk7CiAgICAgICAgICAgICAgICAgICAgICByYXdEYXRhID0gbmV3IE91dFBpeGVsVHlwZUFycmF5KGFycmF5QnVmKTsKICAgICAgICAgICAgICAgICAgICAgIHogPSAwOwogICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChyb3cgPSAwOyByb3cgPCB0aGlzQmxvY2tIZWlnaHQ7IHJvdysrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb2wgPSAwOyBjb2wgPCB0aGlzQmxvY2tXaWR0aDsgY29sKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrW291dFB0cl0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0UGl4ZWxzW291dFB0cl0gPSByYXdEYXRhW3orK107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRQdHIrKzsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0UHRyICs9IG91dFN0cmlkZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChyb3cgPSAwOyByb3cgPCB0aGlzQmxvY2tIZWlnaHQ7IHJvdysrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb2wgPSAwOyBjb2wgPCB0aGlzQmxvY2tXaWR0aDsgY29sKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFBpeGVsc1tvdXRQdHIrK10gPSByYXdEYXRhW3orK107CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIG91dFB0ciArPSBvdXRTdHJpZGU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHRyICs9IHogKiBkYXRhVHlwZVNpemU7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFR5cGUgPSBMZXJjMkhlbHBlcnMuZ2V0RGF0YVR5cGVVc2VkKGltYWdlVHlwZSwgYml0czY3KTsKICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IExlcmMySGVscGVycy5nZXRPbmVQaXhlbChibG9jaywgYmxvY2tQdHIsIG9mZnNldFR5cGUsIHZpZXcpOwogICAgICAgICAgICAgICAgICAgICAgYmxvY2tQdHIgKz0gTGVyYzJIZWxwZXJzLmdldERhdGFUeXBlU2l6ZShvZmZzZXRUeXBlKTsKICAgICAgICAgICAgICAgICAgICAgIGlmIChibG9ja0VuY29kaW5nID09PSAzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHRyICs9IGJsb2NrUHRyOwogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNvdW50ZXIuY29uc3RhbnRvZmZzZXQrKzsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHJvdyA9IDA7IHJvdyA8IHRoaXNCbG9ja0hlaWdodDsgcm93KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29sID0gMDsgY29sIDwgdGhpc0Jsb2NrV2lkdGg7IGNvbCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrW291dFB0cl0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRQaXhlbHNbb3V0UHRyXSA9IG9mZnNldDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRQdHIrKzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dFB0ciArPSBvdXRTdHJpZGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocm93ID0gMDsgcm93IDwgdGhpc0Jsb2NrSGVpZ2h0OyByb3crKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb2wgPSAwOyBjb2wgPCB0aGlzQmxvY2tXaWR0aDsgY29sKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0UGl4ZWxzW291dFB0cisrXSA9IG9mZnNldDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dFB0ciArPSBvdXRTdHJpZGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnB0ciArPSBibG9ja1B0cjsKICAgICAgICAgICAgICAgICAgICAgICAgTGVyYzJIZWxwZXJzLmRlY29kZUJpdHMoaW5wdXQsIGRhdGEsIGJsb2NrRGF0YUJ1ZmZlciwgb2Zmc2V0LCBpRGltKTsKICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tQdHIgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFzaykgewogICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocm93ID0gMDsgcm93IDwgdGhpc0Jsb2NrSGVpZ2h0OyByb3crKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb2wgPSAwOyBjb2wgPCB0aGlzQmxvY2tXaWR0aDsgY29sKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tbb3V0UHRyXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFBpeGVsc1tvdXRQdHJdID0gYmxvY2tEYXRhQnVmZmVyW2Jsb2NrUHRyKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dFB0cisrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0UHRyICs9IG91dFN0cmlkZTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChyb3cgPSAwOyByb3cgPCB0aGlzQmxvY2tIZWlnaHQ7IHJvdysrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbCA9IDA7IGNvbCA8IHRoaXNCbG9ja1dpZHRoOyBjb2wrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRQaXhlbHNbb3V0UHRyKytdID0gYmxvY2tEYXRhQnVmZmVyW2Jsb2NrUHRyKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0UHRyICs9IG91dFN0cmlkZTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKgogICAgICAgICAgICAqICBwcml2YXRlIG1ldGhvZHMgKGhlbHBlciBtZXRob2RzKQogICAgICAgICAgICAqKioqKioqKioqKioqKioqKi8KICAgICAgICAgICAgZm9ybWF0RmlsZUluZm86IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgImZpbGVJZGVudGlmaWVyU3RyaW5nIjogZGF0YS5oZWFkZXJJbmZvLmZpbGVJZGVudGlmaWVyU3RyaW5nLAogICAgICAgICAgICAgICAgImZpbGVWZXJzaW9uIjogZGF0YS5oZWFkZXJJbmZvLmZpbGVWZXJzaW9uLAogICAgICAgICAgICAgICAgImltYWdlVHlwZSI6IGRhdGEuaGVhZGVySW5mby5pbWFnZVR5cGUsCiAgICAgICAgICAgICAgICAiaGVpZ2h0IjogZGF0YS5oZWFkZXJJbmZvLmhlaWdodCwKICAgICAgICAgICAgICAgICJ3aWR0aCI6IGRhdGEuaGVhZGVySW5mby53aWR0aCwKICAgICAgICAgICAgICAgICJudW1WYWxpZFBpeGVsIjogZGF0YS5oZWFkZXJJbmZvLm51bVZhbGlkUGl4ZWwsCiAgICAgICAgICAgICAgICAibWljcm9CbG9ja1NpemUiOiBkYXRhLmhlYWRlckluZm8ubWljcm9CbG9ja1NpemUsCiAgICAgICAgICAgICAgICAiYmxvYlNpemUiOiBkYXRhLmhlYWRlckluZm8uYmxvYlNpemUsCiAgICAgICAgICAgICAgICAibWF4WkVycm9yIjogZGF0YS5oZWFkZXJJbmZvLm1heFpFcnJvciwKICAgICAgICAgICAgICAgICJwaXhlbFR5cGUiOiBMZXJjMkhlbHBlcnMuZ2V0UGl4ZWxUeXBlKGRhdGEuaGVhZGVySW5mby5pbWFnZVR5cGUpLAogICAgICAgICAgICAgICAgImVvZk9mZnNldCI6IGRhdGEuZW9mT2Zmc2V0LAogICAgICAgICAgICAgICAgIm1hc2siOiBkYXRhLm1hc2sgPyB7CiAgICAgICAgICAgICAgICAgICJudW1CeXRlcyI6IGRhdGEubWFzay5udW1CeXRlcwogICAgICAgICAgICAgICAgfSA6IG51bGwsCiAgICAgICAgICAgICAgICAicGl4ZWxzIjogewogICAgICAgICAgICAgICAgICAibnVtQmxvY2tzWCI6IGRhdGEucGl4ZWxzLm51bUJsb2Nrc1gsCiAgICAgICAgICAgICAgICAgICJudW1CbG9ja3NZIjogZGF0YS5waXhlbHMubnVtQmxvY2tzWSwKICAgICAgICAgICAgICAgICAgLy8ibnVtQnl0ZXMiOiBkYXRhLnBpeGVscy5udW1CeXRlcywKICAgICAgICAgICAgICAgICAgIm1heFZhbHVlIjogZGF0YS5oZWFkZXJJbmZvLnpNYXgsCiAgICAgICAgICAgICAgICAgICJtaW5WYWx1ZSI6IGRhdGEuaGVhZGVySW5mby56TWluLAogICAgICAgICAgICAgICAgICAibm9EYXRhVmFsdWUiOiBkYXRhLm5vRGF0YVZhbHVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY29uc3RydWN0Q29uc3RhbnRTdXJmYWNlOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAgdmFyIHZhbCA9IGRhdGEuaGVhZGVySW5mby56TWF4OwogICAgICAgICAgICAgIHZhciBudW1EaW1zID0gZGF0YS5oZWFkZXJJbmZvLm51bURpbXM7CiAgICAgICAgICAgICAgdmFyIG51bVBpeGVscyA9IGRhdGEuaGVhZGVySW5mby5oZWlnaHQgKiBkYXRhLmhlYWRlckluZm8ud2lkdGg7CiAgICAgICAgICAgICAgdmFyIG51bVBpeGVsQWxsRGltcyA9IG51bVBpeGVscyAqIG51bURpbXM7CiAgICAgICAgICAgICAgdmFyIGkgPSAwLCBrID0gMCwgblN0YXJ0ID0gMDsKICAgICAgICAgICAgICB2YXIgbWFzayA9IGRhdGEucGl4ZWxzLnJlc3VsdE1hc2s7CiAgICAgICAgICAgICAgaWYgKG1hc2spIHsKICAgICAgICAgICAgICAgIGlmIChudW1EaW1zID4gMSkgewogICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtRGltczsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgblN0YXJ0ID0gaSAqIG51bVBpeGVsczsKICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbnVtUGl4ZWxzOyBrKyspIHsKICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrW2tdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucGl4ZWxzLnJlc3VsdFBpeGVsc1tuU3RhcnQgKyBrXSA9IHZhbDsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBudW1QaXhlbHM7IGsrKykgewogICAgICAgICAgICAgICAgICAgIGlmIChtYXNrW2tdKSB7CiAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBpeGVscy5yZXN1bHRQaXhlbHNba10gPSB2YWw7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmIChkYXRhLnBpeGVscy5yZXN1bHRQaXhlbHMuZmlsbCkgewogICAgICAgICAgICAgICAgICBkYXRhLnBpeGVscy5yZXN1bHRQaXhlbHMuZmlsbCh2YWwpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IG51bVBpeGVsQWxsRGltczsgaysrKSB7CiAgICAgICAgICAgICAgICAgICAgZGF0YS5waXhlbHMucmVzdWx0UGl4ZWxzW2tdID0gdmFsOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2V0RGF0YVR5cGVBcnJheTogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgIHZhciB0cDsKICAgICAgICAgICAgICBzd2l0Y2ggKHQpIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgdHAgPSBJbnQ4QXJyYXk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICB0cCA9IFVpbnQ4QXJyYXk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICB0cCA9IEludDE2QXJyYXk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICB0cCA9IFVpbnQxNkFycmF5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgICAgdHAgPSBJbnQzMkFycmF5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgICAgdHAgPSBVaW50MzJBcnJheTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICAgIHRwID0gRmxvYXQzMkFycmF5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgICAgdHAgPSBGbG9hdDY0QXJyYXk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgdHAgPSBGbG9hdDMyQXJyYXk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiB0cDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2V0UGl4ZWxUeXBlOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgdmFyIHRwOwogICAgICAgICAgICAgIHN3aXRjaCAodCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICB0cCA9ICJTOCI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICB0cCA9ICJVOCI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICB0cCA9ICJTMTYiOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgdHAgPSAiVTE2IjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICAgIHRwID0gIlMzMiI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgICB0cCA9ICJVMzIiOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgICAgdHAgPSAiRjMyIjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICAgIHRwID0gIkY2NCI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgdHAgPSAiRjMyIjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIHRwOwogICAgICAgICAgICB9LAogICAgICAgICAgICBpc1ZhbGlkUGl4ZWxWYWx1ZTogZnVuY3Rpb24odCwgdmFsKSB7CiAgICAgICAgICAgICAgaWYgKHZhbCA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhciBpc1ZhbGlkOwogICAgICAgICAgICAgIHN3aXRjaCAodCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdmFsID49IC0xMjggJiYgdmFsIDw9IDEyNzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSB2YWwgPj0gMCAmJiB2YWwgPD0gMjU1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IHZhbCA+PSAtMzI3NjggJiYgdmFsIDw9IDMyNzY3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IHZhbCA+PSAwICYmIHZhbCA8PSA2NTUzNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSB2YWwgPj0gLTIxNDc0ODM2NDggJiYgdmFsIDw9IDIxNDc0ODM2NDc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdmFsID49IDAgJiYgdmFsIDw9IDQyOTQ5NjcyOTY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdmFsID49IC0zNDAyNzk5OTM4NzkwMTQ4NGUyMiAmJiB2YWwgPD0gMzQwMjc5OTkzODc5MDE0ODRlMjI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdmFsID49IDVlLTMyNCAmJiB2YWwgPD0gMTc5NzY5MzEzNDg2MjMxNTdlMjkyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBmYWxzZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldERhdGFUeXBlU2l6ZTogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgIHZhciBzID0gMDsKICAgICAgICAgICAgICBzd2l0Y2ggKHQpIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgcyA9IDE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICBzID0gMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICAgIHMgPSA0OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgICAgcyA9IDg7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgcyA9IHQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBzOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXREYXRhVHlwZVVzZWQ6IGZ1bmN0aW9uKGR0LCB0YykgewogICAgICAgICAgICAgIHZhciB0ID0gZHQ7CiAgICAgICAgICAgICAgc3dpdGNoIChkdCkgewogICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICB0ID0gZHQgLSB0YzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICAgIHQgPSBkdCAtIDIgKiB0YzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICAgIGlmICgwID09PSB0YykgewogICAgICAgICAgICAgICAgICAgIHQgPSBkdDsKICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgxID09PSB0YykgewogICAgICAgICAgICAgICAgICAgIHQgPSAyOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHQgPSAxOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gdGMpIHsKICAgICAgICAgICAgICAgICAgICB0ID0gZHQ7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdCA9IGR0IC0gMiAqIHRjICsgMTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIHQgPSBkdDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiB0OwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXRPbmVQaXhlbDogZnVuY3Rpb24oYmxvY2ssIGJsb2NrUHRyLCBvZmZzZXRUeXBlLCB2aWV3KSB7CiAgICAgICAgICAgICAgdmFyIHRlbXAgPSAwOwogICAgICAgICAgICAgIHN3aXRjaCAob2Zmc2V0VHlwZSkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICB0ZW1wID0gdmlldy5nZXRJbnQ4KGJsb2NrUHRyKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgIHRlbXAgPSB2aWV3LmdldFVpbnQ4KGJsb2NrUHRyKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgIHRlbXAgPSB2aWV3LmdldEludDE2KGJsb2NrUHRyLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgIHRlbXAgPSB2aWV3LmdldFVpbnQxNihibG9ja1B0ciwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICB0ZW1wID0gdmlldy5nZXRJbnQzMihibG9ja1B0ciwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgICB0ZW1wID0gdmlldy5nZXRVSW50MzIoYmxvY2tQdHIsIHRydWUpOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgICAgdGVtcCA9IHZpZXcuZ2V0RmxvYXQzMihibG9ja1B0ciwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgICB0ZW1wID0gdmlldy5nZXRGbG9hdDY0KGJsb2NrUHRyLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICB0aHJvdyAidGhlIGRlY29kZXIgZG9lcyBub3QgdW5kZXJzdGFuZCB0aGlzIHBpeGVsIHR5cGUiOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gdGVtcDsKICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICAgIHZhciBUcmVlTm9kZSA9IGZ1bmN0aW9uKHZhbCwgbGVmdCwgcmlnaHQpIHsKICAgICAgICAgICAgdGhpcy52YWwgPSB2YWw7CiAgICAgICAgICAgIHRoaXMubGVmdCA9IGxlZnQ7CiAgICAgICAgICAgIHRoaXMucmlnaHQgPSByaWdodDsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgTGVyYzJEZWNvZGUyID0gewogICAgICAgICAgICAvKgogICAgICAgICAgICAqICoqKioqKioqcmVtb3ZlZCBvcHRpb25zIGNvbXBhcmVkIHRvIExFUkMxLiBXZSBjYW4gYnJpbmcgc29tZSBvZiB0aGVtIGJhY2sgaWYgbmVlZGVkLgogICAgICAgICAgICAgKiByZW1vdmVkIHBpeGVsIHR5cGUuIExFUkMyIGlzIHR5cGVkIGFuZCBkb2Vzbid0IHJlcXVpcmUgdXNlciB0byBnaXZlIHBpeGVsIHR5cGUKICAgICAgICAgICAgICogY2hhbmdlZCBlbmNvZGVkTWFza0RhdGEgdG8gbWFza0RhdGEuIExFUkMyICdzIGpzIHZlcnNpb24gbWFrZSBpdCBmYXN0ZXIgdG8gdXNlIG1hc2tEYXRhIGRpcmVjdGx5LgogICAgICAgICAgICAgKiByZW1vdmVkIHJldHVybk1hc2suIG1hc2sgaXMgdXNlZCBieSBMRVJDMiBpbnRlcm5hbGx5IGFuZCBpcyBjb3N0IGZyZWUuIEluIGNhc2Ugb2YgdXNlciBpbnB1dCBtYXNrLCBpdCdzIHJldHVybmVkIGFzIHdlbGwgYW5kIGhhcyBuZWdsaWJsZSBjb3N0LgogICAgICAgICAgICAgKiByZW1vdmVkIG5vZGF0YXZhbHVlLiBCZWNhdXNlIExFUkMyIHBpeGVscyBhcmUgdHlwZWQsIG5vZGF0YXZhbHVlIHdpbGwgc2FjcmlmeSBhIHVzZWZ1bCB2YWx1ZSBmb3IgbWFueSB0eXBlcyAoOGJpdCwgMTZiaXQpIGV0YywKICAgICAgICAgICAgICogICAgICAgdXNlciBoYXMgdG8gYmUga25vd2xlZGdhYmxlIGVub3VnaCBhYm91dCByYXN0ZXIgYW5kIHRoZWlyIGRhdGEgdG8gYXZvaWQgdXNhYmlsaXR5IGlzc3Vlcy4gc28gbm9kYXRhIHZhbHVlIGlzIHNpbXBseSByZW1vdmVkIG5vdy4KICAgICAgICAgICAgICogICAgICAgV2UgY2FuIGFkZCBpdCBiYWNrIGxhdGVyIGlmIHRoZWlyJ3MgYSBjbGVhciByZXF1aXJlbWVudC4KICAgICAgICAgICAgICogcmVtb3ZlZCBlbmNvZGVkTWFzay4gVGhpcyBvcHRpb24gd2FzIG5vdCBpbXBsZW1lbnRlZCBpbiBMZXJjRGVjb2RlLiBJdCBjYW4gYmUgZG9uZSBhZnRlciBkZWNvZGluZyAobGVzcyBlZmZpY2llbnQpCiAgICAgICAgICAgICAqIHJlbW92ZWQgY29tcHV0ZVVzZWRCaXREZXB0aHMuCiAgICAgICAgICAgICAqCiAgICAgICAgICAgICAqCiAgICAgICAgICAgICAqIHJlc3BvbnNlIGNoYW5nZXMgY29tcGFyZWQgdG8gTEVSQzEKICAgICAgICAgICAgICogMS4gZW5jb2RlZE1hc2tEYXRhIGlzIG5vdCBhdmFpbGFibGUKICAgICAgICAgICAgICogMi4gbm9EYXRhVmFsdWUgaXMgb3B0aW9uYWwgKHJldHVybnMgb25seSBpZiB1c2VyJ3Mgbm9EYXRhVmFsdWUgaXMgd2l0aCBpbiB0aGUgdmFsaWQgZGF0YSB0eXBlIHJhbmdlKQogICAgICAgICAgICAgKiAzLiBtYXNrRGF0YSBpcyBhbHdheXMgYXZhaWxhYmxlCiAgICAgICAgICAgICovCiAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKgogICAgICAgICAgICAqICBwdWJsaWMgcHJvcGVydGllcwogICAgICAgICAgICAqKioqKioqKioqKioqKioqKiovCiAgICAgICAgICAgIC8vSFVGRk1BTl9MVVRfQklUU19NQVg6IDEyLCAvL3VzZSAyXjEyIGx1dCwgbm90IGNvbmZpZ3VyYWJsZQogICAgICAgICAgICAvKioqKioqKioqKioqKioqKioKICAgICAgICAgICAgKiAgcHVibGljIG1ldGhvZHMKICAgICAgICAgICAgKioqKioqKioqKioqKioqKiovCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBEZWNvZGUgYSBMRVJDMiBieXRlIHN0cmVhbSBhbmQgcmV0dXJuIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBwaXhlbCBkYXRhIGFuZCBvcHRpb25hbCBtZXRhZGF0YS4KICAgICAgICAgICAgICoKICAgICAgICAgICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gaW5wdXQgVGhlIExFUkMgaW5wdXQgYnl0ZSBzdHJlYW0KICAgICAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBvcHRpb25zIERlY29kaW5nIG9wdGlvbnMKICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmlucHV0T2Zmc2V0XSBUaGUgbnVtYmVyIG9mIGJ5dGVzIHRvIHNraXAgaW4gdGhlIGlucHV0IGJ5dGUgc3RyZWFtLiBBIHZhbGlkIExFUkMgZmlsZSBpcyBleHBlY3RlZCBhdCB0aGF0IHBvc2l0aW9uCiAgICAgICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmV0dXJuRmlsZUluZm9dIElmIHRydWUsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBoYXZlIGEgZmlsZUluZm8gcHJvcGVydHkgdGhhdCBjb250YWlucyBtZXRhZGF0YSBvYnRhaW5lZCBmcm9tIHRoZSBMRVJDIGhlYWRlcnMgYW5kIHRoZSBkZWNvZGluZyBwcm9jZXNzCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBkZWNvZGU6IGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zKSB7CiAgICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICAgICAgICAgICAgdmFyIG5vRGF0YVZhbHVlID0gb3B0aW9ucy5ub0RhdGFWYWx1ZTsKICAgICAgICAgICAgICB2YXIgaSA9IDAsIGRhdGEgPSB7fTsKICAgICAgICAgICAgICBkYXRhLnB0ciA9IG9wdGlvbnMuaW5wdXRPZmZzZXQgfHwgMDsKICAgICAgICAgICAgICBkYXRhLnBpeGVscyA9IHt9OwogICAgICAgICAgICAgIGlmICghTGVyYzJIZWxwZXJzLnJlYWRIZWFkZXJJbmZvKGlucHV0LCBkYXRhKSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgaGVhZGVySW5mbyA9IGRhdGEuaGVhZGVySW5mbzsKICAgICAgICAgICAgICB2YXIgZmlsZVZlcnNpb24gPSBoZWFkZXJJbmZvLmZpbGVWZXJzaW9uOwogICAgICAgICAgICAgIHZhciBPdXRQaXhlbFR5cGVBcnJheSA9IExlcmMySGVscGVycy5nZXREYXRhVHlwZUFycmF5KGhlYWRlckluZm8uaW1hZ2VUeXBlKTsKICAgICAgICAgICAgICBMZXJjMkhlbHBlcnMucmVhZE1hc2soaW5wdXQsIGRhdGEpOwogICAgICAgICAgICAgIGlmIChoZWFkZXJJbmZvLm51bVZhbGlkUGl4ZWwgIT09IGhlYWRlckluZm8ud2lkdGggKiBoZWFkZXJJbmZvLmhlaWdodCAmJiAhZGF0YS5waXhlbHMucmVzdWx0TWFzaykgewogICAgICAgICAgICAgICAgZGF0YS5waXhlbHMucmVzdWx0TWFzayA9IG9wdGlvbnMubWFza0RhdGE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhciBudW1QaXhlbHMgPSBoZWFkZXJJbmZvLndpZHRoICogaGVhZGVySW5mby5oZWlnaHQ7CiAgICAgICAgICAgICAgZGF0YS5waXhlbHMucmVzdWx0UGl4ZWxzID0gbmV3IE91dFBpeGVsVHlwZUFycmF5KG51bVBpeGVscyAqIGhlYWRlckluZm8ubnVtRGltcyk7CiAgICAgICAgICAgICAgZGF0YS5jb3VudGVyID0gewogICAgICAgICAgICAgICAgb25lc3dlZXA6IDAsCiAgICAgICAgICAgICAgICB1bmNvbXByZXNzZWQ6IDAsCiAgICAgICAgICAgICAgICBsdXQ6IDAsCiAgICAgICAgICAgICAgICBiaXRzdHVmZmVyOiAwLAogICAgICAgICAgICAgICAgY29uc3RhbnQ6IDAsCiAgICAgICAgICAgICAgICBjb25zdGFudG9mZnNldDogMAogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgaWYgKGhlYWRlckluZm8ubnVtVmFsaWRQaXhlbCAhPT0gMCkgewogICAgICAgICAgICAgICAgaWYgKGhlYWRlckluZm8uek1heCA9PT0gaGVhZGVySW5mby56TWluKSB7CiAgICAgICAgICAgICAgICAgIExlcmMySGVscGVycy5jb25zdHJ1Y3RDb25zdGFudFN1cmZhY2UoZGF0YSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZpbGVWZXJzaW9uID49IDQgJiYgTGVyYzJIZWxwZXJzLmNoZWNrTWluTWF4UmFuZ2VzKGlucHV0LCBkYXRhKSkgewogICAgICAgICAgICAgICAgICBMZXJjMkhlbHBlcnMuY29uc3RydWN0Q29uc3RhbnRTdXJmYWNlKGRhdGEpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcoaW5wdXQsIGRhdGEucHRyLCAyKTsKICAgICAgICAgICAgICAgICAgdmFyIGJSZWFkRGF0YU9uZVN3ZWVwID0gdmlldy5nZXRVaW50OCgwKTsKICAgICAgICAgICAgICAgICAgZGF0YS5wdHIrKzsKICAgICAgICAgICAgICAgICAgaWYgKGJSZWFkRGF0YU9uZVN3ZWVwKSB7CiAgICAgICAgICAgICAgICAgICAgTGVyYzJIZWxwZXJzLnJlYWREYXRhT25lU3dlZXAoaW5wdXQsIGRhdGEsIE91dFBpeGVsVHlwZUFycmF5KTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZVZlcnNpb24gPiAxICYmIGhlYWRlckluZm8uaW1hZ2VUeXBlIDw9IDEgJiYgTWF0aC5hYnMoaGVhZGVySW5mby5tYXhaRXJyb3IgLSAwLjUpIDwgMWUtNSkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIGZsYWdIdWZmbWFuID0gdmlldy5nZXRVaW50OCgxKTsKICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHRyKys7CiAgICAgICAgICAgICAgICAgICAgICBkYXRhLmVuY29kZU1vZGUgPSBmbGFnSHVmZm1hbjsKICAgICAgICAgICAgICAgICAgICAgIGlmIChmbGFnSHVmZm1hbiA+IDIgfHwgZmlsZVZlcnNpb24gPCA0ICYmIGZsYWdIdWZmbWFuID4gMSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyAiSW52YWxpZCBIdWZmbWFuIGZsYWcgIiArIGZsYWdIdWZmbWFuOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgaWYgKGZsYWdIdWZmbWFuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIExlcmMySGVscGVycy5yZWFkSHVmZm1hbihpbnB1dCwgZGF0YSwgT3V0UGl4ZWxUeXBlQXJyYXkpOwogICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgTGVyYzJIZWxwZXJzLnJlYWRUaWxlcyhpbnB1dCwgZGF0YSwgT3V0UGl4ZWxUeXBlQXJyYXkpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICBMZXJjMkhlbHBlcnMucmVhZFRpbGVzKGlucHV0LCBkYXRhLCBPdXRQaXhlbFR5cGVBcnJheSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGRhdGEuZW9mT2Zmc2V0ID0gZGF0YS5wdHI7CiAgICAgICAgICAgICAgdmFyIGRpZmY7CiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaW5wdXRPZmZzZXQpIHsKICAgICAgICAgICAgICAgIGRpZmYgPSBkYXRhLmhlYWRlckluZm8uYmxvYlNpemUgKyBvcHRpb25zLmlucHV0T2Zmc2V0IC0gZGF0YS5wdHI7CiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoZGlmZikgPj0gMSkgewogICAgICAgICAgICAgICAgICBkYXRhLmVvZk9mZnNldCA9IG9wdGlvbnMuaW5wdXRPZmZzZXQgKyBkYXRhLmhlYWRlckluZm8uYmxvYlNpemU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGRpZmYgPSBkYXRhLmhlYWRlckluZm8uYmxvYlNpemUgLSBkYXRhLnB0cjsKICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhkaWZmKSA+PSAxKSB7CiAgICAgICAgICAgICAgICAgIGRhdGEuZW9mT2Zmc2V0ID0gZGF0YS5oZWFkZXJJbmZvLmJsb2JTaXplOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gewogICAgICAgICAgICAgICAgd2lkdGg6IGhlYWRlckluZm8ud2lkdGgsCiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlYWRlckluZm8uaGVpZ2h0LAogICAgICAgICAgICAgICAgcGl4ZWxEYXRhOiBkYXRhLnBpeGVscy5yZXN1bHRQaXhlbHMsCiAgICAgICAgICAgICAgICBtaW5WYWx1ZTogaGVhZGVySW5mby56TWluLAogICAgICAgICAgICAgICAgbWF4VmFsdWU6IGhlYWRlckluZm8uek1heCwKICAgICAgICAgICAgICAgIHZhbGlkUGl4ZWxDb3VudDogaGVhZGVySW5mby5udW1WYWxpZFBpeGVsLAogICAgICAgICAgICAgICAgZGltQ291bnQ6IGhlYWRlckluZm8ubnVtRGltcywKICAgICAgICAgICAgICAgIGRpbVN0YXRzOiB7CiAgICAgICAgICAgICAgICAgIG1pblZhbHVlczogaGVhZGVySW5mby5taW5WYWx1ZXMsCiAgICAgICAgICAgICAgICAgIG1heFZhbHVlczogaGVhZGVySW5mby5tYXhWYWx1ZXMKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBtYXNrRGF0YTogZGF0YS5waXhlbHMucmVzdWx0TWFzawogICAgICAgICAgICAgICAgLy9ub0RhdGFWYWx1ZTogbm9EYXRhVmFsdWUKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGlmIChkYXRhLnBpeGVscy5yZXN1bHRNYXNrICYmIExlcmMySGVscGVycy5pc1ZhbGlkUGl4ZWxWYWx1ZShoZWFkZXJJbmZvLmltYWdlVHlwZSwgbm9EYXRhVmFsdWUpKSB7CiAgICAgICAgICAgICAgICB2YXIgbWFzayA9IGRhdGEucGl4ZWxzLnJlc3VsdE1hc2s7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtUGl4ZWxzOyBpKyspIHsKICAgICAgICAgICAgICAgICAgaWYgKCFtYXNrW2ldKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnBpeGVsRGF0YVtpXSA9IG5vRGF0YVZhbHVlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXN1bHQubm9EYXRhVmFsdWUgPSBub0RhdGFWYWx1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZGF0YS5ub0RhdGFWYWx1ZSA9IG5vRGF0YVZhbHVlOwogICAgICAgICAgICAgIGlmIChvcHRpb25zLnJldHVybkZpbGVJbmZvKSB7CiAgICAgICAgICAgICAgICByZXN1bHQuZmlsZUluZm8gPSBMZXJjMkhlbHBlcnMuZm9ybWF0RmlsZUluZm8oZGF0YSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldEJhbmRDb3VudDogZnVuY3Rpb24oaW5wdXQpIHsKICAgICAgICAgICAgICB2YXIgY291bnQgPSAwOwogICAgICAgICAgICAgIHZhciBpID0gMDsKICAgICAgICAgICAgICB2YXIgdGVtcCA9IHt9OwogICAgICAgICAgICAgIHRlbXAucHRyID0gMDsKICAgICAgICAgICAgICB0ZW1wLnBpeGVscyA9IHt9OwogICAgICAgICAgICAgIHdoaWxlIChpIDwgaW5wdXQuYnl0ZUxlbmd0aCAtIDU4KSB7CiAgICAgICAgICAgICAgICBMZXJjMkhlbHBlcnMucmVhZEhlYWRlckluZm8oaW5wdXQsIHRlbXApOwogICAgICAgICAgICAgICAgaSArPSB0ZW1wLmhlYWRlckluZm8uYmxvYlNpemU7CiAgICAgICAgICAgICAgICBjb3VudCsrOwogICAgICAgICAgICAgICAgdGVtcC5wdHIgPSBpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gY291bnQ7CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CiAgICAgICAgICByZXR1cm4gTGVyYzJEZWNvZGUyOwogICAgICAgIH0oKTsKICAgICAgICB2YXIgaXNQbGF0Zm9ybUxpdHRsZUVuZGlhbiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIGEzID0gbmV3IEFycmF5QnVmZmVyKDQpOwogICAgICAgICAgdmFyIGIgPSBuZXcgVWludDhBcnJheShhMyk7CiAgICAgICAgICB2YXIgYyA9IG5ldyBVaW50MzJBcnJheShhMyk7CiAgICAgICAgICBjWzBdID0gMTsKICAgICAgICAgIHJldHVybiBiWzBdID09PSAxOwogICAgICAgIH0oKTsKICAgICAgICB2YXIgTGVyYzIgPSB7CiAgICAgICAgICAvKioqKioqKioqKioqd3JhcHBlcioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEEgd3JhcHBlciBmb3IgZGVjb2RpbmcgYm90aCBMRVJDMSBhbmQgTEVSQzIgYnl0ZSBzdHJlYW1zIGNhcGFibGUgb2YgaGFuZGxpbmcgbXVsdGliYW5kIHBpeGVsIGJsb2NrcyBmb3IgdmFyaW91cyBwaXhlbCB0eXBlcy4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBAYWxpYXMgbW9kdWxlOkxlcmMKICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGlucHV0IFRoZSBMRVJDIGlucHV0IGJ5dGUgc3RyZWFtCiAgICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIFRoZSBkZWNvZGluZyBvcHRpb25zIGJlbG93IGFyZSBvcHRpb25hbC4KICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5pbnB1dE9mZnNldF0gVGhlIG51bWJlciBvZiBieXRlcyB0byBza2lwIGluIHRoZSBpbnB1dCBieXRlIHN0cmVhbS4gQSB2YWxpZCBMZXJjIGZpbGUgaXMgZXhwZWN0ZWQgYXQgdGhhdCBwb3NpdGlvbi4KICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5waXhlbFR5cGVdIChMRVJDMSBvbmx5KSBEZWZhdWx0IHZhbHVlIGlzIEYzMi4gVmFsaWQgcGl4ZWwgdHlwZXMgZm9yIGlucHV0IGFyZSBVOC9TOC9TMTYvVTE2L1MzMi9VMzIvRjMyLgogICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm5vRGF0YVZhbHVlXSAoTEVSQzEgb25seSkuIEl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgcmV0dXJuZWQgbWFzayBpbnN0ZWFkIG9mIHNldHRpbmcgdGhpcyB2YWx1ZS4KICAgICAgICAgICAqIEByZXR1cm5zIHt7d2lkdGgsIGhlaWdodCwgcGl4ZWxzLCBwaXhlbFR5cGUsIG1hc2ssIHN0YXRpc3RpY3N9fQogICAgICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gd2lkdGggV2lkdGggb2YgZGVjb2RlZCBpbWFnZS4KICAgICAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGhlaWdodCBIZWlnaHQgb2YgZGVjb2RlZCBpbWFnZS4KICAgICAgICAgICAgICogQHByb3BlcnR5IHthcnJheX0gcGl4ZWxzIFtiYW5kMSwgYmFuZDIsIOKApl0gRWFjaCBiYW5kIGlzIGEgdHlwZWQgYXJyYXkgb2Ygd2lkdGgqaGVpZ2h0LgogICAgICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gcGl4ZWxUeXBlIFRoZSB0eXBlIG9mIHBpeGVscyByZXByZXNlbnRlZCBpbiB0aGUgb3V0cHV0LgogICAgICAgICAgICAgKiBAcHJvcGVydHkge21hc2t9IG1hc2sgVHlwZWQgYXJyYXkgd2l0aCBhIHNpemUgb2Ygd2lkdGgqaGVpZ2h0LCBvciBudWxsIGlmIGFsbCBwaXhlbHMgYXJlIHZhbGlkLgogICAgICAgICAgICAgKiBAcHJvcGVydHkge2FycmF5fSBzdGF0aXN0aWNzIFtzdGF0aXN0aWNzX2JhbmQxLCBzdGF0aXN0aWNzX2JhbmQyLCDigKZdIEVhY2ggZWxlbWVudCBpcyBhIHN0YXRpc3RpY3Mgb2JqZWN0IHJlcHJlc2VudGluZyBtaW4gYW5kIG1heCB2YWx1ZXMKICAgICAgICAgICoqLwogICAgICAgICAgZGVjb2RlOiBmdW5jdGlvbihlbmNvZGVkRGF0YSwgb3B0aW9ucykgewogICAgICAgICAgICBpZiAoIWlzUGxhdGZvcm1MaXR0bGVFbmRpYW4pIHsKICAgICAgICAgICAgICB0aHJvdyAiQmlnIGVuZGlhbiBzeXN0ZW0gaXMgbm90IHN1cHBvcnRlZC4iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogICAgICAgICAgICB2YXIgaW5wdXRPZmZzZXQgPSBvcHRpb25zLmlucHV0T2Zmc2V0IHx8IDA7CiAgICAgICAgICAgIHZhciBmaWxlSWRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoZW5jb2RlZERhdGEsIGlucHV0T2Zmc2V0LCAxMCk7CiAgICAgICAgICAgIHZhciBmaWxlSWRlbnRpZmllclN0cmluZyA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgZmlsZUlkVmlldyk7CiAgICAgICAgICAgIHZhciBsZXJjLCBtYWpvclZlcnNpb247CiAgICAgICAgICAgIGlmIChmaWxlSWRlbnRpZmllclN0cmluZy50cmltKCkgPT09ICJDbnRaSW1hZ2UiKSB7CiAgICAgICAgICAgICAgbGVyYyA9IExlcmNEZWNvZGU7CiAgICAgICAgICAgICAgbWFqb3JWZXJzaW9uID0gMTsKICAgICAgICAgICAgfSBlbHNlIGlmIChmaWxlSWRlbnRpZmllclN0cmluZy5zdWJzdHJpbmcoMCwgNSkgPT09ICJMZXJjMiIpIHsKICAgICAgICAgICAgICBsZXJjID0gTGVyYzJEZWNvZGU7CiAgICAgICAgICAgICAgbWFqb3JWZXJzaW9uID0gMjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aHJvdyAiVW5leHBlY3RlZCBmaWxlIGlkZW50aWZpZXIgc3RyaW5nOiAiICsgZmlsZUlkZW50aWZpZXJTdHJpbmc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGlQbGFuZSA9IDAsIGVvZiA9IGVuY29kZWREYXRhLmJ5dGVMZW5ndGggLSAxMCwgZW5jb2RlZE1hc2tEYXRhLCBiYW5kTWFza3MgPSBbXSwgYmFuZE1hc2ssIG1hc2tEYXRhOwogICAgICAgICAgICB2YXIgZGVjb2RlZFBpeGVsQmxvY2sgPSB7CiAgICAgICAgICAgICAgd2lkdGg6IDAsCiAgICAgICAgICAgICAgaGVpZ2h0OiAwLAogICAgICAgICAgICAgIHBpeGVsczogW10sCiAgICAgICAgICAgICAgcGl4ZWxUeXBlOiBvcHRpb25zLnBpeGVsVHlwZSwKICAgICAgICAgICAgICBtYXNrOiBudWxsLAogICAgICAgICAgICAgIHN0YXRpc3RpY3M6IFtdCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHdoaWxlIChpbnB1dE9mZnNldCA8IGVvZikgewogICAgICAgICAgICAgIHZhciByZXN1bHQgPSBsZXJjLmRlY29kZShlbmNvZGVkRGF0YSwgewogICAgICAgICAgICAgICAgaW5wdXRPZmZzZXQsCiAgICAgICAgICAgICAgICAvL2ZvciBib3RoIGxlcmMxIGFuZCBsZXJjMgogICAgICAgICAgICAgICAgZW5jb2RlZE1hc2tEYXRhLAogICAgICAgICAgICAgICAgLy9sZXJjMSBvbmx5CiAgICAgICAgICAgICAgICBtYXNrRGF0YSwKICAgICAgICAgICAgICAgIC8vbGVyYzIgb25seQogICAgICAgICAgICAgICAgcmV0dXJuTWFzazogaVBsYW5lID09PSAwID8gdHJ1ZSA6IGZhbHNlLAogICAgICAgICAgICAgICAgLy9sZXJjMSBvbmx5CiAgICAgICAgICAgICAgICByZXR1cm5FbmNvZGVkTWFzazogaVBsYW5lID09PSAwID8gdHJ1ZSA6IGZhbHNlLAogICAgICAgICAgICAgICAgLy9sZXJjMSBvbmx5CiAgICAgICAgICAgICAgICByZXR1cm5GaWxlSW5mbzogdHJ1ZSwKICAgICAgICAgICAgICAgIC8vZm9yIGJvdGggbGVyYzEgYW5kIGxlcmMyCiAgICAgICAgICAgICAgICBwaXhlbFR5cGU6IG9wdGlvbnMucGl4ZWxUeXBlIHx8IG51bGwsCiAgICAgICAgICAgICAgICAvL2xlcmMxIG9ubHkKICAgICAgICAgICAgICAgIG5vRGF0YVZhbHVlOiBvcHRpb25zLm5vRGF0YVZhbHVlIHx8IG51bGwKICAgICAgICAgICAgICAgIC8vbGVyYzEgb25seQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGlucHV0T2Zmc2V0ID0gcmVzdWx0LmZpbGVJbmZvLmVvZk9mZnNldDsKICAgICAgICAgICAgICBpZiAoaVBsYW5lID09PSAwKSB7CiAgICAgICAgICAgICAgICBlbmNvZGVkTWFza0RhdGEgPSByZXN1bHQuZW5jb2RlZE1hc2tEYXRhOwogICAgICAgICAgICAgICAgbWFza0RhdGEgPSByZXN1bHQubWFza0RhdGE7CiAgICAgICAgICAgICAgICBkZWNvZGVkUGl4ZWxCbG9jay53aWR0aCA9IHJlc3VsdC53aWR0aDsKICAgICAgICAgICAgICAgIGRlY29kZWRQaXhlbEJsb2NrLmhlaWdodCA9IHJlc3VsdC5oZWlnaHQ7CiAgICAgICAgICAgICAgICBkZWNvZGVkUGl4ZWxCbG9jay5kaW1Db3VudCA9IHJlc3VsdC5kaW1Db3VudCB8fCAxOwogICAgICAgICAgICAgICAgZGVjb2RlZFBpeGVsQmxvY2sucGl4ZWxUeXBlID0gcmVzdWx0LnBpeGVsVHlwZSB8fCByZXN1bHQuZmlsZUluZm8ucGl4ZWxUeXBlOwogICAgICAgICAgICAgICAgZGVjb2RlZFBpeGVsQmxvY2subWFzayA9IHJlc3VsdC5tYXNrRGF0YTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKG1ham9yVmVyc2lvbiA+IDEgJiYgcmVzdWx0LmZpbGVJbmZvLm1hc2sgJiYgcmVzdWx0LmZpbGVJbmZvLm1hc2subnVtQnl0ZXMgPiAwKSB7CiAgICAgICAgICAgICAgICBiYW5kTWFza3MucHVzaChyZXN1bHQubWFza0RhdGEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpUGxhbmUrKzsKICAgICAgICAgICAgICBkZWNvZGVkUGl4ZWxCbG9jay5waXhlbHMucHVzaChyZXN1bHQucGl4ZWxEYXRhKTsKICAgICAgICAgICAgICBkZWNvZGVkUGl4ZWxCbG9jay5zdGF0aXN0aWNzLnB1c2goewogICAgICAgICAgICAgICAgbWluVmFsdWU6IHJlc3VsdC5taW5WYWx1ZSwKICAgICAgICAgICAgICAgIG1heFZhbHVlOiByZXN1bHQubWF4VmFsdWUsCiAgICAgICAgICAgICAgICBub0RhdGFWYWx1ZTogcmVzdWx0Lm5vRGF0YVZhbHVlLAogICAgICAgICAgICAgICAgZGltU3RhdHM6IHJlc3VsdC5kaW1TdGF0cwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBpLCBqLCBudW1QaXhlbHM7CiAgICAgICAgICAgIGlmIChtYWpvclZlcnNpb24gPiAxICYmIGJhbmRNYXNrcy5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgbnVtUGl4ZWxzID0gZGVjb2RlZFBpeGVsQmxvY2sud2lkdGggKiBkZWNvZGVkUGl4ZWxCbG9jay5oZWlnaHQ7CiAgICAgICAgICAgICAgZGVjb2RlZFBpeGVsQmxvY2suYmFuZE1hc2tzID0gYmFuZE1hc2tzOwogICAgICAgICAgICAgIG1hc2tEYXRhID0gbmV3IFVpbnQ4QXJyYXkobnVtUGl4ZWxzKTsKICAgICAgICAgICAgICBtYXNrRGF0YS5zZXQoYmFuZE1hc2tzWzBdKTsKICAgICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYmFuZE1hc2tzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBiYW5kTWFzayA9IGJhbmRNYXNrc1tpXTsKICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBudW1QaXhlbHM7IGorKykgewogICAgICAgICAgICAgICAgICBtYXNrRGF0YVtqXSA9IG1hc2tEYXRhW2pdICYgYmFuZE1hc2tbal07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGRlY29kZWRQaXhlbEJsb2NrLm1hc2tEYXRhID0gbWFza0RhdGE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGRlY29kZWRQaXhlbEJsb2NrOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewogICAgICAgICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIExlcmMyOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAidW5kZWZpbmVkIiAmJiBtb2R1bGUuZXhwb3J0cykgewogICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBMZXJjMjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5MZXJjID0gTGVyYzI7CiAgICAgICAgfQogICAgICB9KSgpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlVmVydGljZXNGcm9tSGVpZ2h0bWFwLmpzCiAgdmFyIGNyZWF0ZVZlcnRpY2VzRnJvbUhlaWdodG1hcF9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlVmVydGljZXNGcm9tSGVpZ2h0bWFwX2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVZlcnRpY2VzRnJvbUhlaWdodG1hcF9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY3JlYXRlVmVydGljZXNGcm9tSGVpZ2h0bWFwKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIGlmIChwYXJhbWV0ZXJzLmVuY29kaW5nID09PSBIZWlnaHRtYXBFbmNvZGluZ19kZWZhdWx0LkxFUkMpIHsKICAgICAgbGV0IHJlc3VsdDsKICAgICAgdHJ5IHsKICAgICAgICByZXN1bHQgPSBpbXBvcnRfbGVyYy5kZWZhdWx0LmRlY29kZShwYXJhbWV0ZXJzLmhlaWdodG1hcCk7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KGVycm9yKTsKICAgICAgfQogICAgICBjb25zdCBsZXJjU3RhdGlzdGljcyA9IHJlc3VsdC5zdGF0aXN0aWNzWzBdOwogICAgICBpZiAobGVyY1N0YXRpc3RpY3MubWluVmFsdWUgPT09IE51bWJlci5NQVhfVkFMVUUpIHsKICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoIkludmFsaWQgdGlsZSBkYXRhIik7CiAgICAgIH0KICAgICAgcGFyYW1ldGVycy5oZWlnaHRtYXAgPSByZXN1bHQucGl4ZWxzWzBdOwogICAgICBwYXJhbWV0ZXJzLndpZHRoID0gcmVzdWx0LndpZHRoOwogICAgICBwYXJhbWV0ZXJzLmhlaWdodCA9IHJlc3VsdC5oZWlnaHQ7CiAgICB9CiAgICBwYXJhbWV0ZXJzLmVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKHBhcmFtZXRlcnMuZWxsaXBzb2lkKTsKICAgIHBhcmFtZXRlcnMucmVjdGFuZ2xlID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2xvbmUocGFyYW1ldGVycy5yZWN0YW5nbGUpOwogICAgY29uc3Qgc3RhdGlzdGljczIgPSBIZWlnaHRtYXBUZXNzZWxsYXRvcl9kZWZhdWx0LmNvbXB1dGVWZXJ0aWNlcyhwYXJhbWV0ZXJzKTsKICAgIGNvbnN0IHZlcnRpY2VzID0gc3RhdGlzdGljczIudmVydGljZXM7CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2godmVydGljZXMuYnVmZmVyKTsKICAgIHJldHVybiB7CiAgICAgIHZlcnRpY2VzOiB2ZXJ0aWNlcy5idWZmZXIsCiAgICAgIG51bWJlck9mQXR0cmlidXRlczogc3RhdGlzdGljczIuZW5jb2Rpbmcuc3RyaWRlLAogICAgICBtaW5pbXVtSGVpZ2h0OiBzdGF0aXN0aWNzMi5taW5pbXVtSGVpZ2h0LAogICAgICBtYXhpbXVtSGVpZ2h0OiBzdGF0aXN0aWNzMi5tYXhpbXVtSGVpZ2h0LAogICAgICBncmlkV2lkdGg6IHBhcmFtZXRlcnMud2lkdGgsCiAgICAgIGdyaWRIZWlnaHQ6IHBhcmFtZXRlcnMuaGVpZ2h0LAogICAgICBib3VuZGluZ1NwaGVyZTNEOiBzdGF0aXN0aWNzMi5ib3VuZGluZ1NwaGVyZTNELAogICAgICBvcmllbnRlZEJvdW5kaW5nQm94OiBzdGF0aXN0aWNzMi5vcmllbnRlZEJvdW5kaW5nQm94LAogICAgICBvY2NsdWRlZVBvaW50SW5TY2FsZWRTcGFjZTogc3RhdGlzdGljczIub2NjbHVkZWVQb2ludEluU2NhbGVkU3BhY2UsCiAgICAgIGVuY29kaW5nOiBzdGF0aXN0aWNzMi5lbmNvZGluZywKICAgICAgd2VzdEluZGljZXNTb3V0aFRvTm9ydGg6IHN0YXRpc3RpY3MyLndlc3RJbmRpY2VzU291dGhUb05vcnRoLAogICAgICBzb3V0aEluZGljZXNFYXN0VG9XZXN0OiBzdGF0aXN0aWNzMi5zb3V0aEluZGljZXNFYXN0VG9XZXN0LAogICAgICBlYXN0SW5kaWNlc05vcnRoVG9Tb3V0aDogc3RhdGlzdGljczIuZWFzdEluZGljZXNOb3J0aFRvU291dGgsCiAgICAgIG5vcnRoSW5kaWNlc1dlc3RUb0Vhc3Q6IHN0YXRpc3RpY3MyLm5vcnRoSW5kaWNlc1dlc3RUb0Vhc3QKICAgIH07CiAgfQogIHZhciBpbXBvcnRfbGVyYywgY3JlYXRlVmVydGljZXNGcm9tSGVpZ2h0bWFwX2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlVmVydGljZXNGcm9tSGVpZ2h0bWFwID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVWZXJ0aWNlc0Zyb21IZWlnaHRtYXAuanMiKCkgewogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0hlaWdodG1hcEVuY29kaW5nKCk7CiAgICAgIGluaXRfSGVpZ2h0bWFwVGVzc2VsbGF0b3IoKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgaW5pdF9SdW50aW1lRXJyb3IoKTsKICAgICAgaW1wb3J0X2xlcmMgPSBfX3RvRVNNKHJlcXVpcmVfTGVyY0RlY29kZSgpLCAxKTsKICAgICAgaW5pdF9jcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyKCk7CiAgICAgIGNyZWF0ZVZlcnRpY2VzRnJvbUhlaWdodG1hcF9kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0KGNyZWF0ZVZlcnRpY2VzRnJvbUhlaWdodG1hcCk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9UZXJyYWluUHJvdmlkZXIuanMKICBmdW5jdGlvbiBUZXJyYWluUHJvdmlkZXIoKSB7CiAgICBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0LnRocm93SW5zdGFudGlhdGlvbkVycm9yKCk7CiAgfQogIGZ1bmN0aW9uIGdldEVkZ2VJbmRpY2VzKHdpZHRoLCBoZWlnaHQpIHsKICAgIGNvbnN0IHdlc3RJbmRpY2VzU291dGhUb05vcnRoID0gbmV3IEFycmF5KGhlaWdodCk7CiAgICBjb25zdCBzb3V0aEluZGljZXNFYXN0VG9XZXN0ID0gbmV3IEFycmF5KHdpZHRoKTsKICAgIGNvbnN0IGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoID0gbmV3IEFycmF5KGhlaWdodCk7CiAgICBjb25zdCBub3J0aEluZGljZXNXZXN0VG9FYXN0ID0gbmV3IEFycmF5KHdpZHRoKTsKICAgIGxldCBpOwogICAgZm9yIChpID0gMDsgaSA8IHdpZHRoOyArK2kpIHsKICAgICAgbm9ydGhJbmRpY2VzV2VzdFRvRWFzdFtpXSA9IGk7CiAgICAgIHNvdXRoSW5kaWNlc0Vhc3RUb1dlc3RbaV0gPSB3aWR0aCAqIGhlaWdodCAtIDEgLSBpOwogICAgfQogICAgZm9yIChpID0gMDsgaSA8IGhlaWdodDsgKytpKSB7CiAgICAgIGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoW2ldID0gKGkgKyAxKSAqIHdpZHRoIC0gMTsKICAgICAgd2VzdEluZGljZXNTb3V0aFRvTm9ydGhbaV0gPSAoaGVpZ2h0IC0gaSAtIDEpICogd2lkdGg7CiAgICB9CiAgICByZXR1cm4gewogICAgICB3ZXN0SW5kaWNlc1NvdXRoVG9Ob3J0aCwKICAgICAgc291dGhJbmRpY2VzRWFzdFRvV2VzdCwKICAgICAgZWFzdEluZGljZXNOb3J0aFRvU291dGgsCiAgICAgIG5vcnRoSW5kaWNlc1dlc3RUb0Vhc3QKICAgIH07CiAgfQogIGZ1bmN0aW9uIGFkZFJlZ3VsYXJHcmlkSW5kaWNlcyh3aWR0aCwgaGVpZ2h0LCBpbmRpY2VzLCBvZmZzZXQpIHsKICAgIGxldCBpbmRleCA9IDA7CiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGhlaWdodCAtIDE7ICsraikgewogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdpZHRoIC0gMTsgKytpKSB7CiAgICAgICAgY29uc3QgdXBwZXJMZWZ0ID0gaW5kZXg7CiAgICAgICAgY29uc3QgbG93ZXJMZWZ0ID0gdXBwZXJMZWZ0ICsgd2lkdGg7CiAgICAgICAgY29uc3QgbG93ZXJSaWdodCA9IGxvd2VyTGVmdCArIDE7CiAgICAgICAgY29uc3QgdXBwZXJSaWdodCA9IHVwcGVyTGVmdCArIDE7CiAgICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSB1cHBlckxlZnQ7CiAgICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSBsb3dlckxlZnQ7CiAgICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSB1cHBlclJpZ2h0OwogICAgICAgIGluZGljZXNbb2Zmc2V0KytdID0gdXBwZXJSaWdodDsKICAgICAgICBpbmRpY2VzW29mZnNldCsrXSA9IGxvd2VyTGVmdDsKICAgICAgICBpbmRpY2VzW29mZnNldCsrXSA9IGxvd2VyUmlnaHQ7CiAgICAgICAgKytpbmRleDsKICAgICAgfQogICAgICArK2luZGV4OwogICAgfQogIH0KICBmdW5jdGlvbiBhZGRTa2lydEluZGljZXMoZWRnZUluZGljZXMsIHZlcnRleEluZGV4LCBpbmRpY2VzLCBvZmZzZXQpIHsKICAgIGxldCBwcmV2aW91c0luZGV4ID0gZWRnZUluZGljZXNbMF07CiAgICBjb25zdCBsZW5ndGggPSBlZGdlSW5kaWNlcy5sZW5ndGg7CiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgIGNvbnN0IGluZGV4ID0gZWRnZUluZGljZXNbaV07CiAgICAgIGluZGljZXNbb2Zmc2V0KytdID0gcHJldmlvdXNJbmRleDsKICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSBpbmRleDsKICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSB2ZXJ0ZXhJbmRleDsKICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSB2ZXJ0ZXhJbmRleDsKICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSBpbmRleDsKICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSB2ZXJ0ZXhJbmRleCArIDE7CiAgICAgIHByZXZpb3VzSW5kZXggPSBpbmRleDsKICAgICAgKyt2ZXJ0ZXhJbmRleDsKICAgIH0KICAgIHJldHVybiBvZmZzZXQ7CiAgfQogIHZhciByZWd1bGFyR3JpZEluZGljZXNDYWNoZSwgcmVndWxhckdyaWRBbmRFZGdlSW5kaWNlc0NhY2hlLCByZWd1bGFyR3JpZEFuZFNraXJ0QW5kRWRnZUluZGljZXNDYWNoZSwgVGVycmFpblByb3ZpZGVyX2RlZmF1bHQ7CiAgdmFyIGluaXRfVGVycmFpblByb3ZpZGVyID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9UZXJyYWluUHJvdmlkZXIuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFRlcnJhaW5Qcm92aWRlci5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIGFuIGV2ZW50IHRoYXQgaXMgcmFpc2VkIHdoZW4gdGhlIHRlcnJhaW4gcHJvdmlkZXIgZW5jb3VudGVycyBhbiBhc3luY2hyb25vdXMgZXJyb3IuICBCeSBzdWJzY3JpYmluZwogICAgICAgICAqIHRvIHRoZSBldmVudCwgeW91IHdpbGwgYmUgbm90aWZpZWQgb2YgdGhlIGVycm9yIGFuZCBjYW4gcG90ZW50aWFsbHkgcmVjb3ZlciBmcm9tIGl0LiAgRXZlbnQgbGlzdGVuZXJzCiAgICAgICAgICogYXJlIHBhc3NlZCBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgVGlsZVByb3ZpZGVyRXJyb3J9LgogICAgICAgICAqIEBtZW1iZXJvZiBUZXJyYWluUHJvdmlkZXIucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge0V2ZW50PFRlcnJhaW5Qcm92aWRlci5FcnJvckV2ZW50Pn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBlcnJvckV2ZW50OiB7CiAgICAgICAgICBnZXQ6IERldmVsb3BlckVycm9yX2RlZmF1bHQudGhyb3dJbnN0YW50aWF0aW9uRXJyb3IKICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIGNyZWRpdCB0byBkaXNwbGF5IHdoZW4gdGhpcyB0ZXJyYWluIHByb3ZpZGVyIGlzIGFjdGl2ZS4gIFR5cGljYWxseSB0aGlzIGlzIHVzZWQgdG8gY3JlZGl0CiAgICAgICAgICogdGhlIHNvdXJjZSBvZiB0aGUgdGVycmFpbi4KICAgICAgICAgKiBAbWVtYmVyb2YgVGVycmFpblByb3ZpZGVyLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtDcmVkaXR9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgY3JlZGl0OiB7CiAgICAgICAgICBnZXQ6IERldmVsb3BlckVycm9yX2RlZmF1bHQudGhyb3dJbnN0YW50aWF0aW9uRXJyb3IKICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIHRpbGluZyBzY2hlbWUgdXNlZCBieSB0aGUgcHJvdmlkZXIuCiAgICAgICAgICogQG1lbWJlcm9mIFRlcnJhaW5Qcm92aWRlci5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7VGlsaW5nU2NoZW1lfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIHRpbGluZ1NjaGVtZTogewogICAgICAgICAgZ2V0OiBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0LnRocm93SW5zdGFudGlhdGlvbkVycm9yCiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCB0aGUgcHJvdmlkZXIgaW5jbHVkZXMgYSB3YXRlciBtYXNrLiAgVGhlIHdhdGVyIG1hc2sKICAgICAgICAgKiBpbmRpY2F0ZXMgd2hpY2ggYXJlYXMgb2YgdGhlIGdsb2JlIGFyZSB3YXRlciByYXRoZXIgdGhhbiBsYW5kLCBzbyB0aGV5IGNhbiBiZSByZW5kZXJlZAogICAgICAgICAqIGFzIGEgcmVmbGVjdGl2ZSBzdXJmYWNlIHdpdGggYW5pbWF0ZWQgd2F2ZXMuCiAgICAgICAgICogQG1lbWJlcm9mIFRlcnJhaW5Qcm92aWRlci5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBoYXNXYXRlck1hc2s6IHsKICAgICAgICAgIGdldDogRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdC50aHJvd0luc3RhbnRpYXRpb25FcnJvcgogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciBvciBub3QgdGhlIHJlcXVlc3RlZCB0aWxlcyBpbmNsdWRlIHZlcnRleCBub3JtYWxzLgogICAgICAgICAqIEBtZW1iZXJvZiBUZXJyYWluUHJvdmlkZXIucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgaGFzVmVydGV4Tm9ybWFsczogewogICAgICAgICAgZ2V0OiBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0LnRocm93SW5zdGFudGlhdGlvbkVycm9yCiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIGRldGVybWluZSBhdmFpbGFiaWxpdHkgb2YgdGVycmFpbiBmcm9tIHRoaXMgcHJvdmlkZXIsIHN1Y2ggYXMKICAgICAgICAgKiBhdCBwb2ludHMgYW5kIGluIHJlY3RhbmdsZXMuIFRoaXMgcHJvcGVydHkgbWF5IGJlIHVuZGVmaW5lZCBpZiBhdmFpbGFiaWxpdHkKICAgICAgICAgKiBpbmZvcm1hdGlvbiBpcyBub3QgYXZhaWxhYmxlLgogICAgICAgICAqIEBtZW1iZXJvZiBUZXJyYWluUHJvdmlkZXIucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge1RpbGVBdmFpbGFiaWxpdHl9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgYXZhaWxhYmlsaXR5OiB7CiAgICAgICAgICBnZXQ6IERldmVsb3BlckVycm9yX2RlZmF1bHQudGhyb3dJbnN0YW50aWF0aW9uRXJyb3IKICAgICAgICB9CiAgICAgIH0pOwogICAgICByZWd1bGFyR3JpZEluZGljZXNDYWNoZSA9IFtdOwogICAgICBUZXJyYWluUHJvdmlkZXIuZ2V0UmVndWxhckdyaWRJbmRpY2VzID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCkgewogICAgICAgIGlmICh3aWR0aCAqIGhlaWdodCA+PSBNYXRoX2RlZmF1bHQuRk9VUl9HSUdBQllURVMpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiVGhlIHRvdGFsIG51bWJlciBvZiB2ZXJ0aWNlcyAod2lkdGggKiBoZWlnaHQpIG11c3QgYmUgbGVzcyB0aGFuIDQsMjk0LDk2NywyOTYuIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgbGV0IGJ5V2lkdGggPSByZWd1bGFyR3JpZEluZGljZXNDYWNoZVt3aWR0aF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYnlXaWR0aCkpIHsKICAgICAgICAgIHJlZ3VsYXJHcmlkSW5kaWNlc0NhY2hlW3dpZHRoXSA9IGJ5V2lkdGggPSBbXTsKICAgICAgICB9CiAgICAgICAgbGV0IGluZGljZXMgPSBieVdpZHRoW2hlaWdodF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaW5kaWNlcykpIHsKICAgICAgICAgIGlmICh3aWR0aCAqIGhlaWdodCA8IE1hdGhfZGVmYXVsdC5TSVhUWV9GT1VSX0tJTE9CWVRFUykgewogICAgICAgICAgICBpbmRpY2VzID0gYnlXaWR0aFtoZWlnaHRdID0gbmV3IFVpbnQxNkFycmF5KAogICAgICAgICAgICAgICh3aWR0aCAtIDEpICogKGhlaWdodCAtIDEpICogNgogICAgICAgICAgICApOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaW5kaWNlcyA9IGJ5V2lkdGhbaGVpZ2h0XSA9IG5ldyBVaW50MzJBcnJheSgKICAgICAgICAgICAgICAod2lkdGggLSAxKSAqIChoZWlnaHQgLSAxKSAqIDYKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICAgIGFkZFJlZ3VsYXJHcmlkSW5kaWNlcyh3aWR0aCwgaGVpZ2h0LCBpbmRpY2VzLCAwKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGluZGljZXM7CiAgICAgIH07CiAgICAgIHJlZ3VsYXJHcmlkQW5kRWRnZUluZGljZXNDYWNoZSA9IFtdOwogICAgICBUZXJyYWluUHJvdmlkZXIuZ2V0UmVndWxhckdyaWRJbmRpY2VzQW5kRWRnZUluZGljZXMgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7CiAgICAgICAgaWYgKHdpZHRoICogaGVpZ2h0ID49IE1hdGhfZGVmYXVsdC5GT1VSX0dJR0FCWVRFUykgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJUaGUgdG90YWwgbnVtYmVyIG9mIHZlcnRpY2VzICh3aWR0aCAqIGhlaWdodCkgbXVzdCBiZSBsZXNzIHRoYW4gNCwyOTQsOTY3LDI5Ni4iCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBsZXQgYnlXaWR0aCA9IHJlZ3VsYXJHcmlkQW5kRWRnZUluZGljZXNDYWNoZVt3aWR0aF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYnlXaWR0aCkpIHsKICAgICAgICAgIHJlZ3VsYXJHcmlkQW5kRWRnZUluZGljZXNDYWNoZVt3aWR0aF0gPSBieVdpZHRoID0gW107CiAgICAgICAgfQogICAgICAgIGxldCBpbmRpY2VzQW5kRWRnZXMgPSBieVdpZHRoW2hlaWdodF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaW5kaWNlc0FuZEVkZ2VzKSkgewogICAgICAgICAgY29uc3QgaW5kaWNlcyA9IFRlcnJhaW5Qcm92aWRlci5nZXRSZWd1bGFyR3JpZEluZGljZXMod2lkdGgsIGhlaWdodCk7CiAgICAgICAgICBjb25zdCBlZGdlSW5kaWNlcyA9IGdldEVkZ2VJbmRpY2VzKHdpZHRoLCBoZWlnaHQpOwogICAgICAgICAgY29uc3Qgd2VzdEluZGljZXNTb3V0aFRvTm9ydGggPSBlZGdlSW5kaWNlcy53ZXN0SW5kaWNlc1NvdXRoVG9Ob3J0aDsKICAgICAgICAgIGNvbnN0IHNvdXRoSW5kaWNlc0Vhc3RUb1dlc3QgPSBlZGdlSW5kaWNlcy5zb3V0aEluZGljZXNFYXN0VG9XZXN0OwogICAgICAgICAgY29uc3QgZWFzdEluZGljZXNOb3J0aFRvU291dGggPSBlZGdlSW5kaWNlcy5lYXN0SW5kaWNlc05vcnRoVG9Tb3V0aDsKICAgICAgICAgIGNvbnN0IG5vcnRoSW5kaWNlc1dlc3RUb0Vhc3QgPSBlZGdlSW5kaWNlcy5ub3J0aEluZGljZXNXZXN0VG9FYXN0OwogICAgICAgICAgaW5kaWNlc0FuZEVkZ2VzID0gYnlXaWR0aFtoZWlnaHRdID0gewogICAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgICB3ZXN0SW5kaWNlc1NvdXRoVG9Ob3J0aCwKICAgICAgICAgICAgc291dGhJbmRpY2VzRWFzdFRvV2VzdCwKICAgICAgICAgICAgZWFzdEluZGljZXNOb3J0aFRvU291dGgsCiAgICAgICAgICAgIG5vcnRoSW5kaWNlc1dlc3RUb0Vhc3QKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIHJldHVybiBpbmRpY2VzQW5kRWRnZXM7CiAgICAgIH07CiAgICAgIHJlZ3VsYXJHcmlkQW5kU2tpcnRBbmRFZGdlSW5kaWNlc0NhY2hlID0gW107CiAgICAgIFRlcnJhaW5Qcm92aWRlci5nZXRSZWd1bGFyR3JpZEFuZFNraXJ0SW5kaWNlc0FuZEVkZ2VJbmRpY2VzID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCkgewogICAgICAgIGlmICh3aWR0aCAqIGhlaWdodCA+PSBNYXRoX2RlZmF1bHQuRk9VUl9HSUdBQllURVMpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiVGhlIHRvdGFsIG51bWJlciBvZiB2ZXJ0aWNlcyAod2lkdGggKiBoZWlnaHQpIG11c3QgYmUgbGVzcyB0aGFuIDQsMjk0LDk2NywyOTYuIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgbGV0IGJ5V2lkdGggPSByZWd1bGFyR3JpZEFuZFNraXJ0QW5kRWRnZUluZGljZXNDYWNoZVt3aWR0aF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYnlXaWR0aCkpIHsKICAgICAgICAgIHJlZ3VsYXJHcmlkQW5kU2tpcnRBbmRFZGdlSW5kaWNlc0NhY2hlW3dpZHRoXSA9IGJ5V2lkdGggPSBbXTsKICAgICAgICB9CiAgICAgICAgbGV0IGluZGljZXNBbmRFZGdlcyA9IGJ5V2lkdGhbaGVpZ2h0XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpbmRpY2VzQW5kRWRnZXMpKSB7CiAgICAgICAgICBjb25zdCBncmlkVmVydGV4Q291bnQgPSB3aWR0aCAqIGhlaWdodDsKICAgICAgICAgIGNvbnN0IGdyaWRJbmRleENvdW50ID0gKHdpZHRoIC0gMSkgKiAoaGVpZ2h0IC0gMSkgKiA2OwogICAgICAgICAgY29uc3QgZWRnZVZlcnRleENvdW50ID0gd2lkdGggKiAyICsgaGVpZ2h0ICogMjsKICAgICAgICAgIGNvbnN0IGVkZ2VJbmRleENvdW50ID0gTWF0aC5tYXgoMCwgZWRnZVZlcnRleENvdW50IC0gNCkgKiA2OwogICAgICAgICAgY29uc3QgdmVydGV4Q291bnQgPSBncmlkVmVydGV4Q291bnQgKyBlZGdlVmVydGV4Q291bnQ7CiAgICAgICAgICBjb25zdCBpbmRleENvdW50ID0gZ3JpZEluZGV4Q291bnQgKyBlZGdlSW5kZXhDb3VudDsKICAgICAgICAgIGNvbnN0IGVkZ2VJbmRpY2VzID0gZ2V0RWRnZUluZGljZXMod2lkdGgsIGhlaWdodCk7CiAgICAgICAgICBjb25zdCB3ZXN0SW5kaWNlc1NvdXRoVG9Ob3J0aCA9IGVkZ2VJbmRpY2VzLndlc3RJbmRpY2VzU291dGhUb05vcnRoOwogICAgICAgICAgY29uc3Qgc291dGhJbmRpY2VzRWFzdFRvV2VzdCA9IGVkZ2VJbmRpY2VzLnNvdXRoSW5kaWNlc0Vhc3RUb1dlc3Q7CiAgICAgICAgICBjb25zdCBlYXN0SW5kaWNlc05vcnRoVG9Tb3V0aCA9IGVkZ2VJbmRpY2VzLmVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoOwogICAgICAgICAgY29uc3Qgbm9ydGhJbmRpY2VzV2VzdFRvRWFzdCA9IGVkZ2VJbmRpY2VzLm5vcnRoSW5kaWNlc1dlc3RUb0Vhc3Q7CiAgICAgICAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkodmVydGV4Q291bnQsIGluZGV4Q291bnQpOwogICAgICAgICAgYWRkUmVndWxhckdyaWRJbmRpY2VzKHdpZHRoLCBoZWlnaHQsIGluZGljZXMsIDApOwogICAgICAgICAgVGVycmFpblByb3ZpZGVyLmFkZFNraXJ0SW5kaWNlcygKICAgICAgICAgICAgd2VzdEluZGljZXNTb3V0aFRvTm9ydGgsCiAgICAgICAgICAgIHNvdXRoSW5kaWNlc0Vhc3RUb1dlc3QsCiAgICAgICAgICAgIGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoLAogICAgICAgICAgICBub3J0aEluZGljZXNXZXN0VG9FYXN0LAogICAgICAgICAgICBncmlkVmVydGV4Q291bnQsCiAgICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICAgIGdyaWRJbmRleENvdW50CiAgICAgICAgICApOwogICAgICAgICAgaW5kaWNlc0FuZEVkZ2VzID0gYnlXaWR0aFtoZWlnaHRdID0gewogICAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgICB3ZXN0SW5kaWNlc1NvdXRoVG9Ob3J0aCwKICAgICAgICAgICAgc291dGhJbmRpY2VzRWFzdFRvV2VzdCwKICAgICAgICAgICAgZWFzdEluZGljZXNOb3J0aFRvU291dGgsCiAgICAgICAgICAgIG5vcnRoSW5kaWNlc1dlc3RUb0Vhc3QsCiAgICAgICAgICAgIGluZGV4Q291bnRXaXRob3V0U2tpcnRzOiBncmlkSW5kZXhDb3VudAogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGluZGljZXNBbmRFZGdlczsKICAgICAgfTsKICAgICAgVGVycmFpblByb3ZpZGVyLmFkZFNraXJ0SW5kaWNlcyA9IGZ1bmN0aW9uKHdlc3RJbmRpY2VzU291dGhUb05vcnRoLCBzb3V0aEluZGljZXNFYXN0VG9XZXN0LCBlYXN0SW5kaWNlc05vcnRoVG9Tb3V0aCwgbm9ydGhJbmRpY2VzV2VzdFRvRWFzdCwgdmVydGV4Q291bnQsIGluZGljZXMsIG9mZnNldCkgewogICAgICAgIGxldCB2ZXJ0ZXhJbmRleCA9IHZlcnRleENvdW50OwogICAgICAgIG9mZnNldCA9IGFkZFNraXJ0SW5kaWNlcygKICAgICAgICAgIHdlc3RJbmRpY2VzU291dGhUb05vcnRoLAogICAgICAgICAgdmVydGV4SW5kZXgsCiAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgb2Zmc2V0CiAgICAgICAgKTsKICAgICAgICB2ZXJ0ZXhJbmRleCArPSB3ZXN0SW5kaWNlc1NvdXRoVG9Ob3J0aC5sZW5ndGg7CiAgICAgICAgb2Zmc2V0ID0gYWRkU2tpcnRJbmRpY2VzKAogICAgICAgICAgc291dGhJbmRpY2VzRWFzdFRvV2VzdCwKICAgICAgICAgIHZlcnRleEluZGV4LAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIG9mZnNldAogICAgICAgICk7CiAgICAgICAgdmVydGV4SW5kZXggKz0gc291dGhJbmRpY2VzRWFzdFRvV2VzdC5sZW5ndGg7CiAgICAgICAgb2Zmc2V0ID0gYWRkU2tpcnRJbmRpY2VzKAogICAgICAgICAgZWFzdEluZGljZXNOb3J0aFRvU291dGgsCiAgICAgICAgICB2ZXJ0ZXhJbmRleCwKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBvZmZzZXQKICAgICAgICApOwogICAgICAgIHZlcnRleEluZGV4ICs9IGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoLmxlbmd0aDsKICAgICAgICBhZGRTa2lydEluZGljZXMobm9ydGhJbmRpY2VzV2VzdFRvRWFzdCwgdmVydGV4SW5kZXgsIGluZGljZXMsIG9mZnNldCk7CiAgICAgIH07CiAgICAgIFRlcnJhaW5Qcm92aWRlci5oZWlnaHRtYXBUZXJyYWluUXVhbGl0eSA9IDAuMjU7CiAgICAgIFRlcnJhaW5Qcm92aWRlci5nZXRFc3RpbWF0ZWRMZXZlbFplcm9HZW9tZXRyaWNFcnJvckZvckFIZWlnaHRtYXAgPSBmdW5jdGlvbihlbGxpcHNvaWQsIHRpbGVJbWFnZVdpZHRoLCBudW1iZXJPZlRpbGVzQXRMZXZlbFplcm8pIHsKICAgICAgICByZXR1cm4gZWxsaXBzb2lkLm1heGltdW1SYWRpdXMgKiAyICogTWF0aC5QSSAqIFRlcnJhaW5Qcm92aWRlci5oZWlnaHRtYXBUZXJyYWluUXVhbGl0eSAvICh0aWxlSW1hZ2VXaWR0aCAqIG51bWJlck9mVGlsZXNBdExldmVsWmVybyk7CiAgICAgIH07CiAgICAgIFRlcnJhaW5Qcm92aWRlci5wcm90b3R5cGUucmVxdWVzdFRpbGVHZW9tZXRyeSA9IERldmVsb3BlckVycm9yX2RlZmF1bHQudGhyb3dJbnN0YW50aWF0aW9uRXJyb3I7CiAgICAgIFRlcnJhaW5Qcm92aWRlci5wcm90b3R5cGUuZ2V0TGV2ZWxNYXhpbXVtR2VvbWV0cmljRXJyb3IgPSBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0LnRocm93SW5zdGFudGlhdGlvbkVycm9yOwogICAgICBUZXJyYWluUHJvdmlkZXIucHJvdG90eXBlLmdldFRpbGVEYXRhQXZhaWxhYmxlID0gRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdC50aHJvd0luc3RhbnRpYXRpb25FcnJvcjsKICAgICAgVGVycmFpblByb3ZpZGVyLnByb3RvdHlwZS5sb2FkVGlsZURhdGFBdmFpbGFiaWxpdHkgPSBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0LnRocm93SW5zdGFudGlhdGlvbkVycm9yOwogICAgICBUZXJyYWluUHJvdmlkZXJfZGVmYXVsdCA9IFRlcnJhaW5Qcm92aWRlcjsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVZlcnRpY2VzRnJvbVF1YW50aXplZFRlcnJhaW5NZXNoLmpzCiAgdmFyIGNyZWF0ZVZlcnRpY2VzRnJvbVF1YW50aXplZFRlcnJhaW5NZXNoX2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVWZXJ0aWNlc0Zyb21RdWFudGl6ZWRUZXJyYWluTWVzaF9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVWZXJ0aWNlc0Zyb21RdWFudGl6ZWRUZXJyYWluTWVzaF9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY3JlYXRlVmVydGljZXNGcm9tUXVhbnRpemVkVGVycmFpbk1lc2gocGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cykgewogICAgY29uc3QgcXVhbnRpemVkVmVydGljZXMgPSBwYXJhbWV0ZXJzLnF1YW50aXplZFZlcnRpY2VzOwogICAgY29uc3QgcXVhbnRpemVkVmVydGV4Q291bnQgPSBxdWFudGl6ZWRWZXJ0aWNlcy5sZW5ndGggLyAzOwogICAgY29uc3Qgb2N0RW5jb2RlZE5vcm1hbHMgPSBwYXJhbWV0ZXJzLm9jdEVuY29kZWROb3JtYWxzOwogICAgY29uc3QgZWRnZVZlcnRleENvdW50ID0gcGFyYW1ldGVycy53ZXN0SW5kaWNlcy5sZW5ndGggKyBwYXJhbWV0ZXJzLmVhc3RJbmRpY2VzLmxlbmd0aCArIHBhcmFtZXRlcnMuc291dGhJbmRpY2VzLmxlbmd0aCArIHBhcmFtZXRlcnMubm9ydGhJbmRpY2VzLmxlbmd0aDsKICAgIGNvbnN0IGluY2x1ZGVXZWJNZXJjYXRvclQgPSBwYXJhbWV0ZXJzLmluY2x1ZGVXZWJNZXJjYXRvclQ7CiAgICBjb25zdCBleGFnZ2VyYXRpb24gPSBwYXJhbWV0ZXJzLmV4YWdnZXJhdGlvbjsKICAgIGNvbnN0IGV4YWdnZXJhdGlvblJlbGF0aXZlSGVpZ2h0ID0gcGFyYW1ldGVycy5leGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodDsKICAgIGNvbnN0IGhhc0V4YWdnZXJhdGlvbiA9IGV4YWdnZXJhdGlvbiAhPT0gMTsKICAgIGNvbnN0IGluY2x1ZGVHZW9kZXRpY1N1cmZhY2VOb3JtYWxzID0gaGFzRXhhZ2dlcmF0aW9uOwogICAgY29uc3QgcmVjdGFuZ2xlID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2xvbmUocGFyYW1ldGVycy5yZWN0YW5nbGUpOwogICAgY29uc3Qgd2VzdCA9IHJlY3RhbmdsZS53ZXN0OwogICAgY29uc3Qgc291dGggPSByZWN0YW5nbGUuc291dGg7CiAgICBjb25zdCBlYXN0ID0gcmVjdGFuZ2xlLmVhc3Q7CiAgICBjb25zdCBub3J0aCA9IHJlY3RhbmdsZS5ub3J0aDsKICAgIGNvbnN0IGVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKHBhcmFtZXRlcnMuZWxsaXBzb2lkKTsKICAgIGNvbnN0IG1pbmltdW1IZWlnaHQgPSBwYXJhbWV0ZXJzLm1pbmltdW1IZWlnaHQ7CiAgICBjb25zdCBtYXhpbXVtSGVpZ2h0ID0gcGFyYW1ldGVycy5tYXhpbXVtSGVpZ2h0OwogICAgY29uc3QgY2VudGVyID0gcGFyYW1ldGVycy5yZWxhdGl2ZVRvQ2VudGVyOwogICAgY29uc3QgZnJvbUVOVSA9IFRyYW5zZm9ybXNfZGVmYXVsdC5lYXN0Tm9ydGhVcFRvRml4ZWRGcmFtZShjZW50ZXIsIGVsbGlwc29pZCk7CiAgICBjb25zdCB0b0VOVSA9IE1hdHJpeDRfZGVmYXVsdC5pbnZlcnNlVHJhbnNmb3JtYXRpb24oZnJvbUVOVSwgbmV3IE1hdHJpeDRfZGVmYXVsdCgpKTsKICAgIGxldCBzb3V0aE1lcmNhdG9yWTsKICAgIGxldCBvbmVPdmVyTWVyY2F0b3JIZWlnaHQ7CiAgICBpZiAoaW5jbHVkZVdlYk1lcmNhdG9yVCkgewogICAgICBzb3V0aE1lcmNhdG9yWSA9IFdlYk1lcmNhdG9yUHJvamVjdGlvbl9kZWZhdWx0Lmdlb2RldGljTGF0aXR1ZGVUb01lcmNhdG9yQW5nbGUoCiAgICAgICAgc291dGgKICAgICAgKTsKICAgICAgb25lT3Zlck1lcmNhdG9ySGVpZ2h0ID0gMSAvIChXZWJNZXJjYXRvclByb2plY3Rpb25fZGVmYXVsdC5nZW9kZXRpY0xhdGl0dWRlVG9NZXJjYXRvckFuZ2xlKG5vcnRoKSAtIHNvdXRoTWVyY2F0b3JZKTsKICAgIH0KICAgIGNvbnN0IHVCdWZmZXIgPSBxdWFudGl6ZWRWZXJ0aWNlcy5zdWJhcnJheSgwLCBxdWFudGl6ZWRWZXJ0ZXhDb3VudCk7CiAgICBjb25zdCB2QnVmZmVyID0gcXVhbnRpemVkVmVydGljZXMuc3ViYXJyYXkoCiAgICAgIHF1YW50aXplZFZlcnRleENvdW50LAogICAgICAyICogcXVhbnRpemVkVmVydGV4Q291bnQKICAgICk7CiAgICBjb25zdCBoZWlnaHRCdWZmZXIgPSBxdWFudGl6ZWRWZXJ0aWNlcy5zdWJhcnJheSgKICAgICAgcXVhbnRpemVkVmVydGV4Q291bnQgKiAyLAogICAgICAzICogcXVhbnRpemVkVmVydGV4Q291bnQKICAgICk7CiAgICBjb25zdCBoYXNWZXJ0ZXhOb3JtYWxzID0gZGVmaW5lZF9kZWZhdWx0KG9jdEVuY29kZWROb3JtYWxzKTsKICAgIGNvbnN0IHV2cyA9IG5ldyBBcnJheShxdWFudGl6ZWRWZXJ0ZXhDb3VudCk7CiAgICBjb25zdCBoZWlnaHRzID0gbmV3IEFycmF5KHF1YW50aXplZFZlcnRleENvdW50KTsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBBcnJheShxdWFudGl6ZWRWZXJ0ZXhDb3VudCk7CiAgICBjb25zdCB3ZWJNZXJjYXRvclRzID0gaW5jbHVkZVdlYk1lcmNhdG9yVCA/IG5ldyBBcnJheShxdWFudGl6ZWRWZXJ0ZXhDb3VudCkgOiBbXTsKICAgIGNvbnN0IGdlb2RldGljU3VyZmFjZU5vcm1hbHMgPSBpbmNsdWRlR2VvZGV0aWNTdXJmYWNlTm9ybWFscyA/IG5ldyBBcnJheShxdWFudGl6ZWRWZXJ0ZXhDb3VudCkgOiBbXTsKICAgIGNvbnN0IG1pbmltdW0gPSBzY3JhdGNoTWluaW11bTsKICAgIG1pbmltdW0ueCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgIG1pbmltdW0ueSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgIG1pbmltdW0ueiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgIGNvbnN0IG1heGltdW0gPSBzY3JhdGNoTWF4aW11bTsKICAgIG1heGltdW0ueCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgIG1heGltdW0ueSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgIG1heGltdW0ueiA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgIGxldCBtaW5Mb25naXR1ZGUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CiAgICBsZXQgbWF4TG9uZ2l0dWRlID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgbGV0IG1pbkxhdGl0dWRlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgbGV0IG1heExhdGl0dWRlID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBxdWFudGl6ZWRWZXJ0ZXhDb3VudDsgKytpKSB7CiAgICAgIGNvbnN0IHJhd1UgPSB1QnVmZmVyW2ldOwogICAgICBjb25zdCByYXdWID0gdkJ1ZmZlcltpXTsKICAgICAgY29uc3QgdTMgPSByYXdVIC8gbWF4U2hvcnQ0OwogICAgICBjb25zdCB2MyA9IHJhd1YgLyBtYXhTaG9ydDQ7CiAgICAgIGNvbnN0IGhlaWdodCA9IE1hdGhfZGVmYXVsdC5sZXJwKAogICAgICAgIG1pbmltdW1IZWlnaHQsCiAgICAgICAgbWF4aW11bUhlaWdodCwKICAgICAgICBoZWlnaHRCdWZmZXJbaV0gLyBtYXhTaG9ydDQKICAgICAgKTsKICAgICAgY2FydG9ncmFwaGljU2NyYXRjaC5sb25naXR1ZGUgPSBNYXRoX2RlZmF1bHQubGVycCh3ZXN0LCBlYXN0LCB1Myk7CiAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2gubGF0aXR1ZGUgPSBNYXRoX2RlZmF1bHQubGVycChzb3V0aCwgbm9ydGgsIHYzKTsKICAgICAgY2FydG9ncmFwaGljU2NyYXRjaC5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgIG1pbkxvbmdpdHVkZSA9IE1hdGgubWluKGNhcnRvZ3JhcGhpY1NjcmF0Y2gubG9uZ2l0dWRlLCBtaW5Mb25naXR1ZGUpOwogICAgICBtYXhMb25naXR1ZGUgPSBNYXRoLm1heChjYXJ0b2dyYXBoaWNTY3JhdGNoLmxvbmdpdHVkZSwgbWF4TG9uZ2l0dWRlKTsKICAgICAgbWluTGF0aXR1ZGUgPSBNYXRoLm1pbihjYXJ0b2dyYXBoaWNTY3JhdGNoLmxhdGl0dWRlLCBtaW5MYXRpdHVkZSk7CiAgICAgIG1heExhdGl0dWRlID0gTWF0aC5tYXgoY2FydG9ncmFwaGljU2NyYXRjaC5sYXRpdHVkZSwgbWF4TGF0aXR1ZGUpOwogICAgICBjb25zdCBwb3NpdGlvbiA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihjYXJ0b2dyYXBoaWNTY3JhdGNoKTsKICAgICAgdXZzW2ldID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCh1MywgdjMpOwogICAgICBoZWlnaHRzW2ldID0gaGVpZ2h0OwogICAgICBwb3NpdGlvbnNbaV0gPSBwb3NpdGlvbjsKICAgICAgaWYgKGluY2x1ZGVXZWJNZXJjYXRvclQpIHsKICAgICAgICB3ZWJNZXJjYXRvclRzW2ldID0gKFdlYk1lcmNhdG9yUHJvamVjdGlvbl9kZWZhdWx0Lmdlb2RldGljTGF0aXR1ZGVUb01lcmNhdG9yQW5nbGUoCiAgICAgICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoLmxhdGl0dWRlCiAgICAgICAgKSAtIHNvdXRoTWVyY2F0b3JZKSAqIG9uZU92ZXJNZXJjYXRvckhlaWdodDsKICAgICAgfQogICAgICBpZiAoaW5jbHVkZUdlb2RldGljU3VyZmFjZU5vcm1hbHMpIHsKICAgICAgICBnZW9kZXRpY1N1cmZhY2VOb3JtYWxzW2ldID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwb3NpdGlvbik7CiAgICAgIH0KICAgICAgTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlQb2ludCh0b0VOVSwgcG9zaXRpb24sIGNhcnRlc2lhbjNTY3JhdGNoOCk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5taW5pbXVtQnlDb21wb25lbnQoY2FydGVzaWFuM1NjcmF0Y2g4LCBtaW5pbXVtLCBtaW5pbXVtKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm1heGltdW1CeUNvbXBvbmVudChjYXJ0ZXNpYW4zU2NyYXRjaDgsIG1heGltdW0sIG1heGltdW0pOwogICAgfQogICAgY29uc3Qgd2VzdEluZGljZXNTb3V0aFRvTm9ydGggPSBjb3B5QW5kU29ydChwYXJhbWV0ZXJzLndlc3RJbmRpY2VzLCBmdW5jdGlvbihhMywgYikgewogICAgICByZXR1cm4gdXZzW2EzXS55IC0gdXZzW2JdLnk7CiAgICB9KTsKICAgIGNvbnN0IGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoID0gY29weUFuZFNvcnQocGFyYW1ldGVycy5lYXN0SW5kaWNlcywgZnVuY3Rpb24oYTMsIGIpIHsKICAgICAgcmV0dXJuIHV2c1tiXS55IC0gdXZzW2EzXS55OwogICAgfSk7CiAgICBjb25zdCBzb3V0aEluZGljZXNFYXN0VG9XZXN0ID0gY29weUFuZFNvcnQocGFyYW1ldGVycy5zb3V0aEluZGljZXMsIGZ1bmN0aW9uKGEzLCBiKSB7CiAgICAgIHJldHVybiB1dnNbYl0ueCAtIHV2c1thM10ueDsKICAgIH0pOwogICAgY29uc3Qgbm9ydGhJbmRpY2VzV2VzdFRvRWFzdCA9IGNvcHlBbmRTb3J0KHBhcmFtZXRlcnMubm9ydGhJbmRpY2VzLCBmdW5jdGlvbihhMywgYikgewogICAgICByZXR1cm4gdXZzW2EzXS54IC0gdXZzW2JdLng7CiAgICB9KTsKICAgIGxldCBvY2NsdWRlZVBvaW50SW5TY2FsZWRTcGFjZTsKICAgIGlmIChtaW5pbXVtSGVpZ2h0IDwgMCkgewogICAgICBjb25zdCBvY2NsdWRlciA9IG5ldyBFbGxpcHNvaWRhbE9jY2x1ZGVyX2RlZmF1bHQoZWxsaXBzb2lkKTsKICAgICAgb2NjbHVkZWVQb2ludEluU2NhbGVkU3BhY2UgPSBvY2NsdWRlci5jb21wdXRlSG9yaXpvbkN1bGxpbmdQb2ludFBvc3NpYmx5VW5kZXJFbGxpcHNvaWQoCiAgICAgICAgY2VudGVyLAogICAgICAgIHBvc2l0aW9ucywKICAgICAgICBtaW5pbXVtSGVpZ2h0CiAgICAgICk7CiAgICB9CiAgICBsZXQgaE1pbiA9IG1pbmltdW1IZWlnaHQ7CiAgICBoTWluID0gTWF0aC5taW4oCiAgICAgIGhNaW4sCiAgICAgIGZpbmRNaW5NYXhTa2lydHMoCiAgICAgICAgcGFyYW1ldGVycy53ZXN0SW5kaWNlcywKICAgICAgICBwYXJhbWV0ZXJzLndlc3RTa2lydEhlaWdodCwKICAgICAgICBoZWlnaHRzLAogICAgICAgIHV2cywKICAgICAgICByZWN0YW5nbGUsCiAgICAgICAgZWxsaXBzb2lkLAogICAgICAgIHRvRU5VLAogICAgICAgIG1pbmltdW0sCiAgICAgICAgbWF4aW11bQogICAgICApCiAgICApOwogICAgaE1pbiA9IE1hdGgubWluKAogICAgICBoTWluLAogICAgICBmaW5kTWluTWF4U2tpcnRzKAogICAgICAgIHBhcmFtZXRlcnMuc291dGhJbmRpY2VzLAogICAgICAgIHBhcmFtZXRlcnMuc291dGhTa2lydEhlaWdodCwKICAgICAgICBoZWlnaHRzLAogICAgICAgIHV2cywKICAgICAgICByZWN0YW5nbGUsCiAgICAgICAgZWxsaXBzb2lkLAogICAgICAgIHRvRU5VLAogICAgICAgIG1pbmltdW0sCiAgICAgICAgbWF4aW11bQogICAgICApCiAgICApOwogICAgaE1pbiA9IE1hdGgubWluKAogICAgICBoTWluLAogICAgICBmaW5kTWluTWF4U2tpcnRzKAogICAgICAgIHBhcmFtZXRlcnMuZWFzdEluZGljZXMsCiAgICAgICAgcGFyYW1ldGVycy5lYXN0U2tpcnRIZWlnaHQsCiAgICAgICAgaGVpZ2h0cywKICAgICAgICB1dnMsCiAgICAgICAgcmVjdGFuZ2xlLAogICAgICAgIGVsbGlwc29pZCwKICAgICAgICB0b0VOVSwKICAgICAgICBtaW5pbXVtLAogICAgICAgIG1heGltdW0KICAgICAgKQogICAgKTsKICAgIGhNaW4gPSBNYXRoLm1pbigKICAgICAgaE1pbiwKICAgICAgZmluZE1pbk1heFNraXJ0cygKICAgICAgICBwYXJhbWV0ZXJzLm5vcnRoSW5kaWNlcywKICAgICAgICBwYXJhbWV0ZXJzLm5vcnRoU2tpcnRIZWlnaHQsCiAgICAgICAgaGVpZ2h0cywKICAgICAgICB1dnMsCiAgICAgICAgcmVjdGFuZ2xlLAogICAgICAgIGVsbGlwc29pZCwKICAgICAgICB0b0VOVSwKICAgICAgICBtaW5pbXVtLAogICAgICAgIG1heGltdW0KICAgICAgKQogICAgKTsKICAgIGNvbnN0IGFhQm94ID0gbmV3IEF4aXNBbGlnbmVkQm91bmRpbmdCb3hfZGVmYXVsdChtaW5pbXVtLCBtYXhpbXVtLCBjZW50ZXIpOwogICAgY29uc3QgZW5jb2RpbmcgPSBuZXcgVGVycmFpbkVuY29kaW5nX2RlZmF1bHQoCiAgICAgIGNlbnRlciwKICAgICAgYWFCb3gsCiAgICAgIGhNaW4sCiAgICAgIG1heGltdW1IZWlnaHQsCiAgICAgIGZyb21FTlUsCiAgICAgIGhhc1ZlcnRleE5vcm1hbHMsCiAgICAgIGluY2x1ZGVXZWJNZXJjYXRvclQsCiAgICAgIGluY2x1ZGVHZW9kZXRpY1N1cmZhY2VOb3JtYWxzLAogICAgICBleGFnZ2VyYXRpb24sCiAgICAgIGV4YWdnZXJhdGlvblJlbGF0aXZlSGVpZ2h0CiAgICApOwogICAgY29uc3QgdmVydGV4U3RyaWRlID0gZW5jb2Rpbmcuc3RyaWRlOwogICAgY29uc3Qgc2l6ZSA9IHF1YW50aXplZFZlcnRleENvdW50ICogdmVydGV4U3RyaWRlICsgZWRnZVZlcnRleENvdW50ICogdmVydGV4U3RyaWRlOwogICAgY29uc3QgdmVydGV4QnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShzaXplKTsKICAgIGxldCBidWZmZXJJbmRleCA9IDA7CiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHF1YW50aXplZFZlcnRleENvdW50OyArK2opIHsKICAgICAgaWYgKGhhc1ZlcnRleE5vcm1hbHMpIHsKICAgICAgICBjb25zdCBuID0gaiAqIDI7CiAgICAgICAgdG9QYWNrLnggPSBvY3RFbmNvZGVkTm9ybWFsc1tuXTsKICAgICAgICB0b1BhY2sueSA9IG9jdEVuY29kZWROb3JtYWxzW24gKyAxXTsKICAgICAgfQogICAgICBidWZmZXJJbmRleCA9IGVuY29kaW5nLmVuY29kZSgKICAgICAgICB2ZXJ0ZXhCdWZmZXIsCiAgICAgICAgYnVmZmVySW5kZXgsCiAgICAgICAgcG9zaXRpb25zW2pdLAogICAgICAgIHV2c1tqXSwKICAgICAgICBoZWlnaHRzW2pdLAogICAgICAgIHRvUGFjaywKICAgICAgICB3ZWJNZXJjYXRvclRzW2pdLAogICAgICAgIGdlb2RldGljU3VyZmFjZU5vcm1hbHNbal0KICAgICAgKTsKICAgIH0KICAgIGNvbnN0IGVkZ2VUcmlhbmdsZUNvdW50ID0gTWF0aC5tYXgoMCwgKGVkZ2VWZXJ0ZXhDb3VudCAtIDQpICogMik7CiAgICBjb25zdCBpbmRleEJ1ZmZlckxlbmd0aCA9IHBhcmFtZXRlcnMuaW5kaWNlcy5sZW5ndGggKyBlZGdlVHJpYW5nbGVDb3VudCAqIDM7CiAgICBjb25zdCBpbmRleEJ1ZmZlciA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICBxdWFudGl6ZWRWZXJ0ZXhDb3VudCArIGVkZ2VWZXJ0ZXhDb3VudCwKICAgICAgaW5kZXhCdWZmZXJMZW5ndGgKICAgICk7CiAgICBpbmRleEJ1ZmZlci5zZXQocGFyYW1ldGVycy5pbmRpY2VzLCAwKTsKICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSAxZS00OwogICAgY29uc3QgbG9uT2Zmc2V0ID0gKG1heExvbmdpdHVkZSAtIG1pbkxvbmdpdHVkZSkgKiBwZXJjZW50YWdlOwogICAgY29uc3QgbGF0T2Zmc2V0ID0gKG1heExhdGl0dWRlIC0gbWluTGF0aXR1ZGUpICogcGVyY2VudGFnZTsKICAgIGNvbnN0IHdlc3RMb25naXR1ZGVPZmZzZXQgPSAtbG9uT2Zmc2V0OwogICAgY29uc3Qgd2VzdExhdGl0dWRlT2Zmc2V0ID0gMDsKICAgIGNvbnN0IGVhc3RMb25naXR1ZGVPZmZzZXQgPSBsb25PZmZzZXQ7CiAgICBjb25zdCBlYXN0TGF0aXR1ZGVPZmZzZXQgPSAwOwogICAgY29uc3Qgbm9ydGhMb25naXR1ZGVPZmZzZXQgPSAwOwogICAgY29uc3Qgbm9ydGhMYXRpdHVkZU9mZnNldCA9IGxhdE9mZnNldDsKICAgIGNvbnN0IHNvdXRoTG9uZ2l0dWRlT2Zmc2V0ID0gMDsKICAgIGNvbnN0IHNvdXRoTGF0aXR1ZGVPZmZzZXQgPSAtbGF0T2Zmc2V0OwogICAgbGV0IHZlcnRleEJ1ZmZlckluZGV4ID0gcXVhbnRpemVkVmVydGV4Q291bnQgKiB2ZXJ0ZXhTdHJpZGU7CiAgICBhZGRTa2lydDIoCiAgICAgIHZlcnRleEJ1ZmZlciwKICAgICAgdmVydGV4QnVmZmVySW5kZXgsCiAgICAgIHdlc3RJbmRpY2VzU291dGhUb05vcnRoLAogICAgICBlbmNvZGluZywKICAgICAgaGVpZ2h0cywKICAgICAgdXZzLAogICAgICBvY3RFbmNvZGVkTm9ybWFscywKICAgICAgZWxsaXBzb2lkLAogICAgICByZWN0YW5nbGUsCiAgICAgIHBhcmFtZXRlcnMud2VzdFNraXJ0SGVpZ2h0LAogICAgICBzb3V0aE1lcmNhdG9yWSwKICAgICAgb25lT3Zlck1lcmNhdG9ySGVpZ2h0LAogICAgICB3ZXN0TG9uZ2l0dWRlT2Zmc2V0LAogICAgICB3ZXN0TGF0aXR1ZGVPZmZzZXQKICAgICk7CiAgICB2ZXJ0ZXhCdWZmZXJJbmRleCArPSBwYXJhbWV0ZXJzLndlc3RJbmRpY2VzLmxlbmd0aCAqIHZlcnRleFN0cmlkZTsKICAgIGFkZFNraXJ0MigKICAgICAgdmVydGV4QnVmZmVyLAogICAgICB2ZXJ0ZXhCdWZmZXJJbmRleCwKICAgICAgc291dGhJbmRpY2VzRWFzdFRvV2VzdCwKICAgICAgZW5jb2RpbmcsCiAgICAgIGhlaWdodHMsCiAgICAgIHV2cywKICAgICAgb2N0RW5jb2RlZE5vcm1hbHMsCiAgICAgIGVsbGlwc29pZCwKICAgICAgcmVjdGFuZ2xlLAogICAgICBwYXJhbWV0ZXJzLnNvdXRoU2tpcnRIZWlnaHQsCiAgICAgIHNvdXRoTWVyY2F0b3JZLAogICAgICBvbmVPdmVyTWVyY2F0b3JIZWlnaHQsCiAgICAgIHNvdXRoTG9uZ2l0dWRlT2Zmc2V0LAogICAgICBzb3V0aExhdGl0dWRlT2Zmc2V0CiAgICApOwogICAgdmVydGV4QnVmZmVySW5kZXggKz0gcGFyYW1ldGVycy5zb3V0aEluZGljZXMubGVuZ3RoICogdmVydGV4U3RyaWRlOwogICAgYWRkU2tpcnQyKAogICAgICB2ZXJ0ZXhCdWZmZXIsCiAgICAgIHZlcnRleEJ1ZmZlckluZGV4LAogICAgICBlYXN0SW5kaWNlc05vcnRoVG9Tb3V0aCwKICAgICAgZW5jb2RpbmcsCiAgICAgIGhlaWdodHMsCiAgICAgIHV2cywKICAgICAgb2N0RW5jb2RlZE5vcm1hbHMsCiAgICAgIGVsbGlwc29pZCwKICAgICAgcmVjdGFuZ2xlLAogICAgICBwYXJhbWV0ZXJzLmVhc3RTa2lydEhlaWdodCwKICAgICAgc291dGhNZXJjYXRvclksCiAgICAgIG9uZU92ZXJNZXJjYXRvckhlaWdodCwKICAgICAgZWFzdExvbmdpdHVkZU9mZnNldCwKICAgICAgZWFzdExhdGl0dWRlT2Zmc2V0CiAgICApOwogICAgdmVydGV4QnVmZmVySW5kZXggKz0gcGFyYW1ldGVycy5lYXN0SW5kaWNlcy5sZW5ndGggKiB2ZXJ0ZXhTdHJpZGU7CiAgICBhZGRTa2lydDIoCiAgICAgIHZlcnRleEJ1ZmZlciwKICAgICAgdmVydGV4QnVmZmVySW5kZXgsCiAgICAgIG5vcnRoSW5kaWNlc1dlc3RUb0Vhc3QsCiAgICAgIGVuY29kaW5nLAogICAgICBoZWlnaHRzLAogICAgICB1dnMsCiAgICAgIG9jdEVuY29kZWROb3JtYWxzLAogICAgICBlbGxpcHNvaWQsCiAgICAgIHJlY3RhbmdsZSwKICAgICAgcGFyYW1ldGVycy5ub3J0aFNraXJ0SGVpZ2h0LAogICAgICBzb3V0aE1lcmNhdG9yWSwKICAgICAgb25lT3Zlck1lcmNhdG9ySGVpZ2h0LAogICAgICBub3J0aExvbmdpdHVkZU9mZnNldCwKICAgICAgbm9ydGhMYXRpdHVkZU9mZnNldAogICAgKTsKICAgIFRlcnJhaW5Qcm92aWRlcl9kZWZhdWx0LmFkZFNraXJ0SW5kaWNlcygKICAgICAgd2VzdEluZGljZXNTb3V0aFRvTm9ydGgsCiAgICAgIHNvdXRoSW5kaWNlc0Vhc3RUb1dlc3QsCiAgICAgIGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoLAogICAgICBub3J0aEluZGljZXNXZXN0VG9FYXN0LAogICAgICBxdWFudGl6ZWRWZXJ0ZXhDb3VudCwKICAgICAgaW5kZXhCdWZmZXIsCiAgICAgIHBhcmFtZXRlcnMuaW5kaWNlcy5sZW5ndGgKICAgICk7CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2godmVydGV4QnVmZmVyLmJ1ZmZlciwgaW5kZXhCdWZmZXIuYnVmZmVyKTsKICAgIHJldHVybiB7CiAgICAgIHZlcnRpY2VzOiB2ZXJ0ZXhCdWZmZXIuYnVmZmVyLAogICAgICBpbmRpY2VzOiBpbmRleEJ1ZmZlci5idWZmZXIsCiAgICAgIHdlc3RJbmRpY2VzU291dGhUb05vcnRoLAogICAgICBzb3V0aEluZGljZXNFYXN0VG9XZXN0LAogICAgICBlYXN0SW5kaWNlc05vcnRoVG9Tb3V0aCwKICAgICAgbm9ydGhJbmRpY2VzV2VzdFRvRWFzdCwKICAgICAgdmVydGV4U3RyaWRlLAogICAgICBjZW50ZXIsCiAgICAgIG1pbmltdW1IZWlnaHQsCiAgICAgIG1heGltdW1IZWlnaHQsCiAgICAgIG9jY2x1ZGVlUG9pbnRJblNjYWxlZFNwYWNlLAogICAgICBlbmNvZGluZywKICAgICAgaW5kZXhDb3VudFdpdGhvdXRTa2lydHM6IHBhcmFtZXRlcnMuaW5kaWNlcy5sZW5ndGgKICAgIH07CiAgfQogIGZ1bmN0aW9uIGZpbmRNaW5NYXhTa2lydHMoZWRnZUluZGljZXMsIGVkZ2VIZWlnaHQsIGhlaWdodHMsIHV2cywgcmVjdGFuZ2xlLCBlbGxpcHNvaWQsIHRvRU5VLCBtaW5pbXVtLCBtYXhpbXVtKSB7CiAgICBsZXQgaE1pbiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgIGNvbnN0IG5vcnRoID0gcmVjdGFuZ2xlLm5vcnRoOwogICAgY29uc3Qgc291dGggPSByZWN0YW5nbGUuc291dGg7CiAgICBsZXQgZWFzdCA9IHJlY3RhbmdsZS5lYXN0OwogICAgY29uc3Qgd2VzdCA9IHJlY3RhbmdsZS53ZXN0OwogICAgaWYgKGVhc3QgPCB3ZXN0KSB7CiAgICAgIGVhc3QgKz0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgIH0KICAgIGNvbnN0IGxlbmd0aCA9IGVkZ2VJbmRpY2VzLmxlbmd0aDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgY29uc3QgaW5kZXggPSBlZGdlSW5kaWNlc1tpXTsKICAgICAgY29uc3QgaCA9IGhlaWdodHNbaW5kZXhdOwogICAgICBjb25zdCB1diA9IHV2c1tpbmRleF07CiAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2gubG9uZ2l0dWRlID0gTWF0aF9kZWZhdWx0LmxlcnAod2VzdCwgZWFzdCwgdXYueCk7CiAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2gubGF0aXR1ZGUgPSBNYXRoX2RlZmF1bHQubGVycChzb3V0aCwgbm9ydGgsIHV2LnkpOwogICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoLmhlaWdodCA9IGggLSBlZGdlSGVpZ2h0OwogICAgICBjb25zdCBwb3NpdGlvbiA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbigKICAgICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoLAogICAgICAgIGNhcnRlc2lhbjNTY3JhdGNoOAogICAgICApOwogICAgICBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVBvaW50KHRvRU5VLCBwb3NpdGlvbiwgcG9zaXRpb24pOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubWluaW11bUJ5Q29tcG9uZW50KHBvc2l0aW9uLCBtaW5pbXVtLCBtaW5pbXVtKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm1heGltdW1CeUNvbXBvbmVudChwb3NpdGlvbiwgbWF4aW11bSwgbWF4aW11bSk7CiAgICAgIGhNaW4gPSBNYXRoLm1pbihoTWluLCBjYXJ0b2dyYXBoaWNTY3JhdGNoLmhlaWdodCk7CiAgICB9CiAgICByZXR1cm4gaE1pbjsKICB9CiAgZnVuY3Rpb24gYWRkU2tpcnQyKHZlcnRleEJ1ZmZlciwgdmVydGV4QnVmZmVySW5kZXgsIGVkZ2VWZXJ0aWNlcywgZW5jb2RpbmcsIGhlaWdodHMsIHV2cywgb2N0RW5jb2RlZE5vcm1hbHMsIGVsbGlwc29pZCwgcmVjdGFuZ2xlLCBza2lydExlbmd0aCwgc291dGhNZXJjYXRvclksIG9uZU92ZXJNZXJjYXRvckhlaWdodCwgbG9uZ2l0dWRlT2Zmc2V0LCBsYXRpdHVkZU9mZnNldCkgewogICAgY29uc3QgaGFzVmVydGV4Tm9ybWFscyA9IGRlZmluZWRfZGVmYXVsdChvY3RFbmNvZGVkTm9ybWFscyk7CiAgICBjb25zdCBub3J0aCA9IHJlY3RhbmdsZS5ub3J0aDsKICAgIGNvbnN0IHNvdXRoID0gcmVjdGFuZ2xlLnNvdXRoOwogICAgbGV0IGVhc3QgPSByZWN0YW5nbGUuZWFzdDsKICAgIGNvbnN0IHdlc3QgPSByZWN0YW5nbGUud2VzdDsKICAgIGlmIChlYXN0IDwgd2VzdCkgewogICAgICBlYXN0ICs9IE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICB9CiAgICBjb25zdCBsZW5ndGggPSBlZGdlVmVydGljZXMubGVuZ3RoOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICBjb25zdCBpbmRleCA9IGVkZ2VWZXJ0aWNlc1tpXTsKICAgICAgY29uc3QgaCA9IGhlaWdodHNbaW5kZXhdOwogICAgICBjb25zdCB1diA9IHV2c1tpbmRleF07CiAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2gubG9uZ2l0dWRlID0gTWF0aF9kZWZhdWx0LmxlcnAod2VzdCwgZWFzdCwgdXYueCkgKyBsb25naXR1ZGVPZmZzZXQ7CiAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2gubGF0aXR1ZGUgPSBNYXRoX2RlZmF1bHQubGVycChzb3V0aCwgbm9ydGgsIHV2LnkpICsgbGF0aXR1ZGVPZmZzZXQ7CiAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2guaGVpZ2h0ID0gaCAtIHNraXJ0TGVuZ3RoOwogICAgICBjb25zdCBwb3NpdGlvbiA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbigKICAgICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoLAogICAgICAgIGNhcnRlc2lhbjNTY3JhdGNoOAogICAgICApOwogICAgICBpZiAoaGFzVmVydGV4Tm9ybWFscykgewogICAgICAgIGNvbnN0IG4gPSBpbmRleCAqIDI7CiAgICAgICAgdG9QYWNrLnggPSBvY3RFbmNvZGVkTm9ybWFsc1tuXTsKICAgICAgICB0b1BhY2sueSA9IG9jdEVuY29kZWROb3JtYWxzW24gKyAxXTsKICAgICAgfQogICAgICBsZXQgd2ViTWVyY2F0b3JUOwogICAgICBpZiAoZW5jb2RpbmcuaGFzV2ViTWVyY2F0b3JUKSB7CiAgICAgICAgd2ViTWVyY2F0b3JUID0gKFdlYk1lcmNhdG9yUHJvamVjdGlvbl9kZWZhdWx0Lmdlb2RldGljTGF0aXR1ZGVUb01lcmNhdG9yQW5nbGUoCiAgICAgICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoLmxhdGl0dWRlCiAgICAgICAgKSAtIHNvdXRoTWVyY2F0b3JZKSAqIG9uZU92ZXJNZXJjYXRvckhlaWdodDsKICAgICAgfQogICAgICBsZXQgZ2VvZGV0aWNTdXJmYWNlTm9ybWFsOwogICAgICBpZiAoZW5jb2RpbmcuaGFzR2VvZGV0aWNTdXJmYWNlTm9ybWFscykgewogICAgICAgIGdlb2RldGljU3VyZmFjZU5vcm1hbCA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwocG9zaXRpb24pOwogICAgICB9CiAgICAgIHZlcnRleEJ1ZmZlckluZGV4ID0gZW5jb2RpbmcuZW5jb2RlKAogICAgICAgIHZlcnRleEJ1ZmZlciwKICAgICAgICB2ZXJ0ZXhCdWZmZXJJbmRleCwKICAgICAgICBwb3NpdGlvbiwKICAgICAgICB1diwKICAgICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoLmhlaWdodCwKICAgICAgICB0b1BhY2ssCiAgICAgICAgd2ViTWVyY2F0b3JULAogICAgICAgIGdlb2RldGljU3VyZmFjZU5vcm1hbAogICAgICApOwogICAgfQogIH0KICBmdW5jdGlvbiBjb3B5QW5kU29ydCh0eXBlZEFycmF5LCBjb21wYXJhdG9yKSB7CiAgICBsZXQgY29weTsKICAgIGlmICh0eXBlb2YgdHlwZWRBcnJheS5zbGljZSA9PT0gImZ1bmN0aW9uIikgewogICAgICBjb3B5ID0gdHlwZWRBcnJheS5zbGljZSgpOwogICAgICBpZiAodHlwZW9mIGNvcHkuc29ydCAhPT0gImZ1bmN0aW9uIikgewogICAgICAgIGNvcHkgPSB2b2lkIDA7CiAgICAgIH0KICAgIH0KICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNvcHkpKSB7CiAgICAgIGNvcHkgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0eXBlZEFycmF5KTsKICAgIH0KICAgIGNvcHkuc29ydChjb21wYXJhdG9yKTsKICAgIHJldHVybiBjb3B5OwogIH0KICB2YXIgbWF4U2hvcnQ0LCBjYXJ0ZXNpYW4zU2NyYXRjaDgsIHNjcmF0Y2hNaW5pbXVtLCBzY3JhdGNoTWF4aW11bSwgY2FydG9ncmFwaGljU2NyYXRjaCwgdG9QYWNrLCBjcmVhdGVWZXJ0aWNlc0Zyb21RdWFudGl6ZWRUZXJyYWluTWVzaF9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVZlcnRpY2VzRnJvbVF1YW50aXplZFRlcnJhaW5NZXNoID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVWZXJ0aWNlc0Zyb21RdWFudGl6ZWRUZXJyYWluTWVzaC5qcyIoKSB7CiAgICAgIGluaXRfQXhpc0FsaWduZWRCb3VuZGluZ0JveCgpOwogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0VsbGlwc29pZGFsT2NjbHVkZXIoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDQoKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgaW5pdF9UZXJyYWluRW5jb2RpbmcoKTsKICAgICAgaW5pdF9UZXJyYWluUHJvdmlkZXIoKTsKICAgICAgaW5pdF9UcmFuc2Zvcm1zKCk7CiAgICAgIGluaXRfV2ViTWVyY2F0b3JQcm9qZWN0aW9uKCk7CiAgICAgIGluaXRfY3JlYXRlVGFza1Byb2Nlc3NvcldvcmtlcigpOwogICAgICBtYXhTaG9ydDQgPSAzMjc2NzsKICAgICAgY2FydGVzaWFuM1NjcmF0Y2g4ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTWluaW11bSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE1heGltdW0gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2ggPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgdG9QYWNrID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBjcmVhdGVWZXJ0aWNlc0Zyb21RdWFudGl6ZWRUZXJyYWluTWVzaF9kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0KAogICAgICAgIGNyZWF0ZVZlcnRpY2VzRnJvbVF1YW50aXplZFRlcnJhaW5NZXNoCiAgICAgICk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9XYWxsR2VvbWV0cnlMaWJyYXJ5LmpzCiAgZnVuY3Rpb24gbGF0TG9uRXF1YWxzKGMwLCBjMSkgewogICAgcmV0dXJuIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKGMwLmxhdGl0dWRlLCBjMS5sYXRpdHVkZSwgTWF0aF9kZWZhdWx0LkVQU0lMT04xMCkgJiYgTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oYzAubG9uZ2l0dWRlLCBjMS5sb25naXR1ZGUsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTApOwogIH0KICBmdW5jdGlvbiByZW1vdmVEdXBsaWNhdGVzMihlbGxpcHNvaWQsIHBvc2l0aW9ucywgdG9wSGVpZ2h0cywgYm90dG9tSGVpZ2h0cykgewogICAgcG9zaXRpb25zID0gYXJyYXlSZW1vdmVEdXBsaWNhdGVzX2RlZmF1bHQocG9zaXRpb25zLCBDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbik7CiAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgaWYgKGxlbmd0aCA8IDIpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgaGFzQm90dG9tSGVpZ2h0cyA9IGRlZmluZWRfZGVmYXVsdChib3R0b21IZWlnaHRzKTsKICAgIGNvbnN0IGhhc1RvcEhlaWdodHMgPSBkZWZpbmVkX2RlZmF1bHQodG9wSGVpZ2h0cyk7CiAgICBjb25zdCBjbGVhbmVkUG9zaXRpb25zID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICBjb25zdCBjbGVhbmVkVG9wSGVpZ2h0cyA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgY29uc3QgY2xlYW5lZEJvdHRvbUhlaWdodHMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgIGNvbnN0IHYwMiA9IHBvc2l0aW9uc1swXTsKICAgIGNsZWFuZWRQb3NpdGlvbnNbMF0gPSB2MDI7CiAgICBjb25zdCBjMCA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyh2MDIsIHNjcmF0Y2hDYXJ0b2dyYXBoaWMxMyk7CiAgICBpZiAoaGFzVG9wSGVpZ2h0cykgewogICAgICBjMC5oZWlnaHQgPSB0b3BIZWlnaHRzWzBdOwogICAgfQogICAgY2xlYW5lZFRvcEhlaWdodHNbMF0gPSBjMC5oZWlnaHQ7CiAgICBpZiAoaGFzQm90dG9tSGVpZ2h0cykgewogICAgICBjbGVhbmVkQm90dG9tSGVpZ2h0c1swXSA9IGJvdHRvbUhlaWdodHNbMF07CiAgICB9IGVsc2UgewogICAgICBjbGVhbmVkQm90dG9tSGVpZ2h0c1swXSA9IDA7CiAgICB9CiAgICBjb25zdCBzdGFydFRvcEhlaWdodCA9IGNsZWFuZWRUb3BIZWlnaHRzWzBdOwogICAgY29uc3Qgc3RhcnRCb3R0b21IZWlnaHQgPSBjbGVhbmVkQm90dG9tSGVpZ2h0c1swXTsKICAgIGxldCBoYXNBbGxTYW1lSGVpZ2h0cyA9IHN0YXJ0VG9wSGVpZ2h0ID09PSBzdGFydEJvdHRvbUhlaWdodDsKICAgIGxldCBpbmRleCA9IDE7CiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgIGNvbnN0IHYxMiA9IHBvc2l0aW9uc1tpXTsKICAgICAgY29uc3QgYzEgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWModjEyLCBzY3JhdGNoQ2FydG9ncmFwaGljMjMpOwogICAgICBpZiAoaGFzVG9wSGVpZ2h0cykgewogICAgICAgIGMxLmhlaWdodCA9IHRvcEhlaWdodHNbaV07CiAgICAgIH0KICAgICAgaGFzQWxsU2FtZUhlaWdodHMgPSBoYXNBbGxTYW1lSGVpZ2h0cyAmJiBjMS5oZWlnaHQgPT09IDA7CiAgICAgIGlmICghbGF0TG9uRXF1YWxzKGMwLCBjMSkpIHsKICAgICAgICBjbGVhbmVkUG9zaXRpb25zW2luZGV4XSA9IHYxMjsKICAgICAgICBjbGVhbmVkVG9wSGVpZ2h0c1tpbmRleF0gPSBjMS5oZWlnaHQ7CiAgICAgICAgaWYgKGhhc0JvdHRvbUhlaWdodHMpIHsKICAgICAgICAgIGNsZWFuZWRCb3R0b21IZWlnaHRzW2luZGV4XSA9IGJvdHRvbUhlaWdodHNbaV07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNsZWFuZWRCb3R0b21IZWlnaHRzW2luZGV4XSA9IDA7CiAgICAgICAgfQogICAgICAgIGhhc0FsbFNhbWVIZWlnaHRzID0gaGFzQWxsU2FtZUhlaWdodHMgJiYgY2xlYW5lZFRvcEhlaWdodHNbaW5kZXhdID09PSBjbGVhbmVkQm90dG9tSGVpZ2h0c1tpbmRleF07CiAgICAgICAgQ2FydG9ncmFwaGljX2RlZmF1bHQuY2xvbmUoYzEsIGMwKTsKICAgICAgICArK2luZGV4OwogICAgICB9IGVsc2UgaWYgKGMwLmhlaWdodCA8IGMxLmhlaWdodCkgewogICAgICAgIGNsZWFuZWRUb3BIZWlnaHRzW2luZGV4IC0gMV0gPSBjMS5oZWlnaHQ7CiAgICAgIH0KICAgIH0KICAgIGlmIChoYXNBbGxTYW1lSGVpZ2h0cyB8fCBpbmRleCA8IDIpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY2xlYW5lZFBvc2l0aW9ucy5sZW5ndGggPSBpbmRleDsKICAgIGNsZWFuZWRUb3BIZWlnaHRzLmxlbmd0aCA9IGluZGV4OwogICAgY2xlYW5lZEJvdHRvbUhlaWdodHMubGVuZ3RoID0gaW5kZXg7CiAgICByZXR1cm4gewogICAgICBwb3NpdGlvbnM6IGNsZWFuZWRQb3NpdGlvbnMsCiAgICAgIHRvcEhlaWdodHM6IGNsZWFuZWRUb3BIZWlnaHRzLAogICAgICBib3R0b21IZWlnaHRzOiBjbGVhbmVkQm90dG9tSGVpZ2h0cwogICAgfTsKICB9CiAgdmFyIFdhbGxHZW9tZXRyeUxpYnJhcnksIHNjcmF0Y2hDYXJ0b2dyYXBoaWMxMywgc2NyYXRjaENhcnRvZ3JhcGhpYzIzLCBwb3NpdGlvbnNBcnJheVNjcmF0Y2gsIGhlaWdodHNBcnJheVNjcmF0Y2gsIGdlbmVyYXRlQXJjT3B0aW9uc1NjcmF0Y2gyLCBXYWxsR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfV2FsbEdlb21ldHJ5TGlicmFyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvV2FsbEdlb21ldHJ5TGlicmFyeS5qcyIoKSB7CiAgICAgIGluaXRfYXJyYXlSZW1vdmVEdXBsaWNhdGVzKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfUG9seWxpbmVQaXBlbGluZSgpOwogICAgICBXYWxsR2VvbWV0cnlMaWJyYXJ5ID0ge307CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWMxMyA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljMjMgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgcG9zaXRpb25zQXJyYXlTY3JhdGNoID0gbmV3IEFycmF5KDIpOwogICAgICBoZWlnaHRzQXJyYXlTY3JhdGNoID0gbmV3IEFycmF5KDIpOwogICAgICBnZW5lcmF0ZUFyY09wdGlvbnNTY3JhdGNoMiA9IHsKICAgICAgICBwb3NpdGlvbnM6IHZvaWQgMCwKICAgICAgICBoZWlnaHQ6IHZvaWQgMCwKICAgICAgICBncmFudWxhcml0eTogdm9pZCAwLAogICAgICAgIGVsbGlwc29pZDogdm9pZCAwCiAgICAgIH07CiAgICAgIFdhbGxHZW9tZXRyeUxpYnJhcnkuY29tcHV0ZVBvc2l0aW9ucyA9IGZ1bmN0aW9uKGVsbGlwc29pZCwgd2FsbFBvc2l0aW9ucywgbWF4aW11bUhlaWdodHMsIG1pbmltdW1IZWlnaHRzLCBncmFudWxhcml0eSwgZHVwbGljYXRlQ29ybmVycykgewogICAgICAgIGNvbnN0IG8gPSByZW1vdmVEdXBsaWNhdGVzMigKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHdhbGxQb3NpdGlvbnMsCiAgICAgICAgICBtYXhpbXVtSGVpZ2h0cywKICAgICAgICAgIG1pbmltdW1IZWlnaHRzCiAgICAgICAgKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChvKSkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB3YWxsUG9zaXRpb25zID0gby5wb3NpdGlvbnM7CiAgICAgICAgbWF4aW11bUhlaWdodHMgPSBvLnRvcEhlaWdodHM7CiAgICAgICAgbWluaW11bUhlaWdodHMgPSBvLmJvdHRvbUhlaWdodHM7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gd2FsbFBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgY29uc3QgbnVtQ29ybmVycyA9IGxlbmd0aCAtIDI7CiAgICAgICAgbGV0IHRvcFBvc2l0aW9uczsKICAgICAgICBsZXQgYm90dG9tUG9zaXRpb25zOwogICAgICAgIGNvbnN0IG1pbkRpc3RhbmNlID0gTWF0aF9kZWZhdWx0LmNob3JkTGVuZ3RoKAogICAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgICBlbGxpcHNvaWQubWF4aW11bVJhZGl1cwogICAgICAgICk7CiAgICAgICAgY29uc3QgZ2VuZXJhdGVBcmNPcHRpb25zID0gZ2VuZXJhdGVBcmNPcHRpb25zU2NyYXRjaDI7CiAgICAgICAgZ2VuZXJhdGVBcmNPcHRpb25zLm1pbkRpc3RhbmNlID0gbWluRGlzdGFuY2U7CiAgICAgICAgZ2VuZXJhdGVBcmNPcHRpb25zLmVsbGlwc29pZCA9IGVsbGlwc29pZDsKICAgICAgICBpZiAoZHVwbGljYXRlQ29ybmVycykgewogICAgICAgICAgbGV0IGNvdW50ID0gMDsKICAgICAgICAgIGxldCBpOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aCAtIDE7IGkrKykgewogICAgICAgICAgICBjb3VudCArPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQubnVtYmVyT2ZQb2ludHMoCiAgICAgICAgICAgICAgd2FsbFBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgICB3YWxsUG9zaXRpb25zW2kgKyAxXSwKICAgICAgICAgICAgICBtaW5EaXN0YW5jZQogICAgICAgICAgICApICsgMTsKICAgICAgICAgIH0KICAgICAgICAgIHRvcFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoY291bnQgKiAzKTsKICAgICAgICAgIGJvdHRvbVBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoY291bnQgKiAzKTsKICAgICAgICAgIGNvbnN0IGdlbmVyYXRlQXJjUG9zaXRpb25zID0gcG9zaXRpb25zQXJyYXlTY3JhdGNoOwogICAgICAgICAgY29uc3QgZ2VuZXJhdGVBcmNIZWlnaHRzID0gaGVpZ2h0c0FycmF5U2NyYXRjaDsKICAgICAgICAgIGdlbmVyYXRlQXJjT3B0aW9ucy5wb3NpdGlvbnMgPSBnZW5lcmF0ZUFyY1Bvc2l0aW9uczsKICAgICAgICAgIGdlbmVyYXRlQXJjT3B0aW9ucy5oZWlnaHQgPSBnZW5lcmF0ZUFyY0hlaWdodHM7CiAgICAgICAgICBsZXQgb2Zmc2V0ID0gMDsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGggLSAxOyBpKyspIHsKICAgICAgICAgICAgZ2VuZXJhdGVBcmNQb3NpdGlvbnNbMF0gPSB3YWxsUG9zaXRpb25zW2ldOwogICAgICAgICAgICBnZW5lcmF0ZUFyY1Bvc2l0aW9uc1sxXSA9IHdhbGxQb3NpdGlvbnNbaSArIDFdOwogICAgICAgICAgICBnZW5lcmF0ZUFyY0hlaWdodHNbMF0gPSBtYXhpbXVtSGVpZ2h0c1tpXTsKICAgICAgICAgICAgZ2VuZXJhdGVBcmNIZWlnaHRzWzFdID0gbWF4aW11bUhlaWdodHNbaSArIDFdOwogICAgICAgICAgICBjb25zdCBwb3MgPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQuZ2VuZXJhdGVBcmMoZ2VuZXJhdGVBcmNPcHRpb25zKTsKICAgICAgICAgICAgdG9wUG9zaXRpb25zLnNldChwb3MsIG9mZnNldCk7CiAgICAgICAgICAgIGdlbmVyYXRlQXJjSGVpZ2h0c1swXSA9IG1pbmltdW1IZWlnaHRzW2ldOwogICAgICAgICAgICBnZW5lcmF0ZUFyY0hlaWdodHNbMV0gPSBtaW5pbXVtSGVpZ2h0c1tpICsgMV07CiAgICAgICAgICAgIGJvdHRvbVBvc2l0aW9ucy5zZXQoCiAgICAgICAgICAgICAgUG9seWxpbmVQaXBlbGluZV9kZWZhdWx0LmdlbmVyYXRlQXJjKGdlbmVyYXRlQXJjT3B0aW9ucyksCiAgICAgICAgICAgICAgb2Zmc2V0CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIG9mZnNldCArPSBwb3MubGVuZ3RoOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBnZW5lcmF0ZUFyY09wdGlvbnMucG9zaXRpb25zID0gd2FsbFBvc2l0aW9uczsKICAgICAgICAgIGdlbmVyYXRlQXJjT3B0aW9ucy5oZWlnaHQgPSBtYXhpbXVtSGVpZ2h0czsKICAgICAgICAgIHRvcFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoCiAgICAgICAgICAgIFBvbHlsaW5lUGlwZWxpbmVfZGVmYXVsdC5nZW5lcmF0ZUFyYyhnZW5lcmF0ZUFyY09wdGlvbnMpCiAgICAgICAgICApOwogICAgICAgICAgZ2VuZXJhdGVBcmNPcHRpb25zLmhlaWdodCA9IG1pbmltdW1IZWlnaHRzOwogICAgICAgICAgYm90dG9tUG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheSgKICAgICAgICAgICAgUG9seWxpbmVQaXBlbGluZV9kZWZhdWx0LmdlbmVyYXRlQXJjKGdlbmVyYXRlQXJjT3B0aW9ucykKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB7CiAgICAgICAgICBib3R0b21Qb3NpdGlvbnMsCiAgICAgICAgICB0b3BQb3NpdGlvbnMsCiAgICAgICAgICBudW1Db3JuZXJzCiAgICAgICAgfTsKICAgICAgfTsKICAgICAgV2FsbEdlb21ldHJ5TGlicmFyeV9kZWZhdWx0ID0gV2FsbEdlb21ldHJ5TGlicmFyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1dhbGxHZW9tZXRyeS5qcwogIGZ1bmN0aW9uIFdhbGxHZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IHdhbGxQb3NpdGlvbnMgPSBvcHRpb25zLnBvc2l0aW9uczsKICAgIGNvbnN0IG1heGltdW1IZWlnaHRzID0gb3B0aW9ucy5tYXhpbXVtSGVpZ2h0czsKICAgIGNvbnN0IG1pbmltdW1IZWlnaHRzID0gb3B0aW9ucy5taW5pbXVtSGVpZ2h0czsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHdhbGxQb3NpdGlvbnMpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJvcHRpb25zLnBvc2l0aW9ucyBpcyByZXF1aXJlZC4iKTsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWF4aW11bUhlaWdodHMpICYmIG1heGltdW1IZWlnaHRzLmxlbmd0aCAhPT0gd2FsbFBvc2l0aW9ucy5sZW5ndGgpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIm9wdGlvbnMucG9zaXRpb25zIGFuZCBvcHRpb25zLm1heGltdW1IZWlnaHRzIG11c3QgaGF2ZSB0aGUgc2FtZSBsZW5ndGguIgogICAgICApOwogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdChtaW5pbXVtSGVpZ2h0cykgJiYgbWluaW11bUhlaWdodHMubGVuZ3RoICE9PSB3YWxsUG9zaXRpb25zLmxlbmd0aCkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAib3B0aW9ucy5wb3NpdGlvbnMgYW5kIG9wdGlvbnMubWluaW11bUhlaWdodHMgbXVzdCBoYXZlIHRoZSBzYW1lIGxlbmd0aC4iCiAgICAgICk7CiAgICB9CiAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnZlcnRleEZvcm1hdCwgVmVydGV4Rm9ybWF0X2RlZmF1bHQuREVGQVVMVCk7CiAgICBjb25zdCBncmFudWxhcml0eSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFCiAgICApOwogICAgY29uc3QgZWxsaXBzb2lkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5lbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LldHUzg0KTsKICAgIHRoaXMuX3Bvc2l0aW9ucyA9IHdhbGxQb3NpdGlvbnM7CiAgICB0aGlzLl9taW5pbXVtSGVpZ2h0cyA9IG1pbmltdW1IZWlnaHRzOwogICAgdGhpcy5fbWF4aW11bUhlaWdodHMgPSBtYXhpbXVtSGVpZ2h0czsKICAgIHRoaXMuX3ZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LmNsb25lKHZlcnRleEZvcm1hdCk7CiAgICB0aGlzLl9ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgdGhpcy5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkKTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlV2FsbEdlb21ldHJ5IjsKICAgIGxldCBudW1Db21wb25lbnRzID0gMSArIHdhbGxQb3NpdGlvbnMubGVuZ3RoICogQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCArIDI7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG1pbmltdW1IZWlnaHRzKSkgewogICAgICBudW1Db21wb25lbnRzICs9IG1pbmltdW1IZWlnaHRzLmxlbmd0aDsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWF4aW11bUhlaWdodHMpKSB7CiAgICAgIG51bUNvbXBvbmVudHMgKz0gbWF4aW11bUhlaWdodHMubGVuZ3RoOwogICAgfQogICAgdGhpcy5wYWNrZWRMZW5ndGggPSBudW1Db21wb25lbnRzICsgRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoICsgMTsKICB9CiAgdmFyIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb24xLCBzY3JhdGNoQ2FydGVzaWFuM1Bvc2l0aW9uMiwgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjQsIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb241LCBzY3JhdGNoQml0YW5nZW50NSwgc2NyYXRjaFRhbmdlbnQ1LCBzY3JhdGNoTm9ybWFsOCwgc2NyYXRjaEVsbGlwc29pZDE3LCBzY3JhdGNoVmVydGV4Rm9ybWF0MTMsIHNjcmF0Y2hPcHRpb25zMjMsIFdhbGxHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X1dhbGxHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvV2FsbEdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgaW5pdF9WZXJ0ZXhGb3JtYXQoKTsKICAgICAgaW5pdF9XYWxsR2VvbWV0cnlMaWJyYXJ5KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb24xID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuM1Bvc2l0aW9uMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb241ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQml0YW5nZW50NSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFRhbmdlbnQ1ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTm9ybWFsOCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgV2FsbEdlb21ldHJ5LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh2YWx1ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ2YWx1ZSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhcnJheSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgbGV0IGk7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gdmFsdWUuX3Bvc2l0aW9uczsKICAgICAgICBsZXQgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gbGVuZ3RoOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhwb3NpdGlvbnNbaV0sIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbWluaW11bUhlaWdodHMgPSB2YWx1ZS5fbWluaW11bUhlaWdodHM7CiAgICAgICAgbGVuZ3RoID0gZGVmaW5lZF9kZWZhdWx0KG1pbmltdW1IZWlnaHRzKSA/IG1pbmltdW1IZWlnaHRzLmxlbmd0aCA6IDA7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IGxlbmd0aDsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG1pbmltdW1IZWlnaHRzKSkgewogICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBtaW5pbXVtSGVpZ2h0c1tpXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgbWF4aW11bUhlaWdodHMgPSB2YWx1ZS5fbWF4aW11bUhlaWdodHM7CiAgICAgICAgbGVuZ3RoID0gZGVmaW5lZF9kZWZhdWx0KG1heGltdW1IZWlnaHRzKSA/IG1heGltdW1IZWlnaHRzLmxlbmd0aCA6IDA7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IGxlbmd0aDsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG1heGltdW1IZWlnaHRzKSkgewogICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBtYXhpbXVtSGVpZ2h0c1tpXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgRWxsaXBzb2lkX2RlZmF1bHQucGFjayh2YWx1ZS5fZWxsaXBzb2lkLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFjayh2YWx1ZS5fdmVydGV4Rm9ybWF0LCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSB2YWx1ZS5fZ3JhbnVsYXJpdHk7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBzY3JhdGNoRWxsaXBzb2lkMTcgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShFbGxpcHNvaWRfZGVmYXVsdC5VTklUX1NQSEVSRSk7CiAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQxMyA9IG5ldyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoT3B0aW9uczIzID0gewogICAgICAgIHBvc2l0aW9uczogdm9pZCAwLAogICAgICAgIG1pbmltdW1IZWlnaHRzOiB2b2lkIDAsCiAgICAgICAgbWF4aW11bUhlaWdodHM6IHZvaWQgMCwKICAgICAgICBlbGxpcHNvaWQ6IHNjcmF0Y2hFbGxpcHNvaWQxNywKICAgICAgICB2ZXJ0ZXhGb3JtYXQ6IHNjcmF0Y2hWZXJ0ZXhGb3JtYXQxMywKICAgICAgICBncmFudWxhcml0eTogdm9pZCAwCiAgICAgIH07CiAgICAgIFdhbGxHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYXJyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXJyYXkgaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGxldCBpOwogICAgICAgIGxldCBsZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBwb3NpdGlvbnNbaV0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgbGVuZ3RoID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBsZXQgbWluaW11bUhlaWdodHM7CiAgICAgICAgaWYgKGxlbmd0aCA+IDApIHsKICAgICAgICAgIG1pbmltdW1IZWlnaHRzID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgbWluaW11bUhlaWdodHNbaV0gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBsZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGxldCBtYXhpbXVtSGVpZ2h0czsKICAgICAgICBpZiAobGVuZ3RoID4gMCkgewogICAgICAgICAgbWF4aW11bUhlaWdodHMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgICBtYXhpbXVtSGVpZ2h0c1tpXSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgc2NyYXRjaEVsbGlwc29pZDE3KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBzY3JhdGNoVmVydGV4Rm9ybWF0MTMKICAgICAgICApOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gYXJyYXlbc3RhcnRpbmdJbmRleF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgc2NyYXRjaE9wdGlvbnMyMy5wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczIzLm1pbmltdW1IZWlnaHRzID0gbWluaW11bUhlaWdodHM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczIzLm1heGltdW1IZWlnaHRzID0gbWF4aW11bUhlaWdodHM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczIzLmdyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICAgICAgICByZXR1cm4gbmV3IFdhbGxHZW9tZXRyeShzY3JhdGNoT3B0aW9uczIzKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Ll9wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICAgICAgcmVzdWx0Ll9taW5pbXVtSGVpZ2h0cyA9IG1pbmltdW1IZWlnaHRzOwogICAgICAgIHJlc3VsdC5fbWF4aW11bUhlaWdodHMgPSBtYXhpbXVtSGVpZ2h0czsKICAgICAgICByZXN1bHQuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKGVsbGlwc29pZCwgcmVzdWx0Ll9lbGxpcHNvaWQpOwogICAgICAgIHJlc3VsdC5fdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQuY2xvbmUodmVydGV4Rm9ybWF0LCByZXN1bHQuX3ZlcnRleEZvcm1hdCk7CiAgICAgICAgcmVzdWx0Ll9ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFdhbGxHZW9tZXRyeS5mcm9tQ29uc3RhbnRIZWlnaHRzID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG9wdGlvbnMucG9zaXRpb25zOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9ucykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJvcHRpb25zLnBvc2l0aW9ucyBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgbGV0IG1pbkhlaWdodHM7CiAgICAgICAgbGV0IG1heEhlaWdodHM7CiAgICAgICAgY29uc3QgbWluMyA9IG9wdGlvbnMubWluaW11bUhlaWdodDsKICAgICAgICBjb25zdCBtYXgzID0gb3B0aW9ucy5tYXhpbXVtSGVpZ2h0OwogICAgICAgIGNvbnN0IGRvTWluID0gZGVmaW5lZF9kZWZhdWx0KG1pbjMpOwogICAgICAgIGNvbnN0IGRvTWF4ID0gZGVmaW5lZF9kZWZhdWx0KG1heDMpOwogICAgICAgIGlmIChkb01pbiB8fCBkb01heCkgewogICAgICAgICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICAgIG1pbkhlaWdodHMgPSBkb01pbiA/IG5ldyBBcnJheShsZW5ndGgpIDogdm9pZCAwOwogICAgICAgICAgbWF4SGVpZ2h0cyA9IGRvTWF4ID8gbmV3IEFycmF5KGxlbmd0aCkgOiB2b2lkIDA7CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGlmIChkb01pbikgewogICAgICAgICAgICAgIG1pbkhlaWdodHNbaV0gPSBtaW4zOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChkb01heCkgewogICAgICAgICAgICAgIG1heEhlaWdodHNbaV0gPSBtYXgzOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IG5ld09wdGlvbnMgPSB7CiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICBtYXhpbXVtSGVpZ2h0czogbWF4SGVpZ2h0cywKICAgICAgICAgIG1pbmltdW1IZWlnaHRzOiBtaW5IZWlnaHRzLAogICAgICAgICAgZWxsaXBzb2lkOiBvcHRpb25zLmVsbGlwc29pZCwKICAgICAgICAgIHZlcnRleEZvcm1hdDogb3B0aW9ucy52ZXJ0ZXhGb3JtYXQKICAgICAgICB9OwogICAgICAgIHJldHVybiBuZXcgV2FsbEdlb21ldHJ5KG5ld09wdGlvbnMpOwogICAgICB9OwogICAgICBXYWxsR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbih3YWxsR2VvbWV0cnkpIHsKICAgICAgICBjb25zdCB3YWxsUG9zaXRpb25zID0gd2FsbEdlb21ldHJ5Ll9wb3NpdGlvbnM7CiAgICAgICAgY29uc3QgbWluaW11bUhlaWdodHMgPSB3YWxsR2VvbWV0cnkuX21pbmltdW1IZWlnaHRzOwogICAgICAgIGNvbnN0IG1heGltdW1IZWlnaHRzID0gd2FsbEdlb21ldHJ5Ll9tYXhpbXVtSGVpZ2h0czsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSB3YWxsR2VvbWV0cnkuX3ZlcnRleEZvcm1hdDsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IHdhbGxHZW9tZXRyeS5fZ3JhbnVsYXJpdHk7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gd2FsbEdlb21ldHJ5Ll9lbGxpcHNvaWQ7CiAgICAgICAgY29uc3QgcG9zID0gV2FsbEdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbnMoCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICB3YWxsUG9zaXRpb25zLAogICAgICAgICAgbWF4aW11bUhlaWdodHMsCiAgICAgICAgICBtaW5pbXVtSGVpZ2h0cywKICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgdHJ1ZQogICAgICAgICk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9zKSkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBib3R0b21Qb3NpdGlvbnMgPSBwb3MuYm90dG9tUG9zaXRpb25zOwogICAgICAgIGNvbnN0IHRvcFBvc2l0aW9ucyA9IHBvcy50b3BQb3NpdGlvbnM7CiAgICAgICAgY29uc3QgbnVtQ29ybmVycyA9IHBvcy5udW1Db3JuZXJzOwogICAgICAgIGxldCBsZW5ndGggPSB0b3BQb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGxldCBzaXplID0gbGVuZ3RoICogMjsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSB2ZXJ0ZXhGb3JtYXQucG9zaXRpb24gPyBuZXcgRmxvYXQ2NEFycmF5KHNpemUpIDogdm9pZCAwOwogICAgICAgIGNvbnN0IG5vcm1hbHMgPSB2ZXJ0ZXhGb3JtYXQubm9ybWFsID8gbmV3IEZsb2F0MzJBcnJheShzaXplKSA6IHZvaWQgMDsKICAgICAgICBjb25zdCB0YW5nZW50cyA9IHZlcnRleEZvcm1hdC50YW5nZW50ID8gbmV3IEZsb2F0MzJBcnJheShzaXplKSA6IHZvaWQgMDsKICAgICAgICBjb25zdCBiaXRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCA/IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSkgOiB2b2lkIDA7CiAgICAgICAgY29uc3QgdGV4dHVyZUNvb3JkaW5hdGVzID0gdmVydGV4Rm9ybWF0LnN0ID8gbmV3IEZsb2F0MzJBcnJheShzaXplIC8gMyAqIDIpIDogdm9pZCAwOwogICAgICAgIGxldCBwb3NpdGlvbkluZGV4ID0gMDsKICAgICAgICBsZXQgbm9ybWFsSW5kZXggPSAwOwogICAgICAgIGxldCBiaXRhbmdlbnRJbmRleCA9IDA7CiAgICAgICAgbGV0IHRhbmdlbnRJbmRleCA9IDA7CiAgICAgICAgbGV0IHN0SW5kZXggPSAwOwogICAgICAgIGxldCBub3JtYWwyID0gc2NyYXRjaE5vcm1hbDg7CiAgICAgICAgbGV0IHRhbmdlbnQgPSBzY3JhdGNoVGFuZ2VudDU7CiAgICAgICAgbGV0IGJpdGFuZ2VudCA9IHNjcmF0Y2hCaXRhbmdlbnQ1OwogICAgICAgIGxldCByZWNvbXB1dGVOb3JtYWwgPSB0cnVlOwogICAgICAgIGxlbmd0aCAvPSAzOwogICAgICAgIGxldCBpOwogICAgICAgIGxldCBzID0gMDsKICAgICAgICBjb25zdCBkcyA9IDEgLyAobGVuZ3RoIC0gbnVtQ29ybmVycyAtIDEpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgY29uc3QgaTMgPSBpICogMzsKICAgICAgICAgIGNvbnN0IHRvcFBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgdG9wUG9zaXRpb25zLAogICAgICAgICAgICBpMywKICAgICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjEKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBib3R0b21Qb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgIGJvdHRvbVBvc2l0aW9ucywKICAgICAgICAgICAgaTMsCiAgICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb24yCiAgICAgICAgICApOwogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5wb3NpdGlvbikgewogICAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IGJvdHRvbVBvc2l0aW9uLng7CiAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gYm90dG9tUG9zaXRpb24ueTsKICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBib3R0b21Qb3NpdGlvbi56OwogICAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHRvcFBvc2l0aW9uLng7CiAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gdG9wUG9zaXRpb24ueTsKICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSB0b3BQb3NpdGlvbi56OwogICAgICAgICAgfQogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbc3RJbmRleCsrXSA9IHM7CiAgICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlc1tzdEluZGV4KytdID0gMDsKICAgICAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW3N0SW5kZXgrK10gPSBzOwogICAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbc3RJbmRleCsrXSA9IDE7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCB8fCB2ZXJ0ZXhGb3JtYXQudGFuZ2VudCB8fCB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgICAgIGxldCBuZXh0VG9wID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKAogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLAogICAgICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb241CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGNvbnN0IGdyb3VuZFBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgICAgICAgIHRvcFBvc2l0aW9uLAogICAgICAgICAgICAgIGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwoCiAgICAgICAgICAgICAgICB0b3BQb3NpdGlvbiwKICAgICAgICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb24yCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuM1Bvc2l0aW9uMgogICAgICAgICAgICApOwogICAgICAgICAgICBpZiAoaSArIDEgPCBsZW5ndGgpIHsKICAgICAgICAgICAgICBuZXh0VG9wID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgICAgIHRvcFBvc2l0aW9ucywKICAgICAgICAgICAgICAgIGkzICsgMywKICAgICAgICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb241CiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocmVjb21wdXRlTm9ybWFsKSB7CiAgICAgICAgICAgICAgY29uc3Qgc2NhbGVkbmV4dFBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgICAgICAgICAgbmV4dFRvcCwKICAgICAgICAgICAgICAgIHRvcFBvc2l0aW9uLAogICAgICAgICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjQKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIGNvbnN0IHNjYWxlZEdyb3VuZFBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgICAgICAgICAgZ3JvdW5kUG9zaXRpb24sCiAgICAgICAgICAgICAgICB0b3BQb3NpdGlvbiwKICAgICAgICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb24xCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBub3JtYWwyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhzY2FsZWRHcm91bmRQb3NpdGlvbiwgc2NhbGVkbmV4dFBvc2l0aW9uLCBub3JtYWwyKSwKICAgICAgICAgICAgICAgIG5vcm1hbDIKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIHJlY29tcHV0ZU5vcm1hbCA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbih0b3BQb3NpdGlvbiwgbmV4dFRvcCwgTWF0aF9kZWZhdWx0LkVQU0lMT04xMCkpIHsKICAgICAgICAgICAgICByZWNvbXB1dGVOb3JtYWwgPSB0cnVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHMgKz0gZHM7CiAgICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgICAgICAgICB0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KG5leHRUb3AsIHRvcFBvc2l0aW9uLCB0YW5nZW50KSwKICAgICAgICAgICAgICAgICAgdGFuZ2VudAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhub3JtYWwyLCB0YW5nZW50LCBiaXRhbmdlbnQpLAogICAgICAgICAgICAgICAgICBiaXRhbmdlbnQKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgICAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IG5vcm1hbDIueDsKICAgICAgICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gbm9ybWFsMi55OwogICAgICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSBub3JtYWwyLno7CiAgICAgICAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IG5vcm1hbDIueDsKICAgICAgICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gbm9ybWFsMi55OwogICAgICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSBub3JtYWwyLno7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gdGFuZ2VudC54OwogICAgICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQueTsKICAgICAgICAgICAgICB0YW5nZW50c1t0YW5nZW50SW5kZXgrK10gPSB0YW5nZW50Lno7CiAgICAgICAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gdGFuZ2VudC54OwogICAgICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQueTsKICAgICAgICAgICAgICB0YW5nZW50c1t0YW5nZW50SW5kZXgrK10gPSB0YW5nZW50Lno7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lng7CiAgICAgICAgICAgICAgYml0YW5nZW50c1tiaXRhbmdlbnRJbmRleCsrXSA9IGJpdGFuZ2VudC55OwogICAgICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQuejsKICAgICAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lng7CiAgICAgICAgICAgICAgYml0YW5nZW50c1tiaXRhbmdlbnRJbmRleCsrXSA9IGJpdGFuZ2VudC55OwogICAgICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQuejsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KCk7CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5wb3NpdGlvbikgewogICAgICAgICAgYXR0cmlidXRlcy5wb3NpdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICB2YWx1ZXM6IHBvc2l0aW9ucwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgICAgICBhdHRyaWJ1dGVzLm5vcm1hbCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICAgIHZhbHVlczogbm9ybWFscwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICAgICAgYXR0cmlidXRlcy50YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgdmFsdWVzOiB0YW5nZW50cwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgICBhdHRyaWJ1dGVzLmJpdGFuZ2VudCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICAgIHZhbHVlczogYml0YW5nZW50cwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICAgIGF0dHJpYnV0ZXMuc3QgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgICAgICB2YWx1ZXM6IHRleHR1cmVDb29yZGluYXRlcwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG51bVZlcnRpY2VzID0gc2l6ZSAvIDM7CiAgICAgICAgc2l6ZSAtPSA2ICogKG51bUNvcm5lcnMgKyAxKTsKICAgICAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkobnVtVmVydGljZXMsIHNpemUpOwogICAgICAgIGxldCBlZGdlSW5kZXggPSAwOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1WZXJ0aWNlcyAtIDI7IGkgKz0gMikgewogICAgICAgICAgY29uc3QgTEwgPSBpOwogICAgICAgICAgY29uc3QgTFIgPSBpICsgMjsKICAgICAgICAgIGNvbnN0IHBsID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgICBMTCAqIDMsCiAgICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb24xCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgcHIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICAgIExSICogMywKICAgICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjIKICAgICAgICAgICk7CiAgICAgICAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24ocGwsIHByLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjEwKSkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IFVMID0gaSArIDE7CiAgICAgICAgICBjb25zdCBVUiA9IGkgKyAzOwogICAgICAgICAgaW5kaWNlc1tlZGdlSW5kZXgrK10gPSBVTDsKICAgICAgICAgIGluZGljZXNbZWRnZUluZGV4KytdID0gTEw7CiAgICAgICAgICBpbmRpY2VzW2VkZ2VJbmRleCsrXSA9IFVSOwogICAgICAgICAgaW5kaWNlc1tlZGdlSW5kZXgrK10gPSBVUjsKICAgICAgICAgIGluZGljZXNbZWRnZUluZGV4KytdID0gTEw7CiAgICAgICAgICBpbmRpY2VzW2VkZ2VJbmRleCsrXSA9IExSOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTLAogICAgICAgICAgYm91bmRpbmdTcGhlcmU6IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmZyb21WZXJ0aWNlcyhwb3NpdGlvbnMpCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFdhbGxHZW9tZXRyeV9kZWZhdWx0ID0gV2FsbEdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlV2FsbEdlb21ldHJ5LmpzCiAgdmFyIGNyZWF0ZVdhbGxHZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlV2FsbEdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVdhbGxHZW9tZXRyeV9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY3JlYXRlV2FsbEdlb21ldHJ5KHdhbGxHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgd2FsbEdlb21ldHJ5ID0gV2FsbEdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKHdhbGxHZW9tZXRyeSwgb2Zmc2V0KTsKICAgIH0KICAgIHdhbGxHZW9tZXRyeS5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUod2FsbEdlb21ldHJ5Ll9lbGxpcHNvaWQpOwogICAgcmV0dXJuIFdhbGxHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KHdhbGxHZW9tZXRyeSk7CiAgfQogIHZhciBjcmVhdGVXYWxsR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVXYWxsR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVdhbGxHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X1dhbGxHZW9tZXRyeSgpOwogICAgICBjcmVhdGVXYWxsR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZVdhbGxHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1dhbGxPdXRsaW5lR2VvbWV0cnkuanMKICBmdW5jdGlvbiBXYWxsT3V0bGluZUdlb21ldHJ5KG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgY29uc3Qgd2FsbFBvc2l0aW9ucyA9IG9wdGlvbnMucG9zaXRpb25zOwogICAgY29uc3QgbWF4aW11bUhlaWdodHMgPSBvcHRpb25zLm1heGltdW1IZWlnaHRzOwogICAgY29uc3QgbWluaW11bUhlaWdodHMgPSBvcHRpb25zLm1pbmltdW1IZWlnaHRzOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQod2FsbFBvc2l0aW9ucykpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm9wdGlvbnMucG9zaXRpb25zIGlzIHJlcXVpcmVkLiIpOwogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdChtYXhpbXVtSGVpZ2h0cykgJiYgbWF4aW11bUhlaWdodHMubGVuZ3RoICE9PSB3YWxsUG9zaXRpb25zLmxlbmd0aCkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAib3B0aW9ucy5wb3NpdGlvbnMgYW5kIG9wdGlvbnMubWF4aW11bUhlaWdodHMgbXVzdCBoYXZlIHRoZSBzYW1lIGxlbmd0aC4iCiAgICAgICk7CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG1pbmltdW1IZWlnaHRzKSAmJiBtaW5pbXVtSGVpZ2h0cy5sZW5ndGggIT09IHdhbGxQb3NpdGlvbnMubGVuZ3RoKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJvcHRpb25zLnBvc2l0aW9ucyBhbmQgb3B0aW9ucy5taW5pbXVtSGVpZ2h0cyBtdXN0IGhhdmUgdGhlIHNhbWUgbGVuZ3RoLiIKICAgICAgKTsKICAgIH0KICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgIG9wdGlvbnMuZ3JhbnVsYXJpdHksCiAgICAgIE1hdGhfZGVmYXVsdC5SQURJQU5TX1BFUl9ERUdSRUUKICAgICk7CiAgICBjb25zdCBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuV0dTODQpOwogICAgdGhpcy5fcG9zaXRpb25zID0gd2FsbFBvc2l0aW9uczsKICAgIHRoaXMuX21pbmltdW1IZWlnaHRzID0gbWluaW11bUhlaWdodHM7CiAgICB0aGlzLl9tYXhpbXVtSGVpZ2h0cyA9IG1heGltdW1IZWlnaHRzOwogICAgdGhpcy5fZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgIHRoaXMuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKGVsbGlwc29pZCk7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZVdhbGxPdXRsaW5lR2VvbWV0cnkiOwogICAgbGV0IG51bUNvbXBvbmVudHMgPSAxICsgd2FsbFBvc2l0aW9ucy5sZW5ndGggKiBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgMjsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWluaW11bUhlaWdodHMpKSB7CiAgICAgIG51bUNvbXBvbmVudHMgKz0gbWluaW11bUhlaWdodHMubGVuZ3RoOwogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdChtYXhpbXVtSGVpZ2h0cykpIHsKICAgICAgbnVtQ29tcG9uZW50cyArPSBtYXhpbXVtSGVpZ2h0cy5sZW5ndGg7CiAgICB9CiAgICB0aGlzLnBhY2tlZExlbmd0aCA9IG51bUNvbXBvbmVudHMgKyBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyAxOwogIH0KICB2YXIgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjEyLCBzY3JhdGNoQ2FydGVzaWFuM1Bvc2l0aW9uMjIsIHNjcmF0Y2hFbGxpcHNvaWQxOCwgc2NyYXRjaE9wdGlvbnMyNCwgV2FsbE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X1dhbGxPdXRsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1dhbGxPdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBpbml0X1dhbGxHZW9tZXRyeUxpYnJhcnkoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjEyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuM1Bvc2l0aW9uMjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIFdhbGxPdXRsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHZhbHVlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInZhbHVlIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBsZXQgaTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSB2YWx1ZS5fcG9zaXRpb25zOwogICAgICAgIGxldCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBsZW5ndGg7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHBvc2l0aW9uc1tpXSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBtaW5pbXVtSGVpZ2h0cyA9IHZhbHVlLl9taW5pbXVtSGVpZ2h0czsKICAgICAgICBsZW5ndGggPSBkZWZpbmVkX2RlZmF1bHQobWluaW11bUhlaWdodHMpID8gbWluaW11bUhlaWdodHMubGVuZ3RoIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gbGVuZ3RoOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWluaW11bUhlaWdodHMpKSB7CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IG1pbmltdW1IZWlnaHRzW2ldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCBtYXhpbXVtSGVpZ2h0cyA9IHZhbHVlLl9tYXhpbXVtSGVpZ2h0czsKICAgICAgICBsZW5ndGggPSBkZWZpbmVkX2RlZmF1bHQobWF4aW11bUhlaWdodHMpID8gbWF4aW11bUhlaWdodHMubGVuZ3RoIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gbGVuZ3RoOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWF4aW11bUhlaWdodHMpKSB7CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IG1heGltdW1IZWlnaHRzW2ldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrKHZhbHVlLl9lbGxpcHNvaWQsIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlLl9ncmFudWxhcml0eTsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hFbGxpcHNvaWQxOCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKEVsbGlwc29pZF9kZWZhdWx0LlVOSVRfU1BIRVJFKTsKICAgICAgc2NyYXRjaE9wdGlvbnMyNCA9IHsKICAgICAgICBwb3NpdGlvbnM6IHZvaWQgMCwKICAgICAgICBtaW5pbXVtSGVpZ2h0czogdm9pZCAwLAogICAgICAgIG1heGltdW1IZWlnaHRzOiB2b2lkIDAsCiAgICAgICAgZWxsaXBzb2lkOiBzY3JhdGNoRWxsaXBzb2lkMTgsCiAgICAgICAgZ3JhbnVsYXJpdHk6IHZvaWQgMAogICAgICB9OwogICAgICBXYWxsT3V0bGluZUdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhcnJheSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgbGV0IGk7CiAgICAgICAgbGV0IGxlbmd0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIHBvc2l0aW9uc1tpXSA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBsZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGxldCBtaW5pbXVtSGVpZ2h0czsKICAgICAgICBpZiAobGVuZ3RoID4gMCkgewogICAgICAgICAgbWluaW11bUhlaWdodHMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgICBtaW5pbXVtSGVpZ2h0c1tpXSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGxlbmd0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgbGV0IG1heGltdW1IZWlnaHRzOwogICAgICAgIGlmIChsZW5ndGggPiAwKSB7CiAgICAgICAgICBtYXhpbXVtSGVpZ2h0cyA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIG1heGltdW1IZWlnaHRzW2ldID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4LCBzY3JhdGNoRWxsaXBzb2lkMTgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gYXJyYXlbc3RhcnRpbmdJbmRleF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgc2NyYXRjaE9wdGlvbnMyNC5wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczI0Lm1pbmltdW1IZWlnaHRzID0gbWluaW11bUhlaWdodHM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczI0Lm1heGltdW1IZWlnaHRzID0gbWF4aW11bUhlaWdodHM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczI0LmdyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICAgICAgICByZXR1cm4gbmV3IFdhbGxPdXRsaW5lR2VvbWV0cnkoc2NyYXRjaE9wdGlvbnMyNCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fcG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgICAgIHJlc3VsdC5fbWluaW11bUhlaWdodHMgPSBtaW5pbXVtSGVpZ2h0czsKICAgICAgICByZXN1bHQuX21heGltdW1IZWlnaHRzID0gbWF4aW11bUhlaWdodHM7CiAgICAgICAgcmVzdWx0Ll9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWQsIHJlc3VsdC5fZWxsaXBzb2lkKTsKICAgICAgICByZXN1bHQuX2dyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgV2FsbE91dGxpbmVHZW9tZXRyeS5mcm9tQ29uc3RhbnRIZWlnaHRzID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG9wdGlvbnMucG9zaXRpb25zOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9ucykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJvcHRpb25zLnBvc2l0aW9ucyBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgbGV0IG1pbkhlaWdodHM7CiAgICAgICAgbGV0IG1heEhlaWdodHM7CiAgICAgICAgY29uc3QgbWluMyA9IG9wdGlvbnMubWluaW11bUhlaWdodDsKICAgICAgICBjb25zdCBtYXgzID0gb3B0aW9ucy5tYXhpbXVtSGVpZ2h0OwogICAgICAgIGNvbnN0IGRvTWluID0gZGVmaW5lZF9kZWZhdWx0KG1pbjMpOwogICAgICAgIGNvbnN0IGRvTWF4ID0gZGVmaW5lZF9kZWZhdWx0KG1heDMpOwogICAgICAgIGlmIChkb01pbiB8fCBkb01heCkgewogICAgICAgICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICAgIG1pbkhlaWdodHMgPSBkb01pbiA/IG5ldyBBcnJheShsZW5ndGgpIDogdm9pZCAwOwogICAgICAgICAgbWF4SGVpZ2h0cyA9IGRvTWF4ID8gbmV3IEFycmF5KGxlbmd0aCkgOiB2b2lkIDA7CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGlmIChkb01pbikgewogICAgICAgICAgICAgIG1pbkhlaWdodHNbaV0gPSBtaW4zOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChkb01heCkgewogICAgICAgICAgICAgIG1heEhlaWdodHNbaV0gPSBtYXgzOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IG5ld09wdGlvbnMgPSB7CiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICBtYXhpbXVtSGVpZ2h0czogbWF4SGVpZ2h0cywKICAgICAgICAgIG1pbmltdW1IZWlnaHRzOiBtaW5IZWlnaHRzLAogICAgICAgICAgZWxsaXBzb2lkOiBvcHRpb25zLmVsbGlwc29pZAogICAgICAgIH07CiAgICAgICAgcmV0dXJuIG5ldyBXYWxsT3V0bGluZUdlb21ldHJ5KG5ld09wdGlvbnMpOwogICAgICB9OwogICAgICBXYWxsT3V0bGluZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24od2FsbEdlb21ldHJ5KSB7CiAgICAgICAgY29uc3Qgd2FsbFBvc2l0aW9ucyA9IHdhbGxHZW9tZXRyeS5fcG9zaXRpb25zOwogICAgICAgIGNvbnN0IG1pbmltdW1IZWlnaHRzID0gd2FsbEdlb21ldHJ5Ll9taW5pbXVtSGVpZ2h0czsKICAgICAgICBjb25zdCBtYXhpbXVtSGVpZ2h0cyA9IHdhbGxHZW9tZXRyeS5fbWF4aW11bUhlaWdodHM7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSB3YWxsR2VvbWV0cnkuX2dyYW51bGFyaXR5OwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IHdhbGxHZW9tZXRyeS5fZWxsaXBzb2lkOwogICAgICAgIGNvbnN0IHBvcyA9IFdhbGxHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlUG9zaXRpb25zKAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgd2FsbFBvc2l0aW9ucywKICAgICAgICAgIG1heGltdW1IZWlnaHRzLAogICAgICAgICAgbWluaW11bUhlaWdodHMsCiAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgIGZhbHNlCiAgICAgICAgKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwb3MpKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IGJvdHRvbVBvc2l0aW9ucyA9IHBvcy5ib3R0b21Qb3NpdGlvbnM7CiAgICAgICAgY29uc3QgdG9wUG9zaXRpb25zID0gcG9zLnRvcFBvc2l0aW9uczsKICAgICAgICBsZXQgbGVuZ3RoID0gdG9wUG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBsZXQgc2l6ZSA9IGxlbmd0aCAqIDI7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShzaXplKTsKICAgICAgICBsZXQgcG9zaXRpb25JbmRleCA9IDA7CiAgICAgICAgbGVuZ3RoIC89IDM7CiAgICAgICAgbGV0IGk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICBjb25zdCBpMyA9IGkgKiAzOwogICAgICAgICAgY29uc3QgdG9wUG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICB0b3BQb3NpdGlvbnMsCiAgICAgICAgICAgIGkzLAogICAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuM1Bvc2l0aW9uMTIKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBib3R0b21Qb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgIGJvdHRvbVBvc2l0aW9ucywKICAgICAgICAgICAgaTMsCiAgICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb24yMgogICAgICAgICAgKTsKICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gYm90dG9tUG9zaXRpb24ueDsKICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gYm90dG9tUG9zaXRpb24ueTsKICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gYm90dG9tUG9zaXRpb24uejsKICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gdG9wUG9zaXRpb24ueDsKICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gdG9wUG9zaXRpb24ueTsKICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gdG9wUG9zaXRpb24uejsKICAgICAgICB9CiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCh7CiAgICAgICAgICBwb3NpdGlvbjogbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICAgIHZhbHVlczogcG9zaXRpb25zCiAgICAgICAgICB9KQogICAgICAgIH0pOwogICAgICAgIGNvbnN0IG51bVZlcnRpY2VzID0gc2l6ZSAvIDM7CiAgICAgICAgc2l6ZSA9IDIgKiBudW1WZXJ0aWNlcyAtIDQgKyBudW1WZXJ0aWNlczsKICAgICAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkobnVtVmVydGljZXMsIHNpemUpOwogICAgICAgIGxldCBlZGdlSW5kZXggPSAwOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1WZXJ0aWNlcyAtIDI7IGkgKz0gMikgewogICAgICAgICAgY29uc3QgTEwgPSBpOwogICAgICAgICAgY29uc3QgTFIgPSBpICsgMjsKICAgICAgICAgIGNvbnN0IHBsID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgICBMTCAqIDMsCiAgICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb24xMgogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHByID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgICBMUiAqIDMsCiAgICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb24yMgogICAgICAgICAgKTsKICAgICAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihwbCwgcHIsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTApKSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgVUwgPSBpICsgMTsKICAgICAgICAgIGNvbnN0IFVSID0gaSArIDM7CiAgICAgICAgICBpbmRpY2VzW2VkZ2VJbmRleCsrXSA9IFVMOwogICAgICAgICAgaW5kaWNlc1tlZGdlSW5kZXgrK10gPSBMTDsKICAgICAgICAgIGluZGljZXNbZWRnZUluZGV4KytdID0gVUw7CiAgICAgICAgICBpbmRpY2VzW2VkZ2VJbmRleCsrXSA9IFVSOwogICAgICAgICAgaW5kaWNlc1tlZGdlSW5kZXgrK10gPSBMTDsKICAgICAgICAgIGluZGljZXNbZWRnZUluZGV4KytdID0gTFI7CiAgICAgICAgfQogICAgICAgIGluZGljZXNbZWRnZUluZGV4KytdID0gbnVtVmVydGljZXMgLSAyOwogICAgICAgIGluZGljZXNbZWRnZUluZGV4KytdID0gbnVtVmVydGljZXMgLSAxOwogICAgICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgICBhdHRyaWJ1dGVzLAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5MSU5FUywKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlOiBuZXcgQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tVmVydGljZXMocG9zaXRpb25zKQogICAgICAgIH0pOwogICAgICB9OwogICAgICBXYWxsT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBXYWxsT3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlV2FsbE91dGxpbmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVXYWxsT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVXYWxsT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVdhbGxPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZVdhbGxPdXRsaW5lR2VvbWV0cnkod2FsbEdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICB3YWxsR2VvbWV0cnkgPSBXYWxsT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKHdhbGxHZW9tZXRyeSwgb2Zmc2V0KTsKICAgIH0KICAgIHdhbGxHZW9tZXRyeS5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUod2FsbEdlb21ldHJ5Ll9lbGxpcHNvaWQpOwogICAgcmV0dXJuIFdhbGxPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeSh3YWxsR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlV2FsbE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVdhbGxPdXRsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVdhbGxPdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9XYWxsT3V0bGluZUdlb21ldHJ5KCk7CiAgICAgIGNyZWF0ZVdhbGxPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZVdhbGxPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIG5vZGVfbW9kdWxlcy9kcmFjbzNkL2RyYWNvX2RlY29kZXJfbm9kZWpzLmpzCiAgdmFyIHJlcXVpcmVfZHJhY29fZGVjb2Rlcl9ub2RlanMgPSBfX2NvbW1vbkpTKHsKICAgICJub2RlX21vZHVsZXMvZHJhY28zZC9kcmFjb19kZWNvZGVyX25vZGVqcy5qcyIoZXhwb3J0czIsIG1vZHVsZSkgewogICAgICB2YXIgJGpzY29tcCA9ICRqc2NvbXAgfHwge307CiAgICAgICRqc2NvbXAuc2NvcGUgPSB7fTsKICAgICAgJGpzY29tcC5hcnJheUl0ZXJhdG9ySW1wbCA9IGZ1bmN0aW9uKGspIHsKICAgICAgICB2YXIgbiA9IDA7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuIG4gPCBrLmxlbmd0aCA/IHsgZG9uZTogZmFsc2UsIHZhbHVlOiBrW24rK10gfSA6IHsgZG9uZTogdHJ1ZSB9OwogICAgICAgIH07CiAgICAgIH07CiAgICAgICRqc2NvbXAuYXJyYXlJdGVyYXRvciA9IGZ1bmN0aW9uKGspIHsKICAgICAgICByZXR1cm4geyBuZXh0OiAkanNjb21wLmFycmF5SXRlcmF0b3JJbXBsKGspIH07CiAgICAgIH07CiAgICAgICRqc2NvbXAubWFrZUl0ZXJhdG9yID0gZnVuY3Rpb24oaykgewogICAgICAgIHZhciBuID0gInVuZGVmaW5lZCIgIT0gdHlwZW9mIFN5bWJvbCAmJiBTeW1ib2wuaXRlcmF0b3IgJiYga1tTeW1ib2wuaXRlcmF0b3JdOwogICAgICAgIHJldHVybiBuID8gbi5jYWxsKGspIDogJGpzY29tcC5hcnJheUl0ZXJhdG9yKGspOwogICAgICB9OwogICAgICAkanNjb21wLkFTU1VNRV9FUzUgPSBmYWxzZTsKICAgICAgJGpzY29tcC5BU1NVTUVfTk9fTkFUSVZFX01BUCA9IGZhbHNlOwogICAgICAkanNjb21wLkFTU1VNRV9OT19OQVRJVkVfU0VUID0gZmFsc2U7CiAgICAgICRqc2NvbXAuU0lNUExFX0ZST1VORF9QT0xZRklMTCA9IGZhbHNlOwogICAgICAkanNjb21wLklTT0xBVEVfUE9MWUZJTExTID0gZmFsc2U7CiAgICAgICRqc2NvbXAuRk9SQ0VfUE9MWUZJTExfUFJPTUlTRSA9IGZhbHNlOwogICAgICAkanNjb21wLkZPUkNFX1BPTFlGSUxMX1BST01JU0VfV0hFTl9OT19VTkhBTkRMRURfUkVKRUNUSU9OID0gZmFsc2U7CiAgICAgICRqc2NvbXAuZ2V0R2xvYmFsID0gZnVuY3Rpb24oaykgewogICAgICAgIGsgPSBbIm9iamVjdCIgPT0gdHlwZW9mIGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcywgaywgIm9iamVjdCIgPT0gdHlwZW9mIHdpbmRvdyAmJiB3aW5kb3csICJvYmplY3QiID09IHR5cGVvZiBzZWxmICYmIHNlbGYsICJvYmplY3QiID09IHR5cGVvZiBnbG9iYWwgJiYgZ2xvYmFsXTsKICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IGsubGVuZ3RoOyArK24pIHsKICAgICAgICAgIHZhciBsID0ga1tuXTsKICAgICAgICAgIGlmIChsICYmIGwuTWF0aCA9PSBNYXRoKQogICAgICAgICAgICByZXR1cm4gbDsKICAgICAgICB9CiAgICAgICAgdGhyb3cgRXJyb3IoIkNhbm5vdCBmaW5kIGdsb2JhbCBvYmplY3QiKTsKICAgICAgfTsKICAgICAgJGpzY29tcC5nbG9iYWwgPSAkanNjb21wLmdldEdsb2JhbChleHBvcnRzMik7CiAgICAgICRqc2NvbXAuZGVmaW5lUHJvcGVydHkgPSAkanNjb21wLkFTU1VNRV9FUzUgfHwgImZ1bmN0aW9uIiA9PSB0eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbihrLCBuLCBsKSB7CiAgICAgICAgaWYgKGsgPT0gQXJyYXkucHJvdG90eXBlIHx8IGsgPT0gT2JqZWN0LnByb3RvdHlwZSkKICAgICAgICAgIHJldHVybiBrOwogICAgICAgIGtbbl0gPSBsLnZhbHVlOwogICAgICAgIHJldHVybiBrOwogICAgICB9OwogICAgICAkanNjb21wLklTX1NZTUJPTF9OQVRJVkUgPSAiZnVuY3Rpb24iID09PSB0eXBlb2YgU3ltYm9sICYmICJzeW1ib2wiID09PSB0eXBlb2YgU3ltYm9sKCJ4Iik7CiAgICAgICRqc2NvbXAuVFJVU1RfRVM2X1BPTFlGSUxMUyA9ICEkanNjb21wLklTT0xBVEVfUE9MWUZJTExTIHx8ICRqc2NvbXAuSVNfU1lNQk9MX05BVElWRTsKICAgICAgJGpzY29tcC5wb2x5ZmlsbHMgPSB7fTsKICAgICAgJGpzY29tcC5wcm9wZXJ0eVRvUG9seWZpbGxTeW1ib2wgPSB7fTsKICAgICAgJGpzY29tcC5QT0xZRklMTF9QUkVGSVggPSAiJGpzY3AkIjsKICAgICAgJGpzY29tcC5wb2x5ZmlsbCA9IGZ1bmN0aW9uKGssIG4sIGwsIHApIHsKICAgICAgICBuICYmICgkanNjb21wLklTT0xBVEVfUE9MWUZJTExTID8gJGpzY29tcC5wb2x5ZmlsbElzb2xhdGVkKGssIG4sIGwsIHApIDogJGpzY29tcC5wb2x5ZmlsbFVuaXNvbGF0ZWQoaywgbiwgbCwgcCkpOwogICAgICB9OwogICAgICAkanNjb21wLnBvbHlmaWxsVW5pc29sYXRlZCA9IGZ1bmN0aW9uKGssIG4sIGwsIHApIHsKICAgICAgICBsID0gJGpzY29tcC5nbG9iYWw7CiAgICAgICAgayA9IGsuc3BsaXQoIi4iKTsKICAgICAgICBmb3IgKHAgPSAwOyBwIDwgay5sZW5ndGggLSAxOyBwKyspIHsKICAgICAgICAgIHZhciBoID0ga1twXTsKICAgICAgICAgIGlmICghKGggaW4gbCkpCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIGwgPSBsW2hdOwogICAgICAgIH0KICAgICAgICBrID0ga1trLmxlbmd0aCAtIDFdOwogICAgICAgIHAgPSBsW2tdOwogICAgICAgIG4gPSBuKHApOwogICAgICAgIG4gIT0gcCAmJiBudWxsICE9IG4gJiYgJGpzY29tcC5kZWZpbmVQcm9wZXJ0eShsLCBrLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlOiBuIH0pOwogICAgICB9OwogICAgICAkanNjb21wLnBvbHlmaWxsSXNvbGF0ZWQgPSBmdW5jdGlvbihrLCBuLCBsLCBwKSB7CiAgICAgICAgdmFyIGggPSBrLnNwbGl0KCIuIik7CiAgICAgICAgayA9IDEgPT09IGgubGVuZ3RoOwogICAgICAgIHAgPSBoWzBdOwogICAgICAgIHAgPSAhayAmJiBwIGluICRqc2NvbXAucG9seWZpbGxzID8gJGpzY29tcC5wb2x5ZmlsbHMgOiAkanNjb21wLmdsb2JhbDsKICAgICAgICBmb3IgKHZhciBBID0gMDsgQSA8IGgubGVuZ3RoIC0gMTsgQSsrKSB7CiAgICAgICAgICB2YXIgZiA9IGhbQV07CiAgICAgICAgICBpZiAoIShmIGluIHApKQogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICBwID0gcFtmXTsKICAgICAgICB9CiAgICAgICAgaCA9IGhbaC5sZW5ndGggLSAxXTsKICAgICAgICBsID0gJGpzY29tcC5JU19TWU1CT0xfTkFUSVZFICYmICJlczYiID09PSBsID8gcFtoXSA6IG51bGw7CiAgICAgICAgbiA9IG4obCk7CiAgICAgICAgbnVsbCAhPSBuICYmIChrID8gJGpzY29tcC5kZWZpbmVQcm9wZXJ0eSgkanNjb21wLnBvbHlmaWxscywgaCwgeyBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogbiB9KSA6IG4gIT09IGwgJiYgKHZvaWQgMCA9PT0gJGpzY29tcC5wcm9wZXJ0eVRvUG9seWZpbGxTeW1ib2xbaF0gJiYgKGwgPSAxZTkgKiBNYXRoLnJhbmRvbSgpID4+PiAwLCAkanNjb21wLnByb3BlcnR5VG9Qb2x5ZmlsbFN5bWJvbFtoXSA9ICRqc2NvbXAuSVNfU1lNQk9MX05BVElWRSA/ICRqc2NvbXAuZ2xvYmFsLlN5bWJvbChoKSA6ICRqc2NvbXAuUE9MWUZJTExfUFJFRklYICsgbCArICIkIiArIGgpLCAkanNjb21wLmRlZmluZVByb3BlcnR5KHAsICRqc2NvbXAucHJvcGVydHlUb1BvbHlmaWxsU3ltYm9sW2hdLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlOiBuIH0pKSk7CiAgICAgIH07CiAgICAgICRqc2NvbXAucG9seWZpbGwoIlByb21pc2UiLCBmdW5jdGlvbihrKSB7CiAgICAgICAgZnVuY3Rpb24gbigpIHsKICAgICAgICAgIHRoaXMuYmF0Y2hfID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gbChmKSB7CiAgICAgICAgICByZXR1cm4gZiBpbnN0YW5jZW9mIGggPyBmIDogbmV3IGgoZnVuY3Rpb24ocSwgdjMpIHsKICAgICAgICAgICAgcShmKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBpZiAoayAmJiAoISgkanNjb21wLkZPUkNFX1BPTFlGSUxMX1BST01JU0UgfHwgJGpzY29tcC5GT1JDRV9QT0xZRklMTF9QUk9NSVNFX1dIRU5fTk9fVU5IQU5ETEVEX1JFSkVDVElPTiAmJiAidW5kZWZpbmVkIiA9PT0gdHlwZW9mICRqc2NvbXAuZ2xvYmFsLlByb21pc2VSZWplY3Rpb25FdmVudCkgfHwgISRqc2NvbXAuZ2xvYmFsLlByb21pc2UgfHwgLTEgPT09ICRqc2NvbXAuZ2xvYmFsLlByb21pc2UudG9TdHJpbmcoKS5pbmRleE9mKCJbbmF0aXZlIGNvZGVdIikpKQogICAgICAgICAgcmV0dXJuIGs7CiAgICAgICAgbi5wcm90b3R5cGUuYXN5bmNFeGVjdXRlID0gZnVuY3Rpb24oZikgewogICAgICAgICAgaWYgKG51bGwgPT0gdGhpcy5iYXRjaF8pIHsKICAgICAgICAgICAgdGhpcy5iYXRjaF8gPSBbXTsKICAgICAgICAgICAgdmFyIHEgPSB0aGlzOwogICAgICAgICAgICB0aGlzLmFzeW5jRXhlY3V0ZUZ1bmN0aW9uKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHEuZXhlY3V0ZUJhdGNoXygpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuYmF0Y2hfLnB1c2goZik7CiAgICAgICAgfTsKICAgICAgICB2YXIgcCA9ICRqc2NvbXAuZ2xvYmFsLnNldFRpbWVvdXQ7CiAgICAgICAgbi5wcm90b3R5cGUuYXN5bmNFeGVjdXRlRnVuY3Rpb24gPSBmdW5jdGlvbihmKSB7CiAgICAgICAgICBwKGYsIDApOwogICAgICAgIH07CiAgICAgICAgbi5wcm90b3R5cGUuZXhlY3V0ZUJhdGNoXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgZm9yICg7IHRoaXMuYmF0Y2hfICYmIHRoaXMuYmF0Y2hfLmxlbmd0aDsgKSB7CiAgICAgICAgICAgIHZhciBmID0gdGhpcy5iYXRjaF87CiAgICAgICAgICAgIHRoaXMuYmF0Y2hfID0gW107CiAgICAgICAgICAgIGZvciAodmFyIHEgPSAwOyBxIDwgZi5sZW5ndGg7ICsrcSkgewogICAgICAgICAgICAgIHZhciB2MyA9IGZbcV07CiAgICAgICAgICAgICAgZltxXSA9IG51bGw7CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHYzKCk7CiAgICAgICAgICAgICAgfSBjYXRjaCAoeikgewogICAgICAgICAgICAgICAgdGhpcy5hc3luY1Rocm93Xyh6KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuYmF0Y2hfID0gbnVsbDsKICAgICAgICB9OwogICAgICAgIG4ucHJvdG90eXBlLmFzeW5jVGhyb3dfID0gZnVuY3Rpb24oZikgewogICAgICAgICAgdGhpcy5hc3luY0V4ZWN1dGVGdW5jdGlvbihmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhyb3cgZjsKICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAgICAgdmFyIGggPSBmdW5jdGlvbihmKSB7CiAgICAgICAgICB0aGlzLnN0YXRlXyA9IDA7CiAgICAgICAgICB0aGlzLnJlc3VsdF8gPSB2b2lkIDA7CiAgICAgICAgICB0aGlzLm9uU2V0dGxlZENhbGxiYWNrc18gPSBbXTsKICAgICAgICAgIHRoaXMuaXNSZWplY3Rpb25IYW5kbGVkXyA9IGZhbHNlOwogICAgICAgICAgdmFyIHEgPSB0aGlzLmNyZWF0ZVJlc29sdmVBbmRSZWplY3RfKCk7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBmKHEucmVzb2x2ZSwgcS5yZWplY3QpOwogICAgICAgICAgfSBjYXRjaCAodjMpIHsKICAgICAgICAgICAgcS5yZWplY3QodjMpOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgaC5wcm90b3R5cGUuY3JlYXRlUmVzb2x2ZUFuZFJlamVjdF8gPSBmdW5jdGlvbigpIHsKICAgICAgICAgIGZ1bmN0aW9uIGYoeikgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oTykgewogICAgICAgICAgICAgIHYzIHx8ICh2MyA9IHRydWUsIHouY2FsbChxLCBPKSk7CiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgcSA9IHRoaXMsIHYzID0gZmFsc2U7CiAgICAgICAgICByZXR1cm4geyByZXNvbHZlOiBmKHRoaXMucmVzb2x2ZVRvXyksIHJlamVjdDogZih0aGlzLnJlamVjdF8pIH07CiAgICAgICAgfTsKICAgICAgICBoLnByb3RvdHlwZS5yZXNvbHZlVG9fID0gZnVuY3Rpb24oZikgewogICAgICAgICAgaWYgKGYgPT09IHRoaXMpCiAgICAgICAgICAgIHRoaXMucmVqZWN0XyhuZXcgVHlwZUVycm9yKCJBIFByb21pc2UgY2Fubm90IHJlc29sdmUgdG8gaXRzZWxmIikpOwogICAgICAgICAgZWxzZSBpZiAoZiBpbnN0YW5jZW9mIGgpCiAgICAgICAgICAgIHRoaXMuc2V0dGxlU2FtZUFzUHJvbWlzZV8oZik7CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgYToKICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBmKSB7CiAgICAgICAgICAgICAgICBjYXNlICJvYmplY3QiOgogICAgICAgICAgICAgICAgICB2YXIgcSA9IG51bGwgIT0gZjsKICAgICAgICAgICAgICAgICAgYnJlYWsgYTsKICAgICAgICAgICAgICAgIGNhc2UgImZ1bmN0aW9uIjoKICAgICAgICAgICAgICAgICAgcSA9IHRydWU7CiAgICAgICAgICAgICAgICAgIGJyZWFrIGE7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICBxID0gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICBxID8gdGhpcy5yZXNvbHZlVG9Ob25Qcm9taXNlT2JqXyhmKSA6IHRoaXMuZnVsZmlsbF8oZik7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBoLnByb3RvdHlwZS5yZXNvbHZlVG9Ob25Qcm9taXNlT2JqXyA9IGZ1bmN0aW9uKGYpIHsKICAgICAgICAgIHZhciBxID0gdm9pZCAwOwogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcSA9IGYudGhlbjsKICAgICAgICAgIH0gY2F0Y2ggKHYzKSB7CiAgICAgICAgICAgIHRoaXMucmVqZWN0Xyh2Myk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgICJmdW5jdGlvbiIgPT0gdHlwZW9mIHEgPyB0aGlzLnNldHRsZVNhbWVBc1RoZW5hYmxlXyhxLCBmKSA6IHRoaXMuZnVsZmlsbF8oZik7CiAgICAgICAgfTsKICAgICAgICBoLnByb3RvdHlwZS5yZWplY3RfID0gZnVuY3Rpb24oZikgewogICAgICAgICAgdGhpcy5zZXR0bGVfKDIsIGYpOwogICAgICAgIH07CiAgICAgICAgaC5wcm90b3R5cGUuZnVsZmlsbF8gPSBmdW5jdGlvbihmKSB7CiAgICAgICAgICB0aGlzLnNldHRsZV8oMSwgZik7CiAgICAgICAgfTsKICAgICAgICBoLnByb3RvdHlwZS5zZXR0bGVfID0gZnVuY3Rpb24oZiwgcSkgewogICAgICAgICAgaWYgKDAgIT0gdGhpcy5zdGF0ZV8pCiAgICAgICAgICAgIHRocm93IEVycm9yKCJDYW5ub3Qgc2V0dGxlKCIgKyBmICsgIiwgIiArIHEgKyAiKTogUHJvbWlzZSBhbHJlYWR5IHNldHRsZWQgaW4gc3RhdGUiICsgdGhpcy5zdGF0ZV8pOwogICAgICAgICAgdGhpcy5zdGF0ZV8gPSBmOwogICAgICAgICAgdGhpcy5yZXN1bHRfID0gcTsKICAgICAgICAgIDIgPT09IHRoaXMuc3RhdGVfICYmIHRoaXMuc2NoZWR1bGVVbmhhbmRsZWRSZWplY3Rpb25DaGVja18oKTsKICAgICAgICAgIHRoaXMuZXhlY3V0ZU9uU2V0dGxlZENhbGxiYWNrc18oKTsKICAgICAgICB9OwogICAgICAgIGgucHJvdG90eXBlLnNjaGVkdWxlVW5oYW5kbGVkUmVqZWN0aW9uQ2hlY2tfID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICB2YXIgZiA9IHRoaXM7CiAgICAgICAgICBwKGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoZi5ub3RpZnlVbmhhbmRsZWRSZWplY3Rpb25fKCkpIHsKICAgICAgICAgICAgICB2YXIgcSA9ICRqc2NvbXAuZ2xvYmFsLmNvbnNvbGU7CiAgICAgICAgICAgICAgInVuZGVmaW5lZCIgIT09IHR5cGVvZiBxICYmIHEuZXJyb3IoZi5yZXN1bHRfKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSwgMSk7CiAgICAgICAgfTsKICAgICAgICBoLnByb3RvdHlwZS5ub3RpZnlVbmhhbmRsZWRSZWplY3Rpb25fID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZiAodGhpcy5pc1JlamVjdGlvbkhhbmRsZWRfKQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB2YXIgZiA9ICRqc2NvbXAuZ2xvYmFsLkN1c3RvbUV2ZW50LCBxID0gJGpzY29tcC5nbG9iYWwuRXZlbnQsIHYzID0gJGpzY29tcC5nbG9iYWwuZGlzcGF0Y2hFdmVudDsKICAgICAgICAgIGlmICgidW5kZWZpbmVkIiA9PT0gdHlwZW9mIHYzKQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICJmdW5jdGlvbiIgPT09IHR5cGVvZiBmID8gZiA9IG5ldyBmKCJ1bmhhbmRsZWRyZWplY3Rpb24iLCB7IGNhbmNlbGFibGU6IHRydWUgfSkgOiAiZnVuY3Rpb24iID09PSB0eXBlb2YgcSA/IGYgPSBuZXcgcSgidW5oYW5kbGVkcmVqZWN0aW9uIiwgeyBjYW5jZWxhYmxlOiB0cnVlIH0pIDogKGYgPSAkanNjb21wLmdsb2JhbC5kb2N1bWVudC5jcmVhdGVFdmVudCgiQ3VzdG9tRXZlbnQiKSwgZi5pbml0Q3VzdG9tRXZlbnQoInVuaGFuZGxlZHJlamVjdGlvbiIsIGZhbHNlLCB0cnVlLCBmKSk7CiAgICAgICAgICBmLnByb21pc2UgPSB0aGlzOwogICAgICAgICAgZi5yZWFzb24gPSB0aGlzLnJlc3VsdF87CiAgICAgICAgICByZXR1cm4gdjMoZik7CiAgICAgICAgfTsKICAgICAgICBoLnByb3RvdHlwZS5leGVjdXRlT25TZXR0bGVkQ2FsbGJhY2tzXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKG51bGwgIT0gdGhpcy5vblNldHRsZWRDYWxsYmFja3NfKSB7CiAgICAgICAgICAgIGZvciAodmFyIGYgPSAwOyBmIDwgdGhpcy5vblNldHRsZWRDYWxsYmFja3NfLmxlbmd0aDsgKytmKQogICAgICAgICAgICAgIEEuYXN5bmNFeGVjdXRlKHRoaXMub25TZXR0bGVkQ2FsbGJhY2tzX1tmXSk7CiAgICAgICAgICAgIHRoaXMub25TZXR0bGVkQ2FsbGJhY2tzXyA9IG51bGw7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICB2YXIgQSA9IG5ldyBuKCk7CiAgICAgICAgaC5wcm90b3R5cGUuc2V0dGxlU2FtZUFzUHJvbWlzZV8gPSBmdW5jdGlvbihmKSB7CiAgICAgICAgICB2YXIgcSA9IHRoaXMuY3JlYXRlUmVzb2x2ZUFuZFJlamVjdF8oKTsKICAgICAgICAgIGYuY2FsbFdoZW5TZXR0bGVkXyhxLnJlc29sdmUsIHEucmVqZWN0KTsKICAgICAgICB9OwogICAgICAgIGgucHJvdG90eXBlLnNldHRsZVNhbWVBc1RoZW5hYmxlXyA9IGZ1bmN0aW9uKGYsIHEpIHsKICAgICAgICAgIHZhciB2MyA9IHRoaXMuY3JlYXRlUmVzb2x2ZUFuZFJlamVjdF8oKTsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGYuY2FsbChxLCB2My5yZXNvbHZlLCB2My5yZWplY3QpOwogICAgICAgICAgfSBjYXRjaCAoeikgewogICAgICAgICAgICB2My5yZWplY3Qoeik7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBoLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24oZiwgcSkgewogICAgICAgICAgZnVuY3Rpb24gdjModCwgeCkgewogICAgICAgICAgICByZXR1cm4gImZ1bmN0aW9uIiA9PSB0eXBlb2YgdCA/IGZ1bmN0aW9uKEQpIHsKICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgeih0KEQpKTsKICAgICAgICAgICAgICB9IGNhdGNoIChSKSB7CiAgICAgICAgICAgICAgICBPKFIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSA6IHg7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgeiwgTywgYmEgPSBuZXcgaChmdW5jdGlvbih0LCB4KSB7CiAgICAgICAgICAgIHogPSB0OwogICAgICAgICAgICBPID0geDsKICAgICAgICAgIH0pOwogICAgICAgICAgdGhpcy5jYWxsV2hlblNldHRsZWRfKHYzKGYsIHopLCB2MyhxLCBPKSk7CiAgICAgICAgICByZXR1cm4gYmE7CiAgICAgICAgfTsKICAgICAgICBoLnByb3RvdHlwZS5jYXRjaCA9IGZ1bmN0aW9uKGYpIHsKICAgICAgICAgIHJldHVybiB0aGlzLnRoZW4odm9pZCAwLCBmKTsKICAgICAgICB9OwogICAgICAgIGgucHJvdG90eXBlLmNhbGxXaGVuU2V0dGxlZF8gPSBmdW5jdGlvbihmLCBxKSB7CiAgICAgICAgICBmdW5jdGlvbiB2MygpIHsKICAgICAgICAgICAgc3dpdGNoICh6LnN0YXRlXykgewogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgIGYoei5yZXN1bHRfKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHEoei5yZXN1bHRfKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcigiVW5leHBlY3RlZCBzdGF0ZTogIiArIHouc3RhdGVfKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdmFyIHogPSB0aGlzOwogICAgICAgICAgbnVsbCA9PSB0aGlzLm9uU2V0dGxlZENhbGxiYWNrc18gPyBBLmFzeW5jRXhlY3V0ZSh2MykgOiB0aGlzLm9uU2V0dGxlZENhbGxiYWNrc18ucHVzaCh2Myk7CiAgICAgICAgICB0aGlzLmlzUmVqZWN0aW9uSGFuZGxlZF8gPSB0cnVlOwogICAgICAgIH07CiAgICAgICAgaC5yZXNvbHZlID0gbDsKICAgICAgICBoLnJlamVjdCA9IGZ1bmN0aW9uKGYpIHsKICAgICAgICAgIHJldHVybiBuZXcgaChmdW5jdGlvbihxLCB2MykgewogICAgICAgICAgICB2MyhmKTsKICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAgICAgaC5yYWNlID0gZnVuY3Rpb24oZikgewogICAgICAgICAgcmV0dXJuIG5ldyBoKGZ1bmN0aW9uKHEsIHYzKSB7CiAgICAgICAgICAgIGZvciAodmFyIHogPSAkanNjb21wLm1ha2VJdGVyYXRvcihmKSwgTyA9IHoubmV4dCgpOyAhTy5kb25lOyBPID0gei5uZXh0KCkpCiAgICAgICAgICAgICAgbChPLnZhbHVlKS5jYWxsV2hlblNldHRsZWRfKHEsIHYzKTsKICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAgICAgaC5hbGwgPSBmdW5jdGlvbihmKSB7CiAgICAgICAgICB2YXIgcSA9ICRqc2NvbXAubWFrZUl0ZXJhdG9yKGYpLCB2MyA9IHEubmV4dCgpOwogICAgICAgICAgcmV0dXJuIHYzLmRvbmUgPyBsKFtdKSA6IG5ldyBoKGZ1bmN0aW9uKHosIE8pIHsKICAgICAgICAgICAgZnVuY3Rpb24gYmEoRCkgewogICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihSKSB7CiAgICAgICAgICAgICAgICB0W0RdID0gUjsKICAgICAgICAgICAgICAgIHgtLTsKICAgICAgICAgICAgICAgIDAgPT0geCAmJiB6KHQpOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHQgPSBbXSwgeCA9IDA7CiAgICAgICAgICAgIGRvCiAgICAgICAgICAgICAgdC5wdXNoKHZvaWQgMCksIHgrKywgbCh2My52YWx1ZSkuY2FsbFdoZW5TZXR0bGVkXyhiYSh0Lmxlbmd0aCAtIDEpLCBPKSwgdjMgPSBxLm5leHQoKTsKICAgICAgICAgICAgd2hpbGUgKCF2My5kb25lKTsKICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAgICAgcmV0dXJuIGg7CiAgICAgIH0sICJlczYiLCAiZXMzIik7CiAgICAgICRqc2NvbXAub3ducyA9IGZ1bmN0aW9uKGssIG4pIHsKICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGssIG4pOwogICAgICB9OwogICAgICAkanNjb21wLmFzc2lnbiA9ICRqc2NvbXAuVFJVU1RfRVM2X1BPTFlGSUxMUyAmJiAiZnVuY3Rpb24iID09IHR5cGVvZiBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uKGssIG4pIHsKICAgICAgICBmb3IgKHZhciBsID0gMTsgbCA8IGFyZ3VtZW50cy5sZW5ndGg7IGwrKykgewogICAgICAgICAgdmFyIHAgPSBhcmd1bWVudHNbbF07CiAgICAgICAgICBpZiAocCkKICAgICAgICAgICAgZm9yICh2YXIgaCBpbiBwKQogICAgICAgICAgICAgICRqc2NvbXAub3ducyhwLCBoKSAmJiAoa1toXSA9IHBbaF0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gazsKICAgICAgfTsKICAgICAgJGpzY29tcC5wb2x5ZmlsbCgiT2JqZWN0LmFzc2lnbiIsIGZ1bmN0aW9uKGspIHsKICAgICAgICByZXR1cm4gayB8fCAkanNjb21wLmFzc2lnbjsKICAgICAgfSwgImVzNiIsICJlczMiKTsKICAgICAgJGpzY29tcC5jaGVja1N0cmluZ0FyZ3MgPSBmdW5jdGlvbihrLCBuLCBsKSB7CiAgICAgICAgaWYgKG51bGwgPT0gaykKICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlRoZSAndGhpcycgdmFsdWUgZm9yIFN0cmluZy5wcm90b3R5cGUuIiArIGwgKyAiIG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkIik7CiAgICAgICAgaWYgKG4gaW5zdGFuY2VvZiBSZWdFeHApCiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJGaXJzdCBhcmd1bWVudCB0byBTdHJpbmcucHJvdG90eXBlLiIgKyBsICsgIiBtdXN0IG5vdCBiZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiIpOwogICAgICAgIHJldHVybiBrICsgIiI7CiAgICAgIH07CiAgICAgICRqc2NvbXAucG9seWZpbGwoIlN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCIsIGZ1bmN0aW9uKGspIHsKICAgICAgICByZXR1cm4gayA/IGsgOiBmdW5jdGlvbihuLCBsKSB7CiAgICAgICAgICB2YXIgcCA9ICRqc2NvbXAuY2hlY2tTdHJpbmdBcmdzKHRoaXMsIG4sICJzdGFydHNXaXRoIik7CiAgICAgICAgICBuICs9ICIiOwogICAgICAgICAgdmFyIGggPSBwLmxlbmd0aCwgQSA9IG4ubGVuZ3RoOwogICAgICAgICAgbCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGwgfCAwLCBwLmxlbmd0aCkpOwogICAgICAgICAgZm9yICh2YXIgZiA9IDA7IGYgPCBBICYmIGwgPCBoOyApCiAgICAgICAgICAgIGlmIChwW2wrK10gIT0gbltmKytdKQogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIHJldHVybiBmID49IEE7CiAgICAgICAgfTsKICAgICAgfSwgImVzNiIsICJlczMiKTsKICAgICAgJGpzY29tcC5wb2x5ZmlsbCgiQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4iLCBmdW5jdGlvbihrKSB7CiAgICAgICAgZnVuY3Rpb24gbihsKSB7CiAgICAgICAgICBsID0gTnVtYmVyKGwpOwogICAgICAgICAgcmV0dXJuIEluZmluaXR5ID09PSBsIHx8IC1JbmZpbml0eSA9PT0gbCA/IGwgOiBsIHwgMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGsgPyBrIDogZnVuY3Rpb24obCwgcCwgaCkgewogICAgICAgICAgdmFyIEEgPSB0aGlzLmxlbmd0aDsKICAgICAgICAgIGwgPSBuKGwpOwogICAgICAgICAgcCA9IG4ocCk7CiAgICAgICAgICBoID0gdm9pZCAwID09PSBoID8gQSA6IG4oaCk7CiAgICAgICAgICBsID0gMCA+IGwgPyBNYXRoLm1heChBICsgbCwgMCkgOiBNYXRoLm1pbihsLCBBKTsKICAgICAgICAgIHAgPSAwID4gcCA/IE1hdGgubWF4KEEgKyBwLCAwKSA6IE1hdGgubWluKHAsIEEpOwogICAgICAgICAgaCA9IDAgPiBoID8gTWF0aC5tYXgoQSArIGgsIDApIDogTWF0aC5taW4oaCwgQSk7CiAgICAgICAgICBpZiAobCA8IHApCiAgICAgICAgICAgIGZvciAoOyBwIDwgaDsgKQogICAgICAgICAgICAgIHAgaW4gdGhpcyA/IHRoaXNbbCsrXSA9IHRoaXNbcCsrXSA6IChkZWxldGUgdGhpc1tsKytdLCBwKyspOwogICAgICAgICAgZWxzZQogICAgICAgICAgICBmb3IgKGggPSBNYXRoLm1pbihoLCBBICsgcCAtIGwpLCBsICs9IGggLSBwOyBoID4gcDsgKQogICAgICAgICAgICAgIC0taCBpbiB0aGlzID8gdGhpc1stLWxdID0gdGhpc1toXSA6IGRlbGV0ZSB0aGlzWy0tbF07CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICB9LCAiZXM2IiwgImVzMyIpOwogICAgICAkanNjb21wLnR5cGVkQXJyYXlDb3B5V2l0aGluID0gZnVuY3Rpb24oaykgewogICAgICAgIHJldHVybiBrID8gayA6IEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluOwogICAgICB9OwogICAgICAkanNjb21wLnBvbHlmaWxsKCJJbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4iLCAkanNjb21wLnR5cGVkQXJyYXlDb3B5V2l0aGluLCAiZXM2IiwgImVzNSIpOwogICAgICAkanNjb21wLnBvbHlmaWxsKCJVaW50OEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluIiwgJGpzY29tcC50eXBlZEFycmF5Q29weVdpdGhpbiwgImVzNiIsICJlczUiKTsKICAgICAgJGpzY29tcC5wb2x5ZmlsbCgiVWludDhDbGFtcGVkQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4iLCAkanNjb21wLnR5cGVkQXJyYXlDb3B5V2l0aGluLCAiZXM2IiwgImVzNSIpOwogICAgICAkanNjb21wLnBvbHlmaWxsKCJJbnQxNkFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluIiwgJGpzY29tcC50eXBlZEFycmF5Q29weVdpdGhpbiwgImVzNiIsICJlczUiKTsKICAgICAgJGpzY29tcC5wb2x5ZmlsbCgiVWludDE2QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4iLCAkanNjb21wLnR5cGVkQXJyYXlDb3B5V2l0aGluLCAiZXM2IiwgImVzNSIpOwogICAgICAkanNjb21wLnBvbHlmaWxsKCJJbnQzMkFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluIiwgJGpzY29tcC50eXBlZEFycmF5Q29weVdpdGhpbiwgImVzNiIsICJlczUiKTsKICAgICAgJGpzY29tcC5wb2x5ZmlsbCgiVWludDMyQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4iLCAkanNjb21wLnR5cGVkQXJyYXlDb3B5V2l0aGluLCAiZXM2IiwgImVzNSIpOwogICAgICAkanNjb21wLnBvbHlmaWxsKCJGbG9hdDMyQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4iLCAkanNjb21wLnR5cGVkQXJyYXlDb3B5V2l0aGluLCAiZXM2IiwgImVzNSIpOwogICAgICAkanNjb21wLnBvbHlmaWxsKCJGbG9hdDY0QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4iLCAkanNjb21wLnR5cGVkQXJyYXlDb3B5V2l0aGluLCAiZXM2IiwgImVzNSIpOwogICAgICB2YXIgRHJhY29EZWNvZGVyTW9kdWxlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGsgPSAidW5kZWZpbmVkIiAhPT0gdHlwZW9mIGRvY3VtZW50ICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgPyBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyA6IHZvaWQgMDsKICAgICAgICAidW5kZWZpbmVkIiAhPT0gdHlwZW9mIF9fZmlsZW5hbWUgJiYgKGsgPSBrIHx8IF9fZmlsZW5hbWUpOwogICAgICAgIHJldHVybiBmdW5jdGlvbihuKSB7CiAgICAgICAgICBmdW5jdGlvbiBsKGUpIHsKICAgICAgICAgICAgcmV0dXJuIGEzLmxvY2F0ZUZpbGUgPyBhMy5sb2NhdGVGaWxlKGUsIFUpIDogVSArIGU7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBwKGUsIGIsIGMpIHsKICAgICAgICAgICAgdmFyIGQgPSBiICsgYzsKICAgICAgICAgICAgZm9yIChjID0gYjsgZVtjXSAmJiAhKGMgPj0gZCk7ICkKICAgICAgICAgICAgICArK2M7CiAgICAgICAgICAgIGlmICgxNiA8IGMgLSBiICYmIGUuYnVmZmVyICYmIHZhKQogICAgICAgICAgICAgIHJldHVybiB2YS5kZWNvZGUoZS5zdWJhcnJheShiLCBjKSk7CiAgICAgICAgICAgIGZvciAoZCA9ICIiOyBiIDwgYzsgKSB7CiAgICAgICAgICAgICAgdmFyIGcgPSBlW2IrK107CiAgICAgICAgICAgICAgaWYgKGcgJiAxMjgpIHsKICAgICAgICAgICAgICAgIHZhciB1MyA9IGVbYisrXSAmIDYzOwogICAgICAgICAgICAgICAgaWYgKDE5MiA9PSAoZyAmIDIyNCkpCiAgICAgICAgICAgICAgICAgIGQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoZyAmIDMxKSA8PCA2IHwgdTMpOwogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgIHZhciBYID0gZVtiKytdICYgNjM7CiAgICAgICAgICAgICAgICAgIGcgPSAyMjQgPT0gKGcgJiAyNDApID8gKGcgJiAxNSkgPDwgMTIgfCB1MyA8PCA2IHwgWCA6IChnICYgNykgPDwgMTggfCB1MyA8PCAxMiB8IFggPDwgNiB8IGVbYisrXSAmIDYzOwogICAgICAgICAgICAgICAgICA2NTUzNiA+IGcgPyBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZykgOiAoZyAtPSA2NTUzNiwgZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2IHwgZyA+PiAxMCwgNTYzMjAgfCBnICYgMTAyMykpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gZWxzZQogICAgICAgICAgICAgICAgZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGcpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBkOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gaChlLCBiKSB7CiAgICAgICAgICAgIHJldHVybiBlID8gcChlYSwgZSwgYikgOiAiIjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIEEoKSB7CiAgICAgICAgICAgIHZhciBlID0gamEuYnVmZmVyOwogICAgICAgICAgICBhMy5IRUFQOCA9IFkgPSBuZXcgSW50OEFycmF5KGUpOwogICAgICAgICAgICBhMy5IRUFQMTYgPSBuZXcgSW50MTZBcnJheShlKTsKICAgICAgICAgICAgYTMuSEVBUDMyID0gY2EgPSBuZXcgSW50MzJBcnJheShlKTsKICAgICAgICAgICAgYTMuSEVBUFU4ID0gZWEgPSBuZXcgVWludDhBcnJheShlKTsKICAgICAgICAgICAgYTMuSEVBUFUxNiA9IG5ldyBVaW50MTZBcnJheShlKTsKICAgICAgICAgICAgYTMuSEVBUFUzMiA9IFYgPSBuZXcgVWludDMyQXJyYXkoZSk7CiAgICAgICAgICAgIGEzLkhFQVBGMzIgPSBuZXcgRmxvYXQzMkFycmF5KGUpOwogICAgICAgICAgICBhMy5IRUFQRjY0ID0gbmV3IEZsb2F0NjRBcnJheShlKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGYoZSkgewogICAgICAgICAgICBpZiAoYTMub25BYm9ydCkKICAgICAgICAgICAgICBhMy5vbkFib3J0KGUpOwogICAgICAgICAgICBlID0gIkFib3J0ZWQoIiArIGUgKyAiKSI7CiAgICAgICAgICAgIGRhKGUpOwogICAgICAgICAgICB3YSA9IHRydWU7CiAgICAgICAgICAgIGUgPSBuZXcgV2ViQXNzZW1ibHkuUnVudGltZUVycm9yKGUgKyAiLiBCdWlsZCB3aXRoIC1zQVNTRVJUSU9OUyBmb3IgbW9yZSBpbmZvLiIpOwogICAgICAgICAgICBrYShlKTsKICAgICAgICAgICAgdGhyb3cgZTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHEoZSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGlmIChlID09IFAgJiYgZmEpCiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZmEpOwogICAgICAgICAgICAgIGlmIChtYSkKICAgICAgICAgICAgICAgIHJldHVybiBtYShlKTsKICAgICAgICAgICAgICB0aHJvdyAiYm90aCBhc3luYyBhbmQgc3luYyBmZXRjaGluZyBvZiB0aGUgd2FzbSBmYWlsZWQiOwogICAgICAgICAgICB9IGNhdGNoIChiKSB7CiAgICAgICAgICAgICAgZihiKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gdjMoKSB7CiAgICAgICAgICAgIGlmICghZmEgJiYgKHhhIHx8IGhhKSkgewogICAgICAgICAgICAgIGlmICgiZnVuY3Rpb24iID09IHR5cGVvZiBmZXRjaCAmJiAhUC5zdGFydHNXaXRoKCJmaWxlOi8vIikpCiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2goUCwgeyBjcmVkZW50aWFsczogInNhbWUtb3JpZ2luIiB9KS50aGVuKGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgaWYgKCFlLm9rKQogICAgICAgICAgICAgICAgICAgIHRocm93ICJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICciICsgUCArICInIjsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuYXJyYXlCdWZmZXIoKTsKICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gcShQKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGlmIChuYSkKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihlLCBiKSB7CiAgICAgICAgICAgICAgICAgIG5hKFAsIGZ1bmN0aW9uKGMpIHsKICAgICAgICAgICAgICAgICAgICBlKG5ldyBVaW50OEFycmF5KGMpKTsKICAgICAgICAgICAgICAgICAgfSwgYik7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICByZXR1cm4gcShQKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiB6KGUpIHsKICAgICAgICAgICAgZm9yICg7IDAgPCBlLmxlbmd0aDsgKQogICAgICAgICAgICAgIGUuc2hpZnQoKShhMyk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBPKGUpIHsKICAgICAgICAgICAgdGhpcy5leGNQdHIgPSBlOwogICAgICAgICAgICB0aGlzLnB0ciA9IGUgLSAyNDsKICAgICAgICAgICAgdGhpcy5zZXRfdHlwZSA9IGZ1bmN0aW9uKGIpIHsKICAgICAgICAgICAgICBWW3RoaXMucHRyICsgNCA+PiAyXSA9IGI7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMuZ2V0X3R5cGUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICByZXR1cm4gVlt0aGlzLnB0ciArIDQgPj4gMl07CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMuc2V0X2Rlc3RydWN0b3IgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgICAgVlt0aGlzLnB0ciArIDggPj4gMl0gPSBiOwogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLmdldF9kZXN0cnVjdG9yID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgcmV0dXJuIFZbdGhpcy5wdHIgKyA4ID4+IDJdOwogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLnNldF9yZWZjb3VudCA9IGZ1bmN0aW9uKGIpIHsKICAgICAgICAgICAgICBjYVt0aGlzLnB0ciA+PiAyXSA9IGI7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMuc2V0X2NhdWdodCA9IGZ1bmN0aW9uKGIpIHsKICAgICAgICAgICAgICBZW3RoaXMucHRyICsgMTIgPj4gMF0gPSBiID8gMSA6IDA7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMuZ2V0X2NhdWdodCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHJldHVybiAwICE9IFlbdGhpcy5wdHIgKyAxMiA+PiAwXTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdGhpcy5zZXRfcmV0aHJvd24gPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgICAgWVt0aGlzLnB0ciArIDEzID4+IDBdID0gYiA/IDEgOiAwOwogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLmdldF9yZXRocm93biA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHJldHVybiAwICE9IFlbdGhpcy5wdHIgKyAxMyA+PiAwXTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdGhpcy5pbml0ID0gZnVuY3Rpb24oYiwgYykgewogICAgICAgICAgICAgIHRoaXMuc2V0X2FkanVzdGVkX3B0cigwKTsKICAgICAgICAgICAgICB0aGlzLnNldF90eXBlKGIpOwogICAgICAgICAgICAgIHRoaXMuc2V0X2Rlc3RydWN0b3IoYyk7CiAgICAgICAgICAgICAgdGhpcy5zZXRfcmVmY291bnQoMCk7CiAgICAgICAgICAgICAgdGhpcy5zZXRfY2F1Z2h0KGZhbHNlKTsKICAgICAgICAgICAgICB0aGlzLnNldF9yZXRocm93bihmYWxzZSk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMuYWRkX3JlZiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIGNhW3RoaXMucHRyID4+IDJdICs9IDE7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMucmVsZWFzZV9yZWYgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICB2YXIgYiA9IGNhW3RoaXMucHRyID4+IDJdOwogICAgICAgICAgICAgIGNhW3RoaXMucHRyID4+IDJdID0gYiAtIDE7CiAgICAgICAgICAgICAgcmV0dXJuIDEgPT09IGI7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMuc2V0X2FkanVzdGVkX3B0ciA9IGZ1bmN0aW9uKGIpIHsKICAgICAgICAgICAgICBWW3RoaXMucHRyICsgMTYgPj4gMl0gPSBiOwogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLmdldF9hZGp1c3RlZF9wdHIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICByZXR1cm4gVlt0aGlzLnB0ciArIDE2ID4+IDJdOwogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLmdldF9leGNlcHRpb25fcHRyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgaWYgKHlhKHRoaXMuZ2V0X3R5cGUoKSkpCiAgICAgICAgICAgICAgICByZXR1cm4gVlt0aGlzLmV4Y1B0ciA+PiAyXTsKICAgICAgICAgICAgICB2YXIgYiA9IHRoaXMuZ2V0X2FkanVzdGVkX3B0cigpOwogICAgICAgICAgICAgIHJldHVybiAwICE9PSBiID8gYiA6IHRoaXMuZXhjUHRyOwogICAgICAgICAgICB9OwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gYmEoKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIGUoKSB7CiAgICAgICAgICAgICAgaWYgKCFsYSAmJiAobGEgPSB0cnVlLCBhMy5jYWxsZWRSdW4gPSB0cnVlLCAhd2EpKSB7CiAgICAgICAgICAgICAgICB6YSA9IHRydWU7CiAgICAgICAgICAgICAgICB6KG9hKTsKICAgICAgICAgICAgICAgIEFhKGEzKTsKICAgICAgICAgICAgICAgIGlmIChhMy5vblJ1bnRpbWVJbml0aWFsaXplZCkKICAgICAgICAgICAgICAgICAgYTMub25SdW50aW1lSW5pdGlhbGl6ZWQoKTsKICAgICAgICAgICAgICAgIGlmIChhMy5wb3N0UnVuKQogICAgICAgICAgICAgICAgICBmb3IgKCJmdW5jdGlvbiIgPT0gdHlwZW9mIGEzLnBvc3RSdW4gJiYgKGEzLnBvc3RSdW4gPSBbYTMucG9zdFJ1bl0pOyBhMy5wb3N0UnVuLmxlbmd0aDsgKQogICAgICAgICAgICAgICAgICAgIEJhLnVuc2hpZnQoYTMucG9zdFJ1bi5zaGlmdCgpKTsKICAgICAgICAgICAgICAgIHooQmEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoISgwIDwgYWEpKSB7CiAgICAgICAgICAgICAgaWYgKGEzLnByZVJ1bikKICAgICAgICAgICAgICAgIGZvciAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgYTMucHJlUnVuICYmIChhMy5wcmVSdW4gPSBbYTMucHJlUnVuXSk7IGEzLnByZVJ1bi5sZW5ndGg7ICkKICAgICAgICAgICAgICAgICAgQ2EudW5zaGlmdChhMy5wcmVSdW4uc2hpZnQoKSk7CiAgICAgICAgICAgICAgeihDYSk7CiAgICAgICAgICAgICAgMCA8IGFhIHx8IChhMy5zZXRTdGF0dXMgPyAoYTMuc2V0U3RhdHVzKCJSdW5uaW5nLi4uIiksIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICBhMy5zZXRTdGF0dXMoIiIpOwogICAgICAgICAgICAgICAgfSwgMSk7CiAgICAgICAgICAgICAgICBlKCk7CiAgICAgICAgICAgICAgfSwgMSkpIDogZSgpKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gdCgpIHsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHgoZSkgewogICAgICAgICAgICByZXR1cm4gKGUgfHwgdCkuX19jYWNoZV9fOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gRChlLCBiKSB7CiAgICAgICAgICAgIHZhciBjID0geChiKSwgZCA9IGNbZV07CiAgICAgICAgICAgIGlmIChkKQogICAgICAgICAgICAgIHJldHVybiBkOwogICAgICAgICAgICBkID0gT2JqZWN0LmNyZWF0ZSgoYiB8fCB0KS5wcm90b3R5cGUpOwogICAgICAgICAgICBkLnB0ciA9IGU7CiAgICAgICAgICAgIHJldHVybiBjW2VdID0gZDsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIFIoZSkgewogICAgICAgICAgICBpZiAoInN0cmluZyIgPT09IHR5cGVvZiBlKSB7CiAgICAgICAgICAgICAgZm9yICh2YXIgYiA9IDAsIGMgPSAwOyBjIDwgZS5sZW5ndGg7ICsrYykgewogICAgICAgICAgICAgICAgdmFyIGQgPSBlLmNoYXJDb2RlQXQoYyk7CiAgICAgICAgICAgICAgICAxMjcgPj0gZCA/IGIrKyA6IDIwNDcgPj0gZCA/IGIgKz0gMiA6IDU1Mjk2IDw9IGQgJiYgNTczNDMgPj0gZCA/IChiICs9IDQsICsrYykgOiBiICs9IDM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGIgPSBBcnJheShiICsgMSk7CiAgICAgICAgICAgICAgYyA9IDA7CiAgICAgICAgICAgICAgZCA9IGIubGVuZ3RoOwogICAgICAgICAgICAgIGlmICgwIDwgZCkgewogICAgICAgICAgICAgICAgZCA9IGMgKyBkIC0gMTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGcgPSAwOyBnIDwgZS5sZW5ndGg7ICsrZykgewogICAgICAgICAgICAgICAgICB2YXIgdTMgPSBlLmNoYXJDb2RlQXQoZyk7CiAgICAgICAgICAgICAgICAgIGlmICg1NTI5NiA8PSB1MyAmJiA1NzM0MyA+PSB1MykgewogICAgICAgICAgICAgICAgICAgIHZhciBYID0gZS5jaGFyQ29kZUF0KCsrZyk7CiAgICAgICAgICAgICAgICAgICAgdTMgPSA2NTUzNiArICgodTMgJiAxMDIzKSA8PCAxMCkgfCBYICYgMTAyMzsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoMTI3ID49IHUzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGMgPj0gZCkKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGJbYysrXSA9IHUzOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmICgyMDQ3ID49IHUzKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoYyArIDEgPj0gZCkKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICBiW2MrK10gPSAxOTIgfCB1MyA+PiA2OwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoNjU1MzUgPj0gdTMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMgKyAyID49IGQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGJbYysrXSA9IDIyNCB8IHUzID4+IDEyOwogICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMgKyAzID49IGQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGJbYysrXSA9IDI0MCB8IHUzID4+IDE4OwogICAgICAgICAgICAgICAgICAgICAgICBiW2MrK10gPSAxMjggfCB1MyA+PiAxMiAmIDYzOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgYltjKytdID0gMTI4IHwgdTMgPj4gNiAmIDYzOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBiW2MrK10gPSAxMjggfCB1MyAmIDYzOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBiW2NdID0gMDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZSA9IHIuYWxsb2MoYiwgWSk7CiAgICAgICAgICAgICAgci5jb3B5KGIsIFksIGUpOwogICAgICAgICAgICAgIHJldHVybiBlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBlOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gcGEoZSkgewogICAgICAgICAgICBpZiAoIm9iamVjdCIgPT09IHR5cGVvZiBlKSB7CiAgICAgICAgICAgICAgdmFyIGIgPSByLmFsbG9jKGUsIFkpOwogICAgICAgICAgICAgIHIuY29weShlLCBZLCBiKTsKICAgICAgICAgICAgICByZXR1cm4gYjsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIFooKSB7CiAgICAgICAgICAgIHRocm93ICJjYW5ub3QgY29uc3RydWN0IGEgVm9pZFB0ciwgbm8gY29uc3RydWN0b3IgaW4gSURMIjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIFMoKSB7CiAgICAgICAgICAgIHRoaXMucHRyID0gRGEoKTsKICAgICAgICAgICAgeChTKVt0aGlzLnB0cl0gPSB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gUSgpIHsKICAgICAgICAgICAgdGhpcy5wdHIgPSBFYSgpOwogICAgICAgICAgICB4KFEpW3RoaXMucHRyXSA9IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBXKCkgewogICAgICAgICAgICB0aGlzLnB0ciA9IEZhKCk7CiAgICAgICAgICAgIHgoVylbdGhpcy5wdHJdID0gdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHcoKSB7CiAgICAgICAgICAgIHRoaXMucHRyID0gR2EoKTsKICAgICAgICAgICAgeCh3KVt0aGlzLnB0cl0gPSB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gQygpIHsKICAgICAgICAgICAgdGhpcy5wdHIgPSBIYSgpOwogICAgICAgICAgICB4KEMpW3RoaXMucHRyXSA9IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBGKCkgewogICAgICAgICAgICB0aGlzLnB0ciA9IElhKCk7CiAgICAgICAgICAgIHgoRilbdGhpcy5wdHJdID0gdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIEcoKSB7CiAgICAgICAgICAgIHRoaXMucHRyID0gSmEoKTsKICAgICAgICAgICAgeChHKVt0aGlzLnB0cl0gPSB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gRSgpIHsKICAgICAgICAgICAgdGhpcy5wdHIgPSBLYSgpOwogICAgICAgICAgICB4KEUpW3RoaXMucHRyXSA9IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBUKCkgewogICAgICAgICAgICB0aGlzLnB0ciA9IExhKCk7CiAgICAgICAgICAgIHgoVClbdGhpcy5wdHJdID0gdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIEIoKSB7CiAgICAgICAgICAgIHRocm93ICJjYW5ub3QgY29uc3RydWN0IGEgU3RhdHVzLCBubyBjb25zdHJ1Y3RvciBpbiBJREwiOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gSCgpIHsKICAgICAgICAgICAgdGhpcy5wdHIgPSBNYSgpOwogICAgICAgICAgICB4KEgpW3RoaXMucHRyXSA9IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBJKCkgewogICAgICAgICAgICB0aGlzLnB0ciA9IE5hKCk7CiAgICAgICAgICAgIHgoSSlbdGhpcy5wdHJdID0gdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIEooKSB7CiAgICAgICAgICAgIHRoaXMucHRyID0gT2EoKTsKICAgICAgICAgICAgeChKKVt0aGlzLnB0cl0gPSB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gSygpIHsKICAgICAgICAgICAgdGhpcy5wdHIgPSBQYSgpOwogICAgICAgICAgICB4KEspW3RoaXMucHRyXSA9IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBMKCkgewogICAgICAgICAgICB0aGlzLnB0ciA9IFFhKCk7CiAgICAgICAgICAgIHgoTClbdGhpcy5wdHJdID0gdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIE0oKSB7CiAgICAgICAgICAgIHRoaXMucHRyID0gUmEoKTsKICAgICAgICAgICAgeChNKVt0aGlzLnB0cl0gPSB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gTigpIHsKICAgICAgICAgICAgdGhpcy5wdHIgPSBTYSgpOwogICAgICAgICAgICB4KE4pW3RoaXMucHRyXSA9IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiB5KCkgewogICAgICAgICAgICB0aGlzLnB0ciA9IFRhKCk7CiAgICAgICAgICAgIHgoeSlbdGhpcy5wdHJdID0gdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIG0oKSB7CiAgICAgICAgICAgIHRoaXMucHRyID0gVWEoKTsKICAgICAgICAgICAgeChtKVt0aGlzLnB0cl0gPSB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgbiA9IHZvaWQgMCA9PT0gbiA/IHt9IDogbjsKICAgICAgICAgIHZhciBhMyA9ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBuID8gbiA6IHt9LCBBYSwga2E7CiAgICAgICAgICBhMy5yZWFkeSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKGUsIGIpIHsKICAgICAgICAgICAgQWEgPSBlOwogICAgICAgICAgICBrYSA9IGI7CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBWYSA9IGZhbHNlLCBXYSA9IGZhbHNlOwogICAgICAgICAgYTMub25SdW50aW1lSW5pdGlhbGl6ZWQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgVmEgPSB0cnVlOwogICAgICAgICAgICBpZiAoV2EgJiYgImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGEzLm9uTW9kdWxlTG9hZGVkKQogICAgICAgICAgICAgIGEzLm9uTW9kdWxlTG9hZGVkKGEzKTsKICAgICAgICAgIH07CiAgICAgICAgICBhMy5vbk1vZHVsZVBhcnNlZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBXYSA9IHRydWU7CiAgICAgICAgICAgIGlmIChWYSAmJiAiZnVuY3Rpb24iID09PSB0eXBlb2YgYTMub25Nb2R1bGVMb2FkZWQpCiAgICAgICAgICAgICAgYTMub25Nb2R1bGVMb2FkZWQoYTMpOwogICAgICAgICAgfTsKICAgICAgICAgIGEzLmlzVmVyc2lvblN1cHBvcnRlZCA9IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgaWYgKCJzdHJpbmciICE9PSB0eXBlb2YgZSkKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGUgPSBlLnNwbGl0KCIuIik7CiAgICAgICAgICAgIHJldHVybiAyID4gZS5sZW5ndGggfHwgMyA8IGUubGVuZ3RoID8gZmFsc2UgOiAxID09IGVbMF0gJiYgMCA8PSBlWzFdICYmIDUgPj0gZVsxXSA/IHRydWUgOiAwICE9IGVbMF0gfHwgMTAgPCBlWzFdID8gZmFsc2UgOiB0cnVlOwogICAgICAgICAgfTsKICAgICAgICAgIHZhciBYYSA9IE9iamVjdC5hc3NpZ24oe30sIGEzKSwgeGEgPSAib2JqZWN0IiA9PSB0eXBlb2Ygd2luZG93LCBoYSA9ICJmdW5jdGlvbiIgPT0gdHlwZW9mIGltcG9ydFNjcmlwdHMsIFlhID0gIm9iamVjdCIgPT0gdHlwZW9mIHByb2Nlc3MgJiYgIm9iamVjdCIgPT0gdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMgJiYgInN0cmluZyIgPT0gdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSwgVSA9ICIiOwogICAgICAgICAgaWYgKFlhKSB7CiAgICAgICAgICAgIHZhciBaYSA9IF9fcmVxdWlyZSgiZnMiKSwgcWEgPSBfX3JlcXVpcmUoInBhdGgiKTsKICAgICAgICAgICAgVSA9IGhhID8gcWEuZGlybmFtZShVKSArICIvIiA6IF9fZGlybmFtZSArICIvIjsKICAgICAgICAgICAgdmFyICRhID0gZnVuY3Rpb24oZSwgYikgewogICAgICAgICAgICAgIGUgPSBlLnN0YXJ0c1dpdGgoImZpbGU6Ly8iKSA/IG5ldyBVUkwoZSkgOiBxYS5ub3JtYWxpemUoZSk7CiAgICAgICAgICAgICAgcmV0dXJuIFphLnJlYWRGaWxlU3luYyhlLCBiID8gdm9pZCAwIDogInV0ZjgiKTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIG1hID0gZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgIGUgPSAkYShlLCB0cnVlKTsKICAgICAgICAgICAgICBlLmJ1ZmZlciB8fCAoZSA9IG5ldyBVaW50OEFycmF5KGUpKTsKICAgICAgICAgICAgICByZXR1cm4gZTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIG5hID0gZnVuY3Rpb24oZSwgYiwgYykgewogICAgICAgICAgICAgIGUgPSBlLnN0YXJ0c1dpdGgoImZpbGU6Ly8iKSA/IG5ldyBVUkwoZSkgOiBxYS5ub3JtYWxpemUoZSk7CiAgICAgICAgICAgICAgWmEucmVhZEZpbGUoZSwgZnVuY3Rpb24oZCwgZykgewogICAgICAgICAgICAgICAgZCA/IGMoZCkgOiBiKGcuYnVmZmVyKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgMSA8IHByb2Nlc3MuYXJndi5sZW5ndGggJiYgcHJvY2Vzcy5hcmd2WzFdLnJlcGxhY2UoL1xcL2csICIvIik7CiAgICAgICAgICAgIHByb2Nlc3MuYXJndi5zbGljZSgyKTsKICAgICAgICAgICAgYTMuaW5zcGVjdCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHJldHVybiAiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF0iOwogICAgICAgICAgICB9OwogICAgICAgICAgfSBlbHNlIGlmICh4YSB8fCBoYSkKICAgICAgICAgICAgaGEgPyBVID0gc2VsZi5sb2NhdGlvbi5ocmVmIDogInVuZGVmaW5lZCIgIT0gdHlwZW9mIGRvY3VtZW50ICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgJiYgKFUgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyksIGsgJiYgKFUgPSBrKSwgVSA9IDAgIT09IFUuaW5kZXhPZigiYmxvYjoiKSA/IFUuc3Vic3RyKDAsIFUucmVwbGFjZSgvWz8jXS4qLywgIiIpLmxhc3RJbmRleE9mKCIvIikgKyAxKSA6ICIiLCAkYSA9IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICB2YXIgYiA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgICAgICAgICAgIGIub3BlbigiR0VUIiwgZSwgZmFsc2UpOwogICAgICAgICAgICAgIGIuc2VuZChudWxsKTsKICAgICAgICAgICAgICByZXR1cm4gYi5yZXNwb25zZVRleHQ7CiAgICAgICAgICAgIH0sIGhhICYmIChtYSA9IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICB2YXIgYiA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgICAgICAgICAgIGIub3BlbigiR0VUIiwgZSwgZmFsc2UpOwogICAgICAgICAgICAgIGIucmVzcG9uc2VUeXBlID0gImFycmF5YnVmZmVyIjsKICAgICAgICAgICAgICBiLnNlbmQobnVsbCk7CiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGIucmVzcG9uc2UpOwogICAgICAgICAgICB9KSwgbmEgPSBmdW5jdGlvbihlLCBiLCBjKSB7CiAgICAgICAgICAgICAgdmFyIGQgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgICAgICAgICAgICBkLm9wZW4oIkdFVCIsIGUsIHRydWUpOwogICAgICAgICAgICAgIGQucmVzcG9uc2VUeXBlID0gImFycmF5YnVmZmVyIjsKICAgICAgICAgICAgICBkLm9ubG9hZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgMjAwID09IGQuc3RhdHVzIHx8IDAgPT0gZC5zdGF0dXMgJiYgZC5yZXNwb25zZSA/IGIoZC5yZXNwb25zZSkgOiBjKCk7CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBkLm9uZXJyb3IgPSBjOwogICAgICAgICAgICAgIGQuc2VuZChudWxsKTsKICAgICAgICAgICAgfTsKICAgICAgICAgIHZhciB1ZCA9IGEzLnByaW50IHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksIGRhID0gYTMucHJpbnRFcnIgfHwgY29uc29sZS53YXJuLmJpbmQoY29uc29sZSk7CiAgICAgICAgICBPYmplY3QuYXNzaWduKGEzLCBYYSk7CiAgICAgICAgICBYYSA9IG51bGw7CiAgICAgICAgICB2YXIgZmE7CiAgICAgICAgICBhMy53YXNtQmluYXJ5ICYmIChmYSA9IGEzLndhc21CaW5hcnkpOwogICAgICAgICAgIm9iamVjdCIgIT0gdHlwZW9mIFdlYkFzc2VtYmx5ICYmIGYoIm5vIG5hdGl2ZSB3YXNtIHN1cHBvcnQgZGV0ZWN0ZWQiKTsKICAgICAgICAgIHZhciBqYSwgd2EgPSBmYWxzZSwgdmEgPSAidW5kZWZpbmVkIiAhPSB0eXBlb2YgVGV4dERlY29kZXIgPyBuZXcgVGV4dERlY29kZXIoInV0ZjgiKSA6IHZvaWQgMCwgWSwgZWEsIGNhLCBWLCBDYSA9IFtdLCBvYSA9IFtdLCBCYSA9IFtdLCB6YSA9IGZhbHNlLCBhYSA9IDAsIHJhID0gbnVsbCwgaWEgPSBudWxsOwogICAgICAgICAgdmFyIFAgPSAiZHJhY29fZGVjb2Rlci53YXNtIjsKICAgICAgICAgIFAuc3RhcnRzV2l0aCgiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LCIpIHx8IChQID0gbChQKSk7CiAgICAgICAgICB2YXIgdmQgPSAwLCB3ZCA9IFtudWxsLCBbXSwgW11dLCB4ZCA9IHsgYjogZnVuY3Rpb24oZSwgYiwgYykgewogICAgICAgICAgICBuZXcgTyhlKS5pbml0KGIsIGMpOwogICAgICAgICAgICB2ZCsrOwogICAgICAgICAgICB0aHJvdyBlOwogICAgICAgICAgfSwgYTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGYoIiIpOwogICAgICAgICAgfSwgZzogZnVuY3Rpb24oZSwgYiwgYykgewogICAgICAgICAgICBlYS5jb3B5V2l0aGluKGUsIGIsIGIgKyBjKTsKICAgICAgICAgIH0sIGU6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgdmFyIGIgPSBlYS5sZW5ndGg7CiAgICAgICAgICAgIGUgPj4+PSAwOwogICAgICAgICAgICBpZiAoMjE0NzQ4MzY0OCA8IGUpCiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICBmb3IgKHZhciBjID0gMTsgNCA+PSBjOyBjICo9IDIpIHsKICAgICAgICAgICAgICB2YXIgZCA9IGIgKiAoMSArIDAuMiAvIGMpOwogICAgICAgICAgICAgIGQgPSBNYXRoLm1pbihkLCBlICsgMTAwNjYzMjk2KTsKICAgICAgICAgICAgICB2YXIgZyA9IE1hdGg7CiAgICAgICAgICAgICAgZCA9IE1hdGgubWF4KGUsIGQpOwogICAgICAgICAgICAgIGcgPSBnLm1pbi5jYWxsKGcsIDIxNDc0ODM2NDgsIGQgKyAoNjU1MzYgLSBkICUgNjU1MzYpICUgNjU1MzYpOwogICAgICAgICAgICAgIGE6IHsKICAgICAgICAgICAgICAgIGQgPSBqYS5idWZmZXI7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICBqYS5ncm93KGcgLSBkLmJ5dGVMZW5ndGggKyA2NTUzNSA+Pj4gMTYpOwogICAgICAgICAgICAgICAgICBBKCk7CiAgICAgICAgICAgICAgICAgIHZhciB1MyA9IDE7CiAgICAgICAgICAgICAgICAgIGJyZWFrIGE7CiAgICAgICAgICAgICAgICB9IGNhdGNoIChYKSB7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB1MyA9IHZvaWQgMDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHUzKQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfSwgZjogZnVuY3Rpb24oZSkgewogICAgICAgICAgICByZXR1cm4gNTI7CiAgICAgICAgICB9LCBkOiBmdW5jdGlvbihlLCBiLCBjLCBkLCBnKSB7CiAgICAgICAgICAgIHJldHVybiA3MDsKICAgICAgICAgIH0sIGM6IGZ1bmN0aW9uKGUsIGIsIGMsIGQpIHsKICAgICAgICAgICAgZm9yICh2YXIgZyA9IDAsIHUzID0gMDsgdTMgPCBjOyB1MysrKSB7CiAgICAgICAgICAgICAgdmFyIFggPSBWW2IgPj4gMl0sIGFiID0gVltiICsgNCA+PiAyXTsKICAgICAgICAgICAgICBiICs9IDg7CiAgICAgICAgICAgICAgZm9yICh2YXIgc2EgPSAwOyBzYSA8IGFiOyBzYSsrKSB7CiAgICAgICAgICAgICAgICB2YXIgdGEgPSBlYVtYICsgc2FdLCB1YSA9IHdkW2VdOwogICAgICAgICAgICAgICAgMCA9PT0gdGEgfHwgMTAgPT09IHRhID8gKCgxID09PSBlID8gdWQgOiBkYSkocCh1YSwgMCkpLCB1YS5sZW5ndGggPSAwKSA6IHVhLnB1c2godGEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBnICs9IGFiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIFZbZCA+PiAyXSA9IGc7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgfSB9OwogICAgICAgICAgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICBmdW5jdGlvbiBlKGcsIHUzKSB7CiAgICAgICAgICAgICAgYTMuYXNtID0gZy5leHBvcnRzOwogICAgICAgICAgICAgIGphID0gYTMuYXNtLmg7CiAgICAgICAgICAgICAgQSgpOwogICAgICAgICAgICAgIG9hLnVuc2hpZnQoYTMuYXNtLmkpOwogICAgICAgICAgICAgIGFhLS07CiAgICAgICAgICAgICAgYTMubW9uaXRvclJ1bkRlcGVuZGVuY2llcyAmJiBhMy5tb25pdG9yUnVuRGVwZW5kZW5jaWVzKGFhKTsKICAgICAgICAgICAgICAwID09IGFhICYmIChudWxsICE9PSByYSAmJiAoY2xlYXJJbnRlcnZhbChyYSksIHJhID0gbnVsbCksIGlhICYmIChnID0gaWEsIGlhID0gbnVsbCwgZygpKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gYihnKSB7CiAgICAgICAgICAgICAgZShnLmluc3RhbmNlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBjKGcpIHsKICAgICAgICAgICAgICByZXR1cm4gdjMoKS50aGVuKGZ1bmN0aW9uKHUzKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUodTMsIGQpOwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24odTMpIHsKICAgICAgICAgICAgICAgIHJldHVybiB1MzsKICAgICAgICAgICAgICB9KS50aGVuKGcsIGZ1bmN0aW9uKHUzKSB7CiAgICAgICAgICAgICAgICBkYSgiZmFpbGVkIHRvIGFzeW5jaHJvbm91c2x5IHByZXBhcmUgd2FzbTogIiArIHUzKTsKICAgICAgICAgICAgICAgIGYodTMpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBkID0geyBhOiB4ZCB9OwogICAgICAgICAgICBhYSsrOwogICAgICAgICAgICBhMy5tb25pdG9yUnVuRGVwZW5kZW5jaWVzICYmIGEzLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMoYWEpOwogICAgICAgICAgICBpZiAoYTMuaW5zdGFudGlhdGVXYXNtKQogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYTMuaW5zdGFudGlhdGVXYXNtKGQsIGUpOwogICAgICAgICAgICAgIH0gY2F0Y2ggKGcpIHsKICAgICAgICAgICAgICAgIGRhKCJNb2R1bGUuaW5zdGFudGlhdGVXYXNtIGNhbGxiYWNrIGZhaWxlZCB3aXRoIGVycm9yOiAiICsgZyksIGthKGcpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHJldHVybiBmYSB8fCAiZnVuY3Rpb24iICE9IHR5cGVvZiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyB8fCBQLnN0YXJ0c1dpdGgoImRhdGE6YXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtO2Jhc2U2NCwiKSB8fCBQLnN0YXJ0c1dpdGgoImZpbGU6Ly8iKSB8fCBZYSB8fCAiZnVuY3Rpb24iICE9IHR5cGVvZiBmZXRjaCA/IGMoYikgOiBmZXRjaChQLCB7IGNyZWRlbnRpYWxzOiAic2FtZS1vcmlnaW4iIH0pLnRoZW4oZnVuY3Rpb24oZykgewogICAgICAgICAgICAgICAgcmV0dXJuIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKGcsIGQpLnRoZW4oYiwgZnVuY3Rpb24odTMpIHsKICAgICAgICAgICAgICAgICAgZGEoIndhc20gc3RyZWFtaW5nIGNvbXBpbGUgZmFpbGVkOiAiICsgdTMpOwogICAgICAgICAgICAgICAgICBkYSgiZmFsbGluZyBiYWNrIHRvIEFycmF5QnVmZmVyIGluc3RhbnRpYXRpb24iKTsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGMoYik7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSkoKS5jYXRjaChrYSk7CiAgICAgICAgICAgIHJldHVybiB7fTsKICAgICAgICAgIH0pKCk7CiAgICAgICAgICB2YXIgYmIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1ZvaWRQdHJfX19kZXN0cm95X19fMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGJiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Wb2lkUHRyX19fZGVzdHJveV9fXzAgPSBhMy5hc20uaykuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIERhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyQnVmZmVyX0RlY29kZXJCdWZmZXJfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKERhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyQnVmZmVyX0RlY29kZXJCdWZmZXJfMCA9IGEzLmFzbS5sKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgY2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJCdWZmZXJfSW5pdF8yID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoY2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJCdWZmZXJfSW5pdF8yID0gYTMuYXNtLm0pLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBkYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2RlckJ1ZmZlcl9fX2Rlc3Ryb3lfX18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoZGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJCdWZmZXJfX19kZXN0cm95X19fMCA9IGEzLmFzbS5uKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgRWEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZVRyYW5zZm9ybURhdGFfQXR0cmlidXRlVHJhbnNmb3JtRGF0YV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoRWEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZVRyYW5zZm9ybURhdGFfQXR0cmlidXRlVHJhbnNmb3JtRGF0YV8wID0gYTMuYXNtLm8pLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBlYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfQXR0cmlidXRlVHJhbnNmb3JtRGF0YV90cmFuc2Zvcm1fdHlwZV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoZWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZVRyYW5zZm9ybURhdGFfdHJhbnNmb3JtX3R5cGVfMCA9IGEzLmFzbS5wKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgZmIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZVRyYW5zZm9ybURhdGFfX19kZXN0cm95X19fMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGZiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9BdHRyaWJ1dGVUcmFuc2Zvcm1EYXRhX19fZGVzdHJveV9fXzAgPSBhMy5hc20ucSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIEZhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9HZW9tZXRyeUF0dHJpYnV0ZV9HZW9tZXRyeUF0dHJpYnV0ZV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoRmEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0dlb21ldHJ5QXR0cmlidXRlX0dlb21ldHJ5QXR0cmlidXRlXzAgPSBhMy5hc20ucikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGdiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9HZW9tZXRyeUF0dHJpYnV0ZV9fX2Rlc3Ryb3lfX18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoZ2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0dlb21ldHJ5QXR0cmlidXRlX19fZGVzdHJveV9fXzAgPSBhMy5hc20ucykuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIEdhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Qb2ludEF0dHJpYnV0ZV9Qb2ludEF0dHJpYnV0ZV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoR2EgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX1BvaW50QXR0cmlidXRlXzAgPSBhMy5hc20udCkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGhiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Qb2ludEF0dHJpYnV0ZV9zaXplXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChoYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRBdHRyaWJ1dGVfc2l6ZV8wID0gYTMuYXNtLnUpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBpYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRBdHRyaWJ1dGVfR2V0QXR0cmlidXRlVHJhbnNmb3JtRGF0YV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoaWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX0dldEF0dHJpYnV0ZVRyYW5zZm9ybURhdGFfMCA9IGEzLmFzbS52KS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgamIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX2F0dHJpYnV0ZV90eXBlXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChqYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRBdHRyaWJ1dGVfYXR0cmlidXRlX3R5cGVfMCA9IGEzLmFzbS53KS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwga2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX2RhdGFfdHlwZV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoa2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX2RhdGFfdHlwZV8wID0gYTMuYXNtLngpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBsYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRBdHRyaWJ1dGVfbnVtX2NvbXBvbmVudHNfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGxiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Qb2ludEF0dHJpYnV0ZV9udW1fY29tcG9uZW50c18wID0gYTMuYXNtLnkpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBtYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRBdHRyaWJ1dGVfbm9ybWFsaXplZF8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAobWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX25vcm1hbGl6ZWRfMCA9IGEzLmFzbS56KS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgbmIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX2J5dGVfc3RyaWRlXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChuYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRBdHRyaWJ1dGVfYnl0ZV9zdHJpZGVfMCA9IGEzLmFzbS5BKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgb2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX2J5dGVfb2Zmc2V0XzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChvYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRBdHRyaWJ1dGVfYnl0ZV9vZmZzZXRfMCA9IGEzLmFzbS5CKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgcGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX3VuaXF1ZV9pZF8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAocGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX3VuaXF1ZV9pZF8wID0gYTMuYXNtLkMpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBxYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRBdHRyaWJ1dGVfX19kZXN0cm95X19fMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHFiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Qb2ludEF0dHJpYnV0ZV9fX2Rlc3Ryb3lfX18wID0gYTMuYXNtLkQpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBIYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfQXR0cmlidXRlUXVhbnRpemF0aW9uVHJhbnNmb3JtX0F0dHJpYnV0ZVF1YW50aXphdGlvblRyYW5zZm9ybV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoSGEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZVF1YW50aXphdGlvblRyYW5zZm9ybV9BdHRyaWJ1dGVRdWFudGl6YXRpb25UcmFuc2Zvcm1fMCA9IGEzLmFzbS5FKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgcmIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZVF1YW50aXphdGlvblRyYW5zZm9ybV9Jbml0RnJvbUF0dHJpYnV0ZV8xID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAocmIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZVF1YW50aXphdGlvblRyYW5zZm9ybV9Jbml0RnJvbUF0dHJpYnV0ZV8xID0gYTMuYXNtLkYpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBzYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfQXR0cmlidXRlUXVhbnRpemF0aW9uVHJhbnNmb3JtX3F1YW50aXphdGlvbl9iaXRzXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChzYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfQXR0cmlidXRlUXVhbnRpemF0aW9uVHJhbnNmb3JtX3F1YW50aXphdGlvbl9iaXRzXzAgPSBhMy5hc20uRykuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIHRiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9BdHRyaWJ1dGVRdWFudGl6YXRpb25UcmFuc2Zvcm1fbWluX3ZhbHVlXzEgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICh0YiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfQXR0cmlidXRlUXVhbnRpemF0aW9uVHJhbnNmb3JtX21pbl92YWx1ZV8xID0gYTMuYXNtLkgpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCB1YiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfQXR0cmlidXRlUXVhbnRpemF0aW9uVHJhbnNmb3JtX3JhbmdlXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICh1YiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfQXR0cmlidXRlUXVhbnRpemF0aW9uVHJhbnNmb3JtX3JhbmdlXzAgPSBhMy5hc20uSSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIHZiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9BdHRyaWJ1dGVRdWFudGl6YXRpb25UcmFuc2Zvcm1fX19kZXN0cm95X19fMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHZiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9BdHRyaWJ1dGVRdWFudGl6YXRpb25UcmFuc2Zvcm1fX19kZXN0cm95X19fMCA9IGEzLmFzbS5KKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgSWEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZU9jdGFoZWRyb25UcmFuc2Zvcm1fQXR0cmlidXRlT2N0YWhlZHJvblRyYW5zZm9ybV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoSWEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZU9jdGFoZWRyb25UcmFuc2Zvcm1fQXR0cmlidXRlT2N0YWhlZHJvblRyYW5zZm9ybV8wID0gYTMuYXNtLkspLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCB3YiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfQXR0cmlidXRlT2N0YWhlZHJvblRyYW5zZm9ybV9Jbml0RnJvbUF0dHJpYnV0ZV8xID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAod2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZU9jdGFoZWRyb25UcmFuc2Zvcm1fSW5pdEZyb21BdHRyaWJ1dGVfMSA9IGEzLmFzbS5MKS5hcHBseSgKICAgICAgICAgICAgICBudWxsLAogICAgICAgICAgICAgIGFyZ3VtZW50cwogICAgICAgICAgICApOwogICAgICAgICAgfSwgeGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZU9jdGFoZWRyb25UcmFuc2Zvcm1fcXVhbnRpemF0aW9uX2JpdHNfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHhiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9BdHRyaWJ1dGVPY3RhaGVkcm9uVHJhbnNmb3JtX3F1YW50aXphdGlvbl9iaXRzXzAgPSBhMy5hc20uTSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIHliID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9BdHRyaWJ1dGVPY3RhaGVkcm9uVHJhbnNmb3JtX19fZGVzdHJveV9fXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICh5YiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfQXR0cmlidXRlT2N0YWhlZHJvblRyYW5zZm9ybV9fX2Rlc3Ryb3lfX18wID0gYTMuYXNtLk4pLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBKYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRDbG91ZF9Qb2ludENsb3VkXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChKYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRDbG91ZF9Qb2ludENsb3VkXzAgPSBhMy5hc20uTykuYXBwbHkoCiAgICAgICAgICAgICAgbnVsbCwKICAgICAgICAgICAgICBhcmd1bWVudHMKICAgICAgICAgICAgKTsKICAgICAgICAgIH0sIHpiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Qb2ludENsb3VkX251bV9hdHRyaWJ1dGVzXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICh6YiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRDbG91ZF9udW1fYXR0cmlidXRlc18wID0gYTMuYXNtLlApLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBBYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRDbG91ZF9udW1fcG9pbnRzXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChBYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRDbG91ZF9udW1fcG9pbnRzXzAgPSBhMy5hc20uUSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIEJiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Qb2ludENsb3VkX19fZGVzdHJveV9fXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChCYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRDbG91ZF9fX2Rlc3Ryb3lfX18wID0gYTMuYXNtLlIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBLYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWVzaF9NZXNoXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChLYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWVzaF9NZXNoXzAgPSBhMy5hc20uUykuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIENiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9NZXNoX251bV9mYWNlc18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoQ2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01lc2hfbnVtX2ZhY2VzXzAgPSBhMy5hc20uVCkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIERiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9NZXNoX251bV9hdHRyaWJ1dGVzXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChEYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWVzaF9udW1fYXR0cmlidXRlc18wID0gYTMuYXNtLlUpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBFYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWVzaF9udW1fcG9pbnRzXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChFYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWVzaF9udW1fcG9pbnRzXzAgPSBhMy5hc20uVikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIEZiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9NZXNoX19fZGVzdHJveV9fXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChGYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWVzaF9fX2Rlc3Ryb3lfX18wID0gYTMuYXNtLlcpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBMYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFfTWV0YWRhdGFfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKExhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9NZXRhZGF0YV9NZXRhZGF0YV8wID0gYTMuYXNtLlgpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBHYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFfX19kZXN0cm95X19fMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKEdiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9NZXRhZGF0YV9fX2Rlc3Ryb3lfX18wID0gYTMuYXNtLlkpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBIYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfU3RhdHVzX2NvZGVfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKEhiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9TdGF0dXNfY29kZV8wID0gYTMuYXNtLlopLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBJYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfU3RhdHVzX29rXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChJYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfU3RhdHVzX29rXzAgPSBhMy5hc20uXykuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIEpiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9TdGF0dXNfZXJyb3JfbXNnXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChKYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfU3RhdHVzX2Vycm9yX21zZ18wID0gYTMuYXNtLiQpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBLYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfU3RhdHVzX19fZGVzdHJveV9fXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChLYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfU3RhdHVzX19fZGVzdHJveV9fXzAgPSBhMy5hc20uYWEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBNYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29GbG9hdDMyQXJyYXlfRHJhY29GbG9hdDMyQXJyYXlfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKE1hID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0Zsb2F0MzJBcnJheV9EcmFjb0Zsb2F0MzJBcnJheV8wID0gYTMuYXNtLmJhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgTGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvRmxvYXQzMkFycmF5X0dldFZhbHVlXzEgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChMYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29GbG9hdDMyQXJyYXlfR2V0VmFsdWVfMSA9IGEzLmFzbS5jYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIE1iID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0Zsb2F0MzJBcnJheV9zaXplXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChNYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29GbG9hdDMyQXJyYXlfc2l6ZV8wID0gYTMuYXNtLmRhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgTmIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvRmxvYXQzMkFycmF5X19fZGVzdHJveV9fXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChOYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29GbG9hdDMyQXJyYXlfX19kZXN0cm95X19fMCA9IGEzLmFzbS5lYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIE5hID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0ludDhBcnJheV9EcmFjb0ludDhBcnJheV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoTmEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvSW50OEFycmF5X0RyYWNvSW50OEFycmF5XzAgPSBhMy5hc20uZmEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBPYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29JbnQ4QXJyYXlfR2V0VmFsdWVfMSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKE9iID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0ludDhBcnJheV9HZXRWYWx1ZV8xID0gYTMuYXNtLmdhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgUGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvSW50OEFycmF5X3NpemVfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFBiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0ludDhBcnJheV9zaXplXzAgPSBhMy5hc20uaGEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBRYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29JbnQ4QXJyYXlfX19kZXN0cm95X19fMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFFiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0ludDhBcnJheV9fX2Rlc3Ryb3lfX18wID0gYTMuYXNtLmlhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgT2EgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvVUludDhBcnJheV9EcmFjb1VJbnQ4QXJyYXlfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKE9hID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb1VJbnQ4QXJyYXlfRHJhY29VSW50OEFycmF5XzAgPSBhMy5hc20uamEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBSYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29VSW50OEFycmF5X0dldFZhbHVlXzEgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChSYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29VSW50OEFycmF5X0dldFZhbHVlXzEgPSBhMy5hc20ua2EpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBTYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29VSW50OEFycmF5X3NpemVfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFNiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb1VJbnQ4QXJyYXlfc2l6ZV8wID0gYTMuYXNtLmxhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgVGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvVUludDhBcnJheV9fX2Rlc3Ryb3lfX18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoVGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvVUludDhBcnJheV9fX2Rlc3Ryb3lfX18wID0gYTMuYXNtLm1hKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgUGEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvSW50MTZBcnJheV9EcmFjb0ludDE2QXJyYXlfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFBhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0ludDE2QXJyYXlfRHJhY29JbnQxNkFycmF5XzAgPSBhMy5hc20ubmEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBVYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29JbnQxNkFycmF5X0dldFZhbHVlXzEgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChVYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29JbnQxNkFycmF5X0dldFZhbHVlXzEgPSBhMy5hc20ub2EpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBWYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29JbnQxNkFycmF5X3NpemVfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFZiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0ludDE2QXJyYXlfc2l6ZV8wID0gYTMuYXNtLnBhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgV2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvSW50MTZBcnJheV9fX2Rlc3Ryb3lfX18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoV2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvSW50MTZBcnJheV9fX2Rlc3Ryb3lfX18wID0gYTMuYXNtLnFhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgUWEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvVUludDE2QXJyYXlfRHJhY29VSW50MTZBcnJheV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoUWEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvVUludDE2QXJyYXlfRHJhY29VSW50MTZBcnJheV8wID0gYTMuYXNtLnJhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgWGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvVUludDE2QXJyYXlfR2V0VmFsdWVfMSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFhiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb1VJbnQxNkFycmF5X0dldFZhbHVlXzEgPSBhMy5hc20uc2EpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBZYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29VSW50MTZBcnJheV9zaXplXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChZYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29VSW50MTZBcnJheV9zaXplXzAgPSBhMy5hc20udGEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBaYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29VSW50MTZBcnJheV9fX2Rlc3Ryb3lfX18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoWmIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvVUludDE2QXJyYXlfX19kZXN0cm95X19fMCA9IGEzLmFzbS51YSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIFJhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0ludDMyQXJyYXlfRHJhY29JbnQzMkFycmF5XzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChSYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29JbnQzMkFycmF5X0RyYWNvSW50MzJBcnJheV8wID0gYTMuYXNtLnZhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgJGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvSW50MzJBcnJheV9HZXRWYWx1ZV8xID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoJGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvSW50MzJBcnJheV9HZXRWYWx1ZV8xID0gYTMuYXNtLndhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgYWMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvSW50MzJBcnJheV9zaXplXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChhYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29JbnQzMkFycmF5X3NpemVfMCA9IGEzLmFzbS54YSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGJjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0ludDMyQXJyYXlfX19kZXN0cm95X19fMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGJjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0ludDMyQXJyYXlfX19kZXN0cm95X19fMCA9IGEzLmFzbS55YSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIFNhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb1VJbnQzMkFycmF5X0RyYWNvVUludDMyQXJyYXlfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFNhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb1VJbnQzMkFycmF5X0RyYWNvVUludDMyQXJyYXlfMCA9IGEzLmFzbS56YSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGNjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb1VJbnQzMkFycmF5X0dldFZhbHVlXzEgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChjYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29VSW50MzJBcnJheV9HZXRWYWx1ZV8xID0gYTMuYXNtLkFhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgZGMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvVUludDMyQXJyYXlfc2l6ZV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoZGMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvVUludDMyQXJyYXlfc2l6ZV8wID0gYTMuYXNtLkJhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgZWMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvVUludDMyQXJyYXlfX19kZXN0cm95X19fMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGVjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb1VJbnQzMkFycmF5X19fZGVzdHJveV9fXzAgPSBhMy5hc20uQ2EpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBUYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFRdWVyaWVyX01ldGFkYXRhUXVlcmllcl8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoVGEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01ldGFkYXRhUXVlcmllcl9NZXRhZGF0YVF1ZXJpZXJfMCA9IGEzLmFzbS5EYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGZjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9NZXRhZGF0YVF1ZXJpZXJfSGFzRW50cnlfMiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGZjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9NZXRhZGF0YVF1ZXJpZXJfSGFzRW50cnlfMiA9IGEzLmFzbS5FYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGdjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9NZXRhZGF0YVF1ZXJpZXJfR2V0SW50RW50cnlfMiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGdjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9NZXRhZGF0YVF1ZXJpZXJfR2V0SW50RW50cnlfMiA9IGEzLmFzbS5GYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGhjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9NZXRhZGF0YVF1ZXJpZXJfR2V0SW50RW50cnlBcnJheV8zID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoaGMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01ldGFkYXRhUXVlcmllcl9HZXRJbnRFbnRyeUFycmF5XzMgPSBhMy5hc20uR2EpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBpYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFRdWVyaWVyX0dldERvdWJsZUVudHJ5XzIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChpYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFRdWVyaWVyX0dldERvdWJsZUVudHJ5XzIgPSBhMy5hc20uSGEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBqYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFRdWVyaWVyX0dldFN0cmluZ0VudHJ5XzIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChqYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFRdWVyaWVyX0dldFN0cmluZ0VudHJ5XzIgPSBhMy5hc20uSWEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBrYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFRdWVyaWVyX051bUVudHJpZXNfMSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGtjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9NZXRhZGF0YVF1ZXJpZXJfTnVtRW50cmllc18xID0gYTMuYXNtLkphKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgbGMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01ldGFkYXRhUXVlcmllcl9HZXRFbnRyeU5hbWVfMiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGxjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9NZXRhZGF0YVF1ZXJpZXJfR2V0RW50cnlOYW1lXzIgPSBhMy5hc20uS2EpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBtYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFRdWVyaWVyX19fZGVzdHJveV9fXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChtYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFRdWVyaWVyX19fZGVzdHJveV9fXzAgPSBhMy5hc20uTGEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBVYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9EZWNvZGVyXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChVYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9EZWNvZGVyXzAgPSBhMy5hc20uTWEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBuYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9EZWNvZGVBcnJheVRvUG9pbnRDbG91ZF8zID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAobmMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfRGVjb2RlQXJyYXlUb1BvaW50Q2xvdWRfMyA9IGEzLmFzbS5OYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIG9jID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0RlY29kZUFycmF5VG9NZXNoXzMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChvYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9EZWNvZGVBcnJheVRvTWVzaF8zID0gYTMuYXNtLk9hKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgcGMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlSWRfMiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHBjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZUlkXzIgPSBhMy5hc20uUGEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBxYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVJZEJ5TmFtZV8yID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAocWMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlSWRCeU5hbWVfMiA9IGEzLmFzbS5RYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIHJjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZUlkQnlNZXRhZGF0YUVudHJ5XzMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChyYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVJZEJ5TWV0YWRhdGFFbnRyeV8zID0gYTMuYXNtLlJhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgc2MgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlXzIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChzYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVfMiA9IGEzLmFzbS5TYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIHRjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZUJ5VW5pcXVlSWRfMiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHRjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZUJ5VW5pcXVlSWRfMiA9IGEzLmFzbS5UYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIHVjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldE1ldGFkYXRhXzEgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICh1YyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRNZXRhZGF0YV8xID0gYTMuYXNtLlVhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgdmMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlTWV0YWRhdGFfMiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHZjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZU1ldGFkYXRhXzIgPSBhMy5hc20uVmEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCB3YyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRGYWNlRnJvbU1lc2hfMyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHdjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEZhY2VGcm9tTWVzaF8zID0gYTMuYXNtLldhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgeGMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0VHJpYW5nbGVTdHJpcHNGcm9tTWVzaF8yID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoeGMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0VHJpYW5nbGVTdHJpcHNGcm9tTWVzaF8yID0gYTMuYXNtLlhhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgeWMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0VHJpYW5nbGVzVUludDE2QXJyYXlfMyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHljID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldFRyaWFuZ2xlc1VJbnQxNkFycmF5XzMgPSBhMy5hc20uWWEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCB6YyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRUcmlhbmdsZXNVSW50MzJBcnJheV8zID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoemMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0VHJpYW5nbGVzVUludDMyQXJyYXlfMyA9IGEzLmFzbS5aYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIEFjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZUZsb2F0XzMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChBYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVGbG9hdF8zID0gYTMuYXNtLl9hKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgQmMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlRmxvYXRGb3JBbGxQb2ludHNfMyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKEJjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZUZsb2F0Rm9yQWxsUG9pbnRzXzMgPSBhMy5hc20uJGEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBDYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVJbnRGb3JBbGxQb2ludHNfMyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKENjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZUludEZvckFsbFBvaW50c18zID0gYTMuYXNtLmFiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgRGMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlSW50OEZvckFsbFBvaW50c18zID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoRGMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlSW50OEZvckFsbFBvaW50c18zID0gYTMuYXNtLmJiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgRWMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlVUludDhGb3JBbGxQb2ludHNfMyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKEVjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZVVJbnQ4Rm9yQWxsUG9pbnRzXzMgPSBhMy5hc20uY2IpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBGYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVJbnQxNkZvckFsbFBvaW50c18zID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoRmMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlSW50MTZGb3JBbGxQb2ludHNfMyA9IGEzLmFzbS5kYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIEdjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZVVJbnQxNkZvckFsbFBvaW50c18zID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoR2MgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlVUludDE2Rm9yQWxsUG9pbnRzXzMgPSBhMy5hc20uZWIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBIYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVJbnQzMkZvckFsbFBvaW50c18zID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoSGMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlSW50MzJGb3JBbGxQb2ludHNfMyA9IGEzLmFzbS5mYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIEljID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZVVJbnQzMkZvckFsbFBvaW50c18zID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoSWMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlVUludDMyRm9yQWxsUG9pbnRzXzMgPSBhMy5hc20uZ2IpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBKYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVEYXRhQXJyYXlGb3JBbGxQb2ludHNfNSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKEpjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZURhdGFBcnJheUZvckFsbFBvaW50c181ID0gYTMuYXNtLmhiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgS2MgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfU2tpcEF0dHJpYnV0ZVRyYW5zZm9ybV8xID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoS2MgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfU2tpcEF0dHJpYnV0ZVRyYW5zZm9ybV8xID0gYTMuYXNtLmliKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgTGMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0RW5jb2RlZEdlb21ldHJ5VHlwZV9EZXByZWNhdGVkXzEgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChMYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRFbmNvZGVkR2VvbWV0cnlUeXBlX0RlcHJlY2F0ZWRfMSA9IGEzLmFzbS5qYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIE1jID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0RlY29kZUJ1ZmZlclRvUG9pbnRDbG91ZF8yID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoTWMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfRGVjb2RlQnVmZmVyVG9Qb2ludENsb3VkXzIgPSBhMy5hc20ua2IpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBOYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9EZWNvZGVCdWZmZXJUb01lc2hfMiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKE5jID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0RlY29kZUJ1ZmZlclRvTWVzaF8yID0gYTMuYXNtLmxiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgT2MgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfX19kZXN0cm95X19fMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKE9jID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX19fZGVzdHJveV9fXzAgPSBhMy5hc20ubWIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBQYyA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fQXR0cmlidXRlVHJhbnNmb3JtVHlwZV9BVFRSSUJVVEVfSU5WQUxJRF9UUkFOU0ZPUk0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChQYyA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fQXR0cmlidXRlVHJhbnNmb3JtVHlwZV9BVFRSSUJVVEVfSU5WQUxJRF9UUkFOU0ZPUk0gPSBhMy5hc20ubmIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBRYyA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fQXR0cmlidXRlVHJhbnNmb3JtVHlwZV9BVFRSSUJVVEVfTk9fVFJBTlNGT1JNID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoUWMgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0F0dHJpYnV0ZVRyYW5zZm9ybVR5cGVfQVRUUklCVVRFX05PX1RSQU5TRk9STSA9IGEzLmFzbS5vYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIFJjID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19BdHRyaWJ1dGVUcmFuc2Zvcm1UeXBlX0FUVFJJQlVURV9RVUFOVElaQVRJT05fVFJBTlNGT1JNID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoUmMgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0F0dHJpYnV0ZVRyYW5zZm9ybVR5cGVfQVRUUklCVVRFX1FVQU5USVpBVElPTl9UUkFOU0ZPUk0gPSBhMy5hc20ucGIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBTYyA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fQXR0cmlidXRlVHJhbnNmb3JtVHlwZV9BVFRSSUJVVEVfT0NUQUhFRFJPTl9UUkFOU0ZPUk0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChTYyA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fQXR0cmlidXRlVHJhbnNmb3JtVHlwZV9BVFRSSUJVVEVfT0NUQUhFRFJPTl9UUkFOU0ZPUk0gPSBhMy5hc20ucWIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBUYyA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fR2VvbWV0cnlBdHRyaWJ1dGVfVHlwZV9JTlZBTElEID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoVGMgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0dlb21ldHJ5QXR0cmlidXRlX1R5cGVfSU5WQUxJRCA9IGEzLmFzbS5yYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIFVjID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19HZW9tZXRyeUF0dHJpYnV0ZV9UeXBlX1BPU0lUSU9OID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoVWMgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0dlb21ldHJ5QXR0cmlidXRlX1R5cGVfUE9TSVRJT04gPSBhMy5hc20uc2IpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBWYyA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fR2VvbWV0cnlBdHRyaWJ1dGVfVHlwZV9OT1JNQUwgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChWYyA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fR2VvbWV0cnlBdHRyaWJ1dGVfVHlwZV9OT1JNQUwgPSBhMy5hc20udGIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBXYyA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fR2VvbWV0cnlBdHRyaWJ1dGVfVHlwZV9DT0xPUiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFdjID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19HZW9tZXRyeUF0dHJpYnV0ZV9UeXBlX0NPTE9SID0gYTMuYXNtLnViKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgWGMgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0dlb21ldHJ5QXR0cmlidXRlX1R5cGVfVEVYX0NPT1JEID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoWGMgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0dlb21ldHJ5QXR0cmlidXRlX1R5cGVfVEVYX0NPT1JEID0gYTMuYXNtLnZiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgWWMgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0dlb21ldHJ5QXR0cmlidXRlX1R5cGVfR0VORVJJQyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFljID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19HZW9tZXRyeUF0dHJpYnV0ZV9UeXBlX0dFTkVSSUMgPSBhMy5hc20ud2IpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBaYyA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRW5jb2RlZEdlb21ldHJ5VHlwZV9JTlZBTElEX0dFT01FVFJZX1RZUEUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChaYyA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRW5jb2RlZEdlb21ldHJ5VHlwZV9JTlZBTElEX0dFT01FVFJZX1RZUEUgPSBhMy5hc20ueGIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCAkYyA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRW5jb2RlZEdlb21ldHJ5VHlwZV9QT0lOVF9DTE9VRCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKCRjID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19FbmNvZGVkR2VvbWV0cnlUeXBlX1BPSU5UX0NMT1VEID0gYTMuYXNtLnliKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgYWQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0VuY29kZWRHZW9tZXRyeVR5cGVfVFJJQU5HVUxBUl9NRVNIID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoYWQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0VuY29kZWRHZW9tZXRyeVR5cGVfVFJJQU5HVUxBUl9NRVNIID0gYTMuYXNtLnpiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgYmQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX0lOVkFMSUQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChiZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfSU5WQUxJRCA9IGEzLmFzbS5BYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGNkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19EYXRhVHlwZV9EVF9JTlQ4ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoY2QgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX0lOVDggPSBhMy5hc20uQmIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBkZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfVUlOVDggPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChkZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfVUlOVDggPSBhMy5hc20uQ2IpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBlZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfSU5UMTYgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChlZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfSU5UMTYgPSBhMy5hc20uRGIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBmZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfVUlOVDE2ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoZmQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX1VJTlQxNiA9IGEzLmFzbS5FYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGdkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19EYXRhVHlwZV9EVF9JTlQzMiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGdkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19EYXRhVHlwZV9EVF9JTlQzMiA9IGEzLmFzbS5GYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGhkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19EYXRhVHlwZV9EVF9VSU5UMzIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChoZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfVUlOVDMyID0gYTMuYXNtLkdiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgaWQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX0lOVDY0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoaWQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX0lOVDY0ID0gYTMuYXNtLkhiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgamQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX1VJTlQ2NCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGpkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19EYXRhVHlwZV9EVF9VSU5UNjQgPSBhMy5hc20uSWIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBrZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfRkxPQVQzMiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGtkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19EYXRhVHlwZV9EVF9GTE9BVDMyID0gYTMuYXNtLkpiKS5hcHBseSgKICAgICAgICAgICAgICBudWxsLAogICAgICAgICAgICAgIGFyZ3VtZW50cwogICAgICAgICAgICApOwogICAgICAgICAgfSwgbGQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX0ZMT0FUNjQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChsZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfRkxPQVQ2NCA9IGEzLmFzbS5LYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIG1kID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19EYXRhVHlwZV9EVF9CT09MID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAobWQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX0JPT0wgPSBhMy5hc20uTGIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBuZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfVFlQRVNfQ09VTlQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChuZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfVFlQRVNfQ09VTlQgPSBhMy5hc20uTWIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBvZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fU3RhdHVzQ29kZV9PSyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKG9kID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19TdGF0dXNDb2RlX09LID0gYTMuYXNtLk5iKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgcGQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX1N0YXR1c0NvZGVfRFJBQ09fRVJST1IgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChwZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fU3RhdHVzQ29kZV9EUkFDT19FUlJPUiA9IGEzLmFzbS5PYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIHFkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19TdGF0dXNDb2RlX0lPX0VSUk9SID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAocWQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX1N0YXR1c0NvZGVfSU9fRVJST1IgPSBhMy5hc20uUGIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCByZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fU3RhdHVzQ29kZV9JTlZBTElEX1BBUkFNRVRFUiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHJkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19TdGF0dXNDb2RlX0lOVkFMSURfUEFSQU1FVEVSID0gYTMuYXNtLlFiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgc2QgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX1N0YXR1c0NvZGVfVU5TVVBQT1JURURfVkVSU0lPTiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHNkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19TdGF0dXNDb2RlX1VOU1VQUE9SVEVEX1ZFUlNJT04gPSBhMy5hc20uUmIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCB0ZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fU3RhdHVzQ29kZV9VTktOT1dOX1ZFUlNJT04gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICh0ZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fU3RhdHVzQ29kZV9VTktOT1dOX1ZFUlNJT04gPSBhMy5hc20uU2IpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9OwogICAgICAgICAgYTMuX21hbGxvYyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGEzLl9tYWxsb2MgPSBhMy5hc20uVGIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9OwogICAgICAgICAgYTMuX2ZyZWUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChhMy5fZnJlZSA9IGEzLmFzbS5VYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgeWEgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICh5YSA9IGEzLmFzbS5WYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH07CiAgICAgICAgICBhMy5fX19zdGFydF9lbV9qcyA9IDE1ODU2OwogICAgICAgICAgYTMuX19fc3RvcF9lbV9qcyA9IDE1OTU0OwogICAgICAgICAgdmFyIGxhOwogICAgICAgICAgaWEgPSBmdW5jdGlvbiBiKCkgewogICAgICAgICAgICBsYSB8fCBiYSgpOwogICAgICAgICAgICBsYSB8fCAoaWEgPSBiKTsKICAgICAgICAgIH07CiAgICAgICAgICBpZiAoYTMucHJlSW5pdCkKICAgICAgICAgICAgZm9yICgiZnVuY3Rpb24iID09IHR5cGVvZiBhMy5wcmVJbml0ICYmIChhMy5wcmVJbml0ID0gW2EzLnByZUluaXRdKTsgMCA8IGEzLnByZUluaXQubGVuZ3RoOyApCiAgICAgICAgICAgICAgYTMucHJlSW5pdC5wb3AoKSgpOwogICAgICAgICAgYmEoKTsKICAgICAgICAgIHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7CiAgICAgICAgICB0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHQ7CiAgICAgICAgICB0LnByb3RvdHlwZS5fX2NsYXNzX18gPSB0OwogICAgICAgICAgdC5fX2NhY2hlX18gPSB7fTsKICAgICAgICAgIGEzLldyYXBwZXJPYmplY3QgPSB0OwogICAgICAgICAgYTMuZ2V0Q2FjaGUgPSB4OwogICAgICAgICAgYTMud3JhcFBvaW50ZXIgPSBEOwogICAgICAgICAgYTMuY2FzdE9iamVjdCA9IGZ1bmN0aW9uKGIsIGMpIHsKICAgICAgICAgICAgcmV0dXJuIEQoYi5wdHIsIGMpOwogICAgICAgICAgfTsKICAgICAgICAgIGEzLk5VTEwgPSBEKDApOwogICAgICAgICAgYTMuZGVzdHJveSA9IGZ1bmN0aW9uKGIpIHsKICAgICAgICAgICAgaWYgKCFiLl9fZGVzdHJveV9fKQogICAgICAgICAgICAgIHRocm93ICJFcnJvcjogQ2Fubm90IGRlc3Ryb3kgb2JqZWN0LiAoRGlkIHlvdSBjcmVhdGUgaXQgeW91cnNlbGY/KSI7CiAgICAgICAgICAgIGIuX19kZXN0cm95X18oKTsKICAgICAgICAgICAgZGVsZXRlIHgoYi5fX2NsYXNzX18pW2IucHRyXTsKICAgICAgICAgIH07CiAgICAgICAgICBhMy5jb21wYXJlID0gZnVuY3Rpb24oYiwgYykgewogICAgICAgICAgICByZXR1cm4gYi5wdHIgPT09IGMucHRyOwogICAgICAgICAgfTsKICAgICAgICAgIGEzLmdldFBvaW50ZXIgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgIHJldHVybiBiLnB0cjsKICAgICAgICAgIH07CiAgICAgICAgICBhMy5nZXRDbGFzcyA9IGZ1bmN0aW9uKGIpIHsKICAgICAgICAgICAgcmV0dXJuIGIuX19jbGFzc19fOwogICAgICAgICAgfTsKICAgICAgICAgIHZhciByID0geyBidWZmZXI6IDAsIHNpemU6IDAsIHBvczogMCwgdGVtcHM6IFtdLCBuZWVkZWQ6IDAsIHByZXBhcmU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoci5uZWVkZWQpIHsKICAgICAgICAgICAgICBmb3IgKHZhciBiID0gMDsgYiA8IHIudGVtcHMubGVuZ3RoOyBiKyspCiAgICAgICAgICAgICAgICBhMy5fZnJlZShyLnRlbXBzW2JdKTsKICAgICAgICAgICAgICByLnRlbXBzLmxlbmd0aCA9IDA7CiAgICAgICAgICAgICAgYTMuX2ZyZWUoci5idWZmZXIpOwogICAgICAgICAgICAgIHIuYnVmZmVyID0gMDsKICAgICAgICAgICAgICByLnNpemUgKz0gci5uZWVkZWQ7CiAgICAgICAgICAgICAgci5uZWVkZWQgPSAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHIuYnVmZmVyIHx8IChyLnNpemUgKz0gMTI4LCByLmJ1ZmZlciA9IGEzLl9tYWxsb2Moci5zaXplKSwgci5idWZmZXIgfHwgZih2b2lkIDApKTsKICAgICAgICAgICAgci5wb3MgPSAwOwogICAgICAgICAgfSwgYWxsb2M6IGZ1bmN0aW9uKGIsIGMpIHsKICAgICAgICAgICAgci5idWZmZXIgfHwgZih2b2lkIDApOwogICAgICAgICAgICBiID0gYi5sZW5ndGggKiBjLkJZVEVTX1BFUl9FTEVNRU5UOwogICAgICAgICAgICBiID0gYiArIDcgJiAtODsKICAgICAgICAgICAgci5wb3MgKyBiID49IHIuc2l6ZSA/ICgwIDwgYiB8fCBmKHZvaWQgMCksIHIubmVlZGVkICs9IGIsIGMgPSBhMy5fbWFsbG9jKGIpLCByLnRlbXBzLnB1c2goYykpIDogKGMgPSByLmJ1ZmZlciArIHIucG9zLCByLnBvcyArPSBiKTsKICAgICAgICAgICAgcmV0dXJuIGM7CiAgICAgICAgICB9LCBjb3B5OiBmdW5jdGlvbihiLCBjLCBkKSB7CiAgICAgICAgICAgIGQgPj4+PSAwOwogICAgICAgICAgICBzd2l0Y2ggKGMuQllURVNfUEVSX0VMRU1FTlQpIHsKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBkID4+Pj0gMTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIGQgPj4+PSAyOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgZCA+Pj49IDM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yICh2YXIgZyA9IDA7IGcgPCBiLmxlbmd0aDsgZysrKQogICAgICAgICAgICAgIGNbZCArIGddID0gYltnXTsKICAgICAgICAgIH0gfTsKICAgICAgICAgIFoucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7CiAgICAgICAgICBaLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFo7CiAgICAgICAgICBaLnByb3RvdHlwZS5fX2NsYXNzX18gPSBaOwogICAgICAgICAgWi5fX2NhY2hlX18gPSB7fTsKICAgICAgICAgIGEzLlZvaWRQdHIgPSBaOwogICAgICAgICAgWi5wcm90b3R5cGUuX19kZXN0cm95X18gPSBaLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBiYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgUy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKTsKICAgICAgICAgIFMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUzsKICAgICAgICAgIFMucHJvdG90eXBlLl9fY2xhc3NfXyA9IFM7CiAgICAgICAgICBTLl9fY2FjaGVfXyA9IHt9OwogICAgICAgICAgYTMuRGVjb2RlckJ1ZmZlciA9IFM7CiAgICAgICAgICBTLnByb3RvdHlwZS5Jbml0ID0gUy5wcm90b3R5cGUuSW5pdCA9IGZ1bmN0aW9uKGIsIGMpIHsKICAgICAgICAgICAgdmFyIGQgPSB0aGlzLnB0cjsKICAgICAgICAgICAgci5wcmVwYXJlKCk7CiAgICAgICAgICAgICJvYmplY3QiID09IHR5cGVvZiBiICYmIChiID0gcGEoYikpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgY2IoZCwgYiwgYyk7CiAgICAgICAgICB9OwogICAgICAgICAgUy5wcm90b3R5cGUuX19kZXN0cm95X18gPSBTLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBkYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgUS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKTsKICAgICAgICAgIFEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUTsKICAgICAgICAgIFEucHJvdG90eXBlLl9fY2xhc3NfXyA9IFE7CiAgICAgICAgICBRLl9fY2FjaGVfXyA9IHt9OwogICAgICAgICAgYTMuQXR0cmlidXRlVHJhbnNmb3JtRGF0YSA9IFE7CiAgICAgICAgICBRLnByb3RvdHlwZS50cmFuc2Zvcm1fdHlwZSA9IFEucHJvdG90eXBlLnRyYW5zZm9ybV90eXBlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBlYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgUS5wcm90b3R5cGUuX19kZXN0cm95X18gPSBRLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBmYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgVy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKTsKICAgICAgICAgIFcucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVzsKICAgICAgICAgIFcucHJvdG90eXBlLl9fY2xhc3NfXyA9IFc7CiAgICAgICAgICBXLl9fY2FjaGVfXyA9IHt9OwogICAgICAgICAgYTMuR2VvbWV0cnlBdHRyaWJ1dGUgPSBXOwogICAgICAgICAgVy5wcm90b3R5cGUuX19kZXN0cm95X18gPSBXLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBnYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgdy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKTsKICAgICAgICAgIHcucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gdzsKICAgICAgICAgIHcucHJvdG90eXBlLl9fY2xhc3NfXyA9IHc7CiAgICAgICAgICB3Ll9fY2FjaGVfXyA9IHt9OwogICAgICAgICAgYTMuUG9pbnRBdHRyaWJ1dGUgPSB3OwogICAgICAgICAgdy5wcm90b3R5cGUuc2l6ZSA9IHcucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIGhiKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICB3LnByb3RvdHlwZS5HZXRBdHRyaWJ1dGVUcmFuc2Zvcm1EYXRhID0gdy5wcm90b3R5cGUuR2V0QXR0cmlidXRlVHJhbnNmb3JtRGF0YSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gRChpYih0aGlzLnB0ciksIFEpOwogICAgICAgICAgfTsKICAgICAgICAgIHcucHJvdG90eXBlLmF0dHJpYnV0ZV90eXBlID0gdy5wcm90b3R5cGUuYXR0cmlidXRlX3R5cGUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIGpiKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICB3LnByb3RvdHlwZS5kYXRhX3R5cGUgPSB3LnByb3RvdHlwZS5kYXRhX3R5cGUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIGtiKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICB3LnByb3RvdHlwZS5udW1fY29tcG9uZW50cyA9IHcucHJvdG90eXBlLm51bV9jb21wb25lbnRzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBsYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgdy5wcm90b3R5cGUubm9ybWFsaXplZCA9IHcucHJvdG90eXBlLm5vcm1hbGl6ZWQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICEhbWIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIHcucHJvdG90eXBlLmJ5dGVfc3RyaWRlID0gdy5wcm90b3R5cGUuYnl0ZV9zdHJpZGUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIG5iKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICB3LnByb3RvdHlwZS5ieXRlX29mZnNldCA9IHcucHJvdG90eXBlLmJ5dGVfb2Zmc2V0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBvYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgdy5wcm90b3R5cGUudW5pcXVlX2lkID0gdy5wcm90b3R5cGUudW5pcXVlX2lkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBwYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgdy5wcm90b3R5cGUuX19kZXN0cm95X18gPSB3LnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBxYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgQy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKTsKICAgICAgICAgIEMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQzsKICAgICAgICAgIEMucHJvdG90eXBlLl9fY2xhc3NfXyA9IEM7CiAgICAgICAgICBDLl9fY2FjaGVfXyA9IHt9OwogICAgICAgICAgYTMuQXR0cmlidXRlUXVhbnRpemF0aW9uVHJhbnNmb3JtID0gQzsKICAgICAgICAgIEMucHJvdG90eXBlLkluaXRGcm9tQXR0cmlidXRlID0gQy5wcm90b3R5cGUuSW5pdEZyb21BdHRyaWJ1dGUgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgIHZhciBjID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICByZXR1cm4gISFyYihjLCBiKTsKICAgICAgICAgIH07CiAgICAgICAgICBDLnByb3RvdHlwZS5xdWFudGl6YXRpb25fYml0cyA9IEMucHJvdG90eXBlLnF1YW50aXphdGlvbl9iaXRzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBzYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgQy5wcm90b3R5cGUubWluX3ZhbHVlID0gQy5wcm90b3R5cGUubWluX3ZhbHVlID0gZnVuY3Rpb24oYikgewogICAgICAgICAgICB2YXIgYyA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgcmV0dXJuIHRiKGMsIGIpOwogICAgICAgICAgfTsKICAgICAgICAgIEMucHJvdG90eXBlLnJhbmdlID0gQy5wcm90b3R5cGUucmFuZ2UgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHViKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBDLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IEMucHJvdG90eXBlLl9fZGVzdHJveV9fID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZiKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBGLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpOwogICAgICAgICAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBGOwogICAgICAgICAgRi5wcm90b3R5cGUuX19jbGFzc19fID0gRjsKICAgICAgICAgIEYuX19jYWNoZV9fID0ge307CiAgICAgICAgICBhMy5BdHRyaWJ1dGVPY3RhaGVkcm9uVHJhbnNmb3JtID0gRjsKICAgICAgICAgIEYucHJvdG90eXBlLkluaXRGcm9tQXR0cmlidXRlID0gRi5wcm90b3R5cGUuSW5pdEZyb21BdHRyaWJ1dGUgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgIHZhciBjID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICByZXR1cm4gISF3YihjLCBiKTsKICAgICAgICAgIH07CiAgICAgICAgICBGLnByb3RvdHlwZS5xdWFudGl6YXRpb25fYml0cyA9IEYucHJvdG90eXBlLnF1YW50aXphdGlvbl9iaXRzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB4Yih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgRi5wcm90b3R5cGUuX19kZXN0cm95X18gPSBGLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB5Yih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgRy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKTsKICAgICAgICAgIEcucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRzsKICAgICAgICAgIEcucHJvdG90eXBlLl9fY2xhc3NfXyA9IEc7CiAgICAgICAgICBHLl9fY2FjaGVfXyA9IHt9OwogICAgICAgICAgYTMuUG9pbnRDbG91ZCA9IEc7CiAgICAgICAgICBHLnByb3RvdHlwZS5udW1fYXR0cmlidXRlcyA9IEcucHJvdG90eXBlLm51bV9hdHRyaWJ1dGVzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB6Yih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgRy5wcm90b3R5cGUubnVtX3BvaW50cyA9IEcucHJvdG90eXBlLm51bV9wb2ludHMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIEFiKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBHLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IEcucHJvdG90eXBlLl9fZGVzdHJveV9fID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIEJiKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBFLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpOwogICAgICAgICAgRS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFOwogICAgICAgICAgRS5wcm90b3R5cGUuX19jbGFzc19fID0gRTsKICAgICAgICAgIEUuX19jYWNoZV9fID0ge307CiAgICAgICAgICBhMy5NZXNoID0gRTsKICAgICAgICAgIEUucHJvdG90eXBlLm51bV9mYWNlcyA9IEUucHJvdG90eXBlLm51bV9mYWNlcyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gQ2IodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIEUucHJvdG90eXBlLm51bV9hdHRyaWJ1dGVzID0gRS5wcm90b3R5cGUubnVtX2F0dHJpYnV0ZXMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIERiKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBFLnByb3RvdHlwZS5udW1fcG9pbnRzID0gRS5wcm90b3R5cGUubnVtX3BvaW50cyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gRWIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIEUucHJvdG90eXBlLl9fZGVzdHJveV9fID0gRS5wcm90b3R5cGUuX19kZXN0cm95X18gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgRmIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIFQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7CiAgICAgICAgICBULnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFQ7CiAgICAgICAgICBULnByb3RvdHlwZS5fX2NsYXNzX18gPSBUOwogICAgICAgICAgVC5fX2NhY2hlX18gPSB7fTsKICAgICAgICAgIGEzLk1ldGFkYXRhID0gVDsKICAgICAgICAgIFQucHJvdG90eXBlLl9fZGVzdHJveV9fID0gVC5wcm90b3R5cGUuX19kZXN0cm95X18gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgR2IodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIEIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7CiAgICAgICAgICBCLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEI7CiAgICAgICAgICBCLnByb3RvdHlwZS5fX2NsYXNzX18gPSBCOwogICAgICAgICAgQi5fX2NhY2hlX18gPSB7fTsKICAgICAgICAgIGEzLlN0YXR1cyA9IEI7CiAgICAgICAgICBCLnByb3RvdHlwZS5jb2RlID0gQi5wcm90b3R5cGUuY29kZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gSGIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIEIucHJvdG90eXBlLm9rID0gQi5wcm90b3R5cGUub2sgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICEhSWIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIEIucHJvdG90eXBlLmVycm9yX21zZyA9IEIucHJvdG90eXBlLmVycm9yX21zZyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gaChKYih0aGlzLnB0cikpOwogICAgICAgICAgfTsKICAgICAgICAgIEIucHJvdG90eXBlLl9fZGVzdHJveV9fID0gQi5wcm90b3R5cGUuX19kZXN0cm95X18gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgS2IodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIEgucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7CiAgICAgICAgICBILnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEg7CiAgICAgICAgICBILnByb3RvdHlwZS5fX2NsYXNzX18gPSBIOwogICAgICAgICAgSC5fX2NhY2hlX18gPSB7fTsKICAgICAgICAgIGEzLkRyYWNvRmxvYXQzMkFycmF5ID0gSDsKICAgICAgICAgIEgucHJvdG90eXBlLkdldFZhbHVlID0gSC5wcm90b3R5cGUuR2V0VmFsdWUgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgIHZhciBjID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICByZXR1cm4gTGIoYywgYik7CiAgICAgICAgICB9OwogICAgICAgICAgSC5wcm90b3R5cGUuc2l6ZSA9IEgucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIE1iKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBILnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IEgucHJvdG90eXBlLl9fZGVzdHJveV9fID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIE5iKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBJLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpOwogICAgICAgICAgSS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJOwogICAgICAgICAgSS5wcm90b3R5cGUuX19jbGFzc19fID0gSTsKICAgICAgICAgIEkuX19jYWNoZV9fID0ge307CiAgICAgICAgICBhMy5EcmFjb0ludDhBcnJheSA9IEk7CiAgICAgICAgICBJLnByb3RvdHlwZS5HZXRWYWx1ZSA9IEkucHJvdG90eXBlLkdldFZhbHVlID0gZnVuY3Rpb24oYikgewogICAgICAgICAgICB2YXIgYyA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgcmV0dXJuIE9iKGMsIGIpOwogICAgICAgICAgfTsKICAgICAgICAgIEkucHJvdG90eXBlLnNpemUgPSBJLnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBQYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgSS5wcm90b3R5cGUuX19kZXN0cm95X18gPSBJLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBRYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgSi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKTsKICAgICAgICAgIEoucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSjsKICAgICAgICAgIEoucHJvdG90eXBlLl9fY2xhc3NfXyA9IEo7CiAgICAgICAgICBKLl9fY2FjaGVfXyA9IHt9OwogICAgICAgICAgYTMuRHJhY29VSW50OEFycmF5ID0gSjsKICAgICAgICAgIEoucHJvdG90eXBlLkdldFZhbHVlID0gSi5wcm90b3R5cGUuR2V0VmFsdWUgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgIHZhciBjID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICByZXR1cm4gUmIoYywgYik7CiAgICAgICAgICB9OwogICAgICAgICAgSi5wcm90b3R5cGUuc2l6ZSA9IEoucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIFNiKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBKLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IEoucHJvdG90eXBlLl9fZGVzdHJveV9fID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIFRiKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBLLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpOwogICAgICAgICAgSy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBLOwogICAgICAgICAgSy5wcm90b3R5cGUuX19jbGFzc19fID0gSzsKICAgICAgICAgIEsuX19jYWNoZV9fID0ge307CiAgICAgICAgICBhMy5EcmFjb0ludDE2QXJyYXkgPSBLOwogICAgICAgICAgSy5wcm90b3R5cGUuR2V0VmFsdWUgPSBLLnByb3RvdHlwZS5HZXRWYWx1ZSA9IGZ1bmN0aW9uKGIpIHsKICAgICAgICAgICAgdmFyIGMgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIHJldHVybiBVYihjLCBiKTsKICAgICAgICAgIH07CiAgICAgICAgICBLLnByb3RvdHlwZS5zaXplID0gSy5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gVmIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIEsucHJvdG90eXBlLl9fZGVzdHJveV9fID0gSy5wcm90b3R5cGUuX19kZXN0cm95X18gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgV2IodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIEwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7CiAgICAgICAgICBMLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEw7CiAgICAgICAgICBMLnByb3RvdHlwZS5fX2NsYXNzX18gPSBMOwogICAgICAgICAgTC5fX2NhY2hlX18gPSB7fTsKICAgICAgICAgIGEzLkRyYWNvVUludDE2QXJyYXkgPSBMOwogICAgICAgICAgTC5wcm90b3R5cGUuR2V0VmFsdWUgPSBMLnByb3RvdHlwZS5HZXRWYWx1ZSA9IGZ1bmN0aW9uKGIpIHsKICAgICAgICAgICAgdmFyIGMgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIHJldHVybiBYYihjLCBiKTsKICAgICAgICAgIH07CiAgICAgICAgICBMLnByb3RvdHlwZS5zaXplID0gTC5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gWWIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIEwucHJvdG90eXBlLl9fZGVzdHJveV9fID0gTC5wcm90b3R5cGUuX19kZXN0cm95X18gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgWmIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIE0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7CiAgICAgICAgICBNLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE07CiAgICAgICAgICBNLnByb3RvdHlwZS5fX2NsYXNzX18gPSBNOwogICAgICAgICAgTS5fX2NhY2hlX18gPSB7fTsKICAgICAgICAgIGEzLkRyYWNvSW50MzJBcnJheSA9IE07CiAgICAgICAgICBNLnByb3RvdHlwZS5HZXRWYWx1ZSA9IE0ucHJvdG90eXBlLkdldFZhbHVlID0gZnVuY3Rpb24oYikgewogICAgICAgICAgICB2YXIgYyA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgcmV0dXJuICRiKGMsIGIpOwogICAgICAgICAgfTsKICAgICAgICAgIE0ucHJvdG90eXBlLnNpemUgPSBNLnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBhYyh0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgTS5wcm90b3R5cGUuX19kZXN0cm95X18gPSBNLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBiYyh0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgTi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKTsKICAgICAgICAgIE4ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTjsKICAgICAgICAgIE4ucHJvdG90eXBlLl9fY2xhc3NfXyA9IE47CiAgICAgICAgICBOLl9fY2FjaGVfXyA9IHt9OwogICAgICAgICAgYTMuRHJhY29VSW50MzJBcnJheSA9IE47CiAgICAgICAgICBOLnByb3RvdHlwZS5HZXRWYWx1ZSA9IE4ucHJvdG90eXBlLkdldFZhbHVlID0gZnVuY3Rpb24oYikgewogICAgICAgICAgICB2YXIgYyA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgcmV0dXJuIGNjKGMsIGIpOwogICAgICAgICAgfTsKICAgICAgICAgIE4ucHJvdG90eXBlLnNpemUgPSBOLnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBkYyh0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgTi5wcm90b3R5cGUuX19kZXN0cm95X18gPSBOLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBlYyh0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKTsKICAgICAgICAgIHkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0geTsKICAgICAgICAgIHkucHJvdG90eXBlLl9fY2xhc3NfXyA9IHk7CiAgICAgICAgICB5Ll9fY2FjaGVfXyA9IHt9OwogICAgICAgICAgYTMuTWV0YWRhdGFRdWVyaWVyID0geTsKICAgICAgICAgIHkucHJvdG90eXBlLkhhc0VudHJ5ID0geS5wcm90b3R5cGUuSGFzRW50cnkgPSBmdW5jdGlvbihiLCBjKSB7CiAgICAgICAgICAgIHZhciBkID0gdGhpcy5wdHI7CiAgICAgICAgICAgIHIucHJlcGFyZSgpOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgYyA9IGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjID8gYy5wdHIgOiBSKGMpOwogICAgICAgICAgICByZXR1cm4gISFmYyhkLCBiLCBjKTsKICAgICAgICAgIH07CiAgICAgICAgICB5LnByb3RvdHlwZS5HZXRJbnRFbnRyeSA9IHkucHJvdG90eXBlLkdldEludEVudHJ5ID0gZnVuY3Rpb24oYiwgYykgewogICAgICAgICAgICB2YXIgZCA9IHRoaXMucHRyOwogICAgICAgICAgICByLnByZXBhcmUoKTsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgPSBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyA/IGMucHRyIDogUihjKTsKICAgICAgICAgICAgcmV0dXJuIGdjKGQsIGIsIGMpOwogICAgICAgICAgfTsKICAgICAgICAgIHkucHJvdG90eXBlLkdldEludEVudHJ5QXJyYXkgPSB5LnByb3RvdHlwZS5HZXRJbnRFbnRyeUFycmF5ID0gZnVuY3Rpb24oYiwgYywgZCkgewogICAgICAgICAgICB2YXIgZyA9IHRoaXMucHRyOwogICAgICAgICAgICByLnByZXBhcmUoKTsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgPSBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyA/IGMucHRyIDogUihjKTsKICAgICAgICAgICAgZCAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGQgJiYgKGQgPSBkLnB0cik7CiAgICAgICAgICAgIGhjKGcsIGIsIGMsIGQpOwogICAgICAgICAgfTsKICAgICAgICAgIHkucHJvdG90eXBlLkdldERvdWJsZUVudHJ5ID0geS5wcm90b3R5cGUuR2V0RG91YmxlRW50cnkgPSBmdW5jdGlvbihiLCBjKSB7CiAgICAgICAgICAgIHZhciBkID0gdGhpcy5wdHI7CiAgICAgICAgICAgIHIucHJlcGFyZSgpOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgYyA9IGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjID8gYy5wdHIgOiBSKGMpOwogICAgICAgICAgICByZXR1cm4gaWMoZCwgYiwgYyk7CiAgICAgICAgICB9OwogICAgICAgICAgeS5wcm90b3R5cGUuR2V0U3RyaW5nRW50cnkgPSB5LnByb3RvdHlwZS5HZXRTdHJpbmdFbnRyeSA9IGZ1bmN0aW9uKGIsIGMpIHsKICAgICAgICAgICAgdmFyIGQgPSB0aGlzLnB0cjsKICAgICAgICAgICAgci5wcmVwYXJlKCk7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjID0gYyAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGMgPyBjLnB0ciA6IFIoYyk7CiAgICAgICAgICAgIHJldHVybiBoKGpjKGQsIGIsIGMpKTsKICAgICAgICAgIH07CiAgICAgICAgICB5LnByb3RvdHlwZS5OdW1FbnRyaWVzID0geS5wcm90b3R5cGUuTnVtRW50cmllcyA9IGZ1bmN0aW9uKGIpIHsKICAgICAgICAgICAgdmFyIGMgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIHJldHVybiBrYyhjLCBiKTsKICAgICAgICAgIH07CiAgICAgICAgICB5LnByb3RvdHlwZS5HZXRFbnRyeU5hbWUgPSB5LnByb3RvdHlwZS5HZXRFbnRyeU5hbWUgPSBmdW5jdGlvbihiLCBjKSB7CiAgICAgICAgICAgIHZhciBkID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgcmV0dXJuIGgobGMoZCwgYiwgYykpOwogICAgICAgICAgfTsKICAgICAgICAgIHkucHJvdG90eXBlLl9fZGVzdHJveV9fID0geS5wcm90b3R5cGUuX19kZXN0cm95X18gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgbWModGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7CiAgICAgICAgICBtLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG07CiAgICAgICAgICBtLnByb3RvdHlwZS5fX2NsYXNzX18gPSBtOwogICAgICAgICAgbS5fX2NhY2hlX18gPSB7fTsKICAgICAgICAgIGEzLkRlY29kZXIgPSBtOwogICAgICAgICAgbS5wcm90b3R5cGUuRGVjb2RlQXJyYXlUb1BvaW50Q2xvdWQgPSBtLnByb3RvdHlwZS5EZWNvZGVBcnJheVRvUG9pbnRDbG91ZCA9IGZ1bmN0aW9uKGIsIGMsIGQpIHsKICAgICAgICAgICAgdmFyIGcgPSB0aGlzLnB0cjsKICAgICAgICAgICAgci5wcmVwYXJlKCk7CiAgICAgICAgICAgICJvYmplY3QiID09IHR5cGVvZiBiICYmIChiID0gcGEoYikpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgZCAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGQgJiYgKGQgPSBkLnB0cik7CiAgICAgICAgICAgIHJldHVybiBEKG5jKGcsIGIsIGMsIGQpLCBCKTsKICAgICAgICAgIH07CiAgICAgICAgICBtLnByb3RvdHlwZS5EZWNvZGVBcnJheVRvTWVzaCA9IG0ucHJvdG90eXBlLkRlY29kZUFycmF5VG9NZXNoID0gZnVuY3Rpb24oYiwgYywgZCkgewogICAgICAgICAgICB2YXIgZyA9IHRoaXMucHRyOwogICAgICAgICAgICByLnByZXBhcmUoKTsKICAgICAgICAgICAgIm9iamVjdCIgPT0gdHlwZW9mIGIgJiYgKGIgPSBwYShiKSk7CiAgICAgICAgICAgIGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjICYmIChjID0gYy5wdHIpOwogICAgICAgICAgICBkICYmICJvYmplY3QiID09PSB0eXBlb2YgZCAmJiAoZCA9IGQucHRyKTsKICAgICAgICAgICAgcmV0dXJuIEQob2MoZywgYiwgYywgZCksIEIpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZUlkID0gbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlSWQgPSBmdW5jdGlvbihiLCBjKSB7CiAgICAgICAgICAgIHZhciBkID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgcmV0dXJuIHBjKGQsIGIsIGMpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZUlkQnlOYW1lID0gbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlSWRCeU5hbWUgPSBmdW5jdGlvbihiLCBjKSB7CiAgICAgICAgICAgIHZhciBkID0gdGhpcy5wdHI7CiAgICAgICAgICAgIHIucHJlcGFyZSgpOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgYyA9IGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjID8gYy5wdHIgOiBSKGMpOwogICAgICAgICAgICByZXR1cm4gcWMoZCwgYiwgYyk7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlSWRCeU1ldGFkYXRhRW50cnkgPSBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGVJZEJ5TWV0YWRhdGFFbnRyeSA9IGZ1bmN0aW9uKGIsIGMsIGQpIHsKICAgICAgICAgICAgdmFyIGcgPSB0aGlzLnB0cjsKICAgICAgICAgICAgci5wcmVwYXJlKCk7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjID0gYyAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGMgPyBjLnB0ciA6IFIoYyk7CiAgICAgICAgICAgIGQgPSBkICYmICJvYmplY3QiID09PSB0eXBlb2YgZCA/IGQucHRyIDogUihkKTsKICAgICAgICAgICAgcmV0dXJuIHJjKGcsIGIsIGMsIGQpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZSA9IG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uKGIsIGMpIHsKICAgICAgICAgICAgdmFyIGQgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjICYmIChjID0gYy5wdHIpOwogICAgICAgICAgICByZXR1cm4gRChzYyhkLCBiLCBjKSwgdyk7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlQnlVbmlxdWVJZCA9IG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZUJ5VW5pcXVlSWQgPSBmdW5jdGlvbihiLCBjKSB7CiAgICAgICAgICAgIHZhciBkID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgcmV0dXJuIEQodGMoZCwgYiwgYyksIHcpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldE1ldGFkYXRhID0gbS5wcm90b3R5cGUuR2V0TWV0YWRhdGEgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgIHZhciBjID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICByZXR1cm4gRCh1YyhjLCBiKSwgVCk7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlTWV0YWRhdGEgPSBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGVNZXRhZGF0YSA9IGZ1bmN0aW9uKGIsIGMpIHsKICAgICAgICAgICAgdmFyIGQgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjICYmIChjID0gYy5wdHIpOwogICAgICAgICAgICByZXR1cm4gRCh2YyhkLCBiLCBjKSwgVCk7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuR2V0RmFjZUZyb21NZXNoID0gbS5wcm90b3R5cGUuR2V0RmFjZUZyb21NZXNoID0gZnVuY3Rpb24oYiwgYywgZCkgewogICAgICAgICAgICB2YXIgZyA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgYyAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGMgJiYgKGMgPSBjLnB0cik7CiAgICAgICAgICAgIGQgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBkICYmIChkID0gZC5wdHIpOwogICAgICAgICAgICByZXR1cm4gISF3YyhnLCBiLCBjLCBkKTsKICAgICAgICAgIH07CiAgICAgICAgICBtLnByb3RvdHlwZS5HZXRUcmlhbmdsZVN0cmlwc0Zyb21NZXNoID0gbS5wcm90b3R5cGUuR2V0VHJpYW5nbGVTdHJpcHNGcm9tTWVzaCA9IGZ1bmN0aW9uKGIsIGMpIHsKICAgICAgICAgICAgdmFyIGQgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjICYmIChjID0gYy5wdHIpOwogICAgICAgICAgICByZXR1cm4geGMoZCwgYiwgYyk7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuR2V0VHJpYW5nbGVzVUludDE2QXJyYXkgPSBtLnByb3RvdHlwZS5HZXRUcmlhbmdsZXNVSW50MTZBcnJheSA9IGZ1bmN0aW9uKGIsIGMsIGQpIHsKICAgICAgICAgICAgdmFyIGcgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjICYmIChjID0gYy5wdHIpOwogICAgICAgICAgICBkICYmICJvYmplY3QiID09PSB0eXBlb2YgZCAmJiAoZCA9IGQucHRyKTsKICAgICAgICAgICAgcmV0dXJuICEheWMoZywgYiwgYywgZCk7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuR2V0VHJpYW5nbGVzVUludDMyQXJyYXkgPSBtLnByb3RvdHlwZS5HZXRUcmlhbmdsZXNVSW50MzJBcnJheSA9IGZ1bmN0aW9uKGIsIGMsIGQpIHsKICAgICAgICAgICAgdmFyIGcgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjICYmIChjID0gYy5wdHIpOwogICAgICAgICAgICBkICYmICJvYmplY3QiID09PSB0eXBlb2YgZCAmJiAoZCA9IGQucHRyKTsKICAgICAgICAgICAgcmV0dXJuICEhemMoZywgYiwgYywgZCk7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlRmxvYXQgPSBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGVGbG9hdCA9IGZ1bmN0aW9uKGIsIGMsIGQpIHsKICAgICAgICAgICAgdmFyIGcgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjICYmIChjID0gYy5wdHIpOwogICAgICAgICAgICBkICYmICJvYmplY3QiID09PSB0eXBlb2YgZCAmJiAoZCA9IGQucHRyKTsKICAgICAgICAgICAgcmV0dXJuICEhQWMoZywgYiwgYywgZCk7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlRmxvYXRGb3JBbGxQb2ludHMgPSBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGVGbG9hdEZvckFsbFBvaW50cyA9IGZ1bmN0aW9uKGIsIGMsIGQpIHsKICAgICAgICAgICAgdmFyIGcgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjICYmIChjID0gYy5wdHIpOwogICAgICAgICAgICBkICYmICJvYmplY3QiID09PSB0eXBlb2YgZCAmJiAoZCA9IGQucHRyKTsKICAgICAgICAgICAgcmV0dXJuICEhQmMoZywgYiwgYywgZCk7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlSW50Rm9yQWxsUG9pbnRzID0gbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlSW50Rm9yQWxsUG9pbnRzID0gZnVuY3Rpb24oYiwgYywgZCkgewogICAgICAgICAgICB2YXIgZyA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgYyAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGMgJiYgKGMgPSBjLnB0cik7CiAgICAgICAgICAgIGQgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBkICYmIChkID0gZC5wdHIpOwogICAgICAgICAgICByZXR1cm4gISFDYyhnLCBiLCBjLCBkKTsKICAgICAgICAgIH07CiAgICAgICAgICBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGVJbnQ4Rm9yQWxsUG9pbnRzID0gbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlSW50OEZvckFsbFBvaW50cyA9IGZ1bmN0aW9uKGIsIGMsIGQpIHsKICAgICAgICAgICAgdmFyIGcgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjICYmIChjID0gYy5wdHIpOwogICAgICAgICAgICBkICYmICJvYmplY3QiID09PSB0eXBlb2YgZCAmJiAoZCA9IGQucHRyKTsKICAgICAgICAgICAgcmV0dXJuICEhRGMoZywgYiwgYywgZCk7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlVUludDhGb3JBbGxQb2ludHMgPSBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGVVSW50OEZvckFsbFBvaW50cyA9IGZ1bmN0aW9uKGIsIGMsIGQpIHsKICAgICAgICAgICAgdmFyIGcgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjICYmIChjID0gYy5wdHIpOwogICAgICAgICAgICBkICYmICJvYmplY3QiID09PSB0eXBlb2YgZCAmJiAoZCA9IGQucHRyKTsKICAgICAgICAgICAgcmV0dXJuICEhRWMoZywgYiwgYywgZCk7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlSW50MTZGb3JBbGxQb2ludHMgPSBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGVJbnQxNkZvckFsbFBvaW50cyA9IGZ1bmN0aW9uKGIsIGMsIGQpIHsKICAgICAgICAgICAgdmFyIGcgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjICYmIChjID0gYy5wdHIpOwogICAgICAgICAgICBkICYmICJvYmplY3QiID09PSB0eXBlb2YgZCAmJiAoZCA9IGQucHRyKTsKICAgICAgICAgICAgcmV0dXJuICEhRmMoZywgYiwgYywgZCk7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlVUludDE2Rm9yQWxsUG9pbnRzID0gbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlVUludDE2Rm9yQWxsUG9pbnRzID0gZnVuY3Rpb24oYiwgYywgZCkgewogICAgICAgICAgICB2YXIgZyA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgYyAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGMgJiYgKGMgPSBjLnB0cik7CiAgICAgICAgICAgIGQgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBkICYmIChkID0gZC5wdHIpOwogICAgICAgICAgICByZXR1cm4gISFHYyhnLCBiLCBjLCBkKTsKICAgICAgICAgIH07CiAgICAgICAgICBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGVJbnQzMkZvckFsbFBvaW50cyA9IG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZUludDMyRm9yQWxsUG9pbnRzID0gZnVuY3Rpb24oYiwgYywgZCkgewogICAgICAgICAgICB2YXIgZyA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgYyAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGMgJiYgKGMgPSBjLnB0cik7CiAgICAgICAgICAgIGQgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBkICYmIChkID0gZC5wdHIpOwogICAgICAgICAgICByZXR1cm4gISFIYyhnLCBiLCBjLCBkKTsKICAgICAgICAgIH07CiAgICAgICAgICBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGVVSW50MzJGb3JBbGxQb2ludHMgPSBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGVVSW50MzJGb3JBbGxQb2ludHMgPSBmdW5jdGlvbihiLCBjLCBkKSB7CiAgICAgICAgICAgIHZhciBnID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgZCAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGQgJiYgKGQgPSBkLnB0cik7CiAgICAgICAgICAgIHJldHVybiAhIUljKGcsIGIsIGMsIGQpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZURhdGFBcnJheUZvckFsbFBvaW50cyA9IG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZURhdGFBcnJheUZvckFsbFBvaW50cyA9IGZ1bmN0aW9uKGIsIGMsIGQsIGcsIHUzKSB7CiAgICAgICAgICAgIHZhciBYID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgZCAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGQgJiYgKGQgPSBkLnB0cik7CiAgICAgICAgICAgIGcgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBnICYmIChnID0gZy5wdHIpOwogICAgICAgICAgICB1MyAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIHUzICYmICh1MyA9IHUzLnB0cik7CiAgICAgICAgICAgIHJldHVybiAhIUpjKFgsIGIsIGMsIGQsIGcsIHUzKTsKICAgICAgICAgIH07CiAgICAgICAgICBtLnByb3RvdHlwZS5Ta2lwQXR0cmlidXRlVHJhbnNmb3JtID0gbS5wcm90b3R5cGUuU2tpcEF0dHJpYnV0ZVRyYW5zZm9ybSA9IGZ1bmN0aW9uKGIpIHsKICAgICAgICAgICAgdmFyIGMgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIEtjKGMsIGIpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldEVuY29kZWRHZW9tZXRyeVR5cGVfRGVwcmVjYXRlZCA9IG0ucHJvdG90eXBlLkdldEVuY29kZWRHZW9tZXRyeVR5cGVfRGVwcmVjYXRlZCA9IGZ1bmN0aW9uKGIpIHsKICAgICAgICAgICAgdmFyIGMgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIHJldHVybiBMYyhjLCBiKTsKICAgICAgICAgIH07CiAgICAgICAgICBtLnByb3RvdHlwZS5EZWNvZGVCdWZmZXJUb1BvaW50Q2xvdWQgPSBtLnByb3RvdHlwZS5EZWNvZGVCdWZmZXJUb1BvaW50Q2xvdWQgPSBmdW5jdGlvbihiLCBjKSB7CiAgICAgICAgICAgIHZhciBkID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgcmV0dXJuIEQoTWMoZCwgYiwgYyksIEIpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkRlY29kZUJ1ZmZlclRvTWVzaCA9IG0ucHJvdG90eXBlLkRlY29kZUJ1ZmZlclRvTWVzaCA9IGZ1bmN0aW9uKGIsIGMpIHsKICAgICAgICAgICAgdmFyIGQgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjICYmIChjID0gYy5wdHIpOwogICAgICAgICAgICByZXR1cm4gRChOYyhkLCBiLCBjKSwgQik7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuX19kZXN0cm95X18gPSBtLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBPYyh0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICBmdW5jdGlvbiBiKCkgewogICAgICAgICAgICAgIGEzLkFUVFJJQlVURV9JTlZBTElEX1RSQU5TRk9STSA9IFBjKCk7CiAgICAgICAgICAgICAgYTMuQVRUUklCVVRFX05PX1RSQU5TRk9STSA9IFFjKCk7CiAgICAgICAgICAgICAgYTMuQVRUUklCVVRFX1FVQU5USVpBVElPTl9UUkFOU0ZPUk0gPSBSYygpOwogICAgICAgICAgICAgIGEzLkFUVFJJQlVURV9PQ1RBSEVEUk9OX1RSQU5TRk9STSA9IFNjKCk7CiAgICAgICAgICAgICAgYTMuSU5WQUxJRCA9IFRjKCk7CiAgICAgICAgICAgICAgYTMuUE9TSVRJT04gPSBVYygpOwogICAgICAgICAgICAgIGEzLk5PUk1BTCA9IFZjKCk7CiAgICAgICAgICAgICAgYTMuQ09MT1IgPSBXYygpOwogICAgICAgICAgICAgIGEzLlRFWF9DT09SRCA9IFhjKCk7CiAgICAgICAgICAgICAgYTMuR0VORVJJQyA9IFljKCk7CiAgICAgICAgICAgICAgYTMuSU5WQUxJRF9HRU9NRVRSWV9UWVBFID0gWmMoKTsKICAgICAgICAgICAgICBhMy5QT0lOVF9DTE9VRCA9ICRjKCk7CiAgICAgICAgICAgICAgYTMuVFJJQU5HVUxBUl9NRVNIID0gYWQoKTsKICAgICAgICAgICAgICBhMy5EVF9JTlZBTElEID0gYmQoKTsKICAgICAgICAgICAgICBhMy5EVF9JTlQ4ID0gY2QoKTsKICAgICAgICAgICAgICBhMy5EVF9VSU5UOCA9IGRkKCk7CiAgICAgICAgICAgICAgYTMuRFRfSU5UMTYgPSBlZCgpOwogICAgICAgICAgICAgIGEzLkRUX1VJTlQxNiA9IGZkKCk7CiAgICAgICAgICAgICAgYTMuRFRfSU5UMzIgPSBnZCgpOwogICAgICAgICAgICAgIGEzLkRUX1VJTlQzMiA9IGhkKCk7CiAgICAgICAgICAgICAgYTMuRFRfSU5UNjQgPSBpZCgpOwogICAgICAgICAgICAgIGEzLkRUX1VJTlQ2NCA9IGpkKCk7CiAgICAgICAgICAgICAgYTMuRFRfRkxPQVQzMiA9IGtkKCk7CiAgICAgICAgICAgICAgYTMuRFRfRkxPQVQ2NCA9IGxkKCk7CiAgICAgICAgICAgICAgYTMuRFRfQk9PTCA9IG1kKCk7CiAgICAgICAgICAgICAgYTMuRFRfVFlQRVNfQ09VTlQgPSBuZCgpOwogICAgICAgICAgICAgIGEzLk9LID0gb2QoKTsKICAgICAgICAgICAgICBhMy5EUkFDT19FUlJPUiA9IHBkKCk7CiAgICAgICAgICAgICAgYTMuSU9fRVJST1IgPSBxZCgpOwogICAgICAgICAgICAgIGEzLklOVkFMSURfUEFSQU1FVEVSID0gcmQoKTsKICAgICAgICAgICAgICBhMy5VTlNVUFBPUlRFRF9WRVJTSU9OID0gc2QoKTsKICAgICAgICAgICAgICBhMy5VTktOT1dOX1ZFUlNJT04gPSB0ZCgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHphID8gYigpIDogb2EudW5zaGlmdChiKTsKICAgICAgICAgIH0pKCk7CiAgICAgICAgICBpZiAoImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGEzLm9uTW9kdWxlUGFyc2VkKQogICAgICAgICAgICBhMy5vbk1vZHVsZVBhcnNlZCgpOwogICAgICAgICAgYTMuRGVjb2Rlci5wcm90b3R5cGUuR2V0RW5jb2RlZEdlb21ldHJ5VHlwZSA9IGZ1bmN0aW9uKGIpIHsKICAgICAgICAgICAgaWYgKGIuX19jbGFzc19fICYmIGIuX19jbGFzc19fID09PSBhMy5EZWNvZGVyQnVmZmVyKQogICAgICAgICAgICAgIHJldHVybiBhMy5EZWNvZGVyLnByb3RvdHlwZS5HZXRFbmNvZGVkR2VvbWV0cnlUeXBlX0RlcHJlY2F0ZWQoYik7CiAgICAgICAgICAgIGlmICg4ID4gYi5ieXRlTGVuZ3RoKQogICAgICAgICAgICAgIHJldHVybiBhMy5JTlZBTElEX0dFT01FVFJZX1RZUEU7CiAgICAgICAgICAgIHN3aXRjaCAoYls3XSkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJldHVybiBhMy5QT0lOVF9DTE9VRDsKICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICByZXR1cm4gYTMuVFJJQU5HVUxBUl9NRVNIOwogICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICByZXR1cm4gYTMuSU5WQUxJRF9HRU9NRVRSWV9UWVBFOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgICAgcmV0dXJuIG4ucmVhZHk7CiAgICAgICAgfTsKICAgICAgfSgpOwogICAgICAib2JqZWN0IiA9PT0gdHlwZW9mIGV4cG9ydHMyICYmICJvYmplY3QiID09PSB0eXBlb2YgbW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgPSBEcmFjb0RlY29kZXJNb2R1bGUgOiAiZnVuY3Rpb24iID09PSB0eXBlb2YgZGVmaW5lICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoW10sIGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBEcmFjb0RlY29kZXJNb2R1bGU7CiAgICAgIH0pIDogIm9iamVjdCIgPT09IHR5cGVvZiBleHBvcnRzMiAmJiAoZXhwb3J0czIuRHJhY29EZWNvZGVyTW9kdWxlID0gRHJhY29EZWNvZGVyTW9kdWxlKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2RlY29kZURyYWNvLmpzCiAgdmFyIGRlY29kZURyYWNvX2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChkZWNvZGVEcmFjb19leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBkZWNvZGVEcmFjb19kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gZGVjb2RlSW5kZXhBcnJheShkcmFjb0dlb21ldHJ5LCBkcmFjb0RlY29kZXIpIHsKICAgIGNvbnN0IG51bVBvaW50cyA9IGRyYWNvR2VvbWV0cnkubnVtX3BvaW50cygpOwogICAgY29uc3QgbnVtRmFjZXMgPSBkcmFjb0dlb21ldHJ5Lm51bV9mYWNlcygpOwogICAgY29uc3QgZmFjZUluZGljZXMgPSBuZXcgZHJhY28uRHJhY29JbnQzMkFycmF5KCk7CiAgICBjb25zdCBudW1JbmRpY2VzID0gbnVtRmFjZXMgKiAzOwogICAgY29uc3QgaW5kZXhBcnJheSA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KG51bVBvaW50cywgbnVtSW5kaWNlcyk7CiAgICBsZXQgb2Zmc2V0ID0gMDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtRmFjZXM7ICsraSkgewogICAgICBkcmFjb0RlY29kZXIuR2V0RmFjZUZyb21NZXNoKGRyYWNvR2VvbWV0cnksIGksIGZhY2VJbmRpY2VzKTsKICAgICAgaW5kZXhBcnJheVtvZmZzZXQgKyAwXSA9IGZhY2VJbmRpY2VzLkdldFZhbHVlKDApOwogICAgICBpbmRleEFycmF5W29mZnNldCArIDFdID0gZmFjZUluZGljZXMuR2V0VmFsdWUoMSk7CiAgICAgIGluZGV4QXJyYXlbb2Zmc2V0ICsgMl0gPSBmYWNlSW5kaWNlcy5HZXRWYWx1ZSgyKTsKICAgICAgb2Zmc2V0ICs9IDM7CiAgICB9CiAgICBkcmFjby5kZXN0cm95KGZhY2VJbmRpY2VzKTsKICAgIHJldHVybiB7CiAgICAgIHR5cGVkQXJyYXk6IGluZGV4QXJyYXksCiAgICAgIG51bWJlck9mSW5kaWNlczogbnVtSW5kaWNlcwogICAgfTsKICB9CiAgZnVuY3Rpb24gZGVjb2RlUXVhbnRpemVkRHJhY29UeXBlZEFycmF5KGRyYWNvR2VvbWV0cnksIGRyYWNvRGVjb2RlciwgZHJhY29BdHRyaWJ1dGUsIHF1YW50aXphdGlvbiwgdmVydGV4QXJyYXlMZW5ndGgpIHsKICAgIGxldCB2ZXJ0ZXhBcnJheTsKICAgIGxldCBhdHRyaWJ1dGVEYXRhOwogICAgaWYgKHF1YW50aXphdGlvbi5xdWFudGl6YXRpb25CaXRzIDw9IDgpIHsKICAgICAgYXR0cmlidXRlRGF0YSA9IG5ldyBkcmFjby5EcmFjb1VJbnQ4QXJyYXkoKTsKICAgICAgdmVydGV4QXJyYXkgPSBuZXcgVWludDhBcnJheSh2ZXJ0ZXhBcnJheUxlbmd0aCk7CiAgICAgIGRyYWNvRGVjb2Rlci5HZXRBdHRyaWJ1dGVVSW50OEZvckFsbFBvaW50cygKICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgIGRyYWNvQXR0cmlidXRlLAogICAgICAgIGF0dHJpYnV0ZURhdGEKICAgICAgKTsKICAgIH0gZWxzZSBpZiAocXVhbnRpemF0aW9uLnF1YW50aXphdGlvbkJpdHMgPD0gMTYpIHsKICAgICAgYXR0cmlidXRlRGF0YSA9IG5ldyBkcmFjby5EcmFjb1VJbnQxNkFycmF5KCk7CiAgICAgIHZlcnRleEFycmF5ID0gbmV3IFVpbnQxNkFycmF5KHZlcnRleEFycmF5TGVuZ3RoKTsKICAgICAgZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZVVJbnQxNkZvckFsbFBvaW50cygKICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgIGRyYWNvQXR0cmlidXRlLAogICAgICAgIGF0dHJpYnV0ZURhdGEKICAgICAgKTsKICAgIH0gZWxzZSB7CiAgICAgIGF0dHJpYnV0ZURhdGEgPSBuZXcgZHJhY28uRHJhY29GbG9hdDMyQXJyYXkoKTsKICAgICAgdmVydGV4QXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KHZlcnRleEFycmF5TGVuZ3RoKTsKICAgICAgZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZUZsb2F0Rm9yQWxsUG9pbnRzKAogICAgICAgIGRyYWNvR2VvbWV0cnksCiAgICAgICAgZHJhY29BdHRyaWJ1dGUsCiAgICAgICAgYXR0cmlidXRlRGF0YQogICAgICApOwogICAgfQogICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0ZXhBcnJheUxlbmd0aDsgKytpKSB7CiAgICAgIHZlcnRleEFycmF5W2ldID0gYXR0cmlidXRlRGF0YS5HZXRWYWx1ZShpKTsKICAgIH0KICAgIGRyYWNvLmRlc3Ryb3koYXR0cmlidXRlRGF0YSk7CiAgICByZXR1cm4gdmVydGV4QXJyYXk7CiAgfQogIGZ1bmN0aW9uIGRlY29kZURyYWNvVHlwZWRBcnJheShkcmFjb0dlb21ldHJ5LCBkcmFjb0RlY29kZXIsIGRyYWNvQXR0cmlidXRlLCB2ZXJ0ZXhBcnJheUxlbmd0aCkgewogICAgbGV0IHZlcnRleEFycmF5OwogICAgbGV0IGF0dHJpYnV0ZURhdGE7CiAgICBzd2l0Y2ggKGRyYWNvQXR0cmlidXRlLmRhdGFfdHlwZSgpKSB7CiAgICAgIGNhc2UgMToKICAgICAgY2FzZSAxMToKICAgICAgICBhdHRyaWJ1dGVEYXRhID0gbmV3IGRyYWNvLkRyYWNvSW50OEFycmF5KCk7CiAgICAgICAgdmVydGV4QXJyYXkgPSBuZXcgSW50OEFycmF5KHZlcnRleEFycmF5TGVuZ3RoKTsKICAgICAgICBkcmFjb0RlY29kZXIuR2V0QXR0cmlidXRlSW50OEZvckFsbFBvaW50cygKICAgICAgICAgIGRyYWNvR2VvbWV0cnksCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZSwKICAgICAgICAgIGF0dHJpYnV0ZURhdGEKICAgICAgICApOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDI6CiAgICAgICAgYXR0cmlidXRlRGF0YSA9IG5ldyBkcmFjby5EcmFjb1VJbnQ4QXJyYXkoKTsKICAgICAgICB2ZXJ0ZXhBcnJheSA9IG5ldyBVaW50OEFycmF5KHZlcnRleEFycmF5TGVuZ3RoKTsKICAgICAgICBkcmFjb0RlY29kZXIuR2V0QXR0cmlidXRlVUludDhGb3JBbGxQb2ludHMoCiAgICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgICAgZHJhY29BdHRyaWJ1dGUsCiAgICAgICAgICBhdHRyaWJ1dGVEYXRhCiAgICAgICAgKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAzOgogICAgICAgIGF0dHJpYnV0ZURhdGEgPSBuZXcgZHJhY28uRHJhY29JbnQxNkFycmF5KCk7CiAgICAgICAgdmVydGV4QXJyYXkgPSBuZXcgSW50MTZBcnJheSh2ZXJ0ZXhBcnJheUxlbmd0aCk7CiAgICAgICAgZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZUludDE2Rm9yQWxsUG9pbnRzKAogICAgICAgICAgZHJhY29HZW9tZXRyeSwKICAgICAgICAgIGRyYWNvQXR0cmlidXRlLAogICAgICAgICAgYXR0cmlidXRlRGF0YQogICAgICAgICk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgNDoKICAgICAgICBhdHRyaWJ1dGVEYXRhID0gbmV3IGRyYWNvLkRyYWNvVUludDE2QXJyYXkoKTsKICAgICAgICB2ZXJ0ZXhBcnJheSA9IG5ldyBVaW50MTZBcnJheSh2ZXJ0ZXhBcnJheUxlbmd0aCk7CiAgICAgICAgZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZVVJbnQxNkZvckFsbFBvaW50cygKICAgICAgICAgIGRyYWNvR2VvbWV0cnksCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZSwKICAgICAgICAgIGF0dHJpYnV0ZURhdGEKICAgICAgICApOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDU6CiAgICAgIGNhc2UgNzoKICAgICAgICBhdHRyaWJ1dGVEYXRhID0gbmV3IGRyYWNvLkRyYWNvSW50MzJBcnJheSgpOwogICAgICAgIHZlcnRleEFycmF5ID0gbmV3IEludDMyQXJyYXkodmVydGV4QXJyYXlMZW5ndGgpOwogICAgICAgIGRyYWNvRGVjb2Rlci5HZXRBdHRyaWJ1dGVJbnQzMkZvckFsbFBvaW50cygKICAgICAgICAgIGRyYWNvR2VvbWV0cnksCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZSwKICAgICAgICAgIGF0dHJpYnV0ZURhdGEKICAgICAgICApOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDY6CiAgICAgIGNhc2UgODoKICAgICAgICBhdHRyaWJ1dGVEYXRhID0gbmV3IGRyYWNvLkRyYWNvVUludDMyQXJyYXkoKTsKICAgICAgICB2ZXJ0ZXhBcnJheSA9IG5ldyBVaW50MzJBcnJheSh2ZXJ0ZXhBcnJheUxlbmd0aCk7CiAgICAgICAgZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZVVJbnQzMkZvckFsbFBvaW50cygKICAgICAgICAgIGRyYWNvR2VvbWV0cnksCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZSwKICAgICAgICAgIGF0dHJpYnV0ZURhdGEKICAgICAgICApOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDk6CiAgICAgIGNhc2UgMTA6CiAgICAgICAgYXR0cmlidXRlRGF0YSA9IG5ldyBkcmFjby5EcmFjb0Zsb2F0MzJBcnJheSgpOwogICAgICAgIHZlcnRleEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSh2ZXJ0ZXhBcnJheUxlbmd0aCk7CiAgICAgICAgZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZUZsb2F0Rm9yQWxsUG9pbnRzKAogICAgICAgICAgZHJhY29HZW9tZXRyeSwKICAgICAgICAgIGRyYWNvQXR0cmlidXRlLAogICAgICAgICAgYXR0cmlidXRlRGF0YQogICAgICAgICk7CiAgICAgICAgYnJlYWs7CiAgICB9CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZlcnRleEFycmF5TGVuZ3RoOyArK2kpIHsKICAgICAgdmVydGV4QXJyYXlbaV0gPSBhdHRyaWJ1dGVEYXRhLkdldFZhbHVlKGkpOwogICAgfQogICAgZHJhY28uZGVzdHJveShhdHRyaWJ1dGVEYXRhKTsKICAgIHJldHVybiB2ZXJ0ZXhBcnJheTsKICB9CiAgZnVuY3Rpb24gZGVjb2RlQXR0cmlidXRlKGRyYWNvR2VvbWV0cnksIGRyYWNvRGVjb2RlciwgZHJhY29BdHRyaWJ1dGUpIHsKICAgIGNvbnN0IG51bVBvaW50cyA9IGRyYWNvR2VvbWV0cnkubnVtX3BvaW50cygpOwogICAgY29uc3QgbnVtQ29tcG9uZW50cyA9IGRyYWNvQXR0cmlidXRlLm51bV9jb21wb25lbnRzKCk7CiAgICBsZXQgcXVhbnRpemF0aW9uOwogICAgbGV0IHRyYW5zZm9ybTIgPSBuZXcgZHJhY28uQXR0cmlidXRlUXVhbnRpemF0aW9uVHJhbnNmb3JtKCk7CiAgICBpZiAodHJhbnNmb3JtMi5Jbml0RnJvbUF0dHJpYnV0ZShkcmFjb0F0dHJpYnV0ZSkpIHsKICAgICAgY29uc3QgbWluVmFsdWVzID0gbmV3IEFycmF5KG51bUNvbXBvbmVudHMpOwogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUNvbXBvbmVudHM7ICsraSkgewogICAgICAgIG1pblZhbHVlc1tpXSA9IHRyYW5zZm9ybTIubWluX3ZhbHVlKGkpOwogICAgICB9CiAgICAgIHF1YW50aXphdGlvbiA9IHsKICAgICAgICBxdWFudGl6YXRpb25CaXRzOiB0cmFuc2Zvcm0yLnF1YW50aXphdGlvbl9iaXRzKCksCiAgICAgICAgbWluVmFsdWVzLAogICAgICAgIHJhbmdlOiB0cmFuc2Zvcm0yLnJhbmdlKCksCiAgICAgICAgb2N0RW5jb2RlZDogZmFsc2UKICAgICAgfTsKICAgIH0KICAgIGRyYWNvLmRlc3Ryb3kodHJhbnNmb3JtMik7CiAgICB0cmFuc2Zvcm0yID0gbmV3IGRyYWNvLkF0dHJpYnV0ZU9jdGFoZWRyb25UcmFuc2Zvcm0oKTsKICAgIGlmICh0cmFuc2Zvcm0yLkluaXRGcm9tQXR0cmlidXRlKGRyYWNvQXR0cmlidXRlKSkgewogICAgICBxdWFudGl6YXRpb24gPSB7CiAgICAgICAgcXVhbnRpemF0aW9uQml0czogdHJhbnNmb3JtMi5xdWFudGl6YXRpb25fYml0cygpLAogICAgICAgIG9jdEVuY29kZWQ6IHRydWUKICAgICAgfTsKICAgIH0KICAgIGRyYWNvLmRlc3Ryb3kodHJhbnNmb3JtMik7CiAgICBjb25zdCB2ZXJ0ZXhBcnJheUxlbmd0aCA9IG51bVBvaW50cyAqIG51bUNvbXBvbmVudHM7CiAgICBsZXQgdmVydGV4QXJyYXk7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHF1YW50aXphdGlvbikpIHsKICAgICAgdmVydGV4QXJyYXkgPSBkZWNvZGVRdWFudGl6ZWREcmFjb1R5cGVkQXJyYXkoCiAgICAgICAgZHJhY29HZW9tZXRyeSwKICAgICAgICBkcmFjb0RlY29kZXIsCiAgICAgICAgZHJhY29BdHRyaWJ1dGUsCiAgICAgICAgcXVhbnRpemF0aW9uLAogICAgICAgIHZlcnRleEFycmF5TGVuZ3RoCiAgICAgICk7CiAgICB9IGVsc2UgewogICAgICB2ZXJ0ZXhBcnJheSA9IGRlY29kZURyYWNvVHlwZWRBcnJheSgKICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgIGRyYWNvRGVjb2RlciwKICAgICAgICBkcmFjb0F0dHJpYnV0ZSwKICAgICAgICB2ZXJ0ZXhBcnJheUxlbmd0aAogICAgICApOwogICAgfQogICAgY29uc3QgY29tcG9uZW50RGF0YXR5cGUgPSBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LmZyb21UeXBlZEFycmF5KHZlcnRleEFycmF5KTsKICAgIHJldHVybiB7CiAgICAgIGFycmF5OiB2ZXJ0ZXhBcnJheSwKICAgICAgZGF0YTogewogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IG51bUNvbXBvbmVudHMsCiAgICAgICAgY29tcG9uZW50RGF0YXR5cGUsCiAgICAgICAgYnl0ZU9mZnNldDogZHJhY29BdHRyaWJ1dGUuYnl0ZV9vZmZzZXQoKSwKICAgICAgICBieXRlU3RyaWRlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LmdldFNpemVJbkJ5dGVzKGNvbXBvbmVudERhdGF0eXBlKSAqIG51bUNvbXBvbmVudHMsCiAgICAgICAgbm9ybWFsaXplZDogZHJhY29BdHRyaWJ1dGUubm9ybWFsaXplZCgpLAogICAgICAgIHF1YW50aXphdGlvbgogICAgICB9CiAgICB9OwogIH0KICBmdW5jdGlvbiBkZWNvZGVQb2ludENsb3VkKHBhcmFtZXRlcnMpIHsKICAgIGNvbnN0IGRyYWNvRGVjb2RlciA9IG5ldyBkcmFjby5EZWNvZGVyKCk7CiAgICBpZiAocGFyYW1ldGVycy5kZXF1YW50aXplSW5TaGFkZXIpIHsKICAgICAgZHJhY29EZWNvZGVyLlNraXBBdHRyaWJ1dGVUcmFuc2Zvcm0oZHJhY28uUE9TSVRJT04pOwogICAgICBkcmFjb0RlY29kZXIuU2tpcEF0dHJpYnV0ZVRyYW5zZm9ybShkcmFjby5OT1JNQUwpOwogICAgfQogICAgY29uc3QgYnVmZmVyID0gbmV3IGRyYWNvLkRlY29kZXJCdWZmZXIoKTsKICAgIGJ1ZmZlci5Jbml0KHBhcmFtZXRlcnMuYnVmZmVyLCBwYXJhbWV0ZXJzLmJ1ZmZlci5sZW5ndGgpOwogICAgY29uc3QgZ2VvbWV0cnlUeXBlID0gZHJhY29EZWNvZGVyLkdldEVuY29kZWRHZW9tZXRyeVR5cGUoYnVmZmVyKTsKICAgIGlmIChnZW9tZXRyeVR5cGUgIT09IGRyYWNvLlBPSU5UX0NMT1VEKSB7CiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgiRHJhY28gZ2VvbWV0cnkgdHlwZSBtdXN0IGJlIFBPSU5UX0NMT1VELiIpOwogICAgfQogICAgY29uc3QgZHJhY29Qb2ludENsb3VkID0gbmV3IGRyYWNvLlBvaW50Q2xvdWQoKTsKICAgIGNvbnN0IGRlY29kaW5nU3RhdHVzID0gZHJhY29EZWNvZGVyLkRlY29kZUJ1ZmZlclRvUG9pbnRDbG91ZCgKICAgICAgYnVmZmVyLAogICAgICBkcmFjb1BvaW50Q2xvdWQKICAgICk7CiAgICBpZiAoIWRlY29kaW5nU3RhdHVzLm9rKCkgfHwgZHJhY29Qb2ludENsb3VkLnB0ciA9PT0gMCkgewogICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoCiAgICAgICAgYEVycm9yIGRlY29kaW5nIGRyYWNvIHBvaW50IGNsb3VkOiAke2RlY29kaW5nU3RhdHVzLmVycm9yX21zZygpfWAKICAgICAgKTsKICAgIH0KICAgIGRyYWNvLmRlc3Ryb3koYnVmZmVyKTsKICAgIGNvbnN0IHJlc3VsdCA9IHt9OwogICAgY29uc3QgcHJvcGVydGllcyA9IHBhcmFtZXRlcnMucHJvcGVydGllczsKICAgIGZvciAoY29uc3QgcHJvcGVydHlOYW1lIGluIHByb3BlcnRpZXMpIHsKICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSkgewogICAgICAgIGxldCBkcmFjb0F0dHJpYnV0ZTsKICAgICAgICBpZiAocHJvcGVydHlOYW1lID09PSAiUE9TSVRJT04iIHx8IHByb3BlcnR5TmFtZSA9PT0gIk5PUk1BTCIpIHsKICAgICAgICAgIGNvbnN0IGRyYWNvQXR0cmlidXRlSWQgPSBkcmFjb0RlY29kZXIuR2V0QXR0cmlidXRlSWQoCiAgICAgICAgICAgIGRyYWNvUG9pbnRDbG91ZCwKICAgICAgICAgICAgZHJhY29bcHJvcGVydHlOYW1lXQogICAgICAgICAgKTsKICAgICAgICAgIGRyYWNvQXR0cmlidXRlID0gZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZSgKICAgICAgICAgICAgZHJhY29Qb2ludENsb3VkLAogICAgICAgICAgICBkcmFjb0F0dHJpYnV0ZUlkCiAgICAgICAgICApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVJZCA9IHByb3BlcnRpZXNbcHJvcGVydHlOYW1lXTsKICAgICAgICAgIGRyYWNvQXR0cmlidXRlID0gZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZUJ5VW5pcXVlSWQoCiAgICAgICAgICAgIGRyYWNvUG9pbnRDbG91ZCwKICAgICAgICAgICAgYXR0cmlidXRlSWQKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFtwcm9wZXJ0eU5hbWVdID0gZGVjb2RlQXR0cmlidXRlKAogICAgICAgICAgZHJhY29Qb2ludENsb3VkLAogICAgICAgICAgZHJhY29EZWNvZGVyLAogICAgICAgICAgZHJhY29BdHRyaWJ1dGUKICAgICAgICApOwogICAgICB9CiAgICB9CiAgICBkcmFjby5kZXN0cm95KGRyYWNvUG9pbnRDbG91ZCk7CiAgICBkcmFjby5kZXN0cm95KGRyYWNvRGVjb2Rlcik7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICBmdW5jdGlvbiBkZWNvZGVQcmltaXRpdmUocGFyYW1ldGVycykgewogICAgY29uc3QgZHJhY29EZWNvZGVyID0gbmV3IGRyYWNvLkRlY29kZXIoKTsKICAgIGNvbnN0IGF0dHJpYnV0ZXNUb1NraXAgPSBbIlBPU0lUSU9OIiwgIk5PUk1BTCIsICJDT0xPUiIsICJURVhfQ09PUkQiXTsKICAgIGlmIChwYXJhbWV0ZXJzLmRlcXVhbnRpemVJblNoYWRlcikgewogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF0dHJpYnV0ZXNUb1NraXAubGVuZ3RoOyArK2kpIHsKICAgICAgICBkcmFjb0RlY29kZXIuU2tpcEF0dHJpYnV0ZVRyYW5zZm9ybShkcmFjb1thdHRyaWJ1dGVzVG9Ta2lwW2ldXSk7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IGJ1ZmZlclZpZXcgPSBwYXJhbWV0ZXJzLmJ1ZmZlclZpZXc7CiAgICBjb25zdCBidWZmZXIgPSBuZXcgZHJhY28uRGVjb2RlckJ1ZmZlcigpOwogICAgYnVmZmVyLkluaXQocGFyYW1ldGVycy5hcnJheSwgYnVmZmVyVmlldy5ieXRlTGVuZ3RoKTsKICAgIGNvbnN0IGdlb21ldHJ5VHlwZSA9IGRyYWNvRGVjb2Rlci5HZXRFbmNvZGVkR2VvbWV0cnlUeXBlKGJ1ZmZlcik7CiAgICBpZiAoZ2VvbWV0cnlUeXBlICE9PSBkcmFjby5UUklBTkdVTEFSX01FU0gpIHsKICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KCJVbnN1cHBvcnRlZCBkcmFjbyBtZXNoIGdlb21ldHJ5IHR5cGUuIik7CiAgICB9CiAgICBjb25zdCBkcmFjb0dlb21ldHJ5ID0gbmV3IGRyYWNvLk1lc2goKTsKICAgIGNvbnN0IGRlY29kaW5nU3RhdHVzID0gZHJhY29EZWNvZGVyLkRlY29kZUJ1ZmZlclRvTWVzaChidWZmZXIsIGRyYWNvR2VvbWV0cnkpOwogICAgaWYgKCFkZWNvZGluZ1N0YXR1cy5vaygpIHx8IGRyYWNvR2VvbWV0cnkucHRyID09PSAwKSB7CiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgKICAgICAgICBgRXJyb3IgZGVjb2RpbmcgZHJhY28gbWVzaCBnZW9tZXRyeTogJHtkZWNvZGluZ1N0YXR1cy5lcnJvcl9tc2coKX1gCiAgICAgICk7CiAgICB9CiAgICBkcmFjby5kZXN0cm95KGJ1ZmZlcik7CiAgICBjb25zdCBhdHRyaWJ1dGVEYXRhID0ge307CiAgICBjb25zdCBjb21wcmVzc2VkQXR0cmlidXRlcyA9IHBhcmFtZXRlcnMuY29tcHJlc3NlZEF0dHJpYnV0ZXM7CiAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZU5hbWUgaW4gY29tcHJlc3NlZEF0dHJpYnV0ZXMpIHsKICAgICAgaWYgKGNvbXByZXNzZWRBdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGF0dHJpYnV0ZU5hbWUpKSB7CiAgICAgICAgY29uc3QgY29tcHJlc3NlZEF0dHJpYnV0ZSA9IGNvbXByZXNzZWRBdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdOwogICAgICAgIGNvbnN0IGRyYWNvQXR0cmlidXRlID0gZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZUJ5VW5pcXVlSWQoCiAgICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgICAgY29tcHJlc3NlZEF0dHJpYnV0ZQogICAgICAgICk7CiAgICAgICAgYXR0cmlidXRlRGF0YVthdHRyaWJ1dGVOYW1lXSA9IGRlY29kZUF0dHJpYnV0ZSgKICAgICAgICAgIGRyYWNvR2VvbWV0cnksCiAgICAgICAgICBkcmFjb0RlY29kZXIsCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZQogICAgICAgICk7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IHJlc3VsdCA9IHsKICAgICAgaW5kZXhBcnJheTogZGVjb2RlSW5kZXhBcnJheShkcmFjb0dlb21ldHJ5LCBkcmFjb0RlY29kZXIpLAogICAgICBhdHRyaWJ1dGVEYXRhCiAgICB9OwogICAgZHJhY28uZGVzdHJveShkcmFjb0dlb21ldHJ5KTsKICAgIGRyYWNvLmRlc3Ryb3koZHJhY29EZWNvZGVyKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfQogIGFzeW5jIGZ1bmN0aW9uIGRlY29kZShwYXJhbWV0ZXJzLCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHBhcmFtZXRlcnMuYnVmZmVyVmlldykpIHsKICAgICAgcmV0dXJuIGRlY29kZVByaW1pdGl2ZShwYXJhbWV0ZXJzKTsKICAgIH0KICAgIHJldHVybiBkZWNvZGVQb2ludENsb3VkKHBhcmFtZXRlcnMpOwogIH0KICBhc3luYyBmdW5jdGlvbiBpbml0V29ya2VyKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIGNvbnN0IHdhc21Db25maWcgPSBwYXJhbWV0ZXJzLndlYkFzc2VtYmx5Q29uZmlnOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdCh3YXNtQ29uZmlnKSAmJiBkZWZpbmVkX2RlZmF1bHQod2FzbUNvbmZpZy53YXNtQmluYXJ5RmlsZSkpIHsKICAgICAgZHJhY28gPSBhd2FpdCAoMCwgaW1wb3J0X2RyYWNvX2RlY29kZXJfbm9kZWpzLmRlZmF1bHQpKHdhc21Db25maWcpOwogICAgfSBlbHNlIHsKICAgICAgZHJhY28gPSBhd2FpdCAoMCwgaW1wb3J0X2RyYWNvX2RlY29kZXJfbm9kZWpzLmRlZmF1bHQpKCk7CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgYXN5bmMgZnVuY3Rpb24gZGVjb2RlRHJhY28ocGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cykgewogICAgY29uc3Qgd2FzbUNvbmZpZyA9IHBhcmFtZXRlcnMud2ViQXNzZW1ibHlDb25maWc7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHdhc21Db25maWcpKSB7CiAgICAgIHJldHVybiBpbml0V29ya2VyKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpOwogICAgfQogICAgcmV0dXJuIGRlY29kZShwYXJhbWV0ZXJzLCB0cmFuc2ZlcmFibGVPYmplY3RzKTsKICB9CiAgdmFyIGltcG9ydF9kcmFjb19kZWNvZGVyX25vZGVqcywgZHJhY28sIGRlY29kZURyYWNvX2RlZmF1bHQ7CiAgdmFyIGluaXRfZGVjb2RlRHJhY28gPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2RlY29kZURyYWNvLmpzIigpIHsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfUnVudGltZUVycm9yKCk7CiAgICAgIGluaXRfY3JlYXRlVGFza1Byb2Nlc3NvcldvcmtlcigpOwogICAgICBpbXBvcnRfZHJhY29fZGVjb2Rlcl9ub2RlanMgPSBfX3RvRVNNKHJlcXVpcmVfZHJhY29fZGVjb2Rlcl9ub2RlanMoKSwgMSk7CiAgICAgIGRlY29kZURyYWNvX2RlZmF1bHQgPSBjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyX2RlZmF1bHQoZGVjb2RlRHJhY28pOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlRGF0YS5qcwogIGZ1bmN0aW9uIGRlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZURhdGEoa2V5LCBkYXRhKSB7CiAgICBpZiAoZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlRGF0YS5wYXNzVGhyb3VnaERhdGFGb3JUZXN0aW5nKSB7CiAgICAgIHJldHVybiBkYXRhOwogICAgfQogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJrZXkiLCBrZXkpOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJkYXRhIiwgZGF0YSk7CiAgICBjb25zdCBrZXlMZW5ndGggPSBrZXkuYnl0ZUxlbmd0aDsKICAgIGlmIChrZXlMZW5ndGggPT09IDAgfHwga2V5TGVuZ3RoICUgNCAhPT0gMCkgewogICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoCiAgICAgICAgIlRoZSBsZW5ndGggb2Yga2V5IG11c3QgYmUgZ3JlYXRlciB0aGFuIDAgYW5kIGEgbXVsdGlwbGUgb2YgNC4iCiAgICAgICk7CiAgICB9CiAgICBjb25zdCBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhkYXRhKTsKICAgIGNvbnN0IG1hZ2ljID0gZGF0YVZpZXcuZ2V0VWludDMyKDAsIHRydWUpOwogICAgaWYgKG1hZ2ljID09PSBjb21wcmVzc2VkTWFnaWMgfHwgbWFnaWMgPT09IGNvbXByZXNzZWRNYWdpY1N3YXApIHsKICAgICAgcmV0dXJuIGRhdGE7CiAgICB9CiAgICBjb25zdCBrZXlWaWV3ID0gbmV3IERhdGFWaWV3KGtleSk7CiAgICBsZXQgZHAgPSAwOwogICAgY29uc3QgZHBlbmQgPSBkYXRhLmJ5dGVMZW5ndGg7CiAgICBjb25zdCBkcGVuZDY0ID0gZHBlbmQgLSBkcGVuZCAlIDg7CiAgICBjb25zdCBrcGVuZCA9IGtleUxlbmd0aDsKICAgIGxldCBrcDsKICAgIGxldCBvZmYgPSA4OwogICAgd2hpbGUgKGRwIDwgZHBlbmQ2NCkgewogICAgICBvZmYgPSAob2ZmICsgOCkgJSAyNDsKICAgICAga3AgPSBvZmY7CiAgICAgIHdoaWxlIChkcCA8IGRwZW5kNjQgJiYga3AgPCBrcGVuZCkgewogICAgICAgIGRhdGFWaWV3LnNldFVpbnQzMigKICAgICAgICAgIGRwLAogICAgICAgICAgZGF0YVZpZXcuZ2V0VWludDMyKGRwLCB0cnVlKSBeIGtleVZpZXcuZ2V0VWludDMyKGtwLCB0cnVlKSwKICAgICAgICAgIHRydWUKICAgICAgICApOwogICAgICAgIGRhdGFWaWV3LnNldFVpbnQzMigKICAgICAgICAgIGRwICsgNCwKICAgICAgICAgIGRhdGFWaWV3LmdldFVpbnQzMihkcCArIDQsIHRydWUpIF4ga2V5Vmlldy5nZXRVaW50MzIoa3AgKyA0LCB0cnVlKSwKICAgICAgICAgIHRydWUKICAgICAgICApOwogICAgICAgIGRwICs9IDg7CiAgICAgICAga3AgKz0gMjQ7CiAgICAgIH0KICAgIH0KICAgIGlmIChkcCA8IGRwZW5kKSB7CiAgICAgIGlmIChrcCA+PSBrcGVuZCkgewogICAgICAgIG9mZiA9IChvZmYgKyA4KSAlIDI0OwogICAgICAgIGtwID0gb2ZmOwogICAgICB9CiAgICAgIHdoaWxlIChkcCA8IGRwZW5kKSB7CiAgICAgICAgZGF0YVZpZXcuc2V0VWludDgoZHAsIGRhdGFWaWV3LmdldFVpbnQ4KGRwKSBeIGtleVZpZXcuZ2V0VWludDgoa3ApKTsKICAgICAgICBkcCsrOwogICAgICAgIGtwKys7CiAgICAgIH0KICAgIH0KICB9CiAgdmFyIGNvbXByZXNzZWRNYWdpYywgY29tcHJlc3NlZE1hZ2ljU3dhcCwgZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlRGF0YV9kZWZhdWx0OwogIHZhciBpbml0X2RlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZURhdGEgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2RlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZURhdGEuanMiKCkgewogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfUnVudGltZUVycm9yKCk7CiAgICAgIGNvbXByZXNzZWRNYWdpYyA9IDE5NTMwMjk4MDU7CiAgICAgIGNvbXByZXNzZWRNYWdpY1N3YXAgPSAyOTE3MDM0MTAwOwogICAgICBkZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VEYXRhLnBhc3NUaHJvdWdoRGF0YUZvclRlc3RpbmcgPSBmYWxzZTsKICAgICAgZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlRGF0YV9kZWZhdWx0ID0gZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlRGF0YTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2lzQml0U2V0LmpzCiAgZnVuY3Rpb24gaXNCaXRTZXQoYml0cywgbWFzaykgewogICAgcmV0dXJuIChiaXRzICYgbWFzaykgIT09IDA7CiAgfQogIHZhciBpc0JpdFNldF9kZWZhdWx0OwogIHZhciBpbml0X2lzQml0U2V0ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9pc0JpdFNldC5qcyIoKSB7CiAgICAgIGlzQml0U2V0X2RlZmF1bHQgPSBpc0JpdFNldDsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dvb2dsZUVhcnRoRW50ZXJwcmlzZVRpbGVJbmZvcm1hdGlvbi5qcwogIGZ1bmN0aW9uIEdvb2dsZUVhcnRoRW50ZXJwcmlzZVRpbGVJbmZvcm1hdGlvbihiaXRzLCBjbm9kZVZlcnNpb24sIGltYWdlcnlWZXJzaW9uLCB0ZXJyYWluVmVyc2lvbiwgaW1hZ2VyeVByb3ZpZGVyLCB0ZXJyYWluUHJvdmlkZXIpIHsKICAgIHRoaXMuX2JpdHMgPSBiaXRzOwogICAgdGhpcy5jbm9kZVZlcnNpb24gPSBjbm9kZVZlcnNpb247CiAgICB0aGlzLmltYWdlcnlWZXJzaW9uID0gaW1hZ2VyeVZlcnNpb247CiAgICB0aGlzLnRlcnJhaW5WZXJzaW9uID0gdGVycmFpblZlcnNpb247CiAgICB0aGlzLmltYWdlcnlQcm92aWRlciA9IGltYWdlcnlQcm92aWRlcjsKICAgIHRoaXMudGVycmFpblByb3ZpZGVyID0gdGVycmFpblByb3ZpZGVyOwogICAgdGhpcy5hbmNlc3Rvckhhc1RlcnJhaW4gPSBmYWxzZTsKICAgIHRoaXMudGVycmFpblN0YXRlID0gdm9pZCAwOwogIH0KICB2YXIgY2hpbGRyZW5CaXRtYXNrcywgYW55Q2hpbGRCaXRtYXNrLCBjYWNoZUZsYWdCaXRtYXNrLCBpbWFnZUJpdG1hc2ssIHRlcnJhaW5CaXRtYXNrLCBHb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb25fZGVmYXVsdDsKICB2YXIgaW5pdF9Hb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb24gPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dvb2dsZUVhcnRoRW50ZXJwcmlzZVRpbGVJbmZvcm1hdGlvbi5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X2lzQml0U2V0KCk7CiAgICAgIGNoaWxkcmVuQml0bWFza3MgPSBbMSwgMiwgNCwgOF07CiAgICAgIGFueUNoaWxkQml0bWFzayA9IDE1OwogICAgICBjYWNoZUZsYWdCaXRtYXNrID0gMTY7CiAgICAgIGltYWdlQml0bWFzayA9IDY0OwogICAgICB0ZXJyYWluQml0bWFzayA9IDEyODsKICAgICAgR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uLmNsb25lID0gZnVuY3Rpb24oaW5mbywgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEdvb2dsZUVhcnRoRW50ZXJwcmlzZVRpbGVJbmZvcm1hdGlvbigKICAgICAgICAgICAgaW5mby5fYml0cywKICAgICAgICAgICAgaW5mby5jbm9kZVZlcnNpb24sCiAgICAgICAgICAgIGluZm8uaW1hZ2VyeVZlcnNpb24sCiAgICAgICAgICAgIGluZm8udGVycmFpblZlcnNpb24sCiAgICAgICAgICAgIGluZm8uaW1hZ2VyeVByb3ZpZGVyLAogICAgICAgICAgICBpbmZvLnRlcnJhaW5Qcm92aWRlcgogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0Ll9iaXRzID0gaW5mby5fYml0czsKICAgICAgICAgIHJlc3VsdC5jbm9kZVZlcnNpb24gPSBpbmZvLmNub2RlVmVyc2lvbjsKICAgICAgICAgIHJlc3VsdC5pbWFnZXJ5VmVyc2lvbiA9IGluZm8uaW1hZ2VyeVZlcnNpb247CiAgICAgICAgICByZXN1bHQudGVycmFpblZlcnNpb24gPSBpbmZvLnRlcnJhaW5WZXJzaW9uOwogICAgICAgICAgcmVzdWx0LmltYWdlcnlQcm92aWRlciA9IGluZm8uaW1hZ2VyeVByb3ZpZGVyOwogICAgICAgICAgcmVzdWx0LnRlcnJhaW5Qcm92aWRlciA9IGluZm8udGVycmFpblByb3ZpZGVyOwogICAgICAgIH0KICAgICAgICByZXN1bHQuYW5jZXN0b3JIYXNUZXJyYWluID0gaW5mby5hbmNlc3Rvckhhc1RlcnJhaW47CiAgICAgICAgcmVzdWx0LnRlcnJhaW5TdGF0ZSA9IGluZm8udGVycmFpblN0YXRlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEdvb2dsZUVhcnRoRW50ZXJwcmlzZVRpbGVJbmZvcm1hdGlvbi5wcm90b3R5cGUuc2V0UGFyZW50ID0gZnVuY3Rpb24ocGFyZW50KSB7CiAgICAgICAgdGhpcy5hbmNlc3Rvckhhc1RlcnJhaW4gPSBwYXJlbnQuYW5jZXN0b3JIYXNUZXJyYWluIHx8IHRoaXMuaGFzVGVycmFpbigpOwogICAgICB9OwogICAgICBHb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb24ucHJvdG90eXBlLmhhc1N1YnRyZWUgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gaXNCaXRTZXRfZGVmYXVsdCh0aGlzLl9iaXRzLCBjYWNoZUZsYWdCaXRtYXNrKTsKICAgICAgfTsKICAgICAgR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uLnByb3RvdHlwZS5oYXNJbWFnZXJ5ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGlzQml0U2V0X2RlZmF1bHQodGhpcy5fYml0cywgaW1hZ2VCaXRtYXNrKTsKICAgICAgfTsKICAgICAgR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uLnByb3RvdHlwZS5oYXNUZXJyYWluID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGlzQml0U2V0X2RlZmF1bHQodGhpcy5fYml0cywgdGVycmFpbkJpdG1hc2spOwogICAgICB9OwogICAgICBHb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb24ucHJvdG90eXBlLmhhc0NoaWxkcmVuID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGlzQml0U2V0X2RlZmF1bHQodGhpcy5fYml0cywgYW55Q2hpbGRCaXRtYXNrKTsKICAgICAgfTsKICAgICAgR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uLnByb3RvdHlwZS5oYXNDaGlsZCA9IGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgICAgcmV0dXJuIGlzQml0U2V0X2RlZmF1bHQodGhpcy5fYml0cywgY2hpbGRyZW5CaXRtYXNrc1tpbmRleF0pOwogICAgICB9OwogICAgICBHb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb24ucHJvdG90eXBlLmdldENoaWxkQml0bWFzayA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0aGlzLl9iaXRzICYgYW55Q2hpbGRCaXRtYXNrOwogICAgICB9OwogICAgICBHb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb25fZGVmYXVsdCA9IEdvb2dsZUVhcnRoRW50ZXJwcmlzZVRpbGVJbmZvcm1hdGlvbjsKICAgIH0KICB9KTsKCiAgLy8gbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvYWRsZXIzMi5qcwogIHZhciByZXF1aXJlX2FkbGVyMzIgPSBfX2NvbW1vbkpTKHsKICAgICJub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9hZGxlcjMyLmpzIihleHBvcnRzMiwgbW9kdWxlKSB7CiAgICAgICJ1c2Ugc3RyaWN0IjsKICAgICAgdmFyIGFkbGVyMzIgPSAoYWRsZXIsIGJ1ZiwgbGVuLCBwb3MpID0+IHsKICAgICAgICBsZXQgczEgPSBhZGxlciAmIDY1NTM1IHwgMCwgczIgPSBhZGxlciA+Pj4gMTYgJiA2NTUzNSB8IDAsIG4gPSAwOwogICAgICAgIHdoaWxlIChsZW4gIT09IDApIHsKICAgICAgICAgIG4gPSBsZW4gPiAyZTMgPyAyZTMgOiBsZW47CiAgICAgICAgICBsZW4gLT0gbjsKICAgICAgICAgIGRvIHsKICAgICAgICAgICAgczEgPSBzMSArIGJ1Zltwb3MrK10gfCAwOwogICAgICAgICAgICBzMiA9IHMyICsgczEgfCAwOwogICAgICAgICAgfSB3aGlsZSAoLS1uKTsKICAgICAgICAgIHMxICU9IDY1NTIxOwogICAgICAgICAgczIgJT0gNjU1MjE7CiAgICAgICAgfQogICAgICAgIHJldHVybiBzMSB8IHMyIDw8IDE2IHwgMDsKICAgICAgfTsKICAgICAgbW9kdWxlLmV4cG9ydHMgPSBhZGxlcjMyOwogICAgfQogIH0pOwoKICAvLyBub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jcmMzMi5qcwogIHZhciByZXF1aXJlX2NyYzMyID0gX19jb21tb25KUyh7CiAgICAibm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvY3JjMzIuanMiKGV4cG9ydHMyLCBtb2R1bGUpIHsKICAgICAgInVzZSBzdHJpY3QiOwogICAgICB2YXIgbWFrZVRhYmxlID0gKCkgPT4gewogICAgICAgIGxldCBjLCB0YWJsZSA9IFtdOwogICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgMjU2OyBuKyspIHsKICAgICAgICAgIGMgPSBuOwogICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCA4OyBrKyspIHsKICAgICAgICAgICAgYyA9IGMgJiAxID8gMzk4ODI5MjM4NCBeIGMgPj4+IDEgOiBjID4+PiAxOwogICAgICAgICAgfQogICAgICAgICAgdGFibGVbbl0gPSBjOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGFibGU7CiAgICAgIH07CiAgICAgIHZhciBjcmNUYWJsZSA9IG5ldyBVaW50MzJBcnJheShtYWtlVGFibGUoKSk7CiAgICAgIHZhciBjcmMzMiA9IChjcmMsIGJ1ZiwgbGVuLCBwb3MpID0+IHsKICAgICAgICBjb25zdCB0ID0gY3JjVGFibGU7CiAgICAgICAgY29uc3QgZW5kID0gcG9zICsgbGVuOwogICAgICAgIGNyYyBePSAtMTsKICAgICAgICBmb3IgKGxldCBpID0gcG9zOyBpIDwgZW5kOyBpKyspIHsKICAgICAgICAgIGNyYyA9IGNyYyA+Pj4gOCBeIHRbKGNyYyBeIGJ1ZltpXSkgJiAyNTVdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gY3JjIF4gLTE7CiAgICAgIH07CiAgICAgIG1vZHVsZS5leHBvcnRzID0gY3JjMzI7CiAgICB9CiAgfSk7CgogIC8vIG5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2luZmZhc3QuanMKICB2YXIgcmVxdWlyZV9pbmZmYXN0ID0gX19jb21tb25KUyh7CiAgICAibm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvaW5mZmFzdC5qcyIoZXhwb3J0czIsIG1vZHVsZSkgewogICAgICAidXNlIHN0cmljdCI7CiAgICAgIHZhciBCQUQgPSAxNjIwOTsKICAgICAgdmFyIFRZUEUgPSAxNjE5MTsKICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmZsYXRlX2Zhc3Qoc3RybSwgc3RhcnQpIHsKICAgICAgICBsZXQgX2luOwogICAgICAgIGxldCBsYXN0OwogICAgICAgIGxldCBfb3V0OwogICAgICAgIGxldCBiZWc7CiAgICAgICAgbGV0IGVuZDsKICAgICAgICBsZXQgZG1heDsKICAgICAgICBsZXQgd3NpemU7CiAgICAgICAgbGV0IHdoYXZlOwogICAgICAgIGxldCB3bmV4dDsKICAgICAgICBsZXQgc193aW5kb3c7CiAgICAgICAgbGV0IGhvbGQ7CiAgICAgICAgbGV0IGJpdHM7CiAgICAgICAgbGV0IGxjb2RlOwogICAgICAgIGxldCBkY29kZTsKICAgICAgICBsZXQgbG1hc2s7CiAgICAgICAgbGV0IGRtYXNrOwogICAgICAgIGxldCBoZXJlOwogICAgICAgIGxldCBvcDsKICAgICAgICBsZXQgbGVuOwogICAgICAgIGxldCBkaXN0OwogICAgICAgIGxldCBmcm9tOwogICAgICAgIGxldCBmcm9tX3NvdXJjZTsKICAgICAgICBsZXQgaW5wdXQsIG91dHB1dDsKICAgICAgICBjb25zdCBzdGF0ZSA9IHN0cm0uc3RhdGU7CiAgICAgICAgX2luID0gc3RybS5uZXh0X2luOwogICAgICAgIGlucHV0ID0gc3RybS5pbnB1dDsKICAgICAgICBsYXN0ID0gX2luICsgKHN0cm0uYXZhaWxfaW4gLSA1KTsKICAgICAgICBfb3V0ID0gc3RybS5uZXh0X291dDsKICAgICAgICBvdXRwdXQgPSBzdHJtLm91dHB1dDsKICAgICAgICBiZWcgPSBfb3V0IC0gKHN0YXJ0IC0gc3RybS5hdmFpbF9vdXQpOwogICAgICAgIGVuZCA9IF9vdXQgKyAoc3RybS5hdmFpbF9vdXQgLSAyNTcpOwogICAgICAgIGRtYXggPSBzdGF0ZS5kbWF4OwogICAgICAgIHdzaXplID0gc3RhdGUud3NpemU7CiAgICAgICAgd2hhdmUgPSBzdGF0ZS53aGF2ZTsKICAgICAgICB3bmV4dCA9IHN0YXRlLnduZXh0OwogICAgICAgIHNfd2luZG93ID0gc3RhdGUud2luZG93OwogICAgICAgIGhvbGQgPSBzdGF0ZS5ob2xkOwogICAgICAgIGJpdHMgPSBzdGF0ZS5iaXRzOwogICAgICAgIGxjb2RlID0gc3RhdGUubGVuY29kZTsKICAgICAgICBkY29kZSA9IHN0YXRlLmRpc3Rjb2RlOwogICAgICAgIGxtYXNrID0gKDEgPDwgc3RhdGUubGVuYml0cykgLSAxOwogICAgICAgIGRtYXNrID0gKDEgPDwgc3RhdGUuZGlzdGJpdHMpIC0gMTsKICAgICAgICB0b3A6CiAgICAgICAgICBkbyB7CiAgICAgICAgICAgIGlmIChiaXRzIDwgMTUpIHsKICAgICAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzOwogICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzOwogICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgfQogICAgICAgICAgICBoZXJlID0gbGNvZGVbaG9sZCAmIGxtYXNrXTsKICAgICAgICAgICAgZG9sZW46CiAgICAgICAgICAgICAgZm9yICg7IDsgKSB7CiAgICAgICAgICAgICAgICBvcCA9IGhlcmUgPj4+IDI0OwogICAgICAgICAgICAgICAgaG9sZCA+Pj49IG9wOwogICAgICAgICAgICAgICAgYml0cyAtPSBvcDsKICAgICAgICAgICAgICAgIG9wID0gaGVyZSA+Pj4gMTYgJiAyNTU7CiAgICAgICAgICAgICAgICBpZiAob3AgPT09IDApIHsKICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBoZXJlICYgNjU1MzU7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wICYgMTYpIHsKICAgICAgICAgICAgICAgICAgbGVuID0gaGVyZSAmIDY1NTM1OwogICAgICAgICAgICAgICAgICBvcCAmPSAxNTsKICAgICAgICAgICAgICAgICAgaWYgKG9wKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGJpdHMgPCBvcCkgewogICAgICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgbGVuICs9IGhvbGQgJiAoMSA8PCBvcCkgLSAxOwogICAgICAgICAgICAgICAgICAgIGhvbGQgPj4+PSBvcDsKICAgICAgICAgICAgICAgICAgICBiaXRzIC09IG9wOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChiaXRzIDwgMTUpIHsKICAgICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBoZXJlID0gZGNvZGVbaG9sZCAmIGRtYXNrXTsKICAgICAgICAgICAgICAgICAgZG9kaXN0OgogICAgICAgICAgICAgICAgICAgIGZvciAoOyA7ICkgewogICAgICAgICAgICAgICAgICAgICAgb3AgPSBoZXJlID4+PiAyNDsKICAgICAgICAgICAgICAgICAgICAgIGhvbGQgPj4+PSBvcDsKICAgICAgICAgICAgICAgICAgICAgIGJpdHMgLT0gb3A7CiAgICAgICAgICAgICAgICAgICAgICBvcCA9IGhlcmUgPj4+IDE2ICYgMjU1OwogICAgICAgICAgICAgICAgICAgICAgaWYgKG9wICYgMTYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlzdCA9IGhlcmUgJiA2NTUzNTsKICAgICAgICAgICAgICAgICAgICAgICAgb3AgJj0gMTU7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYml0cyA8IG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBkaXN0ICs9IGhvbGQgJiAoMSA8PCBvcCkgLSAxOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzdCA+IGRtYXgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayB0b3A7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaG9sZCA+Pj49IG9wOwogICAgICAgICAgICAgICAgICAgICAgICBiaXRzIC09IG9wOwogICAgICAgICAgICAgICAgICAgICAgICBvcCA9IF9vdXQgLSBiZWc7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXN0ID4gb3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBvcCA9IGRpc3QgLSBvcDsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3AgPiB3aGF2ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLnNhbmUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2siOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayB0b3A7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gc193aW5kb3c7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHduZXh0ID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tICs9IHdzaXplIC0gb3A7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3AgPCBsZW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuIC09IG9wOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHduZXh0IDwgb3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gKz0gd3NpemUgKyB3bmV4dCAtIG9wOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3AgLT0gd25leHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3AgPCBsZW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuIC09IG9wOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3bmV4dCA8IGxlbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wID0gd25leHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuIC09IG9wOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSArPSB3bmV4dCAtIG9wOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChsZW4gPiAyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4gLT0gMzsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxlbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxlbiA+IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuIC09IDM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAobGVuID4gMik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxlbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZW4gPiAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChvcCAmIDY0KSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICBoZXJlID0gZGNvZGVbKGhlcmUgJiA2NTUzNSkgKyAoaG9sZCAmICgxIDw8IG9wKSAtIDEpXTsKICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgZG9kaXN0OwogICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAiaW52YWxpZCBkaXN0YW5jZSBjb2RlIjsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgdG9wOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICgob3AgJiA2NCkgPT09IDApIHsKICAgICAgICAgICAgICAgICAgaGVyZSA9IGxjb2RlWyhoZXJlICYgNjU1MzUpICsgKGhvbGQgJiAoMSA8PCBvcCkgLSAxKV07CiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIGRvbGVuOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcCAmIDMyKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFOwogICAgICAgICAgICAgICAgICBicmVhayB0b3A7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICJpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUiOwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgICAgICAgICBicmVhayB0b3A7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9IHdoaWxlIChfaW4gPCBsYXN0ICYmIF9vdXQgPCBlbmQpOwogICAgICAgIGxlbiA9IGJpdHMgPj4gMzsKICAgICAgICBfaW4gLT0gbGVuOwogICAgICAgIGJpdHMgLT0gbGVuIDw8IDM7CiAgICAgICAgaG9sZCAmPSAoMSA8PCBiaXRzKSAtIDE7CiAgICAgICAgc3RybS5uZXh0X2luID0gX2luOwogICAgICAgIHN0cm0ubmV4dF9vdXQgPSBfb3V0OwogICAgICAgIHN0cm0uYXZhaWxfaW4gPSBfaW4gPCBsYXN0ID8gNSArIChsYXN0IC0gX2luKSA6IDUgLSAoX2luIC0gbGFzdCk7CiAgICAgICAgc3RybS5hdmFpbF9vdXQgPSBfb3V0IDwgZW5kID8gMjU3ICsgKGVuZCAtIF9vdXQpIDogMjU3IC0gKF9vdXQgLSBlbmQpOwogICAgICAgIHN0YXRlLmhvbGQgPSBob2xkOwogICAgICAgIHN0YXRlLmJpdHMgPSBiaXRzOwogICAgICAgIHJldHVybjsKICAgICAgfTsKICAgIH0KICB9KTsKCiAgLy8gbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvaW5mdHJlZXMuanMKICB2YXIgcmVxdWlyZV9pbmZ0cmVlcyA9IF9fY29tbW9uSlMoewogICAgIm5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2luZnRyZWVzLmpzIihleHBvcnRzMiwgbW9kdWxlKSB7CiAgICAgICJ1c2Ugc3RyaWN0IjsKICAgICAgdmFyIE1BWEJJVFMgPSAxNTsKICAgICAgdmFyIEVOT1VHSF9MRU5TID0gODUyOwogICAgICB2YXIgRU5PVUdIX0RJU1RTID0gNTkyOwogICAgICB2YXIgQ09ERVMgPSAwOwogICAgICB2YXIgTEVOUyA9IDE7CiAgICAgIHZhciBESVNUUyA9IDI7CiAgICAgIHZhciBsYmFzZSA9IG5ldyBVaW50MTZBcnJheShbCiAgICAgICAgLyogTGVuZ3RoIGNvZGVzIDI1Ny4uMjg1IGJhc2UgKi8KICAgICAgICAzLAogICAgICAgIDQsCiAgICAgICAgNSwKICAgICAgICA2LAogICAgICAgIDcsCiAgICAgICAgOCwKICAgICAgICA5LAogICAgICAgIDEwLAogICAgICAgIDExLAogICAgICAgIDEzLAogICAgICAgIDE1LAogICAgICAgIDE3LAogICAgICAgIDE5LAogICAgICAgIDIzLAogICAgICAgIDI3LAogICAgICAgIDMxLAogICAgICAgIDM1LAogICAgICAgIDQzLAogICAgICAgIDUxLAogICAgICAgIDU5LAogICAgICAgIDY3LAogICAgICAgIDgzLAogICAgICAgIDk5LAogICAgICAgIDExNSwKICAgICAgICAxMzEsCiAgICAgICAgMTYzLAogICAgICAgIDE5NSwKICAgICAgICAyMjcsCiAgICAgICAgMjU4LAogICAgICAgIDAsCiAgICAgICAgMAogICAgICBdKTsKICAgICAgdmFyIGxleHQgPSBuZXcgVWludDhBcnJheShbCiAgICAgICAgLyogTGVuZ3RoIGNvZGVzIDI1Ny4uMjg1IGV4dHJhICovCiAgICAgICAgMTYsCiAgICAgICAgMTYsCiAgICAgICAgMTYsCiAgICAgICAgMTYsCiAgICAgICAgMTYsCiAgICAgICAgMTYsCiAgICAgICAgMTYsCiAgICAgICAgMTYsCiAgICAgICAgMTcsCiAgICAgICAgMTcsCiAgICAgICAgMTcsCiAgICAgICAgMTcsCiAgICAgICAgMTgsCiAgICAgICAgMTgsCiAgICAgICAgMTgsCiAgICAgICAgMTgsCiAgICAgICAgMTksCiAgICAgICAgMTksCiAgICAgICAgMTksCiAgICAgICAgMTksCiAgICAgICAgMjAsCiAgICAgICAgMjAsCiAgICAgICAgMjAsCiAgICAgICAgMjAsCiAgICAgICAgMjEsCiAgICAgICAgMjEsCiAgICAgICAgMjEsCiAgICAgICAgMjEsCiAgICAgICAgMTYsCiAgICAgICAgNzIsCiAgICAgICAgNzgKICAgICAgXSk7CiAgICAgIHZhciBkYmFzZSA9IG5ldyBVaW50MTZBcnJheShbCiAgICAgICAgLyogRGlzdGFuY2UgY29kZXMgMC4uMjkgYmFzZSAqLwogICAgICAgIDEsCiAgICAgICAgMiwKICAgICAgICAzLAogICAgICAgIDQsCiAgICAgICAgNSwKICAgICAgICA3LAogICAgICAgIDksCiAgICAgICAgMTMsCiAgICAgICAgMTcsCiAgICAgICAgMjUsCiAgICAgICAgMzMsCiAgICAgICAgNDksCiAgICAgICAgNjUsCiAgICAgICAgOTcsCiAgICAgICAgMTI5LAogICAgICAgIDE5MywKICAgICAgICAyNTcsCiAgICAgICAgMzg1LAogICAgICAgIDUxMywKICAgICAgICA3NjksCiAgICAgICAgMTAyNSwKICAgICAgICAxNTM3LAogICAgICAgIDIwNDksCiAgICAgICAgMzA3MywKICAgICAgICA0MDk3LAogICAgICAgIDYxNDUsCiAgICAgICAgODE5MywKICAgICAgICAxMjI4OSwKICAgICAgICAxNjM4NSwKICAgICAgICAyNDU3NywKICAgICAgICAwLAogICAgICAgIDAKICAgICAgXSk7CiAgICAgIHZhciBkZXh0ID0gbmV3IFVpbnQ4QXJyYXkoWwogICAgICAgIC8qIERpc3RhbmNlIGNvZGVzIDAuLjI5IGV4dHJhICovCiAgICAgICAgMTYsCiAgICAgICAgMTYsCiAgICAgICAgMTYsCiAgICAgICAgMTYsCiAgICAgICAgMTcsCiAgICAgICAgMTcsCiAgICAgICAgMTgsCiAgICAgICAgMTgsCiAgICAgICAgMTksCiAgICAgICAgMTksCiAgICAgICAgMjAsCiAgICAgICAgMjAsCiAgICAgICAgMjEsCiAgICAgICAgMjEsCiAgICAgICAgMjIsCiAgICAgICAgMjIsCiAgICAgICAgMjMsCiAgICAgICAgMjMsCiAgICAgICAgMjQsCiAgICAgICAgMjQsCiAgICAgICAgMjUsCiAgICAgICAgMjUsCiAgICAgICAgMjYsCiAgICAgICAgMjYsCiAgICAgICAgMjcsCiAgICAgICAgMjcsCiAgICAgICAgMjgsCiAgICAgICAgMjgsCiAgICAgICAgMjksCiAgICAgICAgMjksCiAgICAgICAgNjQsCiAgICAgICAgNjQKICAgICAgXSk7CiAgICAgIHZhciBpbmZsYXRlX3RhYmxlID0gKHR5cGUsIGxlbnMsIGxlbnNfaW5kZXgsIGNvZGVzLCB0YWJsZSwgdGFibGVfaW5kZXgsIHdvcmssIG9wdHMpID0+IHsKICAgICAgICBjb25zdCBiaXRzID0gb3B0cy5iaXRzOwogICAgICAgIGxldCBsZW4gPSAwOwogICAgICAgIGxldCBzeW0gPSAwOwogICAgICAgIGxldCBtaW4zID0gMCwgbWF4MyA9IDA7CiAgICAgICAgbGV0IHJvb3QgPSAwOwogICAgICAgIGxldCBjdXJyID0gMDsKICAgICAgICBsZXQgZHJvcCA9IDA7CiAgICAgICAgbGV0IGxlZnQgPSAwOwogICAgICAgIGxldCB1c2VkID0gMDsKICAgICAgICBsZXQgaHVmZiA9IDA7CiAgICAgICAgbGV0IGluY3I7CiAgICAgICAgbGV0IGZpbGw7CiAgICAgICAgbGV0IGxvdzsKICAgICAgICBsZXQgbWFzazsKICAgICAgICBsZXQgbmV4dDsKICAgICAgICBsZXQgYmFzZSA9IG51bGw7CiAgICAgICAgbGV0IG1hdGNoOwogICAgICAgIGNvbnN0IGNvdW50ID0gbmV3IFVpbnQxNkFycmF5KE1BWEJJVFMgKyAxKTsKICAgICAgICBjb25zdCBvZmZzID0gbmV3IFVpbnQxNkFycmF5KE1BWEJJVFMgKyAxKTsKICAgICAgICBsZXQgZXh0cmEgPSBudWxsOwogICAgICAgIGxldCBoZXJlX2JpdHMsIGhlcmVfb3AsIGhlcmVfdmFsOwogICAgICAgIGZvciAobGVuID0gMDsgbGVuIDw9IE1BWEJJVFM7IGxlbisrKSB7CiAgICAgICAgICBjb3VudFtsZW5dID0gMDsKICAgICAgICB9CiAgICAgICAgZm9yIChzeW0gPSAwOyBzeW0gPCBjb2Rlczsgc3ltKyspIHsKICAgICAgICAgIGNvdW50W2xlbnNbbGVuc19pbmRleCArIHN5bV1dKys7CiAgICAgICAgfQogICAgICAgIHJvb3QgPSBiaXRzOwogICAgICAgIGZvciAobWF4MyA9IE1BWEJJVFM7IG1heDMgPj0gMTsgbWF4My0tKSB7CiAgICAgICAgICBpZiAoY291bnRbbWF4M10gIT09IDApIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChyb290ID4gbWF4MykgewogICAgICAgICAgcm9vdCA9IG1heDM7CiAgICAgICAgfQogICAgICAgIGlmIChtYXgzID09PSAwKSB7CiAgICAgICAgICB0YWJsZVt0YWJsZV9pbmRleCsrXSA9IDEgPDwgMjQgfCA2NCA8PCAxNiB8IDA7CiAgICAgICAgICB0YWJsZVt0YWJsZV9pbmRleCsrXSA9IDEgPDwgMjQgfCA2NCA8PCAxNiB8IDA7CiAgICAgICAgICBvcHRzLmJpdHMgPSAxOwogICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIGZvciAobWluMyA9IDE7IG1pbjMgPCBtYXgzOyBtaW4zKyspIHsKICAgICAgICAgIGlmIChjb3VudFttaW4zXSAhPT0gMCkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHJvb3QgPCBtaW4zKSB7CiAgICAgICAgICByb290ID0gbWluMzsKICAgICAgICB9CiAgICAgICAgbGVmdCA9IDE7CiAgICAgICAgZm9yIChsZW4gPSAxOyBsZW4gPD0gTUFYQklUUzsgbGVuKyspIHsKICAgICAgICAgIGxlZnQgPDw9IDE7CiAgICAgICAgICBsZWZ0IC09IGNvdW50W2xlbl07CiAgICAgICAgICBpZiAobGVmdCA8IDApIHsKICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAobGVmdCA+IDAgJiYgKHR5cGUgPT09IENPREVTIHx8IG1heDMgIT09IDEpKSB7CiAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgfQogICAgICAgIG9mZnNbMV0gPSAwOwogICAgICAgIGZvciAobGVuID0gMTsgbGVuIDwgTUFYQklUUzsgbGVuKyspIHsKICAgICAgICAgIG9mZnNbbGVuICsgMV0gPSBvZmZzW2xlbl0gKyBjb3VudFtsZW5dOwogICAgICAgIH0KICAgICAgICBmb3IgKHN5bSA9IDA7IHN5bSA8IGNvZGVzOyBzeW0rKykgewogICAgICAgICAgaWYgKGxlbnNbbGVuc19pbmRleCArIHN5bV0gIT09IDApIHsKICAgICAgICAgICAgd29ya1tvZmZzW2xlbnNbbGVuc19pbmRleCArIHN5bV1dKytdID0gc3ltOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAodHlwZSA9PT0gQ09ERVMpIHsKICAgICAgICAgIGJhc2UgPSBleHRyYSA9IHdvcms7CiAgICAgICAgICBtYXRjaCA9IDIwOwogICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gTEVOUykgewogICAgICAgICAgYmFzZSA9IGxiYXNlOwogICAgICAgICAgZXh0cmEgPSBsZXh0OwogICAgICAgICAgbWF0Y2ggPSAyNTc7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGJhc2UgPSBkYmFzZTsKICAgICAgICAgIGV4dHJhID0gZGV4dDsKICAgICAgICAgIG1hdGNoID0gMDsKICAgICAgICB9CiAgICAgICAgaHVmZiA9IDA7CiAgICAgICAgc3ltID0gMDsKICAgICAgICBsZW4gPSBtaW4zOwogICAgICAgIG5leHQgPSB0YWJsZV9pbmRleDsKICAgICAgICBjdXJyID0gcm9vdDsKICAgICAgICBkcm9wID0gMDsKICAgICAgICBsb3cgPSAtMTsKICAgICAgICB1c2VkID0gMSA8PCByb290OwogICAgICAgIG1hc2sgPSB1c2VkIC0gMTsKICAgICAgICBpZiAodHlwZSA9PT0gTEVOUyAmJiB1c2VkID4gRU5PVUdIX0xFTlMgfHwgdHlwZSA9PT0gRElTVFMgJiYgdXNlZCA+IEVOT1VHSF9ESVNUUykgewogICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgfQogICAgICAgIGZvciAoOyA7ICkgewogICAgICAgICAgaGVyZV9iaXRzID0gbGVuIC0gZHJvcDsKICAgICAgICAgIGlmICh3b3JrW3N5bV0gKyAxIDwgbWF0Y2gpIHsKICAgICAgICAgICAgaGVyZV9vcCA9IDA7CiAgICAgICAgICAgIGhlcmVfdmFsID0gd29ya1tzeW1dOwogICAgICAgICAgfSBlbHNlIGlmICh3b3JrW3N5bV0gPj0gbWF0Y2gpIHsKICAgICAgICAgICAgaGVyZV9vcCA9IGV4dHJhW3dvcmtbc3ltXSAtIG1hdGNoXTsKICAgICAgICAgICAgaGVyZV92YWwgPSBiYXNlW3dvcmtbc3ltXSAtIG1hdGNoXTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGhlcmVfb3AgPSAzMiArIDY0OwogICAgICAgICAgICBoZXJlX3ZhbCA9IDA7CiAgICAgICAgICB9CiAgICAgICAgICBpbmNyID0gMSA8PCBsZW4gLSBkcm9wOwogICAgICAgICAgZmlsbCA9IDEgPDwgY3VycjsKICAgICAgICAgIG1pbjMgPSBmaWxsOwogICAgICAgICAgZG8gewogICAgICAgICAgICBmaWxsIC09IGluY3I7CiAgICAgICAgICAgIHRhYmxlW25leHQgKyAoaHVmZiA+PiBkcm9wKSArIGZpbGxdID0gaGVyZV9iaXRzIDw8IDI0IHwgaGVyZV9vcCA8PCAxNiB8IGhlcmVfdmFsIHwgMDsKICAgICAgICAgIH0gd2hpbGUgKGZpbGwgIT09IDApOwogICAgICAgICAgaW5jciA9IDEgPDwgbGVuIC0gMTsKICAgICAgICAgIHdoaWxlIChodWZmICYgaW5jcikgewogICAgICAgICAgICBpbmNyID4+PSAxOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGluY3IgIT09IDApIHsKICAgICAgICAgICAgaHVmZiAmPSBpbmNyIC0gMTsKICAgICAgICAgICAgaHVmZiArPSBpbmNyOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaHVmZiA9IDA7CiAgICAgICAgICB9CiAgICAgICAgICBzeW0rKzsKICAgICAgICAgIGlmICgtLWNvdW50W2xlbl0gPT09IDApIHsKICAgICAgICAgICAgaWYgKGxlbiA9PT0gbWF4MykgewogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGxlbiA9IGxlbnNbbGVuc19pbmRleCArIHdvcmtbc3ltXV07CiAgICAgICAgICB9CiAgICAgICAgICBpZiAobGVuID4gcm9vdCAmJiAoaHVmZiAmIG1hc2spICE9PSBsb3cpIHsKICAgICAgICAgICAgaWYgKGRyb3AgPT09IDApIHsKICAgICAgICAgICAgICBkcm9wID0gcm9vdDsKICAgICAgICAgICAgfQogICAgICAgICAgICBuZXh0ICs9IG1pbjM7CiAgICAgICAgICAgIGN1cnIgPSBsZW4gLSBkcm9wOwogICAgICAgICAgICBsZWZ0ID0gMSA8PCBjdXJyOwogICAgICAgICAgICB3aGlsZSAoY3VyciArIGRyb3AgPCBtYXgzKSB7CiAgICAgICAgICAgICAgbGVmdCAtPSBjb3VudFtjdXJyICsgZHJvcF07CiAgICAgICAgICAgICAgaWYgKGxlZnQgPD0gMCkgewogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGN1cnIrKzsKICAgICAgICAgICAgICBsZWZ0IDw8PSAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHVzZWQgKz0gMSA8PCBjdXJyOwogICAgICAgICAgICBpZiAodHlwZSA9PT0gTEVOUyAmJiB1c2VkID4gRU5PVUdIX0xFTlMgfHwgdHlwZSA9PT0gRElTVFMgJiYgdXNlZCA+IEVOT1VHSF9ESVNUUykgewogICAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGxvdyA9IGh1ZmYgJiBtYXNrOwogICAgICAgICAgICB0YWJsZVtsb3ddID0gcm9vdCA8PCAyNCB8IGN1cnIgPDwgMTYgfCBuZXh0IC0gdGFibGVfaW5kZXggfCAwOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoaHVmZiAhPT0gMCkgewogICAgICAgICAgdGFibGVbbmV4dCArIGh1ZmZdID0gbGVuIC0gZHJvcCA8PCAyNCB8IDY0IDw8IDE2IHwgMDsKICAgICAgICB9CiAgICAgICAgb3B0cy5iaXRzID0gcm9vdDsKICAgICAgICByZXR1cm4gMDsKICAgICAgfTsKICAgICAgbW9kdWxlLmV4cG9ydHMgPSBpbmZsYXRlX3RhYmxlOwogICAgfQogIH0pOwoKICAvLyBub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jb25zdGFudHMuanMKICB2YXIgcmVxdWlyZV9jb25zdGFudHMgPSBfX2NvbW1vbkpTKHsKICAgICJub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jb25zdGFudHMuanMiKGV4cG9ydHMyLCBtb2R1bGUpIHsKICAgICAgInVzZSBzdHJpY3QiOwogICAgICBtb2R1bGUuZXhwb3J0cyA9IHsKICAgICAgICAvKiBBbGxvd2VkIGZsdXNoIHZhbHVlczsgc2VlIGRlZmxhdGUoKSBhbmQgaW5mbGF0ZSgpIGJlbG93IGZvciBkZXRhaWxzICovCiAgICAgICAgWl9OT19GTFVTSDogMCwKICAgICAgICBaX1BBUlRJQUxfRkxVU0g6IDEsCiAgICAgICAgWl9TWU5DX0ZMVVNIOiAyLAogICAgICAgIFpfRlVMTF9GTFVTSDogMywKICAgICAgICBaX0ZJTklTSDogNCwKICAgICAgICBaX0JMT0NLOiA1LAogICAgICAgIFpfVFJFRVM6IDYsCiAgICAgICAgLyogUmV0dXJuIGNvZGVzIGZvciB0aGUgY29tcHJlc3Npb24vZGVjb21wcmVzc2lvbiBmdW5jdGlvbnMuIE5lZ2F0aXZlIHZhbHVlcwogICAgICAgICogYXJlIGVycm9ycywgcG9zaXRpdmUgdmFsdWVzIGFyZSB1c2VkIGZvciBzcGVjaWFsIGJ1dCBub3JtYWwgZXZlbnRzLgogICAgICAgICovCiAgICAgICAgWl9PSzogMCwKICAgICAgICBaX1NUUkVBTV9FTkQ6IDEsCiAgICAgICAgWl9ORUVEX0RJQ1Q6IDIsCiAgICAgICAgWl9FUlJOTzogLTEsCiAgICAgICAgWl9TVFJFQU1fRVJST1I6IC0yLAogICAgICAgIFpfREFUQV9FUlJPUjogLTMsCiAgICAgICAgWl9NRU1fRVJST1I6IC00LAogICAgICAgIFpfQlVGX0VSUk9SOiAtNSwKICAgICAgICAvL1pfVkVSU0lPTl9FUlJPUjogLTYsCiAgICAgICAgLyogY29tcHJlc3Npb24gbGV2ZWxzICovCiAgICAgICAgWl9OT19DT01QUkVTU0lPTjogMCwKICAgICAgICBaX0JFU1RfU1BFRUQ6IDEsCiAgICAgICAgWl9CRVNUX0NPTVBSRVNTSU9OOiA5LAogICAgICAgIFpfREVGQVVMVF9DT01QUkVTU0lPTjogLTEsCiAgICAgICAgWl9GSUxURVJFRDogMSwKICAgICAgICBaX0hVRkZNQU5fT05MWTogMiwKICAgICAgICBaX1JMRTogMywKICAgICAgICBaX0ZJWEVEOiA0LAogICAgICAgIFpfREVGQVVMVF9TVFJBVEVHWTogMCwKICAgICAgICAvKiBQb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIGRhdGFfdHlwZSBmaWVsZCAodGhvdWdoIHNlZSBpbmZsYXRlKCkpICovCiAgICAgICAgWl9CSU5BUlk6IDAsCiAgICAgICAgWl9URVhUOiAxLAogICAgICAgIC8vWl9BU0NJSTogICAgICAgICAgICAgICAgMSwgLy8gPSBaX1RFWFQgKGRlcHJlY2F0ZWQpCiAgICAgICAgWl9VTktOT1dOOiAyLAogICAgICAgIC8qIFRoZSBkZWZsYXRlIGNvbXByZXNzaW9uIG1ldGhvZCAqLwogICAgICAgIFpfREVGTEFURUQ6IDgKICAgICAgICAvL1pfTlVMTDogICAgICAgICAgICAgICAgIG51bGwgLy8gVXNlIC0xIG9yIG51bGwgaW5saW5lLCBkZXBlbmRpbmcgb24gdmFyIHR5cGUKICAgICAgfTsKICAgIH0KICB9KTsKCiAgLy8gbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvaW5mbGF0ZS5qcwogIHZhciByZXF1aXJlX2luZmxhdGUgPSBfX2NvbW1vbkpTKHsKICAgICJub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9pbmZsYXRlLmpzIihleHBvcnRzMiwgbW9kdWxlKSB7CiAgICAgICJ1c2Ugc3RyaWN0IjsKICAgICAgdmFyIGFkbGVyMzIgPSByZXF1aXJlX2FkbGVyMzIoKTsKICAgICAgdmFyIGNyYzMyID0gcmVxdWlyZV9jcmMzMigpOwogICAgICB2YXIgaW5mbGF0ZV9mYXN0ID0gcmVxdWlyZV9pbmZmYXN0KCk7CiAgICAgIHZhciBpbmZsYXRlX3RhYmxlID0gcmVxdWlyZV9pbmZ0cmVlcygpOwogICAgICB2YXIgQ09ERVMgPSAwOwogICAgICB2YXIgTEVOUyA9IDE7CiAgICAgIHZhciBESVNUUyA9IDI7CiAgICAgIHZhciB7CiAgICAgICAgWl9GSU5JU0gsCiAgICAgICAgWl9CTE9DSywKICAgICAgICBaX1RSRUVTLAogICAgICAgIFpfT0ssCiAgICAgICAgWl9TVFJFQU1fRU5ELAogICAgICAgIFpfTkVFRF9ESUNULAogICAgICAgIFpfU1RSRUFNX0VSUk9SLAogICAgICAgIFpfREFUQV9FUlJPUiwKICAgICAgICBaX01FTV9FUlJPUiwKICAgICAgICBaX0JVRl9FUlJPUiwKICAgICAgICBaX0RFRkxBVEVECiAgICAgIH0gPSByZXF1aXJlX2NvbnN0YW50cygpOwogICAgICB2YXIgSEVBRCA9IDE2MTgwOwogICAgICB2YXIgRkxBR1MgPSAxNjE4MTsKICAgICAgdmFyIFRJTUUgPSAxNjE4MjsKICAgICAgdmFyIE9TID0gMTYxODM7CiAgICAgIHZhciBFWExFTiA9IDE2MTg0OwogICAgICB2YXIgRVhUUkEgPSAxNjE4NTsKICAgICAgdmFyIE5BTUUgPSAxNjE4NjsKICAgICAgdmFyIENPTU1FTlQgPSAxNjE4NzsKICAgICAgdmFyIEhDUkMgPSAxNjE4ODsKICAgICAgdmFyIERJQ1RJRCA9IDE2MTg5OwogICAgICB2YXIgRElDVCA9IDE2MTkwOwogICAgICB2YXIgVFlQRSA9IDE2MTkxOwogICAgICB2YXIgVFlQRURPID0gMTYxOTI7CiAgICAgIHZhciBTVE9SRUQgPSAxNjE5MzsKICAgICAgdmFyIENPUFlfID0gMTYxOTQ7CiAgICAgIHZhciBDT1BZID0gMTYxOTU7CiAgICAgIHZhciBUQUJMRSA9IDE2MTk2OwogICAgICB2YXIgTEVOTEVOUyA9IDE2MTk3OwogICAgICB2YXIgQ09ERUxFTlMgPSAxNjE5ODsKICAgICAgdmFyIExFTl8gPSAxNjE5OTsKICAgICAgdmFyIExFTiA9IDE2MjAwOwogICAgICB2YXIgTEVORVhUID0gMTYyMDE7CiAgICAgIHZhciBESVNUID0gMTYyMDI7CiAgICAgIHZhciBESVNURVhUID0gMTYyMDM7CiAgICAgIHZhciBNQVRDSCA9IDE2MjA0OwogICAgICB2YXIgTElUID0gMTYyMDU7CiAgICAgIHZhciBDSEVDSyA9IDE2MjA2OwogICAgICB2YXIgTEVOR1RIID0gMTYyMDc7CiAgICAgIHZhciBET05FID0gMTYyMDg7CiAgICAgIHZhciBCQUQgPSAxNjIwOTsKICAgICAgdmFyIE1FTSA9IDE2MjEwOwogICAgICB2YXIgU1lOQyA9IDE2MjExOwogICAgICB2YXIgRU5PVUdIX0xFTlMgPSA4NTI7CiAgICAgIHZhciBFTk9VR0hfRElTVFMgPSA1OTI7CiAgICAgIHZhciBNQVhfV0JJVFMgPSAxNTsKICAgICAgdmFyIERFRl9XQklUUyA9IE1BWF9XQklUUzsKICAgICAgdmFyIHpzd2FwMzIgPSAocSkgPT4gewogICAgICAgIHJldHVybiAocSA+Pj4gMjQgJiAyNTUpICsgKHEgPj4+IDggJiA2NTI4MCkgKyAoKHEgJiA2NTI4MCkgPDwgOCkgKyAoKHEgJiAyNTUpIDw8IDI0KTsKICAgICAgfTsKICAgICAgZnVuY3Rpb24gSW5mbGF0ZVN0YXRlKCkgewogICAgICAgIHRoaXMuc3RybSA9IG51bGw7CiAgICAgICAgdGhpcy5tb2RlID0gMDsKICAgICAgICB0aGlzLmxhc3QgPSBmYWxzZTsKICAgICAgICB0aGlzLndyYXAgPSAwOwogICAgICAgIHRoaXMuaGF2ZWRpY3QgPSBmYWxzZTsKICAgICAgICB0aGlzLmZsYWdzID0gMDsKICAgICAgICB0aGlzLmRtYXggPSAwOwogICAgICAgIHRoaXMuY2hlY2sgPSAwOwogICAgICAgIHRoaXMudG90YWwgPSAwOwogICAgICAgIHRoaXMuaGVhZCA9IG51bGw7CiAgICAgICAgdGhpcy53Yml0cyA9IDA7CiAgICAgICAgdGhpcy53c2l6ZSA9IDA7CiAgICAgICAgdGhpcy53aGF2ZSA9IDA7CiAgICAgICAgdGhpcy53bmV4dCA9IDA7CiAgICAgICAgdGhpcy53aW5kb3cgPSBudWxsOwogICAgICAgIHRoaXMuaG9sZCA9IDA7CiAgICAgICAgdGhpcy5iaXRzID0gMDsKICAgICAgICB0aGlzLmxlbmd0aCA9IDA7CiAgICAgICAgdGhpcy5vZmZzZXQgPSAwOwogICAgICAgIHRoaXMuZXh0cmEgPSAwOwogICAgICAgIHRoaXMubGVuY29kZSA9IG51bGw7CiAgICAgICAgdGhpcy5kaXN0Y29kZSA9IG51bGw7CiAgICAgICAgdGhpcy5sZW5iaXRzID0gMDsKICAgICAgICB0aGlzLmRpc3RiaXRzID0gMDsKICAgICAgICB0aGlzLm5jb2RlID0gMDsKICAgICAgICB0aGlzLm5sZW4gPSAwOwogICAgICAgIHRoaXMubmRpc3QgPSAwOwogICAgICAgIHRoaXMuaGF2ZSA9IDA7CiAgICAgICAgdGhpcy5uZXh0ID0gbnVsbDsKICAgICAgICB0aGlzLmxlbnMgPSBuZXcgVWludDE2QXJyYXkoMzIwKTsKICAgICAgICB0aGlzLndvcmsgPSBuZXcgVWludDE2QXJyYXkoMjg4KTsKICAgICAgICB0aGlzLmxlbmR5biA9IG51bGw7CiAgICAgICAgdGhpcy5kaXN0ZHluID0gbnVsbDsKICAgICAgICB0aGlzLnNhbmUgPSAwOwogICAgICAgIHRoaXMuYmFjayA9IDA7CiAgICAgICAgdGhpcy53YXMgPSAwOwogICAgICB9CiAgICAgIHZhciBpbmZsYXRlU3RhdGVDaGVjayA9IChzdHJtKSA9PiB7CiAgICAgICAgaWYgKCFzdHJtKSB7CiAgICAgICAgICByZXR1cm4gMTsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc3RhdGUgPSBzdHJtLnN0YXRlOwogICAgICAgIGlmICghc3RhdGUgfHwgc3RhdGUuc3RybSAhPT0gc3RybSB8fCBzdGF0ZS5tb2RlIDwgSEVBRCB8fCBzdGF0ZS5tb2RlID4gU1lOQykgewogICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgfQogICAgICAgIHJldHVybiAwOwogICAgICB9OwogICAgICB2YXIgaW5mbGF0ZVJlc2V0S2VlcCA9IChzdHJtKSA9PiB7CiAgICAgICAgaWYgKGluZmxhdGVTdGF0ZUNoZWNrKHN0cm0pKSB7CiAgICAgICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHN0YXRlID0gc3RybS5zdGF0ZTsKICAgICAgICBzdHJtLnRvdGFsX2luID0gc3RybS50b3RhbF9vdXQgPSBzdGF0ZS50b3RhbCA9IDA7CiAgICAgICAgc3RybS5tc2cgPSAiIjsKICAgICAgICBpZiAoc3RhdGUud3JhcCkgewogICAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLndyYXAgJiAxOwogICAgICAgIH0KICAgICAgICBzdGF0ZS5tb2RlID0gSEVBRDsKICAgICAgICBzdGF0ZS5sYXN0ID0gMDsKICAgICAgICBzdGF0ZS5oYXZlZGljdCA9IDA7CiAgICAgICAgc3RhdGUuZmxhZ3MgPSAtMTsKICAgICAgICBzdGF0ZS5kbWF4ID0gMzI3Njg7CiAgICAgICAgc3RhdGUuaGVhZCA9IG51bGw7CiAgICAgICAgc3RhdGUuaG9sZCA9IDA7CiAgICAgICAgc3RhdGUuYml0cyA9IDA7CiAgICAgICAgc3RhdGUubGVuY29kZSA9IHN0YXRlLmxlbmR5biA9IG5ldyBJbnQzMkFycmF5KEVOT1VHSF9MRU5TKTsKICAgICAgICBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLmRpc3RkeW4gPSBuZXcgSW50MzJBcnJheShFTk9VR0hfRElTVFMpOwogICAgICAgIHN0YXRlLnNhbmUgPSAxOwogICAgICAgIHN0YXRlLmJhY2sgPSAtMTsKICAgICAgICByZXR1cm4gWl9PSzsKICAgICAgfTsKICAgICAgdmFyIGluZmxhdGVSZXNldCA9IChzdHJtKSA9PiB7CiAgICAgICAgaWYgKGluZmxhdGVTdGF0ZUNoZWNrKHN0cm0pKSB7CiAgICAgICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHN0YXRlID0gc3RybS5zdGF0ZTsKICAgICAgICBzdGF0ZS53c2l6ZSA9IDA7CiAgICAgICAgc3RhdGUud2hhdmUgPSAwOwogICAgICAgIHN0YXRlLnduZXh0ID0gMDsKICAgICAgICByZXR1cm4gaW5mbGF0ZVJlc2V0S2VlcChzdHJtKTsKICAgICAgfTsKICAgICAgdmFyIGluZmxhdGVSZXNldDIgPSAoc3RybSwgd2luZG93Qml0cykgPT4gewogICAgICAgIGxldCB3cmFwOwogICAgICAgIGlmIChpbmZsYXRlU3RhdGVDaGVjayhzdHJtKSkgewogICAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOwogICAgICAgIH0KICAgICAgICBjb25zdCBzdGF0ZSA9IHN0cm0uc3RhdGU7CiAgICAgICAgaWYgKHdpbmRvd0JpdHMgPCAwKSB7CiAgICAgICAgICB3cmFwID0gMDsKICAgICAgICAgIHdpbmRvd0JpdHMgPSAtd2luZG93Qml0czsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgd3JhcCA9ICh3aW5kb3dCaXRzID4+IDQpICsgNTsKICAgICAgICAgIGlmICh3aW5kb3dCaXRzIDwgNDgpIHsKICAgICAgICAgICAgd2luZG93Qml0cyAmPSAxNTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHdpbmRvd0JpdHMgJiYgKHdpbmRvd0JpdHMgPCA4IHx8IHdpbmRvd0JpdHMgPiAxNSkpIHsKICAgICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjsKICAgICAgICB9CiAgICAgICAgaWYgKHN0YXRlLndpbmRvdyAhPT0gbnVsbCAmJiBzdGF0ZS53Yml0cyAhPT0gd2luZG93Qml0cykgewogICAgICAgICAgc3RhdGUud2luZG93ID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgc3RhdGUud3JhcCA9IHdyYXA7CiAgICAgICAgc3RhdGUud2JpdHMgPSB3aW5kb3dCaXRzOwogICAgICAgIHJldHVybiBpbmZsYXRlUmVzZXQoc3RybSk7CiAgICAgIH07CiAgICAgIHZhciBpbmZsYXRlSW5pdDIgPSAoc3RybSwgd2luZG93Qml0cykgPT4gewogICAgICAgIGlmICghc3RybSkgewogICAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOwogICAgICAgIH0KICAgICAgICBjb25zdCBzdGF0ZSA9IG5ldyBJbmZsYXRlU3RhdGUoKTsKICAgICAgICBzdHJtLnN0YXRlID0gc3RhdGU7CiAgICAgICAgc3RhdGUuc3RybSA9IHN0cm07CiAgICAgICAgc3RhdGUud2luZG93ID0gbnVsbDsKICAgICAgICBzdGF0ZS5tb2RlID0gSEVBRDsKICAgICAgICBjb25zdCByZXQgPSBpbmZsYXRlUmVzZXQyKHN0cm0sIHdpbmRvd0JpdHMpOwogICAgICAgIGlmIChyZXQgIT09IFpfT0spIHsKICAgICAgICAgIHN0cm0uc3RhdGUgPSBudWxsOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmV0OwogICAgICB9OwogICAgICB2YXIgaW5mbGF0ZUluaXQgPSAoc3RybSkgPT4gewogICAgICAgIHJldHVybiBpbmZsYXRlSW5pdDIoc3RybSwgREVGX1dCSVRTKTsKICAgICAgfTsKICAgICAgdmFyIHZpcmdpbiA9IHRydWU7CiAgICAgIHZhciBsZW5maXg7CiAgICAgIHZhciBkaXN0Zml4OwogICAgICB2YXIgZml4ZWR0YWJsZXMgPSAoc3RhdGUpID0+IHsKICAgICAgICBpZiAodmlyZ2luKSB7CiAgICAgICAgICBsZW5maXggPSBuZXcgSW50MzJBcnJheSg1MTIpOwogICAgICAgICAgZGlzdGZpeCA9IG5ldyBJbnQzMkFycmF5KDMyKTsKICAgICAgICAgIGxldCBzeW0gPSAwOwogICAgICAgICAgd2hpbGUgKHN5bSA8IDE0NCkgewogICAgICAgICAgICBzdGF0ZS5sZW5zW3N5bSsrXSA9IDg7CiAgICAgICAgICB9CiAgICAgICAgICB3aGlsZSAoc3ltIDwgMjU2KSB7CiAgICAgICAgICAgIHN0YXRlLmxlbnNbc3ltKytdID0gOTsKICAgICAgICAgIH0KICAgICAgICAgIHdoaWxlIChzeW0gPCAyODApIHsKICAgICAgICAgICAgc3RhdGUubGVuc1tzeW0rK10gPSA3OwogICAgICAgICAgfQogICAgICAgICAgd2hpbGUgKHN5bSA8IDI4OCkgewogICAgICAgICAgICBzdGF0ZS5sZW5zW3N5bSsrXSA9IDg7CiAgICAgICAgICB9CiAgICAgICAgICBpbmZsYXRlX3RhYmxlKExFTlMsIHN0YXRlLmxlbnMsIDAsIDI4OCwgbGVuZml4LCAwLCBzdGF0ZS53b3JrLCB7IGJpdHM6IDkgfSk7CiAgICAgICAgICBzeW0gPSAwOwogICAgICAgICAgd2hpbGUgKHN5bSA8IDMyKSB7CiAgICAgICAgICAgIHN0YXRlLmxlbnNbc3ltKytdID0gNTsKICAgICAgICAgIH0KICAgICAgICAgIGluZmxhdGVfdGFibGUoRElTVFMsIHN0YXRlLmxlbnMsIDAsIDMyLCBkaXN0Zml4LCAwLCBzdGF0ZS53b3JrLCB7IGJpdHM6IDUgfSk7CiAgICAgICAgICB2aXJnaW4gPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgc3RhdGUubGVuY29kZSA9IGxlbmZpeDsKICAgICAgICBzdGF0ZS5sZW5iaXRzID0gOTsKICAgICAgICBzdGF0ZS5kaXN0Y29kZSA9IGRpc3RmaXg7CiAgICAgICAgc3RhdGUuZGlzdGJpdHMgPSA1OwogICAgICB9OwogICAgICB2YXIgdXBkYXRld2luZG93ID0gKHN0cm0sIHNyYywgZW5kLCBjb3B5KSA9PiB7CiAgICAgICAgbGV0IGRpc3Q7CiAgICAgICAgY29uc3Qgc3RhdGUgPSBzdHJtLnN0YXRlOwogICAgICAgIGlmIChzdGF0ZS53aW5kb3cgPT09IG51bGwpIHsKICAgICAgICAgIHN0YXRlLndzaXplID0gMSA8PCBzdGF0ZS53Yml0czsKICAgICAgICAgIHN0YXRlLnduZXh0ID0gMDsKICAgICAgICAgIHN0YXRlLndoYXZlID0gMDsKICAgICAgICAgIHN0YXRlLndpbmRvdyA9IG5ldyBVaW50OEFycmF5KHN0YXRlLndzaXplKTsKICAgICAgICB9CiAgICAgICAgaWYgKGNvcHkgPj0gc3RhdGUud3NpemUpIHsKICAgICAgICAgIHN0YXRlLndpbmRvdy5zZXQoc3JjLnN1YmFycmF5KGVuZCAtIHN0YXRlLndzaXplLCBlbmQpLCAwKTsKICAgICAgICAgIHN0YXRlLnduZXh0ID0gMDsKICAgICAgICAgIHN0YXRlLndoYXZlID0gc3RhdGUud3NpemU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGRpc3QgPSBzdGF0ZS53c2l6ZSAtIHN0YXRlLnduZXh0OwogICAgICAgICAgaWYgKGRpc3QgPiBjb3B5KSB7CiAgICAgICAgICAgIGRpc3QgPSBjb3B5OwogICAgICAgICAgfQogICAgICAgICAgc3RhdGUud2luZG93LnNldChzcmMuc3ViYXJyYXkoZW5kIC0gY29weSwgZW5kIC0gY29weSArIGRpc3QpLCBzdGF0ZS53bmV4dCk7CiAgICAgICAgICBjb3B5IC09IGRpc3Q7CiAgICAgICAgICBpZiAoY29weSkgewogICAgICAgICAgICBzdGF0ZS53aW5kb3cuc2V0KHNyYy5zdWJhcnJheShlbmQgLSBjb3B5LCBlbmQpLCAwKTsKICAgICAgICAgICAgc3RhdGUud25leHQgPSBjb3B5OwogICAgICAgICAgICBzdGF0ZS53aGF2ZSA9IHN0YXRlLndzaXplOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3RhdGUud25leHQgKz0gZGlzdDsKICAgICAgICAgICAgaWYgKHN0YXRlLnduZXh0ID09PSBzdGF0ZS53c2l6ZSkgewogICAgICAgICAgICAgIHN0YXRlLnduZXh0ID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc3RhdGUud2hhdmUgPCBzdGF0ZS53c2l6ZSkgewogICAgICAgICAgICAgIHN0YXRlLndoYXZlICs9IGRpc3Q7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIDA7CiAgICAgIH07CiAgICAgIHZhciBpbmZsYXRlID0gKHN0cm0sIGZsdXNoKSA9PiB7CiAgICAgICAgbGV0IHN0YXRlOwogICAgICAgIGxldCBpbnB1dCwgb3V0cHV0OwogICAgICAgIGxldCBuZXh0OwogICAgICAgIGxldCBwdXQ7CiAgICAgICAgbGV0IGhhdmUsIGxlZnQ7CiAgICAgICAgbGV0IGhvbGQ7CiAgICAgICAgbGV0IGJpdHM7CiAgICAgICAgbGV0IF9pbiwgX291dDsKICAgICAgICBsZXQgY29weTsKICAgICAgICBsZXQgZnJvbTsKICAgICAgICBsZXQgZnJvbV9zb3VyY2U7CiAgICAgICAgbGV0IGhlcmUgPSAwOwogICAgICAgIGxldCBoZXJlX2JpdHMsIGhlcmVfb3AsIGhlcmVfdmFsOwogICAgICAgIGxldCBsYXN0X2JpdHMsIGxhc3Rfb3AsIGxhc3RfdmFsOwogICAgICAgIGxldCBsZW47CiAgICAgICAgbGV0IHJldDsKICAgICAgICBjb25zdCBoYnVmID0gbmV3IFVpbnQ4QXJyYXkoNCk7CiAgICAgICAgbGV0IG9wdHM7CiAgICAgICAgbGV0IG47CiAgICAgICAgY29uc3Qgb3JkZXIgPSAoCiAgICAgICAgICAvKiBwZXJtdXRhdGlvbiBvZiBjb2RlIGxlbmd0aHMgKi8KICAgICAgICAgIG5ldyBVaW50OEFycmF5KFsxNiwgMTcsIDE4LCAwLCA4LCA3LCA5LCA2LCAxMCwgNSwgMTEsIDQsIDEyLCAzLCAxMywgMiwgMTQsIDEsIDE1XSkKICAgICAgICApOwogICAgICAgIGlmIChpbmZsYXRlU3RhdGVDaGVjayhzdHJtKSB8fCAhc3RybS5vdXRwdXQgfHwgIXN0cm0uaW5wdXQgJiYgc3RybS5hdmFpbF9pbiAhPT0gMCkgewogICAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOwogICAgICAgIH0KICAgICAgICBzdGF0ZSA9IHN0cm0uc3RhdGU7CiAgICAgICAgaWYgKHN0YXRlLm1vZGUgPT09IFRZUEUpIHsKICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFRE87CiAgICAgICAgfQogICAgICAgIHB1dCA9IHN0cm0ubmV4dF9vdXQ7CiAgICAgICAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7CiAgICAgICAgbGVmdCA9IHN0cm0uYXZhaWxfb3V0OwogICAgICAgIG5leHQgPSBzdHJtLm5leHRfaW47CiAgICAgICAgaW5wdXQgPSBzdHJtLmlucHV0OwogICAgICAgIGhhdmUgPSBzdHJtLmF2YWlsX2luOwogICAgICAgIGhvbGQgPSBzdGF0ZS5ob2xkOwogICAgICAgIGJpdHMgPSBzdGF0ZS5iaXRzOwogICAgICAgIF9pbiA9IGhhdmU7CiAgICAgICAgX291dCA9IGxlZnQ7CiAgICAgICAgcmV0ID0gWl9PSzsKICAgICAgICBpbmZfbGVhdmU6CiAgICAgICAgICBmb3IgKDsgOyApIHsKICAgICAgICAgICAgc3dpdGNoIChzdGF0ZS5tb2RlKSB7CiAgICAgICAgICAgICAgY2FzZSBIRUFEOgogICAgICAgICAgICAgICAgaWYgKHN0YXRlLndyYXAgPT09IDApIHsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEVETzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7CiAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChzdGF0ZS53cmFwICYgMiAmJiBob2xkID09PSAzNTYxNSkgewogICAgICAgICAgICAgICAgICBpZiAoc3RhdGUud2JpdHMgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBzdGF0ZS53Yml0cyA9IDE1OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gMDsKICAgICAgICAgICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAyNTU7CiAgICAgICAgICAgICAgICAgIGhidWZbMV0gPSBob2xkID4+PiA4ICYgMjU1OwogICAgICAgICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTsKICAgICAgICAgICAgICAgICAgaG9sZCA9IDA7CiAgICAgICAgICAgICAgICAgIGJpdHMgPSAwOwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gRkxBR1M7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5kb25lID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIShzdGF0ZS53cmFwICYgMSkgfHwgLyogY2hlY2sgaWYgemxpYiBoZWFkZXIgYWxsb3dlZCAqLwogICAgICAgICAgICAgICAgKCgoaG9sZCAmIDI1NSkgPDwgOCkgKyAoaG9sZCA+PiA4KSkgJSAzMSkgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICJpbmNvcnJlY3QgaGVhZGVyIGNoZWNrIjsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoKGhvbGQgJiAxNSkgIT09IFpfREVGTEFURUQpIHsKICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAidW5rbm93biBjb21wcmVzc2lvbiBtZXRob2QiOwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGhvbGQgPj4+PSA0OwogICAgICAgICAgICAgICAgYml0cyAtPSA0OwogICAgICAgICAgICAgICAgbGVuID0gKGhvbGQgJiAxNSkgKyA4OwogICAgICAgICAgICAgICAgaWYgKHN0YXRlLndiaXRzID09PSAwKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLndiaXRzID0gbGVuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGxlbiA+IDE1IHx8IGxlbiA+IHN0YXRlLndiaXRzKSB7CiAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gImludmFsaWQgd2luZG93IHNpemUiOwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLmRtYXggPSAxIDw8IHN0YXRlLndiaXRzOwogICAgICAgICAgICAgICAgc3RhdGUuZmxhZ3MgPSAwOwogICAgICAgICAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMTsKICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBob2xkICYgNTEyID8gRElDVElEIDogVFlQRTsKICAgICAgICAgICAgICAgIGhvbGQgPSAwOwogICAgICAgICAgICAgICAgYml0cyA9IDA7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBjYXNlIEZMQUdTOgogICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikgewogICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0ZS5mbGFncyA9IGhvbGQ7CiAgICAgICAgICAgICAgICBpZiAoKHN0YXRlLmZsYWdzICYgMjU1KSAhPT0gWl9ERUZMQVRFRCkgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICJ1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZCI7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgNTczNDQpIHsKICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAidW5rbm93biBoZWFkZXIgZmxhZ3Mgc2V0IjsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkgewogICAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLnRleHQgPSBob2xkID4+IDggJiAxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgNTEyICYmIHN0YXRlLndyYXAgJiA0KSB7CiAgICAgICAgICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMjU1OwogICAgICAgICAgICAgICAgICBoYnVmWzFdID0gaG9sZCA+Pj4gOCAmIDI1NTsKICAgICAgICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBob2xkID0gMDsKICAgICAgICAgICAgICAgIGJpdHMgPSAwOwogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IFRJTUU7CiAgICAgICAgICAgICAgY2FzZSBUSU1FOgogICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikgewogICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkgewogICAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLnRpbWUgPSBob2xkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgNTEyICYmIHN0YXRlLndyYXAgJiA0KSB7CiAgICAgICAgICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMjU1OwogICAgICAgICAgICAgICAgICBoYnVmWzFdID0gaG9sZCA+Pj4gOCAmIDI1NTsKICAgICAgICAgICAgICAgICAgaGJ1ZlsyXSA9IGhvbGQgPj4+IDE2ICYgMjU1OwogICAgICAgICAgICAgICAgICBoYnVmWzNdID0gaG9sZCA+Pj4gMjQgJiAyNTU7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDQsIDApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaG9sZCA9IDA7CiAgICAgICAgICAgICAgICBiaXRzID0gMDsKICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBPUzsKICAgICAgICAgICAgICBjYXNlIE9TOgogICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikgewogICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkgewogICAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLnhmbGFncyA9IGhvbGQgJiAyNTU7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQub3MgPSBob2xkID4+IDg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiA1MTIgJiYgc3RhdGUud3JhcCAmIDQpIHsKICAgICAgICAgICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAyNTU7CiAgICAgICAgICAgICAgICAgIGhidWZbMV0gPSBob2xkID4+PiA4ICYgMjU1OwogICAgICAgICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGhvbGQgPSAwOwogICAgICAgICAgICAgICAgYml0cyA9IDA7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gRVhMRU47CiAgICAgICAgICAgICAgY2FzZSBFWExFTjoKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDEwMjQpIHsKICAgICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikgewogICAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgc3RhdGUubGVuZ3RoID0gaG9sZDsKICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHsKICAgICAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhX2xlbiA9IGhvbGQ7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgNTEyICYmIHN0YXRlLndyYXAgJiA0KSB7CiAgICAgICAgICAgICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAyNTU7CiAgICAgICAgICAgICAgICAgICAgaGJ1ZlsxXSA9IGhvbGQgPj4+IDggJiAyNTU7CiAgICAgICAgICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaG9sZCA9IDA7CiAgICAgICAgICAgICAgICAgIGJpdHMgPSAwOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5oZWFkKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmEgPSBudWxsOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEVYVFJBOwogICAgICAgICAgICAgIGNhc2UgRVhUUkE6CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAxMDI0KSB7CiAgICAgICAgICAgICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgIGlmIChjb3B5ID4gaGF2ZSkgewogICAgICAgICAgICAgICAgICAgIGNvcHkgPSBoYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChjb3B5KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHsKICAgICAgICAgICAgICAgICAgICAgIGxlbiA9IHN0YXRlLmhlYWQuZXh0cmFfbGVuIC0gc3RhdGUubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5oZWFkLmV4dHJhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmEgPSBuZXcgVWludDhBcnJheShzdGF0ZS5oZWFkLmV4dHJhX2xlbik7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhLnNldCgKICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuc3ViYXJyYXkoCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCwKICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBleHRyYSBmaWVsZCBpcyBsaW1pdGVkIHRvIDY1NTM2IGJ5dGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLSBubyBuZWVkIGZvciBhZGRpdGlvbmFsIHNpemUgY2hlY2sKICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0ICsgY29weQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAvKmxlbiArIGNvcHkgPiBzdGF0ZS5oZWFkLmV4dHJhX21heCAtIGxlbiA/IHN0YXRlLmhlYWQuZXh0cmFfbWF4IDogY29weSwqLwogICAgICAgICAgICAgICAgICAgICAgICBsZW4KICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDUxMiAmJiBzdGF0ZS53cmFwICYgNCkgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBoYXZlIC09IGNvcHk7CiAgICAgICAgICAgICAgICAgICAgbmV4dCArPSBjb3B5OwogICAgICAgICAgICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLmxlbmd0aCA9IDA7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gTkFNRTsKICAgICAgICAgICAgICBjYXNlIE5BTUU6CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAyMDQ4KSB7CiAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGNvcHkgPSAwOwogICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgbGVuID0gaW5wdXRbbmV4dCArIGNvcHkrK107CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQgJiYgbGVuICYmIHN0YXRlLmxlbmd0aCA8IDY1NTM2KSB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLm5hbWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShsZW4pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSB3aGlsZSAobGVuICYmIGNvcHkgPCBoYXZlKTsKICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgNTEyICYmIHN0YXRlLndyYXAgJiA0KSB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGhhdmUgLT0gY29weTsKICAgICAgICAgICAgICAgICAgbmV4dCArPSBjb3B5OwogICAgICAgICAgICAgICAgICBpZiAobGVuKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmhlYWQpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5uYW1lID0gbnVsbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLmxlbmd0aCA9IDA7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQ09NTUVOVDsKICAgICAgICAgICAgICBjYXNlIENPTU1FTlQ6CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiA0MDk2KSB7CiAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGNvcHkgPSAwOwogICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgbGVuID0gaW5wdXRbbmV4dCArIGNvcHkrK107CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQgJiYgbGVuICYmIHN0YXRlLmxlbmd0aCA8IDY1NTM2KSB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmNvbW1lbnQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShsZW4pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSB3aGlsZSAobGVuICYmIGNvcHkgPCBoYXZlKTsKICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgNTEyICYmIHN0YXRlLndyYXAgJiA0KSB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGhhdmUgLT0gY29weTsKICAgICAgICAgICAgICAgICAgbmV4dCArPSBjb3B5OwogICAgICAgICAgICAgICAgICBpZiAobGVuKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmhlYWQpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5jb21tZW50ID0gbnVsbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBIQ1JDOwogICAgICAgICAgICAgIGNhc2UgSENSQzoKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDUxMikgewogICAgICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoc3RhdGUud3JhcCAmIDQgJiYgaG9sZCAhPT0gKHN0YXRlLmNoZWNrICYgNjU1MzUpKSB7CiAgICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAiaGVhZGVyIGNyYyBtaXNtYXRjaCI7CiAgICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBob2xkID0gMDsKICAgICAgICAgICAgICAgICAgYml0cyA9IDA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkgewogICAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmhjcmMgPSBzdGF0ZS5mbGFncyA+PiA5ICYgMTsKICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5kb25lID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IDA7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGNhc2UgRElDVElEOgogICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikgewogICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSB6c3dhcDMyKGhvbGQpOwogICAgICAgICAgICAgICAgaG9sZCA9IDA7CiAgICAgICAgICAgICAgICBiaXRzID0gMDsKICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBESUNUOwogICAgICAgICAgICAgIGNhc2UgRElDVDoKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5oYXZlZGljdCA9PT0gMCkgewogICAgICAgICAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gcHV0OwogICAgICAgICAgICAgICAgICBzdHJtLmF2YWlsX291dCA9IGxlZnQ7CiAgICAgICAgICAgICAgICAgIHN0cm0ubmV4dF9pbiA9IG5leHQ7CiAgICAgICAgICAgICAgICAgIHN0cm0uYXZhaWxfaW4gPSBoYXZlOwogICAgICAgICAgICAgICAgICBzdGF0ZS5ob2xkID0gaG9sZDsKICAgICAgICAgICAgICAgICAgc3RhdGUuYml0cyA9IGJpdHM7CiAgICAgICAgICAgICAgICAgIHJldHVybiBaX05FRURfRElDVDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IDE7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTsKICAgICAgICAgICAgICBjYXNlIFRZUEU6CiAgICAgICAgICAgICAgICBpZiAoZmx1c2ggPT09IFpfQkxPQ0sgfHwgZmx1c2ggPT09IFpfVFJFRVMpIHsKICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNhc2UgVFlQRURPOgogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmxhc3QpIHsKICAgICAgICAgICAgICAgICAgaG9sZCA+Pj49IGJpdHMgJiA3OwogICAgICAgICAgICAgICAgICBiaXRzIC09IGJpdHMgJiA3OwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQ0hFQ0s7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAzKSB7CiAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLmxhc3QgPSBob2xkICYgMTsKICAgICAgICAgICAgICAgIGhvbGQgPj4+PSAxOwogICAgICAgICAgICAgICAgYml0cyAtPSAxOwogICAgICAgICAgICAgICAgc3dpdGNoIChob2xkICYgMykgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IFNUT1JFRDsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICAgIGZpeGVkdGFibGVzKHN0YXRlKTsKICAgICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVOXzsKICAgICAgICAgICAgICAgICAgICBpZiAoZmx1c2ggPT09IFpfVFJFRVMpIHsKICAgICAgICAgICAgICAgICAgICAgIGhvbGQgPj4+PSAyOwogICAgICAgICAgICAgICAgICAgICAgYml0cyAtPSAyOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBUQUJMRTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gImludmFsaWQgYmxvY2sgdHlwZSI7CiAgICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGhvbGQgPj4+PSAyOwogICAgICAgICAgICAgICAgYml0cyAtPSAyOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSBTVE9SRUQ6CiAgICAgICAgICAgICAgICBob2xkID4+Pj0gYml0cyAmIDc7CiAgICAgICAgICAgICAgICBiaXRzIC09IGJpdHMgJiA3OwogICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikgewogICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoKGhvbGQgJiA2NTUzNSkgIT09IChob2xkID4+PiAxNiBeIDY1NTM1KSkgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICJpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzIjsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0ZS5sZW5ndGggPSBob2xkICYgNjU1MzU7CiAgICAgICAgICAgICAgICBob2xkID0gMDsKICAgICAgICAgICAgICAgIGJpdHMgPSAwOwogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IENPUFlfOwogICAgICAgICAgICAgICAgaWYgKGZsdXNoID09PSBaX1RSRUVTKSB7CiAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjYXNlIENPUFlfOgogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IENPUFk7CiAgICAgICAgICAgICAgY2FzZSBDT1BZOgogICAgICAgICAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDsKICAgICAgICAgICAgICAgIGlmIChjb3B5KSB7CiAgICAgICAgICAgICAgICAgIGlmIChjb3B5ID4gaGF2ZSkgewogICAgICAgICAgICAgICAgICAgIGNvcHkgPSBoYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChjb3B5ID4gbGVmdCkgewogICAgICAgICAgICAgICAgICAgIGNvcHkgPSBsZWZ0OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChjb3B5ID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIG91dHB1dC5zZXQoaW5wdXQuc3ViYXJyYXkobmV4dCwgbmV4dCArIGNvcHkpLCBwdXQpOwogICAgICAgICAgICAgICAgICBoYXZlIC09IGNvcHk7CiAgICAgICAgICAgICAgICAgIG5leHQgKz0gY29weTsKICAgICAgICAgICAgICAgICAgbGVmdCAtPSBjb3B5OwogICAgICAgICAgICAgICAgICBwdXQgKz0gY29weTsKICAgICAgICAgICAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBjYXNlIFRBQkxFOgogICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAxNCkgewogICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0ZS5ubGVuID0gKGhvbGQgJiAzMSkgKyAyNTc7CiAgICAgICAgICAgICAgICBob2xkID4+Pj0gNTsKICAgICAgICAgICAgICAgIGJpdHMgLT0gNTsKICAgICAgICAgICAgICAgIHN0YXRlLm5kaXN0ID0gKGhvbGQgJiAzMSkgKyAxOwogICAgICAgICAgICAgICAgaG9sZCA+Pj49IDU7CiAgICAgICAgICAgICAgICBiaXRzIC09IDU7CiAgICAgICAgICAgICAgICBzdGF0ZS5uY29kZSA9IChob2xkICYgMTUpICsgNDsKICAgICAgICAgICAgICAgIGhvbGQgPj4+PSA0OwogICAgICAgICAgICAgICAgYml0cyAtPSA0OwogICAgICAgICAgICAgICAgaWYgKHN0YXRlLm5sZW4gPiAyODYgfHwgc3RhdGUubmRpc3QgPiAzMCkgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICJ0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2Ugc3ltYm9scyI7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhdGUuaGF2ZSA9IDA7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVOTEVOUzsKICAgICAgICAgICAgICBjYXNlIExFTkxFTlM6CiAgICAgICAgICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IHN0YXRlLm5jb2RlKSB7CiAgICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgMykgewogICAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgc3RhdGUubGVuc1tvcmRlcltzdGF0ZS5oYXZlKytdXSA9IGhvbGQgJiA3OwogICAgICAgICAgICAgICAgICBob2xkID4+Pj0gMzsKICAgICAgICAgICAgICAgICAgYml0cyAtPSAzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgd2hpbGUgKHN0YXRlLmhhdmUgPCAxOSkgewogICAgICAgICAgICAgICAgICBzdGF0ZS5sZW5zW29yZGVyW3N0YXRlLmhhdmUrK11dID0gMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5sZW5keW47CiAgICAgICAgICAgICAgICBzdGF0ZS5sZW5iaXRzID0gNzsKICAgICAgICAgICAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmxlbmJpdHMgfTsKICAgICAgICAgICAgICAgIHJldCA9IGluZmxhdGVfdGFibGUoQ09ERVMsIHN0YXRlLmxlbnMsIDAsIDE5LCBzdGF0ZS5sZW5jb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTsKICAgICAgICAgICAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7CiAgICAgICAgICAgICAgICBpZiAocmV0KSB7CiAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gImludmFsaWQgY29kZSBsZW5ndGhzIHNldCI7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhdGUuaGF2ZSA9IDA7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQ09ERUxFTlM7CiAgICAgICAgICAgICAgY2FzZSBDT0RFTEVOUzoKICAgICAgICAgICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgc3RhdGUubmxlbiArIHN0YXRlLm5kaXN0KSB7CiAgICAgICAgICAgICAgICAgIGZvciAoOyA7ICkgewogICAgICAgICAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2hvbGQgJiAoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtIDFdOwogICAgICAgICAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0OwogICAgICAgICAgICAgICAgICAgIGhlcmVfb3AgPSBoZXJlID4+PiAxNiAmIDI1NTsKICAgICAgICAgICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiA2NTUzNTsKICAgICAgICAgICAgICAgICAgICBpZiAoaGVyZV9iaXRzIDw9IGJpdHMpIHsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChoZXJlX3ZhbCA8IDE2KSB7CiAgICAgICAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0czsKICAgICAgICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0czsKICAgICAgICAgICAgICAgICAgICBzdGF0ZS5sZW5zW3N0YXRlLmhhdmUrK10gPSBoZXJlX3ZhbDsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaGVyZV92YWwgPT09IDE2KSB7CiAgICAgICAgICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgMjsKICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzOwogICAgICAgICAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICJpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0IjsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBsZW4gPSBzdGF0ZS5sZW5zW3N0YXRlLmhhdmUgLSAxXTsKICAgICAgICAgICAgICAgICAgICAgIGNvcHkgPSAzICsgKGhvbGQgJiAzKTsKICAgICAgICAgICAgICAgICAgICAgIGhvbGQgPj4+PSAyOwogICAgICAgICAgICAgICAgICAgICAgYml0cyAtPSAyOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGVyZV92YWwgPT09IDE3KSB7CiAgICAgICAgICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgMzsKICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzOwogICAgICAgICAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICAgICAgICBsZW4gPSAwOwogICAgICAgICAgICAgICAgICAgICAgY29weSA9IDMgKyAoaG9sZCAmIDcpOwogICAgICAgICAgICAgICAgICAgICAgaG9sZCA+Pj49IDM7CiAgICAgICAgICAgICAgICAgICAgICBiaXRzIC09IDM7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIG4gPSBoZXJlX2JpdHMgKyA3OwogICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0czsKICAgICAgICAgICAgICAgICAgICAgIGxlbiA9IDA7CiAgICAgICAgICAgICAgICAgICAgICBjb3B5ID0gMTEgKyAoaG9sZCAmIDEyNyk7CiAgICAgICAgICAgICAgICAgICAgICBob2xkID4+Pj0gNzsKICAgICAgICAgICAgICAgICAgICAgIGJpdHMgLT0gNzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmhhdmUgKyBjb3B5ID4gc3RhdGUubmxlbiArIHN0YXRlLm5kaXN0KSB7CiAgICAgICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICJpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0IjsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNvcHktLSkgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGUubGVuc1tzdGF0ZS5oYXZlKytdID0gbGVuOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHN0YXRlLm1vZGUgPT09IEJBRCkgewogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5sZW5zWzI1Nl0gPT09IDApIHsKICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAiaW52YWxpZCBjb2RlIC0tIG1pc3NpbmcgZW5kLW9mLWJsb2NrIjsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0ZS5sZW5iaXRzID0gOTsKICAgICAgICAgICAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmxlbmJpdHMgfTsKICAgICAgICAgICAgICAgIHJldCA9IGluZmxhdGVfdGFibGUoTEVOUywgc3RhdGUubGVucywgMCwgc3RhdGUubmxlbiwgc3RhdGUubGVuY29kZSwgMCwgc3RhdGUud29yaywgb3B0cyk7CiAgICAgICAgICAgICAgICBzdGF0ZS5sZW5iaXRzID0gb3B0cy5iaXRzOwogICAgICAgICAgICAgICAgaWYgKHJldCkgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICJpbnZhbGlkIGxpdGVyYWwvbGVuZ3RocyBzZXQiOwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLmRpc3RiaXRzID0gNjsKICAgICAgICAgICAgICAgIHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUuZGlzdGR5bjsKICAgICAgICAgICAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmRpc3RiaXRzIH07CiAgICAgICAgICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKERJU1RTLCBzdGF0ZS5sZW5zLCBzdGF0ZS5ubGVuLCBzdGF0ZS5uZGlzdCwgc3RhdGUuZGlzdGNvZGUsIDAsIHN0YXRlLndvcmssIG9wdHMpOwogICAgICAgICAgICAgICAgc3RhdGUuZGlzdGJpdHMgPSBvcHRzLmJpdHM7CiAgICAgICAgICAgICAgICBpZiAocmV0KSB7CiAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gImludmFsaWQgZGlzdGFuY2VzIHNldCI7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IExFTl87CiAgICAgICAgICAgICAgICBpZiAoZmx1c2ggPT09IFpfVFJFRVMpIHsKICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNhc2UgTEVOXzoKICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBMRU47CiAgICAgICAgICAgICAgY2FzZSBMRU46CiAgICAgICAgICAgICAgICBpZiAoaGF2ZSA+PSA2ICYmIGxlZnQgPj0gMjU4KSB7CiAgICAgICAgICAgICAgICAgIHN0cm0ubmV4dF9vdXQgPSBwdXQ7CiAgICAgICAgICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDsKICAgICAgICAgICAgICAgICAgc3RybS5uZXh0X2luID0gbmV4dDsKICAgICAgICAgICAgICAgICAgc3RybS5hdmFpbF9pbiA9IGhhdmU7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmhvbGQgPSBob2xkOwogICAgICAgICAgICAgICAgICBzdGF0ZS5iaXRzID0gYml0czsKICAgICAgICAgICAgICAgICAgaW5mbGF0ZV9mYXN0KHN0cm0sIF9vdXQpOwogICAgICAgICAgICAgICAgICBwdXQgPSBzdHJtLm5leHRfb3V0OwogICAgICAgICAgICAgICAgICBvdXRwdXQgPSBzdHJtLm91dHB1dDsKICAgICAgICAgICAgICAgICAgbGVmdCA9IHN0cm0uYXZhaWxfb3V0OwogICAgICAgICAgICAgICAgICBuZXh0ID0gc3RybS5uZXh0X2luOwogICAgICAgICAgICAgICAgICBpbnB1dCA9IHN0cm0uaW5wdXQ7CiAgICAgICAgICAgICAgICAgIGhhdmUgPSBzdHJtLmF2YWlsX2luOwogICAgICAgICAgICAgICAgICBob2xkID0gc3RhdGUuaG9sZDsKICAgICAgICAgICAgICAgICAgYml0cyA9IHN0YXRlLmJpdHM7CiAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5tb2RlID09PSBUWVBFKSB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGUuYmFjayA9IC0xOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhdGUuYmFjayA9IDA7CiAgICAgICAgICAgICAgICBmb3IgKDsgOyApIHsKICAgICAgICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmxlbmNvZGVbaG9sZCAmICgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMV07CiAgICAgICAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0OwogICAgICAgICAgICAgICAgICBoZXJlX29wID0gaGVyZSA+Pj4gMTYgJiAyNTU7CiAgICAgICAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDY1NTM1OwogICAgICAgICAgICAgICAgICBpZiAoaGVyZV9iaXRzIDw9IGJpdHMpIHsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoaGVyZV9vcCAmJiAoaGVyZV9vcCAmIDI0MCkgPT09IDApIHsKICAgICAgICAgICAgICAgICAgbGFzdF9iaXRzID0gaGVyZV9iaXRzOwogICAgICAgICAgICAgICAgICBsYXN0X29wID0gaGVyZV9vcDsKICAgICAgICAgICAgICAgICAgbGFzdF92YWwgPSBoZXJlX3ZhbDsKICAgICAgICAgICAgICAgICAgZm9yICg7IDsgKSB7CiAgICAgICAgICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmxlbmNvZGVbbGFzdF92YWwgKyAoKGhvbGQgJiAoMSA8PCBsYXN0X2JpdHMgKyBsYXN0X29wKSAtIDEpID4+IGxhc3RfYml0cyldOwogICAgICAgICAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0OwogICAgICAgICAgICAgICAgICAgIGhlcmVfb3AgPSBoZXJlID4+PiAxNiAmIDI1NTsKICAgICAgICAgICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiA2NTUzNTsKICAgICAgICAgICAgICAgICAgICBpZiAobGFzdF9iaXRzICsgaGVyZV9iaXRzIDw9IGJpdHMpIHsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGhvbGQgPj4+PSBsYXN0X2JpdHM7CiAgICAgICAgICAgICAgICAgIGJpdHMgLT0gbGFzdF9iaXRzOwogICAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrICs9IGxhc3RfYml0czsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0czsKICAgICAgICAgICAgICAgIHN0YXRlLmJhY2sgKz0gaGVyZV9iaXRzOwogICAgICAgICAgICAgICAgc3RhdGUubGVuZ3RoID0gaGVyZV92YWw7CiAgICAgICAgICAgICAgICBpZiAoaGVyZV9vcCA9PT0gMCkgewogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gTElUOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChoZXJlX29wICYgMzIpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUuYmFjayA9IC0xOwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoaGVyZV9vcCAmIDY0KSB7CiAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gImludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSI7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhdGUuZXh0cmEgPSBoZXJlX29wICYgMTU7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVORVhUOwogICAgICAgICAgICAgIGNhc2UgTEVORVhUOgogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmV4dHJhKSB7CiAgICAgICAgICAgICAgICAgIG4gPSBzdGF0ZS5leHRyYTsKICAgICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBzdGF0ZS5sZW5ndGggKz0gaG9sZCAmICgxIDw8IHN0YXRlLmV4dHJhKSAtIDE7CiAgICAgICAgICAgICAgICAgIGhvbGQgPj4+PSBzdGF0ZS5leHRyYTsKICAgICAgICAgICAgICAgICAgYml0cyAtPSBzdGF0ZS5leHRyYTsKICAgICAgICAgICAgICAgICAgc3RhdGUuYmFjayArPSBzdGF0ZS5leHRyYTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLndhcyA9IHN0YXRlLmxlbmd0aDsKICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBESVNUOwogICAgICAgICAgICAgIGNhc2UgRElTVDoKICAgICAgICAgICAgICAgIGZvciAoOyA7ICkgewogICAgICAgICAgICAgICAgICBoZXJlID0gc3RhdGUuZGlzdGNvZGVbaG9sZCAmICgxIDw8IHN0YXRlLmRpc3RiaXRzKSAtIDFdOwogICAgICAgICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDsKICAgICAgICAgICAgICAgICAgaGVyZV9vcCA9IGhlcmUgPj4+IDE2ICYgMjU1OwogICAgICAgICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiA2NTUzNTsKICAgICAgICAgICAgICAgICAgaWYgKGhlcmVfYml0cyA8PSBiaXRzKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKChoZXJlX29wICYgMjQwKSA9PT0gMCkgewogICAgICAgICAgICAgICAgICBsYXN0X2JpdHMgPSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICAgIGxhc3Rfb3AgPSBoZXJlX29wOwogICAgICAgICAgICAgICAgICBsYXN0X3ZhbCA9IGhlcmVfdmFsOwogICAgICAgICAgICAgICAgICBmb3IgKDsgOyApIHsKICAgICAgICAgICAgICAgICAgICBoZXJlID0gc3RhdGUuZGlzdGNvZGVbbGFzdF92YWwgKyAoKGhvbGQgJiAoMSA8PCBsYXN0X2JpdHMgKyBsYXN0X29wKSAtIDEpID4+IGxhc3RfYml0cyldOwogICAgICAgICAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0OwogICAgICAgICAgICAgICAgICAgIGhlcmVfb3AgPSBoZXJlID4+PiAxNiAmIDI1NTsKICAgICAgICAgICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiA2NTUzNTsKICAgICAgICAgICAgICAgICAgICBpZiAobGFzdF9iaXRzICsgaGVyZV9iaXRzIDw9IGJpdHMpIHsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGhvbGQgPj4+PSBsYXN0X2JpdHM7CiAgICAgICAgICAgICAgICAgIGJpdHMgLT0gbGFzdF9iaXRzOwogICAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrICs9IGxhc3RfYml0czsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0czsKICAgICAgICAgICAgICAgIHN0YXRlLmJhY2sgKz0gaGVyZV9iaXRzOwogICAgICAgICAgICAgICAgaWYgKGhlcmVfb3AgJiA2NCkgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICJpbnZhbGlkIGRpc3RhbmNlIGNvZGUiOwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLm9mZnNldCA9IGhlcmVfdmFsOwogICAgICAgICAgICAgICAgc3RhdGUuZXh0cmEgPSBoZXJlX29wICYgMTU7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gRElTVEVYVDsKICAgICAgICAgICAgICBjYXNlIERJU1RFWFQ6CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZXh0cmEpIHsKICAgICAgICAgICAgICAgICAgbiA9IHN0YXRlLmV4dHJhOwogICAgICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHN0YXRlLm9mZnNldCArPSBob2xkICYgKDEgPDwgc3RhdGUuZXh0cmEpIC0gMTsKICAgICAgICAgICAgICAgICAgaG9sZCA+Pj49IHN0YXRlLmV4dHJhOwogICAgICAgICAgICAgICAgICBiaXRzIC09IHN0YXRlLmV4dHJhOwogICAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrICs9IHN0YXRlLmV4dHJhOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHN0YXRlLm9mZnNldCA+IHN0YXRlLmRtYXgpIHsKICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2siOwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBNQVRDSDsKICAgICAgICAgICAgICBjYXNlIE1BVENIOgogICAgICAgICAgICAgICAgaWYgKGxlZnQgPT09IDApIHsKICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29weSA9IF9vdXQgLSBsZWZ0OwogICAgICAgICAgICAgICAgaWYgKHN0YXRlLm9mZnNldCA+IGNvcHkpIHsKICAgICAgICAgICAgICAgICAgY29weSA9IHN0YXRlLm9mZnNldCAtIGNvcHk7CiAgICAgICAgICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUud2hhdmUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuc2FuZSkgewogICAgICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2siOwogICAgICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLnduZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgY29weSAtPSBzdGF0ZS53bmV4dDsKICAgICAgICAgICAgICAgICAgICBmcm9tID0gc3RhdGUud3NpemUgLSBjb3B5OwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZyb20gPSBzdGF0ZS53bmV4dCAtIGNvcHk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gc3RhdGUud2luZG93OwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7CiAgICAgICAgICAgICAgICAgIGZyb20gPSBwdXQgLSBzdGF0ZS5vZmZzZXQ7CiAgICAgICAgICAgICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsKICAgICAgICAgICAgICAgICAgY29weSA9IGxlZnQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsZWZ0IC09IGNvcHk7CiAgICAgICAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTsKICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgICAgb3V0cHV0W3B1dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107CiAgICAgICAgICAgICAgICB9IHdoaWxlICgtLWNvcHkpOwogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVOOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSBMSVQ6CiAgICAgICAgICAgICAgICBpZiAobGVmdCA9PT0gMCkgewogICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBvdXRwdXRbcHV0KytdID0gc3RhdGUubGVuZ3RoOwogICAgICAgICAgICAgICAgbGVmdC0tOwogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IExFTjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGNhc2UgQ0hFQ0s6CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUud3JhcCkgewogICAgICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICAgIGhvbGQgfD0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBfb3V0IC09IGxlZnQ7CiAgICAgICAgICAgICAgICAgIHN0cm0udG90YWxfb3V0ICs9IF9vdXQ7CiAgICAgICAgICAgICAgICAgIHN0YXRlLnRvdGFsICs9IF9vdXQ7CiAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS53cmFwICYgNCAmJiBfb3V0KSB7CiAgICAgICAgICAgICAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gLypVUERBVEVfQ0hFQ0soc3RhdGUuY2hlY2ssIHB1dCAtIF9vdXQsIF9vdXQpOyovCiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZmxhZ3MgPyBjcmMzMihzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBwdXQgLSBfb3V0KSA6IGFkbGVyMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgcHV0IC0gX291dCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgX291dCA9IGxlZnQ7CiAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS53cmFwICYgNCAmJiAoc3RhdGUuZmxhZ3MgPyBob2xkIDogenN3YXAzMihob2xkKSkgIT09IHN0YXRlLmNoZWNrKSB7CiAgICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAiaW5jb3JyZWN0IGRhdGEgY2hlY2siOwogICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaG9sZCA9IDA7CiAgICAgICAgICAgICAgICAgIGJpdHMgPSAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IExFTkdUSDsKICAgICAgICAgICAgICBjYXNlIExFTkdUSDoKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS53cmFwICYmIHN0YXRlLmZsYWdzKSB7CiAgICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS53cmFwICYgNCAmJiBob2xkICE9PSAoc3RhdGUudG90YWwgJiA0Mjk0OTY3Mjk1KSkgewogICAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gImluY29ycmVjdCBsZW5ndGggY2hlY2siOwogICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaG9sZCA9IDA7CiAgICAgICAgICAgICAgICAgIGJpdHMgPSAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IERPTkU7CiAgICAgICAgICAgICAgY2FzZSBET05FOgogICAgICAgICAgICAgICAgcmV0ID0gWl9TVFJFQU1fRU5EOwogICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgIGNhc2UgQkFEOgogICAgICAgICAgICAgICAgcmV0ID0gWl9EQVRBX0VSUk9SOwogICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgIGNhc2UgTUVNOgogICAgICAgICAgICAgICAgcmV0dXJuIFpfTUVNX0VSUk9SOwogICAgICAgICAgICAgIGNhc2UgU1lOQzoKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgc3RybS5uZXh0X291dCA9IHB1dDsKICAgICAgICBzdHJtLmF2YWlsX291dCA9IGxlZnQ7CiAgICAgICAgc3RybS5uZXh0X2luID0gbmV4dDsKICAgICAgICBzdHJtLmF2YWlsX2luID0gaGF2ZTsKICAgICAgICBzdGF0ZS5ob2xkID0gaG9sZDsKICAgICAgICBzdGF0ZS5iaXRzID0gYml0czsKICAgICAgICBpZiAoc3RhdGUud3NpemUgfHwgX291dCAhPT0gc3RybS5hdmFpbF9vdXQgJiYgc3RhdGUubW9kZSA8IEJBRCAmJiAoc3RhdGUubW9kZSA8IENIRUNLIHx8IGZsdXNoICE9PSBaX0ZJTklTSCkpIHsKICAgICAgICAgIGlmICh1cGRhdGV3aW5kb3coc3RybSwgc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQsIF9vdXQgLSBzdHJtLmF2YWlsX291dCkpIHsKICAgICAgICAgICAgc3RhdGUubW9kZSA9IE1FTTsKICAgICAgICAgICAgcmV0dXJuIFpfTUVNX0VSUk9SOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBfaW4gLT0gc3RybS5hdmFpbF9pbjsKICAgICAgICBfb3V0IC09IHN0cm0uYXZhaWxfb3V0OwogICAgICAgIHN0cm0udG90YWxfaW4gKz0gX2luOwogICAgICAgIHN0cm0udG90YWxfb3V0ICs9IF9vdXQ7CiAgICAgICAgc3RhdGUudG90YWwgKz0gX291dDsKICAgICAgICBpZiAoc3RhdGUud3JhcCAmIDQgJiYgX291dCkgewogICAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gLypVUERBVEVfQ0hFQ0soc3RhdGUuY2hlY2ssIHN0cm0ubmV4dF9vdXQgLSBfb3V0LCBfb3V0KTsqLwogICAgICAgICAgc3RhdGUuZmxhZ3MgPyBjcmMzMihzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBzdHJtLm5leHRfb3V0IC0gX291dCkgOiBhZGxlcjMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHN0cm0ubmV4dF9vdXQgLSBfb3V0KTsKICAgICAgICB9CiAgICAgICAgc3RybS5kYXRhX3R5cGUgPSBzdGF0ZS5iaXRzICsgKHN0YXRlLmxhc3QgPyA2NCA6IDApICsgKHN0YXRlLm1vZGUgPT09IFRZUEUgPyAxMjggOiAwKSArIChzdGF0ZS5tb2RlID09PSBMRU5fIHx8IHN0YXRlLm1vZGUgPT09IENPUFlfID8gMjU2IDogMCk7CiAgICAgICAgaWYgKChfaW4gPT09IDAgJiYgX291dCA9PT0gMCB8fCBmbHVzaCA9PT0gWl9GSU5JU0gpICYmIHJldCA9PT0gWl9PSykgewogICAgICAgICAgcmV0ID0gWl9CVUZfRVJST1I7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXQ7CiAgICAgIH07CiAgICAgIHZhciBpbmZsYXRlRW5kID0gKHN0cm0pID0+IHsKICAgICAgICBpZiAoaW5mbGF0ZVN0YXRlQ2hlY2soc3RybSkpIHsKICAgICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjsKICAgICAgICB9CiAgICAgICAgbGV0IHN0YXRlID0gc3RybS5zdGF0ZTsKICAgICAgICBpZiAoc3RhdGUud2luZG93KSB7CiAgICAgICAgICBzdGF0ZS53aW5kb3cgPSBudWxsOwogICAgICAgIH0KICAgICAgICBzdHJtLnN0YXRlID0gbnVsbDsKICAgICAgICByZXR1cm4gWl9PSzsKICAgICAgfTsKICAgICAgdmFyIGluZmxhdGVHZXRIZWFkZXIgPSAoc3RybSwgaGVhZCkgPT4gewogICAgICAgIGlmIChpbmZsYXRlU3RhdGVDaGVjayhzdHJtKSkgewogICAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOwogICAgICAgIH0KICAgICAgICBjb25zdCBzdGF0ZSA9IHN0cm0uc3RhdGU7CiAgICAgICAgaWYgKChzdGF0ZS53cmFwICYgMikgPT09IDApIHsKICAgICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjsKICAgICAgICB9CiAgICAgICAgc3RhdGUuaGVhZCA9IGhlYWQ7CiAgICAgICAgaGVhZC5kb25lID0gZmFsc2U7CiAgICAgICAgcmV0dXJuIFpfT0s7CiAgICAgIH07CiAgICAgIHZhciBpbmZsYXRlU2V0RGljdGlvbmFyeSA9IChzdHJtLCBkaWN0aW9uYXJ5KSA9PiB7CiAgICAgICAgY29uc3QgZGljdExlbmd0aCA9IGRpY3Rpb25hcnkubGVuZ3RoOwogICAgICAgIGxldCBzdGF0ZTsKICAgICAgICBsZXQgZGljdGlkOwogICAgICAgIGxldCByZXQ7CiAgICAgICAgaWYgKGluZmxhdGVTdGF0ZUNoZWNrKHN0cm0pKSB7CiAgICAgICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7CiAgICAgICAgfQogICAgICAgIHN0YXRlID0gc3RybS5zdGF0ZTsKICAgICAgICBpZiAoc3RhdGUud3JhcCAhPT0gMCAmJiBzdGF0ZS5tb2RlICE9PSBESUNUKSB7CiAgICAgICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7CiAgICAgICAgfQogICAgICAgIGlmIChzdGF0ZS5tb2RlID09PSBESUNUKSB7CiAgICAgICAgICBkaWN0aWQgPSAxOwogICAgICAgICAgZGljdGlkID0gYWRsZXIzMihkaWN0aWQsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgsIDApOwogICAgICAgICAgaWYgKGRpY3RpZCAhPT0gc3RhdGUuY2hlY2spIHsKICAgICAgICAgICAgcmV0dXJuIFpfREFUQV9FUlJPUjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0ID0gdXBkYXRld2luZG93KHN0cm0sIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgsIGRpY3RMZW5ndGgpOwogICAgICAgIGlmIChyZXQpIHsKICAgICAgICAgIHN0YXRlLm1vZGUgPSBNRU07CiAgICAgICAgICByZXR1cm4gWl9NRU1fRVJST1I7CiAgICAgICAgfQogICAgICAgIHN0YXRlLmhhdmVkaWN0ID0gMTsKICAgICAgICByZXR1cm4gWl9PSzsKICAgICAgfTsKICAgICAgbW9kdWxlLmV4cG9ydHMuaW5mbGF0ZVJlc2V0ID0gaW5mbGF0ZVJlc2V0OwogICAgICBtb2R1bGUuZXhwb3J0cy5pbmZsYXRlUmVzZXQyID0gaW5mbGF0ZVJlc2V0MjsKICAgICAgbW9kdWxlLmV4cG9ydHMuaW5mbGF0ZVJlc2V0S2VlcCA9IGluZmxhdGVSZXNldEtlZXA7CiAgICAgIG1vZHVsZS5leHBvcnRzLmluZmxhdGVJbml0ID0gaW5mbGF0ZUluaXQ7CiAgICAgIG1vZHVsZS5leHBvcnRzLmluZmxhdGVJbml0MiA9IGluZmxhdGVJbml0MjsKICAgICAgbW9kdWxlLmV4cG9ydHMuaW5mbGF0ZSA9IGluZmxhdGU7CiAgICAgIG1vZHVsZS5leHBvcnRzLmluZmxhdGVFbmQgPSBpbmZsYXRlRW5kOwogICAgICBtb2R1bGUuZXhwb3J0cy5pbmZsYXRlR2V0SGVhZGVyID0gaW5mbGF0ZUdldEhlYWRlcjsKICAgICAgbW9kdWxlLmV4cG9ydHMuaW5mbGF0ZVNldERpY3Rpb25hcnkgPSBpbmZsYXRlU2V0RGljdGlvbmFyeTsKICAgICAgbW9kdWxlLmV4cG9ydHMuaW5mbGF0ZUluZm8gPSAicGFrbyBpbmZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KSI7CiAgICB9CiAgfSk7CgogIC8vIG5vZGVfbW9kdWxlcy9wYWtvL2xpYi91dGlscy9jb21tb24uanMKICB2YXIgcmVxdWlyZV9jb21tb24gPSBfX2NvbW1vbkpTKHsKICAgICJub2RlX21vZHVsZXMvcGFrby9saWIvdXRpbHMvY29tbW9uLmpzIihleHBvcnRzMiwgbW9kdWxlKSB7CiAgICAgICJ1c2Ugc3RyaWN0IjsKICAgICAgdmFyIF9oYXMgPSAob2JqLCBrZXkpID0+IHsKICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTsKICAgICAgfTsKICAgICAgbW9kdWxlLmV4cG9ydHMuYXNzaWduID0gZnVuY3Rpb24ob2JqKSB7CiAgICAgICAgY29uc3Qgc291cmNlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICAgICAgd2hpbGUgKHNvdXJjZXMubGVuZ3RoKSB7CiAgICAgICAgICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzLnNoaWZ0KCk7CiAgICAgICAgICBpZiAoIXNvdXJjZSkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAib2JqZWN0IikgewogICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHNvdXJjZSArICJtdXN0IGJlIG5vbi1vYmplY3QiKTsKICAgICAgICAgIH0KICAgICAgICAgIGZvciAoY29uc3QgcCBpbiBzb3VyY2UpIHsKICAgICAgICAgICAgaWYgKF9oYXMoc291cmNlLCBwKSkgewogICAgICAgICAgICAgIG9ialtwXSA9IHNvdXJjZVtwXTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gb2JqOwogICAgICB9OwogICAgICBtb2R1bGUuZXhwb3J0cy5mbGF0dGVuQ2h1bmtzID0gKGNodW5rcykgPT4gewogICAgICAgIGxldCBsZW4gPSAwOwogICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gY2h1bmtzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgbGVuICs9IGNodW5rc1tpXS5sZW5ndGg7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbik7CiAgICAgICAgZm9yIChsZXQgaSA9IDAsIHBvcyA9IDAsIGwgPSBjaHVua3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICBsZXQgY2h1bmsgPSBjaHVua3NbaV07CiAgICAgICAgICByZXN1bHQuc2V0KGNodW5rLCBwb3MpOwogICAgICAgICAgcG9zICs9IGNodW5rLmxlbmd0aDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgIH0KICB9KTsKCiAgLy8gbm9kZV9tb2R1bGVzL3Bha28vbGliL3V0aWxzL3N0cmluZ3MuanMKICB2YXIgcmVxdWlyZV9zdHJpbmdzID0gX19jb21tb25KUyh7CiAgICAibm9kZV9tb2R1bGVzL3Bha28vbGliL3V0aWxzL3N0cmluZ3MuanMiKGV4cG9ydHMyLCBtb2R1bGUpIHsKICAgICAgInVzZSBzdHJpY3QiOwogICAgICB2YXIgU1RSX0FQUExZX1VJQV9PSyA9IHRydWU7CiAgICAgIHRyeSB7CiAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheSgxKSk7CiAgICAgIH0gY2F0Y2ggKF9fKSB7CiAgICAgICAgU1RSX0FQUExZX1VJQV9PSyA9IGZhbHNlOwogICAgICB9CiAgICAgIHZhciBfdXRmOGxlbiA9IG5ldyBVaW50OEFycmF5KDI1Nik7CiAgICAgIGZvciAobGV0IHEgPSAwOyBxIDwgMjU2OyBxKyspIHsKICAgICAgICBfdXRmOGxlbltxXSA9IHEgPj0gMjUyID8gNiA6IHEgPj0gMjQ4ID8gNSA6IHEgPj0gMjQwID8gNCA6IHEgPj0gMjI0ID8gMyA6IHEgPj0gMTkyID8gMiA6IDE7CiAgICAgIH0KICAgICAgX3V0ZjhsZW5bMjU0XSA9IF91dGY4bGVuWzI1NF0gPSAxOwogICAgICBtb2R1bGUuZXhwb3J0cy5zdHJpbmcyYnVmID0gKHN0cikgPT4gewogICAgICAgIGlmICh0eXBlb2YgVGV4dEVuY29kZXIgPT09ICJmdW5jdGlvbiIgJiYgVGV4dEVuY29kZXIucHJvdG90eXBlLmVuY29kZSkgewogICAgICAgICAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzdHIpOwogICAgICAgIH0KICAgICAgICBsZXQgYnVmLCBjLCBjMiwgbV9wb3MsIGksIHN0cl9sZW4gPSBzdHIubGVuZ3RoLCBidWZfbGVuID0gMDsKICAgICAgICBmb3IgKG1fcG9zID0gMDsgbV9wb3MgPCBzdHJfbGVuOyBtX3BvcysrKSB7CiAgICAgICAgICBjID0gc3RyLmNoYXJDb2RlQXQobV9wb3MpOwogICAgICAgICAgaWYgKChjICYgNjQ1MTIpID09PSA1NTI5NiAmJiBtX3BvcyArIDEgPCBzdHJfbGVuKSB7CiAgICAgICAgICAgIGMyID0gc3RyLmNoYXJDb2RlQXQobV9wb3MgKyAxKTsKICAgICAgICAgICAgaWYgKChjMiAmIDY0NTEyKSA9PT0gNTYzMjApIHsKICAgICAgICAgICAgICBjID0gNjU1MzYgKyAoYyAtIDU1Mjk2IDw8IDEwKSArIChjMiAtIDU2MzIwKTsKICAgICAgICAgICAgICBtX3BvcysrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBidWZfbGVuICs9IGMgPCAxMjggPyAxIDogYyA8IDIwNDggPyAyIDogYyA8IDY1NTM2ID8gMyA6IDQ7CiAgICAgICAgfQogICAgICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGJ1Zl9sZW4pOwogICAgICAgIGZvciAoaSA9IDAsIG1fcG9zID0gMDsgaSA8IGJ1Zl9sZW47IG1fcG9zKyspIHsKICAgICAgICAgIGMgPSBzdHIuY2hhckNvZGVBdChtX3Bvcyk7CiAgICAgICAgICBpZiAoKGMgJiA2NDUxMikgPT09IDU1Mjk2ICYmIG1fcG9zICsgMSA8IHN0cl9sZW4pIHsKICAgICAgICAgICAgYzIgPSBzdHIuY2hhckNvZGVBdChtX3BvcyArIDEpOwogICAgICAgICAgICBpZiAoKGMyICYgNjQ1MTIpID09PSA1NjMyMCkgewogICAgICAgICAgICAgIGMgPSA2NTUzNiArIChjIC0gNTUyOTYgPDwgMTApICsgKGMyIC0gNTYzMjApOwogICAgICAgICAgICAgIG1fcG9zKys7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChjIDwgMTI4KSB7CiAgICAgICAgICAgIGJ1ZltpKytdID0gYzsKICAgICAgICAgIH0gZWxzZSBpZiAoYyA8IDIwNDgpIHsKICAgICAgICAgICAgYnVmW2krK10gPSAxOTIgfCBjID4+PiA2OwogICAgICAgICAgICBidWZbaSsrXSA9IDEyOCB8IGMgJiA2MzsKICAgICAgICAgIH0gZWxzZSBpZiAoYyA8IDY1NTM2KSB7CiAgICAgICAgICAgIGJ1ZltpKytdID0gMjI0IHwgYyA+Pj4gMTI7CiAgICAgICAgICAgIGJ1ZltpKytdID0gMTI4IHwgYyA+Pj4gNiAmIDYzOwogICAgICAgICAgICBidWZbaSsrXSA9IDEyOCB8IGMgJiA2MzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGJ1ZltpKytdID0gMjQwIHwgYyA+Pj4gMTg7CiAgICAgICAgICAgIGJ1ZltpKytdID0gMTI4IHwgYyA+Pj4gMTIgJiA2MzsKICAgICAgICAgICAgYnVmW2krK10gPSAxMjggfCBjID4+PiA2ICYgNjM7CiAgICAgICAgICAgIGJ1ZltpKytdID0gMTI4IHwgYyAmIDYzOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gYnVmOwogICAgICB9OwogICAgICB2YXIgYnVmMmJpbnN0cmluZyA9IChidWYsIGxlbikgPT4gewogICAgICAgIGlmIChsZW4gPCA2NTUzNCkgewogICAgICAgICAgaWYgKGJ1Zi5zdWJhcnJheSAmJiBTVFJfQVBQTFlfVUlBX09LKSB7CiAgICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGJ1Zi5sZW5ndGggPT09IGxlbiA/IGJ1ZiA6IGJ1Zi5zdWJhcnJheSgwLCBsZW4pKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgbGV0IHJlc3VsdCA9ICIiOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIG1vZHVsZS5leHBvcnRzLmJ1ZjJzdHJpbmcgPSAoYnVmLCBtYXgzKSA9PiB7CiAgICAgICAgY29uc3QgbGVuID0gbWF4MyB8fCBidWYubGVuZ3RoOwogICAgICAgIGlmICh0eXBlb2YgVGV4dERlY29kZXIgPT09ICJmdW5jdGlvbiIgJiYgVGV4dERlY29kZXIucHJvdG90eXBlLmRlY29kZSkgewogICAgICAgICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShidWYuc3ViYXJyYXkoMCwgbWF4MykpOwogICAgICAgIH0KICAgICAgICBsZXQgaSwgb3V0OwogICAgICAgIGNvbnN0IHV0ZjE2YnVmID0gbmV3IEFycmF5KGxlbiAqIDIpOwogICAgICAgIGZvciAob3V0ID0gMCwgaSA9IDA7IGkgPCBsZW47ICkgewogICAgICAgICAgbGV0IGMgPSBidWZbaSsrXTsKICAgICAgICAgIGlmIChjIDwgMTI4KSB7CiAgICAgICAgICAgIHV0ZjE2YnVmW291dCsrXSA9IGM7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgbGV0IGNfbGVuID0gX3V0ZjhsZW5bY107CiAgICAgICAgICBpZiAoY19sZW4gPiA0KSB7CiAgICAgICAgICAgIHV0ZjE2YnVmW291dCsrXSA9IDY1NTMzOwogICAgICAgICAgICBpICs9IGNfbGVuIC0gMTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBjICY9IGNfbGVuID09PSAyID8gMzEgOiBjX2xlbiA9PT0gMyA/IDE1IDogNzsKICAgICAgICAgIHdoaWxlIChjX2xlbiA+IDEgJiYgaSA8IGxlbikgewogICAgICAgICAgICBjID0gYyA8PCA2IHwgYnVmW2krK10gJiA2MzsKICAgICAgICAgICAgY19sZW4tLTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChjX2xlbiA+IDEpIHsKICAgICAgICAgICAgdXRmMTZidWZbb3V0KytdID0gNjU1MzM7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGMgPCA2NTUzNikgewogICAgICAgICAgICB1dGYxNmJ1ZltvdXQrK10gPSBjOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYyAtPSA2NTUzNjsKICAgICAgICAgICAgdXRmMTZidWZbb3V0KytdID0gNTUyOTYgfCBjID4+IDEwICYgMTAyMzsKICAgICAgICAgICAgdXRmMTZidWZbb3V0KytdID0gNTYzMjAgfCBjICYgMTAyMzsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGJ1ZjJiaW5zdHJpbmcodXRmMTZidWYsIG91dCk7CiAgICAgIH07CiAgICAgIG1vZHVsZS5leHBvcnRzLnV0Zjhib3JkZXIgPSAoYnVmLCBtYXgzKSA9PiB7CiAgICAgICAgbWF4MyA9IG1heDMgfHwgYnVmLmxlbmd0aDsKICAgICAgICBpZiAobWF4MyA+IGJ1Zi5sZW5ndGgpIHsKICAgICAgICAgIG1heDMgPSBidWYubGVuZ3RoOwogICAgICAgIH0KICAgICAgICBsZXQgcG9zID0gbWF4MyAtIDE7CiAgICAgICAgd2hpbGUgKHBvcyA+PSAwICYmIChidWZbcG9zXSAmIDE5MikgPT09IDEyOCkgewogICAgICAgICAgcG9zLS07CiAgICAgICAgfQogICAgICAgIGlmIChwb3MgPCAwKSB7CiAgICAgICAgICByZXR1cm4gbWF4MzsKICAgICAgICB9CiAgICAgICAgaWYgKHBvcyA9PT0gMCkgewogICAgICAgICAgcmV0dXJuIG1heDM7CiAgICAgICAgfQogICAgICAgIHJldHVybiBwb3MgKyBfdXRmOGxlbltidWZbcG9zXV0gPiBtYXgzID8gcG9zIDogbWF4MzsKICAgICAgfTsKICAgIH0KICB9KTsKCiAgLy8gbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvbWVzc2FnZXMuanMKICB2YXIgcmVxdWlyZV9tZXNzYWdlcyA9IF9fY29tbW9uSlMoewogICAgIm5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL21lc3NhZ2VzLmpzIihleHBvcnRzMiwgbW9kdWxlKSB7CiAgICAgICJ1c2Ugc3RyaWN0IjsKICAgICAgbW9kdWxlLmV4cG9ydHMgPSB7CiAgICAgICAgMjogIm5lZWQgZGljdGlvbmFyeSIsCiAgICAgICAgLyogWl9ORUVEX0RJQ1QgICAgICAgMiAgKi8KICAgICAgICAxOiAic3RyZWFtIGVuZCIsCiAgICAgICAgLyogWl9TVFJFQU1fRU5EICAgICAgMSAgKi8KICAgICAgICAwOiAiIiwKICAgICAgICAvKiBaX09LICAgICAgICAgICAgICAwICAqLwogICAgICAgICItMSI6ICJmaWxlIGVycm9yIiwKICAgICAgICAvKiBaX0VSUk5PICAgICAgICAgKC0xKSAqLwogICAgICAgICItMiI6ICJzdHJlYW0gZXJyb3IiLAogICAgICAgIC8qIFpfU1RSRUFNX0VSUk9SICAoLTIpICovCiAgICAgICAgIi0zIjogImRhdGEgZXJyb3IiLAogICAgICAgIC8qIFpfREFUQV9FUlJPUiAgICAoLTMpICovCiAgICAgICAgIi00IjogImluc3VmZmljaWVudCBtZW1vcnkiLAogICAgICAgIC8qIFpfTUVNX0VSUk9SICAgICAoLTQpICovCiAgICAgICAgIi01IjogImJ1ZmZlciBlcnJvciIsCiAgICAgICAgLyogWl9CVUZfRVJST1IgICAgICgtNSkgKi8KICAgICAgICAiLTYiOiAiaW5jb21wYXRpYmxlIHZlcnNpb24iCiAgICAgICAgLyogWl9WRVJTSU9OX0VSUk9SICgtNikgKi8KICAgICAgfTsKICAgIH0KICB9KTsKCiAgLy8gbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvenN0cmVhbS5qcwogIHZhciByZXF1aXJlX3pzdHJlYW0gPSBfX2NvbW1vbkpTKHsKICAgICJub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi96c3RyZWFtLmpzIihleHBvcnRzMiwgbW9kdWxlKSB7CiAgICAgICJ1c2Ugc3RyaWN0IjsKICAgICAgZnVuY3Rpb24gWlN0cmVhbSgpIHsKICAgICAgICB0aGlzLmlucHV0ID0gbnVsbDsKICAgICAgICB0aGlzLm5leHRfaW4gPSAwOwogICAgICAgIHRoaXMuYXZhaWxfaW4gPSAwOwogICAgICAgIHRoaXMudG90YWxfaW4gPSAwOwogICAgICAgIHRoaXMub3V0cHV0ID0gbnVsbDsKICAgICAgICB0aGlzLm5leHRfb3V0ID0gMDsKICAgICAgICB0aGlzLmF2YWlsX291dCA9IDA7CiAgICAgICAgdGhpcy50b3RhbF9vdXQgPSAwOwogICAgICAgIHRoaXMubXNnID0gIiI7CiAgICAgICAgdGhpcy5zdGF0ZSA9IG51bGw7CiAgICAgICAgdGhpcy5kYXRhX3R5cGUgPSAyOwogICAgICAgIHRoaXMuYWRsZXIgPSAwOwogICAgICB9CiAgICAgIG1vZHVsZS5leHBvcnRzID0gWlN0cmVhbTsKICAgIH0KICB9KTsKCiAgLy8gbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvZ3poZWFkZXIuanMKICB2YXIgcmVxdWlyZV9nemhlYWRlciA9IF9fY29tbW9uSlMoewogICAgIm5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2d6aGVhZGVyLmpzIihleHBvcnRzMiwgbW9kdWxlKSB7CiAgICAgICJ1c2Ugc3RyaWN0IjsKICAgICAgZnVuY3Rpb24gR1poZWFkZXIoKSB7CiAgICAgICAgdGhpcy50ZXh0ID0gMDsKICAgICAgICB0aGlzLnRpbWUgPSAwOwogICAgICAgIHRoaXMueGZsYWdzID0gMDsKICAgICAgICB0aGlzLm9zID0gMDsKICAgICAgICB0aGlzLmV4dHJhID0gbnVsbDsKICAgICAgICB0aGlzLmV4dHJhX2xlbiA9IDA7CiAgICAgICAgdGhpcy5uYW1lID0gIiI7CiAgICAgICAgdGhpcy5jb21tZW50ID0gIiI7CiAgICAgICAgdGhpcy5oY3JjID0gMDsKICAgICAgICB0aGlzLmRvbmUgPSBmYWxzZTsKICAgICAgfQogICAgICBtb2R1bGUuZXhwb3J0cyA9IEdaaGVhZGVyOwogICAgfQogIH0pOwoKICAvLyBub2RlX21vZHVsZXMvcGFrby9saWIvaW5mbGF0ZS5qcwogIHZhciByZXF1aXJlX2luZmxhdGUyID0gX19jb21tb25KUyh7CiAgICAibm9kZV9tb2R1bGVzL3Bha28vbGliL2luZmxhdGUuanMiKGV4cG9ydHMyLCBtb2R1bGUpIHsKICAgICAgInVzZSBzdHJpY3QiOwogICAgICB2YXIgemxpYl9pbmZsYXRlID0gcmVxdWlyZV9pbmZsYXRlKCk7CiAgICAgIHZhciB1dGlscyA9IHJlcXVpcmVfY29tbW9uKCk7CiAgICAgIHZhciBzdHJpbmdzID0gcmVxdWlyZV9zdHJpbmdzKCk7CiAgICAgIHZhciBtc2cgPSByZXF1aXJlX21lc3NhZ2VzKCk7CiAgICAgIHZhciBaU3RyZWFtID0gcmVxdWlyZV96c3RyZWFtKCk7CiAgICAgIHZhciBHWmhlYWRlciA9IHJlcXVpcmVfZ3poZWFkZXIoKTsKICAgICAgdmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZzsKICAgICAgdmFyIHsKICAgICAgICBaX05PX0ZMVVNILAogICAgICAgIFpfRklOSVNILAogICAgICAgIFpfT0ssCiAgICAgICAgWl9TVFJFQU1fRU5ELAogICAgICAgIFpfTkVFRF9ESUNULAogICAgICAgIFpfU1RSRUFNX0VSUk9SLAogICAgICAgIFpfREFUQV9FUlJPUiwKICAgICAgICBaX01FTV9FUlJPUgogICAgICB9ID0gcmVxdWlyZV9jb25zdGFudHMoKTsKICAgICAgZnVuY3Rpb24gSW5mbGF0ZShvcHRpb25zKSB7CiAgICAgICAgdGhpcy5vcHRpb25zID0gdXRpbHMuYXNzaWduKHsKICAgICAgICAgIGNodW5rU2l6ZTogMTAyNCAqIDY0LAogICAgICAgICAgd2luZG93Qml0czogMTUsCiAgICAgICAgICB0bzogIiIKICAgICAgICB9LCBvcHRpb25zIHx8IHt9KTsKICAgICAgICBjb25zdCBvcHQgPSB0aGlzLm9wdGlvbnM7CiAgICAgICAgaWYgKG9wdC5yYXcgJiYgb3B0LndpbmRvd0JpdHMgPj0gMCAmJiBvcHQud2luZG93Qml0cyA8IDE2KSB7CiAgICAgICAgICBvcHQud2luZG93Qml0cyA9IC1vcHQud2luZG93Qml0czsKICAgICAgICAgIGlmIChvcHQud2luZG93Qml0cyA9PT0gMCkgewogICAgICAgICAgICBvcHQud2luZG93Qml0cyA9IC0xNTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKG9wdC53aW5kb3dCaXRzID49IDAgJiYgb3B0LndpbmRvd0JpdHMgPCAxNiAmJiAhKG9wdGlvbnMgJiYgb3B0aW9ucy53aW5kb3dCaXRzKSkgewogICAgICAgICAgb3B0LndpbmRvd0JpdHMgKz0gMzI7CiAgICAgICAgfQogICAgICAgIGlmIChvcHQud2luZG93Qml0cyA+IDE1ICYmIG9wdC53aW5kb3dCaXRzIDwgNDgpIHsKICAgICAgICAgIGlmICgob3B0LndpbmRvd0JpdHMgJiAxNSkgPT09IDApIHsKICAgICAgICAgICAgb3B0LndpbmRvd0JpdHMgfD0gMTU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHRoaXMuZXJyID0gMDsKICAgICAgICB0aGlzLm1zZyA9ICIiOwogICAgICAgIHRoaXMuZW5kZWQgPSBmYWxzZTsKICAgICAgICB0aGlzLmNodW5rcyA9IFtdOwogICAgICAgIHRoaXMuc3RybSA9IG5ldyBaU3RyZWFtKCk7CiAgICAgICAgdGhpcy5zdHJtLmF2YWlsX291dCA9IDA7CiAgICAgICAgbGV0IHN0YXR1cyA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlSW5pdDIoCiAgICAgICAgICB0aGlzLnN0cm0sCiAgICAgICAgICBvcHQud2luZG93Qml0cwogICAgICAgICk7CiAgICAgICAgaWYgKHN0YXR1cyAhPT0gWl9PSykgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZ1tzdGF0dXNdKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5oZWFkZXIgPSBuZXcgR1poZWFkZXIoKTsKICAgICAgICB6bGliX2luZmxhdGUuaW5mbGF0ZUdldEhlYWRlcih0aGlzLnN0cm0sIHRoaXMuaGVhZGVyKTsKICAgICAgICBpZiAob3B0LmRpY3Rpb25hcnkpIHsKICAgICAgICAgIGlmICh0eXBlb2Ygb3B0LmRpY3Rpb25hcnkgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIG9wdC5kaWN0aW9uYXJ5ID0gc3RyaW5ncy5zdHJpbmcyYnVmKG9wdC5kaWN0aW9uYXJ5KTsKICAgICAgICAgIH0gZWxzZSBpZiAodG9TdHJpbmcuY2FsbChvcHQuZGljdGlvbmFyeSkgPT09ICJbb2JqZWN0IEFycmF5QnVmZmVyXSIpIHsKICAgICAgICAgICAgb3B0LmRpY3Rpb25hcnkgPSBuZXcgVWludDhBcnJheShvcHQuZGljdGlvbmFyeSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAob3B0LnJhdykgewogICAgICAgICAgICBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLCBvcHQuZGljdGlvbmFyeSk7CiAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IFpfT0spIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnW3N0YXR1c10pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIEluZmxhdGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihkYXRhLCBmbHVzaF9tb2RlKSB7CiAgICAgICAgY29uc3Qgc3RybSA9IHRoaXMuc3RybTsKICAgICAgICBjb25zdCBjaHVua1NpemUgPSB0aGlzLm9wdGlvbnMuY2h1bmtTaXplOwogICAgICAgIGNvbnN0IGRpY3Rpb25hcnkgPSB0aGlzLm9wdGlvbnMuZGljdGlvbmFyeTsKICAgICAgICBsZXQgc3RhdHVzLCBfZmx1c2hfbW9kZSwgbGFzdF9hdmFpbF9vdXQ7CiAgICAgICAgaWYgKHRoaXMuZW5kZWQpCiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgaWYgKGZsdXNoX21vZGUgPT09IH5+Zmx1c2hfbW9kZSkKICAgICAgICAgIF9mbHVzaF9tb2RlID0gZmx1c2hfbW9kZTsKICAgICAgICBlbHNlCiAgICAgICAgICBfZmx1c2hfbW9kZSA9IGZsdXNoX21vZGUgPT09IHRydWUgPyBaX0ZJTklTSCA6IFpfTk9fRkxVU0g7CiAgICAgICAgaWYgKHRvU3RyaW5nLmNhbGwoZGF0YSkgPT09ICJbb2JqZWN0IEFycmF5QnVmZmVyXSIpIHsKICAgICAgICAgIHN0cm0uaW5wdXQgPSBuZXcgVWludDhBcnJheShkYXRhKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc3RybS5pbnB1dCA9IGRhdGE7CiAgICAgICAgfQogICAgICAgIHN0cm0ubmV4dF9pbiA9IDA7CiAgICAgICAgc3RybS5hdmFpbF9pbiA9IHN0cm0uaW5wdXQubGVuZ3RoOwogICAgICAgIGZvciAoOyA7ICkgewogICAgICAgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7CiAgICAgICAgICAgIHN0cm0ub3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkoY2h1bmtTaXplKTsKICAgICAgICAgICAgc3RybS5uZXh0X291dCA9IDA7CiAgICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gY2h1bmtTaXplOwogICAgICAgICAgfQogICAgICAgICAgc3RhdHVzID0gemxpYl9pbmZsYXRlLmluZmxhdGUoc3RybSwgX2ZsdXNoX21vZGUpOwogICAgICAgICAgaWYgKHN0YXR1cyA9PT0gWl9ORUVEX0RJQ1QgJiYgZGljdGlvbmFyeSkgewogICAgICAgICAgICBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZVNldERpY3Rpb25hcnkoc3RybSwgZGljdGlvbmFyeSk7CiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IFpfT0spIHsKICAgICAgICAgICAgICBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZShzdHJtLCBfZmx1c2hfbW9kZSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSBaX0RBVEFfRVJST1IpIHsKICAgICAgICAgICAgICBzdGF0dXMgPSBaX05FRURfRElDVDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgd2hpbGUgKHN0cm0uYXZhaWxfaW4gPiAwICYmIHN0YXR1cyA9PT0gWl9TVFJFQU1fRU5EICYmIHN0cm0uc3RhdGUud3JhcCA+IDAgJiYgZGF0YVtzdHJtLm5leHRfaW5dICE9PSAwKSB7CiAgICAgICAgICAgIHpsaWJfaW5mbGF0ZS5pbmZsYXRlUmVzZXQoc3RybSk7CiAgICAgICAgICAgIHN0YXR1cyA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlKHN0cm0sIF9mbHVzaF9tb2RlKTsKICAgICAgICAgIH0KICAgICAgICAgIHN3aXRjaCAoc3RhdHVzKSB7CiAgICAgICAgICAgIGNhc2UgWl9TVFJFQU1fRVJST1I6CiAgICAgICAgICAgIGNhc2UgWl9EQVRBX0VSUk9SOgogICAgICAgICAgICBjYXNlIFpfTkVFRF9ESUNUOgogICAgICAgICAgICBjYXNlIFpfTUVNX0VSUk9SOgogICAgICAgICAgICAgIHRoaXMub25FbmQoc3RhdHVzKTsKICAgICAgICAgICAgICB0aGlzLmVuZGVkID0gdHJ1ZTsKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgICBsYXN0X2F2YWlsX291dCA9IHN0cm0uYXZhaWxfb3V0OwogICAgICAgICAgaWYgKHN0cm0ubmV4dF9vdXQpIHsKICAgICAgICAgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwIHx8IHN0YXR1cyA9PT0gWl9TVFJFQU1fRU5EKSB7CiAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50byA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgICAgIGxldCBuZXh0X291dF91dGY4ID0gc3RyaW5ncy51dGY4Ym9yZGVyKHN0cm0ub3V0cHV0LCBzdHJtLm5leHRfb3V0KTsKICAgICAgICAgICAgICAgIGxldCB0YWlsID0gc3RybS5uZXh0X291dCAtIG5leHRfb3V0X3V0Zjg7CiAgICAgICAgICAgICAgICBsZXQgdXRmOHN0ciA9IHN0cmluZ3MuYnVmMnN0cmluZyhzdHJtLm91dHB1dCwgbmV4dF9vdXRfdXRmOCk7CiAgICAgICAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gdGFpbDsKICAgICAgICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gY2h1bmtTaXplIC0gdGFpbDsKICAgICAgICAgICAgICAgIGlmICh0YWlsKQogICAgICAgICAgICAgICAgICBzdHJtLm91dHB1dC5zZXQoc3RybS5vdXRwdXQuc3ViYXJyYXkobmV4dF9vdXRfdXRmOCwgbmV4dF9vdXRfdXRmOCArIHRhaWwpLCAwKTsKICAgICAgICAgICAgICAgIHRoaXMub25EYXRhKHV0ZjhzdHIpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLm9uRGF0YShzdHJtLm91dHB1dC5sZW5ndGggPT09IHN0cm0ubmV4dF9vdXQgPyBzdHJtLm91dHB1dCA6IHN0cm0ub3V0cHV0LnN1YmFycmF5KDAsIHN0cm0ubmV4dF9vdXQpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChzdGF0dXMgPT09IFpfT0sgJiYgbGFzdF9hdmFpbF9vdXQgPT09IDApCiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgaWYgKHN0YXR1cyA9PT0gWl9TVFJFQU1fRU5EKSB7CiAgICAgICAgICAgIHN0YXR1cyA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlRW5kKHRoaXMuc3RybSk7CiAgICAgICAgICAgIHRoaXMub25FbmQoc3RhdHVzKTsKICAgICAgICAgICAgdGhpcy5lbmRlZCA9IHRydWU7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHN0cm0uYXZhaWxfaW4gPT09IDApCiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfTsKICAgICAgSW5mbGF0ZS5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24oY2h1bmspIHsKICAgICAgICB0aGlzLmNodW5rcy5wdXNoKGNodW5rKTsKICAgICAgfTsKICAgICAgSW5mbGF0ZS5wcm90b3R5cGUub25FbmQgPSBmdW5jdGlvbihzdGF0dXMpIHsKICAgICAgICBpZiAoc3RhdHVzID09PSBaX09LKSB7CiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRvID09PSAic3RyaW5nIikgewogICAgICAgICAgICB0aGlzLnJlc3VsdCA9IHRoaXMuY2h1bmtzLmpvaW4oIiIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5yZXN1bHQgPSB1dGlscy5mbGF0dGVuQ2h1bmtzKHRoaXMuY2h1bmtzKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdGhpcy5jaHVua3MgPSBbXTsKICAgICAgICB0aGlzLmVyciA9IHN0YXR1czsKICAgICAgICB0aGlzLm1zZyA9IHRoaXMuc3RybS5tc2c7CiAgICAgIH07CiAgICAgIGZ1bmN0aW9uIGluZmxhdGUoaW5wdXQsIG9wdGlvbnMpIHsKICAgICAgICBjb25zdCBpbmZsYXRvciA9IG5ldyBJbmZsYXRlKG9wdGlvbnMpOwogICAgICAgIGluZmxhdG9yLnB1c2goaW5wdXQpOwogICAgICAgIGlmIChpbmZsYXRvci5lcnIpCiAgICAgICAgICB0aHJvdyBpbmZsYXRvci5tc2cgfHwgbXNnW2luZmxhdG9yLmVycl07CiAgICAgICAgcmV0dXJuIGluZmxhdG9yLnJlc3VsdDsKICAgICAgfQogICAgICBmdW5jdGlvbiBpbmZsYXRlUmF3KGlucHV0LCBvcHRpb25zKSB7CiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICAgICAgb3B0aW9ucy5yYXcgPSB0cnVlOwogICAgICAgIHJldHVybiBpbmZsYXRlKGlucHV0LCBvcHRpb25zKTsKICAgICAgfQogICAgICBtb2R1bGUuZXhwb3J0cy5JbmZsYXRlID0gSW5mbGF0ZTsKICAgICAgbW9kdWxlLmV4cG9ydHMuaW5mbGF0ZSA9IGluZmxhdGU7CiAgICAgIG1vZHVsZS5leHBvcnRzLmluZmxhdGVSYXcgPSBpbmZsYXRlUmF3OwogICAgICBtb2R1bGUuZXhwb3J0cy51bmd6aXAgPSBpbmZsYXRlOwogICAgICBtb2R1bGUuZXhwb3J0cy5jb25zdGFudHMgPSByZXF1aXJlX2NvbnN0YW50cygpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlUGFja2V0LmpzCiAgdmFyIGRlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZVBhY2tldF9leHBvcnRzID0ge307CiAgX19leHBvcnQoZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlUGFja2V0X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGRlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZVBhY2tldF9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlUGFja2V0KHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIGNvbnN0IHR5cGUgPSBUeXBlcy5mcm9tU3RyaW5nKHBhcmFtZXRlcnMudHlwZSk7CiAgICBsZXQgYnVmZmVyID0gcGFyYW1ldGVycy5idWZmZXI7CiAgICBkZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VEYXRhX2RlZmF1bHQocGFyYW1ldGVycy5rZXksIGJ1ZmZlcik7CiAgICBjb25zdCB1bmNvbXByZXNzZWRUZXJyYWluID0gdW5jb21wcmVzc1BhY2tldChidWZmZXIpOwogICAgYnVmZmVyID0gdW5jb21wcmVzc2VkVGVycmFpbi5idWZmZXI7CiAgICBjb25zdCBsZW5ndGggPSB1bmNvbXByZXNzZWRUZXJyYWluLmxlbmd0aDsKICAgIHN3aXRjaCAodHlwZSkgewogICAgICBjYXNlIFR5cGVzLk1FVEFEQVRBOgogICAgICAgIHJldHVybiBwcm9jZXNzTWV0YWRhdGEoYnVmZmVyLCBsZW5ndGgsIHBhcmFtZXRlcnMucXVhZEtleSk7CiAgICAgIGNhc2UgVHlwZXMuVEVSUkFJTjoKICAgICAgICByZXR1cm4gcHJvY2Vzc1RlcnJhaW4oYnVmZmVyLCBsZW5ndGgsIHRyYW5zZmVyYWJsZU9iamVjdHMpOwogICAgICBjYXNlIFR5cGVzLkRCUk9PVDoKICAgICAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goYnVmZmVyKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgYnVmZmVyCiAgICAgICAgfTsKICAgIH0KICB9CiAgZnVuY3Rpb24gcHJvY2Vzc01ldGFkYXRhKGJ1ZmZlciwgdG90YWxTaXplLCBxdWFkS2V5KSB7CiAgICBjb25zdCBkdiA9IG5ldyBEYXRhVmlldyhidWZmZXIpOwogICAgbGV0IG9mZnNldCA9IDA7CiAgICBjb25zdCBtYWdpYyA9IGR2LmdldFVpbnQzMihvZmZzZXQsIHRydWUpOwogICAgb2Zmc2V0ICs9IHNpemVPZlVpbnQzMjI7CiAgICBpZiAobWFnaWMgIT09IHF0TWFnaWMpIHsKICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KCJJbnZhbGlkIG1hZ2ljIik7CiAgICB9CiAgICBjb25zdCBkYXRhVHlwZUlkID0gZHYuZ2V0VWludDMyKG9mZnNldCwgdHJ1ZSk7CiAgICBvZmZzZXQgKz0gc2l6ZU9mVWludDMyMjsKICAgIGlmIChkYXRhVHlwZUlkICE9PSAxKSB7CiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgiSW52YWxpZCBkYXRhIHR5cGUuIE11c3QgYmUgMSBmb3IgUXVhZFRyZWVQYWNrZXQiKTsKICAgIH0KICAgIGNvbnN0IHF1YWRWZXJzaW9uID0gZHYuZ2V0VWludDMyKG9mZnNldCwgdHJ1ZSk7CiAgICBvZmZzZXQgKz0gc2l6ZU9mVWludDMyMjsKICAgIGlmIChxdWFkVmVyc2lvbiAhPT0gMikgewogICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoCiAgICAgICAgIkludmFsaWQgUXVhZFRyZWVQYWNrZXQgdmVyc2lvbi4gT25seSB2ZXJzaW9uIDIgaXMgc3VwcG9ydGVkLiIKICAgICAgKTsKICAgIH0KICAgIGNvbnN0IG51bUluc3RhbmNlcyA9IGR2LmdldEludDMyKG9mZnNldCwgdHJ1ZSk7CiAgICBvZmZzZXQgKz0gc2l6ZU9mSW50MzIyOwogICAgY29uc3QgZGF0YUluc3RhbmNlU2l6ZSA9IGR2LmdldEludDMyKG9mZnNldCwgdHJ1ZSk7CiAgICBvZmZzZXQgKz0gc2l6ZU9mSW50MzIyOwogICAgaWYgKGRhdGFJbnN0YW5jZVNpemUgIT09IDMyKSB7CiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgiSW52YWxpZCBpbnN0YW5jZSBzaXplLiIpOwogICAgfQogICAgY29uc3QgZGF0YUJ1ZmZlck9mZnNldCA9IGR2LmdldEludDMyKG9mZnNldCwgdHJ1ZSk7CiAgICBvZmZzZXQgKz0gc2l6ZU9mSW50MzIyOwogICAgY29uc3QgZGF0YUJ1ZmZlclNpemUgPSBkdi5nZXRJbnQzMihvZmZzZXQsIHRydWUpOwogICAgb2Zmc2V0ICs9IHNpemVPZkludDMyMjsKICAgIGNvbnN0IG1ldGFCdWZmZXJTaXplID0gZHYuZ2V0SW50MzIob2Zmc2V0LCB0cnVlKTsKICAgIG9mZnNldCArPSBzaXplT2ZJbnQzMjI7CiAgICBpZiAoZGF0YUJ1ZmZlck9mZnNldCAhPT0gbnVtSW5zdGFuY2VzICogZGF0YUluc3RhbmNlU2l6ZSArIG9mZnNldCkgewogICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoIkludmFsaWQgZGF0YUJ1ZmZlck9mZnNldCIpOwogICAgfQogICAgaWYgKGRhdGFCdWZmZXJPZmZzZXQgKyBkYXRhQnVmZmVyU2l6ZSArIG1ldGFCdWZmZXJTaXplICE9PSB0b3RhbFNpemUpIHsKICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KCJJbnZhbGlkIHBhY2tldCBvZmZzZXRzIik7CiAgICB9CiAgICBjb25zdCBpbnN0YW5jZXMgPSBbXTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtSW5zdGFuY2VzOyArK2kpIHsKICAgICAgY29uc3QgYml0ZmllbGQgPSBkdi5nZXRVaW50OChvZmZzZXQpOwogICAgICArK29mZnNldDsKICAgICAgKytvZmZzZXQ7CiAgICAgIGNvbnN0IGNub2RlVmVyc2lvbiA9IGR2LmdldFVpbnQxNihvZmZzZXQsIHRydWUpOwogICAgICBvZmZzZXQgKz0gc2l6ZU9mVWludDE2MjsKICAgICAgY29uc3QgaW1hZ2VWZXJzaW9uID0gZHYuZ2V0VWludDE2KG9mZnNldCwgdHJ1ZSk7CiAgICAgIG9mZnNldCArPSBzaXplT2ZVaW50MTYyOwogICAgICBjb25zdCB0ZXJyYWluVmVyc2lvbiA9IGR2LmdldFVpbnQxNihvZmZzZXQsIHRydWUpOwogICAgICBvZmZzZXQgKz0gc2l6ZU9mVWludDE2MjsKICAgICAgb2Zmc2V0ICs9IHNpemVPZlVpbnQxNjI7CiAgICAgIG9mZnNldCArPSBzaXplT2ZVaW50MTYyOwogICAgICBvZmZzZXQgKz0gc2l6ZU9mSW50MzIyOwogICAgICBvZmZzZXQgKz0gc2l6ZU9mSW50MzIyOwogICAgICBvZmZzZXQgKz0gODsKICAgICAgY29uc3QgaW1hZ2VQcm92aWRlciA9IGR2LmdldFVpbnQ4KG9mZnNldCsrKTsKICAgICAgY29uc3QgdGVycmFpblByb3ZpZGVyID0gZHYuZ2V0VWludDgob2Zmc2V0KyspOwogICAgICBvZmZzZXQgKz0gc2l6ZU9mVWludDE2MjsKICAgICAgaW5zdGFuY2VzLnB1c2goCiAgICAgICAgbmV3IEdvb2dsZUVhcnRoRW50ZXJwcmlzZVRpbGVJbmZvcm1hdGlvbl9kZWZhdWx0KAogICAgICAgICAgYml0ZmllbGQsCiAgICAgICAgICBjbm9kZVZlcnNpb24sCiAgICAgICAgICBpbWFnZVZlcnNpb24sCiAgICAgICAgICB0ZXJyYWluVmVyc2lvbiwKICAgICAgICAgIGltYWdlUHJvdmlkZXIsCiAgICAgICAgICB0ZXJyYWluUHJvdmlkZXIKICAgICAgICApCiAgICAgICk7CiAgICB9CiAgICBjb25zdCB0aWxlSW5mbyA9IFtdOwogICAgbGV0IGluZGV4ID0gMDsKICAgIGZ1bmN0aW9uIHBvcHVsYXRlVGlsZXMocGFyZW50S2V5LCBwYXJlbnQsIGxldmVsMikgewogICAgICBsZXQgaXNMZWFmID0gZmFsc2U7CiAgICAgIGlmIChsZXZlbDIgPT09IDQpIHsKICAgICAgICBpZiAocGFyZW50Lmhhc1N1YnRyZWUoKSkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpc0xlYWYgPSB0cnVlOwogICAgICB9CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgKytpKSB7CiAgICAgICAgY29uc3QgY2hpbGRLZXkgPSBwYXJlbnRLZXkgKyBpLnRvU3RyaW5nKCk7CiAgICAgICAgaWYgKGlzTGVhZikgewogICAgICAgICAgdGlsZUluZm9bY2hpbGRLZXldID0gbnVsbDsKICAgICAgICB9IGVsc2UgaWYgKGxldmVsMiA8IDQpIHsKICAgICAgICAgIGlmICghcGFyZW50Lmhhc0NoaWxkKGkpKSB7CiAgICAgICAgICAgIHRpbGVJbmZvW2NoaWxkS2V5XSA9IG51bGw7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAoaW5kZXggPT09IG51bUluc3RhbmNlcykgewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJJbmNvcnJlY3QgbnVtYmVyIG9mIGluc3RhbmNlcyIpOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGluc3RhbmNlc1tpbmRleCsrXTsKICAgICAgICAgICAgdGlsZUluZm9bY2hpbGRLZXldID0gaW5zdGFuY2U7CiAgICAgICAgICAgIHBvcHVsYXRlVGlsZXMoY2hpbGRLZXksIGluc3RhbmNlLCBsZXZlbDIgKyAxKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGxldCBsZXZlbCA9IDA7CiAgICBjb25zdCByb290ID0gaW5zdGFuY2VzW2luZGV4KytdOwogICAgaWYgKHF1YWRLZXkgPT09ICIiKSB7CiAgICAgICsrbGV2ZWw7CiAgICB9IGVsc2UgewogICAgICB0aWxlSW5mb1txdWFkS2V5XSA9IHJvb3Q7CiAgICB9CiAgICBwb3B1bGF0ZVRpbGVzKHF1YWRLZXksIHJvb3QsIGxldmVsKTsKICAgIHJldHVybiB0aWxlSW5mbzsKICB9CiAgZnVuY3Rpb24gcHJvY2Vzc1RlcnJhaW4oYnVmZmVyLCB0b3RhbFNpemUsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIGNvbnN0IGR2ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7CiAgICBjb25zdCBhZHZhbmNlTWVzaCA9IGZ1bmN0aW9uKHBvcykgewogICAgICBmb3IgKGxldCBzdWIgPSAwOyBzdWIgPCBudW1TdWJNZXNoZXNQZXJNZXNoOyArK3N1YikgewogICAgICAgIGNvbnN0IHNpemUgPSBkdi5nZXRVaW50MzIocG9zLCB0cnVlKTsKICAgICAgICBwb3MgKz0gc2l6ZU9mVWludDMyMjsKICAgICAgICBwb3MgKz0gc2l6ZTsKICAgICAgICBpZiAocG9zID4gdG90YWxTaXplKSB7CiAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoIk1hbGZvcm1lZCB0ZXJyYWluIHBhY2tldCBmb3VuZC4iKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHBvczsKICAgIH07CiAgICBsZXQgb2Zmc2V0ID0gMDsKICAgIGNvbnN0IHRlcnJhaW5NZXNoZXMgPSBbXTsKICAgIHdoaWxlICh0ZXJyYWluTWVzaGVzLmxlbmd0aCA8IG51bU1lc2hlc1BlclBhY2tldCkgewogICAgICBjb25zdCBzdGFydCA9IG9mZnNldDsKICAgICAgb2Zmc2V0ID0gYWR2YW5jZU1lc2gob2Zmc2V0KTsKICAgICAgY29uc3QgbWVzaCA9IGJ1ZmZlci5zbGljZShzdGFydCwgb2Zmc2V0KTsKICAgICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKG1lc2gpOwogICAgICB0ZXJyYWluTWVzaGVzLnB1c2gobWVzaCk7CiAgICB9CiAgICByZXR1cm4gdGVycmFpbk1lc2hlczsKICB9CiAgZnVuY3Rpb24gdW5jb21wcmVzc1BhY2tldChkYXRhKSB7CiAgICBjb25zdCBkdiA9IG5ldyBEYXRhVmlldyhkYXRhKTsKICAgIGxldCBvZmZzZXQgPSAwOwogICAgY29uc3QgbWFnaWMgPSBkdi5nZXRVaW50MzIob2Zmc2V0LCB0cnVlKTsKICAgIG9mZnNldCArPSBzaXplT2ZVaW50MzIyOwogICAgaWYgKG1hZ2ljICE9PSBjb21wcmVzc2VkTWFnaWMyICYmIG1hZ2ljICE9PSBjb21wcmVzc2VkTWFnaWNTd2FwMikgewogICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoIkludmFsaWQgbWFnaWMiKTsKICAgIH0KICAgIGNvbnN0IHNpemUgPSBkdi5nZXRVaW50MzIob2Zmc2V0LCBtYWdpYyA9PT0gY29tcHJlc3NlZE1hZ2ljMik7CiAgICBvZmZzZXQgKz0gc2l6ZU9mVWludDMyMjsKICAgIGNvbnN0IGNvbXByZXNzZWRQYWNrZXQgPSBuZXcgVWludDhBcnJheShkYXRhLCBvZmZzZXQpOwogICAgY29uc3QgdW5jb21wcmVzc2VkUGFja2V0ID0gaW1wb3J0X2luZmxhdGUuZGVmYXVsdC5pbmZsYXRlKGNvbXByZXNzZWRQYWNrZXQpOwogICAgaWYgKHVuY29tcHJlc3NlZFBhY2tldC5sZW5ndGggIT09IHNpemUpIHsKICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KCJTaXplIG9mIHBhY2tldCBkb2Vzbid0IG1hdGNoIGhlYWRlciIpOwogICAgfQogICAgcmV0dXJuIHVuY29tcHJlc3NlZFBhY2tldDsKICB9CiAgdmFyIGltcG9ydF9pbmZsYXRlLCBzaXplT2ZVaW50MTYyLCBzaXplT2ZJbnQzMjIsIHNpemVPZlVpbnQzMjIsIFR5cGVzLCBxdE1hZ2ljLCBudW1NZXNoZXNQZXJQYWNrZXQsIG51bVN1Yk1lc2hlc1Blck1lc2gsIGNvbXByZXNzZWRNYWdpYzIsIGNvbXByZXNzZWRNYWdpY1N3YXAyLCBkZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VQYWNrZXRfZGVmYXVsdDsKICB2YXIgaW5pdF9kZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VQYWNrZXQgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2RlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZVBhY2tldC5qcyIoKSB7CiAgICAgIGluaXRfZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlRGF0YSgpOwogICAgICBpbml0X0dvb2dsZUVhcnRoRW50ZXJwcmlzZVRpbGVJbmZvcm1hdGlvbigpOwogICAgICBpbml0X1J1bnRpbWVFcnJvcigpOwogICAgICBpbXBvcnRfaW5mbGF0ZSA9IF9fdG9FU00ocmVxdWlyZV9pbmZsYXRlMigpLCAxKTsKICAgICAgaW5pdF9jcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyKCk7CiAgICAgIHNpemVPZlVpbnQxNjIgPSBVaW50MTZBcnJheS5CWVRFU19QRVJfRUxFTUVOVDsKICAgICAgc2l6ZU9mSW50MzIyID0gSW50MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVDsKICAgICAgc2l6ZU9mVWludDMyMiA9IFVpbnQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UOwogICAgICBUeXBlcyA9IHsKICAgICAgICBNRVRBREFUQTogMCwKICAgICAgICBURVJSQUlOOiAxLAogICAgICAgIERCUk9PVDogMgogICAgICB9OwogICAgICBUeXBlcy5mcm9tU3RyaW5nID0gZnVuY3Rpb24ocykgewogICAgICAgIGlmIChzID09PSAiTWV0YWRhdGEiKSB7CiAgICAgICAgICByZXR1cm4gVHlwZXMuTUVUQURBVEE7CiAgICAgICAgfSBlbHNlIGlmIChzID09PSAiVGVycmFpbiIpIHsKICAgICAgICAgIHJldHVybiBUeXBlcy5URVJSQUlOOwogICAgICAgIH0gZWxzZSBpZiAocyA9PT0gIkRiUm9vdCIpIHsKICAgICAgICAgIHJldHVybiBUeXBlcy5EQlJPT1Q7CiAgICAgICAgfQogICAgICB9OwogICAgICBxdE1hZ2ljID0gMzIzMDE7CiAgICAgIG51bU1lc2hlc1BlclBhY2tldCA9IDU7CiAgICAgIG51bVN1Yk1lc2hlc1Blck1lc2ggPSA0OwogICAgICBjb21wcmVzc2VkTWFnaWMyID0gMTk1MzAyOTgwNTsKICAgICAgY29tcHJlc3NlZE1hZ2ljU3dhcDIgPSAyOTE3MDM0MTAwOwogICAgICBkZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VQYWNrZXRfZGVmYXVsdCA9IGNyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXJfZGVmYXVsdChkZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VQYWNrZXQpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvZGVjb2RlSTNTLmpzCiAgdmFyIGRlY29kZUkzU19leHBvcnRzID0ge307CiAgX19leHBvcnQoZGVjb2RlSTNTX2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGRlY29kZUkzU19kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gYmlsaW5lYXJJbnRlcnBvbGF0ZSh0eCwgdHksIGgwMCwgaDEwLCBoMDEsIGgxMSkgewogICAgY29uc3QgYTMgPSBoMDAgKiAoMSAtIHR4KSArIGgxMCAqIHR4OwogICAgY29uc3QgYiA9IGgwMSAqICgxIC0gdHgpICsgaDExICogdHg7CiAgICByZXR1cm4gYTMgKiAoMSAtIHR5KSArIGIgKiB0eTsKICB9CiAgZnVuY3Rpb24gc2FtcGxlTWFwKHUzLCB2Mywgd2lkdGgsIGRhdGEpIHsKICAgIGNvbnN0IGFkZHJlc3MgPSB1MyArIHYzICogd2lkdGg7CiAgICByZXR1cm4gZGF0YVthZGRyZXNzXTsKICB9CiAgZnVuY3Rpb24gc2FtcGxlR2VvaWQoc2FtcGxlWCwgc2FtcGxlWSwgZ2VvaWREYXRhKSB7CiAgICBjb25zdCBleHRlbnQgPSBnZW9pZERhdGEubmF0aXZlRXh0ZW50OwogICAgbGV0IHggPSAoc2FtcGxlWCAtIGV4dGVudC53ZXN0KSAvIChleHRlbnQuZWFzdCAtIGV4dGVudC53ZXN0KSAqIChnZW9pZERhdGEud2lkdGggLSAxKTsKICAgIGxldCB5ID0gKHNhbXBsZVkgLSBleHRlbnQuc291dGgpIC8gKGV4dGVudC5ub3J0aCAtIGV4dGVudC5zb3V0aCkgKiAoZ2VvaWREYXRhLmhlaWdodCAtIDEpOwogICAgY29uc3QgeGkgPSBNYXRoLmZsb29yKHgpOwogICAgbGV0IHlpID0gTWF0aC5mbG9vcih5KTsKICAgIHggLT0geGk7CiAgICB5IC09IHlpOwogICAgY29uc3QgeE5leHQgPSB4aSA8IGdlb2lkRGF0YS53aWR0aCA/IHhpICsgMSA6IHhpOwogICAgbGV0IHlOZXh0ID0geWkgPCBnZW9pZERhdGEuaGVpZ2h0ID8geWkgKyAxIDogeWk7CiAgICB5aSA9IGdlb2lkRGF0YS5oZWlnaHQgLSAxIC0geWk7CiAgICB5TmV4dCA9IGdlb2lkRGF0YS5oZWlnaHQgLSAxIC0geU5leHQ7CiAgICBjb25zdCBoMDAgPSBzYW1wbGVNYXAoeGksIHlpLCBnZW9pZERhdGEud2lkdGgsIGdlb2lkRGF0YS5idWZmZXIpOwogICAgY29uc3QgaDEwID0gc2FtcGxlTWFwKHhOZXh0LCB5aSwgZ2VvaWREYXRhLndpZHRoLCBnZW9pZERhdGEuYnVmZmVyKTsKICAgIGNvbnN0IGgwMSA9IHNhbXBsZU1hcCh4aSwgeU5leHQsIGdlb2lkRGF0YS53aWR0aCwgZ2VvaWREYXRhLmJ1ZmZlcik7CiAgICBjb25zdCBoMTEgPSBzYW1wbGVNYXAoeE5leHQsIHlOZXh0LCBnZW9pZERhdGEud2lkdGgsIGdlb2lkRGF0YS5idWZmZXIpOwogICAgbGV0IGZpbmFsSGVpZ2h0ID0gYmlsaW5lYXJJbnRlcnBvbGF0ZSh4LCB5LCBoMDAsIGgxMCwgaDAxLCBoMTEpOwogICAgZmluYWxIZWlnaHQgPSBmaW5hbEhlaWdodCAqIGdlb2lkRGF0YS5zY2FsZSArIGdlb2lkRGF0YS5vZmZzZXQ7CiAgICByZXR1cm4gZmluYWxIZWlnaHQ7CiAgfQogIGZ1bmN0aW9uIHNhbXBsZUdlb2lkRnJvbUxpc3QobG9uLCBsYXQsIGdlb2lkRGF0YUxpc3QpIHsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ2VvaWREYXRhTGlzdC5sZW5ndGg7IGkrKykgewogICAgICBjb25zdCBsb2NhbEV4dGVudCA9IGdlb2lkRGF0YUxpc3RbaV0ubmF0aXZlRXh0ZW50OwogICAgICBsZXQgbG9jYWxQdCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgaWYgKGdlb2lkRGF0YUxpc3RbaV0ucHJvamVjdGlvblR5cGUgPT09ICJXZWJNZXJjYXRvciIpIHsKICAgICAgICBjb25zdCByYWRpaSA9IGdlb2lkRGF0YUxpc3RbaV0ucHJvamVjdGlvbi5fZWxsaXBzb2lkLl9yYWRpaTsKICAgICAgICBjb25zdCB3ZWJNZXJjYXRvclByb2ogPSBuZXcgV2ViTWVyY2F0b3JQcm9qZWN0aW9uX2RlZmF1bHQoCiAgICAgICAgICBuZXcgRWxsaXBzb2lkX2RlZmF1bHQocmFkaWkueCwgcmFkaWkueSwgcmFkaWkueikKICAgICAgICApOwogICAgICAgIGxvY2FsUHQgPSB3ZWJNZXJjYXRvclByb2oucHJvamVjdChuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQobG9uLCBsYXQsIDApKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBsb2NhbFB0LnggPSBsb247CiAgICAgICAgbG9jYWxQdC55ID0gbGF0OwogICAgICB9CiAgICAgIGlmIChsb2NhbFB0LnggPiBsb2NhbEV4dGVudC53ZXN0ICYmIGxvY2FsUHQueCA8IGxvY2FsRXh0ZW50LmVhc3QgJiYgbG9jYWxQdC55ID4gbG9jYWxFeHRlbnQuc291dGggJiYgbG9jYWxQdC55IDwgbG9jYWxFeHRlbnQubm9ydGgpIHsKICAgICAgICByZXR1cm4gc2FtcGxlR2VvaWQobG9jYWxQdC54LCBsb2NhbFB0LnksIGdlb2lkRGF0YUxpc3RbaV0pOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gMDsKICB9CiAgZnVuY3Rpb24gb3J0aG9tZXRyaWNUb0VsbGlwc29pZGFsKHZlcnRleENvdW50LCBwb3NpdGlvbiwgc2NhbGVfeCwgc2NhbGVfeSwgY2VudGVyLCBnZW9pZERhdGFMaXN0LCBmYXN0KSB7CiAgICBpZiAoZmFzdCkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBjZW50ZXJIZWlnaHQgPSBzYW1wbGVHZW9pZEZyb21MaXN0KAogICAgICBjZW50ZXIubG9uZ2l0dWRlLAogICAgICBjZW50ZXIubGF0aXR1ZGUsCiAgICAgIGdlb2lkRGF0YUxpc3QKICAgICk7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZlcnRleENvdW50OyArK2kpIHsKICAgICAgY29uc3QgaGVpZ2h0ID0gc2FtcGxlR2VvaWRGcm9tTGlzdCgKICAgICAgICBjZW50ZXIubG9uZ2l0dWRlICsgTWF0aF9kZWZhdWx0LnRvUmFkaWFucyhzY2FsZV94ICogcG9zaXRpb25baSAqIDNdKSwKICAgICAgICBjZW50ZXIubGF0aXR1ZGUgKyBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKHNjYWxlX3kgKiBwb3NpdGlvbltpICogMyArIDFdKSwKICAgICAgICBnZW9pZERhdGFMaXN0CiAgICAgICk7CiAgICAgIHBvc2l0aW9uW2kgKiAzICsgMl0gKz0gaGVpZ2h0IC0gY2VudGVySGVpZ2h0OwogICAgfQogIH0KICBmdW5jdGlvbiB0cmFuc2Zvcm1Ub0xvY2FsKHZlcnRleENvdW50LCBwb3NpdGlvbnMsIG5vcm1hbHMsIGNhcnRvZ3JhcGhpY0NlbnRlciwgY2FydGVzaWFuQ2VudGVyLCBwYXJlbnRSb3RhdGlvbiwgZWxsaXBzb2lkUmFkaWlTcXVhcmUsIHNjYWxlX3gsIHNjYWxlX3kpIHsKICAgIGlmICh2ZXJ0ZXhDb3VudCA9PT0gMCB8fCAhZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9ucykgfHwgcG9zaXRpb25zLmxlbmd0aCA9PT0gMCkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBlbGxpcHNvaWQgPSBuZXcgRWxsaXBzb2lkX2RlZmF1bHQoCiAgICAgIE1hdGguc3FydChlbGxpcHNvaWRSYWRpaVNxdWFyZS54KSwKICAgICAgTWF0aC5zcXJ0KGVsbGlwc29pZFJhZGlpU3F1YXJlLnkpLAogICAgICBNYXRoLnNxcnQoZWxsaXBzb2lkUmFkaWlTcXVhcmUueikKICAgICk7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZlcnRleENvdW50OyArK2kpIHsKICAgICAgY29uc3QgaW5kZXhPZmZzZXQgPSBpICogMzsKICAgICAgY29uc3QgaW5kZXhPZmZzZXQxID0gaW5kZXhPZmZzZXQgKyAxOwogICAgICBjb25zdCBpbmRleE9mZnNldDIgPSBpbmRleE9mZnNldCArIDI7CiAgICAgIGNvbnN0IGNhcnRvZ3JhcGhpYzIgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgY2FydG9ncmFwaGljMi5sb25naXR1ZGUgPSBjYXJ0b2dyYXBoaWNDZW50ZXIubG9uZ2l0dWRlICsgTWF0aF9kZWZhdWx0LnRvUmFkaWFucyhzY2FsZV94ICogcG9zaXRpb25zW2luZGV4T2Zmc2V0XSk7CiAgICAgIGNhcnRvZ3JhcGhpYzIubGF0aXR1ZGUgPSBjYXJ0b2dyYXBoaWNDZW50ZXIubGF0aXR1ZGUgKyBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKHNjYWxlX3kgKiBwb3NpdGlvbnNbaW5kZXhPZmZzZXQxXSk7CiAgICAgIGNhcnRvZ3JhcGhpYzIuaGVpZ2h0ID0gY2FydG9ncmFwaGljQ2VudGVyLmhlaWdodCArIHBvc2l0aW9uc1tpbmRleE9mZnNldDJdOwogICAgICBjb25zdCBwb3NpdGlvbiA9IHt9OwogICAgICBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oY2FydG9ncmFwaGljMiwgcG9zaXRpb24pOwogICAgICBwb3NpdGlvbi54IC09IGNhcnRlc2lhbkNlbnRlci54OwogICAgICBwb3NpdGlvbi55IC09IGNhcnRlc2lhbkNlbnRlci55OwogICAgICBwb3NpdGlvbi56IC09IGNhcnRlc2lhbkNlbnRlci56OwogICAgICBjb25zdCByb3RhdGVkUG9zaXRpb24gPSB7fTsKICAgICAgTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IocGFyZW50Um90YXRpb24sIHBvc2l0aW9uLCByb3RhdGVkUG9zaXRpb24pOwogICAgICBwb3NpdGlvbnNbaW5kZXhPZmZzZXRdID0gcm90YXRlZFBvc2l0aW9uLng7CiAgICAgIHBvc2l0aW9uc1tpbmRleE9mZnNldDFdID0gcm90YXRlZFBvc2l0aW9uLnk7CiAgICAgIHBvc2l0aW9uc1tpbmRleE9mZnNldDJdID0gcm90YXRlZFBvc2l0aW9uLno7CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobm9ybWFscykpIHsKICAgICAgICBjb25zdCBub3JtYWwyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgKICAgICAgICAgIG5vcm1hbHNbaW5kZXhPZmZzZXRdLAogICAgICAgICAgbm9ybWFsc1tpbmRleE9mZnNldDFdLAogICAgICAgICAgbm9ybWFsc1tpbmRleE9mZnNldDJdCiAgICAgICAgKTsKICAgICAgICBjb25zdCByb3RhdGVkTm9ybWFsID0ge307CiAgICAgICAgTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IocGFyZW50Um90YXRpb24sIG5vcm1hbDIsIHJvdGF0ZWROb3JtYWwpOwogICAgICAgIG5vcm1hbHNbaW5kZXhPZmZzZXRdID0gcm90YXRlZE5vcm1hbC54OwogICAgICAgIG5vcm1hbHNbaW5kZXhPZmZzZXQxXSA9IHJvdGF0ZWROb3JtYWwueTsKICAgICAgICBub3JtYWxzW2luZGV4T2Zmc2V0Ml0gPSByb3RhdGVkTm9ybWFsLno7CiAgICAgIH0KICAgIH0KICB9CiAgZnVuY3Rpb24gY3JvcFVWcyh2ZXJ0ZXhDb3VudCwgdXYwcywgdXZSZWdpb25zKSB7CiAgICBmb3IgKGxldCB2ZXJ0ZXhJbmRleCA9IDA7IHZlcnRleEluZGV4IDwgdmVydGV4Q291bnQ7ICsrdmVydGV4SW5kZXgpIHsKICAgICAgY29uc3QgbWluVSA9IHV2UmVnaW9uc1t2ZXJ0ZXhJbmRleCAqIDRdIC8gNjU1MzU7CiAgICAgIGNvbnN0IG1pblYgPSB1dlJlZ2lvbnNbdmVydGV4SW5kZXggKiA0ICsgMV0gLyA2NTUzNTsKICAgICAgY29uc3Qgc2NhbGVVID0gKHV2UmVnaW9uc1t2ZXJ0ZXhJbmRleCAqIDQgKyAyXSAtIHV2UmVnaW9uc1t2ZXJ0ZXhJbmRleCAqIDRdKSAvIDY1NTM1OwogICAgICBjb25zdCBzY2FsZVYgPSAodXZSZWdpb25zW3ZlcnRleEluZGV4ICogNCArIDNdIC0gdXZSZWdpb25zW3ZlcnRleEluZGV4ICogNCArIDFdKSAvIDY1NTM1OwogICAgICB1djBzW3ZlcnRleEluZGV4ICogMl0gKj0gc2NhbGVVOwogICAgICB1djBzW3ZlcnRleEluZGV4ICogMl0gKz0gbWluVTsKICAgICAgdXYwc1t2ZXJ0ZXhJbmRleCAqIDIgKyAxXSAqPSBzY2FsZVY7CiAgICAgIHV2MHNbdmVydGV4SW5kZXggKiAyICsgMV0gKz0gbWluVjsKICAgIH0KICB9CiAgZnVuY3Rpb24gZ2VuZXJhdGVHbHRmQnVmZmVyKHZlcnRleENvdW50LCBpbmRpY2VzLCBwb3NpdGlvbnMsIG5vcm1hbHMsIHV2MHMsIGNvbG9ycykgewogICAgaWYgKHZlcnRleENvdW50ID09PSAwIHx8ICFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zKSB8fCBwb3NpdGlvbnMubGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgYnVmZmVyczogW10sCiAgICAgICAgYnVmZmVyVmlld3M6IFtdLAogICAgICAgIGFjY2Vzc29yczogW10sCiAgICAgICAgbWVzaGVzOiBbXSwKICAgICAgICBub2RlczogW10sCiAgICAgICAgbm9kZXNJblNjZW5lOiBbXQogICAgICB9OwogICAgfQogICAgY29uc3QgYnVmZmVycyA9IFtdOwogICAgY29uc3QgYnVmZmVyVmlld3MgPSBbXTsKICAgIGNvbnN0IGFjY2Vzc29ycyA9IFtdOwogICAgY29uc3QgbWVzaGVzID0gW107CiAgICBjb25zdCBub2RlcyA9IFtdOwogICAgY29uc3Qgbm9kZXNJblNjZW5lID0gW107CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGluZGljZXMpKSB7CiAgICAgIHZlcnRleENvdW50ID0gaW5kaWNlcy5sZW5ndGg7CiAgICB9CiAgICBjb25zdCBpbmRleEFycmF5ID0gbmV3IFVpbnQzMkFycmF5KHZlcnRleENvdW50KTsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaW5kaWNlcykpIHsKICAgICAgZm9yIChsZXQgdmVydGV4SW5kZXggPSAwOyB2ZXJ0ZXhJbmRleCA8IHZlcnRleENvdW50OyArK3ZlcnRleEluZGV4KSB7CiAgICAgICAgaW5kZXhBcnJheVt2ZXJ0ZXhJbmRleF0gPSBpbmRpY2VzW3ZlcnRleEluZGV4XTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgZm9yIChsZXQgbmV3VmVydGV4SW5kZXggPSAwOyBuZXdWZXJ0ZXhJbmRleCA8IHZlcnRleENvdW50OyArK25ld1ZlcnRleEluZGV4KSB7CiAgICAgICAgaW5kZXhBcnJheVtuZXdWZXJ0ZXhJbmRleF0gPSBuZXdWZXJ0ZXhJbmRleDsKICAgICAgfQogICAgfQogICAgY29uc3QgaW5kaWNlc0Jsb2IgPSBuZXcgQmxvYihbaW5kZXhBcnJheV0sIHsgdHlwZTogImFwcGxpY2F0aW9uL2JpbmFyeSIgfSk7CiAgICBjb25zdCBpbmRpY2VzVVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChpbmRpY2VzQmxvYik7CiAgICBjb25zdCBlbmRJbmRleCA9IHZlcnRleENvdW50OwogICAgY29uc3QgbWVzaFBvc2l0aW9ucyA9IHBvc2l0aW9ucy5zdWJhcnJheSgwLCBlbmRJbmRleCAqIDMpOwogICAgY29uc3QgcG9zaXRpb25zQmxvYiA9IG5ldyBCbG9iKFttZXNoUG9zaXRpb25zXSwgewogICAgICB0eXBlOiAiYXBwbGljYXRpb24vYmluYXJ5IgogICAgfSk7CiAgICBjb25zdCBwb3NpdGlvbnNVUkwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHBvc2l0aW9uc0Jsb2IpOwogICAgbGV0IG1pblggPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CiAgICBsZXQgbWF4WCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgIGxldCBtaW5ZID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgbGV0IG1heFkgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CiAgICBsZXQgbWluWiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgIGxldCBtYXhaID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXNoUG9zaXRpb25zLmxlbmd0aCAvIDM7IGkrKykgewogICAgICBtaW5YID0gTWF0aC5taW4obWluWCwgbWVzaFBvc2l0aW9uc1tpICogMyArIDBdKTsKICAgICAgbWF4WCA9IE1hdGgubWF4KG1heFgsIG1lc2hQb3NpdGlvbnNbaSAqIDMgKyAwXSk7CiAgICAgIG1pblkgPSBNYXRoLm1pbihtaW5ZLCBtZXNoUG9zaXRpb25zW2kgKiAzICsgMV0pOwogICAgICBtYXhZID0gTWF0aC5tYXgobWF4WSwgbWVzaFBvc2l0aW9uc1tpICogMyArIDFdKTsKICAgICAgbWluWiA9IE1hdGgubWluKG1pblosIG1lc2hQb3NpdGlvbnNbaSAqIDMgKyAyXSk7CiAgICAgIG1heFogPSBNYXRoLm1heChtYXhaLCBtZXNoUG9zaXRpb25zW2kgKiAzICsgMl0pOwogICAgfQogICAgY29uc3QgbWVzaE5vcm1hbHMgPSBub3JtYWxzID8gbm9ybWFscy5zdWJhcnJheSgwLCBlbmRJbmRleCAqIDMpIDogdm9pZCAwOwogICAgbGV0IG5vcm1hbHNVUkw7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG1lc2hOb3JtYWxzKSkgewogICAgICBjb25zdCBub3JtYWxzQmxvYiA9IG5ldyBCbG9iKFttZXNoTm9ybWFsc10sIHsKICAgICAgICB0eXBlOiAiYXBwbGljYXRpb24vYmluYXJ5IgogICAgICB9KTsKICAgICAgbm9ybWFsc1VSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwobm9ybWFsc0Jsb2IpOwogICAgfQogICAgY29uc3QgbWVzaFV2MHMgPSB1djBzID8gdXYwcy5zdWJhcnJheSgwLCBlbmRJbmRleCAqIDIpIDogdm9pZCAwOwogICAgbGV0IHV2MFVSTDsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWVzaFV2MHMpKSB7CiAgICAgIGNvbnN0IHV2MEJsb2IgPSBuZXcgQmxvYihbbWVzaFV2MHNdLCB7IHR5cGU6ICJhcHBsaWNhdGlvbi9iaW5hcnkiIH0pOwogICAgICB1djBVUkwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHV2MEJsb2IpOwogICAgfQogICAgY29uc3QgbWVzaENvbG9yc0luQnl0ZXMgPSBkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSA/IGNvbG9ycy5zdWJhcnJheSgwLCBlbmRJbmRleCAqIDQpIDogdm9pZCAwOwogICAgbGV0IGNvbG9yc1VSTDsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWVzaENvbG9yc0luQnl0ZXMpKSB7CiAgICAgIGNvbnN0IGNvbG9yc0Jsb2IgPSBuZXcgQmxvYihbbWVzaENvbG9yc0luQnl0ZXNdLCB7CiAgICAgICAgdHlwZTogImFwcGxpY2F0aW9uL2JpbmFyeSIKICAgICAgfSk7CiAgICAgIGNvbG9yc1VSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoY29sb3JzQmxvYik7CiAgICB9CiAgICBjb25zdCBwb3NJbmRleCA9IDA7CiAgICBsZXQgbm9ybWFsSW5kZXggPSAwOwogICAgbGV0IHV2MEluZGV4ID0gMDsKICAgIGxldCBjb2xvckluZGV4ID0gMDsKICAgIGxldCBpbmRpY2VzSW5kZXggPSAwOwogICAgbGV0IGN1cnJlbnRJbmRleCA9IHBvc0luZGV4OwogICAgY29uc3QgYXR0cmlidXRlcyA9IHt9OwogICAgYXR0cmlidXRlcy5QT1NJVElPTiA9IHBvc0luZGV4OwogICAgYnVmZmVycy5wdXNoKHsKICAgICAgdXJpOiBwb3NpdGlvbnNVUkwsCiAgICAgIGJ5dGVMZW5ndGg6IG1lc2hQb3NpdGlvbnMuYnl0ZUxlbmd0aAogICAgfSk7CiAgICBidWZmZXJWaWV3cy5wdXNoKHsKICAgICAgYnVmZmVyOiBwb3NJbmRleCwKICAgICAgYnl0ZU9mZnNldDogMCwKICAgICAgYnl0ZUxlbmd0aDogbWVzaFBvc2l0aW9ucy5ieXRlTGVuZ3RoLAogICAgICB0YXJnZXQ6IDM0OTYyCiAgICB9KTsKICAgIGFjY2Vzc29ycy5wdXNoKHsKICAgICAgYnVmZmVyVmlldzogcG9zSW5kZXgsCiAgICAgIGJ5dGVPZmZzZXQ6IDAsCiAgICAgIGNvbXBvbmVudFR5cGU6IDUxMjYsCiAgICAgIGNvdW50OiB2ZXJ0ZXhDb3VudCwKICAgICAgdHlwZTogIlZFQzMiLAogICAgICBtYXg6IFttaW5YLCBtaW5ZLCBtaW5aXSwKICAgICAgbWluOiBbbWF4WCwgbWF4WSwgbWF4Wl0KICAgIH0pOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdChub3JtYWxzVVJMKSkgewogICAgICArK2N1cnJlbnRJbmRleDsKICAgICAgbm9ybWFsSW5kZXggPSBjdXJyZW50SW5kZXg7CiAgICAgIGF0dHJpYnV0ZXMuTk9STUFMID0gbm9ybWFsSW5kZXg7CiAgICAgIGJ1ZmZlcnMucHVzaCh7CiAgICAgICAgdXJpOiBub3JtYWxzVVJMLAogICAgICAgIGJ5dGVMZW5ndGg6IG1lc2hOb3JtYWxzLmJ5dGVMZW5ndGgKICAgICAgfSk7CiAgICAgIGJ1ZmZlclZpZXdzLnB1c2goewogICAgICAgIGJ1ZmZlcjogbm9ybWFsSW5kZXgsCiAgICAgICAgYnl0ZU9mZnNldDogMCwKICAgICAgICBieXRlTGVuZ3RoOiBtZXNoTm9ybWFscy5ieXRlTGVuZ3RoLAogICAgICAgIHRhcmdldDogMzQ5NjIKICAgICAgfSk7CiAgICAgIGFjY2Vzc29ycy5wdXNoKHsKICAgICAgICBidWZmZXJWaWV3OiBub3JtYWxJbmRleCwKICAgICAgICBieXRlT2Zmc2V0OiAwLAogICAgICAgIGNvbXBvbmVudFR5cGU6IDUxMjYsCiAgICAgICAgY291bnQ6IHZlcnRleENvdW50LAogICAgICAgIHR5cGU6ICJWRUMzIgogICAgICB9KTsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQodXYwVVJMKSkgewogICAgICArK2N1cnJlbnRJbmRleDsKICAgICAgdXYwSW5kZXggPSBjdXJyZW50SW5kZXg7CiAgICAgIGF0dHJpYnV0ZXMuVEVYQ09PUkRfMCA9IHV2MEluZGV4OwogICAgICBidWZmZXJzLnB1c2goewogICAgICAgIHVyaTogdXYwVVJMLAogICAgICAgIGJ5dGVMZW5ndGg6IG1lc2hVdjBzLmJ5dGVMZW5ndGgKICAgICAgfSk7CiAgICAgIGJ1ZmZlclZpZXdzLnB1c2goewogICAgICAgIGJ1ZmZlcjogdXYwSW5kZXgsCiAgICAgICAgYnl0ZU9mZnNldDogMCwKICAgICAgICBieXRlTGVuZ3RoOiBtZXNoVXYwcy5ieXRlTGVuZ3RoLAogICAgICAgIHRhcmdldDogMzQ5NjIKICAgICAgfSk7CiAgICAgIGFjY2Vzc29ycy5wdXNoKHsKICAgICAgICBidWZmZXJWaWV3OiB1djBJbmRleCwKICAgICAgICBieXRlT2Zmc2V0OiAwLAogICAgICAgIGNvbXBvbmVudFR5cGU6IDUxMjYsCiAgICAgICAgY291bnQ6IHZlcnRleENvdW50LAogICAgICAgIHR5cGU6ICJWRUMyIgogICAgICB9KTsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoY29sb3JzVVJMKSkgewogICAgICArK2N1cnJlbnRJbmRleDsKICAgICAgY29sb3JJbmRleCA9IGN1cnJlbnRJbmRleDsKICAgICAgYXR0cmlidXRlcy5DT0xPUl8wID0gY29sb3JJbmRleDsKICAgICAgYnVmZmVycy5wdXNoKHsKICAgICAgICB1cmk6IGNvbG9yc1VSTCwKICAgICAgICBieXRlTGVuZ3RoOiBtZXNoQ29sb3JzSW5CeXRlcy5ieXRlTGVuZ3RoCiAgICAgIH0pOwogICAgICBidWZmZXJWaWV3cy5wdXNoKHsKICAgICAgICBidWZmZXI6IGNvbG9ySW5kZXgsCiAgICAgICAgYnl0ZU9mZnNldDogMCwKICAgICAgICBieXRlTGVuZ3RoOiBtZXNoQ29sb3JzSW5CeXRlcy5ieXRlTGVuZ3RoLAogICAgICAgIHRhcmdldDogMzQ5NjIKICAgICAgfSk7CiAgICAgIGFjY2Vzc29ycy5wdXNoKHsKICAgICAgICBidWZmZXJWaWV3OiBjb2xvckluZGV4LAogICAgICAgIGJ5dGVPZmZzZXQ6IDAsCiAgICAgICAgY29tcG9uZW50VHlwZTogNTEyMSwKICAgICAgICBub3JtYWxpemVkOiB0cnVlLAogICAgICAgIGNvdW50OiB2ZXJ0ZXhDb3VudCwKICAgICAgICB0eXBlOiAiVkVDNCIKICAgICAgfSk7CiAgICB9CiAgICArK2N1cnJlbnRJbmRleDsKICAgIGluZGljZXNJbmRleCA9IGN1cnJlbnRJbmRleDsKICAgIGJ1ZmZlcnMucHVzaCh7CiAgICAgIHVyaTogaW5kaWNlc1VSTCwKICAgICAgYnl0ZUxlbmd0aDogaW5kZXhBcnJheS5ieXRlTGVuZ3RoCiAgICB9KTsKICAgIGJ1ZmZlclZpZXdzLnB1c2goewogICAgICBidWZmZXI6IGluZGljZXNJbmRleCwKICAgICAgYnl0ZU9mZnNldDogMCwKICAgICAgYnl0ZUxlbmd0aDogaW5kZXhBcnJheS5ieXRlTGVuZ3RoLAogICAgICB0YXJnZXQ6IDM0OTYzCiAgICB9KTsKICAgIGFjY2Vzc29ycy5wdXNoKHsKICAgICAgYnVmZmVyVmlldzogaW5kaWNlc0luZGV4LAogICAgICBieXRlT2Zmc2V0OiAwLAogICAgICBjb21wb25lbnRUeXBlOiA1MTI1LAogICAgICBjb3VudDogdmVydGV4Q291bnQsCiAgICAgIHR5cGU6ICJTQ0FMQVIiCiAgICB9KTsKICAgIG1lc2hlcy5wdXNoKHsKICAgICAgcHJpbWl0aXZlczogWwogICAgICAgIHsKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBpbmRpY2VzOiBpbmRpY2VzSW5kZXgsCiAgICAgICAgICBtYXRlcmlhbDogMAogICAgICAgIH0KICAgICAgXQogICAgfSk7CiAgICBub2Rlc0luU2NlbmUucHVzaCgwKTsKICAgIG5vZGVzLnB1c2goeyBtZXNoOiAwIH0pOwogICAgcmV0dXJuIHsKICAgICAgYnVmZmVycywKICAgICAgYnVmZmVyVmlld3MsCiAgICAgIGFjY2Vzc29ycywKICAgICAgbWVzaGVzLAogICAgICBub2RlcywKICAgICAgbm9kZXNJblNjZW5lCiAgICB9OwogIH0KICBmdW5jdGlvbiBkZWNvZGUyKGRhdGEsIHNjaGVtYSwgYnVmZmVySW5mbywgZmVhdHVyZURhdGEpIHsKICAgIGNvbnN0IG1hZ2ljTnVtYmVyID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSwgMCwgNSk7CiAgICBpZiAobWFnaWNOdW1iZXJbMF0gPT09ICJEIi5jaGFyQ29kZUF0KCkgJiYgbWFnaWNOdW1iZXJbMV0gPT09ICJSIi5jaGFyQ29kZUF0KCkgJiYgbWFnaWNOdW1iZXJbMl0gPT09ICJBIi5jaGFyQ29kZUF0KCkgJiYgbWFnaWNOdW1iZXJbM10gPT09ICJDIi5jaGFyQ29kZUF0KCkgJiYgbWFnaWNOdW1iZXJbNF0gPT09ICJPIi5jaGFyQ29kZUF0KCkpIHsKICAgICAgcmV0dXJuIGRlY29kZURyYWNvRW5jb2RlZEdlb21ldHJ5KGRhdGEsIGJ1ZmZlckluZm8pOwogICAgfQogICAgcmV0dXJuIGRlY29kZUJpbmFyeUdlb21ldHJ5KGRhdGEsIHNjaGVtYSwgYnVmZmVySW5mbywgZmVhdHVyZURhdGEpOwogIH0KICBmdW5jdGlvbiBkZWNvZGVEcmFjb0VuY29kZWRHZW9tZXRyeShkYXRhKSB7CiAgICBjb25zdCBkcmFjb0RlY29kZXJNb2R1bGUgPSBkcmFjbzI7CiAgICBjb25zdCBidWZmZXIgPSBuZXcgZHJhY29EZWNvZGVyTW9kdWxlLkRlY29kZXJCdWZmZXIoKTsKICAgIGNvbnN0IGJ5dGVBcnJheSA9IG5ldyBVaW50OEFycmF5KGRhdGEpOwogICAgYnVmZmVyLkluaXQoYnl0ZUFycmF5LCBieXRlQXJyYXkubGVuZ3RoKTsKICAgIGNvbnN0IGRyYWNvRGVjb2RlciA9IG5ldyBkcmFjb0RlY29kZXJNb2R1bGUuRGVjb2RlcigpOwogICAgY29uc3QgZ2VvbWV0cnlUeXBlID0gZHJhY29EZWNvZGVyLkdldEVuY29kZWRHZW9tZXRyeVR5cGUoYnVmZmVyKTsKICAgIGNvbnN0IG1ldGFkYXRhUXVlcmllciA9IG5ldyBkcmFjb0RlY29kZXJNb2R1bGUuTWV0YWRhdGFRdWVyaWVyKCk7CiAgICBsZXQgZHJhY29HZW9tZXRyeTsKICAgIGxldCBzdGF0dXM7CiAgICBpZiAoZ2VvbWV0cnlUeXBlID09PSBkcmFjb0RlY29kZXJNb2R1bGUuVFJJQU5HVUxBUl9NRVNIKSB7CiAgICAgIGRyYWNvR2VvbWV0cnkgPSBuZXcgZHJhY29EZWNvZGVyTW9kdWxlLk1lc2goKTsKICAgICAgc3RhdHVzID0gZHJhY29EZWNvZGVyLkRlY29kZUJ1ZmZlclRvTWVzaChidWZmZXIsIGRyYWNvR2VvbWV0cnkpOwogICAgfQogICAgY29uc3QgZGVjb2RlZEdlb21ldHJ5ID0gewogICAgICB2ZXJ0ZXhDb3VudDogWzBdLAogICAgICBmZWF0dXJlQ291bnQ6IDAKICAgIH07CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHN0YXR1cykgJiYgc3RhdHVzLm9rKCkgJiYgZHJhY29HZW9tZXRyeS5wdHIgIT09IDApIHsKICAgICAgY29uc3QgZmFjZUNvdW50ID0gZHJhY29HZW9tZXRyeS5udW1fZmFjZXMoKTsKICAgICAgY29uc3QgYXR0cmlidXRlc0NvdW50ID0gZHJhY29HZW9tZXRyeS5udW1fYXR0cmlidXRlcygpOwogICAgICBjb25zdCB2ZXJ0ZXhDb3VudCA9IGRyYWNvR2VvbWV0cnkubnVtX3BvaW50cygpOwogICAgICBkZWNvZGVkR2VvbWV0cnkuaW5kaWNlcyA9IG5ldyBVaW50MzJBcnJheShmYWNlQ291bnQgKiAzKTsKICAgICAgY29uc3QgZmFjZXMyID0gZGVjb2RlZEdlb21ldHJ5LmluZGljZXM7CiAgICAgIGRlY29kZWRHZW9tZXRyeS52ZXJ0ZXhDb3VudFswXSA9IHZlcnRleENvdW50OwogICAgICBkZWNvZGVkR2VvbWV0cnkuc2NhbGVfeCA9IDE7CiAgICAgIGRlY29kZWRHZW9tZXRyeS5zY2FsZV95ID0gMTsKICAgICAgY29uc3QgZmFjZSA9IG5ldyBkcmFjb0RlY29kZXJNb2R1bGUuRHJhY29JbnQzMkFycmF5KDMpOwogICAgICBmb3IgKGxldCBmYWNlSW5kZXggPSAwOyBmYWNlSW5kZXggPCBmYWNlQ291bnQ7ICsrZmFjZUluZGV4KSB7CiAgICAgICAgZHJhY29EZWNvZGVyLkdldEZhY2VGcm9tTWVzaChkcmFjb0dlb21ldHJ5LCBmYWNlSW5kZXgsIGZhY2UpOwogICAgICAgIGZhY2VzMltmYWNlSW5kZXggKiAzXSA9IGZhY2UuR2V0VmFsdWUoMCk7CiAgICAgICAgZmFjZXMyW2ZhY2VJbmRleCAqIDMgKyAxXSA9IGZhY2UuR2V0VmFsdWUoMSk7CiAgICAgICAgZmFjZXMyW2ZhY2VJbmRleCAqIDMgKyAyXSA9IGZhY2UuR2V0VmFsdWUoMik7CiAgICAgIH0KICAgICAgZHJhY29EZWNvZGVyTW9kdWxlLmRlc3Ryb3koZmFjZSk7CiAgICAgIGZvciAobGV0IGF0dHJJbmRleCA9IDA7IGF0dHJJbmRleCA8IGF0dHJpYnV0ZXNDb3VudDsgKythdHRySW5kZXgpIHsKICAgICAgICBjb25zdCBkcmFjb0F0dHJpYnV0ZSA9IGRyYWNvRGVjb2Rlci5HZXRBdHRyaWJ1dGUoCiAgICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgICAgYXR0ckluZGV4CiAgICAgICAgKTsKICAgICAgICBjb25zdCBhdHRyaWJ1dGVEYXRhID0gZGVjb2RlRHJhY29BdHRyaWJ1dGUoCiAgICAgICAgICBkcmFjb0RlY29kZXJNb2R1bGUsCiAgICAgICAgICBkcmFjb0RlY29kZXIsCiAgICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgICAgZHJhY29BdHRyaWJ1dGUsCiAgICAgICAgICB2ZXJ0ZXhDb3VudAogICAgICAgICk7CiAgICAgICAgY29uc3QgZHJhY29BdHRyaWJ1dGVUeXBlID0gZHJhY29BdHRyaWJ1dGUuYXR0cmlidXRlX3R5cGUoKTsKICAgICAgICBsZXQgYXR0cmlidXRlaTNzTmFtZSA9ICJ1bmtub3duIjsKICAgICAgICBpZiAoZHJhY29BdHRyaWJ1dGVUeXBlID09PSBkcmFjb0RlY29kZXJNb2R1bGUuUE9TSVRJT04pIHsKICAgICAgICAgIGF0dHJpYnV0ZWkzc05hbWUgPSAicG9zaXRpb25zIjsKICAgICAgICB9IGVsc2UgaWYgKGRyYWNvQXR0cmlidXRlVHlwZSA9PT0gZHJhY29EZWNvZGVyTW9kdWxlLk5PUk1BTCkgewogICAgICAgICAgYXR0cmlidXRlaTNzTmFtZSA9ICJub3JtYWxzIjsKICAgICAgICB9IGVsc2UgaWYgKGRyYWNvQXR0cmlidXRlVHlwZSA9PT0gZHJhY29EZWNvZGVyTW9kdWxlLkNPTE9SKSB7CiAgICAgICAgICBhdHRyaWJ1dGVpM3NOYW1lID0gImNvbG9ycyI7CiAgICAgICAgfSBlbHNlIGlmIChkcmFjb0F0dHJpYnV0ZVR5cGUgPT09IGRyYWNvRGVjb2Rlck1vZHVsZS5URVhfQ09PUkQpIHsKICAgICAgICAgIGF0dHJpYnV0ZWkzc05hbWUgPSAidXYwcyI7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG1ldGFkYXRhID0gZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZU1ldGFkYXRhKAogICAgICAgICAgZHJhY29HZW9tZXRyeSwKICAgICAgICAgIGF0dHJJbmRleAogICAgICAgICk7CiAgICAgICAgaWYgKG1ldGFkYXRhLnB0ciAhPT0gMCkgewogICAgICAgICAgY29uc3QgbnVtRW50cmllcyA9IG1ldGFkYXRhUXVlcmllci5OdW1FbnRyaWVzKG1ldGFkYXRhKTsKICAgICAgICAgIGZvciAobGV0IGVudHJ5ID0gMDsgZW50cnkgPCBudW1FbnRyaWVzOyArK2VudHJ5KSB7CiAgICAgICAgICAgIGNvbnN0IGVudHJ5TmFtZSA9IG1ldGFkYXRhUXVlcmllci5HZXRFbnRyeU5hbWUobWV0YWRhdGEsIGVudHJ5KTsKICAgICAgICAgICAgaWYgKGVudHJ5TmFtZSA9PT0gImkzcy1zY2FsZV94IikgewogICAgICAgICAgICAgIGRlY29kZWRHZW9tZXRyeS5zY2FsZV94ID0gbWV0YWRhdGFRdWVyaWVyLkdldERvdWJsZUVudHJ5KAogICAgICAgICAgICAgICAgbWV0YWRhdGEsCiAgICAgICAgICAgICAgICAiaTNzLXNjYWxlX3giCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChlbnRyeU5hbWUgPT09ICJpM3Mtc2NhbGVfeSIpIHsKICAgICAgICAgICAgICBkZWNvZGVkR2VvbWV0cnkuc2NhbGVfeSA9IG1ldGFkYXRhUXVlcmllci5HZXREb3VibGVFbnRyeSgKICAgICAgICAgICAgICAgIG1ldGFkYXRhLAogICAgICAgICAgICAgICAgImkzcy1zY2FsZV95IgogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoZW50cnlOYW1lID09PSAiaTNzLWF0dHJpYnV0ZS10eXBlIikgewogICAgICAgICAgICAgIGF0dHJpYnV0ZWkzc05hbWUgPSBtZXRhZGF0YVF1ZXJpZXIuR2V0U3RyaW5nRW50cnkoCiAgICAgICAgICAgICAgICBtZXRhZGF0YSwKICAgICAgICAgICAgICAgICJpM3MtYXR0cmlidXRlLXR5cGUiCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGRlY29kZWRHZW9tZXRyeVthdHRyaWJ1dGVpM3NOYW1lXSkpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCJBdHRyaWJ1dGUgYWxyZWFkeSBleGlzdHMiLCBhdHRyaWJ1dGVpM3NOYW1lKTsKICAgICAgICB9CiAgICAgICAgZGVjb2RlZEdlb21ldHJ5W2F0dHJpYnV0ZWkzc05hbWVdID0gYXR0cmlidXRlRGF0YTsKICAgICAgICBpZiAoYXR0cmlidXRlaTNzTmFtZSA9PT0gImZlYXR1cmUtaW5kZXgiKSB7CiAgICAgICAgICBkZWNvZGVkR2VvbWV0cnkuZmVhdHVyZUNvdW50Kys7CiAgICAgICAgfQogICAgICB9CiAgICAgIGRyYWNvRGVjb2Rlck1vZHVsZS5kZXN0cm95KGRyYWNvR2VvbWV0cnkpOwogICAgfQogICAgZHJhY29EZWNvZGVyTW9kdWxlLmRlc3Ryb3kobWV0YWRhdGFRdWVyaWVyKTsKICAgIGRyYWNvRGVjb2Rlck1vZHVsZS5kZXN0cm95KGRyYWNvRGVjb2Rlcik7CiAgICByZXR1cm4gZGVjb2RlZEdlb21ldHJ5OwogIH0KICBmdW5jdGlvbiBkZWNvZGVEcmFjb0F0dHJpYnV0ZShkcmFjb0RlY29kZXJNb2R1bGUsIGRyYWNvRGVjb2RlciwgZHJhY29HZW9tZXRyeSwgZHJhY29BdHRyaWJ1dGUsIHZlcnRleENvdW50KSB7CiAgICBjb25zdCBidWZmZXJTaXplID0gZHJhY29BdHRyaWJ1dGUubnVtX2NvbXBvbmVudHMoKSAqIHZlcnRleENvdW50OwogICAgbGV0IGRyYWNvQXR0cmlidXRlRGF0YTsKICAgIGNvbnN0IGhhbmRsZXJzID0gWwogICAgICBmdW5jdGlvbigpIHsKICAgICAgfSwKICAgICAgLy8gRFRfSU5WQUxJRCAtIDAKICAgICAgZnVuY3Rpb24oKSB7CiAgICAgICAgZHJhY29BdHRyaWJ1dGVEYXRhID0gbmV3IGRyYWNvRGVjb2Rlck1vZHVsZS5EcmFjb0ludDhBcnJheShidWZmZXJTaXplKTsKICAgICAgICBjb25zdCBzdWNjZXNzID0gZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZUludDhGb3JBbGxQb2ludHMoCiAgICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgICAgZHJhY29BdHRyaWJ1dGUsCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZURhdGEKICAgICAgICApOwogICAgICAgIGlmICghc3VjY2VzcykgewogICAgICAgICAgY29uc29sZS5lcnJvcigiQmFkIHN0cmVhbSIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBhdHRyaWJ1dGVEYXRhMiA9IG5ldyBJbnQ4QXJyYXkoYnVmZmVyU2l6ZSk7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJTaXplOyArK2kpIHsKICAgICAgICAgIGF0dHJpYnV0ZURhdGEyW2ldID0gZHJhY29BdHRyaWJ1dGVEYXRhLkdldFZhbHVlKGkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYXR0cmlidXRlRGF0YTI7CiAgICAgIH0sCiAgICAgIGZ1bmN0aW9uKCkgewogICAgICAgIGRyYWNvQXR0cmlidXRlRGF0YSA9IG5ldyBkcmFjb0RlY29kZXJNb2R1bGUuRHJhY29JbnQ4QXJyYXkoYnVmZmVyU2l6ZSk7CiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGRyYWNvRGVjb2Rlci5HZXRBdHRyaWJ1dGVVSW50OEZvckFsbFBvaW50cygKICAgICAgICAgIGRyYWNvR2VvbWV0cnksCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZSwKICAgICAgICAgIGRyYWNvQXR0cmlidXRlRGF0YQogICAgICAgICk7CiAgICAgICAgaWYgKCFzdWNjZXNzKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCJCYWQgc3RyZWFtIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZURhdGEyID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyU2l6ZSk7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJTaXplOyArK2kpIHsKICAgICAgICAgIGF0dHJpYnV0ZURhdGEyW2ldID0gZHJhY29BdHRyaWJ1dGVEYXRhLkdldFZhbHVlKGkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYXR0cmlidXRlRGF0YTI7CiAgICAgIH0sCiAgICAgIGZ1bmN0aW9uKCkgewogICAgICAgIGRyYWNvQXR0cmlidXRlRGF0YSA9IG5ldyBkcmFjb0RlY29kZXJNb2R1bGUuRHJhY29JbnQxNkFycmF5KGJ1ZmZlclNpemUpOwogICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBkcmFjb0RlY29kZXIuR2V0QXR0cmlidXRlSW50MTZGb3JBbGxQb2ludHMoCiAgICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgICAgZHJhY29BdHRyaWJ1dGUsCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZURhdGEKICAgICAgICApOwogICAgICAgIGlmICghc3VjY2VzcykgewogICAgICAgICAgY29uc29sZS5lcnJvcigiQmFkIHN0cmVhbSIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBhdHRyaWJ1dGVEYXRhMiA9IG5ldyBJbnQxNkFycmF5KGJ1ZmZlclNpemUpOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyU2l6ZTsgKytpKSB7CiAgICAgICAgICBhdHRyaWJ1dGVEYXRhMltpXSA9IGRyYWNvQXR0cmlidXRlRGF0YS5HZXRWYWx1ZShpKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZURhdGEyOwogICAgICB9LAogICAgICBmdW5jdGlvbigpIHsKICAgICAgICBkcmFjb0F0dHJpYnV0ZURhdGEgPSBuZXcgZHJhY29EZWNvZGVyTW9kdWxlLkRyYWNvSW50MTZBcnJheShidWZmZXJTaXplKTsKICAgICAgICBjb25zdCBzdWNjZXNzID0gZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZVVJbnQxNkZvckFsbFBvaW50cygKICAgICAgICAgIGRyYWNvR2VvbWV0cnksCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZSwKICAgICAgICAgIGRyYWNvQXR0cmlidXRlRGF0YQogICAgICAgICk7CiAgICAgICAgaWYgKCFzdWNjZXNzKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCJCYWQgc3RyZWFtIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZURhdGEyID0gbmV3IFVpbnQxNkFycmF5KGJ1ZmZlclNpemUpOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyU2l6ZTsgKytpKSB7CiAgICAgICAgICBhdHRyaWJ1dGVEYXRhMltpXSA9IGRyYWNvQXR0cmlidXRlRGF0YS5HZXRWYWx1ZShpKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZURhdGEyOwogICAgICB9LAogICAgICBmdW5jdGlvbigpIHsKICAgICAgICBkcmFjb0F0dHJpYnV0ZURhdGEgPSBuZXcgZHJhY29EZWNvZGVyTW9kdWxlLkRyYWNvSW50MzJBcnJheShidWZmZXJTaXplKTsKICAgICAgICBjb25zdCBzdWNjZXNzID0gZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZUludDMyRm9yQWxsUG9pbnRzKAogICAgICAgICAgZHJhY29HZW9tZXRyeSwKICAgICAgICAgIGRyYWNvQXR0cmlidXRlLAogICAgICAgICAgZHJhY29BdHRyaWJ1dGVEYXRhCiAgICAgICAgKTsKICAgICAgICBpZiAoIXN1Y2Nlc3MpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIkJhZCBzdHJlYW0iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgYXR0cmlidXRlRGF0YTIgPSBuZXcgSW50MzJBcnJheShidWZmZXJTaXplKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlclNpemU7ICsraSkgewogICAgICAgICAgYXR0cmlidXRlRGF0YTJbaV0gPSBkcmFjb0F0dHJpYnV0ZURhdGEuR2V0VmFsdWUoaSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhdHRyaWJ1dGVEYXRhMjsKICAgICAgfSwKICAgICAgZnVuY3Rpb24oKSB7CiAgICAgICAgZHJhY29BdHRyaWJ1dGVEYXRhID0gbmV3IGRyYWNvRGVjb2Rlck1vZHVsZS5EcmFjb0ludDMyQXJyYXkoYnVmZmVyU2l6ZSk7CiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGRyYWNvRGVjb2Rlci5HZXRBdHRyaWJ1dGVVSW50MzJGb3JBbGxQb2ludHMoCiAgICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgICAgZHJhY29BdHRyaWJ1dGUsCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZURhdGEKICAgICAgICApOwogICAgICAgIGlmICghc3VjY2VzcykgewogICAgICAgICAgY29uc29sZS5lcnJvcigiQmFkIHN0cmVhbSIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBhdHRyaWJ1dGVEYXRhMiA9IG5ldyBVaW50MzJBcnJheShidWZmZXJTaXplKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlclNpemU7ICsraSkgewogICAgICAgICAgYXR0cmlidXRlRGF0YTJbaV0gPSBkcmFjb0F0dHJpYnV0ZURhdGEuR2V0VmFsdWUoaSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhdHRyaWJ1dGVEYXRhMjsKICAgICAgfSwKICAgICAgZnVuY3Rpb24oKSB7CiAgICAgIH0sCiAgICAgIGZ1bmN0aW9uKCkgewogICAgICB9LAogICAgICBmdW5jdGlvbigpIHsKICAgICAgICBkcmFjb0F0dHJpYnV0ZURhdGEgPSBuZXcgZHJhY29EZWNvZGVyTW9kdWxlLkRyYWNvRmxvYXQzMkFycmF5KGJ1ZmZlclNpemUpOwogICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBkcmFjb0RlY29kZXIuR2V0QXR0cmlidXRlRmxvYXRGb3JBbGxQb2ludHMoCiAgICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgICAgZHJhY29BdHRyaWJ1dGUsCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZURhdGEKICAgICAgICApOwogICAgICAgIGlmICghc3VjY2VzcykgewogICAgICAgICAgY29uc29sZS5lcnJvcigiQmFkIHN0cmVhbSIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBhdHRyaWJ1dGVEYXRhMiA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyU2l6ZSk7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJTaXplOyArK2kpIHsKICAgICAgICAgIGF0dHJpYnV0ZURhdGEyW2ldID0gZHJhY29BdHRyaWJ1dGVEYXRhLkdldFZhbHVlKGkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYXR0cmlidXRlRGF0YTI7CiAgICAgIH0sCiAgICAgIGZ1bmN0aW9uKCkgewogICAgICB9LAogICAgICBmdW5jdGlvbigpIHsKICAgICAgICBkcmFjb0F0dHJpYnV0ZURhdGEgPSBuZXcgZHJhY29EZWNvZGVyTW9kdWxlLkRyYWNvVUludDhBcnJheShidWZmZXJTaXplKTsKICAgICAgICBjb25zdCBzdWNjZXNzID0gZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZVVJbnQ4Rm9yQWxsUG9pbnRzKAogICAgICAgICAgZHJhY29HZW9tZXRyeSwKICAgICAgICAgIGRyYWNvQXR0cmlidXRlLAogICAgICAgICAgZHJhY29BdHRyaWJ1dGVEYXRhCiAgICAgICAgKTsKICAgICAgICBpZiAoIXN1Y2Nlc3MpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIkJhZCBzdHJlYW0iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgYXR0cmlidXRlRGF0YTIgPSBuZXcgVWludDhBcnJheShidWZmZXJTaXplKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlclNpemU7ICsraSkgewogICAgICAgICAgYXR0cmlidXRlRGF0YTJbaV0gPSBkcmFjb0F0dHJpYnV0ZURhdGEuR2V0VmFsdWUoaSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhdHRyaWJ1dGVEYXRhMjsKICAgICAgfQogICAgXTsKICAgIGNvbnN0IGF0dHJpYnV0ZURhdGEgPSBoYW5kbGVyc1tkcmFjb0F0dHJpYnV0ZS5kYXRhX3R5cGUoKV0oKTsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZHJhY29BdHRyaWJ1dGVEYXRhKSkgewogICAgICBkcmFjb0RlY29kZXJNb2R1bGUuZGVzdHJveShkcmFjb0F0dHJpYnV0ZURhdGEpOwogICAgfQogICAgcmV0dXJuIGF0dHJpYnV0ZURhdGE7CiAgfQogIGZ1bmN0aW9uIGRlY29kZUJpbmFyeUdlb21ldHJ5KGRhdGEsIHNjaGVtYSwgYnVmZmVySW5mbywgZmVhdHVyZURhdGEpIHsKICAgIGNvbnN0IGRlY29kZWRHZW9tZXRyeSA9IHsKICAgICAgdmVydGV4Q291bnQ6IDAKICAgIH07CiAgICBjb25zdCBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhkYXRhKTsKICAgIHRyeSB7CiAgICAgIGxldCBvZmZzZXQgPSAwOwogICAgICBkZWNvZGVkR2VvbWV0cnkudmVydGV4Q291bnQgPSBkYXRhVmlldy5nZXRVaW50MzIob2Zmc2V0LCAxKTsKICAgICAgb2Zmc2V0ICs9IDQ7CiAgICAgIGRlY29kZWRHZW9tZXRyeS5mZWF0dXJlQ291bnQgPSBkYXRhVmlldy5nZXRVaW50MzIob2Zmc2V0LCAxKTsKICAgICAgb2Zmc2V0ICs9IDQ7CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYnVmZmVySW5mbykpIHsKICAgICAgICBmb3IgKGxldCBhdHRySW5kZXggPSAwOyBhdHRySW5kZXggPCBidWZmZXJJbmZvLmF0dHJpYnV0ZXMubGVuZ3RoOyBhdHRySW5kZXgrKykgewogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChiaW5hcnlBdHRyaWJ1dGVEZWNvZGVyc1tidWZmZXJJbmZvLmF0dHJpYnV0ZXNbYXR0ckluZGV4XV0pKSB7CiAgICAgICAgICAgIG9mZnNldCA9IGJpbmFyeUF0dHJpYnV0ZURlY29kZXJzW2J1ZmZlckluZm8uYXR0cmlidXRlc1thdHRySW5kZXhdXSgKICAgICAgICAgICAgICBkZWNvZGVkR2VvbWV0cnksCiAgICAgICAgICAgICAgZGF0YSwKICAgICAgICAgICAgICBvZmZzZXQKICAgICAgICAgICAgKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoCiAgICAgICAgICAgICAgIlVua25vd24gZGVjb2RlciBmb3IiLAogICAgICAgICAgICAgIGJ1ZmZlckluZm8uYXR0cmlidXRlc1thdHRySW5kZXhdCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGxldCBvcmRlcmluZyA9IHNjaGVtYS5vcmRlcmluZzsKICAgICAgICBsZXQgZmVhdHVyZUF0dHJpYnV0ZU9yZGVyID0gc2NoZW1hLmZlYXR1cmVBdHRyaWJ1dGVPcmRlcjsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGZlYXR1cmVEYXRhKSAmJiBkZWZpbmVkX2RlZmF1bHQoZmVhdHVyZURhdGEuZ2VvbWV0cnlEYXRhKSAmJiBkZWZpbmVkX2RlZmF1bHQoZmVhdHVyZURhdGEuZ2VvbWV0cnlEYXRhWzBdKSAmJiBkZWZpbmVkX2RlZmF1bHQoZmVhdHVyZURhdGEuZ2VvbWV0cnlEYXRhWzBdLnBhcmFtcykpIHsKICAgICAgICAgIG9yZGVyaW5nID0gT2JqZWN0LmtleXMoCiAgICAgICAgICAgIGZlYXR1cmVEYXRhLmdlb21ldHJ5RGF0YVswXS5wYXJhbXMudmVydGV4QXR0cmlidXRlcwogICAgICAgICAgKTsKICAgICAgICAgIGZlYXR1cmVBdHRyaWJ1dGVPcmRlciA9IE9iamVjdC5rZXlzKAogICAgICAgICAgICBmZWF0dXJlRGF0YS5nZW9tZXRyeURhdGFbMF0ucGFyYW1zLmZlYXR1cmVBdHRyaWJ1dGVzCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yZGVyaW5nLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBjb25zdCBkZWNvZGVyID0gYmluYXJ5QXR0cmlidXRlRGVjb2RlcnNbb3JkZXJpbmdbaV1dOwogICAgICAgICAgb2Zmc2V0ID0gZGVjb2RlcihkZWNvZGVkR2VvbWV0cnksIGRhdGEsIG9mZnNldCk7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZmVhdHVyZUF0dHJpYnV0ZU9yZGVyLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICBjb25zdCBjdXJEZWNvZGVyID0gYmluYXJ5QXR0cmlidXRlRGVjb2RlcnNbZmVhdHVyZUF0dHJpYnV0ZU9yZGVyW2pdXTsKICAgICAgICAgIG9mZnNldCA9IGN1ckRlY29kZXIoZGVjb2RlZEdlb21ldHJ5LCBkYXRhLCBvZmZzZXQpOwogICAgICAgIH0KICAgICAgfQogICAgfSBjYXRjaCAoZSkgewogICAgICBjb25zb2xlLmVycm9yKGUpOwogICAgfQogICAgZGVjb2RlZEdlb21ldHJ5LnNjYWxlX3ggPSAxOwogICAgZGVjb2RlZEdlb21ldHJ5LnNjYWxlX3kgPSAxOwogICAgcmV0dXJuIGRlY29kZWRHZW9tZXRyeTsKICB9CiAgZnVuY3Rpb24gZGVjb2RlQW5kQ3JlYXRlR2x0ZihwYXJhbWV0ZXJzKSB7CiAgICBjb25zdCBnZW9tZXRyeURhdGEgPSBkZWNvZGUyKAogICAgICBwYXJhbWV0ZXJzLmJpbmFyeURhdGEsCiAgICAgIHBhcmFtZXRlcnMuc2NoZW1hLAogICAgICBwYXJhbWV0ZXJzLmJ1ZmZlckluZm8sCiAgICAgIHBhcmFtZXRlcnMuZmVhdHVyZURhdGEKICAgICk7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHBhcmFtZXRlcnMuZ2VvaWREYXRhTGlzdCkgJiYgcGFyYW1ldGVycy5nZW9pZERhdGFMaXN0Lmxlbmd0aCA+IDApIHsKICAgICAgb3J0aG9tZXRyaWNUb0VsbGlwc29pZGFsKAogICAgICAgIGdlb21ldHJ5RGF0YS52ZXJ0ZXhDb3VudCwKICAgICAgICBnZW9tZXRyeURhdGEucG9zaXRpb25zLAogICAgICAgIGdlb21ldHJ5RGF0YS5zY2FsZV94LAogICAgICAgIGdlb21ldHJ5RGF0YS5zY2FsZV95LAogICAgICAgIHBhcmFtZXRlcnMuY2FydG9ncmFwaGljQ2VudGVyLAogICAgICAgIHBhcmFtZXRlcnMuZ2VvaWREYXRhTGlzdCwKICAgICAgICBmYWxzZQogICAgICApOwogICAgfQogICAgdHJhbnNmb3JtVG9Mb2NhbCgKICAgICAgZ2VvbWV0cnlEYXRhLnZlcnRleENvdW50LAogICAgICBnZW9tZXRyeURhdGEucG9zaXRpb25zLAogICAgICBnZW9tZXRyeURhdGEubm9ybWFscywKICAgICAgcGFyYW1ldGVycy5jYXJ0b2dyYXBoaWNDZW50ZXIsCiAgICAgIHBhcmFtZXRlcnMuY2FydGVzaWFuQ2VudGVyLAogICAgICBwYXJhbWV0ZXJzLnBhcmVudFJvdGF0aW9uLAogICAgICBwYXJhbWV0ZXJzLmVsbGlwc29pZFJhZGlpU3F1YXJlLAogICAgICBnZW9tZXRyeURhdGEuc2NhbGVfeCwKICAgICAgZ2VvbWV0cnlEYXRhLnNjYWxlX3kKICAgICk7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5RGF0YS51djBzKSAmJiBkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnlEYXRhWyJ1di1yZWdpb24iXSkpIHsKICAgICAgY3JvcFVWcygKICAgICAgICBnZW9tZXRyeURhdGEudmVydGV4Q291bnQsCiAgICAgICAgZ2VvbWV0cnlEYXRhLnV2MHMsCiAgICAgICAgZ2VvbWV0cnlEYXRhWyJ1di1yZWdpb24iXQogICAgICApOwogICAgfQogICAgY29uc3QgbWVzaERhdGEgPSBnZW5lcmF0ZUdsdGZCdWZmZXIoCiAgICAgIGdlb21ldHJ5RGF0YS52ZXJ0ZXhDb3VudCwKICAgICAgZ2VvbWV0cnlEYXRhLmluZGljZXMsCiAgICAgIGdlb21ldHJ5RGF0YS5wb3NpdGlvbnMsCiAgICAgIGdlb21ldHJ5RGF0YS5ub3JtYWxzLAogICAgICBnZW9tZXRyeURhdGEudXYwcywKICAgICAgZ2VvbWV0cnlEYXRhLmNvbG9ycwogICAgKTsKICAgIGNvbnN0IGN1c3RvbUF0dHJpYnV0ZXMgPSB7fTsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnlEYXRhWyJmZWF0dXJlLWluZGV4Il0pKSB7CiAgICAgIGN1c3RvbUF0dHJpYnV0ZXMucG9zaXRpb25zID0gZ2VvbWV0cnlEYXRhLnBvc2l0aW9uczsKICAgICAgY3VzdG9tQXR0cmlidXRlcy5pbmRpY2VzID0gZ2VvbWV0cnlEYXRhLmluZGljZXM7CiAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuZmVhdHVyZUluZGV4ID0gZ2VvbWV0cnlEYXRhWyJmZWF0dXJlLWluZGV4Il07CiAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuY2FydGVzaWFuQ2VudGVyID0gcGFyYW1ldGVycy5jYXJ0ZXNpYW5DZW50ZXI7CiAgICAgIGN1c3RvbUF0dHJpYnV0ZXMucGFyZW50Um90YXRpb24gPSBwYXJhbWV0ZXJzLnBhcmVudFJvdGF0aW9uOwogICAgfSBlbHNlIGlmIChkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnlEYXRhWyJmYWNlUmFuZ2UiXSkpIHsKICAgICAgY3VzdG9tQXR0cmlidXRlcy5wb3NpdGlvbnMgPSBnZW9tZXRyeURhdGEucG9zaXRpb25zOwogICAgICBjdXN0b21BdHRyaWJ1dGVzLmluZGljZXMgPSBnZW9tZXRyeURhdGEuaW5kaWNlczsKICAgICAgY3VzdG9tQXR0cmlidXRlcy5zb3VyY2VVUkwgPSBwYXJhbWV0ZXJzLnVybDsKICAgICAgY3VzdG9tQXR0cmlidXRlcy5jYXJ0ZXNpYW5DZW50ZXIgPSBwYXJhbWV0ZXJzLmNhcnRlc2lhbkNlbnRlcjsKICAgICAgY3VzdG9tQXR0cmlidXRlcy5wYXJlbnRSb3RhdGlvbiA9IHBhcmFtZXRlcnMucGFyZW50Um90YXRpb247CiAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuZmVhdHVyZUluZGV4ID0gbmV3IEFycmF5KGdlb21ldHJ5RGF0YS5wb3NpdGlvbnMubGVuZ3RoKTsKICAgICAgZm9yIChsZXQgcmFuZ2UgPSAwOyByYW5nZSA8IGdlb21ldHJ5RGF0YVsiZmFjZVJhbmdlIl0ubGVuZ3RoIC0gMTsgcmFuZ2UgKz0gMikgewogICAgICAgIGNvbnN0IGN1ckluZGV4ID0gcmFuZ2UgLyAyOwogICAgICAgIGNvbnN0IHJhbmdlU3RhcnQgPSBnZW9tZXRyeURhdGFbImZhY2VSYW5nZSJdW3JhbmdlXTsKICAgICAgICBjb25zdCByYW5nZUVuZCA9IGdlb21ldHJ5RGF0YVsiZmFjZVJhbmdlIl1bcmFuZ2UgKyAxXTsKICAgICAgICBmb3IgKGxldCBpID0gcmFuZ2VTdGFydDsgaSA8PSByYW5nZUVuZDsgaSsrKSB7CiAgICAgICAgICBjdXN0b21BdHRyaWJ1dGVzLmZlYXR1cmVJbmRleFtpICogM10gPSBjdXJJbmRleDsKICAgICAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuZmVhdHVyZUluZGV4W2kgKiAzICsgMV0gPSBjdXJJbmRleDsKICAgICAgICAgIGN1c3RvbUF0dHJpYnV0ZXMuZmVhdHVyZUluZGV4W2kgKiAzICsgMl0gPSBjdXJJbmRleDsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIG1lc2hEYXRhLl9jdXN0b21BdHRyaWJ1dGVzID0gY3VzdG9tQXR0cmlidXRlczsKICAgIGNvbnN0IHJlc3VsdHMgPSB7CiAgICAgIG1lc2hEYXRhCiAgICB9OwogICAgcmV0dXJuIHJlc3VsdHM7CiAgfQogIGFzeW5jIGZ1bmN0aW9uIGluaXRXb3JrZXIyKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIGNvbnN0IHdhc21Db25maWcgPSBwYXJhbWV0ZXJzLndlYkFzc2VtYmx5Q29uZmlnOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdCh3YXNtQ29uZmlnKSAmJiBkZWZpbmVkX2RlZmF1bHQod2FzbUNvbmZpZy53YXNtQmluYXJ5RmlsZSkpIHsKICAgICAgZHJhY28yID0gYXdhaXQgKDAsIGltcG9ydF9kcmFjb19kZWNvZGVyX25vZGVqczIuZGVmYXVsdCkod2FzbUNvbmZpZyk7CiAgICB9IGVsc2UgewogICAgICBkcmFjbzIgPSBhd2FpdCAoMCwgaW1wb3J0X2RyYWNvX2RlY29kZXJfbm9kZWpzMi5kZWZhdWx0KSgpOwogICAgfQogICAgcmV0dXJuIHRydWU7CiAgfQogIGZ1bmN0aW9uIGRlY29kZUkzUyhwYXJhbWV0ZXJzLCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICBjb25zdCB3YXNtQ29uZmlnID0gcGFyYW1ldGVycy53ZWJBc3NlbWJseUNvbmZpZzsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQod2FzbUNvbmZpZykpIHsKICAgICAgcmV0dXJuIGluaXRXb3JrZXIyKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpOwogICAgfQogICAgcmV0dXJuIGRlY29kZUFuZENyZWF0ZUdsdGYocGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cyk7CiAgfQogIHZhciBpbXBvcnRfZHJhY29fZGVjb2Rlcl9ub2RlanMyLCBkcmFjbzIsIGJpbmFyeUF0dHJpYnV0ZURlY29kZXJzLCBkZWNvZGVJM1NfZGVmYXVsdDsKICB2YXIgaW5pdF9kZWNvZGVJM1MgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2RlY29kZUkzUy5qcyIoKSB7CiAgICAgIGluaXRfY3JlYXRlVGFza1Byb2Nlc3NvcldvcmtlcigpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9XZWJNZXJjYXRvclByb2plY3Rpb24oKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfTWF0cml4MygpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW1wb3J0X2RyYWNvX2RlY29kZXJfbm9kZWpzMiA9IF9fdG9FU00ocmVxdWlyZV9kcmFjb19kZWNvZGVyX25vZGVqcygpLCAxKTsKICAgICAgYmluYXJ5QXR0cmlidXRlRGVjb2RlcnMgPSB7CiAgICAgICAgcG9zaXRpb246IGZ1bmN0aW9uKGRlY29kZWRHZW9tZXRyeSwgZGF0YSwgb2Zmc2V0KSB7CiAgICAgICAgICBjb25zdCBjb3VudCA9IGRlY29kZWRHZW9tZXRyeS52ZXJ0ZXhDb3VudCAqIDM7CiAgICAgICAgICBkZWNvZGVkR2VvbWV0cnkucG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheShkYXRhLCBvZmZzZXQsIGNvdW50KTsKICAgICAgICAgIG9mZnNldCArPSBjb3VudCAqIDQ7CiAgICAgICAgICByZXR1cm4gb2Zmc2V0OwogICAgICAgIH0sCiAgICAgICAgbm9ybWFsOiBmdW5jdGlvbihkZWNvZGVkR2VvbWV0cnksIGRhdGEsIG9mZnNldCkgewogICAgICAgICAgY29uc3QgY291bnQgPSBkZWNvZGVkR2VvbWV0cnkudmVydGV4Q291bnQgKiAzOwogICAgICAgICAgZGVjb2RlZEdlb21ldHJ5Lm5vcm1hbHMgPSBuZXcgRmxvYXQzMkFycmF5KGRhdGEsIG9mZnNldCwgY291bnQpOwogICAgICAgICAgb2Zmc2V0ICs9IGNvdW50ICogNDsKICAgICAgICAgIHJldHVybiBvZmZzZXQ7CiAgICAgICAgfSwKICAgICAgICB1djA6IGZ1bmN0aW9uKGRlY29kZWRHZW9tZXRyeSwgZGF0YSwgb2Zmc2V0KSB7CiAgICAgICAgICBjb25zdCBjb3VudCA9IGRlY29kZWRHZW9tZXRyeS52ZXJ0ZXhDb3VudCAqIDI7CiAgICAgICAgICBkZWNvZGVkR2VvbWV0cnkudXYwcyA9IG5ldyBGbG9hdDMyQXJyYXkoZGF0YSwgb2Zmc2V0LCBjb3VudCk7CiAgICAgICAgICBvZmZzZXQgKz0gY291bnQgKiA0OwogICAgICAgICAgcmV0dXJuIG9mZnNldDsKICAgICAgICB9LAogICAgICAgIGNvbG9yOiBmdW5jdGlvbihkZWNvZGVkR2VvbWV0cnksIGRhdGEsIG9mZnNldCkgewogICAgICAgICAgY29uc3QgY291bnQgPSBkZWNvZGVkR2VvbWV0cnkudmVydGV4Q291bnQgKiA0OwogICAgICAgICAgZGVjb2RlZEdlb21ldHJ5LmNvbG9ycyA9IG5ldyBVaW50OEFycmF5KGRhdGEsIG9mZnNldCwgY291bnQpOwogICAgICAgICAgb2Zmc2V0ICs9IGNvdW50OwogICAgICAgICAgcmV0dXJuIG9mZnNldDsKICAgICAgICB9LAogICAgICAgIGZlYXR1cmVJZDogZnVuY3Rpb24oZGVjb2RlZEdlb21ldHJ5LCBkYXRhLCBvZmZzZXQpIHsKICAgICAgICAgIGNvbnN0IGNvdW50ID0gZGVjb2RlZEdlb21ldHJ5LmZlYXR1cmVDb3VudDsKICAgICAgICAgIG9mZnNldCArPSBjb3VudCAqIDg7CiAgICAgICAgICByZXR1cm4gb2Zmc2V0OwogICAgICAgIH0sCiAgICAgICAgaWQ6IGZ1bmN0aW9uKGRlY29kZWRHZW9tZXRyeSwgZGF0YSwgb2Zmc2V0KSB7CiAgICAgICAgICBjb25zdCBjb3VudCA9IGRlY29kZWRHZW9tZXRyeS5mZWF0dXJlQ291bnQ7CiAgICAgICAgICBvZmZzZXQgKz0gY291bnQgKiA4OwogICAgICAgICAgcmV0dXJuIG9mZnNldDsKICAgICAgICB9LAogICAgICAgIGZhY2VSYW5nZTogZnVuY3Rpb24oZGVjb2RlZEdlb21ldHJ5LCBkYXRhLCBvZmZzZXQpIHsKICAgICAgICAgIGNvbnN0IGNvdW50ID0gZGVjb2RlZEdlb21ldHJ5LmZlYXR1cmVDb3VudCAqIDI7CiAgICAgICAgICBkZWNvZGVkR2VvbWV0cnkuZmFjZVJhbmdlID0gbmV3IFVpbnQzMkFycmF5KGRhdGEsIG9mZnNldCwgY291bnQpOwogICAgICAgICAgb2Zmc2V0ICs9IGNvdW50ICogNDsKICAgICAgICAgIHJldHVybiBvZmZzZXQ7CiAgICAgICAgfSwKICAgICAgICB1dlJlZ2lvbjogZnVuY3Rpb24oZGVjb2RlZEdlb21ldHJ5LCBkYXRhLCBvZmZzZXQpIHsKICAgICAgICAgIGNvbnN0IGNvdW50ID0gZGVjb2RlZEdlb21ldHJ5LnZlcnRleENvdW50ICogNDsKICAgICAgICAgIGRlY29kZWRHZW9tZXRyeVsidXYtcmVnaW9uIl0gPSBuZXcgVWludDE2QXJyYXkoZGF0YSwgb2Zmc2V0LCBjb3VudCk7CiAgICAgICAgICBvZmZzZXQgKz0gY291bnQgKiAyOwogICAgICAgICAgcmV0dXJuIG9mZnNldDsKICAgICAgICB9LAogICAgICAgIHJlZ2lvbjogZnVuY3Rpb24oZGVjb2RlZEdlb21ldHJ5LCBkYXRhLCBvZmZzZXQpIHsKICAgICAgICAgIGNvbnN0IGNvdW50ID0gZGVjb2RlZEdlb21ldHJ5LnZlcnRleENvdW50ICogNDsKICAgICAgICAgIGRlY29kZWRHZW9tZXRyeVsidXYtcmVnaW9uIl0gPSBuZXcgVWludDE2QXJyYXkoZGF0YSwgb2Zmc2V0LCBjb3VudCk7CiAgICAgICAgICBvZmZzZXQgKz0gY291bnQgKiAyOwogICAgICAgICAgcmV0dXJuIG9mZnNldDsKICAgICAgICB9CiAgICAgIH07CiAgICAgIGRlY29kZUkzU19kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0KGRlY29kZUkzUyk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvUmVuZGVyZXIvUGl4ZWxEYXRhdHlwZS5qcwogIHZhciBQaXhlbERhdGF0eXBlLCBQaXhlbERhdGF0eXBlX2RlZmF1bHQ7CiAgdmFyIGluaXRfUGl4ZWxEYXRhdHlwZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1JlbmRlcmVyL1BpeGVsRGF0YXR5cGUuanMiKCkgewogICAgICBpbml0X1dlYkdMQ29uc3RhbnRzKCk7CiAgICAgIFBpeGVsRGF0YXR5cGUgPSB7CiAgICAgICAgVU5TSUdORURfQllURTogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgIFVOU0lHTkVEX1NIT1JUOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlVOU0lHTkVEX1NIT1JULAogICAgICAgIFVOU0lHTkVEX0lOVDogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5VTlNJR05FRF9JTlQsCiAgICAgICAgRkxPQVQ6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgSEFMRl9GTE9BVDogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5IQUxGX0ZMT0FUX09FUywKICAgICAgICBVTlNJR05FRF9JTlRfMjRfODogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5VTlNJR05FRF9JTlRfMjRfOCwKICAgICAgICBVTlNJR05FRF9TSE9SVF80XzRfNF80OiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlVOU0lHTkVEX1NIT1JUXzRfNF80XzQsCiAgICAgICAgVU5TSUdORURfU0hPUlRfNV81XzVfMTogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5VTlNJR05FRF9TSE9SVF81XzVfNV8xLAogICAgICAgIFVOU0lHTkVEX1NIT1JUXzVfNl81OiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlVOU0lHTkVEX1NIT1JUXzVfNl81CiAgICAgIH07CiAgICAgIFBpeGVsRGF0YXR5cGUudG9XZWJHTENvbnN0YW50ID0gZnVuY3Rpb24ocGl4ZWxEYXRhdHlwZSwgY29udGV4dCkgewogICAgICAgIHN3aXRjaCAocGl4ZWxEYXRhdHlwZSkgewogICAgICAgICAgY2FzZSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX0JZVEU6CiAgICAgICAgICAgIHJldHVybiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlVOU0lHTkVEX0JZVEU7CiAgICAgICAgICBjYXNlIFBpeGVsRGF0YXR5cGUuVU5TSUdORURfU0hPUlQ6CiAgICAgICAgICAgIHJldHVybiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlVOU0lHTkVEX1NIT1JUOwogICAgICAgICAgY2FzZSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX0lOVDoKICAgICAgICAgICAgcmV0dXJuIFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuVU5TSUdORURfSU5UOwogICAgICAgICAgY2FzZSBQaXhlbERhdGF0eXBlLkZMT0FUOgogICAgICAgICAgICByZXR1cm4gV2ViR0xDb25zdGFudHNfZGVmYXVsdC5GTE9BVDsKICAgICAgICAgIGNhc2UgUGl4ZWxEYXRhdHlwZS5IQUxGX0ZMT0FUOgogICAgICAgICAgICByZXR1cm4gY29udGV4dC53ZWJnbDIgPyBXZWJHTENvbnN0YW50c19kZWZhdWx0LkhBTEZfRkxPQVQgOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkhBTEZfRkxPQVRfT0VTOwogICAgICAgICAgY2FzZSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX0lOVF8yNF84OgogICAgICAgICAgICByZXR1cm4gV2ViR0xDb25zdGFudHNfZGVmYXVsdC5VTlNJR05FRF9JTlRfMjRfODsKICAgICAgICAgIGNhc2UgUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9TSE9SVF80XzRfNF80OgogICAgICAgICAgICByZXR1cm4gV2ViR0xDb25zdGFudHNfZGVmYXVsdC5VTlNJR05FRF9TSE9SVF80XzRfNF80OwogICAgICAgICAgY2FzZSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX1NIT1JUXzVfNV81XzE6CiAgICAgICAgICAgIHJldHVybiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlVOU0lHTkVEX1NIT1JUXzVfNV81XzE7CiAgICAgICAgICBjYXNlIFBpeGVsRGF0YXR5cGUuVU5TSUdORURfU0hPUlRfNV82XzU6CiAgICAgICAgICAgIHJldHVybiBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX1NIT1JUXzVfNl81OwogICAgICAgIH0KICAgICAgfTsKICAgICAgUGl4ZWxEYXRhdHlwZS5pc1BhY2tlZCA9IGZ1bmN0aW9uKHBpeGVsRGF0YXR5cGUpIHsKICAgICAgICByZXR1cm4gcGl4ZWxEYXRhdHlwZSA9PT0gUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9JTlRfMjRfOCB8fCBwaXhlbERhdGF0eXBlID09PSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX1NIT1JUXzRfNF80XzQgfHwgcGl4ZWxEYXRhdHlwZSA9PT0gUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9TSE9SVF81XzVfNV8xIHx8IHBpeGVsRGF0YXR5cGUgPT09IFBpeGVsRGF0YXR5cGUuVU5TSUdORURfU0hPUlRfNV82XzU7CiAgICAgIH07CiAgICAgIFBpeGVsRGF0YXR5cGUuc2l6ZUluQnl0ZXMgPSBmdW5jdGlvbihwaXhlbERhdGF0eXBlKSB7CiAgICAgICAgc3dpdGNoIChwaXhlbERhdGF0eXBlKSB7CiAgICAgICAgICBjYXNlIFBpeGVsRGF0YXR5cGUuVU5TSUdORURfQllURToKICAgICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgICBjYXNlIFBpeGVsRGF0YXR5cGUuVU5TSUdORURfU0hPUlQ6CiAgICAgICAgICBjYXNlIFBpeGVsRGF0YXR5cGUuVU5TSUdORURfU0hPUlRfNF80XzRfNDoKICAgICAgICAgIGNhc2UgUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9TSE9SVF81XzVfNV8xOgogICAgICAgICAgY2FzZSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX1NIT1JUXzVfNl81OgogICAgICAgICAgY2FzZSBQaXhlbERhdGF0eXBlLkhBTEZfRkxPQVQ6CiAgICAgICAgICAgIHJldHVybiAyOwogICAgICAgICAgY2FzZSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX0lOVDoKICAgICAgICAgIGNhc2UgUGl4ZWxEYXRhdHlwZS5GTE9BVDoKICAgICAgICAgIGNhc2UgUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9JTlRfMjRfODoKICAgICAgICAgICAgcmV0dXJuIDQ7CiAgICAgICAgfQogICAgICB9OwogICAgICBQaXhlbERhdGF0eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24ocGl4ZWxEYXRhdHlwZSkgewogICAgICAgIHJldHVybiBwaXhlbERhdGF0eXBlID09PSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX0JZVEUgfHwgcGl4ZWxEYXRhdHlwZSA9PT0gUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9TSE9SVCB8fCBwaXhlbERhdGF0eXBlID09PSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX0lOVCB8fCBwaXhlbERhdGF0eXBlID09PSBQaXhlbERhdGF0eXBlLkZMT0FUIHx8IHBpeGVsRGF0YXR5cGUgPT09IFBpeGVsRGF0YXR5cGUuSEFMRl9GTE9BVCB8fCBwaXhlbERhdGF0eXBlID09PSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX0lOVF8yNF84IHx8IHBpeGVsRGF0YXR5cGUgPT09IFBpeGVsRGF0YXR5cGUuVU5TSUdORURfU0hPUlRfNF80XzRfNCB8fCBwaXhlbERhdGF0eXBlID09PSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX1NIT1JUXzVfNV81XzEgfHwgcGl4ZWxEYXRhdHlwZSA9PT0gUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9TSE9SVF81XzZfNTsKICAgICAgfTsKICAgICAgUGl4ZWxEYXRhdHlwZV9kZWZhdWx0ID0gT2JqZWN0LmZyZWV6ZShQaXhlbERhdGF0eXBlKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BpeGVsRm9ybWF0LmpzCiAgdmFyIFBpeGVsRm9ybWF0LCBQaXhlbEZvcm1hdF9kZWZhdWx0OwogIHZhciBpbml0X1BpeGVsRm9ybWF0ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9QaXhlbEZvcm1hdC5qcyIoKSB7CiAgICAgIGluaXRfUGl4ZWxEYXRhdHlwZSgpOwogICAgICBpbml0X1dlYkdMQ29uc3RhbnRzKCk7CiAgICAgIFBpeGVsRm9ybWF0ID0gewogICAgICAgIC8qKgogICAgICAgICAqIEEgcGl4ZWwgZm9ybWF0IGNvbnRhaW5pbmcgYSBkZXB0aCB2YWx1ZS4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgREVQVEhfQ09NUE9ORU5UOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkRFUFRIX0NPTVBPTkVOVCwKICAgICAgICAvKioKICAgICAgICAgKiBBIHBpeGVsIGZvcm1hdCBjb250YWluaW5nIGEgZGVwdGggYW5kIHN0ZW5jaWwgdmFsdWUsIG1vc3Qgb2Z0ZW4gdXNlZCB3aXRoIHtAbGluayBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX0lOVF8yNF84fS4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgREVQVEhfU1RFTkNJTDogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5ERVBUSF9TVEVOQ0lMLAogICAgICAgIC8qKgogICAgICAgICAqIEEgcGl4ZWwgZm9ybWF0IGNvbnRhaW5pbmcgYW4gYWxwaGEgY2hhbm5lbC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgQUxQSEE6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuQUxQSEEsCiAgICAgICAgLyoqCiAgICAgICAgICogQSBwaXhlbCBmb3JtYXQgY29udGFpbmluZyBhIHJlZCBjaGFubmVsCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFJFRDogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5SRUQsCiAgICAgICAgLyoqCiAgICAgICAgICogQSBwaXhlbCBmb3JtYXQgY29udGFpbmluZyByZWQgYW5kIGdyZWVuIGNoYW5uZWxzLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBSRzogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5SRywKICAgICAgICAvKioKICAgICAgICAgKiBBIHBpeGVsIGZvcm1hdCBjb250YWluaW5nIHJlZCwgZ3JlZW4sIGFuZCBibHVlIGNoYW5uZWxzLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBSR0I6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuUkdCLAogICAgICAgIC8qKgogICAgICAgICAqIEEgcGl4ZWwgZm9ybWF0IGNvbnRhaW5pbmcgcmVkLCBncmVlbiwgYmx1ZSwgYW5kIGFscGhhIGNoYW5uZWxzLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBSR0JBOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlJHQkEsCiAgICAgICAgLyoqCiAgICAgICAgICogQSBwaXhlbCBmb3JtYXQgY29udGFpbmluZyBhIGx1bWluYW5jZSAoaW50ZW5zaXR5KSBjaGFubmVsLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBMVU1JTkFOQ0U6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuTFVNSU5BTkNFLAogICAgICAgIC8qKgogICAgICAgICAqIEEgcGl4ZWwgZm9ybWF0IGNvbnRhaW5pbmcgbHVtaW5hbmNlIChpbnRlbnNpdHkpIGFuZCBhbHBoYSBjaGFubmVscy4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgTFVNSU5BTkNFX0FMUEhBOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkxVTUlOQU5DRV9BTFBIQSwKICAgICAgICAvKioKICAgICAgICAgKiBBIHBpeGVsIGZvcm1hdCBjb250YWluaW5nIHJlZCwgZ3JlZW4sIGFuZCBibHVlIGNoYW5uZWxzIHRoYXQgaXMgRFhUMSBjb21wcmVzc2VkLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBSR0JfRFhUMTogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5DT01QUkVTU0VEX1JHQl9TM1RDX0RYVDFfRVhULAogICAgICAgIC8qKgogICAgICAgICAqIEEgcGl4ZWwgZm9ybWF0IGNvbnRhaW5pbmcgcmVkLCBncmVlbiwgYmx1ZSwgYW5kIGFscGhhIGNoYW5uZWxzIHRoYXQgaXMgRFhUMSBjb21wcmVzc2VkLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBSR0JBX0RYVDE6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQsCiAgICAgICAgLyoqCiAgICAgICAgICogQSBwaXhlbCBmb3JtYXQgY29udGFpbmluZyByZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMgdGhhdCBpcyBEWFQzIGNvbXByZXNzZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFJHQkFfRFhUMzogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVCwKICAgICAgICAvKioKICAgICAgICAgKiBBIHBpeGVsIGZvcm1hdCBjb250YWluaW5nIHJlZCwgZ3JlZW4sIGJsdWUsIGFuZCBhbHBoYSBjaGFubmVscyB0aGF0IGlzIERYVDUgY29tcHJlc3NlZC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgUkdCQV9EWFQ1OiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhULAogICAgICAgIC8qKgogICAgICAgICAqIEEgcGl4ZWwgZm9ybWF0IGNvbnRhaW5pbmcgcmVkLCBncmVlbiwgYW5kIGJsdWUgY2hhbm5lbHMgdGhhdCBpcyBQVlIgNGJwcCBjb21wcmVzc2VkLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBSR0JfUFZSVENfNEJQUFYxOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkNPTVBSRVNTRURfUkdCX1BWUlRDXzRCUFBWMV9JTUcsCiAgICAgICAgLyoqCiAgICAgICAgICogQSBwaXhlbCBmb3JtYXQgY29udGFpbmluZyByZWQsIGdyZWVuLCBhbmQgYmx1ZSBjaGFubmVscyB0aGF0IGlzIFBWUiAyYnBwIGNvbXByZXNzZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFJHQl9QVlJUQ18yQlBQVjE6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRywKICAgICAgICAvKioKICAgICAgICAgKiBBIHBpeGVsIGZvcm1hdCBjb250YWluaW5nIHJlZCwgZ3JlZW4sIGJsdWUsIGFuZCBhbHBoYSBjaGFubmVscyB0aGF0IGlzIFBWUiA0YnBwIGNvbXByZXNzZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFJHQkFfUFZSVENfNEJQUFYxOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkNPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HLAogICAgICAgIC8qKgogICAgICAgICAqIEEgcGl4ZWwgZm9ybWF0IGNvbnRhaW5pbmcgcmVkLCBncmVlbiwgYmx1ZSwgYW5kIGFscGhhIGNoYW5uZWxzIHRoYXQgaXMgUFZSIDJicHAgY29tcHJlc3NlZC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgUkdCQV9QVlJUQ18yQlBQVjE6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzJCUFBWMV9JTUcsCiAgICAgICAgLyoqCiAgICAgICAgICogQSBwaXhlbCBmb3JtYXQgY29udGFpbmluZyByZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMgdGhhdCBpcyBBU1RDIGNvbXByZXNzZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFJHQkFfQVNUQzogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5DT01QUkVTU0VEX1JHQkFfQVNUQ180eDRfV0VCR0wsCiAgICAgICAgLyoqCiAgICAgICAgICogQSBwaXhlbCBmb3JtYXQgY29udGFpbmluZyByZWQsIGdyZWVuLCBhbmQgYmx1ZSBjaGFubmVscyB0aGF0IGlzIEVUQzEgY29tcHJlc3NlZC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgUkdCX0VUQzE6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuQ09NUFJFU1NFRF9SR0JfRVRDMV9XRUJHTCwKICAgICAgICAvKioKICAgICAgICAgKiBBIHBpeGVsIGZvcm1hdCBjb250YWluaW5nIHJlZCwgZ3JlZW4sIGFuZCBibHVlIGNoYW5uZWxzIHRoYXQgaXMgRVRDMiBjb21wcmVzc2VkLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBSR0I4X0VUQzI6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuQ09NUFJFU1NFRF9SR0I4X0VUQzIsCiAgICAgICAgLyoqCiAgICAgICAgICogQSBwaXhlbCBmb3JtYXQgY29udGFpbmluZyByZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMgdGhhdCBpcyBFVEMyIGNvbXByZXNzZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFJHQkE4X0VUQzJfRUFDOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkNPTVBSRVNTRURfUkdCQThfRVRDMl9FQUMsCiAgICAgICAgLyoqCiAgICAgICAgICogQSBwaXhlbCBmb3JtYXQgY29udGFpbmluZyByZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMgdGhhdCBpcyBCQzcgY29tcHJlc3NlZC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgUkdCQV9CQzc6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuQ09NUFJFU1NFRF9SR0JBX0JQVENfVU5PUk0KICAgICAgfTsKICAgICAgUGl4ZWxGb3JtYXQuY29tcG9uZW50c0xlbmd0aCA9IGZ1bmN0aW9uKHBpeGVsRm9ybWF0KSB7CiAgICAgICAgc3dpdGNoIChwaXhlbEZvcm1hdCkgewogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SR0I6CiAgICAgICAgICAgIHJldHVybiAzOwogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SR0JBOgogICAgICAgICAgICByZXR1cm4gNDsKICAgICAgICAgIGNhc2UgUGl4ZWxGb3JtYXQuTFVNSU5BTkNFX0FMUEhBOgogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SRzoKICAgICAgICAgICAgcmV0dXJuIDI7CiAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LkFMUEhBOgogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SRUQ6CiAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LkxVTUlOQU5DRToKICAgICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIFBpeGVsRm9ybWF0LnZhbGlkYXRlID0gZnVuY3Rpb24ocGl4ZWxGb3JtYXQpIHsKICAgICAgICByZXR1cm4gcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LkRFUFRIX0NPTVBPTkVOVCB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuREVQVEhfU1RFTkNJTCB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuQUxQSEEgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJFRCB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkcgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQiB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQSB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuTFVNSU5BTkNFIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5MVU1JTkFOQ0VfQUxQSEEgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQl9EWFQxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JBX0RYVDEgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkFfRFhUMyB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQV9EWFQ1IHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JfUFZSVENfNEJQUFYxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JfUFZSVENfMkJQUFYxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JBX1BWUlRDXzRCUFBWMSB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQV9QVlJUQ18yQlBQVjEgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkFfQVNUQyB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCX0VUQzEgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQjhfRVRDMiB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQThfRVRDMl9FQUMgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkFfQkM3OwogICAgICB9OwogICAgICBQaXhlbEZvcm1hdC5pc0NvbG9yRm9ybWF0ID0gZnVuY3Rpb24ocGl4ZWxGb3JtYXQpIHsKICAgICAgICByZXR1cm4gcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LkFMUEhBIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0IgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkEgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LkxVTUlOQU5DRSB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuTFVNSU5BTkNFX0FMUEhBOwogICAgICB9OwogICAgICBQaXhlbEZvcm1hdC5pc0RlcHRoRm9ybWF0ID0gZnVuY3Rpb24ocGl4ZWxGb3JtYXQpIHsKICAgICAgICByZXR1cm4gcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LkRFUFRIX0NPTVBPTkVOVCB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuREVQVEhfU1RFTkNJTDsKICAgICAgfTsKICAgICAgUGl4ZWxGb3JtYXQuaXNDb21wcmVzc2VkRm9ybWF0ID0gZnVuY3Rpb24ocGl4ZWxGb3JtYXQpIHsKICAgICAgICByZXR1cm4gcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQl9EWFQxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JBX0RYVDEgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkFfRFhUMyB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQV9EWFQ1IHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JfUFZSVENfNEJQUFYxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JfUFZSVENfMkJQUFYxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JBX1BWUlRDXzRCUFBWMSB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQV9QVlJUQ18yQlBQVjEgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkFfQVNUQyB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCX0VUQzEgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQjhfRVRDMiB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQThfRVRDMl9FQUMgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkFfQkM3OwogICAgICB9OwogICAgICBQaXhlbEZvcm1hdC5pc0RYVEZvcm1hdCA9IGZ1bmN0aW9uKHBpeGVsRm9ybWF0KSB7CiAgICAgICAgcmV0dXJuIHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JfRFhUMSB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQV9EWFQxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JBX0RYVDMgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkFfRFhUNTsKICAgICAgfTsKICAgICAgUGl4ZWxGb3JtYXQuaXNQVlJUQ0Zvcm1hdCA9IGZ1bmN0aW9uKHBpeGVsRm9ybWF0KSB7CiAgICAgICAgcmV0dXJuIHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JfUFZSVENfNEJQUFYxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JfUFZSVENfMkJQUFYxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JBX1BWUlRDXzRCUFBWMSB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQV9QVlJUQ18yQlBQVjE7CiAgICAgIH07CiAgICAgIFBpeGVsRm9ybWF0LmlzQVNUQ0Zvcm1hdCA9IGZ1bmN0aW9uKHBpeGVsRm9ybWF0KSB7CiAgICAgICAgcmV0dXJuIHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JBX0FTVEM7CiAgICAgIH07CiAgICAgIFBpeGVsRm9ybWF0LmlzRVRDMUZvcm1hdCA9IGZ1bmN0aW9uKHBpeGVsRm9ybWF0KSB7CiAgICAgICAgcmV0dXJuIHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JfRVRDMTsKICAgICAgfTsKICAgICAgUGl4ZWxGb3JtYXQuaXNFVEMyRm9ybWF0ID0gZnVuY3Rpb24ocGl4ZWxGb3JtYXQpIHsKICAgICAgICByZXR1cm4gcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQjhfRVRDMiB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQThfRVRDMl9FQUM7CiAgICAgIH07CiAgICAgIFBpeGVsRm9ybWF0LmlzQkM3Rm9ybWF0ID0gZnVuY3Rpb24ocGl4ZWxGb3JtYXQpIHsKICAgICAgICByZXR1cm4gcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkFfQkM3OwogICAgICB9OwogICAgICBQaXhlbEZvcm1hdC5jb21wcmVzc2VkVGV4dHVyZVNpemVJbkJ5dGVzID0gZnVuY3Rpb24ocGl4ZWxGb3JtYXQsIHdpZHRoLCBoZWlnaHQpIHsKICAgICAgICBzd2l0Y2ggKHBpeGVsRm9ybWF0KSB7CiAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LlJHQl9EWFQxOgogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SR0JBX0RYVDE6CiAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LlJHQl9FVEMxOgogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SR0I4X0VUQzI6CiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKCh3aWR0aCArIDMpIC8gNCkgKiBNYXRoLmZsb29yKChoZWlnaHQgKyAzKSAvIDQpICogODsKICAgICAgICAgIGNhc2UgUGl4ZWxGb3JtYXQuUkdCQV9EWFQzOgogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SR0JBX0RYVDU6CiAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LlJHQkFfQVNUQzoKICAgICAgICAgIGNhc2UgUGl4ZWxGb3JtYXQuUkdCQThfRVRDMl9FQUM6CiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKCh3aWR0aCArIDMpIC8gNCkgKiBNYXRoLmZsb29yKChoZWlnaHQgKyAzKSAvIDQpICogMTY7CiAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LlJHQl9QVlJUQ180QlBQVjE6CiAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LlJHQkFfUFZSVENfNEJQUFYxOgogICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoTWF0aC5tYXgod2lkdGgsIDgpICogTWF0aC5tYXgoaGVpZ2h0LCA4KSAqIDQgKyA3KSAvIDgpOwogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SR0JfUFZSVENfMkJQUFYxOgogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SR0JBX1BWUlRDXzJCUFBWMToKICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoCiAgICAgICAgICAgICAgKE1hdGgubWF4KHdpZHRoLCAxNikgKiBNYXRoLm1heChoZWlnaHQsIDgpICogMiArIDcpIC8gOAogICAgICAgICAgICApOwogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SR0JBX0JDNzoKICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbCh3aWR0aCAvIDQpICogTWF0aC5jZWlsKGhlaWdodCAvIDQpICogMTY7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICAgIH07CiAgICAgIFBpeGVsRm9ybWF0LnRleHR1cmVTaXplSW5CeXRlcyA9IGZ1bmN0aW9uKHBpeGVsRm9ybWF0LCBwaXhlbERhdGF0eXBlLCB3aWR0aCwgaGVpZ2h0KSB7CiAgICAgICAgbGV0IGNvbXBvbmVudHNMZW5ndGggPSBQaXhlbEZvcm1hdC5jb21wb25lbnRzTGVuZ3RoKHBpeGVsRm9ybWF0KTsKICAgICAgICBpZiAoUGl4ZWxEYXRhdHlwZV9kZWZhdWx0LmlzUGFja2VkKHBpeGVsRGF0YXR5cGUpKSB7CiAgICAgICAgICBjb21wb25lbnRzTGVuZ3RoID0gMTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHNMZW5ndGggKiBQaXhlbERhdGF0eXBlX2RlZmF1bHQuc2l6ZUluQnl0ZXMocGl4ZWxEYXRhdHlwZSkgKiB3aWR0aCAqIGhlaWdodDsKICAgICAgfTsKICAgICAgUGl4ZWxGb3JtYXQuYWxpZ25tZW50SW5CeXRlcyA9IGZ1bmN0aW9uKHBpeGVsRm9ybWF0LCBwaXhlbERhdGF0eXBlLCB3aWR0aCkgewogICAgICAgIGNvbnN0IG1vZCA9IFBpeGVsRm9ybWF0LnRleHR1cmVTaXplSW5CeXRlcyhwaXhlbEZvcm1hdCwgcGl4ZWxEYXRhdHlwZSwgd2lkdGgsIDEpICUgNDsKICAgICAgICByZXR1cm4gbW9kID09PSAwID8gNCA6IG1vZCA9PT0gMiA/IDIgOiAxOwogICAgICB9OwogICAgICBQaXhlbEZvcm1hdC5jcmVhdGVUeXBlZEFycmF5ID0gZnVuY3Rpb24ocGl4ZWxGb3JtYXQsIHBpeGVsRGF0YXR5cGUsIHdpZHRoLCBoZWlnaHQpIHsKICAgICAgICBsZXQgY29uc3RydWN0b3I7CiAgICAgICAgY29uc3Qgc2l6ZUluQnl0ZXMgPSBQaXhlbERhdGF0eXBlX2RlZmF1bHQuc2l6ZUluQnl0ZXMocGl4ZWxEYXRhdHlwZSk7CiAgICAgICAgaWYgKHNpemVJbkJ5dGVzID09PSBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UKSB7CiAgICAgICAgICBjb25zdHJ1Y3RvciA9IFVpbnQ4QXJyYXk7CiAgICAgICAgfSBlbHNlIGlmIChzaXplSW5CeXRlcyA9PT0gVWludDE2QXJyYXkuQllURVNfUEVSX0VMRU1FTlQpIHsKICAgICAgICAgIGNvbnN0cnVjdG9yID0gVWludDE2QXJyYXk7CiAgICAgICAgfSBlbHNlIGlmIChzaXplSW5CeXRlcyA9PT0gRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UICYmIHBpeGVsRGF0YXR5cGUgPT09IFBpeGVsRGF0YXR5cGVfZGVmYXVsdC5GTE9BVCkgewogICAgICAgICAgY29uc3RydWN0b3IgPSBGbG9hdDMyQXJyYXk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnN0cnVjdG9yID0gVWludDMyQXJyYXk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHNpemUgPSBQaXhlbEZvcm1hdC5jb21wb25lbnRzTGVuZ3RoKHBpeGVsRm9ybWF0KSAqIHdpZHRoICogaGVpZ2h0OwogICAgICAgIHJldHVybiBuZXcgY29uc3RydWN0b3Ioc2l6ZSk7CiAgICAgIH07CiAgICAgIFBpeGVsRm9ybWF0LmZsaXBZID0gZnVuY3Rpb24oYnVmZmVyVmlldywgcGl4ZWxGb3JtYXQsIHBpeGVsRGF0YXR5cGUsIHdpZHRoLCBoZWlnaHQpIHsKICAgICAgICBpZiAoaGVpZ2h0ID09PSAxKSB7CiAgICAgICAgICByZXR1cm4gYnVmZmVyVmlldzsKICAgICAgICB9CiAgICAgICAgY29uc3QgZmxpcHBlZCA9IFBpeGVsRm9ybWF0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgICAgICBwaXhlbEZvcm1hdCwKICAgICAgICAgIHBpeGVsRGF0YXR5cGUsCiAgICAgICAgICB3aWR0aCwKICAgICAgICAgIGhlaWdodAogICAgICAgICk7CiAgICAgICAgY29uc3QgbnVtYmVyT2ZDb21wb25lbnRzID0gUGl4ZWxGb3JtYXQuY29tcG9uZW50c0xlbmd0aChwaXhlbEZvcm1hdCk7CiAgICAgICAgY29uc3QgdGV4dHVyZVdpZHRoID0gd2lkdGggKiBudW1iZXJPZkNvbXBvbmVudHM7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWlnaHQ7ICsraSkgewogICAgICAgICAgY29uc3Qgcm93ID0gaSAqIHdpZHRoICogbnVtYmVyT2ZDb21wb25lbnRzOwogICAgICAgICAgY29uc3QgZmxpcHBlZFJvdyA9IChoZWlnaHQgLSBpIC0gMSkgKiB3aWR0aCAqIG51bWJlck9mQ29tcG9uZW50czsKICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGV4dHVyZVdpZHRoOyArK2opIHsKICAgICAgICAgICAgZmxpcHBlZFtmbGlwcGVkUm93ICsgal0gPSBidWZmZXJWaWV3W3JvdyArIGpdOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZmxpcHBlZDsKICAgICAgfTsKICAgICAgUGl4ZWxGb3JtYXQudG9JbnRlcm5hbEZvcm1hdCA9IGZ1bmN0aW9uKHBpeGVsRm9ybWF0LCBwaXhlbERhdGF0eXBlLCBjb250ZXh0KSB7CiAgICAgICAgaWYgKCFjb250ZXh0LndlYmdsMikgewogICAgICAgICAgcmV0dXJuIHBpeGVsRm9ybWF0OwogICAgICAgIH0KICAgICAgICBpZiAocGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LkRFUFRIX1NURU5DSUwpIHsKICAgICAgICAgIHJldHVybiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkRFUFRIMjRfU1RFTkNJTDg7CiAgICAgICAgfQogICAgICAgIGlmIChwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuREVQVEhfQ09NUE9ORU5UKSB7CiAgICAgICAgICBpZiAocGl4ZWxEYXRhdHlwZSA9PT0gUGl4ZWxEYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX1NIT1JUKSB7CiAgICAgICAgICAgIHJldHVybiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkRFUFRIX0NPTVBPTkVOVDE2OwogICAgICAgICAgfSBlbHNlIGlmIChwaXhlbERhdGF0eXBlID09PSBQaXhlbERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfSU5UKSB7CiAgICAgICAgICAgIHJldHVybiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkRFUFRIX0NPTVBPTkVOVDI0OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAocGl4ZWxEYXRhdHlwZSA9PT0gUGl4ZWxEYXRhdHlwZV9kZWZhdWx0LkZMT0FUKSB7CiAgICAgICAgICBzd2l0Y2ggKHBpeGVsRm9ybWF0KSB7CiAgICAgICAgICAgIGNhc2UgUGl4ZWxGb3JtYXQuUkdCQToKICAgICAgICAgICAgICByZXR1cm4gV2ViR0xDb25zdGFudHNfZGVmYXVsdC5SR0JBMzJGOwogICAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LlJHQjoKICAgICAgICAgICAgICByZXR1cm4gV2ViR0xDb25zdGFudHNfZGVmYXVsdC5SR0IzMkY7CiAgICAgICAgICAgIGNhc2UgUGl4ZWxGb3JtYXQuUkc6CiAgICAgICAgICAgICAgcmV0dXJuIFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuUkczMkY7CiAgICAgICAgICAgIGNhc2UgUGl4ZWxGb3JtYXQuUkVEOgogICAgICAgICAgICAgIHJldHVybiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlIzMkY7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChwaXhlbERhdGF0eXBlID09PSBQaXhlbERhdGF0eXBlX2RlZmF1bHQuSEFMRl9GTE9BVCkgewogICAgICAgICAgc3dpdGNoIChwaXhlbEZvcm1hdCkgewogICAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LlJHQkE6CiAgICAgICAgICAgICAgcmV0dXJuIFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuUkdCQTE2RjsKICAgICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SR0I6CiAgICAgICAgICAgICAgcmV0dXJuIFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuUkdCMTZGOwogICAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LlJHOgogICAgICAgICAgICAgIHJldHVybiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlJHMTZGOwogICAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LlJFRDoKICAgICAgICAgICAgICByZXR1cm4gV2ViR0xDb25zdGFudHNfZGVmYXVsdC5SMTZGOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcGl4ZWxGb3JtYXQ7CiAgICAgIH07CiAgICAgIFBpeGVsRm9ybWF0X2RlZmF1bHQgPSBPYmplY3QuZnJlZXplKFBpeGVsRm9ybWF0KTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1Z1bGthbkNvbnN0YW50cy5qcwogIHZhciBWdWxrYW5Db25zdGFudHMsIFZ1bGthbkNvbnN0YW50c19kZWZhdWx0OwogIHZhciBpbml0X1Z1bGthbkNvbnN0YW50cyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVnVsa2FuQ29uc3RhbnRzLmpzIigpIHsKICAgICAgVnVsa2FuQ29uc3RhbnRzID0gewogICAgICAgIFZLX0ZPUk1BVF9VTkRFRklORUQ6IDAsCiAgICAgICAgVktfRk9STUFUX1I0RzRfVU5PUk1fUEFDSzg6IDEsCiAgICAgICAgVktfRk9STUFUX1I0RzRCNEE0X1VOT1JNX1BBQ0sxNjogMiwKICAgICAgICBWS19GT1JNQVRfQjRHNFI0QTRfVU5PUk1fUEFDSzE2OiAzLAogICAgICAgIFZLX0ZPUk1BVF9SNUc2QjVfVU5PUk1fUEFDSzE2OiA0LAogICAgICAgIFZLX0ZPUk1BVF9CNUc2UjVfVU5PUk1fUEFDSzE2OiA1LAogICAgICAgIFZLX0ZPUk1BVF9SNUc1QjVBMV9VTk9STV9QQUNLMTY6IDYsCiAgICAgICAgVktfRk9STUFUX0I1RzVSNUExX1VOT1JNX1BBQ0sxNjogNywKICAgICAgICBWS19GT1JNQVRfQTFSNUc1QjVfVU5PUk1fUEFDSzE2OiA4LAogICAgICAgIFZLX0ZPUk1BVF9SOF9VTk9STTogOSwKICAgICAgICBWS19GT1JNQVRfUjhfU05PUk06IDEwLAogICAgICAgIFZLX0ZPUk1BVF9SOF9VU0NBTEVEOiAxMSwKICAgICAgICBWS19GT1JNQVRfUjhfU1NDQUxFRDogMTIsCiAgICAgICAgVktfRk9STUFUX1I4X1VJTlQ6IDEzLAogICAgICAgIFZLX0ZPUk1BVF9SOF9TSU5UOiAxNCwKICAgICAgICBWS19GT1JNQVRfUjhfU1JHQjogMTUsCiAgICAgICAgVktfRk9STUFUX1I4RzhfVU5PUk06IDE2LAogICAgICAgIFZLX0ZPUk1BVF9SOEc4X1NOT1JNOiAxNywKICAgICAgICBWS19GT1JNQVRfUjhHOF9VU0NBTEVEOiAxOCwKICAgICAgICBWS19GT1JNQVRfUjhHOF9TU0NBTEVEOiAxOSwKICAgICAgICBWS19GT1JNQVRfUjhHOF9VSU5UOiAyMCwKICAgICAgICBWS19GT1JNQVRfUjhHOF9TSU5UOiAyMSwKICAgICAgICBWS19GT1JNQVRfUjhHOF9TUkdCOiAyMiwKICAgICAgICBWS19GT1JNQVRfUjhHOEI4X1VOT1JNOiAyMywKICAgICAgICBWS19GT1JNQVRfUjhHOEI4X1NOT1JNOiAyNCwKICAgICAgICBWS19GT1JNQVRfUjhHOEI4X1VTQ0FMRUQ6IDI1LAogICAgICAgIFZLX0ZPUk1BVF9SOEc4QjhfU1NDQUxFRDogMjYsCiAgICAgICAgVktfRk9STUFUX1I4RzhCOF9VSU5UOiAyNywKICAgICAgICBWS19GT1JNQVRfUjhHOEI4X1NJTlQ6IDI4LAogICAgICAgIFZLX0ZPUk1BVF9SOEc4QjhfU1JHQjogMjksCiAgICAgICAgVktfRk9STUFUX0I4RzhSOF9VTk9STTogMzAsCiAgICAgICAgVktfRk9STUFUX0I4RzhSOF9TTk9STTogMzEsCiAgICAgICAgVktfRk9STUFUX0I4RzhSOF9VU0NBTEVEOiAzMiwKICAgICAgICBWS19GT1JNQVRfQjhHOFI4X1NTQ0FMRUQ6IDMzLAogICAgICAgIFZLX0ZPUk1BVF9COEc4UjhfVUlOVDogMzQsCiAgICAgICAgVktfRk9STUFUX0I4RzhSOF9TSU5UOiAzNSwKICAgICAgICBWS19GT1JNQVRfQjhHOFI4X1NSR0I6IDM2LAogICAgICAgIFZLX0ZPUk1BVF9SOEc4QjhBOF9VTk9STTogMzcsCiAgICAgICAgVktfRk9STUFUX1I4RzhCOEE4X1NOT1JNOiAzOCwKICAgICAgICBWS19GT1JNQVRfUjhHOEI4QThfVVNDQUxFRDogMzksCiAgICAgICAgVktfRk9STUFUX1I4RzhCOEE4X1NTQ0FMRUQ6IDQwLAogICAgICAgIFZLX0ZPUk1BVF9SOEc4QjhBOF9VSU5UOiA0MSwKICAgICAgICBWS19GT1JNQVRfUjhHOEI4QThfU0lOVDogNDIsCiAgICAgICAgVktfRk9STUFUX1I4RzhCOEE4X1NSR0I6IDQzLAogICAgICAgIFZLX0ZPUk1BVF9COEc4UjhBOF9VTk9STTogNDQsCiAgICAgICAgVktfRk9STUFUX0I4RzhSOEE4X1NOT1JNOiA0NSwKICAgICAgICBWS19GT1JNQVRfQjhHOFI4QThfVVNDQUxFRDogNDYsCiAgICAgICAgVktfRk9STUFUX0I4RzhSOEE4X1NTQ0FMRUQ6IDQ3LAogICAgICAgIFZLX0ZPUk1BVF9COEc4UjhBOF9VSU5UOiA0OCwKICAgICAgICBWS19GT1JNQVRfQjhHOFI4QThfU0lOVDogNDksCiAgICAgICAgVktfRk9STUFUX0I4RzhSOEE4X1NSR0I6IDUwLAogICAgICAgIFZLX0ZPUk1BVF9BOEI4RzhSOF9VTk9STV9QQUNLMzI6IDUxLAogICAgICAgIFZLX0ZPUk1BVF9BOEI4RzhSOF9TTk9STV9QQUNLMzI6IDUyLAogICAgICAgIFZLX0ZPUk1BVF9BOEI4RzhSOF9VU0NBTEVEX1BBQ0szMjogNTMsCiAgICAgICAgVktfRk9STUFUX0E4QjhHOFI4X1NTQ0FMRURfUEFDSzMyOiA1NCwKICAgICAgICBWS19GT1JNQVRfQThCOEc4UjhfVUlOVF9QQUNLMzI6IDU1LAogICAgICAgIFZLX0ZPUk1BVF9BOEI4RzhSOF9TSU5UX1BBQ0szMjogNTYsCiAgICAgICAgVktfRk9STUFUX0E4QjhHOFI4X1NSR0JfUEFDSzMyOiA1NywKICAgICAgICBWS19GT1JNQVRfQTJSMTBHMTBCMTBfVU5PUk1fUEFDSzMyOiA1OCwKICAgICAgICBWS19GT1JNQVRfQTJSMTBHMTBCMTBfU05PUk1fUEFDSzMyOiA1OSwKICAgICAgICBWS19GT1JNQVRfQTJSMTBHMTBCMTBfVVNDQUxFRF9QQUNLMzI6IDYwLAogICAgICAgIFZLX0ZPUk1BVF9BMlIxMEcxMEIxMF9TU0NBTEVEX1BBQ0szMjogNjEsCiAgICAgICAgVktfRk9STUFUX0EyUjEwRzEwQjEwX1VJTlRfUEFDSzMyOiA2MiwKICAgICAgICBWS19GT1JNQVRfQTJSMTBHMTBCMTBfU0lOVF9QQUNLMzI6IDYzLAogICAgICAgIFZLX0ZPUk1BVF9BMkIxMEcxMFIxMF9VTk9STV9QQUNLMzI6IDY0LAogICAgICAgIFZLX0ZPUk1BVF9BMkIxMEcxMFIxMF9TTk9STV9QQUNLMzI6IDY1LAogICAgICAgIFZLX0ZPUk1BVF9BMkIxMEcxMFIxMF9VU0NBTEVEX1BBQ0szMjogNjYsCiAgICAgICAgVktfRk9STUFUX0EyQjEwRzEwUjEwX1NTQ0FMRURfUEFDSzMyOiA2NywKICAgICAgICBWS19GT1JNQVRfQTJCMTBHMTBSMTBfVUlOVF9QQUNLMzI6IDY4LAogICAgICAgIFZLX0ZPUk1BVF9BMkIxMEcxMFIxMF9TSU5UX1BBQ0szMjogNjksCiAgICAgICAgVktfRk9STUFUX1IxNl9VTk9STTogNzAsCiAgICAgICAgVktfRk9STUFUX1IxNl9TTk9STTogNzEsCiAgICAgICAgVktfRk9STUFUX1IxNl9VU0NBTEVEOiA3MiwKICAgICAgICBWS19GT1JNQVRfUjE2X1NTQ0FMRUQ6IDczLAogICAgICAgIFZLX0ZPUk1BVF9SMTZfVUlOVDogNzQsCiAgICAgICAgVktfRk9STUFUX1IxNl9TSU5UOiA3NSwKICAgICAgICBWS19GT1JNQVRfUjE2X1NGTE9BVDogNzYsCiAgICAgICAgVktfRk9STUFUX1IxNkcxNl9VTk9STTogNzcsCiAgICAgICAgVktfRk9STUFUX1IxNkcxNl9TTk9STTogNzgsCiAgICAgICAgVktfRk9STUFUX1IxNkcxNl9VU0NBTEVEOiA3OSwKICAgICAgICBWS19GT1JNQVRfUjE2RzE2X1NTQ0FMRUQ6IDgwLAogICAgICAgIFZLX0ZPUk1BVF9SMTZHMTZfVUlOVDogODEsCiAgICAgICAgVktfRk9STUFUX1IxNkcxNl9TSU5UOiA4MiwKICAgICAgICBWS19GT1JNQVRfUjE2RzE2X1NGTE9BVDogODMsCiAgICAgICAgVktfRk9STUFUX1IxNkcxNkIxNl9VTk9STTogODQsCiAgICAgICAgVktfRk9STUFUX1IxNkcxNkIxNl9TTk9STTogODUsCiAgICAgICAgVktfRk9STUFUX1IxNkcxNkIxNl9VU0NBTEVEOiA4NiwKICAgICAgICBWS19GT1JNQVRfUjE2RzE2QjE2X1NTQ0FMRUQ6IDg3LAogICAgICAgIFZLX0ZPUk1BVF9SMTZHMTZCMTZfVUlOVDogODgsCiAgICAgICAgVktfRk9STUFUX1IxNkcxNkIxNl9TSU5UOiA4OSwKICAgICAgICBWS19GT1JNQVRfUjE2RzE2QjE2X1NGTE9BVDogOTAsCiAgICAgICAgVktfRk9STUFUX1IxNkcxNkIxNkExNl9VTk9STTogOTEsCiAgICAgICAgVktfRk9STUFUX1IxNkcxNkIxNkExNl9TTk9STTogOTIsCiAgICAgICAgVktfRk9STUFUX1IxNkcxNkIxNkExNl9VU0NBTEVEOiA5MywKICAgICAgICBWS19GT1JNQVRfUjE2RzE2QjE2QTE2X1NTQ0FMRUQ6IDk0LAogICAgICAgIFZLX0ZPUk1BVF9SMTZHMTZCMTZBMTZfVUlOVDogOTUsCiAgICAgICAgVktfRk9STUFUX1IxNkcxNkIxNkExNl9TSU5UOiA5NiwKICAgICAgICBWS19GT1JNQVRfUjE2RzE2QjE2QTE2X1NGTE9BVDogOTcsCiAgICAgICAgVktfRk9STUFUX1IzMl9VSU5UOiA5OCwKICAgICAgICBWS19GT1JNQVRfUjMyX1NJTlQ6IDk5LAogICAgICAgIFZLX0ZPUk1BVF9SMzJfU0ZMT0FUOiAxMDAsCiAgICAgICAgVktfRk9STUFUX1IzMkczMl9VSU5UOiAxMDEsCiAgICAgICAgVktfRk9STUFUX1IzMkczMl9TSU5UOiAxMDIsCiAgICAgICAgVktfRk9STUFUX1IzMkczMl9TRkxPQVQ6IDEwMywKICAgICAgICBWS19GT1JNQVRfUjMyRzMyQjMyX1VJTlQ6IDEwNCwKICAgICAgICBWS19GT1JNQVRfUjMyRzMyQjMyX1NJTlQ6IDEwNSwKICAgICAgICBWS19GT1JNQVRfUjMyRzMyQjMyX1NGTE9BVDogMTA2LAogICAgICAgIFZLX0ZPUk1BVF9SMzJHMzJCMzJBMzJfVUlOVDogMTA3LAogICAgICAgIFZLX0ZPUk1BVF9SMzJHMzJCMzJBMzJfU0lOVDogMTA4LAogICAgICAgIFZLX0ZPUk1BVF9SMzJHMzJCMzJBMzJfU0ZMT0FUOiAxMDksCiAgICAgICAgVktfRk9STUFUX1I2NF9VSU5UOiAxMTAsCiAgICAgICAgVktfRk9STUFUX1I2NF9TSU5UOiAxMTEsCiAgICAgICAgVktfRk9STUFUX1I2NF9TRkxPQVQ6IDExMiwKICAgICAgICBWS19GT1JNQVRfUjY0RzY0X1VJTlQ6IDExMywKICAgICAgICBWS19GT1JNQVRfUjY0RzY0X1NJTlQ6IDExNCwKICAgICAgICBWS19GT1JNQVRfUjY0RzY0X1NGTE9BVDogMTE1LAogICAgICAgIFZLX0ZPUk1BVF9SNjRHNjRCNjRfVUlOVDogMTE2LAogICAgICAgIFZLX0ZPUk1BVF9SNjRHNjRCNjRfU0lOVDogMTE3LAogICAgICAgIFZLX0ZPUk1BVF9SNjRHNjRCNjRfU0ZMT0FUOiAxMTgsCiAgICAgICAgVktfRk9STUFUX1I2NEc2NEI2NEE2NF9VSU5UOiAxMTksCiAgICAgICAgVktfRk9STUFUX1I2NEc2NEI2NEE2NF9TSU5UOiAxMjAsCiAgICAgICAgVktfRk9STUFUX1I2NEc2NEI2NEE2NF9TRkxPQVQ6IDEyMSwKICAgICAgICBWS19GT1JNQVRfQjEwRzExUjExX1VGTE9BVF9QQUNLMzI6IDEyMiwKICAgICAgICBWS19GT1JNQVRfRTVCOUc5UjlfVUZMT0FUX1BBQ0szMjogMTIzLAogICAgICAgIFZLX0ZPUk1BVF9EMTZfVU5PUk06IDEyNCwKICAgICAgICBWS19GT1JNQVRfWDhfRDI0X1VOT1JNX1BBQ0szMjogMTI1LAogICAgICAgIFZLX0ZPUk1BVF9EMzJfU0ZMT0FUOiAxMjYsCiAgICAgICAgVktfRk9STUFUX1M4X1VJTlQ6IDEyNywKICAgICAgICBWS19GT1JNQVRfRDE2X1VOT1JNX1M4X1VJTlQ6IDEyOCwKICAgICAgICBWS19GT1JNQVRfRDI0X1VOT1JNX1M4X1VJTlQ6IDEyOSwKICAgICAgICBWS19GT1JNQVRfRDMyX1NGTE9BVF9TOF9VSU5UOiAxMzAsCiAgICAgICAgVktfRk9STUFUX0JDMV9SR0JfVU5PUk1fQkxPQ0s6IDEzMSwKICAgICAgICBWS19GT1JNQVRfQkMxX1JHQl9TUkdCX0JMT0NLOiAxMzIsCiAgICAgICAgVktfRk9STUFUX0JDMV9SR0JBX1VOT1JNX0JMT0NLOiAxMzMsCiAgICAgICAgVktfRk9STUFUX0JDMV9SR0JBX1NSR0JfQkxPQ0s6IDEzNCwKICAgICAgICBWS19GT1JNQVRfQkMyX1VOT1JNX0JMT0NLOiAxMzUsCiAgICAgICAgVktfRk9STUFUX0JDMl9TUkdCX0JMT0NLOiAxMzYsCiAgICAgICAgVktfRk9STUFUX0JDM19VTk9STV9CTE9DSzogMTM3LAogICAgICAgIFZLX0ZPUk1BVF9CQzNfU1JHQl9CTE9DSzogMTM4LAogICAgICAgIFZLX0ZPUk1BVF9CQzRfVU5PUk1fQkxPQ0s6IDEzOSwKICAgICAgICBWS19GT1JNQVRfQkM0X1NOT1JNX0JMT0NLOiAxNDAsCiAgICAgICAgVktfRk9STUFUX0JDNV9VTk9STV9CTE9DSzogMTQxLAogICAgICAgIFZLX0ZPUk1BVF9CQzVfU05PUk1fQkxPQ0s6IDE0MiwKICAgICAgICBWS19GT1JNQVRfQkM2SF9VRkxPQVRfQkxPQ0s6IDE0MywKICAgICAgICBWS19GT1JNQVRfQkM2SF9TRkxPQVRfQkxPQ0s6IDE0NCwKICAgICAgICBWS19GT1JNQVRfQkM3X1VOT1JNX0JMT0NLOiAxNDUsCiAgICAgICAgVktfRk9STUFUX0JDN19TUkdCX0JMT0NLOiAxNDYsCiAgICAgICAgVktfRk9STUFUX0VUQzJfUjhHOEI4X1VOT1JNX0JMT0NLOiAxNDcsCiAgICAgICAgVktfRk9STUFUX0VUQzJfUjhHOEI4X1NSR0JfQkxPQ0s6IDE0OCwKICAgICAgICBWS19GT1JNQVRfRVRDMl9SOEc4QjhBMV9VTk9STV9CTE9DSzogMTQ5LAogICAgICAgIFZLX0ZPUk1BVF9FVEMyX1I4RzhCOEExX1NSR0JfQkxPQ0s6IDE1MCwKICAgICAgICBWS19GT1JNQVRfRVRDMl9SOEc4QjhBOF9VTk9STV9CTE9DSzogMTUxLAogICAgICAgIFZLX0ZPUk1BVF9FVEMyX1I4RzhCOEE4X1NSR0JfQkxPQ0s6IDE1MiwKICAgICAgICBWS19GT1JNQVRfRUFDX1IxMV9VTk9STV9CTE9DSzogMTUzLAogICAgICAgIFZLX0ZPUk1BVF9FQUNfUjExX1NOT1JNX0JMT0NLOiAxNTQsCiAgICAgICAgVktfRk9STUFUX0VBQ19SMTFHMTFfVU5PUk1fQkxPQ0s6IDE1NSwKICAgICAgICBWS19GT1JNQVRfRUFDX1IxMUcxMV9TTk9STV9CTE9DSzogMTU2LAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzR4NF9VTk9STV9CTE9DSzogMTU3LAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzR4NF9TUkdCX0JMT0NLOiAxNTgsCiAgICAgICAgVktfRk9STUFUX0FTVENfNXg0X1VOT1JNX0JMT0NLOiAxNTksCiAgICAgICAgVktfRk9STUFUX0FTVENfNXg0X1NSR0JfQkxPQ0s6IDE2MCwKICAgICAgICBWS19GT1JNQVRfQVNUQ181eDVfVU5PUk1fQkxPQ0s6IDE2MSwKICAgICAgICBWS19GT1JNQVRfQVNUQ181eDVfU1JHQl9CTE9DSzogMTYyLAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzZ4NV9VTk9STV9CTE9DSzogMTYzLAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzZ4NV9TUkdCX0JMT0NLOiAxNjQsCiAgICAgICAgVktfRk9STUFUX0FTVENfNng2X1VOT1JNX0JMT0NLOiAxNjUsCiAgICAgICAgVktfRk9STUFUX0FTVENfNng2X1NSR0JfQkxPQ0s6IDE2NiwKICAgICAgICBWS19GT1JNQVRfQVNUQ184eDVfVU5PUk1fQkxPQ0s6IDE2NywKICAgICAgICBWS19GT1JNQVRfQVNUQ184eDVfU1JHQl9CTE9DSzogMTY4LAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzh4Nl9VTk9STV9CTE9DSzogMTY5LAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzh4Nl9TUkdCX0JMT0NLOiAxNzAsCiAgICAgICAgVktfRk9STUFUX0FTVENfOHg4X1VOT1JNX0JMT0NLOiAxNzEsCiAgICAgICAgVktfRk9STUFUX0FTVENfOHg4X1NSR0JfQkxPQ0s6IDE3MiwKICAgICAgICBWS19GT1JNQVRfQVNUQ18xMHg1X1VOT1JNX0JMT0NLOiAxNzMsCiAgICAgICAgVktfRk9STUFUX0FTVENfMTB4NV9TUkdCX0JMT0NLOiAxNzQsCiAgICAgICAgVktfRk9STUFUX0FTVENfMTB4Nl9VTk9STV9CTE9DSzogMTc1LAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzEweDZfU1JHQl9CTE9DSzogMTc2LAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzEweDhfVU5PUk1fQkxPQ0s6IDE3NywKICAgICAgICBWS19GT1JNQVRfQVNUQ18xMHg4X1NSR0JfQkxPQ0s6IDE3OCwKICAgICAgICBWS19GT1JNQVRfQVNUQ18xMHgxMF9VTk9STV9CTE9DSzogMTc5LAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzEweDEwX1NSR0JfQkxPQ0s6IDE4MCwKICAgICAgICBWS19GT1JNQVRfQVNUQ18xMngxMF9VTk9STV9CTE9DSzogMTgxLAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzEyeDEwX1NSR0JfQkxPQ0s6IDE4MiwKICAgICAgICBWS19GT1JNQVRfQVNUQ18xMngxMl9VTk9STV9CTE9DSzogMTgzLAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzEyeDEyX1NSR0JfQkxPQ0s6IDE4NCwKICAgICAgICBWS19GT1JNQVRfRzhCOEc4UjhfNDIyX1VOT1JNOiAxMDAwMTU2ZTMsCiAgICAgICAgVktfRk9STUFUX0I4RzhSOEc4XzQyMl9VTk9STTogMTAwMDE1NjAwMSwKICAgICAgICBWS19GT1JNQVRfRzhfQjhfUjhfM1BMQU5FXzQyMF9VTk9STTogMTAwMDE1NjAwMiwKICAgICAgICBWS19GT1JNQVRfRzhfQjhSOF8yUExBTkVfNDIwX1VOT1JNOiAxMDAwMTU2MDAzLAogICAgICAgIFZLX0ZPUk1BVF9HOF9COF9SOF8zUExBTkVfNDIyX1VOT1JNOiAxMDAwMTU2MDA0LAogICAgICAgIFZLX0ZPUk1BVF9HOF9COFI4XzJQTEFORV80MjJfVU5PUk06IDEwMDAxNTYwMDUsCiAgICAgICAgVktfRk9STUFUX0c4X0I4X1I4XzNQTEFORV80NDRfVU5PUk06IDEwMDAxNTYwMDYsCiAgICAgICAgVktfRk9STUFUX1IxMFg2X1VOT1JNX1BBQ0sxNjogMTAwMDE1NjAwNywKICAgICAgICBWS19GT1JNQVRfUjEwWDZHMTBYNl9VTk9STV8yUEFDSzE2OiAxMDAwMTU2MDA4LAogICAgICAgIFZLX0ZPUk1BVF9SMTBYNkcxMFg2QjEwWDZBMTBYNl9VTk9STV80UEFDSzE2OiAxMDAwMTU2MDA5LAogICAgICAgIFZLX0ZPUk1BVF9HMTBYNkIxMFg2RzEwWDZSMTBYNl80MjJfVU5PUk1fNFBBQ0sxNjogMTAwMDE1NjAxMCwKICAgICAgICBWS19GT1JNQVRfQjEwWDZHMTBYNlIxMFg2RzEwWDZfNDIyX1VOT1JNXzRQQUNLMTY6IDEwMDAxNTYwMTEsCiAgICAgICAgVktfRk9STUFUX0cxMFg2X0IxMFg2X1IxMFg2XzNQTEFORV80MjBfVU5PUk1fM1BBQ0sxNjogMTAwMDE1NjAxMiwKICAgICAgICBWS19GT1JNQVRfRzEwWDZfQjEwWDZSMTBYNl8yUExBTkVfNDIwX1VOT1JNXzNQQUNLMTY6IDEwMDAxNTYwMTMsCiAgICAgICAgVktfRk9STUFUX0cxMFg2X0IxMFg2X1IxMFg2XzNQTEFORV80MjJfVU5PUk1fM1BBQ0sxNjogMTAwMDE1NjAxNCwKICAgICAgICBWS19GT1JNQVRfRzEwWDZfQjEwWDZSMTBYNl8yUExBTkVfNDIyX1VOT1JNXzNQQUNLMTY6IDEwMDAxNTYwMTUsCiAgICAgICAgVktfRk9STUFUX0cxMFg2X0IxMFg2X1IxMFg2XzNQTEFORV80NDRfVU5PUk1fM1BBQ0sxNjogMTAwMDE1NjAxNiwKICAgICAgICBWS19GT1JNQVRfUjEyWDRfVU5PUk1fUEFDSzE2OiAxMDAwMTU2MDE3LAogICAgICAgIFZLX0ZPUk1BVF9SMTJYNEcxMlg0X1VOT1JNXzJQQUNLMTY6IDEwMDAxNTYwMTgsCiAgICAgICAgVktfRk9STUFUX1IxMlg0RzEyWDRCMTJYNEExMlg0X1VOT1JNXzRQQUNLMTY6IDEwMDAxNTYwMTksCiAgICAgICAgVktfRk9STUFUX0cxMlg0QjEyWDRHMTJYNFIxMlg0XzQyMl9VTk9STV80UEFDSzE2OiAxMDAwMTU2MDIwLAogICAgICAgIFZLX0ZPUk1BVF9CMTJYNEcxMlg0UjEyWDRHMTJYNF80MjJfVU5PUk1fNFBBQ0sxNjogMTAwMDE1NjAyMSwKICAgICAgICBWS19GT1JNQVRfRzEyWDRfQjEyWDRfUjEyWDRfM1BMQU5FXzQyMF9VTk9STV8zUEFDSzE2OiAxMDAwMTU2MDIyLAogICAgICAgIFZLX0ZPUk1BVF9HMTJYNF9CMTJYNFIxMlg0XzJQTEFORV80MjBfVU5PUk1fM1BBQ0sxNjogMTAwMDE1NjAyMywKICAgICAgICBWS19GT1JNQVRfRzEyWDRfQjEyWDRfUjEyWDRfM1BMQU5FXzQyMl9VTk9STV8zUEFDSzE2OiAxMDAwMTU2MDI0LAogICAgICAgIFZLX0ZPUk1BVF9HMTJYNF9CMTJYNFIxMlg0XzJQTEFORV80MjJfVU5PUk1fM1BBQ0sxNjogMTAwMDE1NjAyNSwKICAgICAgICBWS19GT1JNQVRfRzEyWDRfQjEyWDRfUjEyWDRfM1BMQU5FXzQ0NF9VTk9STV8zUEFDSzE2OiAxMDAwMTU2MDI2LAogICAgICAgIFZLX0ZPUk1BVF9HMTZCMTZHMTZSMTZfNDIyX1VOT1JNOiAxMDAwMTU2MDI3LAogICAgICAgIFZLX0ZPUk1BVF9CMTZHMTZSMTZHMTZfNDIyX1VOT1JNOiAxMDAwMTU2MDI4LAogICAgICAgIFZLX0ZPUk1BVF9HMTZfQjE2X1IxNl8zUExBTkVfNDIwX1VOT1JNOiAxMDAwMTU2MDI5LAogICAgICAgIFZLX0ZPUk1BVF9HMTZfQjE2UjE2XzJQTEFORV80MjBfVU5PUk06IDEwMDAxNTYwMzAsCiAgICAgICAgVktfRk9STUFUX0cxNl9CMTZfUjE2XzNQTEFORV80MjJfVU5PUk06IDEwMDAxNTYwMzEsCiAgICAgICAgVktfRk9STUFUX0cxNl9CMTZSMTZfMlBMQU5FXzQyMl9VTk9STTogMTAwMDE1NjAzMiwKICAgICAgICBWS19GT1JNQVRfRzE2X0IxNl9SMTZfM1BMQU5FXzQ0NF9VTk9STTogMTAwMDE1NjAzMywKICAgICAgICBWS19GT1JNQVRfUFZSVEMxXzJCUFBfVU5PUk1fQkxPQ0tfSU1HOiAxMDAwMDU0ZTMsCiAgICAgICAgVktfRk9STUFUX1BWUlRDMV80QlBQX1VOT1JNX0JMT0NLX0lNRzogMTAwMDA1NDAwMSwKICAgICAgICBWS19GT1JNQVRfUFZSVEMyXzJCUFBfVU5PUk1fQkxPQ0tfSU1HOiAxMDAwMDU0MDAyLAogICAgICAgIFZLX0ZPUk1BVF9QVlJUQzJfNEJQUF9VTk9STV9CTE9DS19JTUc6IDEwMDAwNTQwMDMsCiAgICAgICAgVktfRk9STUFUX1BWUlRDMV8yQlBQX1NSR0JfQkxPQ0tfSU1HOiAxMDAwMDU0MDA0LAogICAgICAgIFZLX0ZPUk1BVF9QVlJUQzFfNEJQUF9TUkdCX0JMT0NLX0lNRzogMTAwMDA1NDAwNSwKICAgICAgICBWS19GT1JNQVRfUFZSVEMyXzJCUFBfU1JHQl9CTE9DS19JTUc6IDEwMDAwNTQwMDYsCiAgICAgICAgVktfRk9STUFUX1BWUlRDMl80QlBQX1NSR0JfQkxPQ0tfSU1HOiAxMDAwMDU0MDA3LAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzR4NF9TRkxPQVRfQkxPQ0tfRVhUOiAxMDAwMDY2ZTMsCiAgICAgICAgVktfRk9STUFUX0FTVENfNXg0X1NGTE9BVF9CTE9DS19FWFQ6IDEwMDAwNjYwMDEsCiAgICAgICAgVktfRk9STUFUX0FTVENfNXg1X1NGTE9BVF9CTE9DS19FWFQ6IDEwMDAwNjYwMDIsCiAgICAgICAgVktfRk9STUFUX0FTVENfNng1X1NGTE9BVF9CTE9DS19FWFQ6IDEwMDAwNjYwMDMsCiAgICAgICAgVktfRk9STUFUX0FTVENfNng2X1NGTE9BVF9CTE9DS19FWFQ6IDEwMDAwNjYwMDQsCiAgICAgICAgVktfRk9STUFUX0FTVENfOHg1X1NGTE9BVF9CTE9DS19FWFQ6IDEwMDAwNjYwMDUsCiAgICAgICAgVktfRk9STUFUX0FTVENfOHg2X1NGTE9BVF9CTE9DS19FWFQ6IDEwMDAwNjYwMDYsCiAgICAgICAgVktfRk9STUFUX0FTVENfOHg4X1NGTE9BVF9CTE9DS19FWFQ6IDEwMDAwNjYwMDcsCiAgICAgICAgVktfRk9STUFUX0FTVENfMTB4NV9TRkxPQVRfQkxPQ0tfRVhUOiAxMDAwMDY2MDA4LAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzEweDZfU0ZMT0FUX0JMT0NLX0VYVDogMTAwMDA2NjAwOSwKICAgICAgICBWS19GT1JNQVRfQVNUQ18xMHg4X1NGTE9BVF9CTE9DS19FWFQ6IDEwMDAwNjYwMTAsCiAgICAgICAgVktfRk9STUFUX0FTVENfMTB4MTBfU0ZMT0FUX0JMT0NLX0VYVDogMTAwMDA2NjAxMSwKICAgICAgICBWS19GT1JNQVRfQVNUQ18xMngxMF9TRkxPQVRfQkxPQ0tfRVhUOiAxMDAwMDY2MDEyLAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzEyeDEyX1NGTE9BVF9CTE9DS19FWFQ6IDEwMDAwNjYwMTMsCiAgICAgICAgVktfRk9STUFUX0c4QjhHOFI4XzQyMl9VTk9STV9LSFI6IDEwMDAxNTZlMywKICAgICAgICBWS19GT1JNQVRfQjhHOFI4RzhfNDIyX1VOT1JNX0tIUjogMTAwMDE1NjAwMSwKICAgICAgICBWS19GT1JNQVRfRzhfQjhfUjhfM1BMQU5FXzQyMF9VTk9STV9LSFI6IDEwMDAxNTYwMDIsCiAgICAgICAgVktfRk9STUFUX0c4X0I4UjhfMlBMQU5FXzQyMF9VTk9STV9LSFI6IDEwMDAxNTYwMDMsCiAgICAgICAgVktfRk9STUFUX0c4X0I4X1I4XzNQTEFORV80MjJfVU5PUk1fS0hSOiAxMDAwMTU2MDA0LAogICAgICAgIFZLX0ZPUk1BVF9HOF9COFI4XzJQTEFORV80MjJfVU5PUk1fS0hSOiAxMDAwMTU2MDA1LAogICAgICAgIFZLX0ZPUk1BVF9HOF9COF9SOF8zUExBTkVfNDQ0X1VOT1JNX0tIUjogMTAwMDE1NjAwNiwKICAgICAgICBWS19GT1JNQVRfUjEwWDZfVU5PUk1fUEFDSzE2X0tIUjogMTAwMDE1NjAwNywKICAgICAgICBWS19GT1JNQVRfUjEwWDZHMTBYNl9VTk9STV8yUEFDSzE2X0tIUjogMTAwMDE1NjAwOCwKICAgICAgICBWS19GT1JNQVRfUjEwWDZHMTBYNkIxMFg2QTEwWDZfVU5PUk1fNFBBQ0sxNl9LSFI6IDEwMDAxNTYwMDksCiAgICAgICAgVktfRk9STUFUX0cxMFg2QjEwWDZHMTBYNlIxMFg2XzQyMl9VTk9STV80UEFDSzE2X0tIUjogMTAwMDE1NjAxMCwKICAgICAgICBWS19GT1JNQVRfQjEwWDZHMTBYNlIxMFg2RzEwWDZfNDIyX1VOT1JNXzRQQUNLMTZfS0hSOiAxMDAwMTU2MDExLAogICAgICAgIFZLX0ZPUk1BVF9HMTBYNl9CMTBYNl9SMTBYNl8zUExBTkVfNDIwX1VOT1JNXzNQQUNLMTZfS0hSOiAxMDAwMTU2MDEyLAogICAgICAgIFZLX0ZPUk1BVF9HMTBYNl9CMTBYNlIxMFg2XzJQTEFORV80MjBfVU5PUk1fM1BBQ0sxNl9LSFI6IDEwMDAxNTYwMTMsCiAgICAgICAgVktfRk9STUFUX0cxMFg2X0IxMFg2X1IxMFg2XzNQTEFORV80MjJfVU5PUk1fM1BBQ0sxNl9LSFI6IDEwMDAxNTYwMTQsCiAgICAgICAgVktfRk9STUFUX0cxMFg2X0IxMFg2UjEwWDZfMlBMQU5FXzQyMl9VTk9STV8zUEFDSzE2X0tIUjogMTAwMDE1NjAxNSwKICAgICAgICBWS19GT1JNQVRfRzEwWDZfQjEwWDZfUjEwWDZfM1BMQU5FXzQ0NF9VTk9STV8zUEFDSzE2X0tIUjogMTAwMDE1NjAxNiwKICAgICAgICBWS19GT1JNQVRfUjEyWDRfVU5PUk1fUEFDSzE2X0tIUjogMTAwMDE1NjAxNywKICAgICAgICBWS19GT1JNQVRfUjEyWDRHMTJYNF9VTk9STV8yUEFDSzE2X0tIUjogMTAwMDE1NjAxOCwKICAgICAgICBWS19GT1JNQVRfUjEyWDRHMTJYNEIxMlg0QTEyWDRfVU5PUk1fNFBBQ0sxNl9LSFI6IDEwMDAxNTYwMTksCiAgICAgICAgVktfRk9STUFUX0cxMlg0QjEyWDRHMTJYNFIxMlg0XzQyMl9VTk9STV80UEFDSzE2X0tIUjogMTAwMDE1NjAyMCwKICAgICAgICBWS19GT1JNQVRfQjEyWDRHMTJYNFIxMlg0RzEyWDRfNDIyX1VOT1JNXzRQQUNLMTZfS0hSOiAxMDAwMTU2MDIxLAogICAgICAgIFZLX0ZPUk1BVF9HMTJYNF9CMTJYNF9SMTJYNF8zUExBTkVfNDIwX1VOT1JNXzNQQUNLMTZfS0hSOiAxMDAwMTU2MDIyLAogICAgICAgIFZLX0ZPUk1BVF9HMTJYNF9CMTJYNFIxMlg0XzJQTEFORV80MjBfVU5PUk1fM1BBQ0sxNl9LSFI6IDEwMDAxNTYwMjMsCiAgICAgICAgVktfRk9STUFUX0cxMlg0X0IxMlg0X1IxMlg0XzNQTEFORV80MjJfVU5PUk1fM1BBQ0sxNl9LSFI6IDEwMDAxNTYwMjQsCiAgICAgICAgVktfRk9STUFUX0cxMlg0X0IxMlg0UjEyWDRfMlBMQU5FXzQyMl9VTk9STV8zUEFDSzE2X0tIUjogMTAwMDE1NjAyNSwKICAgICAgICBWS19GT1JNQVRfRzEyWDRfQjEyWDRfUjEyWDRfM1BMQU5FXzQ0NF9VTk9STV8zUEFDSzE2X0tIUjogMTAwMDE1NjAyNiwKICAgICAgICBWS19GT1JNQVRfRzE2QjE2RzE2UjE2XzQyMl9VTk9STV9LSFI6IDEwMDAxNTYwMjcsCiAgICAgICAgVktfRk9STUFUX0IxNkcxNlIxNkcxNl80MjJfVU5PUk1fS0hSOiAxMDAwMTU2MDI4LAogICAgICAgIFZLX0ZPUk1BVF9HMTZfQjE2X1IxNl8zUExBTkVfNDIwX1VOT1JNX0tIUjogMTAwMDE1NjAyOSwKICAgICAgICBWS19GT1JNQVRfRzE2X0IxNlIxNl8yUExBTkVfNDIwX1VOT1JNX0tIUjogMTAwMDE1NjAzMCwKICAgICAgICBWS19GT1JNQVRfRzE2X0IxNl9SMTZfM1BMQU5FXzQyMl9VTk9STV9LSFI6IDEwMDAxNTYwMzEsCiAgICAgICAgVktfRk9STUFUX0cxNl9CMTZSMTZfMlBMQU5FXzQyMl9VTk9STV9LSFI6IDEwMDAxNTYwMzIsCiAgICAgICAgVktfRk9STUFUX0cxNl9CMTZfUjE2XzNQTEFORV80NDRfVU5PUk1fS0hSOiAxMDAwMTU2MDMzCiAgICAgIH07CiAgICAgIFZ1bGthbkNvbnN0YW50c19kZWZhdWx0ID0gT2JqZWN0LmZyZWV6ZShWdWxrYW5Db25zdGFudHMpOwogICAgfQogIH0pOwoKICAvLyBub2RlX21vZHVsZXMva3R4LXBhcnNlL2Rpc3Qva3R4LXBhcnNlLm1vZGVybi5qcwogIGZ1bmN0aW9uIGRlY29kZVRleHQoYnVmZmVyKSB7CiAgICBpZiAodHlwZW9mIFRleHREZWNvZGVyICE9PSAidW5kZWZpbmVkIikgewogICAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGJ1ZmZlcik7CiAgICB9CiAgICByZXR1cm4gQnVmZmVyLmZyb20oYnVmZmVyKS50b1N0cmluZygidXRmOCIpOwogIH0KICBmdW5jdGlvbiByZWFkMihkYXRhKSB7CiAgICBjb25zdCBpZCA9IG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIEtUWDJfSUQubGVuZ3RoKTsKICAgIGlmIChpZFswXSAhPT0gS1RYMl9JRFswXSB8fCAvLyAnwrQnCiAgICBpZFsxXSAhPT0gS1RYMl9JRFsxXSB8fCAvLyAnSycKICAgIGlkWzJdICE9PSBLVFgyX0lEWzJdIHx8IC8vICdUJwogICAgaWRbM10gIT09IEtUWDJfSURbM10gfHwgLy8gJ1gnCiAgICBpZFs0XSAhPT0gS1RYMl9JRFs0XSB8fCAvLyAnICcKICAgIGlkWzVdICE9PSBLVFgyX0lEWzVdIHx8IC8vICcyJwogICAgaWRbNl0gIT09IEtUWDJfSURbNl0gfHwgLy8gJzAnCiAgICBpZFs3XSAhPT0gS1RYMl9JRFs3XSB8fCAvLyAnwqonCiAgICBpZFs4XSAhPT0gS1RYMl9JRFs4XSB8fCAvLyAnXHInCiAgICBpZFs5XSAhPT0gS1RYMl9JRFs5XSB8fCAvLyAnXG4nCiAgICBpZFsxMF0gIT09IEtUWDJfSURbMTBdIHx8IC8vICdceDFBJwogICAgaWRbMTFdICE9PSBLVFgyX0lEWzExXSkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoIk1pc3NpbmcgS1RYIDIuMCBpZGVudGlmaWVyLiIpOwogICAgfQogICAgY29uc3QgY29udGFpbmVyID0gbmV3IEtUWDJDb250YWluZXIoKTsKICAgIGNvbnN0IGhlYWRlckJ5dGVMZW5ndGggPSAxNyAqIFVpbnQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UOwogICAgY29uc3QgaGVhZGVyUmVhZGVyID0gbmV3IEJ1ZmZlclJlYWRlcihkYXRhLCBLVFgyX0lELmxlbmd0aCwgaGVhZGVyQnl0ZUxlbmd0aCwgdHJ1ZSk7CiAgICBjb250YWluZXIudmtGb3JtYXQgPSBoZWFkZXJSZWFkZXIuX25leHRVaW50MzIoKTsKICAgIGNvbnRhaW5lci50eXBlU2l6ZSA9IGhlYWRlclJlYWRlci5fbmV4dFVpbnQzMigpOwogICAgY29udGFpbmVyLnBpeGVsV2lkdGggPSBoZWFkZXJSZWFkZXIuX25leHRVaW50MzIoKTsKICAgIGNvbnRhaW5lci5waXhlbEhlaWdodCA9IGhlYWRlclJlYWRlci5fbmV4dFVpbnQzMigpOwogICAgY29udGFpbmVyLnBpeGVsRGVwdGggPSBoZWFkZXJSZWFkZXIuX25leHRVaW50MzIoKTsKICAgIGNvbnRhaW5lci5sYXllckNvdW50ID0gaGVhZGVyUmVhZGVyLl9uZXh0VWludDMyKCk7CiAgICBjb250YWluZXIuZmFjZUNvdW50ID0gaGVhZGVyUmVhZGVyLl9uZXh0VWludDMyKCk7CiAgICBjb25zdCBsZXZlbENvdW50ID0gaGVhZGVyUmVhZGVyLl9uZXh0VWludDMyKCk7CiAgICBjb250YWluZXIuc3VwZXJjb21wcmVzc2lvblNjaGVtZSA9IGhlYWRlclJlYWRlci5fbmV4dFVpbnQzMigpOwogICAgY29uc3QgZGZkQnl0ZU9mZnNldCA9IGhlYWRlclJlYWRlci5fbmV4dFVpbnQzMigpOwogICAgY29uc3QgZGZkQnl0ZUxlbmd0aCA9IGhlYWRlclJlYWRlci5fbmV4dFVpbnQzMigpOwogICAgY29uc3Qga3ZkQnl0ZU9mZnNldCA9IGhlYWRlclJlYWRlci5fbmV4dFVpbnQzMigpOwogICAgY29uc3Qga3ZkQnl0ZUxlbmd0aCA9IGhlYWRlclJlYWRlci5fbmV4dFVpbnQzMigpOwogICAgY29uc3Qgc2dkQnl0ZU9mZnNldCA9IGhlYWRlclJlYWRlci5fbmV4dFVpbnQ2NCgpOwogICAgY29uc3Qgc2dkQnl0ZUxlbmd0aCA9IGhlYWRlclJlYWRlci5fbmV4dFVpbnQ2NCgpOwogICAgY29uc3QgbGV2ZWxCeXRlTGVuZ3RoID0gbGV2ZWxDb3VudCAqIDMgKiA4OwogICAgY29uc3QgbGV2ZWxSZWFkZXIgPSBuZXcgQnVmZmVyUmVhZGVyKGRhdGEsIEtUWDJfSUQubGVuZ3RoICsgaGVhZGVyQnl0ZUxlbmd0aCwgbGV2ZWxCeXRlTGVuZ3RoLCB0cnVlKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGV2ZWxDb3VudDsgaSsrKSB7CiAgICAgIGNvbnRhaW5lci5sZXZlbHMucHVzaCh7CiAgICAgICAgbGV2ZWxEYXRhOiBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0ICsgbGV2ZWxSZWFkZXIuX25leHRVaW50NjQoKSwgbGV2ZWxSZWFkZXIuX25leHRVaW50NjQoKSksCiAgICAgICAgdW5jb21wcmVzc2VkQnl0ZUxlbmd0aDogbGV2ZWxSZWFkZXIuX25leHRVaW50NjQoKQogICAgICB9KTsKICAgIH0KICAgIGNvbnN0IGRmZFJlYWRlciA9IG5ldyBCdWZmZXJSZWFkZXIoZGF0YSwgZGZkQnl0ZU9mZnNldCwgZGZkQnl0ZUxlbmd0aCwgdHJ1ZSk7CiAgICBjb25zdCBkZmQgPSB7CiAgICAgIHZlbmRvcklkOiBkZmRSZWFkZXIuX3NraXAoCiAgICAgICAgNAogICAgICAgIC8qIHRvdGFsU2l6ZSAqLwogICAgICApLl9uZXh0VWludDE2KCksCiAgICAgIGRlc2NyaXB0b3JUeXBlOiBkZmRSZWFkZXIuX25leHRVaW50MTYoKSwKICAgICAgdmVyc2lvbk51bWJlcjogZGZkUmVhZGVyLl9uZXh0VWludDE2KCksCiAgICAgIGRlc2NyaXB0b3JCbG9ja1NpemU6IGRmZFJlYWRlci5fbmV4dFVpbnQxNigpLAogICAgICBjb2xvck1vZGVsOiBkZmRSZWFkZXIuX25leHRVaW50OCgpLAogICAgICBjb2xvclByaW1hcmllczogZGZkUmVhZGVyLl9uZXh0VWludDgoKSwKICAgICAgdHJhbnNmZXJGdW5jdGlvbjogZGZkUmVhZGVyLl9uZXh0VWludDgoKSwKICAgICAgZmxhZ3M6IGRmZFJlYWRlci5fbmV4dFVpbnQ4KCksCiAgICAgIHRleGVsQmxvY2tEaW1lbnNpb246IFtkZmRSZWFkZXIuX25leHRVaW50OCgpLCBkZmRSZWFkZXIuX25leHRVaW50OCgpLCBkZmRSZWFkZXIuX25leHRVaW50OCgpLCBkZmRSZWFkZXIuX25leHRVaW50OCgpXSwKICAgICAgYnl0ZXNQbGFuZTogW2RmZFJlYWRlci5fbmV4dFVpbnQ4KCksIGRmZFJlYWRlci5fbmV4dFVpbnQ4KCksIGRmZFJlYWRlci5fbmV4dFVpbnQ4KCksIGRmZFJlYWRlci5fbmV4dFVpbnQ4KCksIGRmZFJlYWRlci5fbmV4dFVpbnQ4KCksIGRmZFJlYWRlci5fbmV4dFVpbnQ4KCksIGRmZFJlYWRlci5fbmV4dFVpbnQ4KCksIGRmZFJlYWRlci5fbmV4dFVpbnQ4KCldLAogICAgICBzYW1wbGVzOiBbXQogICAgfTsKICAgIGNvbnN0IHNhbXBsZVN0YXJ0ID0gNjsKICAgIGNvbnN0IHNhbXBsZVdvcmRzID0gNDsKICAgIGNvbnN0IG51bVNhbXBsZXMgPSAoZGZkLmRlc2NyaXB0b3JCbG9ja1NpemUgLyA0IC0gc2FtcGxlU3RhcnQpIC8gc2FtcGxlV29yZHM7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVNhbXBsZXM7IGkrKykgewogICAgICBjb25zdCBzYW1wbGUgPSB7CiAgICAgICAgYml0T2Zmc2V0OiBkZmRSZWFkZXIuX25leHRVaW50MTYoKSwKICAgICAgICBiaXRMZW5ndGg6IGRmZFJlYWRlci5fbmV4dFVpbnQ4KCksCiAgICAgICAgY2hhbm5lbFR5cGU6IGRmZFJlYWRlci5fbmV4dFVpbnQ4KCksCiAgICAgICAgc2FtcGxlUG9zaXRpb246IFtkZmRSZWFkZXIuX25leHRVaW50OCgpLCBkZmRSZWFkZXIuX25leHRVaW50OCgpLCBkZmRSZWFkZXIuX25leHRVaW50OCgpLCBkZmRSZWFkZXIuX25leHRVaW50OCgpXSwKICAgICAgICBzYW1wbGVMb3dlcjogLUluZmluaXR5LAogICAgICAgIHNhbXBsZVVwcGVyOiBJbmZpbml0eQogICAgICB9OwogICAgICBpZiAoc2FtcGxlLmNoYW5uZWxUeXBlICYgS0hSX0RGX1NBTVBMRV9EQVRBVFlQRV9TSUdORUQpIHsKICAgICAgICBzYW1wbGUuc2FtcGxlTG93ZXIgPSBkZmRSZWFkZXIuX25leHRJbnQzMigpOwogICAgICAgIHNhbXBsZS5zYW1wbGVVcHBlciA9IGRmZFJlYWRlci5fbmV4dEludDMyKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc2FtcGxlLnNhbXBsZUxvd2VyID0gZGZkUmVhZGVyLl9uZXh0VWludDMyKCk7CiAgICAgICAgc2FtcGxlLnNhbXBsZVVwcGVyID0gZGZkUmVhZGVyLl9uZXh0VWludDMyKCk7CiAgICAgIH0KICAgICAgZGZkLnNhbXBsZXNbaV0gPSBzYW1wbGU7CiAgICB9CiAgICBjb250YWluZXIuZGF0YUZvcm1hdERlc2NyaXB0b3IubGVuZ3RoID0gMDsKICAgIGNvbnRhaW5lci5kYXRhRm9ybWF0RGVzY3JpcHRvci5wdXNoKGRmZCk7CiAgICBjb25zdCBrdmRSZWFkZXIgPSBuZXcgQnVmZmVyUmVhZGVyKGRhdGEsIGt2ZEJ5dGVPZmZzZXQsIGt2ZEJ5dGVMZW5ndGgsIHRydWUpOwogICAgd2hpbGUgKGt2ZFJlYWRlci5fb2Zmc2V0IDwga3ZkQnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBrZXlWYWx1ZUJ5dGVMZW5ndGggPSBrdmRSZWFkZXIuX25leHRVaW50MzIoKTsKICAgICAgY29uc3Qga2V5RGF0YSA9IGt2ZFJlYWRlci5fc2NhbihrZXlWYWx1ZUJ5dGVMZW5ndGgpOwogICAgICBjb25zdCBrZXkgPSBkZWNvZGVUZXh0KGtleURhdGEpOwogICAgICBjb250YWluZXIua2V5VmFsdWVba2V5XSA9IGt2ZFJlYWRlci5fbmV4dFVpbnQ4QXJyYXkoa2V5VmFsdWVCeXRlTGVuZ3RoIC0ga2V5RGF0YS5ieXRlTGVuZ3RoIC0gMSk7CiAgICAgIGlmIChrZXkubWF0Y2goL15rdHgvaSkpIHsKICAgICAgICBjb25zdCB0ZXh0ID0gZGVjb2RlVGV4dChjb250YWluZXIua2V5VmFsdWVba2V5XSk7CiAgICAgICAgY29udGFpbmVyLmtleVZhbHVlW2tleV0gPSB0ZXh0LnN1YnN0cmluZygwLCB0ZXh0Lmxhc3RJbmRleE9mKCJcMCIpKTsKICAgICAgfQogICAgICBjb25zdCBrdlBhZGRpbmcgPSBrZXlWYWx1ZUJ5dGVMZW5ndGggJSA0ID8gNCAtIGtleVZhbHVlQnl0ZUxlbmd0aCAlIDQgOiAwOwogICAgICBrdmRSZWFkZXIuX3NraXAoa3ZQYWRkaW5nKTsKICAgIH0KICAgIGlmIChzZ2RCeXRlTGVuZ3RoIDw9IDApCiAgICAgIHJldHVybiBjb250YWluZXI7CiAgICBjb25zdCBzZ2RSZWFkZXIgPSBuZXcgQnVmZmVyUmVhZGVyKGRhdGEsIHNnZEJ5dGVPZmZzZXQsIHNnZEJ5dGVMZW5ndGgsIHRydWUpOwogICAgY29uc3QgZW5kcG9pbnRDb3VudCA9IHNnZFJlYWRlci5fbmV4dFVpbnQxNigpOwogICAgY29uc3Qgc2VsZWN0b3JDb3VudCA9IHNnZFJlYWRlci5fbmV4dFVpbnQxNigpOwogICAgY29uc3QgZW5kcG9pbnRzQnl0ZUxlbmd0aCA9IHNnZFJlYWRlci5fbmV4dFVpbnQzMigpOwogICAgY29uc3Qgc2VsZWN0b3JzQnl0ZUxlbmd0aCA9IHNnZFJlYWRlci5fbmV4dFVpbnQzMigpOwogICAgY29uc3QgdGFibGVzQnl0ZUxlbmd0aCA9IHNnZFJlYWRlci5fbmV4dFVpbnQzMigpOwogICAgY29uc3QgZXh0ZW5kZWRCeXRlTGVuZ3RoID0gc2dkUmVhZGVyLl9uZXh0VWludDMyKCk7CiAgICBjb25zdCBpbWFnZURlc2NzID0gW107CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxldmVsQ291bnQ7IGkrKykgewogICAgICBpbWFnZURlc2NzLnB1c2goewogICAgICAgIGltYWdlRmxhZ3M6IHNnZFJlYWRlci5fbmV4dFVpbnQzMigpLAogICAgICAgIHJnYlNsaWNlQnl0ZU9mZnNldDogc2dkUmVhZGVyLl9uZXh0VWludDMyKCksCiAgICAgICAgcmdiU2xpY2VCeXRlTGVuZ3RoOiBzZ2RSZWFkZXIuX25leHRVaW50MzIoKSwKICAgICAgICBhbHBoYVNsaWNlQnl0ZU9mZnNldDogc2dkUmVhZGVyLl9uZXh0VWludDMyKCksCiAgICAgICAgYWxwaGFTbGljZUJ5dGVMZW5ndGg6IHNnZFJlYWRlci5fbmV4dFVpbnQzMigpCiAgICAgIH0pOwogICAgfQogICAgY29uc3QgZW5kcG9pbnRzQnl0ZU9mZnNldCA9IHNnZEJ5dGVPZmZzZXQgKyBzZ2RSZWFkZXIuX29mZnNldDsKICAgIGNvbnN0IHNlbGVjdG9yc0J5dGVPZmZzZXQgPSBlbmRwb2ludHNCeXRlT2Zmc2V0ICsgZW5kcG9pbnRzQnl0ZUxlbmd0aDsKICAgIGNvbnN0IHRhYmxlc0J5dGVPZmZzZXQgPSBzZWxlY3RvcnNCeXRlT2Zmc2V0ICsgc2VsZWN0b3JzQnl0ZUxlbmd0aDsKICAgIGNvbnN0IGV4dGVuZGVkQnl0ZU9mZnNldCA9IHRhYmxlc0J5dGVPZmZzZXQgKyB0YWJsZXNCeXRlTGVuZ3RoOwogICAgY29uc3QgZW5kcG9pbnRzRGF0YSA9IG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQgKyBlbmRwb2ludHNCeXRlT2Zmc2V0LCBlbmRwb2ludHNCeXRlTGVuZ3RoKTsKICAgIGNvbnN0IHNlbGVjdG9yc0RhdGEgPSBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0ICsgc2VsZWN0b3JzQnl0ZU9mZnNldCwgc2VsZWN0b3JzQnl0ZUxlbmd0aCk7CiAgICBjb25zdCB0YWJsZXNEYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCArIHRhYmxlc0J5dGVPZmZzZXQsIHRhYmxlc0J5dGVMZW5ndGgpOwogICAgY29uc3QgZXh0ZW5kZWREYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCArIGV4dGVuZGVkQnl0ZU9mZnNldCwgZXh0ZW5kZWRCeXRlTGVuZ3RoKTsKICAgIGNvbnRhaW5lci5nbG9iYWxEYXRhID0gewogICAgICBlbmRwb2ludENvdW50LAogICAgICBzZWxlY3RvckNvdW50LAogICAgICBpbWFnZURlc2NzLAogICAgICBlbmRwb2ludHNEYXRhLAogICAgICBzZWxlY3RvcnNEYXRhLAogICAgICB0YWJsZXNEYXRhLAogICAgICBleHRlbmRlZERhdGEKICAgIH07CiAgICByZXR1cm4gY29udGFpbmVyOwogIH0KICB2YXIgS0hSX1NVUEVSQ09NUFJFU1NJT05fTk9ORSwgS0hSX0RGX0tIUl9ERVNDUklQVE9SVFlQRV9CQVNJQ0ZPUk1BVCwgS0hSX0RGX1ZFTkRPUklEX0tIUk9OT1MsIEtIUl9ERl9WRVJTSU9OLCBLSFJfREZfTU9ERUxfVU5TUEVDSUZJRUQsIEtIUl9ERl9GTEFHX0FMUEhBX1NUUkFJR0hULCBLSFJfREZfVFJBTlNGRVJfU1JHQiwgS0hSX0RGX1BSSU1BUklFU19CVDcwOSwgS0hSX0RGX1NBTVBMRV9EQVRBVFlQRV9TSUdORUQsIFZLX0ZPUk1BVF9VTkRFRklORUQsIEtUWDJDb250YWluZXIsIEJ1ZmZlclJlYWRlciwgTlVMLCBLVFgyX0lEOwogIHZhciBpbml0X2t0eF9wYXJzZV9tb2Rlcm4gPSBfX2VzbSh7CiAgICAibm9kZV9tb2R1bGVzL2t0eC1wYXJzZS9kaXN0L2t0eC1wYXJzZS5tb2Rlcm4uanMiKCkgewogICAgICBLSFJfU1VQRVJDT01QUkVTU0lPTl9OT05FID0gMDsKICAgICAgS0hSX0RGX0tIUl9ERVNDUklQVE9SVFlQRV9CQVNJQ0ZPUk1BVCA9IDA7CiAgICAgIEtIUl9ERl9WRU5ET1JJRF9LSFJPTk9TID0gMDsKICAgICAgS0hSX0RGX1ZFUlNJT04gPSAyOwogICAgICBLSFJfREZfTU9ERUxfVU5TUEVDSUZJRUQgPSAwOwogICAgICBLSFJfREZfRkxBR19BTFBIQV9TVFJBSUdIVCA9IDA7CiAgICAgIEtIUl9ERl9UUkFOU0ZFUl9TUkdCID0gMjsKICAgICAgS0hSX0RGX1BSSU1BUklFU19CVDcwOSA9IDE7CiAgICAgIEtIUl9ERl9TQU1QTEVfREFUQVRZUEVfU0lHTkVEID0gNjQ7CiAgICAgIFZLX0ZPUk1BVF9VTkRFRklORUQgPSAwOwogICAgICBLVFgyQ29udGFpbmVyID0gY2xhc3MgewogICAgICAgIGNvbnN0cnVjdG9yKCkgewogICAgICAgICAgdGhpcy52a0Zvcm1hdCA9IFZLX0ZPUk1BVF9VTkRFRklORUQ7CiAgICAgICAgICB0aGlzLnR5cGVTaXplID0gMTsKICAgICAgICAgIHRoaXMucGl4ZWxXaWR0aCA9IDA7CiAgICAgICAgICB0aGlzLnBpeGVsSGVpZ2h0ID0gMDsKICAgICAgICAgIHRoaXMucGl4ZWxEZXB0aCA9IDA7CiAgICAgICAgICB0aGlzLmxheWVyQ291bnQgPSAwOwogICAgICAgICAgdGhpcy5mYWNlQ291bnQgPSAxOwogICAgICAgICAgdGhpcy5zdXBlcmNvbXByZXNzaW9uU2NoZW1lID0gS0hSX1NVUEVSQ09NUFJFU1NJT05fTk9ORTsKICAgICAgICAgIHRoaXMubGV2ZWxzID0gW107CiAgICAgICAgICB0aGlzLmRhdGFGb3JtYXREZXNjcmlwdG9yID0gW3sKICAgICAgICAgICAgdmVuZG9ySWQ6IEtIUl9ERl9WRU5ET1JJRF9LSFJPTk9TLAogICAgICAgICAgICBkZXNjcmlwdG9yVHlwZTogS0hSX0RGX0tIUl9ERVNDUklQVE9SVFlQRV9CQVNJQ0ZPUk1BVCwKICAgICAgICAgICAgZGVzY3JpcHRvckJsb2NrU2l6ZTogMCwKICAgICAgICAgICAgdmVyc2lvbk51bWJlcjogS0hSX0RGX1ZFUlNJT04sCiAgICAgICAgICAgIGNvbG9yTW9kZWw6IEtIUl9ERl9NT0RFTF9VTlNQRUNJRklFRCwKICAgICAgICAgICAgY29sb3JQcmltYXJpZXM6IEtIUl9ERl9QUklNQVJJRVNfQlQ3MDksCiAgICAgICAgICAgIHRyYW5zZmVyRnVuY3Rpb246IEtIUl9ERl9UUkFOU0ZFUl9TUkdCLAogICAgICAgICAgICBmbGFnczogS0hSX0RGX0ZMQUdfQUxQSEFfU1RSQUlHSFQsCiAgICAgICAgICAgIHRleGVsQmxvY2tEaW1lbnNpb246IFswLCAwLCAwLCAwXSwKICAgICAgICAgICAgYnl0ZXNQbGFuZTogWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdLAogICAgICAgICAgICBzYW1wbGVzOiBbXQogICAgICAgICAgfV07CiAgICAgICAgICB0aGlzLmtleVZhbHVlID0ge307CiAgICAgICAgICB0aGlzLmdsb2JhbERhdGEgPSBudWxsOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQnVmZmVyUmVhZGVyID0gY2xhc3MgewogICAgICAgIGNvbnN0cnVjdG9yKGRhdGEsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgsIGxpdHRsZUVuZGlhbjIpIHsKICAgICAgICAgIHRoaXMuX2RhdGFWaWV3ID0gdm9pZCAwOwogICAgICAgICAgdGhpcy5fbGl0dGxlRW5kaWFuID0gdm9pZCAwOwogICAgICAgICAgdGhpcy5fb2Zmc2V0ID0gdm9pZCAwOwogICAgICAgICAgdGhpcy5fZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCArIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpOwogICAgICAgICAgdGhpcy5fbGl0dGxlRW5kaWFuID0gbGl0dGxlRW5kaWFuMjsKICAgICAgICAgIHRoaXMuX29mZnNldCA9IDA7CiAgICAgICAgfQogICAgICAgIF9uZXh0VWludDgoKSB7CiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2RhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX29mZnNldCk7CiAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gMTsKICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9CiAgICAgICAgX25leHRVaW50MTYoKSB7CiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2RhdGFWaWV3LmdldFVpbnQxNih0aGlzLl9vZmZzZXQsIHRoaXMuX2xpdHRsZUVuZGlhbik7CiAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gMjsKICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9CiAgICAgICAgX25leHRVaW50MzIoKSB7CiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2RhdGFWaWV3LmdldFVpbnQzMih0aGlzLl9vZmZzZXQsIHRoaXMuX2xpdHRsZUVuZGlhbik7CiAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gNDsKICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9CiAgICAgICAgX25leHRVaW50NjQoKSB7CiAgICAgICAgICBjb25zdCBsZWZ0ID0gdGhpcy5fZGF0YVZpZXcuZ2V0VWludDMyKHRoaXMuX29mZnNldCwgdGhpcy5fbGl0dGxlRW5kaWFuKTsKICAgICAgICAgIGNvbnN0IHJpZ2h0ID0gdGhpcy5fZGF0YVZpZXcuZ2V0VWludDMyKHRoaXMuX29mZnNldCArIDQsIHRoaXMuX2xpdHRsZUVuZGlhbik7CiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGxlZnQgKyAyICoqIDMyICogcmlnaHQ7CiAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gODsKICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9CiAgICAgICAgX25leHRJbnQzMigpIHsKICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fZGF0YVZpZXcuZ2V0SW50MzIodGhpcy5fb2Zmc2V0LCB0aGlzLl9saXR0bGVFbmRpYW4pOwogICAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IDQ7CiAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgfQogICAgICAgIF9uZXh0VWludDhBcnJheShsZW4pIHsKICAgICAgICAgIGNvbnN0IHZhbHVlID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fZGF0YVZpZXcuYnVmZmVyLCB0aGlzLl9kYXRhVmlldy5ieXRlT2Zmc2V0ICsgdGhpcy5fb2Zmc2V0LCBsZW4pOwogICAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IGxlbjsKICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9CiAgICAgICAgX3NraXAoYnl0ZXMpIHsKICAgICAgICAgIHRoaXMuX29mZnNldCArPSBieXRlczsKICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KICAgICAgICBfc2NhbihtYXhCeXRlTGVuZ3RoLCB0ZXJtID0gMCkgewogICAgICAgICAgY29uc3QgYnl0ZU9mZnNldCA9IHRoaXMuX29mZnNldDsKICAgICAgICAgIGxldCBieXRlTGVuZ3RoID0gMDsKICAgICAgICAgIHdoaWxlICh0aGlzLl9kYXRhVmlldy5nZXRVaW50OCh0aGlzLl9vZmZzZXQpICE9PSB0ZXJtICYmIGJ5dGVMZW5ndGggPCBtYXhCeXRlTGVuZ3RoKSB7CiAgICAgICAgICAgIGJ5dGVMZW5ndGgrKzsKICAgICAgICAgICAgdGhpcy5fb2Zmc2V0Kys7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IG1heEJ5dGVMZW5ndGgpCiAgICAgICAgICAgIHRoaXMuX29mZnNldCsrOwogICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHRoaXMuX2RhdGFWaWV3LmJ1ZmZlciwgdGhpcy5fZGF0YVZpZXcuYnl0ZU9mZnNldCArIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpOwogICAgICAgIH0KICAgICAgfTsKICAgICAgTlVMID0gbmV3IFVpbnQ4QXJyYXkoWzBdKTsKICAgICAgS1RYMl9JRCA9IFsKICAgICAgICAvLyAnwrQnLCAnSycsICdUJywgJ1gnLCAnMicsICcwJywgJ8KqJywgJ1xyJywgJ1xuJywgJ1x4MUEnLCAnXG4nCiAgICAgICAgMTcxLAogICAgICAgIDc1LAogICAgICAgIDg0LAogICAgICAgIDg4LAogICAgICAgIDMyLAogICAgICAgIDUwLAogICAgICAgIDQ4LAogICAgICAgIDE4NywKICAgICAgICAxMywKICAgICAgICAxMCwKICAgICAgICAyNiwKICAgICAgICAxMAogICAgICBdOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1RoaXJkUGFydHkvV29ya2Vycy9iYXNpc190cmFuc2NvZGVyLmpzCiAgdmFyIHJlcXVpcmVfYmFzaXNfdHJhbnNjb2RlciA9IF9fY29tbW9uSlMoewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvVGhpcmRQYXJ0eS9Xb3JrZXJzL2Jhc2lzX3RyYW5zY29kZXIuanMiKGV4cG9ydHMyLCBtb2R1bGUpIHsKICAgICAgdmFyIEJBU0lTID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIF9zY3JpcHREaXIgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICJ1bmRlZmluZWQiICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgPyBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyA6IHZvaWQgMDsKICAgICAgICBpZiAodHlwZW9mIF9fZmlsZW5hbWUgIT09ICJ1bmRlZmluZWQiKQogICAgICAgICAgX3NjcmlwdERpciA9IF9zY3JpcHREaXIgfHwgX19maWxlbmFtZTsKICAgICAgICByZXR1cm4gZnVuY3Rpb24oQkFTSVMyKSB7CiAgICAgICAgICBCQVNJUzIgPSBCQVNJUzIgfHwge307CiAgICAgICAgICB2YXIgTW9kdWxlID0gdHlwZW9mIEJBU0lTMiAhPT0gInVuZGVmaW5lZCIgPyBCQVNJUzIgOiB7fTsKICAgICAgICAgIHZhciByZWFkeVByb21pc2VSZXNvbHZlLCByZWFkeVByb21pc2VSZWplY3Q7CiAgICAgICAgICBNb2R1bGVbInJlYWR5Il0gPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgcmVhZHlQcm9taXNlUmVzb2x2ZSA9IHJlc29sdmU7CiAgICAgICAgICAgIHJlYWR5UHJvbWlzZVJlamVjdCA9IHJlamVjdDsKICAgICAgICAgIH0pOwogICAgICAgICAgdmFyIG1vZHVsZU92ZXJyaWRlcyA9IHt9OwogICAgICAgICAgdmFyIGtleTsKICAgICAgICAgIGZvciAoa2V5IGluIE1vZHVsZSkgewogICAgICAgICAgICBpZiAoTW9kdWxlLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAgICBtb2R1bGVPdmVycmlkZXNba2V5XSA9IE1vZHVsZVtrZXldOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgYXJndW1lbnRzXyA9IFtdOwogICAgICAgICAgdmFyIHRoaXNQcm9ncmFtID0gIi4vdGhpcy5wcm9ncmFtIjsKICAgICAgICAgIHZhciBxdWl0XyA9IGZ1bmN0aW9uKHN0YXR1cywgdG9UaHJvdykgewogICAgICAgICAgICB0aHJvdyB0b1Rocm93OwogICAgICAgICAgfTsKICAgICAgICAgIHZhciBFTlZJUk9OTUVOVF9JU19XRUIgPSBmYWxzZTsKICAgICAgICAgIHZhciBFTlZJUk9OTUVOVF9JU19XT1JLRVIgPSBmYWxzZTsKICAgICAgICAgIHZhciBFTlZJUk9OTUVOVF9JU19OT0RFID0gZmFsc2U7CiAgICAgICAgICB2YXIgRU5WSVJPTk1FTlRfSVNfU0hFTEwgPSBmYWxzZTsKICAgICAgICAgIEVOVklST05NRU5UX0lTX1dFQiA9IHR5cGVvZiB3aW5kb3cgPT09ICJvYmplY3QiOwogICAgICAgICAgRU5WSVJPTk1FTlRfSVNfV09SS0VSID0gdHlwZW9mIGltcG9ydFNjcmlwdHMgPT09ICJmdW5jdGlvbiI7CiAgICAgICAgICBFTlZJUk9OTUVOVF9JU19OT0RFID0gdHlwZW9mIHByb2Nlc3MgPT09ICJvYmplY3QiICYmIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zID09PSAib2JqZWN0IiAmJiB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlID09PSAic3RyaW5nIjsKICAgICAgICAgIEVOVklST05NRU5UX0lTX1NIRUxMID0gIUVOVklST05NRU5UX0lTX1dFQiAmJiAhRU5WSVJPTk1FTlRfSVNfTk9ERSAmJiAhRU5WSVJPTk1FTlRfSVNfV09SS0VSOwogICAgICAgICAgdmFyIHNjcmlwdERpcmVjdG9yeSA9ICIiOwogICAgICAgICAgZnVuY3Rpb24gbG9jYXRlRmlsZShwYXRoKSB7CiAgICAgICAgICAgIGlmIChNb2R1bGVbImxvY2F0ZUZpbGUiXSkgewogICAgICAgICAgICAgIHJldHVybiBNb2R1bGVbImxvY2F0ZUZpbGUiXShwYXRoLCBzY3JpcHREaXJlY3RvcnkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzY3JpcHREaXJlY3RvcnkgKyBwYXRoOwogICAgICAgICAgfQogICAgICAgICAgdmFyIHJlYWRfLCByZWFkQXN5bmMsIHJlYWRCaW5hcnksIHNldFdpbmRvd1RpdGxlOwogICAgICAgICAgdmFyIG5vZGVGUzsKICAgICAgICAgIHZhciBub2RlUGF0aDsKICAgICAgICAgIGlmIChFTlZJUk9OTUVOVF9JU19OT0RFKSB7CiAgICAgICAgICAgIGlmIChFTlZJUk9OTUVOVF9JU19XT1JLRVIpIHsKICAgICAgICAgICAgICBzY3JpcHREaXJlY3RvcnkgPSBfX3JlcXVpcmUoInBhdGgiKS5kaXJuYW1lKHNjcmlwdERpcmVjdG9yeSkgKyAiLyI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgc2NyaXB0RGlyZWN0b3J5ID0gX19kaXJuYW1lICsgIi8iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlYWRfID0gZnVuY3Rpb24gc2hlbGxfcmVhZChmaWxlbmFtZSwgYmluYXJ5KSB7CiAgICAgICAgICAgICAgaWYgKCFub2RlRlMpCiAgICAgICAgICAgICAgICBub2RlRlMgPSBfX3JlcXVpcmUoImZzIik7CiAgICAgICAgICAgICAgaWYgKCFub2RlUGF0aCkKICAgICAgICAgICAgICAgIG5vZGVQYXRoID0gX19yZXF1aXJlKCJwYXRoIik7CiAgICAgICAgICAgICAgZmlsZW5hbWUgPSBub2RlUGF0aFsibm9ybWFsaXplIl0oZmlsZW5hbWUpOwogICAgICAgICAgICAgIHJldHVybiBub2RlRlNbInJlYWRGaWxlU3luYyJdKGZpbGVuYW1lLCBiaW5hcnkgPyBudWxsIDogInV0ZjgiKTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgcmVhZEJpbmFyeSA9IGZ1bmN0aW9uIHJlYWRCaW5hcnkyKGZpbGVuYW1lKSB7CiAgICAgICAgICAgICAgdmFyIHJldCA9IHJlYWRfKGZpbGVuYW1lLCB0cnVlKTsKICAgICAgICAgICAgICBpZiAoIXJldC5idWZmZXIpIHsKICAgICAgICAgICAgICAgIHJldCA9IG5ldyBVaW50OEFycmF5KHJldCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGFzc2VydChyZXQuYnVmZmVyKTsKICAgICAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgICAgICB9OwogICAgICAgICAgICBpZiAocHJvY2Vzc1siYXJndiJdLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgICB0aGlzUHJvZ3JhbSA9IHByb2Nlc3NbImFyZ3YiXVsxXS5yZXBsYWNlKC9cXC9nLCAiLyIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGFyZ3VtZW50c18gPSBwcm9jZXNzWyJhcmd2Il0uc2xpY2UoMik7CiAgICAgICAgICAgIHByb2Nlc3NbIm9uIl0oInVuY2F1Z2h0RXhjZXB0aW9uIiwgZnVuY3Rpb24oZXgpIHsKICAgICAgICAgICAgICBpZiAoIShleCBpbnN0YW5jZW9mIEV4aXRTdGF0dXMpKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBleDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBwcm9jZXNzWyJvbiJdKCJ1bmhhbmRsZWRSZWplY3Rpb24iLCBhYm9ydCk7CiAgICAgICAgICAgIHF1aXRfID0gZnVuY3Rpb24oc3RhdHVzKSB7CiAgICAgICAgICAgICAgcHJvY2Vzc1siZXhpdCJdKHN0YXR1cyk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIE1vZHVsZVsiaW5zcGVjdCJdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgcmV0dXJuICJbRW1zY3JpcHRlbiBNb2R1bGUgb2JqZWN0XSI7CiAgICAgICAgICAgIH07CiAgICAgICAgICB9IGVsc2UgaWYgKEVOVklST05NRU5UX0lTX1NIRUxMKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVhZCAhPSAidW5kZWZpbmVkIikgewogICAgICAgICAgICAgIHJlYWRfID0gZnVuY3Rpb24gc2hlbGxfcmVhZChmKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVhZChmKTsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlYWRCaW5hcnkgPSBmdW5jdGlvbiByZWFkQmluYXJ5MihmKSB7CiAgICAgICAgICAgICAgdmFyIGRhdGE7CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZWFkYnVmZmVyID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkocmVhZGJ1ZmZlcihmKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGRhdGEgPSByZWFkKGYsICJiaW5hcnkiKTsKICAgICAgICAgICAgICBhc3NlcnQodHlwZW9mIGRhdGEgPT09ICJvYmplY3QiKTsKICAgICAgICAgICAgICByZXR1cm4gZGF0YTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgaWYgKHR5cGVvZiBzY3JpcHRBcmdzICE9ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgYXJndW1lbnRzXyA9IHNjcmlwdEFyZ3M7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50cyAhPSAidW5kZWZpbmVkIikgewogICAgICAgICAgICAgIGFyZ3VtZW50c18gPSBhcmd1bWVudHM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHR5cGVvZiBxdWl0ID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgcXVpdF8gPSBmdW5jdGlvbihzdGF0dXMpIHsKICAgICAgICAgICAgICAgIHF1aXQoc3RhdHVzKTsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJpbnQgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSAidW5kZWZpbmVkIikKICAgICAgICAgICAgICAgIGNvbnNvbGUgPSB7fTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyA9IHByaW50OwogICAgICAgICAgICAgIGNvbnNvbGUud2FybiA9IGNvbnNvbGUuZXJyb3IgPSB0eXBlb2YgcHJpbnRFcnIgIT09ICJ1bmRlZmluZWQiID8gcHJpbnRFcnIgOiBwcmludDsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmIChFTlZJUk9OTUVOVF9JU19XRUIgfHwgRU5WSVJPTk1FTlRfSVNfV09SS0VSKSB7CiAgICAgICAgICAgIGlmIChFTlZJUk9OTUVOVF9JU19XT1JLRVIpIHsKICAgICAgICAgICAgICBzY3JpcHREaXJlY3RvcnkgPSBzZWxmLmxvY2F0aW9uLmhyZWY7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAidW5kZWZpbmVkIiAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0KSB7CiAgICAgICAgICAgICAgc2NyaXB0RGlyZWN0b3J5ID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKF9zY3JpcHREaXIpIHsKICAgICAgICAgICAgICBzY3JpcHREaXJlY3RvcnkgPSBfc2NyaXB0RGlyOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChzY3JpcHREaXJlY3RvcnkuaW5kZXhPZigiYmxvYjoiKSAhPT0gMCkgewogICAgICAgICAgICAgIHNjcmlwdERpcmVjdG9yeSA9IHNjcmlwdERpcmVjdG9yeS5zdWJzdHIoMCwgc2NyaXB0RGlyZWN0b3J5Lmxhc3RJbmRleE9mKCIvIikgKyAxKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBzY3JpcHREaXJlY3RvcnkgPSAiIjsKICAgICAgICAgICAgfQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgcmVhZF8gPSBmdW5jdGlvbih1cmwpIHsKICAgICAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgICAgICAgICAgICAgIHhoci5vcGVuKCJHRVQiLCB1cmwsIGZhbHNlKTsKICAgICAgICAgICAgICAgIHhoci5zZW5kKG51bGwpOwogICAgICAgICAgICAgICAgcmV0dXJuIHhoci5yZXNwb25zZVRleHQ7CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBpZiAoRU5WSVJPTk1FTlRfSVNfV09SS0VSKSB7CiAgICAgICAgICAgICAgICByZWFkQmluYXJ5ID0gZnVuY3Rpb24odXJsKSB7CiAgICAgICAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgICAgICAgICAgICAgICAgeGhyLm9wZW4oIkdFVCIsIHVybCwgZmFsc2UpOwogICAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gImFycmF5YnVmZmVyIjsKICAgICAgICAgICAgICAgICAgeGhyLnNlbmQobnVsbCk7CiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSh4aHIucmVzcG9uc2UpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmVhZEFzeW5jID0gZnVuY3Rpb24odXJsLCBvbmxvYWQsIG9uZXJyb3IpIHsKICAgICAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgICAgICAgICAgICAgIHhoci5vcGVuKCJHRVQiLCB1cmwsIHRydWUpOwogICAgICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICJhcnJheWJ1ZmZlciI7CiAgICAgICAgICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09IDIwMCB8fCB4aHIuc3RhdHVzID09IDAgJiYgeGhyLnJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgb25sb2FkKHhoci5yZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIG9uZXJyb3IoKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB4aHIub25lcnJvciA9IG9uZXJyb3I7CiAgICAgICAgICAgICAgICB4aHIuc2VuZChudWxsKTsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNldFdpbmRvd1RpdGxlID0gZnVuY3Rpb24odGl0bGUpIHsKICAgICAgICAgICAgICBkb2N1bWVudC50aXRsZSA9IHRpdGxlOwogICAgICAgICAgICB9OwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBvdXQgPSBNb2R1bGVbInByaW50Il0gfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTsKICAgICAgICAgIHZhciBlcnIgPSBNb2R1bGVbInByaW50RXJyIl0gfHwgY29uc29sZS53YXJuLmJpbmQoY29uc29sZSk7CiAgICAgICAgICBmb3IgKGtleSBpbiBtb2R1bGVPdmVycmlkZXMpIHsKICAgICAgICAgICAgaWYgKG1vZHVsZU92ZXJyaWRlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgICAgTW9kdWxlW2tleV0gPSBtb2R1bGVPdmVycmlkZXNba2V5XTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgbW9kdWxlT3ZlcnJpZGVzID0gbnVsbDsKICAgICAgICAgIGlmIChNb2R1bGVbImFyZ3VtZW50cyJdKQogICAgICAgICAgICBhcmd1bWVudHNfID0gTW9kdWxlWyJhcmd1bWVudHMiXTsKICAgICAgICAgIGlmIChNb2R1bGVbInRoaXNQcm9ncmFtIl0pCiAgICAgICAgICAgIHRoaXNQcm9ncmFtID0gTW9kdWxlWyJ0aGlzUHJvZ3JhbSJdOwogICAgICAgICAgaWYgKE1vZHVsZVsicXVpdCJdKQogICAgICAgICAgICBxdWl0XyA9IE1vZHVsZVsicXVpdCJdOwogICAgICAgICAgdmFyIHRlbXBSZXQwID0gMDsKICAgICAgICAgIHZhciBzZXRUZW1wUmV0MCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgIHRlbXBSZXQwID0gdmFsdWU7CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIHdhc21CaW5hcnk7CiAgICAgICAgICBpZiAoTW9kdWxlWyJ3YXNtQmluYXJ5Il0pCiAgICAgICAgICAgIHdhc21CaW5hcnkgPSBNb2R1bGVbIndhc21CaW5hcnkiXTsKICAgICAgICAgIHZhciBub0V4aXRSdW50aW1lID0gTW9kdWxlWyJub0V4aXRSdW50aW1lIl0gfHwgdHJ1ZTsKICAgICAgICAgIGlmICh0eXBlb2YgV2ViQXNzZW1ibHkgIT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgIGFib3J0KCJubyBuYXRpdmUgd2FzbSBzdXBwb3J0IGRldGVjdGVkIik7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgd2FzbU1lbW9yeTsKICAgICAgICAgIHZhciBBQk9SVCA9IGZhbHNlOwogICAgICAgICAgdmFyIEVYSVRTVEFUVVM7CiAgICAgICAgICBmdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCB0ZXh0KSB7CiAgICAgICAgICAgIGlmICghY29uZGl0aW9uKSB7CiAgICAgICAgICAgICAgYWJvcnQoIkFzc2VydGlvbiBmYWlsZWQ6ICIgKyB0ZXh0KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdmFyIFVURjhEZWNvZGVyID0gdHlwZW9mIFRleHREZWNvZGVyICE9PSAidW5kZWZpbmVkIiA/IG5ldyBUZXh0RGVjb2RlcigidXRmOCIpIDogdm9pZCAwOwogICAgICAgICAgZnVuY3Rpb24gVVRGOEFycmF5VG9TdHJpbmcoaGVhcCwgaWR4LCBtYXhCeXRlc1RvUmVhZCkgewogICAgICAgICAgICB2YXIgZW5kSWR4ID0gaWR4ICsgbWF4Qnl0ZXNUb1JlYWQ7CiAgICAgICAgICAgIHZhciBlbmRQdHIgPSBpZHg7CiAgICAgICAgICAgIHdoaWxlIChoZWFwW2VuZFB0cl0gJiYgIShlbmRQdHIgPj0gZW5kSWR4KSkKICAgICAgICAgICAgICArK2VuZFB0cjsKICAgICAgICAgICAgaWYgKGVuZFB0ciAtIGlkeCA+IDE2ICYmIGhlYXAuc3ViYXJyYXkgJiYgVVRGOERlY29kZXIpIHsKICAgICAgICAgICAgICByZXR1cm4gVVRGOERlY29kZXIuZGVjb2RlKGhlYXAuc3ViYXJyYXkoaWR4LCBlbmRQdHIpKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB2YXIgc3RyID0gIiI7CiAgICAgICAgICAgICAgd2hpbGUgKGlkeCA8IGVuZFB0cikgewogICAgICAgICAgICAgICAgdmFyIHUwID0gaGVhcFtpZHgrK107CiAgICAgICAgICAgICAgICBpZiAoISh1MCAmIDEyOCkpIHsKICAgICAgICAgICAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodTApOwogICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciB1MTIgPSBoZWFwW2lkeCsrXSAmIDYzOwogICAgICAgICAgICAgICAgaWYgKCh1MCAmIDIyNCkgPT0gMTkyKSB7CiAgICAgICAgICAgICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCh1MCAmIDMxKSA8PCA2IHwgdTEyKTsKICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgdTIyID0gaGVhcFtpZHgrK10gJiA2MzsKICAgICAgICAgICAgICAgIGlmICgodTAgJiAyNDApID09IDIyNCkgewogICAgICAgICAgICAgICAgICB1MCA9ICh1MCAmIDE1KSA8PCAxMiB8IHUxMiA8PCA2IHwgdTIyOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgdTAgPSAodTAgJiA3KSA8PCAxOCB8IHUxMiA8PCAxMiB8IHUyMiA8PCA2IHwgaGVhcFtpZHgrK10gJiA2MzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh1MCA8IDY1NTM2KSB7CiAgICAgICAgICAgICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHUwKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHZhciBjaCA9IHUwIC0gNjU1MzY7CiAgICAgICAgICAgICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2IHwgY2ggPj4gMTAsIDU2MzIwIHwgY2ggJiAxMDIzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHN0cjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIFVURjhUb1N0cmluZyhwdHIsIG1heEJ5dGVzVG9SZWFkKSB7CiAgICAgICAgICAgIHJldHVybiBwdHIgPyBVVEY4QXJyYXlUb1N0cmluZyhIRUFQVTgsIHB0ciwgbWF4Qnl0ZXNUb1JlYWQpIDogIiI7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBzdHJpbmdUb1VURjhBcnJheShzdHIsIGhlYXAsIG91dElkeCwgbWF4Qnl0ZXNUb1dyaXRlKSB7CiAgICAgICAgICAgIGlmICghKG1heEJ5dGVzVG9Xcml0ZSA+IDApKQogICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICB2YXIgc3RhcnRJZHggPSBvdXRJZHg7CiAgICAgICAgICAgIHZhciBlbmRJZHggPSBvdXRJZHggKyBtYXhCeXRlc1RvV3JpdGUgLSAxOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgIHZhciB1MyA9IHN0ci5jaGFyQ29kZUF0KGkpOwogICAgICAgICAgICAgIGlmICh1MyA+PSA1NTI5NiAmJiB1MyA8PSA1NzM0MykgewogICAgICAgICAgICAgICAgdmFyIHUxMiA9IHN0ci5jaGFyQ29kZUF0KCsraSk7CiAgICAgICAgICAgICAgICB1MyA9IDY1NTM2ICsgKCh1MyAmIDEwMjMpIDw8IDEwKSB8IHUxMiAmIDEwMjM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh1MyA8PSAxMjcpIHsKICAgICAgICAgICAgICAgIGlmIChvdXRJZHggPj0gZW5kSWR4KQogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGhlYXBbb3V0SWR4KytdID0gdTM7CiAgICAgICAgICAgICAgfSBlbHNlIGlmICh1MyA8PSAyMDQ3KSB7CiAgICAgICAgICAgICAgICBpZiAob3V0SWR4ICsgMSA+PSBlbmRJZHgpCiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgaGVhcFtvdXRJZHgrK10gPSAxOTIgfCB1MyA+PiA2OwogICAgICAgICAgICAgICAgaGVhcFtvdXRJZHgrK10gPSAxMjggfCB1MyAmIDYzOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAodTMgPD0gNjU1MzUpIHsKICAgICAgICAgICAgICAgIGlmIChvdXRJZHggKyAyID49IGVuZElkeCkKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBoZWFwW291dElkeCsrXSA9IDIyNCB8IHUzID4+IDEyOwogICAgICAgICAgICAgICAgaGVhcFtvdXRJZHgrK10gPSAxMjggfCB1MyA+PiA2ICYgNjM7CiAgICAgICAgICAgICAgICBoZWFwW291dElkeCsrXSA9IDEyOCB8IHUzICYgNjM7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmIChvdXRJZHggKyAzID49IGVuZElkeCkKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBoZWFwW291dElkeCsrXSA9IDI0MCB8IHUzID4+IDE4OwogICAgICAgICAgICAgICAgaGVhcFtvdXRJZHgrK10gPSAxMjggfCB1MyA+PiAxMiAmIDYzOwogICAgICAgICAgICAgICAgaGVhcFtvdXRJZHgrK10gPSAxMjggfCB1MyA+PiA2ICYgNjM7CiAgICAgICAgICAgICAgICBoZWFwW291dElkeCsrXSA9IDEyOCB8IHUzICYgNjM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGhlYXBbb3V0SWR4XSA9IDA7CiAgICAgICAgICAgIHJldHVybiBvdXRJZHggLSBzdGFydElkeDsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHN0cmluZ1RvVVRGOChzdHIsIG91dFB0ciwgbWF4Qnl0ZXNUb1dyaXRlKSB7CiAgICAgICAgICAgIHJldHVybiBzdHJpbmdUb1VURjhBcnJheShzdHIsIEhFQVBVOCwgb3V0UHRyLCBtYXhCeXRlc1RvV3JpdGUpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gbGVuZ3RoQnl0ZXNVVEY4KHN0cikgewogICAgICAgICAgICB2YXIgbGVuID0gMDsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICB2YXIgdTMgPSBzdHIuY2hhckNvZGVBdChpKTsKICAgICAgICAgICAgICBpZiAodTMgPj0gNTUyOTYgJiYgdTMgPD0gNTczNDMpCiAgICAgICAgICAgICAgICB1MyA9IDY1NTM2ICsgKCh1MyAmIDEwMjMpIDw8IDEwKSB8IHN0ci5jaGFyQ29kZUF0KCsraSkgJiAxMDIzOwogICAgICAgICAgICAgIGlmICh1MyA8PSAxMjcpCiAgICAgICAgICAgICAgICArK2xlbjsKICAgICAgICAgICAgICBlbHNlIGlmICh1MyA8PSAyMDQ3KQogICAgICAgICAgICAgICAgbGVuICs9IDI7CiAgICAgICAgICAgICAgZWxzZSBpZiAodTMgPD0gNjU1MzUpCiAgICAgICAgICAgICAgICBsZW4gKz0gMzsKICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBsZW4gKz0gNDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbGVuOwogICAgICAgICAgfQogICAgICAgICAgdmFyIFVURjE2RGVjb2RlciA9IHR5cGVvZiBUZXh0RGVjb2RlciAhPT0gInVuZGVmaW5lZCIgPyBuZXcgVGV4dERlY29kZXIoInV0Zi0xNmxlIikgOiB2b2lkIDA7CiAgICAgICAgICBmdW5jdGlvbiBVVEYxNlRvU3RyaW5nKHB0ciwgbWF4Qnl0ZXNUb1JlYWQpIHsKICAgICAgICAgICAgdmFyIGVuZFB0ciA9IHB0cjsKICAgICAgICAgICAgdmFyIGlkeCA9IGVuZFB0ciA+PiAxOwogICAgICAgICAgICB2YXIgbWF4SWR4ID0gaWR4ICsgbWF4Qnl0ZXNUb1JlYWQgLyAyOwogICAgICAgICAgICB3aGlsZSAoIShpZHggPj0gbWF4SWR4KSAmJiBIRUFQVTE2W2lkeF0pCiAgICAgICAgICAgICAgKytpZHg7CiAgICAgICAgICAgIGVuZFB0ciA9IGlkeCA8PCAxOwogICAgICAgICAgICBpZiAoZW5kUHRyIC0gcHRyID4gMzIgJiYgVVRGMTZEZWNvZGVyKSB7CiAgICAgICAgICAgICAgcmV0dXJuIFVURjE2RGVjb2Rlci5kZWNvZGUoSEVBUFU4LnN1YmFycmF5KHB0ciwgZW5kUHRyKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdmFyIHN0ciA9ICIiOwogICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyAhKGkgPj0gbWF4Qnl0ZXNUb1JlYWQgLyAyKTsgKytpKSB7CiAgICAgICAgICAgICAgICB2YXIgY29kZVVuaXQgPSBIRUFQMTZbcHRyICsgaSAqIDIgPj4gMV07CiAgICAgICAgICAgICAgICBpZiAoY29kZVVuaXQgPT0gMCkKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlVW5pdCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBzdHI7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHN0cmluZ1RvVVRGMTYoc3RyLCBvdXRQdHIsIG1heEJ5dGVzVG9Xcml0ZSkgewogICAgICAgICAgICBpZiAobWF4Qnl0ZXNUb1dyaXRlID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICBtYXhCeXRlc1RvV3JpdGUgPSAyMTQ3NDgzNjQ3OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChtYXhCeXRlc1RvV3JpdGUgPCAyKQogICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICBtYXhCeXRlc1RvV3JpdGUgLT0gMjsKICAgICAgICAgICAgdmFyIHN0YXJ0UHRyID0gb3V0UHRyOwogICAgICAgICAgICB2YXIgbnVtQ2hhcnNUb1dyaXRlID0gbWF4Qnl0ZXNUb1dyaXRlIDwgc3RyLmxlbmd0aCAqIDIgPyBtYXhCeXRlc1RvV3JpdGUgLyAyIDogc3RyLmxlbmd0aDsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1DaGFyc1RvV3JpdGU7ICsraSkgewogICAgICAgICAgICAgIHZhciBjb2RlVW5pdCA9IHN0ci5jaGFyQ29kZUF0KGkpOwogICAgICAgICAgICAgIEhFQVAxNltvdXRQdHIgPj4gMV0gPSBjb2RlVW5pdDsKICAgICAgICAgICAgICBvdXRQdHIgKz0gMjsKICAgICAgICAgICAgfQogICAgICAgICAgICBIRUFQMTZbb3V0UHRyID4+IDFdID0gMDsKICAgICAgICAgICAgcmV0dXJuIG91dFB0ciAtIHN0YXJ0UHRyOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gbGVuZ3RoQnl0ZXNVVEYxNihzdHIpIHsKICAgICAgICAgICAgcmV0dXJuIHN0ci5sZW5ndGggKiAyOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gVVRGMzJUb1N0cmluZyhwdHIsIG1heEJ5dGVzVG9SZWFkKSB7CiAgICAgICAgICAgIHZhciBpID0gMDsKICAgICAgICAgICAgdmFyIHN0ciA9ICIiOwogICAgICAgICAgICB3aGlsZSAoIShpID49IG1heEJ5dGVzVG9SZWFkIC8gNCkpIHsKICAgICAgICAgICAgICB2YXIgdXRmMzIgPSBIRUFQMzJbcHRyICsgaSAqIDQgPj4gMl07CiAgICAgICAgICAgICAgaWYgKHV0ZjMyID09IDApCiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICArK2k7CiAgICAgICAgICAgICAgaWYgKHV0ZjMyID49IDY1NTM2KSB7CiAgICAgICAgICAgICAgICB2YXIgY2ggPSB1dGYzMiAtIDY1NTM2OwogICAgICAgICAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTYgfCBjaCA+PiAxMCwgNTYzMjAgfCBjaCAmIDEwMjMpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh1dGYzMik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzdHI7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBzdHJpbmdUb1VURjMyKHN0ciwgb3V0UHRyLCBtYXhCeXRlc1RvV3JpdGUpIHsKICAgICAgICAgICAgaWYgKG1heEJ5dGVzVG9Xcml0ZSA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgbWF4Qnl0ZXNUb1dyaXRlID0gMjE0NzQ4MzY0NzsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobWF4Qnl0ZXNUb1dyaXRlIDwgNCkKICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgdmFyIHN0YXJ0UHRyID0gb3V0UHRyOwogICAgICAgICAgICB2YXIgZW5kUHRyID0gc3RhcnRQdHIgKyBtYXhCeXRlc1RvV3JpdGUgLSA0OwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgIHZhciBjb2RlVW5pdCA9IHN0ci5jaGFyQ29kZUF0KGkpOwogICAgICAgICAgICAgIGlmIChjb2RlVW5pdCA+PSA1NTI5NiAmJiBjb2RlVW5pdCA8PSA1NzM0MykgewogICAgICAgICAgICAgICAgdmFyIHRyYWlsU3Vycm9nYXRlID0gc3RyLmNoYXJDb2RlQXQoKytpKTsKICAgICAgICAgICAgICAgIGNvZGVVbml0ID0gNjU1MzYgKyAoKGNvZGVVbml0ICYgMTAyMykgPDwgMTApIHwgdHJhaWxTdXJyb2dhdGUgJiAxMDIzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBIRUFQMzJbb3V0UHRyID4+IDJdID0gY29kZVVuaXQ7CiAgICAgICAgICAgICAgb3V0UHRyICs9IDQ7CiAgICAgICAgICAgICAgaWYgKG91dFB0ciArIDQgPiBlbmRQdHIpCiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBIRUFQMzJbb3V0UHRyID4+IDJdID0gMDsKICAgICAgICAgICAgcmV0dXJuIG91dFB0ciAtIHN0YXJ0UHRyOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gbGVuZ3RoQnl0ZXNVVEYzMihzdHIpIHsKICAgICAgICAgICAgdmFyIGxlbiA9IDA7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgdmFyIGNvZGVVbml0ID0gc3RyLmNoYXJDb2RlQXQoaSk7CiAgICAgICAgICAgICAgaWYgKGNvZGVVbml0ID49IDU1Mjk2ICYmIGNvZGVVbml0IDw9IDU3MzQzKQogICAgICAgICAgICAgICAgKytpOwogICAgICAgICAgICAgIGxlbiArPSA0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBsZW47CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBhbGlnblVwKHgsIG11bHRpcGxlKSB7CiAgICAgICAgICAgIGlmICh4ICUgbXVsdGlwbGUgPiAwKSB7CiAgICAgICAgICAgICAgeCArPSBtdWx0aXBsZSAtIHggJSBtdWx0aXBsZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4geDsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBidWZmZXIsIEhFQVA4LCBIRUFQVTgsIEhFQVAxNiwgSEVBUFUxNiwgSEVBUDMyLCBIRUFQVTMyLCBIRUFQRjMyLCBIRUFQRjY0OwogICAgICAgICAgZnVuY3Rpb24gdXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3MoYnVmKSB7CiAgICAgICAgICAgIGJ1ZmZlciA9IGJ1ZjsKICAgICAgICAgICAgTW9kdWxlWyJIRUFQOCJdID0gSEVBUDggPSBuZXcgSW50OEFycmF5KGJ1Zik7CiAgICAgICAgICAgIE1vZHVsZVsiSEVBUDE2Il0gPSBIRUFQMTYgPSBuZXcgSW50MTZBcnJheShidWYpOwogICAgICAgICAgICBNb2R1bGVbIkhFQVAzMiJdID0gSEVBUDMyID0gbmV3IEludDMyQXJyYXkoYnVmKTsKICAgICAgICAgICAgTW9kdWxlWyJIRUFQVTgiXSA9IEhFQVBVOCA9IG5ldyBVaW50OEFycmF5KGJ1Zik7CiAgICAgICAgICAgIE1vZHVsZVsiSEVBUFUxNiJdID0gSEVBUFUxNiA9IG5ldyBVaW50MTZBcnJheShidWYpOwogICAgICAgICAgICBNb2R1bGVbIkhFQVBVMzIiXSA9IEhFQVBVMzIgPSBuZXcgVWludDMyQXJyYXkoYnVmKTsKICAgICAgICAgICAgTW9kdWxlWyJIRUFQRjMyIl0gPSBIRUFQRjMyID0gbmV3IEZsb2F0MzJBcnJheShidWYpOwogICAgICAgICAgICBNb2R1bGVbIkhFQVBGNjQiXSA9IEhFQVBGNjQgPSBuZXcgRmxvYXQ2NEFycmF5KGJ1Zik7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgSU5JVElBTF9NRU1PUlkgPSBNb2R1bGVbIklOSVRJQUxfTUVNT1JZIl0gfHwgMTY3NzcyMTY7CiAgICAgICAgICB2YXIgd2FzbVRhYmxlOwogICAgICAgICAgdmFyIF9fQVRQUkVSVU5fXyA9IFtdOwogICAgICAgICAgdmFyIF9fQVRJTklUX18gPSBbXTsKICAgICAgICAgIHZhciBfX0FUTUFJTl9fID0gW107CiAgICAgICAgICB2YXIgX19BVFBPU1RSVU5fXyA9IFtdOwogICAgICAgICAgdmFyIHJ1bnRpbWVJbml0aWFsaXplZCA9IGZhbHNlOwogICAgICAgICAgZnVuY3Rpb24gcHJlUnVuKCkgewogICAgICAgICAgICBpZiAoTW9kdWxlWyJwcmVSdW4iXSkgewogICAgICAgICAgICAgIGlmICh0eXBlb2YgTW9kdWxlWyJwcmVSdW4iXSA9PSAiZnVuY3Rpb24iKQogICAgICAgICAgICAgICAgTW9kdWxlWyJwcmVSdW4iXSA9IFtNb2R1bGVbInByZVJ1biJdXTsKICAgICAgICAgICAgICB3aGlsZSAoTW9kdWxlWyJwcmVSdW4iXS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIGFkZE9uUHJlUnVuKE1vZHVsZVsicHJlUnVuIl0uc2hpZnQoKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRQUkVSVU5fXyk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBpbml0UnVudGltZSgpIHsKICAgICAgICAgICAgcnVudGltZUluaXRpYWxpemVkID0gdHJ1ZTsKICAgICAgICAgICAgY2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVElOSVRfXyk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBwcmVNYWluKCkgewogICAgICAgICAgICBjYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUTUFJTl9fKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHBvc3RSdW4oKSB7CiAgICAgICAgICAgIGlmIChNb2R1bGVbInBvc3RSdW4iXSkgewogICAgICAgICAgICAgIGlmICh0eXBlb2YgTW9kdWxlWyJwb3N0UnVuIl0gPT0gImZ1bmN0aW9uIikKICAgICAgICAgICAgICAgIE1vZHVsZVsicG9zdFJ1biJdID0gW01vZHVsZVsicG9zdFJ1biJdXTsKICAgICAgICAgICAgICB3aGlsZSAoTW9kdWxlWyJwb3N0UnVuIl0ubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBhZGRPblBvc3RSdW4oTW9kdWxlWyJwb3N0UnVuIl0uc2hpZnQoKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRQT1NUUlVOX18pOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gYWRkT25QcmVSdW4oY2IpIHsKICAgICAgICAgICAgX19BVFBSRVJVTl9fLnVuc2hpZnQoY2IpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gYWRkT25Jbml0KGNiKSB7CiAgICAgICAgICAgIF9fQVRJTklUX18udW5zaGlmdChjYik7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBhZGRPblBvc3RSdW4oY2IpIHsKICAgICAgICAgICAgX19BVFBPU1RSVU5fXy51bnNoaWZ0KGNiKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBydW5EZXBlbmRlbmNpZXMgPSAwOwogICAgICAgICAgdmFyIHJ1bkRlcGVuZGVuY3lXYXRjaGVyID0gbnVsbDsKICAgICAgICAgIHZhciBkZXBlbmRlbmNpZXNGdWxmaWxsZWQgPSBudWxsOwogICAgICAgICAgZnVuY3Rpb24gYWRkUnVuRGVwZW5kZW5jeShpZCkgewogICAgICAgICAgICBydW5EZXBlbmRlbmNpZXMrKzsKICAgICAgICAgICAgaWYgKE1vZHVsZVsibW9uaXRvclJ1bkRlcGVuZGVuY2llcyJdKSB7CiAgICAgICAgICAgICAgTW9kdWxlWyJtb25pdG9yUnVuRGVwZW5kZW5jaWVzIl0ocnVuRGVwZW5kZW5jaWVzKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gcmVtb3ZlUnVuRGVwZW5kZW5jeShpZCkgewogICAgICAgICAgICBydW5EZXBlbmRlbmNpZXMtLTsKICAgICAgICAgICAgaWYgKE1vZHVsZVsibW9uaXRvclJ1bkRlcGVuZGVuY2llcyJdKSB7CiAgICAgICAgICAgICAgTW9kdWxlWyJtb25pdG9yUnVuRGVwZW5kZW5jaWVzIl0ocnVuRGVwZW5kZW5jaWVzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocnVuRGVwZW5kZW5jaWVzID09IDApIHsKICAgICAgICAgICAgICBpZiAocnVuRGVwZW5kZW5jeVdhdGNoZXIgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocnVuRGVwZW5kZW5jeVdhdGNoZXIpOwogICAgICAgICAgICAgICAgcnVuRGVwZW5kZW5jeVdhdGNoZXIgPSBudWxsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoZGVwZW5kZW5jaWVzRnVsZmlsbGVkKSB7CiAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBkZXBlbmRlbmNpZXNGdWxmaWxsZWQ7CiAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXNGdWxmaWxsZWQgPSBudWxsOwogICAgICAgICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIE1vZHVsZVsicHJlbG9hZGVkSW1hZ2VzIl0gPSB7fTsKICAgICAgICAgIE1vZHVsZVsicHJlbG9hZGVkQXVkaW9zIl0gPSB7fTsKICAgICAgICAgIGZ1bmN0aW9uIGFib3J0KHdoYXQpIHsKICAgICAgICAgICAgaWYgKE1vZHVsZVsib25BYm9ydCJdKSB7CiAgICAgICAgICAgICAgTW9kdWxlWyJvbkFib3J0Il0od2hhdCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgd2hhdCArPSAiIjsKICAgICAgICAgICAgZXJyKHdoYXQpOwogICAgICAgICAgICBBQk9SVCA9IHRydWU7CiAgICAgICAgICAgIEVYSVRTVEFUVVMgPSAxOwogICAgICAgICAgICB3aGF0ID0gImFib3J0KCIgKyB3aGF0ICsgIikuIEJ1aWxkIHdpdGggLXMgQVNTRVJUSU9OUz0xIGZvciBtb3JlIGluZm8uIjsKICAgICAgICAgICAgdmFyIGUgPSBuZXcgV2ViQXNzZW1ibHkuUnVudGltZUVycm9yKHdoYXQpOwogICAgICAgICAgICByZWFkeVByb21pc2VSZWplY3QoZSk7CiAgICAgICAgICAgIHRocm93IGU7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBoYXNQcmVmaXgoc3RyLCBwcmVmaXgpIHsKICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCA/IHN0ci5zdGFydHNXaXRoKHByZWZpeCkgOiBzdHIuaW5kZXhPZihwcmVmaXgpID09PSAwOwogICAgICAgICAgfQogICAgICAgICAgdmFyIGRhdGFVUklQcmVmaXggPSAiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LCI7CiAgICAgICAgICBmdW5jdGlvbiBpc0RhdGFVUkkoZmlsZW5hbWUpIHsKICAgICAgICAgICAgcmV0dXJuIGhhc1ByZWZpeChmaWxlbmFtZSwgZGF0YVVSSVByZWZpeCk7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgZmlsZVVSSVByZWZpeCA9ICJmaWxlOi8vIjsKICAgICAgICAgIGZ1bmN0aW9uIGlzRmlsZVVSSShmaWxlbmFtZSkgewogICAgICAgICAgICByZXR1cm4gaGFzUHJlZml4KGZpbGVuYW1lLCBmaWxlVVJJUHJlZml4KTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciB3YXNtQmluYXJ5RmlsZSA9ICJiYXNpc190cmFuc2NvZGVyLndhc20iOwogICAgICAgICAgaWYgKCFpc0RhdGFVUkkod2FzbUJpbmFyeUZpbGUpKSB7CiAgICAgICAgICAgIHdhc21CaW5hcnlGaWxlID0gbG9jYXRlRmlsZSh3YXNtQmluYXJ5RmlsZSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBnZXRCaW5hcnkoZmlsZSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGlmIChmaWxlID09IHdhc21CaW5hcnlGaWxlICYmIHdhc21CaW5hcnkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSh3YXNtQmluYXJ5KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHJlYWRCaW5hcnkpIHsKICAgICAgICAgICAgICAgIHJldHVybiByZWFkQmluYXJ5KGZpbGUpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aHJvdyAiYm90aCBhc3luYyBhbmQgc3luYyBmZXRjaGluZyBvZiB0aGUgd2FzbSBmYWlsZWQiOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaCAoZXJyMikgewogICAgICAgICAgICAgIGFib3J0KGVycjIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBnZXRCaW5hcnlQcm9taXNlKCkgewogICAgICAgICAgICBpZiAoIXdhc21CaW5hcnkgJiYgKEVOVklST05NRU5UX0lTX1dFQiB8fCBFTlZJUk9OTUVOVF9JU19XT1JLRVIpKSB7CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmZXRjaCA9PT0gImZ1bmN0aW9uIiAmJiAhaXNGaWxlVVJJKHdhc21CaW5hcnlGaWxlKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKHdhc21CaW5hcnlGaWxlLCB7IGNyZWRlbnRpYWxzOiAic2FtZS1vcmlnaW4iIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZVsib2siXSkgewogICAgICAgICAgICAgICAgICAgIHRocm93ICJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICciICsgd2FzbUJpbmFyeUZpbGUgKyAiJyI7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlWyJhcnJheUJ1ZmZlciJdKCk7CiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEJpbmFyeSh3YXNtQmluYXJ5RmlsZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKHJlYWRBc3luYykgewogICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgICAgICAgICAgcmVhZEFzeW5jKHdhc21CaW5hcnlGaWxlLCBmdW5jdGlvbihyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgVWludDhBcnJheShyZXNwb25zZSkpOwogICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICByZXR1cm4gZ2V0QmluYXJ5KHdhc21CaW5hcnlGaWxlKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVXYXNtKCkgewogICAgICAgICAgICB2YXIgaW5mbyA9IHsgImEiOiBhc21MaWJyYXJ5QXJnIH07CiAgICAgICAgICAgIGZ1bmN0aW9uIHJlY2VpdmVJbnN0YW5jZShpbnN0YW5jZSwgbW9kdWxlMikgewogICAgICAgICAgICAgIHZhciBleHBvcnRzNCA9IGluc3RhbmNlLmV4cG9ydHM7CiAgICAgICAgICAgICAgTW9kdWxlWyJhc20iXSA9IGV4cG9ydHM0OwogICAgICAgICAgICAgIHdhc21NZW1vcnkgPSBNb2R1bGVbImFzbSJdWyJLIl07CiAgICAgICAgICAgICAgdXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3Mod2FzbU1lbW9yeS5idWZmZXIpOwogICAgICAgICAgICAgIHdhc21UYWJsZSA9IE1vZHVsZVsiYXNtIl1bIk8iXTsKICAgICAgICAgICAgICBhZGRPbkluaXQoTW9kdWxlWyJhc20iXVsiTCJdKTsKICAgICAgICAgICAgICByZW1vdmVSdW5EZXBlbmRlbmN5KCJ3YXNtLWluc3RhbnRpYXRlIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYWRkUnVuRGVwZW5kZW5jeSgid2FzbS1pbnN0YW50aWF0ZSIpOwogICAgICAgICAgICBmdW5jdGlvbiByZWNlaXZlSW5zdGFudGlhdGVkU291cmNlKG91dHB1dCkgewogICAgICAgICAgICAgIHJlY2VpdmVJbnN0YW5jZShvdXRwdXRbImluc3RhbmNlIl0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGluc3RhbnRpYXRlQXJyYXlCdWZmZXIocmVjZWl2ZXIpIHsKICAgICAgICAgICAgICByZXR1cm4gZ2V0QmluYXJ5UHJvbWlzZSgpLnRoZW4oZnVuY3Rpb24oYmluYXJ5KSB7CiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoYmluYXJ5LCBpbmZvKTsKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICAgICAgfSkudGhlbihyZWNlaXZlciwgZnVuY3Rpb24ocmVhc29uKSB7CiAgICAgICAgICAgICAgICBlcnIoImZhaWxlZCB0byBhc3luY2hyb25vdXNseSBwcmVwYXJlIHdhc206ICIgKyByZWFzb24pOwogICAgICAgICAgICAgICAgYWJvcnQocmVhc29uKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBpbnN0YW50aWF0ZUFzeW5jKCkgewogICAgICAgICAgICAgIGlmICghd2FzbUJpbmFyeSAmJiB0eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcgPT09ICJmdW5jdGlvbiIgJiYgIWlzRGF0YVVSSSh3YXNtQmluYXJ5RmlsZSkgJiYgIWlzRmlsZVVSSSh3YXNtQmluYXJ5RmlsZSkgJiYgdHlwZW9mIGZldGNoID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2god2FzbUJpbmFyeUZpbGUsIHsgY3JlZGVudGlhbHM6ICJzYW1lLW9yaWdpbiIgfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcocmVzcG9uc2UsIGluZm8pOwogICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LnRoZW4ocmVjZWl2ZUluc3RhbnRpYXRlZFNvdXJjZSwgZnVuY3Rpb24ocmVhc29uKSB7CiAgICAgICAgICAgICAgICAgICAgZXJyKCJ3YXNtIHN0cmVhbWluZyBjb21waWxlIGZhaWxlZDogIiArIHJlYXNvbik7CiAgICAgICAgICAgICAgICAgICAgZXJyKCJmYWxsaW5nIGJhY2sgdG8gQXJyYXlCdWZmZXIgaW5zdGFudGlhdGlvbiIpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW50aWF0ZUFycmF5QnVmZmVyKHJlY2VpdmVJbnN0YW50aWF0ZWRTb3VyY2UpOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFudGlhdGVBcnJheUJ1ZmZlcihyZWNlaXZlSW5zdGFudGlhdGVkU291cmNlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKE1vZHVsZVsiaW5zdGFudGlhdGVXYXNtIl0pIHsKICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgdmFyIGV4cG9ydHMzID0gTW9kdWxlWyJpbnN0YW50aWF0ZVdhc20iXShpbmZvLCByZWNlaXZlSW5zdGFuY2UpOwogICAgICAgICAgICAgICAgcmV0dXJuIGV4cG9ydHMzOwogICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIGVycigiTW9kdWxlLmluc3RhbnRpYXRlV2FzbSBjYWxsYmFjayBmYWlsZWQgd2l0aCBlcnJvcjogIiArIGUpOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpbnN0YW50aWF0ZUFzeW5jKCkuY2F0Y2gocmVhZHlQcm9taXNlUmVqZWN0KTsKICAgICAgICAgICAgcmV0dXJuIHt9OwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gY2FsbFJ1bnRpbWVDYWxsYmFja3MoY2FsbGJhY2tzKSB7CiAgICAgICAgICAgIHdoaWxlIChjYWxsYmFja3MubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGNhbGxiYWNrcy5zaGlmdCgpOwogICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAgICAgY2FsbGJhY2soTW9kdWxlKTsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgZnVuYyA9IGNhbGxiYWNrLmZ1bmM7CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jID09PSAibnVtYmVyIikgewogICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrLmFyZyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICAgIHdhc21UYWJsZS5nZXQoZnVuYykoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHdhc21UYWJsZS5nZXQoZnVuYykoY2FsbGJhY2suYXJnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZnVuYyhjYWxsYmFjay5hcmcgPT09IHZvaWQgMCA/IG51bGwgOiBjYWxsYmFjay5hcmcpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdmFyIHN0cnVjdFJlZ2lzdHJhdGlvbnMgPSB7fTsKICAgICAgICAgIGZ1bmN0aW9uIHJ1bkRlc3RydWN0b3JzKGRlc3RydWN0b3JzKSB7CiAgICAgICAgICAgIHdoaWxlIChkZXN0cnVjdG9ycy5sZW5ndGgpIHsKICAgICAgICAgICAgICB2YXIgcHRyID0gZGVzdHJ1Y3RvcnMucG9wKCk7CiAgICAgICAgICAgICAgdmFyIGRlbCA9IGRlc3RydWN0b3JzLnBvcCgpOwogICAgICAgICAgICAgIGRlbChwdHIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBzaW1wbGVSZWFkVmFsdWVGcm9tUG9pbnRlcihwb2ludGVyKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzWyJmcm9tV2lyZVR5cGUiXShIRUFQVTMyW3BvaW50ZXIgPj4gMl0pOwogICAgICAgICAgfQogICAgICAgICAgdmFyIGF3YWl0aW5nRGVwZW5kZW5jaWVzID0ge307CiAgICAgICAgICB2YXIgcmVnaXN0ZXJlZFR5cGVzID0ge307CiAgICAgICAgICB2YXIgdHlwZURlcGVuZGVuY2llcyA9IHt9OwogICAgICAgICAgdmFyIGNoYXJfMCA9IDQ4OwogICAgICAgICAgdmFyIGNoYXJfOSA9IDU3OwogICAgICAgICAgZnVuY3Rpb24gbWFrZUxlZ2FsRnVuY3Rpb25OYW1lKG5hbWUpIHsKICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gbmFtZSkgewogICAgICAgICAgICAgIHJldHVybiAiX3Vua25vd24iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1teYS16QS1aMC05X10vZywgIiQiKTsKICAgICAgICAgICAgdmFyIGYgPSBuYW1lLmNoYXJDb2RlQXQoMCk7CiAgICAgICAgICAgIGlmIChmID49IGNoYXJfMCAmJiBmIDw9IGNoYXJfOSkgewogICAgICAgICAgICAgIHJldHVybiAiXyIgKyBuYW1lOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJldHVybiBuYW1lOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVOYW1lZEZ1bmN0aW9uKG5hbWUsIGJvZHkpIHsKICAgICAgICAgICAgbmFtZSA9IG1ha2VMZWdhbEZ1bmN0aW9uTmFtZShuYW1lKTsKICAgICAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbigiYm9keSIsICJyZXR1cm4gZnVuY3Rpb24gIiArIG5hbWUgKyAnKCkge1xuICAgICJ1c2Ugc3RyaWN0IjsgICAgcmV0dXJuIGJvZHkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG4nKShib2R5KTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGV4dGVuZEVycm9yKGJhc2VFcnJvclR5cGUsIGVycm9yTmFtZSkgewogICAgICAgICAgICB2YXIgZXJyb3JDbGFzcyA9IGNyZWF0ZU5hbWVkRnVuY3Rpb24oZXJyb3JOYW1lLCBmdW5jdGlvbihtZXNzYWdlKSB7CiAgICAgICAgICAgICAgdGhpcy5uYW1lID0gZXJyb3JOYW1lOwogICAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7CiAgICAgICAgICAgICAgdmFyIHN0YWNrID0gbmV3IEVycm9yKG1lc3NhZ2UpLnN0YWNrOwogICAgICAgICAgICAgIGlmIChzdGFjayAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICB0aGlzLnN0YWNrID0gdGhpcy50b1N0cmluZygpICsgIlxuIiArIHN0YWNrLnJlcGxhY2UoL15FcnJvcig6W15cbl0qKT9cbi8sICIiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBlcnJvckNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoYmFzZUVycm9yVHlwZS5wcm90b3R5cGUpOwogICAgICAgICAgICBlcnJvckNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGVycm9yQ2xhc3M7CiAgICAgICAgICAgIGVycm9yQ2xhc3MucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgaWYgKHRoaXMubWVzc2FnZSA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uYW1lOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgIjogIiArIHRoaXMubWVzc2FnZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHJldHVybiBlcnJvckNsYXNzOwogICAgICAgICAgfQogICAgICAgICAgdmFyIEludGVybmFsRXJyb3IgPSB2b2lkIDA7CiAgICAgICAgICBmdW5jdGlvbiB0aHJvd0ludGVybmFsRXJyb3IobWVzc2FnZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgSW50ZXJuYWxFcnJvcihtZXNzYWdlKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHdoZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKG15VHlwZXMsIGRlcGVuZGVudFR5cGVzLCBnZXRUeXBlQ29udmVydGVycykgewogICAgICAgICAgICBteVR5cGVzLmZvckVhY2goZnVuY3Rpb24odHlwZSkgewogICAgICAgICAgICAgIHR5cGVEZXBlbmRlbmNpZXNbdHlwZV0gPSBkZXBlbmRlbnRUeXBlczsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGZ1bmN0aW9uIG9uQ29tcGxldGUodHlwZUNvbnZlcnRlcnMyKSB7CiAgICAgICAgICAgICAgdmFyIG15VHlwZUNvbnZlcnRlcnMgPSBnZXRUeXBlQ29udmVydGVycyh0eXBlQ29udmVydGVyczIpOwogICAgICAgICAgICAgIGlmIChteVR5cGVDb252ZXJ0ZXJzLmxlbmd0aCAhPT0gbXlUeXBlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIHRocm93SW50ZXJuYWxFcnJvcigiTWlzbWF0Y2hlZCB0eXBlIGNvbnZlcnRlciBjb3VudCIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG15VHlwZXMubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICAgIHJlZ2lzdGVyVHlwZShteVR5cGVzW2ldLCBteVR5cGVDb252ZXJ0ZXJzW2ldKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHR5cGVDb252ZXJ0ZXJzID0gbmV3IEFycmF5KGRlcGVuZGVudFR5cGVzLmxlbmd0aCk7CiAgICAgICAgICAgIHZhciB1bnJlZ2lzdGVyZWRUeXBlcyA9IFtdOwogICAgICAgICAgICB2YXIgcmVnaXN0ZXJlZCA9IDA7CiAgICAgICAgICAgIGRlcGVuZGVudFR5cGVzLmZvckVhY2goZnVuY3Rpb24oZHQsIGkpIHsKICAgICAgICAgICAgICBpZiAocmVnaXN0ZXJlZFR5cGVzLmhhc093blByb3BlcnR5KGR0KSkgewogICAgICAgICAgICAgICAgdHlwZUNvbnZlcnRlcnNbaV0gPSByZWdpc3RlcmVkVHlwZXNbZHRdOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB1bnJlZ2lzdGVyZWRUeXBlcy5wdXNoKGR0KTsKICAgICAgICAgICAgICAgIGlmICghYXdhaXRpbmdEZXBlbmRlbmNpZXMuaGFzT3duUHJvcGVydHkoZHQpKSB7CiAgICAgICAgICAgICAgICAgIGF3YWl0aW5nRGVwZW5kZW5jaWVzW2R0XSA9IFtdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYXdhaXRpbmdEZXBlbmRlbmNpZXNbZHRdLnB1c2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgIHR5cGVDb252ZXJ0ZXJzW2ldID0gcmVnaXN0ZXJlZFR5cGVzW2R0XTsKICAgICAgICAgICAgICAgICAgKytyZWdpc3RlcmVkOwogICAgICAgICAgICAgICAgICBpZiAocmVnaXN0ZXJlZCA9PT0gdW5yZWdpc3RlcmVkVHlwZXMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZSh0eXBlQ29udmVydGVycyk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGlmICgwID09PSB1bnJlZ2lzdGVyZWRUeXBlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICBvbkNvbXBsZXRlKHR5cGVDb252ZXJ0ZXJzKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbWJpbmRfZmluYWxpemVfdmFsdWVfb2JqZWN0KHN0cnVjdFR5cGUpIHsKICAgICAgICAgICAgdmFyIHJlZyA9IHN0cnVjdFJlZ2lzdHJhdGlvbnNbc3RydWN0VHlwZV07CiAgICAgICAgICAgIGRlbGV0ZSBzdHJ1Y3RSZWdpc3RyYXRpb25zW3N0cnVjdFR5cGVdOwogICAgICAgICAgICB2YXIgcmF3Q29uc3RydWN0b3IgPSByZWcucmF3Q29uc3RydWN0b3I7CiAgICAgICAgICAgIHZhciByYXdEZXN0cnVjdG9yID0gcmVnLnJhd0Rlc3RydWN0b3I7CiAgICAgICAgICAgIHZhciBmaWVsZFJlY29yZHMgPSByZWcuZmllbGRzOwogICAgICAgICAgICB2YXIgZmllbGRUeXBlcyA9IGZpZWxkUmVjb3Jkcy5tYXAoZnVuY3Rpb24oZmllbGQpIHsKICAgICAgICAgICAgICByZXR1cm4gZmllbGQuZ2V0dGVyUmV0dXJuVHlwZTsKICAgICAgICAgICAgfSkuY29uY2F0KGZpZWxkUmVjb3Jkcy5tYXAoZnVuY3Rpb24oZmllbGQpIHsKICAgICAgICAgICAgICByZXR1cm4gZmllbGQuc2V0dGVyQXJndW1lbnRUeXBlOwogICAgICAgICAgICB9KSk7CiAgICAgICAgICAgIHdoZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtzdHJ1Y3RUeXBlXSwgZmllbGRUeXBlcywgZnVuY3Rpb24oZmllbGRUeXBlczIpIHsKICAgICAgICAgICAgICB2YXIgZmllbGRzID0ge307CiAgICAgICAgICAgICAgZmllbGRSZWNvcmRzLmZvckVhY2goZnVuY3Rpb24oZmllbGQsIGkpIHsKICAgICAgICAgICAgICAgIHZhciBmaWVsZE5hbWUgPSBmaWVsZC5maWVsZE5hbWU7CiAgICAgICAgICAgICAgICB2YXIgZ2V0dGVyUmV0dXJuVHlwZSA9IGZpZWxkVHlwZXMyW2ldOwogICAgICAgICAgICAgICAgdmFyIGdldHRlciA9IGZpZWxkLmdldHRlcjsKICAgICAgICAgICAgICAgIHZhciBnZXR0ZXJDb250ZXh0ID0gZmllbGQuZ2V0dGVyQ29udGV4dDsKICAgICAgICAgICAgICAgIHZhciBzZXR0ZXJBcmd1bWVudFR5cGUgPSBmaWVsZFR5cGVzMltpICsgZmllbGRSZWNvcmRzLmxlbmd0aF07CiAgICAgICAgICAgICAgICB2YXIgc2V0dGVyID0gZmllbGQuc2V0dGVyOwogICAgICAgICAgICAgICAgdmFyIHNldHRlckNvbnRleHQgPSBmaWVsZC5zZXR0ZXJDb250ZXh0OwogICAgICAgICAgICAgICAgZmllbGRzW2ZpZWxkTmFtZV0gPSB7IHJlYWQ6IGZ1bmN0aW9uKHB0cikgewogICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0dGVyUmV0dXJuVHlwZVsiZnJvbVdpcmVUeXBlIl0oZ2V0dGVyKGdldHRlckNvbnRleHQsIHB0cikpOwogICAgICAgICAgICAgICAgfSwgd3JpdGU6IGZ1bmN0aW9uKHB0ciwgbykgewogICAgICAgICAgICAgICAgICB2YXIgZGVzdHJ1Y3RvcnMgPSBbXTsKICAgICAgICAgICAgICAgICAgc2V0dGVyKHNldHRlckNvbnRleHQsIHB0ciwgc2V0dGVyQXJndW1lbnRUeXBlWyJ0b1dpcmVUeXBlIl0oZGVzdHJ1Y3RvcnMsIG8pKTsKICAgICAgICAgICAgICAgICAgcnVuRGVzdHJ1Y3RvcnMoZGVzdHJ1Y3RvcnMpOwogICAgICAgICAgICAgICAgfSB9OwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIHJldHVybiBbeyBuYW1lOiByZWcubmFtZSwgImZyb21XaXJlVHlwZSI6IGZ1bmN0aW9uKHB0cikgewogICAgICAgICAgICAgICAgdmFyIHJ2ID0ge307CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIGZpZWxkcykgewogICAgICAgICAgICAgICAgICBydltpXSA9IGZpZWxkc1tpXS5yZWFkKHB0cik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByYXdEZXN0cnVjdG9yKHB0cik7CiAgICAgICAgICAgICAgICByZXR1cm4gcnY7CiAgICAgICAgICAgICAgfSwgInRvV2lyZVR5cGUiOiBmdW5jdGlvbihkZXN0cnVjdG9ycywgbykgewogICAgICAgICAgICAgICAgZm9yICh2YXIgZmllbGROYW1lIGluIGZpZWxkcykgewogICAgICAgICAgICAgICAgICBpZiAoIShmaWVsZE5hbWUgaW4gbykpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNaXNzaW5nIGZpZWxkOiAgIicgKyBmaWVsZE5hbWUgKyAnIicpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgcHRyID0gcmF3Q29uc3RydWN0b3IoKTsKICAgICAgICAgICAgICAgIGZvciAoZmllbGROYW1lIGluIGZpZWxkcykgewogICAgICAgICAgICAgICAgICBmaWVsZHNbZmllbGROYW1lXS53cml0ZShwdHIsIG9bZmllbGROYW1lXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoZGVzdHJ1Y3RvcnMgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgZGVzdHJ1Y3RvcnMucHVzaChyYXdEZXN0cnVjdG9yLCBwdHIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHB0cjsKICAgICAgICAgICAgICB9LCAiYXJnUGFja0FkdmFuY2UiOiA4LCAicmVhZFZhbHVlRnJvbVBvaW50ZXIiOiBzaW1wbGVSZWFkVmFsdWVGcm9tUG9pbnRlciwgZGVzdHJ1Y3RvckZ1bmN0aW9uOiByYXdEZXN0cnVjdG9yIH1dOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGdldFNoaWZ0RnJvbVNpemUoc2l6ZSkgewogICAgICAgICAgICBzd2l0Y2ggKHNpemUpIHsKICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICByZXR1cm4gMjsKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICByZXR1cm4gMzsKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiVW5rbm93biB0eXBlIHNpemU6ICIgKyBzaXplKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gZW1iaW5kX2luaXRfY2hhckNvZGVzKCkgewogICAgICAgICAgICB2YXIgY29kZXMgPSBuZXcgQXJyYXkoMjU2KTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkgewogICAgICAgICAgICAgIGNvZGVzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZShpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbWJpbmRfY2hhckNvZGVzID0gY29kZXM7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgZW1iaW5kX2NoYXJDb2RlcyA9IHZvaWQgMDsKICAgICAgICAgIGZ1bmN0aW9uIHJlYWRMYXRpbjFTdHJpbmcocHRyKSB7CiAgICAgICAgICAgIHZhciByZXQgPSAiIjsKICAgICAgICAgICAgdmFyIGMgPSBwdHI7CiAgICAgICAgICAgIHdoaWxlIChIRUFQVThbY10pIHsKICAgICAgICAgICAgICByZXQgKz0gZW1iaW5kX2NoYXJDb2Rlc1tIRUFQVThbYysrXV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBCaW5kaW5nRXJyb3IgPSB2b2lkIDA7CiAgICAgICAgICBmdW5jdGlvbiB0aHJvd0JpbmRpbmdFcnJvcihtZXNzYWdlKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBCaW5kaW5nRXJyb3IobWVzc2FnZSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiByZWdpc3RlclR5cGUocmF3VHlwZSwgcmVnaXN0ZXJlZEluc3RhbmNlLCBvcHRpb25zKSB7CiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogICAgICAgICAgICBpZiAoISgiYXJnUGFja0FkdmFuY2UiIGluIHJlZ2lzdGVyZWRJbnN0YW5jZSkpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJyZWdpc3RlclR5cGUgcmVnaXN0ZXJlZEluc3RhbmNlIHJlcXVpcmVzIGFyZ1BhY2tBZHZhbmNlIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIG5hbWUgPSByZWdpc3RlcmVkSW5zdGFuY2UubmFtZTsKICAgICAgICAgICAgaWYgKCFyYXdUeXBlKSB7CiAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoJ3R5cGUgIicgKyBuYW1lICsgJyIgbXVzdCBoYXZlIGEgcG9zaXRpdmUgaW50ZWdlciB0eXBlaWQgcG9pbnRlcicpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChyZWdpc3RlcmVkVHlwZXMuaGFzT3duUHJvcGVydHkocmF3VHlwZSkpIHsKICAgICAgICAgICAgICBpZiAob3B0aW9ucy5pZ25vcmVEdXBsaWNhdGVSZWdpc3RyYXRpb25zKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJDYW5ub3QgcmVnaXN0ZXIgdHlwZSAnIiArIG5hbWUgKyAiJyB0d2ljZSIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZWdpc3RlcmVkVHlwZXNbcmF3VHlwZV0gPSByZWdpc3RlcmVkSW5zdGFuY2U7CiAgICAgICAgICAgIGRlbGV0ZSB0eXBlRGVwZW5kZW5jaWVzW3Jhd1R5cGVdOwogICAgICAgICAgICBpZiAoYXdhaXRpbmdEZXBlbmRlbmNpZXMuaGFzT3duUHJvcGVydHkocmF3VHlwZSkpIHsKICAgICAgICAgICAgICB2YXIgY2FsbGJhY2tzID0gYXdhaXRpbmdEZXBlbmRlbmNpZXNbcmF3VHlwZV07CiAgICAgICAgICAgICAgZGVsZXRlIGF3YWl0aW5nRGVwZW5kZW5jaWVzW3Jhd1R5cGVdOwogICAgICAgICAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKGNiKSB7CiAgICAgICAgICAgICAgICBjYigpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9ib29sKHJhd1R5cGUsIG5hbWUsIHNpemUsIHRydWVWYWx1ZSwgZmFsc2VWYWx1ZSkgewogICAgICAgICAgICB2YXIgc2hpZnQgPSBnZXRTaGlmdEZyb21TaXplKHNpemUpOwogICAgICAgICAgICBuYW1lID0gcmVhZExhdGluMVN0cmluZyhuYW1lKTsKICAgICAgICAgICAgcmVnaXN0ZXJUeXBlKHJhd1R5cGUsIHsgbmFtZSwgImZyb21XaXJlVHlwZSI6IGZ1bmN0aW9uKHd0KSB7CiAgICAgICAgICAgICAgcmV0dXJuICEhd3Q7CiAgICAgICAgICAgIH0sICJ0b1dpcmVUeXBlIjogZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsIG8pIHsKICAgICAgICAgICAgICByZXR1cm4gbyA/IHRydWVWYWx1ZSA6IGZhbHNlVmFsdWU7CiAgICAgICAgICAgIH0sICJhcmdQYWNrQWR2YW5jZSI6IDgsICJyZWFkVmFsdWVGcm9tUG9pbnRlciI6IGZ1bmN0aW9uKHBvaW50ZXIpIHsKICAgICAgICAgICAgICB2YXIgaGVhcDsKICAgICAgICAgICAgICBpZiAoc2l6ZSA9PT0gMSkgewogICAgICAgICAgICAgICAgaGVhcCA9IEhFQVA4OwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2l6ZSA9PT0gMikgewogICAgICAgICAgICAgICAgaGVhcCA9IEhFQVAxNjsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNpemUgPT09IDQpIHsKICAgICAgICAgICAgICAgIGhlYXAgPSBIRUFQMzI7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlVua25vd24gYm9vbGVhbiB0eXBlIHNpemU6ICIgKyBuYW1lKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbImZyb21XaXJlVHlwZSJdKGhlYXBbcG9pbnRlciA+PiBzaGlmdF0pOwogICAgICAgICAgICB9LCBkZXN0cnVjdG9yRnVuY3Rpb246IG51bGwgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBDbGFzc0hhbmRsZV9pc0FsaWFzT2Yob3RoZXIpIHsKICAgICAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIENsYXNzSGFuZGxlKSkgewogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIENsYXNzSGFuZGxlKSkgewogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgbGVmdENsYXNzID0gdGhpcy4kJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzczsKICAgICAgICAgICAgdmFyIGxlZnQgPSB0aGlzLiQkLnB0cjsKICAgICAgICAgICAgdmFyIHJpZ2h0Q2xhc3MgPSBvdGhlci4kJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzczsKICAgICAgICAgICAgdmFyIHJpZ2h0ID0gb3RoZXIuJCQucHRyOwogICAgICAgICAgICB3aGlsZSAobGVmdENsYXNzLmJhc2VDbGFzcykgewogICAgICAgICAgICAgIGxlZnQgPSBsZWZ0Q2xhc3MudXBjYXN0KGxlZnQpOwogICAgICAgICAgICAgIGxlZnRDbGFzcyA9IGxlZnRDbGFzcy5iYXNlQ2xhc3M7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgd2hpbGUgKHJpZ2h0Q2xhc3MuYmFzZUNsYXNzKSB7CiAgICAgICAgICAgICAgcmlnaHQgPSByaWdodENsYXNzLnVwY2FzdChyaWdodCk7CiAgICAgICAgICAgICAgcmlnaHRDbGFzcyA9IHJpZ2h0Q2xhc3MuYmFzZUNsYXNzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBsZWZ0Q2xhc3MgPT09IHJpZ2h0Q2xhc3MgJiYgbGVmdCA9PT0gcmlnaHQ7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBzaGFsbG93Q29weUludGVybmFsUG9pbnRlcihvKSB7CiAgICAgICAgICAgIHJldHVybiB7IGNvdW50OiBvLmNvdW50LCBkZWxldGVTY2hlZHVsZWQ6IG8uZGVsZXRlU2NoZWR1bGVkLCBwcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZTogby5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZSwgcHRyOiBvLnB0ciwgcHRyVHlwZTogby5wdHJUeXBlLCBzbWFydFB0cjogby5zbWFydFB0ciwgc21hcnRQdHJUeXBlOiBvLnNtYXJ0UHRyVHlwZSB9OwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gdGhyb3dJbnN0YW5jZUFscmVhZHlEZWxldGVkKG9iaikgewogICAgICAgICAgICBmdW5jdGlvbiBnZXRJbnN0YW5jZVR5cGVOYW1lKGhhbmRsZSkgewogICAgICAgICAgICAgIHJldHVybiBoYW5kbGUuJCQucHRyVHlwZS5yZWdpc3RlcmVkQ2xhc3MubmFtZTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aHJvd0JpbmRpbmdFcnJvcihnZXRJbnN0YW5jZVR5cGVOYW1lKG9iaikgKyAiIGluc3RhbmNlIGFscmVhZHkgZGVsZXRlZCIpOwogICAgICAgICAgfQogICAgICAgICAgdmFyIGZpbmFsaXphdGlvbkdyb3VwID0gZmFsc2U7CiAgICAgICAgICBmdW5jdGlvbiBkZXRhY2hGaW5hbGl6ZXIoaGFuZGxlKSB7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBydW5EZXN0cnVjdG9yKCQkKSB7CiAgICAgICAgICAgIGlmICgkJC5zbWFydFB0cikgewogICAgICAgICAgICAgICQkLnNtYXJ0UHRyVHlwZS5yYXdEZXN0cnVjdG9yKCQkLnNtYXJ0UHRyKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAkJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzcy5yYXdEZXN0cnVjdG9yKCQkLnB0cik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHJlbGVhc2VDbGFzc0hhbmRsZSgkJCkgewogICAgICAgICAgICAkJC5jb3VudC52YWx1ZSAtPSAxOwogICAgICAgICAgICB2YXIgdG9EZWxldGUgPSAwID09PSAkJC5jb3VudC52YWx1ZTsKICAgICAgICAgICAgaWYgKHRvRGVsZXRlKSB7CiAgICAgICAgICAgICAgcnVuRGVzdHJ1Y3RvcigkJCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGF0dGFjaEZpbmFsaXplcihoYW5kbGUpIHsKICAgICAgICAgICAgaWYgKCJ1bmRlZmluZWQiID09PSB0eXBlb2YgRmluYWxpemF0aW9uR3JvdXApIHsKICAgICAgICAgICAgICBhdHRhY2hGaW5hbGl6ZXIgPSBmdW5jdGlvbihoYW5kbGUyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlMjsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIHJldHVybiBoYW5kbGU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZmluYWxpemF0aW9uR3JvdXAgPSBuZXcgRmluYWxpemF0aW9uR3JvdXAoZnVuY3Rpb24oaXRlcikgewogICAgICAgICAgICAgIGZvciAodmFyIHJlc3VsdCA9IGl0ZXIubmV4dCgpOyAhcmVzdWx0LmRvbmU7IHJlc3VsdCA9IGl0ZXIubmV4dCgpKSB7CiAgICAgICAgICAgICAgICB2YXIgJCQgPSByZXN1bHQudmFsdWU7CiAgICAgICAgICAgICAgICBpZiAoISQkLnB0cikgewogICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oIm9iamVjdCBhbHJlYWR5IGRlbGV0ZWQ6ICIgKyAkJC5wdHIpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgcmVsZWFzZUNsYXNzSGFuZGxlKCQkKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBhdHRhY2hGaW5hbGl6ZXIgPSBmdW5jdGlvbihoYW5kbGUyKSB7CiAgICAgICAgICAgICAgZmluYWxpemF0aW9uR3JvdXAucmVnaXN0ZXIoaGFuZGxlMiwgaGFuZGxlMi4kJCwgaGFuZGxlMi4kJCk7CiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZTI7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGRldGFjaEZpbmFsaXplciA9IGZ1bmN0aW9uKGhhbmRsZTIpIHsKICAgICAgICAgICAgICBmaW5hbGl6YXRpb25Hcm91cC51bnJlZ2lzdGVyKGhhbmRsZTIuJCQpOwogICAgICAgICAgICB9OwogICAgICAgICAgICByZXR1cm4gYXR0YWNoRmluYWxpemVyKGhhbmRsZSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBDbGFzc0hhbmRsZV9jbG9uZSgpIHsKICAgICAgICAgICAgaWYgKCF0aGlzLiQkLnB0cikgewogICAgICAgICAgICAgIHRocm93SW5zdGFuY2VBbHJlYWR5RGVsZXRlZCh0aGlzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodGhpcy4kJC5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZSkgewogICAgICAgICAgICAgIHRoaXMuJCQuY291bnQudmFsdWUgKz0gMTsKICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB2YXIgY2xvbmUyID0gYXR0YWNoRmluYWxpemVyKE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLCB7ICQkOiB7IHZhbHVlOiBzaGFsbG93Q29weUludGVybmFsUG9pbnRlcih0aGlzLiQkKSB9IH0pKTsKICAgICAgICAgICAgICBjbG9uZTIuJCQuY291bnQudmFsdWUgKz0gMTsKICAgICAgICAgICAgICBjbG9uZTIuJCQuZGVsZXRlU2NoZWR1bGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgcmV0dXJuIGNsb25lMjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gQ2xhc3NIYW5kbGVfZGVsZXRlKCkgewogICAgICAgICAgICBpZiAoIXRoaXMuJCQucHRyKSB7CiAgICAgICAgICAgICAgdGhyb3dJbnN0YW5jZUFscmVhZHlEZWxldGVkKHRoaXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0aGlzLiQkLmRlbGV0ZVNjaGVkdWxlZCAmJiAhdGhpcy4kJC5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZSkgewogICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJPYmplY3QgYWxyZWFkeSBzY2hlZHVsZWQgZm9yIGRlbGV0aW9uIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZGV0YWNoRmluYWxpemVyKHRoaXMpOwogICAgICAgICAgICByZWxlYXNlQ2xhc3NIYW5kbGUodGhpcy4kJCk7CiAgICAgICAgICAgIGlmICghdGhpcy4kJC5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZSkgewogICAgICAgICAgICAgIHRoaXMuJCQuc21hcnRQdHIgPSB2b2lkIDA7CiAgICAgICAgICAgICAgdGhpcy4kJC5wdHIgPSB2b2lkIDA7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIENsYXNzSGFuZGxlX2lzRGVsZXRlZCgpIHsKICAgICAgICAgICAgcmV0dXJuICF0aGlzLiQkLnB0cjsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBkZWxheUZ1bmN0aW9uID0gdm9pZCAwOwogICAgICAgICAgdmFyIGRlbGV0aW9uUXVldWUgPSBbXTsKICAgICAgICAgIGZ1bmN0aW9uIGZsdXNoUGVuZGluZ0RlbGV0ZXMoKSB7CiAgICAgICAgICAgIHdoaWxlIChkZWxldGlvblF1ZXVlLmxlbmd0aCkgewogICAgICAgICAgICAgIHZhciBvYmogPSBkZWxldGlvblF1ZXVlLnBvcCgpOwogICAgICAgICAgICAgIG9iai4kJC5kZWxldGVTY2hlZHVsZWQgPSBmYWxzZTsKICAgICAgICAgICAgICBvYmpbImRlbGV0ZSJdKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIENsYXNzSGFuZGxlX2RlbGV0ZUxhdGVyKCkgewogICAgICAgICAgICBpZiAoIXRoaXMuJCQucHRyKSB7CiAgICAgICAgICAgICAgdGhyb3dJbnN0YW5jZUFscmVhZHlEZWxldGVkKHRoaXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0aGlzLiQkLmRlbGV0ZVNjaGVkdWxlZCAmJiAhdGhpcy4kJC5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZSkgewogICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJPYmplY3QgYWxyZWFkeSBzY2hlZHVsZWQgZm9yIGRlbGV0aW9uIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZGVsZXRpb25RdWV1ZS5wdXNoKHRoaXMpOwogICAgICAgICAgICBpZiAoZGVsZXRpb25RdWV1ZS5sZW5ndGggPT09IDEgJiYgZGVsYXlGdW5jdGlvbikgewogICAgICAgICAgICAgIGRlbGF5RnVuY3Rpb24oZmx1c2hQZW5kaW5nRGVsZXRlcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy4kJC5kZWxldGVTY2hlZHVsZWQgPSB0cnVlOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGluaXRfQ2xhc3NIYW5kbGUoKSB7CiAgICAgICAgICAgIENsYXNzSGFuZGxlLnByb3RvdHlwZVsiaXNBbGlhc09mIl0gPSBDbGFzc0hhbmRsZV9pc0FsaWFzT2Y7CiAgICAgICAgICAgIENsYXNzSGFuZGxlLnByb3RvdHlwZVsiY2xvbmUiXSA9IENsYXNzSGFuZGxlX2Nsb25lOwogICAgICAgICAgICBDbGFzc0hhbmRsZS5wcm90b3R5cGVbImRlbGV0ZSJdID0gQ2xhc3NIYW5kbGVfZGVsZXRlOwogICAgICAgICAgICBDbGFzc0hhbmRsZS5wcm90b3R5cGVbImlzRGVsZXRlZCJdID0gQ2xhc3NIYW5kbGVfaXNEZWxldGVkOwogICAgICAgICAgICBDbGFzc0hhbmRsZS5wcm90b3R5cGVbImRlbGV0ZUxhdGVyIl0gPSBDbGFzc0hhbmRsZV9kZWxldGVMYXRlcjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIENsYXNzSGFuZGxlKCkgewogICAgICAgICAgfQogICAgICAgICAgdmFyIHJlZ2lzdGVyZWRQb2ludGVycyA9IHt9OwogICAgICAgICAgZnVuY3Rpb24gZW5zdXJlT3ZlcmxvYWRUYWJsZShwcm90bywgbWV0aG9kTmFtZSwgaHVtYW5OYW1lKSB7CiAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IHByb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGUpIHsKICAgICAgICAgICAgICB2YXIgcHJldkZ1bmMgPSBwcm90b1ttZXRob2ROYW1lXTsKICAgICAgICAgICAgICBwcm90b1ttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYgKCFwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlLmhhc093blByb3BlcnR5KGFyZ3VtZW50cy5sZW5ndGgpKSB7CiAgICAgICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJGdW5jdGlvbiAnIiArIGh1bWFuTmFtZSArICInIGNhbGxlZCB3aXRoIGFuIGludmFsaWQgbnVtYmVyIG9mIGFyZ3VtZW50cyAoIiArIGFyZ3VtZW50cy5sZW5ndGggKyAiKSAtIGV4cGVjdHMgb25lIG9mICgiICsgcHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZSArICIpISIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGVbYXJndW1lbnRzLmxlbmd0aF0uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIHByb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGUgPSBbXTsKICAgICAgICAgICAgICBwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlW3ByZXZGdW5jLmFyZ0NvdW50XSA9IHByZXZGdW5jOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBleHBvc2VQdWJsaWNTeW1ib2wobmFtZSwgdmFsdWUsIG51bUFyZ3VtZW50cykgewogICAgICAgICAgICBpZiAoTW9kdWxlLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gbnVtQXJndW1lbnRzIHx8IHZvaWQgMCAhPT0gTW9kdWxlW25hbWVdLm92ZXJsb2FkVGFibGUgJiYgdm9pZCAwICE9PSBNb2R1bGVbbmFtZV0ub3ZlcmxvYWRUYWJsZVtudW1Bcmd1bWVudHNdKSB7CiAgICAgICAgICAgICAgICB0aHJvd0JpbmRpbmdFcnJvcigiQ2Fubm90IHJlZ2lzdGVyIHB1YmxpYyBuYW1lICciICsgbmFtZSArICInIHR3aWNlIik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGVuc3VyZU92ZXJsb2FkVGFibGUoTW9kdWxlLCBuYW1lLCBuYW1lKTsKICAgICAgICAgICAgICBpZiAoTW9kdWxlLmhhc093blByb3BlcnR5KG51bUFyZ3VtZW50cykpIHsKICAgICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJDYW5ub3QgcmVnaXN0ZXIgbXVsdGlwbGUgb3ZlcmxvYWRzIG9mIGEgZnVuY3Rpb24gd2l0aCB0aGUgc2FtZSBudW1iZXIgb2YgYXJndW1lbnRzICgiICsgbnVtQXJndW1lbnRzICsgIikhIik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIE1vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlW251bUFyZ3VtZW50c10gPSB2YWx1ZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBNb2R1bGVbbmFtZV0gPSB2YWx1ZTsKICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBudW1Bcmd1bWVudHMpIHsKICAgICAgICAgICAgICAgIE1vZHVsZVtuYW1lXS5udW1Bcmd1bWVudHMgPSBudW1Bcmd1bWVudHM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBSZWdpc3RlcmVkQ2xhc3MobmFtZSwgY29uc3RydWN0b3IsIGluc3RhbmNlUHJvdG90eXBlLCByYXdEZXN0cnVjdG9yLCBiYXNlQ2xhc3MsIGdldEFjdHVhbFR5cGUsIHVwY2FzdCwgZG93bmNhc3QpIHsKICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTsKICAgICAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yOwogICAgICAgICAgICB0aGlzLmluc3RhbmNlUHJvdG90eXBlID0gaW5zdGFuY2VQcm90b3R5cGU7CiAgICAgICAgICAgIHRoaXMucmF3RGVzdHJ1Y3RvciA9IHJhd0Rlc3RydWN0b3I7CiAgICAgICAgICAgIHRoaXMuYmFzZUNsYXNzID0gYmFzZUNsYXNzOwogICAgICAgICAgICB0aGlzLmdldEFjdHVhbFR5cGUgPSBnZXRBY3R1YWxUeXBlOwogICAgICAgICAgICB0aGlzLnVwY2FzdCA9IHVwY2FzdDsKICAgICAgICAgICAgdGhpcy5kb3duY2FzdCA9IGRvd25jYXN0OwogICAgICAgICAgICB0aGlzLnB1cmVWaXJ0dWFsRnVuY3Rpb25zID0gW107CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiB1cGNhc3RQb2ludGVyKHB0ciwgcHRyQ2xhc3MsIGRlc2lyZWRDbGFzcykgewogICAgICAgICAgICB3aGlsZSAocHRyQ2xhc3MgIT09IGRlc2lyZWRDbGFzcykgewogICAgICAgICAgICAgIGlmICghcHRyQ2xhc3MudXBjYXN0KSB7CiAgICAgICAgICAgICAgICB0aHJvd0JpbmRpbmdFcnJvcigiRXhwZWN0ZWQgbnVsbCBvciBpbnN0YW5jZSBvZiAiICsgZGVzaXJlZENsYXNzLm5hbWUgKyAiLCBnb3QgYW4gaW5zdGFuY2Ugb2YgIiArIHB0ckNsYXNzLm5hbWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBwdHIgPSBwdHJDbGFzcy51cGNhc3QocHRyKTsKICAgICAgICAgICAgICBwdHJDbGFzcyA9IHB0ckNsYXNzLmJhc2VDbGFzczsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcHRyOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gY29uc3ROb1NtYXJ0UHRyUmF3UG9pbnRlclRvV2lyZVR5cGUoZGVzdHJ1Y3RvcnMsIGhhbmRsZSkgewogICAgICAgICAgICBpZiAoaGFuZGxlID09PSBudWxsKSB7CiAgICAgICAgICAgICAgaWYgKHRoaXMuaXNSZWZlcmVuY2UpIHsKICAgICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJudWxsIGlzIG5vdCBhIHZhbGlkICIgKyB0aGlzLm5hbWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIWhhbmRsZS4kJCkgewogICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCdDYW5ub3QgcGFzcyAiJyArIF9lbWJpbmRfcmVwcihoYW5kbGUpICsgJyIgYXMgYSAnICsgdGhpcy5uYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIWhhbmRsZS4kJC5wdHIpIHsKICAgICAgICAgICAgICB0aHJvd0JpbmRpbmdFcnJvcigiQ2Fubm90IHBhc3MgZGVsZXRlZCBvYmplY3QgYXMgYSBwb2ludGVyIG9mIHR5cGUgIiArIHRoaXMubmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGhhbmRsZUNsYXNzID0gaGFuZGxlLiQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzOwogICAgICAgICAgICB2YXIgcHRyID0gdXBjYXN0UG9pbnRlcihoYW5kbGUuJCQucHRyLCBoYW5kbGVDbGFzcywgdGhpcy5yZWdpc3RlcmVkQ2xhc3MpOwogICAgICAgICAgICByZXR1cm4gcHRyOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gZ2VuZXJpY1BvaW50ZXJUb1dpcmVUeXBlKGRlc3RydWN0b3JzLCBoYW5kbGUpIHsKICAgICAgICAgICAgdmFyIHB0cjsKICAgICAgICAgICAgaWYgKGhhbmRsZSA9PT0gbnVsbCkgewogICAgICAgICAgICAgIGlmICh0aGlzLmlzUmVmZXJlbmNlKSB7CiAgICAgICAgICAgICAgICB0aHJvd0JpbmRpbmdFcnJvcigibnVsbCBpcyBub3QgYSB2YWxpZCAiICsgdGhpcy5uYW1lKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHRoaXMuaXNTbWFydFBvaW50ZXIpIHsKICAgICAgICAgICAgICAgIHB0ciA9IHRoaXMucmF3Q29uc3RydWN0b3IoKTsKICAgICAgICAgICAgICAgIGlmIChkZXN0cnVjdG9ycyAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICBkZXN0cnVjdG9ycy5wdXNoKHRoaXMucmF3RGVzdHJ1Y3RvciwgcHRyKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBwdHI7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIWhhbmRsZS4kJCkgewogICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCdDYW5ub3QgcGFzcyAiJyArIF9lbWJpbmRfcmVwcihoYW5kbGUpICsgJyIgYXMgYSAnICsgdGhpcy5uYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIWhhbmRsZS4kJC5wdHIpIHsKICAgICAgICAgICAgICB0aHJvd0JpbmRpbmdFcnJvcigiQ2Fubm90IHBhc3MgZGVsZXRlZCBvYmplY3QgYXMgYSBwb2ludGVyIG9mIHR5cGUgIiArIHRoaXMubmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCF0aGlzLmlzQ29uc3QgJiYgaGFuZGxlLiQkLnB0clR5cGUuaXNDb25zdCkgewogICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJDYW5ub3QgY29udmVydCBhcmd1bWVudCBvZiB0eXBlICIgKyAoaGFuZGxlLiQkLnNtYXJ0UHRyVHlwZSA/IGhhbmRsZS4kJC5zbWFydFB0clR5cGUubmFtZSA6IGhhbmRsZS4kJC5wdHJUeXBlLm5hbWUpICsgIiB0byBwYXJhbWV0ZXIgdHlwZSAiICsgdGhpcy5uYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgaGFuZGxlQ2xhc3MgPSBoYW5kbGUuJCQucHRyVHlwZS5yZWdpc3RlcmVkQ2xhc3M7CiAgICAgICAgICAgIHB0ciA9IHVwY2FzdFBvaW50ZXIoaGFuZGxlLiQkLnB0ciwgaGFuZGxlQ2xhc3MsIHRoaXMucmVnaXN0ZXJlZENsYXNzKTsKICAgICAgICAgICAgaWYgKHRoaXMuaXNTbWFydFBvaW50ZXIpIHsKICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBoYW5kbGUuJCQuc21hcnRQdHIpIHsKICAgICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJQYXNzaW5nIHJhdyBwb2ludGVyIHRvIHNtYXJ0IHBvaW50ZXIgaXMgaWxsZWdhbCIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuc2hhcmluZ1BvbGljeSkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICBpZiAoaGFuZGxlLiQkLnNtYXJ0UHRyVHlwZSA9PT0gdGhpcykgewogICAgICAgICAgICAgICAgICAgIHB0ciA9IGhhbmRsZS4kJC5zbWFydFB0cjsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aHJvd0JpbmRpbmdFcnJvcigiQ2Fubm90IGNvbnZlcnQgYXJndW1lbnQgb2YgdHlwZSAiICsgKGhhbmRsZS4kJC5zbWFydFB0clR5cGUgPyBoYW5kbGUuJCQuc21hcnRQdHJUeXBlLm5hbWUgOiBoYW5kbGUuJCQucHRyVHlwZS5uYW1lKSArICIgdG8gcGFyYW1ldGVyIHR5cGUgIiArIHRoaXMubmFtZSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgIHB0ciA9IGhhbmRsZS4kJC5zbWFydFB0cjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGUuJCQuc21hcnRQdHJUeXBlID09PSB0aGlzKSB7CiAgICAgICAgICAgICAgICAgICAgcHRyID0gaGFuZGxlLiQkLnNtYXJ0UHRyOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhciBjbG9uZWRIYW5kbGUgPSBoYW5kbGVbImNsb25lIl0oKTsKICAgICAgICAgICAgICAgICAgICBwdHIgPSB0aGlzLnJhd1NoYXJlKHB0ciwgX19lbXZhbF9yZWdpc3RlcihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgIGNsb25lZEhhbmRsZVsiZGVsZXRlIl0oKTsKICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc3RydWN0b3JzICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICBkZXN0cnVjdG9ycy5wdXNoKHRoaXMucmF3RGVzdHJ1Y3RvciwgcHRyKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICB0aHJvd0JpbmRpbmdFcnJvcigiVW5zdXBwb3J0aW5nIHNoYXJpbmcgcG9saWN5Iik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBwdHI7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBub25Db25zdE5vU21hcnRQdHJSYXdQb2ludGVyVG9XaXJlVHlwZShkZXN0cnVjdG9ycywgaGFuZGxlKSB7CiAgICAgICAgICAgIGlmIChoYW5kbGUgPT09IG51bGwpIHsKICAgICAgICAgICAgICBpZiAodGhpcy5pc1JlZmVyZW5jZSkgewogICAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoIm51bGwgaXMgbm90IGEgdmFsaWQgIiArIHRoaXMubmFtZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghaGFuZGxlLiQkKSB7CiAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoJ0Nhbm5vdCBwYXNzICInICsgX2VtYmluZF9yZXByKGhhbmRsZSkgKyAnIiBhcyBhICcgKyB0aGlzLm5hbWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghaGFuZGxlLiQkLnB0cikgewogICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJDYW5ub3QgcGFzcyBkZWxldGVkIG9iamVjdCBhcyBhIHBvaW50ZXIgb2YgdHlwZSAiICsgdGhpcy5uYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoaGFuZGxlLiQkLnB0clR5cGUuaXNDb25zdCkgewogICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJDYW5ub3QgY29udmVydCBhcmd1bWVudCBvZiB0eXBlICIgKyBoYW5kbGUuJCQucHRyVHlwZS5uYW1lICsgIiB0byBwYXJhbWV0ZXIgdHlwZSAiICsgdGhpcy5uYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgaGFuZGxlQ2xhc3MgPSBoYW5kbGUuJCQucHRyVHlwZS5yZWdpc3RlcmVkQ2xhc3M7CiAgICAgICAgICAgIHZhciBwdHIgPSB1cGNhc3RQb2ludGVyKGhhbmRsZS4kJC5wdHIsIGhhbmRsZUNsYXNzLCB0aGlzLnJlZ2lzdGVyZWRDbGFzcyk7CiAgICAgICAgICAgIHJldHVybiBwdHI7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBSZWdpc3RlcmVkUG9pbnRlcl9nZXRQb2ludGVlKHB0cikgewogICAgICAgICAgICBpZiAodGhpcy5yYXdHZXRQb2ludGVlKSB7CiAgICAgICAgICAgICAgcHRyID0gdGhpcy5yYXdHZXRQb2ludGVlKHB0cik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHB0cjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIFJlZ2lzdGVyZWRQb2ludGVyX2Rlc3RydWN0b3IocHRyKSB7CiAgICAgICAgICAgIGlmICh0aGlzLnJhd0Rlc3RydWN0b3IpIHsKICAgICAgICAgICAgICB0aGlzLnJhd0Rlc3RydWN0b3IocHRyKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gUmVnaXN0ZXJlZFBvaW50ZXJfZGVsZXRlT2JqZWN0KGhhbmRsZSkgewogICAgICAgICAgICBpZiAoaGFuZGxlICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgaGFuZGxlWyJkZWxldGUiXSgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBkb3duY2FzdFBvaW50ZXIocHRyLCBwdHJDbGFzcywgZGVzaXJlZENsYXNzKSB7CiAgICAgICAgICAgIGlmIChwdHJDbGFzcyA9PT0gZGVzaXJlZENsYXNzKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHB0cjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodm9pZCAwID09PSBkZXNpcmVkQ2xhc3MuYmFzZUNsYXNzKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHJ2ID0gZG93bmNhc3RQb2ludGVyKHB0ciwgcHRyQ2xhc3MsIGRlc2lyZWRDbGFzcy5iYXNlQ2xhc3MpOwogICAgICAgICAgICBpZiAocnYgPT09IG51bGwpIHsKICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZGVzaXJlZENsYXNzLmRvd25jYXN0KHJ2KTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGdldEluaGVyaXRlZEluc3RhbmNlQ291bnQoKSB7CiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhyZWdpc3RlcmVkSW5zdGFuY2VzKS5sZW5ndGg7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBnZXRMaXZlSW5oZXJpdGVkSW5zdGFuY2VzKCkgewogICAgICAgICAgICB2YXIgcnYgPSBbXTsKICAgICAgICAgICAgZm9yICh2YXIgayBpbiByZWdpc3RlcmVkSW5zdGFuY2VzKSB7CiAgICAgICAgICAgICAgaWYgKHJlZ2lzdGVyZWRJbnN0YW5jZXMuaGFzT3duUHJvcGVydHkoaykpIHsKICAgICAgICAgICAgICAgIHJ2LnB1c2gocmVnaXN0ZXJlZEluc3RhbmNlc1trXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBydjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHNldERlbGF5RnVuY3Rpb24oZm4pIHsKICAgICAgICAgICAgZGVsYXlGdW5jdGlvbiA9IGZuOwogICAgICAgICAgICBpZiAoZGVsZXRpb25RdWV1ZS5sZW5ndGggJiYgZGVsYXlGdW5jdGlvbikgewogICAgICAgICAgICAgIGRlbGF5RnVuY3Rpb24oZmx1c2hQZW5kaW5nRGVsZXRlcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGluaXRfZW1iaW5kKCkgewogICAgICAgICAgICBNb2R1bGVbImdldEluaGVyaXRlZEluc3RhbmNlQ291bnQiXSA9IGdldEluaGVyaXRlZEluc3RhbmNlQ291bnQ7CiAgICAgICAgICAgIE1vZHVsZVsiZ2V0TGl2ZUluaGVyaXRlZEluc3RhbmNlcyJdID0gZ2V0TGl2ZUluaGVyaXRlZEluc3RhbmNlczsKICAgICAgICAgICAgTW9kdWxlWyJmbHVzaFBlbmRpbmdEZWxldGVzIl0gPSBmbHVzaFBlbmRpbmdEZWxldGVzOwogICAgICAgICAgICBNb2R1bGVbInNldERlbGF5RnVuY3Rpb24iXSA9IHNldERlbGF5RnVuY3Rpb247CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgcmVnaXN0ZXJlZEluc3RhbmNlcyA9IHt9OwogICAgICAgICAgZnVuY3Rpb24gZ2V0QmFzZXN0UG9pbnRlcihjbGFzc18sIHB0cikgewogICAgICAgICAgICBpZiAocHRyID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICB0aHJvd0JpbmRpbmdFcnJvcigicHRyIHNob3VsZCBub3QgYmUgdW5kZWZpbmVkIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgd2hpbGUgKGNsYXNzXy5iYXNlQ2xhc3MpIHsKICAgICAgICAgICAgICBwdHIgPSBjbGFzc18udXBjYXN0KHB0cik7CiAgICAgICAgICAgICAgY2xhc3NfID0gY2xhc3NfLmJhc2VDbGFzczsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcHRyOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gZ2V0SW5oZXJpdGVkSW5zdGFuY2UoY2xhc3NfLCBwdHIpIHsKICAgICAgICAgICAgcHRyID0gZ2V0QmFzZXN0UG9pbnRlcihjbGFzc18sIHB0cik7CiAgICAgICAgICAgIHJldHVybiByZWdpc3RlcmVkSW5zdGFuY2VzW3B0cl07CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBtYWtlQ2xhc3NIYW5kbGUocHJvdG90eXBlLCByZWNvcmQpIHsKICAgICAgICAgICAgaWYgKCFyZWNvcmQucHRyVHlwZSB8fCAhcmVjb3JkLnB0cikgewogICAgICAgICAgICAgIHRocm93SW50ZXJuYWxFcnJvcigibWFrZUNsYXNzSGFuZGxlIHJlcXVpcmVzIHB0ciBhbmQgcHRyVHlwZSIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBoYXNTbWFydFB0clR5cGUgPSAhIXJlY29yZC5zbWFydFB0clR5cGU7CiAgICAgICAgICAgIHZhciBoYXNTbWFydFB0ciA9ICEhcmVjb3JkLnNtYXJ0UHRyOwogICAgICAgICAgICBpZiAoaGFzU21hcnRQdHJUeXBlICE9PSBoYXNTbWFydFB0cikgewogICAgICAgICAgICAgIHRocm93SW50ZXJuYWxFcnJvcigiQm90aCBzbWFydFB0clR5cGUgYW5kIHNtYXJ0UHRyIG11c3QgYmUgc3BlY2lmaWVkIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVjb3JkLmNvdW50ID0geyB2YWx1ZTogMSB9OwogICAgICAgICAgICByZXR1cm4gYXR0YWNoRmluYWxpemVyKE9iamVjdC5jcmVhdGUocHJvdG90eXBlLCB7ICQkOiB7IHZhbHVlOiByZWNvcmQgfSB9KSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBSZWdpc3RlcmVkUG9pbnRlcl9mcm9tV2lyZVR5cGUocHRyKSB7CiAgICAgICAgICAgIHZhciByYXdQb2ludGVyID0gdGhpcy5nZXRQb2ludGVlKHB0cik7CiAgICAgICAgICAgIGlmICghcmF3UG9pbnRlcikgewogICAgICAgICAgICAgIHRoaXMuZGVzdHJ1Y3RvcihwdHIpOwogICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciByZWdpc3RlcmVkSW5zdGFuY2UgPSBnZXRJbmhlcml0ZWRJbnN0YW5jZSh0aGlzLnJlZ2lzdGVyZWRDbGFzcywgcmF3UG9pbnRlcik7CiAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IHJlZ2lzdGVyZWRJbnN0YW5jZSkgewogICAgICAgICAgICAgIGlmICgwID09PSByZWdpc3RlcmVkSW5zdGFuY2UuJCQuY291bnQudmFsdWUpIHsKICAgICAgICAgICAgICAgIHJlZ2lzdGVyZWRJbnN0YW5jZS4kJC5wdHIgPSByYXdQb2ludGVyOwogICAgICAgICAgICAgICAgcmVnaXN0ZXJlZEluc3RhbmNlLiQkLnNtYXJ0UHRyID0gcHRyOwogICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdGVyZWRJbnN0YW5jZVsiY2xvbmUiXSgpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgcnYgPSByZWdpc3RlcmVkSW5zdGFuY2VbImNsb25lIl0oKTsKICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJ1Y3RvcihwdHIpOwogICAgICAgICAgICAgICAgcmV0dXJuIHJ2OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBtYWtlRGVmYXVsdEhhbmRsZSgpIHsKICAgICAgICAgICAgICBpZiAodGhpcy5pc1NtYXJ0UG9pbnRlcikgewogICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VDbGFzc0hhbmRsZSh0aGlzLnJlZ2lzdGVyZWRDbGFzcy5pbnN0YW5jZVByb3RvdHlwZSwgeyBwdHJUeXBlOiB0aGlzLnBvaW50ZWVUeXBlLCBwdHI6IHJhd1BvaW50ZXIsIHNtYXJ0UHRyVHlwZTogdGhpcywgc21hcnRQdHI6IHB0ciB9KTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VDbGFzc0hhbmRsZSh0aGlzLnJlZ2lzdGVyZWRDbGFzcy5pbnN0YW5jZVByb3RvdHlwZSwgeyBwdHJUeXBlOiB0aGlzLCBwdHIgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBhY3R1YWxUeXBlID0gdGhpcy5yZWdpc3RlcmVkQ2xhc3MuZ2V0QWN0dWFsVHlwZShyYXdQb2ludGVyKTsKICAgICAgICAgICAgdmFyIHJlZ2lzdGVyZWRQb2ludGVyUmVjb3JkID0gcmVnaXN0ZXJlZFBvaW50ZXJzW2FjdHVhbFR5cGVdOwogICAgICAgICAgICBpZiAoIXJlZ2lzdGVyZWRQb2ludGVyUmVjb3JkKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG1ha2VEZWZhdWx0SGFuZGxlLmNhbGwodGhpcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHRvVHlwZTsKICAgICAgICAgICAgaWYgKHRoaXMuaXNDb25zdCkgewogICAgICAgICAgICAgIHRvVHlwZSA9IHJlZ2lzdGVyZWRQb2ludGVyUmVjb3JkLmNvbnN0UG9pbnRlclR5cGU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdG9UeXBlID0gcmVnaXN0ZXJlZFBvaW50ZXJSZWNvcmQucG9pbnRlclR5cGU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGRwID0gZG93bmNhc3RQb2ludGVyKHJhd1BvaW50ZXIsIHRoaXMucmVnaXN0ZXJlZENsYXNzLCB0b1R5cGUucmVnaXN0ZXJlZENsYXNzKTsKICAgICAgICAgICAgaWYgKGRwID09PSBudWxsKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG1ha2VEZWZhdWx0SGFuZGxlLmNhbGwodGhpcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRoaXMuaXNTbWFydFBvaW50ZXIpIHsKICAgICAgICAgICAgICByZXR1cm4gbWFrZUNsYXNzSGFuZGxlKHRvVHlwZS5yZWdpc3RlcmVkQ2xhc3MuaW5zdGFuY2VQcm90b3R5cGUsIHsgcHRyVHlwZTogdG9UeXBlLCBwdHI6IGRwLCBzbWFydFB0clR5cGU6IHRoaXMsIHNtYXJ0UHRyOiBwdHIgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIG1ha2VDbGFzc0hhbmRsZSh0b1R5cGUucmVnaXN0ZXJlZENsYXNzLmluc3RhbmNlUHJvdG90eXBlLCB7IHB0clR5cGU6IHRvVHlwZSwgcHRyOiBkcCB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gaW5pdF9SZWdpc3RlcmVkUG9pbnRlcigpIHsKICAgICAgICAgICAgUmVnaXN0ZXJlZFBvaW50ZXIucHJvdG90eXBlLmdldFBvaW50ZWUgPSBSZWdpc3RlcmVkUG9pbnRlcl9nZXRQb2ludGVlOwogICAgICAgICAgICBSZWdpc3RlcmVkUG9pbnRlci5wcm90b3R5cGUuZGVzdHJ1Y3RvciA9IFJlZ2lzdGVyZWRQb2ludGVyX2Rlc3RydWN0b3I7CiAgICAgICAgICAgIFJlZ2lzdGVyZWRQb2ludGVyLnByb3RvdHlwZVsiYXJnUGFja0FkdmFuY2UiXSA9IDg7CiAgICAgICAgICAgIFJlZ2lzdGVyZWRQb2ludGVyLnByb3RvdHlwZVsicmVhZFZhbHVlRnJvbVBvaW50ZXIiXSA9IHNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyOwogICAgICAgICAgICBSZWdpc3RlcmVkUG9pbnRlci5wcm90b3R5cGVbImRlbGV0ZU9iamVjdCJdID0gUmVnaXN0ZXJlZFBvaW50ZXJfZGVsZXRlT2JqZWN0OwogICAgICAgICAgICBSZWdpc3RlcmVkUG9pbnRlci5wcm90b3R5cGVbImZyb21XaXJlVHlwZSJdID0gUmVnaXN0ZXJlZFBvaW50ZXJfZnJvbVdpcmVUeXBlOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gUmVnaXN0ZXJlZFBvaW50ZXIobmFtZSwgcmVnaXN0ZXJlZENsYXNzLCBpc1JlZmVyZW5jZSwgaXNDb25zdCwgaXNTbWFydFBvaW50ZXIsIHBvaW50ZWVUeXBlLCBzaGFyaW5nUG9saWN5LCByYXdHZXRQb2ludGVlLCByYXdDb25zdHJ1Y3RvciwgcmF3U2hhcmUsIHJhd0Rlc3RydWN0b3IpIHsKICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTsKICAgICAgICAgICAgdGhpcy5yZWdpc3RlcmVkQ2xhc3MgPSByZWdpc3RlcmVkQ2xhc3M7CiAgICAgICAgICAgIHRoaXMuaXNSZWZlcmVuY2UgPSBpc1JlZmVyZW5jZTsKICAgICAgICAgICAgdGhpcy5pc0NvbnN0ID0gaXNDb25zdDsKICAgICAgICAgICAgdGhpcy5pc1NtYXJ0UG9pbnRlciA9IGlzU21hcnRQb2ludGVyOwogICAgICAgICAgICB0aGlzLnBvaW50ZWVUeXBlID0gcG9pbnRlZVR5cGU7CiAgICAgICAgICAgIHRoaXMuc2hhcmluZ1BvbGljeSA9IHNoYXJpbmdQb2xpY3k7CiAgICAgICAgICAgIHRoaXMucmF3R2V0UG9pbnRlZSA9IHJhd0dldFBvaW50ZWU7CiAgICAgICAgICAgIHRoaXMucmF3Q29uc3RydWN0b3IgPSByYXdDb25zdHJ1Y3RvcjsKICAgICAgICAgICAgdGhpcy5yYXdTaGFyZSA9IHJhd1NoYXJlOwogICAgICAgICAgICB0aGlzLnJhd0Rlc3RydWN0b3IgPSByYXdEZXN0cnVjdG9yOwogICAgICAgICAgICBpZiAoIWlzU21hcnRQb2ludGVyICYmIHJlZ2lzdGVyZWRDbGFzcy5iYXNlQ2xhc3MgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgIGlmIChpc0NvbnN0KSB7CiAgICAgICAgICAgICAgICB0aGlzWyJ0b1dpcmVUeXBlIl0gPSBjb25zdE5vU21hcnRQdHJSYXdQb2ludGVyVG9XaXJlVHlwZTsKICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJ1Y3RvckZ1bmN0aW9uID0gbnVsbDsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpc1sidG9XaXJlVHlwZSJdID0gbm9uQ29uc3ROb1NtYXJ0UHRyUmF3UG9pbnRlclRvV2lyZVR5cGU7CiAgICAgICAgICAgICAgICB0aGlzLmRlc3RydWN0b3JGdW5jdGlvbiA9IG51bGw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRoaXNbInRvV2lyZVR5cGUiXSA9IGdlbmVyaWNQb2ludGVyVG9XaXJlVHlwZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gcmVwbGFjZVB1YmxpY1N5bWJvbChuYW1lLCB2YWx1ZSwgbnVtQXJndW1lbnRzKSB7CiAgICAgICAgICAgIGlmICghTW9kdWxlLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgICAgICAgdGhyb3dJbnRlcm5hbEVycm9yKCJSZXBsYWNpbmcgbm9uZXhpc3RhbnQgcHVibGljIHN5bWJvbCIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IE1vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlICYmIHZvaWQgMCAhPT0gbnVtQXJndW1lbnRzKSB7CiAgICAgICAgICAgICAgTW9kdWxlW25hbWVdLm92ZXJsb2FkVGFibGVbbnVtQXJndW1lbnRzXSA9IHZhbHVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIE1vZHVsZVtuYW1lXSA9IHZhbHVlOwogICAgICAgICAgICAgIE1vZHVsZVtuYW1lXS5hcmdDb3VudCA9IG51bUFyZ3VtZW50czsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gZHluQ2FsbExlZ2FjeShzaWcsIHB0ciwgYXJncykgewogICAgICAgICAgICB2YXIgZiA9IE1vZHVsZVsiZHluQ2FsbF8iICsgc2lnXTsKICAgICAgICAgICAgcmV0dXJuIGFyZ3MgJiYgYXJncy5sZW5ndGggPyBmLmFwcGx5KG51bGwsIFtwdHJdLmNvbmNhdChhcmdzKSkgOiBmLmNhbGwobnVsbCwgcHRyKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGR5bkNhbGwoc2lnLCBwdHIsIGFyZ3MpIHsKICAgICAgICAgICAgaWYgKHNpZy5pbmRleE9mKCJqIikgIT0gLTEpIHsKICAgICAgICAgICAgICByZXR1cm4gZHluQ2FsbExlZ2FjeShzaWcsIHB0ciwgYXJncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHdhc21UYWJsZS5nZXQocHRyKS5hcHBseShudWxsLCBhcmdzKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGdldER5bkNhbGxlcihzaWcsIHB0cikgewogICAgICAgICAgICB2YXIgYXJnQ2FjaGUgPSBbXTsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIGFyZ0NhY2hlLmxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGFyZ0NhY2hlW2ldID0gYXJndW1lbnRzW2ldOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gZHluQ2FsbChzaWcsIHB0ciwgYXJnQ2FjaGUpOwogICAgICAgICAgICB9OwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oc2lnbmF0dXJlLCByYXdGdW5jdGlvbikgewogICAgICAgICAgICBzaWduYXR1cmUgPSByZWFkTGF0aW4xU3RyaW5nKHNpZ25hdHVyZSk7CiAgICAgICAgICAgIGZ1bmN0aW9uIG1ha2VEeW5DYWxsZXIoKSB7CiAgICAgICAgICAgICAgaWYgKHNpZ25hdHVyZS5pbmRleE9mKCJqIikgIT0gLTEpIHsKICAgICAgICAgICAgICAgIHJldHVybiBnZXREeW5DYWxsZXIoc2lnbmF0dXJlLCByYXdGdW5jdGlvbik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiB3YXNtVGFibGUuZ2V0KHJhd0Z1bmN0aW9uKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgZnAgPSBtYWtlRHluQ2FsbGVyKCk7CiAgICAgICAgICAgIGlmICh0eXBlb2YgZnAgIT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICB0aHJvd0JpbmRpbmdFcnJvcigidW5rbm93biBmdW5jdGlvbiBwb2ludGVyIHdpdGggc2lnbmF0dXJlICIgKyBzaWduYXR1cmUgKyAiOiAiICsgcmF3RnVuY3Rpb24pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmcDsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBVbmJvdW5kVHlwZUVycm9yID0gdm9pZCAwOwogICAgICAgICAgZnVuY3Rpb24gZ2V0VHlwZU5hbWUodHlwZSkgewogICAgICAgICAgICB2YXIgcHRyID0gX19fZ2V0VHlwZU5hbWUodHlwZSk7CiAgICAgICAgICAgIHZhciBydiA9IHJlYWRMYXRpbjFTdHJpbmcocHRyKTsKICAgICAgICAgICAgX2ZyZWUocHRyKTsKICAgICAgICAgICAgcmV0dXJuIHJ2OwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gdGhyb3dVbmJvdW5kVHlwZUVycm9yKG1lc3NhZ2UsIHR5cGVzKSB7CiAgICAgICAgICAgIHZhciB1bmJvdW5kVHlwZXMgPSBbXTsKICAgICAgICAgICAgdmFyIHNlZW4gPSB7fTsKICAgICAgICAgICAgZnVuY3Rpb24gdmlzaXQodHlwZSkgewogICAgICAgICAgICAgIGlmIChzZWVuW3R5cGVdKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChyZWdpc3RlcmVkVHlwZXNbdHlwZV0pIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHR5cGVEZXBlbmRlbmNpZXNbdHlwZV0pIHsKICAgICAgICAgICAgICAgIHR5cGVEZXBlbmRlbmNpZXNbdHlwZV0uZm9yRWFjaCh2aXNpdCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHVuYm91bmRUeXBlcy5wdXNoKHR5cGUpOwogICAgICAgICAgICAgIHNlZW5bdHlwZV0gPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHR5cGVzLmZvckVhY2godmlzaXQpOwogICAgICAgICAgICB0aHJvdyBuZXcgVW5ib3VuZFR5cGVFcnJvcihtZXNzYWdlICsgIjogIiArIHVuYm91bmRUeXBlcy5tYXAoZ2V0VHlwZU5hbWUpLmpvaW4oWyIsICJdKSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9jbGFzcyhyYXdUeXBlLCByYXdQb2ludGVyVHlwZSwgcmF3Q29uc3RQb2ludGVyVHlwZSwgYmFzZUNsYXNzUmF3VHlwZSwgZ2V0QWN0dWFsVHlwZVNpZ25hdHVyZSwgZ2V0QWN0dWFsVHlwZSwgdXBjYXN0U2lnbmF0dXJlLCB1cGNhc3QsIGRvd25jYXN0U2lnbmF0dXJlLCBkb3duY2FzdCwgbmFtZSwgZGVzdHJ1Y3RvclNpZ25hdHVyZSwgcmF3RGVzdHJ1Y3RvcikgewogICAgICAgICAgICBuYW1lID0gcmVhZExhdGluMVN0cmluZyhuYW1lKTsKICAgICAgICAgICAgZ2V0QWN0dWFsVHlwZSA9IGVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKGdldEFjdHVhbFR5cGVTaWduYXR1cmUsIGdldEFjdHVhbFR5cGUpOwogICAgICAgICAgICBpZiAodXBjYXN0KSB7CiAgICAgICAgICAgICAgdXBjYXN0ID0gZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24odXBjYXN0U2lnbmF0dXJlLCB1cGNhc3QpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChkb3duY2FzdCkgewogICAgICAgICAgICAgIGRvd25jYXN0ID0gZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oZG93bmNhc3RTaWduYXR1cmUsIGRvd25jYXN0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICByYXdEZXN0cnVjdG9yID0gZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oZGVzdHJ1Y3RvclNpZ25hdHVyZSwgcmF3RGVzdHJ1Y3Rvcik7CiAgICAgICAgICAgIHZhciBsZWdhbEZ1bmN0aW9uTmFtZSA9IG1ha2VMZWdhbEZ1bmN0aW9uTmFtZShuYW1lKTsKICAgICAgICAgICAgZXhwb3NlUHVibGljU3ltYm9sKGxlZ2FsRnVuY3Rpb25OYW1lLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICB0aHJvd1VuYm91bmRUeXBlRXJyb3IoIkNhbm5vdCBjb25zdHJ1Y3QgIiArIG5hbWUgKyAiIGR1ZSB0byB1bmJvdW5kIHR5cGVzIiwgW2Jhc2VDbGFzc1Jhd1R5cGVdKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHdoZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtyYXdUeXBlLCByYXdQb2ludGVyVHlwZSwgcmF3Q29uc3RQb2ludGVyVHlwZV0sIGJhc2VDbGFzc1Jhd1R5cGUgPyBbYmFzZUNsYXNzUmF3VHlwZV0gOiBbXSwgZnVuY3Rpb24oYmFzZSkgewogICAgICAgICAgICAgIGJhc2UgPSBiYXNlWzBdOwogICAgICAgICAgICAgIHZhciBiYXNlQ2xhc3M7CiAgICAgICAgICAgICAgdmFyIGJhc2VQcm90b3R5cGU7CiAgICAgICAgICAgICAgaWYgKGJhc2VDbGFzc1Jhd1R5cGUpIHsKICAgICAgICAgICAgICAgIGJhc2VDbGFzcyA9IGJhc2UucmVnaXN0ZXJlZENsYXNzOwogICAgICAgICAgICAgICAgYmFzZVByb3RvdHlwZSA9IGJhc2VDbGFzcy5pbnN0YW5jZVByb3RvdHlwZTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgYmFzZVByb3RvdHlwZSA9IENsYXNzSGFuZGxlLnByb3RvdHlwZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIGNvbnN0cnVjdG9yID0gY3JlYXRlTmFtZWRGdW5jdGlvbihsZWdhbEZ1bmN0aW9uTmFtZSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpICE9PSBpbnN0YW5jZVByb3RvdHlwZSkgewogICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQmluZGluZ0Vycm9yKCJVc2UgJ25ldycgdG8gY29uc3RydWN0ICIgKyBuYW1lKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IHJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5KSB7CiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBCaW5kaW5nRXJyb3IobmFtZSArICIgaGFzIG5vIGFjY2Vzc2libGUgY29uc3RydWN0b3IiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBib2R5ID0gcmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHlbYXJndW1lbnRzLmxlbmd0aF07CiAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBib2R5KSB7CiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBCaW5kaW5nRXJyb3IoIlRyaWVkIHRvIGludm9rZSBjdG9yIG9mICIgKyBuYW1lICsgIiB3aXRoIGludmFsaWQgbnVtYmVyIG9mIHBhcmFtZXRlcnMgKCIgKyBhcmd1bWVudHMubGVuZ3RoICsgIikgLSBleHBlY3RlZCAoIiArIE9iamVjdC5rZXlzKHJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5KS50b1N0cmluZygpICsgIikgcGFyYW1ldGVycyBpbnN0ZWFkISIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGJvZHkuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB2YXIgaW5zdGFuY2VQcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGJhc2VQcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IGNvbnN0cnVjdG9yIH0gfSk7CiAgICAgICAgICAgICAgY29uc3RydWN0b3IucHJvdG90eXBlID0gaW5zdGFuY2VQcm90b3R5cGU7CiAgICAgICAgICAgICAgdmFyIHJlZ2lzdGVyZWRDbGFzcyA9IG5ldyBSZWdpc3RlcmVkQ2xhc3MobmFtZSwgY29uc3RydWN0b3IsIGluc3RhbmNlUHJvdG90eXBlLCByYXdEZXN0cnVjdG9yLCBiYXNlQ2xhc3MsIGdldEFjdHVhbFR5cGUsIHVwY2FzdCwgZG93bmNhc3QpOwogICAgICAgICAgICAgIHZhciByZWZlcmVuY2VDb252ZXJ0ZXIgPSBuZXcgUmVnaXN0ZXJlZFBvaW50ZXIobmFtZSwgcmVnaXN0ZXJlZENsYXNzLCB0cnVlLCBmYWxzZSwgZmFsc2UpOwogICAgICAgICAgICAgIHZhciBwb2ludGVyQ29udmVydGVyID0gbmV3IFJlZ2lzdGVyZWRQb2ludGVyKG5hbWUgKyAiKiIsIHJlZ2lzdGVyZWRDbGFzcywgZmFsc2UsIGZhbHNlLCBmYWxzZSk7CiAgICAgICAgICAgICAgdmFyIGNvbnN0UG9pbnRlckNvbnZlcnRlciA9IG5ldyBSZWdpc3RlcmVkUG9pbnRlcihuYW1lICsgIiBjb25zdCoiLCByZWdpc3RlcmVkQ2xhc3MsIGZhbHNlLCB0cnVlLCBmYWxzZSk7CiAgICAgICAgICAgICAgcmVnaXN0ZXJlZFBvaW50ZXJzW3Jhd1R5cGVdID0geyBwb2ludGVyVHlwZTogcG9pbnRlckNvbnZlcnRlciwgY29uc3RQb2ludGVyVHlwZTogY29uc3RQb2ludGVyQ29udmVydGVyIH07CiAgICAgICAgICAgICAgcmVwbGFjZVB1YmxpY1N5bWJvbChsZWdhbEZ1bmN0aW9uTmFtZSwgY29uc3RydWN0b3IpOwogICAgICAgICAgICAgIHJldHVybiBbcmVmZXJlbmNlQ29udmVydGVyLCBwb2ludGVyQ29udmVydGVyLCBjb25zdFBvaW50ZXJDb252ZXJ0ZXJdOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGhlYXAzMlZlY3RvclRvQXJyYXkoY291bnQsIGZpcnN0RWxlbWVudCkgewogICAgICAgICAgICB2YXIgYXJyYXkgPSBbXTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7CiAgICAgICAgICAgICAgYXJyYXkucHVzaChIRUFQMzJbKGZpcnN0RWxlbWVudCA+PiAyKSArIGldKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19jb25zdHJ1Y3RvcihyYXdDbGFzc1R5cGUsIGFyZ0NvdW50LCByYXdBcmdUeXBlc0FkZHIsIGludm9rZXJTaWduYXR1cmUsIGludm9rZXIsIHJhd0NvbnN0cnVjdG9yKSB7CiAgICAgICAgICAgIGFzc2VydChhcmdDb3VudCA+IDApOwogICAgICAgICAgICB2YXIgcmF3QXJnVHlwZXMgPSBoZWFwMzJWZWN0b3JUb0FycmF5KGFyZ0NvdW50LCByYXdBcmdUeXBlc0FkZHIpOwogICAgICAgICAgICBpbnZva2VyID0gZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oaW52b2tlclNpZ25hdHVyZSwgaW52b2tlcik7CiAgICAgICAgICAgIHZhciBhcmdzID0gW3Jhd0NvbnN0cnVjdG9yXTsKICAgICAgICAgICAgdmFyIGRlc3RydWN0b3JzID0gW107CiAgICAgICAgICAgIHdoZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtdLCBbcmF3Q2xhc3NUeXBlXSwgZnVuY3Rpb24oY2xhc3NUeXBlKSB7CiAgICAgICAgICAgICAgY2xhc3NUeXBlID0gY2xhc3NUeXBlWzBdOwogICAgICAgICAgICAgIHZhciBodW1hbk5hbWUgPSAiY29uc3RydWN0b3IgIiArIGNsYXNzVHlwZS5uYW1lOwogICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IGNsYXNzVHlwZS5yZWdpc3RlcmVkQ2xhc3MuY29uc3RydWN0b3JfYm9keSkgewogICAgICAgICAgICAgICAgY2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5ID0gW107CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IGNsYXNzVHlwZS5yZWdpc3RlcmVkQ2xhc3MuY29uc3RydWN0b3JfYm9keVthcmdDb3VudCAtIDFdKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQmluZGluZ0Vycm9yKCJDYW5ub3QgcmVnaXN0ZXIgbXVsdGlwbGUgY29uc3RydWN0b3JzIHdpdGggaWRlbnRpY2FsIG51bWJlciBvZiBwYXJhbWV0ZXJzICgiICsgKGFyZ0NvdW50IC0gMSkgKyAiKSBmb3IgY2xhc3MgJyIgKyBjbGFzc1R5cGUubmFtZSArICInISBPdmVybG9hZCByZXNvbHV0aW9uIGlzIGN1cnJlbnRseSBvbmx5IHBlcmZvcm1lZCB1c2luZyB0aGUgcGFyYW1ldGVyIGNvdW50LCBub3QgYWN0dWFsIHR5cGUgaW5mbyEiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5W2FyZ0NvdW50IC0gMV0gPSBmdW5jdGlvbiB1bmJvdW5kVHlwZUhhbmRsZXIoKSB7CiAgICAgICAgICAgICAgICB0aHJvd1VuYm91bmRUeXBlRXJyb3IoIkNhbm5vdCBjb25zdHJ1Y3QgIiArIGNsYXNzVHlwZS5uYW1lICsgIiBkdWUgdG8gdW5ib3VuZCB0eXBlcyIsIHJhd0FyZ1R5cGVzKTsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIHdoZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtdLCByYXdBcmdUeXBlcywgZnVuY3Rpb24oYXJnVHlwZXMpIHsKICAgICAgICAgICAgICAgIGNsYXNzVHlwZS5yZWdpc3RlcmVkQ2xhc3MuY29uc3RydWN0b3JfYm9keVthcmdDb3VudCAtIDFdID0gZnVuY3Rpb24gY29uc3RydWN0b3JfYm9keSgpIHsKICAgICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IGFyZ0NvdW50IC0gMSkgewogICAgICAgICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKGh1bWFuTmFtZSArICIgY2FsbGVkIHdpdGggIiArIGFyZ3VtZW50cy5sZW5ndGggKyAiIGFyZ3VtZW50cywgZXhwZWN0ZWQgIiArIChhcmdDb3VudCAtIDEpKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBkZXN0cnVjdG9ycy5sZW5ndGggPSAwOwogICAgICAgICAgICAgICAgICBhcmdzLmxlbmd0aCA9IGFyZ0NvdW50OwogICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ0NvdW50OyArK2kpIHsKICAgICAgICAgICAgICAgICAgICBhcmdzW2ldID0gYXJnVHlwZXNbaV1bInRvV2lyZVR5cGUiXShkZXN0cnVjdG9ycywgYXJndW1lbnRzW2kgLSAxXSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgdmFyIHB0ciA9IGludm9rZXIuYXBwbHkobnVsbCwgYXJncyk7CiAgICAgICAgICAgICAgICAgIHJ1bkRlc3RydWN0b3JzKGRlc3RydWN0b3JzKTsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ1R5cGVzWzBdWyJmcm9tV2lyZVR5cGUiXShwdHIpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gbmV3Xyhjb25zdHJ1Y3RvciwgYXJndW1lbnRMaXN0KSB7CiAgICAgICAgICAgIGlmICghKGNvbnN0cnVjdG9yIGluc3RhbmNlb2YgRnVuY3Rpb24pKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigibmV3XyBjYWxsZWQgd2l0aCBjb25zdHJ1Y3RvciB0eXBlICIgKyB0eXBlb2YgY29uc3RydWN0b3IgKyAiIHdoaWNoIGlzIG5vdCBhIGZ1bmN0aW9uIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGR1bW15ID0gY3JlYXRlTmFtZWRGdW5jdGlvbihjb25zdHJ1Y3Rvci5uYW1lIHx8ICJ1bmtub3duRnVuY3Rpb25OYW1lIiwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBkdW1teS5wcm90b3R5cGUgPSBjb25zdHJ1Y3Rvci5wcm90b3R5cGU7CiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgZHVtbXkoKTsKICAgICAgICAgICAgdmFyIHIgPSBjb25zdHJ1Y3Rvci5hcHBseShvYmosIGFyZ3VtZW50TGlzdCk7CiAgICAgICAgICAgIHJldHVybiByIGluc3RhbmNlb2YgT2JqZWN0ID8gciA6IG9iajsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGNyYWZ0SW52b2tlckZ1bmN0aW9uKGh1bWFuTmFtZSwgYXJnVHlwZXMsIGNsYXNzVHlwZSwgY3BwSW52b2tlckZ1bmMsIGNwcFRhcmdldEZ1bmMpIHsKICAgICAgICAgICAgdmFyIGFyZ0NvdW50ID0gYXJnVHlwZXMubGVuZ3RoOwogICAgICAgICAgICBpZiAoYXJnQ291bnQgPCAyKSB7CiAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoImFyZ1R5cGVzIGFycmF5IHNpemUgbWlzbWF0Y2ghIE11c3QgYXQgbGVhc3QgZ2V0IHJldHVybiB2YWx1ZSBhbmQgJ3RoaXMnIHR5cGVzISIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBpc0NsYXNzTWV0aG9kRnVuYyA9IGFyZ1R5cGVzWzFdICE9PSBudWxsICYmIGNsYXNzVHlwZSAhPT0gbnVsbDsKICAgICAgICAgICAgdmFyIG5lZWRzRGVzdHJ1Y3RvclN0YWNrID0gZmFsc2U7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJnVHlwZXMubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICBpZiAoYXJnVHlwZXNbaV0gIT09IG51bGwgJiYgYXJnVHlwZXNbaV0uZGVzdHJ1Y3RvckZ1bmN0aW9uID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIG5lZWRzRGVzdHJ1Y3RvclN0YWNrID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcmV0dXJucyA9IGFyZ1R5cGVzWzBdLm5hbWUgIT09ICJ2b2lkIjsKICAgICAgICAgICAgdmFyIGFyZ3NMaXN0ID0gIiI7CiAgICAgICAgICAgIHZhciBhcmdzTGlzdFdpcmVkID0gIiI7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJnQ291bnQgLSAyOyArK2kpIHsKICAgICAgICAgICAgICBhcmdzTGlzdCArPSAoaSAhPT0gMCA/ICIsICIgOiAiIikgKyAiYXJnIiArIGk7CiAgICAgICAgICAgICAgYXJnc0xpc3RXaXJlZCArPSAoaSAhPT0gMCA/ICIsICIgOiAiIikgKyAiYXJnIiArIGkgKyAiV2lyZWQiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBpbnZva2VyRm5Cb2R5ID0gInJldHVybiBmdW5jdGlvbiAiICsgbWFrZUxlZ2FsRnVuY3Rpb25OYW1lKGh1bWFuTmFtZSkgKyAiKCIgKyBhcmdzTGlzdCArICIpIHtcbmlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAiICsgKGFyZ0NvdW50IC0gMikgKyAiKSB7XG50aHJvd0JpbmRpbmdFcnJvcignZnVuY3Rpb24gIiArIGh1bWFuTmFtZSArICIgY2FsbGVkIHdpdGggJyArIGFyZ3VtZW50cy5sZW5ndGggKyAnIGFyZ3VtZW50cywgZXhwZWN0ZWQgIiArIChhcmdDb3VudCAtIDIpICsgIiBhcmdzIScpO1xufVxuIjsKICAgICAgICAgICAgaWYgKG5lZWRzRGVzdHJ1Y3RvclN0YWNrKSB7CiAgICAgICAgICAgICAgaW52b2tlckZuQm9keSArPSAidmFyIGRlc3RydWN0b3JzID0gW107XG4iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBkdG9yU3RhY2sgPSBuZWVkc0Rlc3RydWN0b3JTdGFjayA/ICJkZXN0cnVjdG9ycyIgOiAibnVsbCI7CiAgICAgICAgICAgIHZhciBhcmdzMSA9IFsidGhyb3dCaW5kaW5nRXJyb3IiLCAiaW52b2tlciIsICJmbiIsICJydW5EZXN0cnVjdG9ycyIsICJyZXRUeXBlIiwgImNsYXNzUGFyYW0iXTsKICAgICAgICAgICAgdmFyIGFyZ3MyID0gW3Rocm93QmluZGluZ0Vycm9yLCBjcHBJbnZva2VyRnVuYywgY3BwVGFyZ2V0RnVuYywgcnVuRGVzdHJ1Y3RvcnMsIGFyZ1R5cGVzWzBdLCBhcmdUeXBlc1sxXV07CiAgICAgICAgICAgIGlmIChpc0NsYXNzTWV0aG9kRnVuYykgewogICAgICAgICAgICAgIGludm9rZXJGbkJvZHkgKz0gInZhciB0aGlzV2lyZWQgPSBjbGFzc1BhcmFtLnRvV2lyZVR5cGUoIiArIGR0b3JTdGFjayArICIsIHRoaXMpO1xuIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ0NvdW50IC0gMjsgKytpKSB7CiAgICAgICAgICAgICAgaW52b2tlckZuQm9keSArPSAidmFyIGFyZyIgKyBpICsgIldpcmVkID0gYXJnVHlwZSIgKyBpICsgIi50b1dpcmVUeXBlKCIgKyBkdG9yU3RhY2sgKyAiLCBhcmciICsgaSArICIpOyAvLyAiICsgYXJnVHlwZXNbaSArIDJdLm5hbWUgKyAiXG4iOwogICAgICAgICAgICAgIGFyZ3MxLnB1c2goImFyZ1R5cGUiICsgaSk7CiAgICAgICAgICAgICAgYXJnczIucHVzaChhcmdUeXBlc1tpICsgMl0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChpc0NsYXNzTWV0aG9kRnVuYykgewogICAgICAgICAgICAgIGFyZ3NMaXN0V2lyZWQgPSAidGhpc1dpcmVkIiArIChhcmdzTGlzdFdpcmVkLmxlbmd0aCA+IDAgPyAiLCAiIDogIiIpICsgYXJnc0xpc3RXaXJlZDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpbnZva2VyRm5Cb2R5ICs9IChyZXR1cm5zID8gInZhciBydiA9ICIgOiAiIikgKyAiaW52b2tlcihmbiIgKyAoYXJnc0xpc3RXaXJlZC5sZW5ndGggPiAwID8gIiwgIiA6ICIiKSArIGFyZ3NMaXN0V2lyZWQgKyAiKTtcbiI7CiAgICAgICAgICAgIGlmIChuZWVkc0Rlc3RydWN0b3JTdGFjaykgewogICAgICAgICAgICAgIGludm9rZXJGbkJvZHkgKz0gInJ1bkRlc3RydWN0b3JzKGRlc3RydWN0b3JzKTtcbiI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGlzQ2xhc3NNZXRob2RGdW5jID8gMSA6IDI7IGkgPCBhcmdUeXBlcy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgICAgdmFyIHBhcmFtTmFtZSA9IGkgPT09IDEgPyAidGhpc1dpcmVkIiA6ICJhcmciICsgKGkgLSAyKSArICJXaXJlZCI7CiAgICAgICAgICAgICAgICBpZiAoYXJnVHlwZXNbaV0uZGVzdHJ1Y3RvckZ1bmN0aW9uICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgIGludm9rZXJGbkJvZHkgKz0gcGFyYW1OYW1lICsgIl9kdG9yKCIgKyBwYXJhbU5hbWUgKyAiKTsgLy8gIiArIGFyZ1R5cGVzW2ldLm5hbWUgKyAiXG4iOwogICAgICAgICAgICAgICAgICBhcmdzMS5wdXNoKHBhcmFtTmFtZSArICJfZHRvciIpOwogICAgICAgICAgICAgICAgICBhcmdzMi5wdXNoKGFyZ1R5cGVzW2ldLmRlc3RydWN0b3JGdW5jdGlvbik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChyZXR1cm5zKSB7CiAgICAgICAgICAgICAgaW52b2tlckZuQm9keSArPSAidmFyIHJldCA9IHJldFR5cGUuZnJvbVdpcmVUeXBlKHJ2KTtcbnJldHVybiByZXQ7XG4iOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB9CiAgICAgICAgICAgIGludm9rZXJGbkJvZHkgKz0gIn1cbiI7CiAgICAgICAgICAgIGFyZ3MxLnB1c2goaW52b2tlckZuQm9keSk7CiAgICAgICAgICAgIHZhciBpbnZva2VyRnVuY3Rpb24gPSBuZXdfKEZ1bmN0aW9uLCBhcmdzMSkuYXBwbHkobnVsbCwgYXJnczIpOwogICAgICAgICAgICByZXR1cm4gaW52b2tlckZ1bmN0aW9uOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfY2xhc3NfZnVuY3Rpb24ocmF3Q2xhc3NUeXBlLCBtZXRob2ROYW1lLCBhcmdDb3VudCwgcmF3QXJnVHlwZXNBZGRyLCBpbnZva2VyU2lnbmF0dXJlLCByYXdJbnZva2VyLCBjb250ZXh0LCBpc1B1cmVWaXJ0dWFsKSB7CiAgICAgICAgICAgIHZhciByYXdBcmdUeXBlcyA9IGhlYXAzMlZlY3RvclRvQXJyYXkoYXJnQ291bnQsIHJhd0FyZ1R5cGVzQWRkcik7CiAgICAgICAgICAgIG1ldGhvZE5hbWUgPSByZWFkTGF0aW4xU3RyaW5nKG1ldGhvZE5hbWUpOwogICAgICAgICAgICByYXdJbnZva2VyID0gZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oaW52b2tlclNpZ25hdHVyZSwgcmF3SW52b2tlcik7CiAgICAgICAgICAgIHdoZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtdLCBbcmF3Q2xhc3NUeXBlXSwgZnVuY3Rpb24oY2xhc3NUeXBlKSB7CiAgICAgICAgICAgICAgY2xhc3NUeXBlID0gY2xhc3NUeXBlWzBdOwogICAgICAgICAgICAgIHZhciBodW1hbk5hbWUgPSBjbGFzc1R5cGUubmFtZSArICIuIiArIG1ldGhvZE5hbWU7CiAgICAgICAgICAgICAgaWYgKGlzUHVyZVZpcnR1YWwpIHsKICAgICAgICAgICAgICAgIGNsYXNzVHlwZS5yZWdpc3RlcmVkQ2xhc3MucHVyZVZpcnR1YWxGdW5jdGlvbnMucHVzaChtZXRob2ROYW1lKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZnVuY3Rpb24gdW5ib3VuZFR5cGVzSGFuZGxlcigpIHsKICAgICAgICAgICAgICAgIHRocm93VW5ib3VuZFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgIiArIGh1bWFuTmFtZSArICIgZHVlIHRvIHVuYm91bmQgdHlwZXMiLCByYXdBcmdUeXBlcyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhciBwcm90byA9IGNsYXNzVHlwZS5yZWdpc3RlcmVkQ2xhc3MuaW5zdGFuY2VQcm90b3R5cGU7CiAgICAgICAgICAgICAgdmFyIG1ldGhvZCA9IHByb3RvW21ldGhvZE5hbWVdOwogICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IG1ldGhvZCB8fCB2b2lkIDAgPT09IG1ldGhvZC5vdmVybG9hZFRhYmxlICYmIG1ldGhvZC5jbGFzc05hbWUgIT09IGNsYXNzVHlwZS5uYW1lICYmIG1ldGhvZC5hcmdDb3VudCA9PT0gYXJnQ291bnQgLSAyKSB7CiAgICAgICAgICAgICAgICB1bmJvdW5kVHlwZXNIYW5kbGVyLmFyZ0NvdW50ID0gYXJnQ291bnQgLSAyOwogICAgICAgICAgICAgICAgdW5ib3VuZFR5cGVzSGFuZGxlci5jbGFzc05hbWUgPSBjbGFzc1R5cGUubmFtZTsKICAgICAgICAgICAgICAgIHByb3RvW21ldGhvZE5hbWVdID0gdW5ib3VuZFR5cGVzSGFuZGxlcjsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZW5zdXJlT3ZlcmxvYWRUYWJsZShwcm90bywgbWV0aG9kTmFtZSwgaHVtYW5OYW1lKTsKICAgICAgICAgICAgICAgIHByb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGVbYXJnQ291bnQgLSAyXSA9IHVuYm91bmRUeXBlc0hhbmRsZXI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHdoZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtdLCByYXdBcmdUeXBlcywgZnVuY3Rpb24oYXJnVHlwZXMpIHsKICAgICAgICAgICAgICAgIHZhciBtZW1iZXJGdW5jdGlvbiA9IGNyYWZ0SW52b2tlckZ1bmN0aW9uKGh1bWFuTmFtZSwgYXJnVHlwZXMsIGNsYXNzVHlwZSwgcmF3SW52b2tlciwgY29udGV4dCk7CiAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlKSB7CiAgICAgICAgICAgICAgICAgIG1lbWJlckZ1bmN0aW9uLmFyZ0NvdW50ID0gYXJnQ291bnQgLSAyOwogICAgICAgICAgICAgICAgICBwcm90b1ttZXRob2ROYW1lXSA9IG1lbWJlckZ1bmN0aW9uOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgcHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZVthcmdDb3VudCAtIDJdID0gbWVtYmVyRnVuY3Rpb247CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2NvbnN0YW50KG5hbWUsIHR5cGUsIHZhbHVlKSB7CiAgICAgICAgICAgIG5hbWUgPSByZWFkTGF0aW4xU3RyaW5nKG5hbWUpOwogICAgICAgICAgICB3aGVuRGVwZW5kZW50VHlwZXNBcmVSZXNvbHZlZChbXSwgW3R5cGVdLCBmdW5jdGlvbih0eXBlMikgewogICAgICAgICAgICAgIHR5cGUyID0gdHlwZTJbMF07CiAgICAgICAgICAgICAgTW9kdWxlW25hbWVdID0gdHlwZTJbImZyb21XaXJlVHlwZSJdKHZhbHVlKTsKICAgICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgdmFyIGVtdmFsX2ZyZWVfbGlzdCA9IFtdOwogICAgICAgICAgdmFyIGVtdmFsX2hhbmRsZV9hcnJheSA9IFt7fSwgeyB2YWx1ZTogdm9pZCAwIH0sIHsgdmFsdWU6IG51bGwgfSwgeyB2YWx1ZTogdHJ1ZSB9LCB7IHZhbHVlOiBmYWxzZSB9XTsKICAgICAgICAgIGZ1bmN0aW9uIF9fZW12YWxfZGVjcmVmKGhhbmRsZSkgewogICAgICAgICAgICBpZiAoaGFuZGxlID4gNCAmJiAwID09PSAtLWVtdmFsX2hhbmRsZV9hcnJheVtoYW5kbGVdLnJlZmNvdW50KSB7CiAgICAgICAgICAgICAgZW12YWxfaGFuZGxlX2FycmF5W2hhbmRsZV0gPSB2b2lkIDA7CiAgICAgICAgICAgICAgZW12YWxfZnJlZV9saXN0LnB1c2goaGFuZGxlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gY291bnRfZW12YWxfaGFuZGxlcygpIHsKICAgICAgICAgICAgdmFyIGNvdW50ID0gMDsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDU7IGkgPCBlbXZhbF9oYW5kbGVfYXJyYXkubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICBpZiAoZW12YWxfaGFuZGxlX2FycmF5W2ldICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgICsrY291bnQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBjb3VudDsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGdldF9maXJzdF9lbXZhbCgpIHsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDU7IGkgPCBlbXZhbF9oYW5kbGVfYXJyYXkubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICBpZiAoZW12YWxfaGFuZGxlX2FycmF5W2ldICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIHJldHVybiBlbXZhbF9oYW5kbGVfYXJyYXlbaV07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gaW5pdF9lbXZhbCgpIHsKICAgICAgICAgICAgTW9kdWxlWyJjb3VudF9lbXZhbF9oYW5kbGVzIl0gPSBjb3VudF9lbXZhbF9oYW5kbGVzOwogICAgICAgICAgICBNb2R1bGVbImdldF9maXJzdF9lbXZhbCJdID0gZ2V0X2ZpcnN0X2VtdmFsOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbXZhbF9yZWdpc3Rlcih2YWx1ZSkgewogICAgICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7CiAgICAgICAgICAgICAgY2FzZSB2b2lkIDA6IHsKICAgICAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjYXNlIG51bGw6IHsKICAgICAgICAgICAgICAgIHJldHVybiAyOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjYXNlIHRydWU6IHsKICAgICAgICAgICAgICAgIHJldHVybiAzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjYXNlIGZhbHNlOiB7CiAgICAgICAgICAgICAgICByZXR1cm4gNDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZGVmYXVsdDogewogICAgICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGVtdmFsX2ZyZWVfbGlzdC5sZW5ndGggPyBlbXZhbF9mcmVlX2xpc3QucG9wKCkgOiBlbXZhbF9oYW5kbGVfYXJyYXkubGVuZ3RoOwogICAgICAgICAgICAgICAgZW12YWxfaGFuZGxlX2FycmF5W2hhbmRsZV0gPSB7IHJlZmNvdW50OiAxLCB2YWx1ZSB9OwogICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2VtdmFsKHJhd1R5cGUsIG5hbWUpIHsKICAgICAgICAgICAgbmFtZSA9IHJlYWRMYXRpbjFTdHJpbmcobmFtZSk7CiAgICAgICAgICAgIHJlZ2lzdGVyVHlwZShyYXdUeXBlLCB7IG5hbWUsICJmcm9tV2lyZVR5cGUiOiBmdW5jdGlvbihoYW5kbGUpIHsKICAgICAgICAgICAgICB2YXIgcnYgPSBlbXZhbF9oYW5kbGVfYXJyYXlbaGFuZGxlXS52YWx1ZTsKICAgICAgICAgICAgICBfX2VtdmFsX2RlY3JlZihoYW5kbGUpOwogICAgICAgICAgICAgIHJldHVybiBydjsKICAgICAgICAgICAgfSwgInRvV2lyZVR5cGUiOiBmdW5jdGlvbihkZXN0cnVjdG9ycywgdmFsdWUpIHsKICAgICAgICAgICAgICByZXR1cm4gX19lbXZhbF9yZWdpc3Rlcih2YWx1ZSk7CiAgICAgICAgICAgIH0sICJhcmdQYWNrQWR2YW5jZSI6IDgsICJyZWFkVmFsdWVGcm9tUG9pbnRlciI6IHNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyLCBkZXN0cnVjdG9yRnVuY3Rpb246IG51bGwgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBlbnVtUmVhZFZhbHVlRnJvbVBvaW50ZXIobmFtZSwgc2hpZnQsIHNpZ25lZCkgewogICAgICAgICAgICBzd2l0Y2ggKHNoaWZ0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBvaW50ZXIpIHsKICAgICAgICAgICAgICAgICAgdmFyIGhlYXAgPSBzaWduZWQgPyBIRUFQOCA6IEhFQVBVODsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbImZyb21XaXJlVHlwZSJdKGhlYXBbcG9pbnRlcl0pOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocG9pbnRlcikgewogICAgICAgICAgICAgICAgICB2YXIgaGVhcCA9IHNpZ25lZCA/IEhFQVAxNiA6IEhFQVBVMTY7CiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzWyJmcm9tV2lyZVR5cGUiXShoZWFwW3BvaW50ZXIgPj4gMV0pOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocG9pbnRlcikgewogICAgICAgICAgICAgICAgICB2YXIgaGVhcCA9IHNpZ25lZCA/IEhFQVAzMiA6IEhFQVBVMzI7CiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzWyJmcm9tV2lyZVR5cGUiXShoZWFwW3BvaW50ZXIgPj4gMl0pOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiVW5rbm93biBpbnRlZ2VyIHR5cGU6ICIgKyBuYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfZW51bShyYXdUeXBlLCBuYW1lLCBzaXplLCBpc1NpZ25lZCkgewogICAgICAgICAgICB2YXIgc2hpZnQgPSBnZXRTaGlmdEZyb21TaXplKHNpemUpOwogICAgICAgICAgICBuYW1lID0gcmVhZExhdGluMVN0cmluZyhuYW1lKTsKICAgICAgICAgICAgZnVuY3Rpb24gY3RvcigpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICBjdG9yLnZhbHVlcyA9IHt9OwogICAgICAgICAgICByZWdpc3RlclR5cGUocmF3VHlwZSwgeyBuYW1lLCBjb25zdHJ1Y3RvcjogY3RvciwgImZyb21XaXJlVHlwZSI6IGZ1bmN0aW9uKGMpIHsKICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci52YWx1ZXNbY107CiAgICAgICAgICAgIH0sICJ0b1dpcmVUeXBlIjogZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsIGMpIHsKICAgICAgICAgICAgICByZXR1cm4gYy52YWx1ZTsKICAgICAgICAgICAgfSwgImFyZ1BhY2tBZHZhbmNlIjogOCwgInJlYWRWYWx1ZUZyb21Qb2ludGVyIjogZW51bVJlYWRWYWx1ZUZyb21Qb2ludGVyKG5hbWUsIHNoaWZ0LCBpc1NpZ25lZCksIGRlc3RydWN0b3JGdW5jdGlvbjogbnVsbCB9KTsKICAgICAgICAgICAgZXhwb3NlUHVibGljU3ltYm9sKG5hbWUsIGN0b3IpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gcmVxdWlyZVJlZ2lzdGVyZWRUeXBlKHJhd1R5cGUsIGh1bWFuTmFtZSkgewogICAgICAgICAgICB2YXIgaW1wbCA9IHJlZ2lzdGVyZWRUeXBlc1tyYXdUeXBlXTsKICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gaW1wbCkgewogICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKGh1bWFuTmFtZSArICIgaGFzIHVua25vd24gdHlwZSAiICsgZ2V0VHlwZU5hbWUocmF3VHlwZSkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBpbXBsOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfZW51bV92YWx1ZShyYXdFbnVtVHlwZSwgbmFtZSwgZW51bVZhbHVlKSB7CiAgICAgICAgICAgIHZhciBlbnVtVHlwZSA9IHJlcXVpcmVSZWdpc3RlcmVkVHlwZShyYXdFbnVtVHlwZSwgImVudW0iKTsKICAgICAgICAgICAgbmFtZSA9IHJlYWRMYXRpbjFTdHJpbmcobmFtZSk7CiAgICAgICAgICAgIHZhciBFbnVtID0gZW51bVR5cGUuY29uc3RydWN0b3I7CiAgICAgICAgICAgIHZhciBWYWx1ZSA9IE9iamVjdC5jcmVhdGUoZW51bVR5cGUuY29uc3RydWN0b3IucHJvdG90eXBlLCB7IHZhbHVlOiB7IHZhbHVlOiBlbnVtVmFsdWUgfSwgY29uc3RydWN0b3I6IHsgdmFsdWU6IGNyZWF0ZU5hbWVkRnVuY3Rpb24oZW51bVR5cGUubmFtZSArICJfIiArIG5hbWUsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICB9KSB9IH0pOwogICAgICAgICAgICBFbnVtLnZhbHVlc1tlbnVtVmFsdWVdID0gVmFsdWU7CiAgICAgICAgICAgIEVudW1bbmFtZV0gPSBWYWx1ZTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9lbWJpbmRfcmVwcih2MykgewogICAgICAgICAgICBpZiAodjMgPT09IG51bGwpIHsKICAgICAgICAgICAgICByZXR1cm4gIm51bGwiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciB0ID0gdHlwZW9mIHYzOwogICAgICAgICAgICBpZiAodCA9PT0gIm9iamVjdCIgfHwgdCA9PT0gImFycmF5IiB8fCB0ID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHYzLnRvU3RyaW5nKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuICIiICsgdjM7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGZsb2F0UmVhZFZhbHVlRnJvbVBvaW50ZXIobmFtZSwgc2hpZnQpIHsKICAgICAgICAgICAgc3dpdGNoIChzaGlmdCkgewogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihwb2ludGVyKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzWyJmcm9tV2lyZVR5cGUiXShIRUFQRjMyW3BvaW50ZXIgPj4gMl0pOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocG9pbnRlcikgewogICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1siZnJvbVdpcmVUeXBlIl0oSEVBUEY2NFtwb2ludGVyID4+IDNdKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlVua25vd24gZmxvYXQgdHlwZTogIiArIG5hbWUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9mbG9hdChyYXdUeXBlLCBuYW1lLCBzaXplKSB7CiAgICAgICAgICAgIHZhciBzaGlmdCA9IGdldFNoaWZ0RnJvbVNpemUoc2l6ZSk7CiAgICAgICAgICAgIG5hbWUgPSByZWFkTGF0aW4xU3RyaW5nKG5hbWUpOwogICAgICAgICAgICByZWdpc3RlclR5cGUocmF3VHlwZSwgeyBuYW1lLCAiZnJvbVdpcmVUeXBlIjogZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICAgIH0sICJ0b1dpcmVUeXBlIjogZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsIHZhbHVlKSB7CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gIm51bWJlciIgJiYgdHlwZW9mIHZhbHVlICE9PSAiYm9vbGVhbiIpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0ICInICsgX2VtYmluZF9yZXByKHZhbHVlKSArICciIHRvICcgKyB0aGlzLm5hbWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICAgIH0sICJhcmdQYWNrQWR2YW5jZSI6IDgsICJyZWFkVmFsdWVGcm9tUG9pbnRlciI6IGZsb2F0UmVhZFZhbHVlRnJvbVBvaW50ZXIobmFtZSwgc2hpZnQpLCBkZXN0cnVjdG9yRnVuY3Rpb246IG51bGwgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9mdW5jdGlvbihuYW1lLCBhcmdDb3VudCwgcmF3QXJnVHlwZXNBZGRyLCBzaWduYXR1cmUsIHJhd0ludm9rZXIsIGZuKSB7CiAgICAgICAgICAgIHZhciBhcmdUeXBlcyA9IGhlYXAzMlZlY3RvclRvQXJyYXkoYXJnQ291bnQsIHJhd0FyZ1R5cGVzQWRkcik7CiAgICAgICAgICAgIG5hbWUgPSByZWFkTGF0aW4xU3RyaW5nKG5hbWUpOwogICAgICAgICAgICByYXdJbnZva2VyID0gZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oc2lnbmF0dXJlLCByYXdJbnZva2VyKTsKICAgICAgICAgICAgZXhwb3NlUHVibGljU3ltYm9sKG5hbWUsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHRocm93VW5ib3VuZFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgIiArIG5hbWUgKyAiIGR1ZSB0byB1bmJvdW5kIHR5cGVzIiwgYXJnVHlwZXMpOwogICAgICAgICAgICB9LCBhcmdDb3VudCAtIDEpOwogICAgICAgICAgICB3aGVuRGVwZW5kZW50VHlwZXNBcmVSZXNvbHZlZChbXSwgYXJnVHlwZXMsIGZ1bmN0aW9uKGFyZ1R5cGVzMikgewogICAgICAgICAgICAgIHZhciBpbnZva2VyQXJnc0FycmF5ID0gW2FyZ1R5cGVzMlswXSwgbnVsbF0uY29uY2F0KGFyZ1R5cGVzMi5zbGljZSgxKSk7CiAgICAgICAgICAgICAgcmVwbGFjZVB1YmxpY1N5bWJvbChuYW1lLCBjcmFmdEludm9rZXJGdW5jdGlvbihuYW1lLCBpbnZva2VyQXJnc0FycmF5LCBudWxsLCByYXdJbnZva2VyLCBmbiksIGFyZ0NvdW50IC0gMSk7CiAgICAgICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGludGVnZXJSZWFkVmFsdWVGcm9tUG9pbnRlcihuYW1lLCBzaGlmdCwgc2lnbmVkKSB7CiAgICAgICAgICAgIHN3aXRjaCAoc2hpZnQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByZXR1cm4gc2lnbmVkID8gZnVuY3Rpb24gcmVhZFM4RnJvbVBvaW50ZXIocG9pbnRlcikgewogICAgICAgICAgICAgICAgICByZXR1cm4gSEVBUDhbcG9pbnRlcl07CiAgICAgICAgICAgICAgICB9IDogZnVuY3Rpb24gcmVhZFU4RnJvbVBvaW50ZXIocG9pbnRlcikgewogICAgICAgICAgICAgICAgICByZXR1cm4gSEVBUFU4W3BvaW50ZXJdOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICByZXR1cm4gc2lnbmVkID8gZnVuY3Rpb24gcmVhZFMxNkZyb21Qb2ludGVyKHBvaW50ZXIpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIEhFQVAxNltwb2ludGVyID4+IDFdOwogICAgICAgICAgICAgICAgfSA6IGZ1bmN0aW9uIHJlYWRVMTZGcm9tUG9pbnRlcihwb2ludGVyKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBIRUFQVTE2W3BvaW50ZXIgPj4gMV07CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHJldHVybiBzaWduZWQgPyBmdW5jdGlvbiByZWFkUzMyRnJvbVBvaW50ZXIocG9pbnRlcikgewogICAgICAgICAgICAgICAgICByZXR1cm4gSEVBUDMyW3BvaW50ZXIgPj4gMl07CiAgICAgICAgICAgICAgICB9IDogZnVuY3Rpb24gcmVhZFUzMkZyb21Qb2ludGVyKHBvaW50ZXIpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIEhFQVBVMzJbcG9pbnRlciA+PiAyXTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlVua25vd24gaW50ZWdlciB0eXBlOiAiICsgbmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2ludGVnZXIocHJpbWl0aXZlVHlwZSwgbmFtZSwgc2l6ZSwgbWluUmFuZ2UsIG1heFJhbmdlKSB7CiAgICAgICAgICAgIG5hbWUgPSByZWFkTGF0aW4xU3RyaW5nKG5hbWUpOwogICAgICAgICAgICBpZiAobWF4UmFuZ2UgPT09IC0xKSB7CiAgICAgICAgICAgICAgbWF4UmFuZ2UgPSA0Mjk0OTY3Mjk1OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBzaGlmdCA9IGdldFNoaWZ0RnJvbVNpemUoc2l6ZSk7CiAgICAgICAgICAgIHZhciBmcm9tV2lyZVR5cGUgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgaWYgKG1pblJhbmdlID09PSAwKSB7CiAgICAgICAgICAgICAgdmFyIGJpdHNoaWZ0ID0gMzIgLSA4ICogc2l6ZTsKICAgICAgICAgICAgICBmcm9tV2lyZVR5cGUgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlIDw8IGJpdHNoaWZ0ID4+PiBiaXRzaGlmdDsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBpc1Vuc2lnbmVkVHlwZSA9IG5hbWUuaW5kZXhPZigidW5zaWduZWQiKSAhPSAtMTsKICAgICAgICAgICAgcmVnaXN0ZXJUeXBlKHByaW1pdGl2ZVR5cGUsIHsgbmFtZSwgImZyb21XaXJlVHlwZSI6IGZyb21XaXJlVHlwZSwgInRvV2lyZVR5cGUiOiBmdW5jdGlvbihkZXN0cnVjdG9ycywgdmFsdWUpIHsKICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAibnVtYmVyIiAmJiB0eXBlb2YgdmFsdWUgIT09ICJib29sZWFuIikgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgIicgKyBfZW1iaW5kX3JlcHIodmFsdWUpICsgJyIgdG8gJyArIHRoaXMubmFtZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh2YWx1ZSA8IG1pblJhbmdlIHx8IHZhbHVlID4gbWF4UmFuZ2UpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Bhc3NpbmcgYSBudW1iZXIgIicgKyBfZW1iaW5kX3JlcHIodmFsdWUpICsgJyIgZnJvbSBKUyBzaWRlIHRvIEMvQysrIHNpZGUgdG8gYW4gYXJndW1lbnQgb2YgdHlwZSAiJyArIG5hbWUgKyAnIiwgd2hpY2ggaXMgb3V0c2lkZSB0aGUgdmFsaWQgcmFuZ2UgWycgKyBtaW5SYW5nZSArICIsICIgKyBtYXhSYW5nZSArICJdISIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gaXNVbnNpZ25lZFR5cGUgPyB2YWx1ZSA+Pj4gMCA6IHZhbHVlIHwgMDsKICAgICAgICAgICAgfSwgImFyZ1BhY2tBZHZhbmNlIjogOCwgInJlYWRWYWx1ZUZyb21Qb2ludGVyIjogaW50ZWdlclJlYWRWYWx1ZUZyb21Qb2ludGVyKG5hbWUsIHNoaWZ0LCBtaW5SYW5nZSAhPT0gMCksIGRlc3RydWN0b3JGdW5jdGlvbjogbnVsbCB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX21lbW9yeV92aWV3KHJhd1R5cGUsIGRhdGFUeXBlSW5kZXgsIG5hbWUpIHsKICAgICAgICAgICAgdmFyIHR5cGVNYXBwaW5nID0gW0ludDhBcnJheSwgVWludDhBcnJheSwgSW50MTZBcnJheSwgVWludDE2QXJyYXksIEludDMyQXJyYXksIFVpbnQzMkFycmF5LCBGbG9hdDMyQXJyYXksIEZsb2F0NjRBcnJheV07CiAgICAgICAgICAgIHZhciBUQSA9IHR5cGVNYXBwaW5nW2RhdGFUeXBlSW5kZXhdOwogICAgICAgICAgICBmdW5jdGlvbiBkZWNvZGVNZW1vcnlWaWV3KGhhbmRsZSkgewogICAgICAgICAgICAgIGhhbmRsZSA9IGhhbmRsZSA+PiAyOwogICAgICAgICAgICAgIHZhciBoZWFwID0gSEVBUFUzMjsKICAgICAgICAgICAgICB2YXIgc2l6ZSA9IGhlYXBbaGFuZGxlXTsKICAgICAgICAgICAgICB2YXIgZGF0YSA9IGhlYXBbaGFuZGxlICsgMV07CiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUQShidWZmZXIsIGRhdGEsIHNpemUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG5hbWUgPSByZWFkTGF0aW4xU3RyaW5nKG5hbWUpOwogICAgICAgICAgICByZWdpc3RlclR5cGUocmF3VHlwZSwgeyBuYW1lLCAiZnJvbVdpcmVUeXBlIjogZGVjb2RlTWVtb3J5VmlldywgImFyZ1BhY2tBZHZhbmNlIjogOCwgInJlYWRWYWx1ZUZyb21Qb2ludGVyIjogZGVjb2RlTWVtb3J5VmlldyB9LCB7IGlnbm9yZUR1cGxpY2F0ZVJlZ2lzdHJhdGlvbnM6IHRydWUgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9zdGRfc3RyaW5nKHJhd1R5cGUsIG5hbWUpIHsKICAgICAgICAgICAgbmFtZSA9IHJlYWRMYXRpbjFTdHJpbmcobmFtZSk7CiAgICAgICAgICAgIHZhciBzdGRTdHJpbmdJc1VURjggPSBuYW1lID09PSAic3RkOjpzdHJpbmciOwogICAgICAgICAgICByZWdpc3RlclR5cGUocmF3VHlwZSwgeyBuYW1lLCAiZnJvbVdpcmVUeXBlIjogZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gSEVBUFUzMlt2YWx1ZSA+PiAyXTsKICAgICAgICAgICAgICB2YXIgc3RyOwogICAgICAgICAgICAgIGlmIChzdGRTdHJpbmdJc1VURjgpIHsKICAgICAgICAgICAgICAgIHZhciBkZWNvZGVTdGFydFB0ciA9IHZhbHVlICsgNDsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Qnl0ZVB0ciA9IHZhbHVlICsgNCArIGk7CiAgICAgICAgICAgICAgICAgIGlmIChpID09IGxlbmd0aCB8fCBIRUFQVThbY3VycmVudEJ5dGVQdHJdID09IDApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbWF4UmVhZCA9IGN1cnJlbnRCeXRlUHRyIC0gZGVjb2RlU3RhcnRQdHI7CiAgICAgICAgICAgICAgICAgICAgdmFyIHN0cmluZ1NlZ21lbnQgPSBVVEY4VG9TdHJpbmcoZGVjb2RlU3RhcnRQdHIsIG1heFJlYWQpOwogICAgICAgICAgICAgICAgICAgIGlmIChzdHIgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyaW5nU2VnbWVudDsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMCk7CiAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gc3RyaW5nU2VnbWVudDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZGVjb2RlU3RhcnRQdHIgPSBjdXJyZW50Qnl0ZVB0ciArIDE7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFyIGEzID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICAgIGEzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZShIRUFQVThbdmFsdWUgKyA0ICsgaV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RyID0gYTMuam9pbigiIik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF9mcmVlKHZhbHVlKTsKICAgICAgICAgICAgICByZXR1cm4gc3RyOwogICAgICAgICAgICB9LCAidG9XaXJlVHlwZSI6IGZ1bmN0aW9uKGRlc3RydWN0b3JzLCB2YWx1ZSkgewogICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBVaW50OEFycmF5KHZhbHVlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIGdldExlbmd0aDsKICAgICAgICAgICAgICB2YXIgdmFsdWVJc09mVHlwZVN0cmluZyA9IHR5cGVvZiB2YWx1ZSA9PT0gInN0cmluZyI7CiAgICAgICAgICAgICAgaWYgKCEodmFsdWVJc09mVHlwZVN0cmluZyB8fCB2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHwgdmFsdWUgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheSB8fCB2YWx1ZSBpbnN0YW5jZW9mIEludDhBcnJheSkpIHsKICAgICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJDYW5ub3QgcGFzcyBub24tc3RyaW5nIHRvIHN0ZDo6c3RyaW5nIik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChzdGRTdHJpbmdJc1VURjggJiYgdmFsdWVJc09mVHlwZVN0cmluZykgewogICAgICAgICAgICAgICAgZ2V0TGVuZ3RoID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBsZW5ndGhCeXRlc1VURjgodmFsdWUpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZ2V0TGVuZ3RoID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGg7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKCk7CiAgICAgICAgICAgICAgdmFyIHB0ciA9IF9tYWxsb2MoNCArIGxlbmd0aCArIDEpOwogICAgICAgICAgICAgIEhFQVBVMzJbcHRyID4+IDJdID0gbGVuZ3RoOwogICAgICAgICAgICAgIGlmIChzdGRTdHJpbmdJc1VURjggJiYgdmFsdWVJc09mVHlwZVN0cmluZykgewogICAgICAgICAgICAgICAgc3RyaW5nVG9VVEY4KHZhbHVlLCBwdHIgKyA0LCBsZW5ndGggKyAxKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKHZhbHVlSXNPZlR5cGVTdHJpbmcpIHsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgICAgICAgICAgIHZhciBjaGFyQ29kZSA9IHZhbHVlLmNoYXJDb2RlQXQoaSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID4gMjU1KSB7CiAgICAgICAgICAgICAgICAgICAgICBfZnJlZShwdHIpOwogICAgICAgICAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoIlN0cmluZyBoYXMgVVRGLTE2IGNvZGUgdW5pdHMgdGhhdCBkbyBub3QgZml0IGluIDggYml0cyIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBIRUFQVThbcHRyICsgNCArIGldID0gY2hhckNvZGU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICAgICAgICBIRUFQVThbcHRyICsgNCArIGldID0gdmFsdWVbaV07CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKGRlc3RydWN0b3JzICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICBkZXN0cnVjdG9ycy5wdXNoKF9mcmVlLCBwdHIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gcHRyOwogICAgICAgICAgICB9LCAiYXJnUGFja0FkdmFuY2UiOiA4LCAicmVhZFZhbHVlRnJvbVBvaW50ZXIiOiBzaW1wbGVSZWFkVmFsdWVGcm9tUG9pbnRlciwgZGVzdHJ1Y3RvckZ1bmN0aW9uOiBmdW5jdGlvbihwdHIpIHsKICAgICAgICAgICAgICBfZnJlZShwdHIpOwogICAgICAgICAgICB9IH0pOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfc3RkX3dzdHJpbmcocmF3VHlwZSwgY2hhclNpemUsIG5hbWUpIHsKICAgICAgICAgICAgbmFtZSA9IHJlYWRMYXRpbjFTdHJpbmcobmFtZSk7CiAgICAgICAgICAgIHZhciBkZWNvZGVTdHJpbmcsIGVuY29kZVN0cmluZywgZ2V0SGVhcCwgbGVuZ3RoQnl0ZXNVVEYsIHNoaWZ0OwogICAgICAgICAgICBpZiAoY2hhclNpemUgPT09IDIpIHsKICAgICAgICAgICAgICBkZWNvZGVTdHJpbmcgPSBVVEYxNlRvU3RyaW5nOwogICAgICAgICAgICAgIGVuY29kZVN0cmluZyA9IHN0cmluZ1RvVVRGMTY7CiAgICAgICAgICAgICAgbGVuZ3RoQnl0ZXNVVEYgPSBsZW5ndGhCeXRlc1VURjE2OwogICAgICAgICAgICAgIGdldEhlYXAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiBIRUFQVTE2OwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgc2hpZnQgPSAxOwogICAgICAgICAgICB9IGVsc2UgaWYgKGNoYXJTaXplID09PSA0KSB7CiAgICAgICAgICAgICAgZGVjb2RlU3RyaW5nID0gVVRGMzJUb1N0cmluZzsKICAgICAgICAgICAgICBlbmNvZGVTdHJpbmcgPSBzdHJpbmdUb1VURjMyOwogICAgICAgICAgICAgIGxlbmd0aEJ5dGVzVVRGID0gbGVuZ3RoQnl0ZXNVVEYzMjsKICAgICAgICAgICAgICBnZXRIZWFwID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gSEVBUFUzMjsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIHNoaWZ0ID0gMjsKICAgICAgICAgICAgfQogICAgICAgICAgICByZWdpc3RlclR5cGUocmF3VHlwZSwgeyBuYW1lLCAiZnJvbVdpcmVUeXBlIjogZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gSEVBUFUzMlt2YWx1ZSA+PiAyXTsKICAgICAgICAgICAgICB2YXIgSEVBUCA9IGdldEhlYXAoKTsKICAgICAgICAgICAgICB2YXIgc3RyOwogICAgICAgICAgICAgIHZhciBkZWNvZGVTdGFydFB0ciA9IHZhbHVlICsgNDsKICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBsZW5ndGg7ICsraSkgewogICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRCeXRlUHRyID0gdmFsdWUgKyA0ICsgaSAqIGNoYXJTaXplOwogICAgICAgICAgICAgICAgaWYgKGkgPT0gbGVuZ3RoIHx8IEhFQVBbY3VycmVudEJ5dGVQdHIgPj4gc2hpZnRdID09IDApIHsKICAgICAgICAgICAgICAgICAgdmFyIG1heFJlYWRCeXRlcyA9IGN1cnJlbnRCeXRlUHRyIC0gZGVjb2RlU3RhcnRQdHI7CiAgICAgICAgICAgICAgICAgIHZhciBzdHJpbmdTZWdtZW50ID0gZGVjb2RlU3RyaW5nKGRlY29kZVN0YXJ0UHRyLCBtYXhSZWFkQnl0ZXMpOwogICAgICAgICAgICAgICAgICBpZiAoc3RyID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHJpbmdTZWdtZW50OwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDApOwogICAgICAgICAgICAgICAgICAgIHN0ciArPSBzdHJpbmdTZWdtZW50OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGRlY29kZVN0YXJ0UHRyID0gY3VycmVudEJ5dGVQdHIgKyBjaGFyU2l6ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgX2ZyZWUodmFsdWUpOwogICAgICAgICAgICAgIHJldHVybiBzdHI7CiAgICAgICAgICAgIH0sICJ0b1dpcmVUeXBlIjogZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsIHZhbHVlKSB7CiAgICAgICAgICAgICAgaWYgKCEodHlwZW9mIHZhbHVlID09PSAic3RyaW5nIikpIHsKICAgICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJDYW5ub3QgcGFzcyBub24tc3RyaW5nIHRvIEMrKyBzdHJpbmcgdHlwZSAiICsgbmFtZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhciBsZW5ndGggPSBsZW5ndGhCeXRlc1VURih2YWx1ZSk7CiAgICAgICAgICAgICAgdmFyIHB0ciA9IF9tYWxsb2MoNCArIGxlbmd0aCArIGNoYXJTaXplKTsKICAgICAgICAgICAgICBIRUFQVTMyW3B0ciA+PiAyXSA9IGxlbmd0aCA+PiBzaGlmdDsKICAgICAgICAgICAgICBlbmNvZGVTdHJpbmcodmFsdWUsIHB0ciArIDQsIGxlbmd0aCArIGNoYXJTaXplKTsKICAgICAgICAgICAgICBpZiAoZGVzdHJ1Y3RvcnMgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGRlc3RydWN0b3JzLnB1c2goX2ZyZWUsIHB0cik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBwdHI7CiAgICAgICAgICAgIH0sICJhcmdQYWNrQWR2YW5jZSI6IDgsICJyZWFkVmFsdWVGcm9tUG9pbnRlciI6IHNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyLCBkZXN0cnVjdG9yRnVuY3Rpb246IGZ1bmN0aW9uKHB0cikgewogICAgICAgICAgICAgIF9mcmVlKHB0cik7CiAgICAgICAgICAgIH0gfSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl92YWx1ZV9vYmplY3QocmF3VHlwZSwgbmFtZSwgY29uc3RydWN0b3JTaWduYXR1cmUsIHJhd0NvbnN0cnVjdG9yLCBkZXN0cnVjdG9yU2lnbmF0dXJlLCByYXdEZXN0cnVjdG9yKSB7CiAgICAgICAgICAgIHN0cnVjdFJlZ2lzdHJhdGlvbnNbcmF3VHlwZV0gPSB7IG5hbWU6IHJlYWRMYXRpbjFTdHJpbmcobmFtZSksIHJhd0NvbnN0cnVjdG9yOiBlbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihjb25zdHJ1Y3RvclNpZ25hdHVyZSwgcmF3Q29uc3RydWN0b3IpLCByYXdEZXN0cnVjdG9yOiBlbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihkZXN0cnVjdG9yU2lnbmF0dXJlLCByYXdEZXN0cnVjdG9yKSwgZmllbGRzOiBbXSB9OwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfdmFsdWVfb2JqZWN0X2ZpZWxkKHN0cnVjdFR5cGUsIGZpZWxkTmFtZSwgZ2V0dGVyUmV0dXJuVHlwZSwgZ2V0dGVyU2lnbmF0dXJlLCBnZXR0ZXIsIGdldHRlckNvbnRleHQsIHNldHRlckFyZ3VtZW50VHlwZSwgc2V0dGVyU2lnbmF0dXJlLCBzZXR0ZXIsIHNldHRlckNvbnRleHQpIHsKICAgICAgICAgICAgc3RydWN0UmVnaXN0cmF0aW9uc1tzdHJ1Y3RUeXBlXS5maWVsZHMucHVzaCh7IGZpZWxkTmFtZTogcmVhZExhdGluMVN0cmluZyhmaWVsZE5hbWUpLCBnZXR0ZXJSZXR1cm5UeXBlLCBnZXR0ZXI6IGVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKGdldHRlclNpZ25hdHVyZSwgZ2V0dGVyKSwgZ2V0dGVyQ29udGV4dCwgc2V0dGVyQXJndW1lbnRUeXBlLCBzZXR0ZXI6IGVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKHNldHRlclNpZ25hdHVyZSwgc2V0dGVyKSwgc2V0dGVyQ29udGV4dCB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX3ZvaWQocmF3VHlwZSwgbmFtZSkgewogICAgICAgICAgICBuYW1lID0gcmVhZExhdGluMVN0cmluZyhuYW1lKTsKICAgICAgICAgICAgcmVnaXN0ZXJUeXBlKHJhd1R5cGUsIHsgaXNWb2lkOiB0cnVlLCBuYW1lLCAiYXJnUGFja0FkdmFuY2UiOiAwLCAiZnJvbVdpcmVUeXBlIjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICAgICAgfSwgInRvV2lyZVR5cGUiOiBmdW5jdGlvbihkZXN0cnVjdG9ycywgbykgewogICAgICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgICAgIH0gfSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiByZXF1aXJlSGFuZGxlKGhhbmRsZSkgewogICAgICAgICAgICBpZiAoIWhhbmRsZSkgewogICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJDYW5ub3QgdXNlIGRlbGV0ZWQgdmFsLiBoYW5kbGUgPSAiICsgaGFuZGxlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZW12YWxfaGFuZGxlX2FycmF5W2hhbmRsZV0udmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtdmFsX2FzKGhhbmRsZSwgcmV0dXJuVHlwZSwgZGVzdHJ1Y3RvcnNSZWYpIHsKICAgICAgICAgICAgaGFuZGxlID0gcmVxdWlyZUhhbmRsZShoYW5kbGUpOwogICAgICAgICAgICByZXR1cm5UeXBlID0gcmVxdWlyZVJlZ2lzdGVyZWRUeXBlKHJldHVyblR5cGUsICJlbXZhbDo6YXMiKTsKICAgICAgICAgICAgdmFyIGRlc3RydWN0b3JzID0gW107CiAgICAgICAgICAgIHZhciByZCA9IF9fZW12YWxfcmVnaXN0ZXIoZGVzdHJ1Y3RvcnMpOwogICAgICAgICAgICBIRUFQMzJbZGVzdHJ1Y3RvcnNSZWYgPj4gMl0gPSByZDsKICAgICAgICAgICAgcmV0dXJuIHJldHVyblR5cGVbInRvV2lyZVR5cGUiXShkZXN0cnVjdG9ycywgaGFuZGxlKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBlbXZhbF9zeW1ib2xzID0ge307CiAgICAgICAgICBmdW5jdGlvbiBnZXRTdHJpbmdPclN5bWJvbChhZGRyZXNzKSB7CiAgICAgICAgICAgIHZhciBzeW1ib2wgPSBlbXZhbF9zeW1ib2xzW2FkZHJlc3NdOwogICAgICAgICAgICBpZiAoc3ltYm9sID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICByZXR1cm4gcmVhZExhdGluMVN0cmluZyhhZGRyZXNzKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgZW12YWxfbWV0aG9kQ2FsbGVycyA9IFtdOwogICAgICAgICAgZnVuY3Rpb24gX19lbXZhbF9jYWxsX3ZvaWRfbWV0aG9kKGNhbGxlciwgaGFuZGxlLCBtZXRob2ROYW1lLCBhcmdzKSB7CiAgICAgICAgICAgIGNhbGxlciA9IGVtdmFsX21ldGhvZENhbGxlcnNbY2FsbGVyXTsKICAgICAgICAgICAgaGFuZGxlID0gcmVxdWlyZUhhbmRsZShoYW5kbGUpOwogICAgICAgICAgICBtZXRob2ROYW1lID0gZ2V0U3RyaW5nT3JTeW1ib2wobWV0aG9kTmFtZSk7CiAgICAgICAgICAgIGNhbGxlcihoYW5kbGUsIG1ldGhvZE5hbWUsIG51bGwsIGFyZ3MpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gZW12YWxfZ2V0X2dsb2JhbCgpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgIHJldHVybiBnbG9iYWxUaGlzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAoLyogQF9fUFVSRV9fICovIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbjsKICAgICAgICAgICAgfSgpKSgicmV0dXJuIHRoaXMiKSgpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbXZhbF9nZXRfZ2xvYmFsKG5hbWUpIHsKICAgICAgICAgICAgaWYgKG5hbWUgPT09IDApIHsKICAgICAgICAgICAgICByZXR1cm4gX19lbXZhbF9yZWdpc3RlcihlbXZhbF9nZXRfZ2xvYmFsKCkpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIG5hbWUgPSBnZXRTdHJpbmdPclN5bWJvbChuYW1lKTsKICAgICAgICAgICAgICByZXR1cm4gX19lbXZhbF9yZWdpc3RlcihlbXZhbF9nZXRfZ2xvYmFsKClbbmFtZV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtdmFsX2FkZE1ldGhvZENhbGxlcihjYWxsZXIpIHsKICAgICAgICAgICAgdmFyIGlkID0gZW12YWxfbWV0aG9kQ2FsbGVycy5sZW5ndGg7CiAgICAgICAgICAgIGVtdmFsX21ldGhvZENhbGxlcnMucHVzaChjYWxsZXIpOwogICAgICAgICAgICByZXR1cm4gaWQ7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtdmFsX2xvb2t1cFR5cGVzKGFyZ0NvdW50LCBhcmdUeXBlcykgewogICAgICAgICAgICB2YXIgYTMgPSBuZXcgQXJyYXkoYXJnQ291bnQpOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ0NvdW50OyArK2kpIHsKICAgICAgICAgICAgICBhM1tpXSA9IHJlcXVpcmVSZWdpc3RlcmVkVHlwZShIRUFQMzJbKGFyZ1R5cGVzID4+IDIpICsgaV0sICJwYXJhbWV0ZXIgIiArIGkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBhMzsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9fZW12YWxfZ2V0X21ldGhvZF9jYWxsZXIoYXJnQ291bnQsIGFyZ1R5cGVzKSB7CiAgICAgICAgICAgIHZhciB0eXBlcyA9IF9fZW12YWxfbG9va3VwVHlwZXMoYXJnQ291bnQsIGFyZ1R5cGVzKTsKICAgICAgICAgICAgdmFyIHJldFR5cGUgPSB0eXBlc1swXTsKICAgICAgICAgICAgdmFyIHNpZ25hdHVyZU5hbWUgPSByZXRUeXBlLm5hbWUgKyAiXyQiICsgdHlwZXMuc2xpY2UoMSkubWFwKGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICByZXR1cm4gdC5uYW1lOwogICAgICAgICAgICB9KS5qb2luKCJfIikgKyAiJCI7CiAgICAgICAgICAgIHZhciBwYXJhbXMgPSBbInJldFR5cGUiXTsKICAgICAgICAgICAgdmFyIGFyZ3MgPSBbcmV0VHlwZV07CiAgICAgICAgICAgIHZhciBhcmdzTGlzdCA9ICIiOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ0NvdW50IC0gMTsgKytpKSB7CiAgICAgICAgICAgICAgYXJnc0xpc3QgKz0gKGkgIT09IDAgPyAiLCAiIDogIiIpICsgImFyZyIgKyBpOwogICAgICAgICAgICAgIHBhcmFtcy5wdXNoKCJhcmdUeXBlIiArIGkpOwogICAgICAgICAgICAgIGFyZ3MucHVzaCh0eXBlc1sxICsgaV0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBmdW5jdGlvbk5hbWUgPSBtYWtlTGVnYWxGdW5jdGlvbk5hbWUoIm1ldGhvZENhbGxlcl8iICsgc2lnbmF0dXJlTmFtZSk7CiAgICAgICAgICAgIHZhciBmdW5jdGlvbkJvZHkgPSAicmV0dXJuIGZ1bmN0aW9uICIgKyBmdW5jdGlvbk5hbWUgKyAiKGhhbmRsZSwgbmFtZSwgZGVzdHJ1Y3RvcnMsIGFyZ3MpIHtcbiI7CiAgICAgICAgICAgIHZhciBvZmZzZXQgPSAwOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ0NvdW50IC0gMTsgKytpKSB7CiAgICAgICAgICAgICAgZnVuY3Rpb25Cb2R5ICs9ICIgICAgdmFyIGFyZyIgKyBpICsgIiA9IGFyZ1R5cGUiICsgaSArICIucmVhZFZhbHVlRnJvbVBvaW50ZXIoYXJncyIgKyAob2Zmc2V0ID8gIisiICsgb2Zmc2V0IDogIiIpICsgIik7XG4iOwogICAgICAgICAgICAgIG9mZnNldCArPSB0eXBlc1tpICsgMV1bImFyZ1BhY2tBZHZhbmNlIl07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb25Cb2R5ICs9ICIgICAgdmFyIHJ2ID0gaGFuZGxlW25hbWVdKCIgKyBhcmdzTGlzdCArICIpO1xuIjsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdDb3VudCAtIDE7ICsraSkgewogICAgICAgICAgICAgIGlmICh0eXBlc1tpICsgMV1bImRlbGV0ZU9iamVjdCJdKSB7CiAgICAgICAgICAgICAgICBmdW5jdGlvbkJvZHkgKz0gIiAgICBhcmdUeXBlIiArIGkgKyAiLmRlbGV0ZU9iamVjdChhcmciICsgaSArICIpO1xuIjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCFyZXRUeXBlLmlzVm9pZCkgewogICAgICAgICAgICAgIGZ1bmN0aW9uQm9keSArPSAiICAgIHJldHVybiByZXRUeXBlLnRvV2lyZVR5cGUoZGVzdHJ1Y3RvcnMsIHJ2KTtcbiI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb25Cb2R5ICs9ICJ9O1xuIjsKICAgICAgICAgICAgcGFyYW1zLnB1c2goZnVuY3Rpb25Cb2R5KTsKICAgICAgICAgICAgdmFyIGludm9rZXJGdW5jdGlvbiA9IG5ld18oRnVuY3Rpb24sIHBhcmFtcykuYXBwbHkobnVsbCwgYXJncyk7CiAgICAgICAgICAgIHJldHVybiBfX2VtdmFsX2FkZE1ldGhvZENhbGxlcihpbnZva2VyRnVuY3Rpb24pOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbXZhbF9nZXRfbW9kdWxlX3Byb3BlcnR5KG5hbWUpIHsKICAgICAgICAgICAgbmFtZSA9IGdldFN0cmluZ09yU3ltYm9sKG5hbWUpOwogICAgICAgICAgICByZXR1cm4gX19lbXZhbF9yZWdpc3RlcihNb2R1bGVbbmFtZV0pOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbXZhbF9nZXRfcHJvcGVydHkoaGFuZGxlLCBrZXkyKSB7CiAgICAgICAgICAgIGhhbmRsZSA9IHJlcXVpcmVIYW5kbGUoaGFuZGxlKTsKICAgICAgICAgICAga2V5MiA9IHJlcXVpcmVIYW5kbGUoa2V5Mik7CiAgICAgICAgICAgIHJldHVybiBfX2VtdmFsX3JlZ2lzdGVyKGhhbmRsZVtrZXkyXSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtdmFsX2luY3JlZihoYW5kbGUpIHsKICAgICAgICAgICAgaWYgKGhhbmRsZSA+IDQpIHsKICAgICAgICAgICAgICBlbXZhbF9oYW5kbGVfYXJyYXlbaGFuZGxlXS5yZWZjb3VudCArPSAxOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBjcmFmdEVtdmFsQWxsb2NhdG9yKGFyZ0NvdW50KSB7CiAgICAgICAgICAgIHZhciBhcmdzTGlzdCA9ICIiOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ0NvdW50OyArK2kpIHsKICAgICAgICAgICAgICBhcmdzTGlzdCArPSAoaSAhPT0gMCA/ICIsICIgOiAiIikgKyAiYXJnIiArIGk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGZ1bmN0aW9uQm9keSA9ICJyZXR1cm4gZnVuY3Rpb24gZW12YWxfYWxsb2NhdG9yXyIgKyBhcmdDb3VudCArICIoY29uc3RydWN0b3IsIGFyZ1R5cGVzLCBhcmdzKSB7XG4iOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ0NvdW50OyArK2kpIHsKICAgICAgICAgICAgICBmdW5jdGlvbkJvZHkgKz0gInZhciBhcmdUeXBlIiArIGkgKyAiID0gcmVxdWlyZVJlZ2lzdGVyZWRUeXBlKE1vZHVsZVsnSEVBUDMyJ11bKGFyZ1R5cGVzID4+PiAyKSArICIgKyBpICsgJ10sICJwYXJhbWV0ZXIgJyArIGkgKyAnIik7XG52YXIgYXJnJyArIGkgKyAiID0gYXJnVHlwZSIgKyBpICsgIi5yZWFkVmFsdWVGcm9tUG9pbnRlcihhcmdzKTtcbmFyZ3MgKz0gYXJnVHlwZSIgKyBpICsgIlsnYXJnUGFja0FkdmFuY2UnXTtcbiI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb25Cb2R5ICs9ICJ2YXIgb2JqID0gbmV3IGNvbnN0cnVjdG9yKCIgKyBhcmdzTGlzdCArICIpO1xucmV0dXJuIF9fZW12YWxfcmVnaXN0ZXIob2JqKTtcbn1cbiI7CiAgICAgICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb24oInJlcXVpcmVSZWdpc3RlcmVkVHlwZSIsICJNb2R1bGUiLCAiX19lbXZhbF9yZWdpc3RlciIsIGZ1bmN0aW9uQm9keSkocmVxdWlyZVJlZ2lzdGVyZWRUeXBlLCBNb2R1bGUsIF9fZW12YWxfcmVnaXN0ZXIpOwogICAgICAgICAgfQogICAgICAgICAgdmFyIGVtdmFsX25ld2VycyA9IHt9OwogICAgICAgICAgZnVuY3Rpb24gX19lbXZhbF9uZXcoaGFuZGxlLCBhcmdDb3VudCwgYXJnVHlwZXMsIGFyZ3MpIHsKICAgICAgICAgICAgaGFuZGxlID0gcmVxdWlyZUhhbmRsZShoYW5kbGUpOwogICAgICAgICAgICB2YXIgbmV3ZXIgPSBlbXZhbF9uZXdlcnNbYXJnQ291bnRdOwogICAgICAgICAgICBpZiAoIW5ld2VyKSB7CiAgICAgICAgICAgICAgbmV3ZXIgPSBjcmFmdEVtdmFsQWxsb2NhdG9yKGFyZ0NvdW50KTsKICAgICAgICAgICAgICBlbXZhbF9uZXdlcnNbYXJnQ291bnRdID0gbmV3ZXI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG5ld2VyKGhhbmRsZSwgYXJnVHlwZXMsIGFyZ3MpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbXZhbF9uZXdfY3N0cmluZyh2MykgewogICAgICAgICAgICByZXR1cm4gX19lbXZhbF9yZWdpc3RlcihnZXRTdHJpbmdPclN5bWJvbCh2MykpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbXZhbF9ydW5fZGVzdHJ1Y3RvcnMoaGFuZGxlKSB7CiAgICAgICAgICAgIHZhciBkZXN0cnVjdG9ycyA9IGVtdmFsX2hhbmRsZV9hcnJheVtoYW5kbGVdLnZhbHVlOwogICAgICAgICAgICBydW5EZXN0cnVjdG9ycyhkZXN0cnVjdG9ycyk7CiAgICAgICAgICAgIF9fZW12YWxfZGVjcmVmKGhhbmRsZSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfYWJvcnQoKSB7CiAgICAgICAgICAgIGFib3J0KCk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfZW1zY3JpcHRlbl9tZW1jcHlfYmlnKGRlc3QsIHNyYywgbnVtKSB7CiAgICAgICAgICAgIEhFQVBVOC5jb3B5V2l0aGluKGRlc3QsIHNyYywgc3JjICsgbnVtKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGVtc2NyaXB0ZW5fcmVhbGxvY19idWZmZXIoc2l6ZSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIHdhc21NZW1vcnkuZ3JvdyhzaXplIC0gYnVmZmVyLmJ5dGVMZW5ndGggKyA2NTUzNSA+Pj4gMTYpOwogICAgICAgICAgICAgIHVwZGF0ZUdsb2JhbEJ1ZmZlckFuZFZpZXdzKHdhc21NZW1vcnkuYnVmZmVyKTsKICAgICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfZW1zY3JpcHRlbl9yZXNpemVfaGVhcChyZXF1ZXN0ZWRTaXplKSB7CiAgICAgICAgICAgIHZhciBvbGRTaXplID0gSEVBUFU4Lmxlbmd0aDsKICAgICAgICAgICAgcmVxdWVzdGVkU2l6ZSA9IHJlcXVlc3RlZFNpemUgPj4+IDA7CiAgICAgICAgICAgIHZhciBtYXhIZWFwU2l6ZSA9IDIxNDc0ODM2NDg7CiAgICAgICAgICAgIGlmIChyZXF1ZXN0ZWRTaXplID4gbWF4SGVhcFNpemUpIHsKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yICh2YXIgY3V0RG93biA9IDE7IGN1dERvd24gPD0gNDsgY3V0RG93biAqPSAyKSB7CiAgICAgICAgICAgICAgdmFyIG92ZXJHcm93bkhlYXBTaXplID0gb2xkU2l6ZSAqICgxICsgMC4yIC8gY3V0RG93bik7CiAgICAgICAgICAgICAgb3Zlckdyb3duSGVhcFNpemUgPSBNYXRoLm1pbihvdmVyR3Jvd25IZWFwU2l6ZSwgcmVxdWVzdGVkU2l6ZSArIDEwMDY2MzI5Nik7CiAgICAgICAgICAgICAgdmFyIG5ld1NpemUgPSBNYXRoLm1pbihtYXhIZWFwU2l6ZSwgYWxpZ25VcChNYXRoLm1heChyZXF1ZXN0ZWRTaXplLCBvdmVyR3Jvd25IZWFwU2l6ZSksIDY1NTM2KSk7CiAgICAgICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gZW1zY3JpcHRlbl9yZWFsbG9jX2J1ZmZlcihuZXdTaXplKTsKICAgICAgICAgICAgICBpZiAocmVwbGFjZW1lbnQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgU1lTQ0FMTFMgPSB7IG1hcHBpbmdzOiB7fSwgYnVmZmVyczogW251bGwsIFtdLCBbXV0sIHByaW50Q2hhcjogZnVuY3Rpb24oc3RyZWFtLCBjdXJyKSB7CiAgICAgICAgICAgIHZhciBidWZmZXIyID0gU1lTQ0FMTFMuYnVmZmVyc1tzdHJlYW1dOwogICAgICAgICAgICBpZiAoY3VyciA9PT0gMCB8fCBjdXJyID09PSAxMCkgewogICAgICAgICAgICAgIChzdHJlYW0gPT09IDEgPyBvdXQgOiBlcnIpKFVURjhBcnJheVRvU3RyaW5nKGJ1ZmZlcjIsIDApKTsKICAgICAgICAgICAgICBidWZmZXIyLmxlbmd0aCA9IDA7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgYnVmZmVyMi5wdXNoKGN1cnIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9LCB2YXJhcmdzOiB2b2lkIDAsIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIFNZU0NBTExTLnZhcmFyZ3MgKz0gNDsKICAgICAgICAgICAgdmFyIHJldCA9IEhFQVAzMltTWVNDQUxMUy52YXJhcmdzIC0gNCA+PiAyXTsKICAgICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICAgIH0sIGdldFN0cjogZnVuY3Rpb24ocHRyKSB7CiAgICAgICAgICAgIHZhciByZXQgPSBVVEY4VG9TdHJpbmcocHRyKTsKICAgICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICAgIH0sIGdldDY0OiBmdW5jdGlvbihsb3csIGhpZ2gpIHsKICAgICAgICAgICAgcmV0dXJuIGxvdzsKICAgICAgICAgIH0gfTsKICAgICAgICAgIGZ1bmN0aW9uIF9mZF9jbG9zZShmZCkgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9mZF9zZWVrKGZkLCBvZmZzZXRfbG93LCBvZmZzZXRfaGlnaCwgd2hlbmNlLCBuZXdPZmZzZXQpIHsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9mZF93cml0ZShmZCwgaW92LCBpb3ZjbnQsIHBudW0pIHsKICAgICAgICAgICAgdmFyIG51bSA9IDA7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW92Y250OyBpKyspIHsKICAgICAgICAgICAgICB2YXIgcHRyID0gSEVBUDMyW2lvdiArIGkgKiA4ID4+IDJdOwogICAgICAgICAgICAgIHZhciBsZW4gPSBIRUFQMzJbaW92ICsgKGkgKiA4ICsgNCkgPj4gMl07CiAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBsZW47IGorKykgewogICAgICAgICAgICAgICAgU1lTQ0FMTFMucHJpbnRDaGFyKGZkLCBIRUFQVThbcHRyICsgal0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBudW0gKz0gbGVuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIEhFQVAzMltwbnVtID4+IDJdID0gbnVtOwogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9zZXRUZW1wUmV0MCgkaSkgewogICAgICAgICAgICBzZXRUZW1wUmV0MCgkaSB8IDApOwogICAgICAgICAgfQogICAgICAgICAgSW50ZXJuYWxFcnJvciA9IE1vZHVsZVsiSW50ZXJuYWxFcnJvciJdID0gZXh0ZW5kRXJyb3IoRXJyb3IsICJJbnRlcm5hbEVycm9yIik7CiAgICAgICAgICBlbWJpbmRfaW5pdF9jaGFyQ29kZXMoKTsKICAgICAgICAgIEJpbmRpbmdFcnJvciA9IE1vZHVsZVsiQmluZGluZ0Vycm9yIl0gPSBleHRlbmRFcnJvcihFcnJvciwgIkJpbmRpbmdFcnJvciIpOwogICAgICAgICAgaW5pdF9DbGFzc0hhbmRsZSgpOwogICAgICAgICAgaW5pdF9SZWdpc3RlcmVkUG9pbnRlcigpOwogICAgICAgICAgaW5pdF9lbWJpbmQoKTsKICAgICAgICAgIFVuYm91bmRUeXBlRXJyb3IgPSBNb2R1bGVbIlVuYm91bmRUeXBlRXJyb3IiXSA9IGV4dGVuZEVycm9yKEVycm9yLCAiVW5ib3VuZFR5cGVFcnJvciIpOwogICAgICAgICAgaW5pdF9lbXZhbCgpOwogICAgICAgICAgdmFyIGFzbUxpYnJhcnlBcmcgPSB7ICJ0IjogX19lbWJpbmRfZmluYWxpemVfdmFsdWVfb2JqZWN0LCAiSSI6IF9fZW1iaW5kX3JlZ2lzdGVyX2Jvb2wsICJ4IjogX19lbWJpbmRfcmVnaXN0ZXJfY2xhc3MsICJ3IjogX19lbWJpbmRfcmVnaXN0ZXJfY2xhc3NfY29uc3RydWN0b3IsICJkIjogX19lbWJpbmRfcmVnaXN0ZXJfY2xhc3NfZnVuY3Rpb24sICJrIjogX19lbWJpbmRfcmVnaXN0ZXJfY29uc3RhbnQsICJIIjogX19lbWJpbmRfcmVnaXN0ZXJfZW12YWwsICJuIjogX19lbWJpbmRfcmVnaXN0ZXJfZW51bSwgImEiOiBfX2VtYmluZF9yZWdpc3Rlcl9lbnVtX3ZhbHVlLCAiQSI6IF9fZW1iaW5kX3JlZ2lzdGVyX2Zsb2F0LCAiaSI6IF9fZW1iaW5kX3JlZ2lzdGVyX2Z1bmN0aW9uLCAiaiI6IF9fZW1iaW5kX3JlZ2lzdGVyX2ludGVnZXIsICJoIjogX19lbWJpbmRfcmVnaXN0ZXJfbWVtb3J5X3ZpZXcsICJCIjogX19lbWJpbmRfcmVnaXN0ZXJfc3RkX3N0cmluZywgInYiOiBfX2VtYmluZF9yZWdpc3Rlcl9zdGRfd3N0cmluZywgInUiOiBfX2VtYmluZF9yZWdpc3Rlcl92YWx1ZV9vYmplY3QsICJjIjogX19lbWJpbmRfcmVnaXN0ZXJfdmFsdWVfb2JqZWN0X2ZpZWxkLCAiSiI6IF9fZW1iaW5kX3JlZ2lzdGVyX3ZvaWQsICJtIjogX19lbXZhbF9hcywgInMiOiBfX2VtdmFsX2NhbGxfdm9pZF9tZXRob2QsICJiIjogX19lbXZhbF9kZWNyZWYsICJ5IjogX19lbXZhbF9nZXRfZ2xvYmFsLCAicCI6IF9fZW12YWxfZ2V0X21ldGhvZF9jYWxsZXIsICJyIjogX19lbXZhbF9nZXRfbW9kdWxlX3Byb3BlcnR5LCAiZSI6IF9fZW12YWxfZ2V0X3Byb3BlcnR5LCAiZyI6IF9fZW12YWxfaW5jcmVmLCAicSI6IF9fZW12YWxfbmV3LCAiZiI6IF9fZW12YWxfbmV3X2NzdHJpbmcsICJsIjogX19lbXZhbF9ydW5fZGVzdHJ1Y3RvcnMsICJvIjogX2Fib3J0LCAiRSI6IF9lbXNjcmlwdGVuX21lbWNweV9iaWcsICJGIjogX2Vtc2NyaXB0ZW5fcmVzaXplX2hlYXAsICJHIjogX2ZkX2Nsb3NlLCAiQyI6IF9mZF9zZWVrLCAieiI6IF9mZF93cml0ZSwgIkQiOiBfc2V0VGVtcFJldDAgfTsKICAgICAgICAgIHZhciBhc20gPSBjcmVhdGVXYXNtKCk7CiAgICAgICAgICB2YXIgX19fd2FzbV9jYWxsX2N0b3JzID0gTW9kdWxlWyJfX193YXNtX2NhbGxfY3RvcnMiXSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKF9fX3dhc21fY2FsbF9jdG9ycyA9IE1vZHVsZVsiX19fd2FzbV9jYWxsX2N0b3JzIl0gPSBNb2R1bGVbImFzbSJdWyJMIl0pLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIF9tYWxsb2MgPSBNb2R1bGVbIl9tYWxsb2MiXSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKF9tYWxsb2MgPSBNb2R1bGVbIl9tYWxsb2MiXSA9IE1vZHVsZVsiYXNtIl1bIk0iXSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgX2ZyZWUgPSBNb2R1bGVbIl9mcmVlIl0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChfZnJlZSA9IE1vZHVsZVsiX2ZyZWUiXSA9IE1vZHVsZVsiYXNtIl1bIk4iXSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgX19fZ2V0VHlwZU5hbWUgPSBNb2R1bGVbIl9fX2dldFR5cGVOYW1lIl0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChfX19nZXRUeXBlTmFtZSA9IE1vZHVsZVsiX19fZ2V0VHlwZU5hbWUiXSA9IE1vZHVsZVsiYXNtIl1bIlAiXSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgX19fZW1iaW5kX3JlZ2lzdGVyX25hdGl2ZV9hbmRfYnVpbHRpbl90eXBlcyA9IE1vZHVsZVsiX19fZW1iaW5kX3JlZ2lzdGVyX25hdGl2ZV9hbmRfYnVpbHRpbl90eXBlcyJdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoX19fZW1iaW5kX3JlZ2lzdGVyX25hdGl2ZV9hbmRfYnVpbHRpbl90eXBlcyA9IE1vZHVsZVsiX19fZW1iaW5kX3JlZ2lzdGVyX25hdGl2ZV9hbmRfYnVpbHRpbl90eXBlcyJdID0gTW9kdWxlWyJhc20iXVsiUSJdKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfTsKICAgICAgICAgIHZhciBkeW5DYWxsX2ppamkgPSBNb2R1bGVbImR5bkNhbGxfamlqaSJdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoZHluQ2FsbF9qaWppID0gTW9kdWxlWyJkeW5DYWxsX2ppamkiXSA9IE1vZHVsZVsiYXNtIl1bIlIiXSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgY2FsbGVkUnVuOwogICAgICAgICAgZnVuY3Rpb24gRXhpdFN0YXR1cyhzdGF0dXMpIHsKICAgICAgICAgICAgdGhpcy5uYW1lID0gIkV4aXRTdGF0dXMiOwogICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSAiUHJvZ3JhbSB0ZXJtaW5hdGVkIHdpdGggZXhpdCgiICsgc3RhdHVzICsgIikiOwogICAgICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1czsKICAgICAgICAgIH0KICAgICAgICAgIGRlcGVuZGVuY2llc0Z1bGZpbGxlZCA9IGZ1bmN0aW9uIHJ1bkNhbGxlcigpIHsKICAgICAgICAgICAgaWYgKCFjYWxsZWRSdW4pCiAgICAgICAgICAgICAgcnVuKCk7CiAgICAgICAgICAgIGlmICghY2FsbGVkUnVuKQogICAgICAgICAgICAgIGRlcGVuZGVuY2llc0Z1bGZpbGxlZCA9IHJ1bkNhbGxlcjsKICAgICAgICAgIH07CiAgICAgICAgICBmdW5jdGlvbiBydW4oYXJncykgewogICAgICAgICAgICBhcmdzID0gYXJncyB8fCBhcmd1bWVudHNfOwogICAgICAgICAgICBpZiAocnVuRGVwZW5kZW5jaWVzID4gMCkgewogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBwcmVSdW4oKTsKICAgICAgICAgICAgaWYgKHJ1bkRlcGVuZGVuY2llcyA+IDApIHsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gZG9SdW4oKSB7CiAgICAgICAgICAgICAgaWYgKGNhbGxlZFJ1bikKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICBjYWxsZWRSdW4gPSB0cnVlOwogICAgICAgICAgICAgIE1vZHVsZVsiY2FsbGVkUnVuIl0gPSB0cnVlOwogICAgICAgICAgICAgIGlmIChBQk9SVCkKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICBpbml0UnVudGltZSgpOwogICAgICAgICAgICAgIHByZU1haW4oKTsKICAgICAgICAgICAgICByZWFkeVByb21pc2VSZXNvbHZlKE1vZHVsZSk7CiAgICAgICAgICAgICAgaWYgKE1vZHVsZVsib25SdW50aW1lSW5pdGlhbGl6ZWQiXSkKICAgICAgICAgICAgICAgIE1vZHVsZVsib25SdW50aW1lSW5pdGlhbGl6ZWQiXSgpOwogICAgICAgICAgICAgIHBvc3RSdW4oKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoTW9kdWxlWyJzZXRTdGF0dXMiXSkgewogICAgICAgICAgICAgIE1vZHVsZVsic2V0U3RhdHVzIl0oIlJ1bm5pbmcuLi4iKTsKICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgTW9kdWxlWyJzZXRTdGF0dXMiXSgiIik7CiAgICAgICAgICAgICAgICB9LCAxKTsKICAgICAgICAgICAgICAgIGRvUnVuKCk7CiAgICAgICAgICAgICAgfSwgMSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgZG9SdW4oKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgTW9kdWxlWyJydW4iXSA9IHJ1bjsKICAgICAgICAgIGlmIChNb2R1bGVbInByZUluaXQiXSkgewogICAgICAgICAgICBpZiAodHlwZW9mIE1vZHVsZVsicHJlSW5pdCJdID09ICJmdW5jdGlvbiIpCiAgICAgICAgICAgICAgTW9kdWxlWyJwcmVJbml0Il0gPSBbTW9kdWxlWyJwcmVJbml0Il1dOwogICAgICAgICAgICB3aGlsZSAoTW9kdWxlWyJwcmVJbml0Il0ubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgIE1vZHVsZVsicHJlSW5pdCJdLnBvcCgpKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJ1bigpOwogICAgICAgICAgcmV0dXJuIEJBU0lTMi5yZWFkeTsKICAgICAgICB9OwogICAgICB9KCk7CiAgICAgIGlmICh0eXBlb2YgZXhwb3J0czIgPT09ICJvYmplY3QiICYmIHR5cGVvZiBtb2R1bGUgPT09ICJvYmplY3QiKQogICAgICAgIG1vZHVsZS5leHBvcnRzID0gQkFTSVM7CiAgICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lWyJhbWQiXSkKICAgICAgICBkZWZpbmUoW10sIGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuIEJBU0lTOwogICAgICAgIH0pOwogICAgICBlbHNlIGlmICh0eXBlb2YgZXhwb3J0czIgPT09ICJvYmplY3QiKQogICAgICAgIGV4cG9ydHMyWyJCQVNJUyJdID0gQkFTSVM7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy90cmFuc2NvZGVLVFgyLmpzCiAgdmFyIHRyYW5zY29kZUtUWDJfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KHRyYW5zY29kZUtUWDJfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gdHJhbnNjb2RlS1RYMl9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gdHJhbnNjb2RlKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidHJhbnNjb2Rlck1vZHVsZSIsIHRyYW5zY29kZXJNb2R1bGUpOwogICAgY29uc3QgZGF0YSA9IHBhcmFtZXRlcnMua3R4MkJ1ZmZlcjsKICAgIGNvbnN0IHN1cHBvcnRlZFRhcmdldEZvcm1hdHMgPSBwYXJhbWV0ZXJzLnN1cHBvcnRlZFRhcmdldEZvcm1hdHM7CiAgICBsZXQgaGVhZGVyOwogICAgdHJ5IHsKICAgICAgaGVhZGVyID0gcmVhZDIoZGF0YSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgiSW52YWxpZCBLVFgyIGZpbGUuIik7CiAgICB9CiAgICBpZiAoaGVhZGVyLmxheWVyQ291bnQgIT09IDApIHsKICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KCJLVFgyIHRleHR1cmUgYXJyYXlzIGFyZSBub3Qgc3VwcG9ydGVkLiIpOwogICAgfQogICAgaWYgKGhlYWRlci5waXhlbERlcHRoICE9PSAwKSB7CiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgiS1RYMiAzRCB0ZXh0dXJlcyBhcmUgdW5zdXBwb3J0ZWQuIik7CiAgICB9CiAgICBjb25zdCBkZmQgPSBoZWFkZXIuZGF0YUZvcm1hdERlc2NyaXB0b3JbMF07CiAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkoaGVhZGVyLmxldmVsQ291bnQpOwogICAgaWYgKGhlYWRlci52a0Zvcm1hdCA9PT0gMCAmJiAoZGZkLmNvbG9yTW9kZWwgPT09IGNvbG9yTW9kZWxFVEMxUyB8fCBkZmQuY29sb3JNb2RlbCA9PT0gY29sb3JNb2RlbFVBU1RDKSkgewogICAgICB0cmFuc2NvZGVDb21wcmVzc2VkKAogICAgICAgIGRhdGEsCiAgICAgICAgaGVhZGVyLAogICAgICAgIHN1cHBvcnRlZFRhcmdldEZvcm1hdHMsCiAgICAgICAgdHJhbnNjb2Rlck1vZHVsZSwKICAgICAgICB0cmFuc2ZlcmFibGVPYmplY3RzLAogICAgICAgIHJlc3VsdAogICAgICApOwogICAgfSBlbHNlIHsKICAgICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKGRhdGEuYnVmZmVyKTsKICAgICAgcGFyc2VVbmNvbXByZXNzZWQoaGVhZGVyLCByZXN1bHQpOwogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgZnVuY3Rpb24gcGFyc2VVbmNvbXByZXNzZWQoaGVhZGVyLCByZXN1bHQpIHsKICAgIGNvbnN0IGludGVybmFsRm9ybWF0ID0gaGVhZGVyLnZrRm9ybWF0ID09PSBWdWxrYW5Db25zdGFudHNfZGVmYXVsdC5WS19GT1JNQVRfUjhHOEI4X1NSR0IgPyBQaXhlbEZvcm1hdF9kZWZhdWx0LlJHQiA6IFBpeGVsRm9ybWF0X2RlZmF1bHQuUkdCQTsKICAgIGxldCBkYXRhdHlwZTsKICAgIGlmIChoZWFkZXIudmtGb3JtYXQgPT09IFZ1bGthbkNvbnN0YW50c19kZWZhdWx0LlZLX0ZPUk1BVF9SOEc4QjhBOF9VTk9STSkgewogICAgICBkYXRhdHlwZSA9IFBpeGVsRGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFOwogICAgfSBlbHNlIGlmIChoZWFkZXIudmtGb3JtYXQgPT09IFZ1bGthbkNvbnN0YW50c19kZWZhdWx0LlZLX0ZPUk1BVF9SMTZHMTZCMTZBMTZfU0ZMT0FUKSB7CiAgICAgIGRhdGF0eXBlID0gUGl4ZWxEYXRhdHlwZV9kZWZhdWx0LkhBTEZfRkxPQVQ7CiAgICB9IGVsc2UgaWYgKGhlYWRlci52a0Zvcm1hdCA9PT0gVnVsa2FuQ29uc3RhbnRzX2RlZmF1bHQuVktfRk9STUFUX1IzMkczMkIzMkEzMl9TRkxPQVQpIHsKICAgICAgZGF0YXR5cGUgPSBQaXhlbERhdGF0eXBlX2RlZmF1bHQuRkxPQVQ7CiAgICB9CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhlYWRlci5sZXZlbHMubGVuZ3RoOyArK2kpIHsKICAgICAgY29uc3QgbGV2ZWwgPSB7fTsKICAgICAgcmVzdWx0W2ldID0gbGV2ZWw7CiAgICAgIGNvbnN0IGxldmVsQnVmZmVyID0gaGVhZGVyLmxldmVsc1tpXS5sZXZlbERhdGE7CiAgICAgIGNvbnN0IHdpZHRoID0gaGVhZGVyLnBpeGVsV2lkdGggPj4gaTsKICAgICAgY29uc3QgaGVpZ2h0ID0gaGVhZGVyLnBpeGVsSGVpZ2h0ID4+IGk7CiAgICAgIGNvbnN0IGZhY2VMZW5ndGggPSB3aWR0aCAqIGhlaWdodCAqIFBpeGVsRm9ybWF0X2RlZmF1bHQuY29tcG9uZW50c0xlbmd0aChpbnRlcm5hbEZvcm1hdCk7CiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgaGVhZGVyLmZhY2VDb3VudDsgKytqKSB7CiAgICAgICAgY29uc3QgZmFjZUJ5dGVPZmZzZXQgPSBsZXZlbEJ1ZmZlci5ieXRlT2Zmc2V0ICsgZmFjZUxlbmd0aCAqIGhlYWRlci50eXBlU2l6ZSAqIGo7CiAgICAgICAgbGV0IGZhY2VWaWV3OwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGRhdGF0eXBlKSB8fCBQaXhlbERhdGF0eXBlX2RlZmF1bHQuc2l6ZUluQnl0ZXMoZGF0YXR5cGUpID09PSAxKSB7CiAgICAgICAgICBmYWNlVmlldyA9IG5ldyBVaW50OEFycmF5KAogICAgICAgICAgICBsZXZlbEJ1ZmZlci5idWZmZXIsCiAgICAgICAgICAgIGZhY2VCeXRlT2Zmc2V0LAogICAgICAgICAgICBmYWNlTGVuZ3RoCiAgICAgICAgICApOwogICAgICAgIH0gZWxzZSBpZiAoUGl4ZWxEYXRhdHlwZV9kZWZhdWx0LnNpemVJbkJ5dGVzKGRhdGF0eXBlKSA9PT0gMikgewogICAgICAgICAgZmFjZVZpZXcgPSBuZXcgVWludDE2QXJyYXkoCiAgICAgICAgICAgIGxldmVsQnVmZmVyLmJ1ZmZlciwKICAgICAgICAgICAgZmFjZUJ5dGVPZmZzZXQsCiAgICAgICAgICAgIGZhY2VMZW5ndGgKICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGZhY2VWaWV3ID0gbmV3IEZsb2F0MzJBcnJheSgKICAgICAgICAgICAgbGV2ZWxCdWZmZXIuYnVmZmVyLAogICAgICAgICAgICBmYWNlQnl0ZU9mZnNldCwKICAgICAgICAgICAgZmFjZUxlbmd0aAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgbGV2ZWxbZmFjZU9yZGVyW2pdXSA9IHsKICAgICAgICAgIGludGVybmFsRm9ybWF0LAogICAgICAgICAgZGF0YXR5cGUsCiAgICAgICAgICB3aWR0aCwKICAgICAgICAgIGhlaWdodCwKICAgICAgICAgIGxldmVsQnVmZmVyOiBmYWNlVmlldwogICAgICAgIH07CiAgICAgIH0KICAgIH0KICB9CiAgZnVuY3Rpb24gdHJhbnNjb2RlQ29tcHJlc3NlZChkYXRhLCBoZWFkZXIsIHN1cHBvcnRlZFRhcmdldEZvcm1hdHMsIHRyYW5zY29kZXJNb2R1bGUyLCB0cmFuc2ZlcmFibGVPYmplY3RzLCByZXN1bHQpIHsKICAgIGNvbnN0IGt0eDJGaWxlID0gbmV3IHRyYW5zY29kZXJNb2R1bGUyLktUWDJGaWxlKGRhdGEpOwogICAgbGV0IHdpZHRoID0ga3R4MkZpbGUuZ2V0V2lkdGgoKTsKICAgIGxldCBoZWlnaHQgPSBrdHgyRmlsZS5nZXRIZWlnaHQoKTsKICAgIGNvbnN0IGxldmVscyA9IGt0eDJGaWxlLmdldExldmVscygpOwogICAgY29uc3QgaGFzQWxwaGEgPSBrdHgyRmlsZS5nZXRIYXNBbHBoYSgpOwogICAgaWYgKCEod2lkdGggPiAwKSB8fCAhKGhlaWdodCA+IDApIHx8ICEobGV2ZWxzID4gMCkpIHsKICAgICAga3R4MkZpbGUuY2xvc2UoKTsKICAgICAga3R4MkZpbGUuZGVsZXRlKCk7CiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgiSW52YWxpZCBLVFgyIGZpbGUiKTsKICAgIH0KICAgIGxldCBpbnRlcm5hbEZvcm1hdCwgdHJhbnNjb2RlckZvcm1hdDsKICAgIGNvbnN0IGRmZCA9IGhlYWRlci5kYXRhRm9ybWF0RGVzY3JpcHRvclswXTsKICAgIGNvbnN0IEJhc2lzRm9ybWF0ID0gdHJhbnNjb2Rlck1vZHVsZTIudHJhbnNjb2Rlcl90ZXh0dXJlX2Zvcm1hdDsKICAgIGlmIChkZmQuY29sb3JNb2RlbCA9PT0gY29sb3JNb2RlbEVUQzFTKSB7CiAgICAgIGlmIChzdXBwb3J0ZWRUYXJnZXRGb3JtYXRzLmV0YykgewogICAgICAgIGludGVybmFsRm9ybWF0ID0gaGFzQWxwaGEgPyBQaXhlbEZvcm1hdF9kZWZhdWx0LlJHQkE4X0VUQzJfRUFDIDogUGl4ZWxGb3JtYXRfZGVmYXVsdC5SR0I4X0VUQzI7CiAgICAgICAgdHJhbnNjb2RlckZvcm1hdCA9IGhhc0FscGhhID8gQmFzaXNGb3JtYXQuY1RGRVRDMl9SR0JBIDogQmFzaXNGb3JtYXQuY1RGRVRDMV9SR0I7CiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydGVkVGFyZ2V0Rm9ybWF0cy5ldGMxICYmICFoYXNBbHBoYSkgewogICAgICAgIGludGVybmFsRm9ybWF0ID0gUGl4ZWxGb3JtYXRfZGVmYXVsdC5SR0JfRVRDMTsKICAgICAgICB0cmFuc2NvZGVyRm9ybWF0ID0gQmFzaXNGb3JtYXQuY1RGRVRDMV9SR0I7CiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydGVkVGFyZ2V0Rm9ybWF0cy5zM3RjKSB7CiAgICAgICAgaW50ZXJuYWxGb3JtYXQgPSBoYXNBbHBoYSA/IFBpeGVsRm9ybWF0X2RlZmF1bHQuUkdCQV9EWFQ1IDogUGl4ZWxGb3JtYXRfZGVmYXVsdC5SR0JfRFhUMTsKICAgICAgICB0cmFuc2NvZGVyRm9ybWF0ID0gaGFzQWxwaGEgPyBCYXNpc0Zvcm1hdC5jVEZCQzNfUkdCQSA6IEJhc2lzRm9ybWF0LmNURkJDMV9SR0I7CiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydGVkVGFyZ2V0Rm9ybWF0cy5wdnJ0YykgewogICAgICAgIGludGVybmFsRm9ybWF0ID0gaGFzQWxwaGEgPyBQaXhlbEZvcm1hdF9kZWZhdWx0LlJHQkFfUFZSVENfNEJQUFYxIDogUGl4ZWxGb3JtYXRfZGVmYXVsdC5SR0JfUFZSVENfNEJQUFYxOwogICAgICAgIHRyYW5zY29kZXJGb3JtYXQgPSBoYXNBbHBoYSA/IEJhc2lzRm9ybWF0LmNURlBWUlRDMV80X1JHQkEgOiBCYXNpc0Zvcm1hdC5jVEZQVlJUQzFfNF9SR0I7CiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydGVkVGFyZ2V0Rm9ybWF0cy5hc3RjKSB7CiAgICAgICAgaW50ZXJuYWxGb3JtYXQgPSBQaXhlbEZvcm1hdF9kZWZhdWx0LlJHQkFfQVNUQzsKICAgICAgICB0cmFuc2NvZGVyRm9ybWF0ID0gQmFzaXNGb3JtYXQuY1RGQVNUQ180eDRfUkdCQTsKICAgICAgfSBlbHNlIGlmIChzdXBwb3J0ZWRUYXJnZXRGb3JtYXRzLmJjNykgewogICAgICAgIGludGVybmFsRm9ybWF0ID0gUGl4ZWxGb3JtYXRfZGVmYXVsdC5SR0JBX0JDNzsKICAgICAgICB0cmFuc2NvZGVyRm9ybWF0ID0gQmFzaXNGb3JtYXQuY1RGQkM3X1JHQkE7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KAogICAgICAgICAgIk5vIHRyYW5zY29kaW5nIGZvcm1hdCB0YXJnZXQgYXZhaWxhYmxlIGZvciBFVEMxUyBjb21wcmVzc2VkIGt0eDIuIgogICAgICAgICk7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoZGZkLmNvbG9yTW9kZWwgPT09IGNvbG9yTW9kZWxVQVNUQykgewogICAgICBpZiAoc3VwcG9ydGVkVGFyZ2V0Rm9ybWF0cy5hc3RjKSB7CiAgICAgICAgaW50ZXJuYWxGb3JtYXQgPSBQaXhlbEZvcm1hdF9kZWZhdWx0LlJHQkFfQVNUQzsKICAgICAgICB0cmFuc2NvZGVyRm9ybWF0ID0gQmFzaXNGb3JtYXQuY1RGQVNUQ180eDRfUkdCQTsKICAgICAgfSBlbHNlIGlmIChzdXBwb3J0ZWRUYXJnZXRGb3JtYXRzLmJjNykgewogICAgICAgIGludGVybmFsRm9ybWF0ID0gUGl4ZWxGb3JtYXRfZGVmYXVsdC5SR0JBX0JDNzsKICAgICAgICB0cmFuc2NvZGVyRm9ybWF0ID0gQmFzaXNGb3JtYXQuY1RGQkM3X1JHQkE7CiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydGVkVGFyZ2V0Rm9ybWF0cy5zM3RjKSB7CiAgICAgICAgaW50ZXJuYWxGb3JtYXQgPSBoYXNBbHBoYSA/IFBpeGVsRm9ybWF0X2RlZmF1bHQuUkdCQV9EWFQ1IDogUGl4ZWxGb3JtYXRfZGVmYXVsdC5SR0JfRFhUMTsKICAgICAgICB0cmFuc2NvZGVyRm9ybWF0ID0gaGFzQWxwaGEgPyBCYXNpc0Zvcm1hdC5jVEZCQzNfUkdCQSA6IEJhc2lzRm9ybWF0LmNURkJDMV9SR0I7CiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydGVkVGFyZ2V0Rm9ybWF0cy5ldGMpIHsKICAgICAgICBpbnRlcm5hbEZvcm1hdCA9IGhhc0FscGhhID8gUGl4ZWxGb3JtYXRfZGVmYXVsdC5SR0JBOF9FVEMyX0VBQyA6IFBpeGVsRm9ybWF0X2RlZmF1bHQuUkdCOF9FVEMyOwogICAgICAgIHRyYW5zY29kZXJGb3JtYXQgPSBoYXNBbHBoYSA/IEJhc2lzRm9ybWF0LmNURkVUQzJfUkdCQSA6IEJhc2lzRm9ybWF0LmNURkVUQzFfUkdCOwogICAgICB9IGVsc2UgaWYgKHN1cHBvcnRlZFRhcmdldEZvcm1hdHMuZXRjMSAmJiAhaGFzQWxwaGEpIHsKICAgICAgICBpbnRlcm5hbEZvcm1hdCA9IFBpeGVsRm9ybWF0X2RlZmF1bHQuUkdCX0VUQzE7CiAgICAgICAgdHJhbnNjb2RlckZvcm1hdCA9IEJhc2lzRm9ybWF0LmNURkVUQzFfUkdCOwogICAgICB9IGVsc2UgaWYgKHN1cHBvcnRlZFRhcmdldEZvcm1hdHMucHZydGMpIHsKICAgICAgICBpbnRlcm5hbEZvcm1hdCA9IGhhc0FscGhhID8gUGl4ZWxGb3JtYXRfZGVmYXVsdC5SR0JBX1BWUlRDXzRCUFBWMSA6IFBpeGVsRm9ybWF0X2RlZmF1bHQuUkdCX1BWUlRDXzRCUFBWMTsKICAgICAgICB0cmFuc2NvZGVyRm9ybWF0ID0gaGFzQWxwaGEgPyBCYXNpc0Zvcm1hdC5jVEZQVlJUQzFfNF9SR0JBIDogQmFzaXNGb3JtYXQuY1RGUFZSVEMxXzRfUkdCOwogICAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICJObyB0cmFuc2NvZGluZyBmb3JtYXQgdGFyZ2V0IGF2YWlsYWJsZSBmb3IgVUFTVEMgY29tcHJlc3NlZCBrdHgyLiIKICAgICAgICApOwogICAgICB9CiAgICB9CiAgICBpZiAoIWt0eDJGaWxlLnN0YXJ0VHJhbnNjb2RpbmcoKSkgewogICAgICBrdHgyRmlsZS5jbG9zZSgpOwogICAgICBrdHgyRmlsZS5kZWxldGUoKTsKICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KCJzdGFydFRyYW5zY29kaW5nKCkgZmFpbGVkIik7CiAgICB9CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhlYWRlci5sZXZlbHMubGVuZ3RoOyArK2kpIHsKICAgICAgY29uc3QgbGV2ZWwgPSB7fTsKICAgICAgcmVzdWx0W2ldID0gbGV2ZWw7CiAgICAgIHdpZHRoID0gaGVhZGVyLnBpeGVsV2lkdGggPj4gaTsKICAgICAgaGVpZ2h0ID0gaGVhZGVyLnBpeGVsSGVpZ2h0ID4+IGk7CiAgICAgIGNvbnN0IGRzdFNpemUgPSBrdHgyRmlsZS5nZXRJbWFnZVRyYW5zY29kZWRTaXplSW5CeXRlcygKICAgICAgICBpLAogICAgICAgIC8vIGxldmVsIGluZGV4CiAgICAgICAgMCwKICAgICAgICAvLyBsYXllciBpbmRleAogICAgICAgIDAsCiAgICAgICAgLy8gZmFjZSBpbmRleAogICAgICAgIHRyYW5zY29kZXJGb3JtYXQudmFsdWUKICAgICAgKTsKICAgICAgY29uc3QgZHN0ID0gbmV3IFVpbnQ4QXJyYXkoZHN0U2l6ZSk7CiAgICAgIGNvbnN0IHRyYW5zY29kZWQgPSBrdHgyRmlsZS50cmFuc2NvZGVJbWFnZSgKICAgICAgICBkc3QsCiAgICAgICAgaSwKICAgICAgICAvLyBsZXZlbCBpbmRleAogICAgICAgIDAsCiAgICAgICAgLy8gbGF5ZXIgaW5kZXgKICAgICAgICAwLAogICAgICAgIC8vIGZhY2UgaW5kZXgKICAgICAgICB0cmFuc2NvZGVyRm9ybWF0LnZhbHVlLAogICAgICAgIDAsCiAgICAgICAgLy8gZ2V0X2FscGhhX2Zvcl9vcGFxdWVfZm9ybWF0cwogICAgICAgIC0xLAogICAgICAgIC8vIGNoYW5uZWwwCiAgICAgICAgLTEKICAgICAgICAvLyBjaGFubmVsMQogICAgICApOwogICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh0cmFuc2NvZGVkKSkgewogICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgidHJhbnNjb2RlSW1hZ2UoKSBmYWlsZWQuIik7CiAgICAgIH0KICAgICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKGRzdC5idWZmZXIpOwogICAgICBsZXZlbFtmYWNlT3JkZXJbMF1dID0gewogICAgICAgIGludGVybmFsRm9ybWF0LAogICAgICAgIHdpZHRoLAogICAgICAgIGhlaWdodCwKICAgICAgICBsZXZlbEJ1ZmZlcjogZHN0CiAgICAgIH07CiAgICB9CiAgICBrdHgyRmlsZS5jbG9zZSgpOwogICAga3R4MkZpbGUuZGVsZXRlKCk7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICBhc3luYyBmdW5jdGlvbiBpbml0V29ya2VyMyhwYXJhbWV0ZXJzLCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICBjb25zdCB3YXNtQ29uZmlnID0gcGFyYW1ldGVycy53ZWJBc3NlbWJseUNvbmZpZzsKICAgIGNvbnN0IGJhc2lzVHJhbnNjb2RlciA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGltcG9ydF9iYXNpc190cmFuc2NvZGVyLmRlZmF1bHQsIHNlbGYuQkFTSVMpOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdCh3YXNtQ29uZmlnLndhc21CaW5hcnlGaWxlKSkgewogICAgICB0cmFuc2NvZGVyTW9kdWxlID0gYXdhaXQgYmFzaXNUcmFuc2NvZGVyKHdhc21Db25maWcpOwogICAgfSBlbHNlIHsKICAgICAgdHJhbnNjb2Rlck1vZHVsZSA9IGF3YWl0IGJhc2lzVHJhbnNjb2RlcigpOwogICAgfQogICAgdHJhbnNjb2Rlck1vZHVsZS5pbml0aWFsaXplQmFzaXMoKTsKICAgIHJldHVybiB0cnVlOwogIH0KICBmdW5jdGlvbiB0cmFuc2NvZGVLVFgyKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIGNvbnN0IHdhc21Db25maWcgPSBwYXJhbWV0ZXJzLndlYkFzc2VtYmx5Q29uZmlnOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdCh3YXNtQ29uZmlnKSkgewogICAgICByZXR1cm4gaW5pdFdvcmtlcjMocGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cyk7CiAgICB9CiAgICByZXR1cm4gdHJhbnNjb2RlKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpOwogIH0KICB2YXIgaW1wb3J0X2Jhc2lzX3RyYW5zY29kZXIsIGZhY2VPcmRlciwgY29sb3JNb2RlbEVUQzFTLCBjb2xvck1vZGVsVUFTVEMsIHRyYW5zY29kZXJNb2R1bGUsIHRyYW5zY29kZUtUWDJfZGVmYXVsdDsKICB2YXIgaW5pdF90cmFuc2NvZGVLVFgyID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy90cmFuc2NvZGVLVFgyLmpzIigpIHsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9QaXhlbEZvcm1hdCgpOwogICAgICBpbml0X1J1bnRpbWVFcnJvcigpOwogICAgICBpbml0X1Z1bGthbkNvbnN0YW50cygpOwogICAgICBpbml0X1BpeGVsRGF0YXR5cGUoKTsKICAgICAgaW5pdF9jcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyKCk7CiAgICAgIGluaXRfa3R4X3BhcnNlX21vZGVybigpOwogICAgICBpbXBvcnRfYmFzaXNfdHJhbnNjb2RlciA9IF9fdG9FU00ocmVxdWlyZV9iYXNpc190cmFuc2NvZGVyKCksIDEpOwogICAgICBmYWNlT3JkZXIgPSBbCiAgICAgICAgInBvc2l0aXZlWCIsCiAgICAgICAgIm5lZ2F0aXZlWCIsCiAgICAgICAgInBvc2l0aXZlWSIsCiAgICAgICAgIm5lZ2F0aXZlWSIsCiAgICAgICAgInBvc2l0aXZlWiIsCiAgICAgICAgIm5lZ2F0aXZlWiIKICAgICAgXTsKICAgICAgY29sb3JNb2RlbEVUQzFTID0gMTYzOwogICAgICBjb2xvck1vZGVsVUFTVEMgPSAxNjY7CiAgICAgIHRyYW5zY29kZUtUWDJfZGVmYXVsdCA9IGNyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXJfZGVmYXVsdCh0cmFuc2NvZGVLVFgyKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL3RyYW5zZmVyVHlwZWRBcnJheVRlc3QuanMKICB2YXIgdHJhbnNmZXJUeXBlZEFycmF5VGVzdF9leHBvcnRzID0ge307CiAgdmFyIGluaXRfdHJhbnNmZXJUeXBlZEFycmF5VGVzdCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvdHJhbnNmZXJUeXBlZEFycmF5VGVzdC5qcyIoKSB7CiAgICAgIHNlbGYub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICBjb25zdCBhcnJheSA9IGV2ZW50LmRhdGEuYXJyYXk7CiAgICAgICAgY29uc3QgcG9zdE1lc3NhZ2UyID0gc2VsZi53ZWJraXRQb3N0TWVzc2FnZSB8fCBzZWxmLnBvc3RNZXNzYWdlOwogICAgICAgIHRyeSB7CiAgICAgICAgICBwb3N0TWVzc2FnZTIoCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhcnJheQogICAgICAgICAgICB9LAogICAgICAgICAgICBbYXJyYXkuYnVmZmVyXQogICAgICAgICAgKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBwb3N0TWVzc2FnZTIoe30pOwogICAgICAgIH0KICAgICAgfTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0ludGVyc2VjdGlvbnMyRC5qcwogIHZhciBJbnRlcnNlY3Rpb25zMkQsIEludGVyc2VjdGlvbnMyRF9kZWZhdWx0OwogIHZhciBpbml0X0ludGVyc2VjdGlvbnMyRCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSW50ZXJzZWN0aW9uczJELmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIEludGVyc2VjdGlvbnMyRCA9IHt9OwogICAgICBJbnRlcnNlY3Rpb25zMkQuY2xpcFRyaWFuZ2xlQXRBeGlzQWxpZ25lZFRocmVzaG9sZCA9IGZ1bmN0aW9uKHRocmVzaG9sZCwga2VlcEFib3ZlLCB1MCwgdTEyLCB1MjIsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHRocmVzaG9sZCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ0aHJlc2hvbGQgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGtlZXBBYm92ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJrZWVwQWJvdmUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHUwKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInUwIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh1MTIpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgidTEgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHUyMikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ1MiBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gW107CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdC5sZW5ndGggPSAwOwogICAgICAgIH0KICAgICAgICBsZXQgdTBCZWhpbmQ7CiAgICAgICAgbGV0IHUxQmVoaW5kOwogICAgICAgIGxldCB1MkJlaGluZDsKICAgICAgICBpZiAoa2VlcEFib3ZlKSB7CiAgICAgICAgICB1MEJlaGluZCA9IHUwIDwgdGhyZXNob2xkOwogICAgICAgICAgdTFCZWhpbmQgPSB1MTIgPCB0aHJlc2hvbGQ7CiAgICAgICAgICB1MkJlaGluZCA9IHUyMiA8IHRocmVzaG9sZDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdTBCZWhpbmQgPSB1MCA+IHRocmVzaG9sZDsKICAgICAgICAgIHUxQmVoaW5kID0gdTEyID4gdGhyZXNob2xkOwogICAgICAgICAgdTJCZWhpbmQgPSB1MjIgPiB0aHJlc2hvbGQ7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG51bUJlaGluZCA9IHUwQmVoaW5kICsgdTFCZWhpbmQgKyB1MkJlaGluZDsKICAgICAgICBsZXQgdTAxUmF0aW87CiAgICAgICAgbGV0IHUwMlJhdGlvOwogICAgICAgIGxldCB1MTJSYXRpbzsKICAgICAgICBsZXQgdTEwUmF0aW87CiAgICAgICAgbGV0IHUyMFJhdGlvOwogICAgICAgIGxldCB1MjFSYXRpbzsKICAgICAgICBpZiAobnVtQmVoaW5kID09PSAxKSB7CiAgICAgICAgICBpZiAodTBCZWhpbmQpIHsKICAgICAgICAgICAgdTAxUmF0aW8gPSAodGhyZXNob2xkIC0gdTApIC8gKHUxMiAtIHUwKTsKICAgICAgICAgICAgdTAyUmF0aW8gPSAodGhyZXNob2xkIC0gdTApIC8gKHUyMiAtIHUwKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goMSk7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKDIpOwogICAgICAgICAgICBpZiAodTAyUmF0aW8gIT09IDEpIHsKICAgICAgICAgICAgICByZXN1bHQucHVzaCgtMSk7CiAgICAgICAgICAgICAgcmVzdWx0LnB1c2goMCk7CiAgICAgICAgICAgICAgcmVzdWx0LnB1c2goMik7CiAgICAgICAgICAgICAgcmVzdWx0LnB1c2godTAyUmF0aW8pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh1MDFSYXRpbyAhPT0gMSkgewogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKC0xKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCgwKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCgxKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCh1MDFSYXRpbyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiAodTFCZWhpbmQpIHsKICAgICAgICAgICAgdTEyUmF0aW8gPSAodGhyZXNob2xkIC0gdTEyKSAvICh1MjIgLSB1MTIpOwogICAgICAgICAgICB1MTBSYXRpbyA9ICh0aHJlc2hvbGQgLSB1MTIpIC8gKHUwIC0gdTEyKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goMik7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKDApOwogICAgICAgICAgICBpZiAodTEwUmF0aW8gIT09IDEpIHsKICAgICAgICAgICAgICByZXN1bHQucHVzaCgtMSk7CiAgICAgICAgICAgICAgcmVzdWx0LnB1c2goMSk7CiAgICAgICAgICAgICAgcmVzdWx0LnB1c2goMCk7CiAgICAgICAgICAgICAgcmVzdWx0LnB1c2godTEwUmF0aW8pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh1MTJSYXRpbyAhPT0gMSkgewogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKC0xKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCgxKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCgyKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCh1MTJSYXRpbyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiAodTJCZWhpbmQpIHsKICAgICAgICAgICAgdTIwUmF0aW8gPSAodGhyZXNob2xkIC0gdTIyKSAvICh1MCAtIHUyMik7CiAgICAgICAgICAgIHUyMVJhdGlvID0gKHRocmVzaG9sZCAtIHUyMikgLyAodTEyIC0gdTIyKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goMCk7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKDEpOwogICAgICAgICAgICBpZiAodTIxUmF0aW8gIT09IDEpIHsKICAgICAgICAgICAgICByZXN1bHQucHVzaCgtMSk7CiAgICAgICAgICAgICAgcmVzdWx0LnB1c2goMik7CiAgICAgICAgICAgICAgcmVzdWx0LnB1c2goMSk7CiAgICAgICAgICAgICAgcmVzdWx0LnB1c2godTIxUmF0aW8pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh1MjBSYXRpbyAhPT0gMSkgewogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKC0xKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCgyKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCgwKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCh1MjBSYXRpbyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKG51bUJlaGluZCA9PT0gMikgewogICAgICAgICAgaWYgKCF1MEJlaGluZCAmJiB1MCAhPT0gdGhyZXNob2xkKSB7CiAgICAgICAgICAgIHUxMFJhdGlvID0gKHRocmVzaG9sZCAtIHUxMikgLyAodTAgLSB1MTIpOwogICAgICAgICAgICB1MjBSYXRpbyA9ICh0aHJlc2hvbGQgLSB1MjIpIC8gKHUwIC0gdTIyKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goMCk7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKC0xKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goMSk7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKDApOwogICAgICAgICAgICByZXN1bHQucHVzaCh1MTBSYXRpbyk7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKC0xKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goMik7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKDApOwogICAgICAgICAgICByZXN1bHQucHVzaCh1MjBSYXRpbyk7CiAgICAgICAgICB9IGVsc2UgaWYgKCF1MUJlaGluZCAmJiB1MTIgIT09IHRocmVzaG9sZCkgewogICAgICAgICAgICB1MjFSYXRpbyA9ICh0aHJlc2hvbGQgLSB1MjIpIC8gKHUxMiAtIHUyMik7CiAgICAgICAgICAgIHUwMVJhdGlvID0gKHRocmVzaG9sZCAtIHUwKSAvICh1MTIgLSB1MCk7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKDEpOwogICAgICAgICAgICByZXN1bHQucHVzaCgtMSk7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKDIpOwogICAgICAgICAgICByZXN1bHQucHVzaCgxKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2godTIxUmF0aW8pOwogICAgICAgICAgICByZXN1bHQucHVzaCgtMSk7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKDApOwogICAgICAgICAgICByZXN1bHQucHVzaCgxKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2godTAxUmF0aW8pOwogICAgICAgICAgfSBlbHNlIGlmICghdTJCZWhpbmQgJiYgdTIyICE9PSB0aHJlc2hvbGQpIHsKICAgICAgICAgICAgdTAyUmF0aW8gPSAodGhyZXNob2xkIC0gdTApIC8gKHUyMiAtIHUwKTsKICAgICAgICAgICAgdTEyUmF0aW8gPSAodGhyZXNob2xkIC0gdTEyKSAvICh1MjIgLSB1MTIpOwogICAgICAgICAgICByZXN1bHQucHVzaCgyKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goLTEpOwogICAgICAgICAgICByZXN1bHQucHVzaCgwKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goMik7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHUwMlJhdGlvKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goLTEpOwogICAgICAgICAgICByZXN1bHQucHVzaCgxKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goMik7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHUxMlJhdGlvKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKG51bUJlaGluZCAhPT0gMykgewogICAgICAgICAgcmVzdWx0LnB1c2goMCk7CiAgICAgICAgICByZXN1bHQucHVzaCgxKTsKICAgICAgICAgIHJlc3VsdC5wdXNoKDIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBJbnRlcnNlY3Rpb25zMkQuY29tcHV0ZUJhcnljZW50cmljQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbih4LCB5LCB4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh4KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInggaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgieSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoeDEpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgieDEgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHkxKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInkxIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh4MikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ4MiBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoeTIpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgieTIgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHgzKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIngzIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh5MykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ5MyBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgeDFteDMgPSB4MSAtIHgzOwogICAgICAgIGNvbnN0IHgzbXgyID0geDMgLSB4MjsKICAgICAgICBjb25zdCB5Mm15MyA9IHkyIC0geTM7CiAgICAgICAgY29uc3QgeTFteTMgPSB5MSAtIHkzOwogICAgICAgIGNvbnN0IGludmVyc2VEZXRlcm1pbmFudCA9IDEgLyAoeTJteTMgKiB4MW14MyArIHgzbXgyICogeTFteTMpOwogICAgICAgIGNvbnN0IHlteTMgPSB5IC0geTM7CiAgICAgICAgY29uc3QgeG14MyA9IHggLSB4MzsKICAgICAgICBjb25zdCBsMSA9ICh5Mm15MyAqIHhteDMgKyB4M214MiAqIHlteTMpICogaW52ZXJzZURldGVybWluYW50OwogICAgICAgIGNvbnN0IGwyID0gKC15MW15MyAqIHhteDMgKyB4MW14MyAqIHlteTMpICogaW52ZXJzZURldGVybWluYW50OwogICAgICAgIGNvbnN0IGwzID0gMSAtIGwxIC0gbDI7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQueCA9IGwxOwogICAgICAgICAgcmVzdWx0LnkgPSBsMjsKICAgICAgICAgIHJlc3VsdC56ID0gbDM7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IENhcnRlc2lhbjNfZGVmYXVsdChsMSwgbDIsIGwzKTsKICAgICAgfTsKICAgICAgSW50ZXJzZWN0aW9uczJELmNvbXB1dGVMaW5lU2VnbWVudExpbmVTZWdtZW50SW50ZXJzZWN0aW9uID0gZnVuY3Rpb24oeDAwLCB5MDAsIHgwMSwgeTAxLCB4MTAsIHkxMCwgeDExLCB5MTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigieDAwIiwgeDAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInkwMCIsIHkwMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJ4MDEiLCB4MDEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigieTAxIiwgeTAxKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoIngxMCIsIHgxMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJ5MTAiLCB5MTApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigieDExIiwgeDExKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInkxMSIsIHkxMSk7CiAgICAgICAgY29uc3QgbnVtZXJhdG9yMUEgPSAoeDExIC0geDEwKSAqICh5MDAgLSB5MTApIC0gKHkxMSAtIHkxMCkgKiAoeDAwIC0geDEwKTsKICAgICAgICBjb25zdCBudW1lcmF0b3IxQiA9ICh4MDEgLSB4MDApICogKHkwMCAtIHkxMCkgLSAoeTAxIC0geTAwKSAqICh4MDAgLSB4MTApOwogICAgICAgIGNvbnN0IGRlbm9taW5hdG9yMSA9ICh5MTEgLSB5MTApICogKHgwMSAtIHgwMCkgLSAoeDExIC0geDEwKSAqICh5MDEgLSB5MDApOwogICAgICAgIGlmIChkZW5vbWluYXRvcjEgPT09IDApIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgdWExID0gbnVtZXJhdG9yMUEgLyBkZW5vbWluYXRvcjE7CiAgICAgICAgY29uc3QgdWIxID0gbnVtZXJhdG9yMUIgLyBkZW5vbWluYXRvcjE7CiAgICAgICAgaWYgKHVhMSA+PSAwICYmIHVhMSA8PSAxICYmIHViMSA+PSAwICYmIHViMSA8PSAxKSB7CiAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgICAgIH0KICAgICAgICAgIHJlc3VsdC54ID0geDAwICsgdWExICogKHgwMSAtIHgwMCk7CiAgICAgICAgICByZXN1bHQueSA9IHkwMCArIHVhMSAqICh5MDEgLSB5MDApOwogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgIH07CiAgICAgIEludGVyc2VjdGlvbnMyRF9kZWZhdWx0ID0gSW50ZXJzZWN0aW9uczJEOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvdXBzYW1wbGVRdWFudGl6ZWRUZXJyYWluTWVzaC5qcwogIHZhciB1cHNhbXBsZVF1YW50aXplZFRlcnJhaW5NZXNoX2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydCh1cHNhbXBsZVF1YW50aXplZFRlcnJhaW5NZXNoX2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IHVwc2FtcGxlUXVhbnRpemVkVGVycmFpbk1lc2hfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIHVwc2FtcGxlUXVhbnRpemVkVGVycmFpbk1lc2gocGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cykgewogICAgY29uc3QgaXNFYXN0Q2hpbGQgPSBwYXJhbWV0ZXJzLmlzRWFzdENoaWxkOwogICAgY29uc3QgaXNOb3J0aENoaWxkID0gcGFyYW1ldGVycy5pc05vcnRoQ2hpbGQ7CiAgICBjb25zdCBtaW5VID0gaXNFYXN0Q2hpbGQgPyBoYWxmTWF4U2hvcnQgOiAwOwogICAgY29uc3QgbWF4VSA9IGlzRWFzdENoaWxkID8gbWF4U2hvcnQ1IDogaGFsZk1heFNob3J0OwogICAgY29uc3QgbWluViA9IGlzTm9ydGhDaGlsZCA/IGhhbGZNYXhTaG9ydCA6IDA7CiAgICBjb25zdCBtYXhWID0gaXNOb3J0aENoaWxkID8gbWF4U2hvcnQ1IDogaGFsZk1heFNob3J0OwogICAgY29uc3QgdUJ1ZmZlciA9IHVTY3JhdGNoOwogICAgY29uc3QgdkJ1ZmZlciA9IHZTY3JhdGNoOwogICAgY29uc3QgaGVpZ2h0QnVmZmVyID0gaGVpZ2h0U2NyYXRjaDsKICAgIGNvbnN0IG5vcm1hbEJ1ZmZlciA9IG5vcm1hbHNTY3JhdGNoOwogICAgdUJ1ZmZlci5sZW5ndGggPSAwOwogICAgdkJ1ZmZlci5sZW5ndGggPSAwOwogICAgaGVpZ2h0QnVmZmVyLmxlbmd0aCA9IDA7CiAgICBub3JtYWxCdWZmZXIubGVuZ3RoID0gMDsKICAgIGNvbnN0IGluZGljZXMgPSBpbmRpY2VzU2NyYXRjaDsKICAgIGluZGljZXMubGVuZ3RoID0gMDsKICAgIGNvbnN0IHZlcnRleE1hcCA9IHt9OwogICAgY29uc3QgcGFyZW50VmVydGljZXMgPSBwYXJhbWV0ZXJzLnZlcnRpY2VzOwogICAgbGV0IHBhcmVudEluZGljZXMgPSBwYXJhbWV0ZXJzLmluZGljZXM7CiAgICBwYXJlbnRJbmRpY2VzID0gcGFyZW50SW5kaWNlcy5zdWJhcnJheSgwLCBwYXJhbWV0ZXJzLmluZGV4Q291bnRXaXRob3V0U2tpcnRzKTsKICAgIGNvbnN0IGVuY29kaW5nID0gVGVycmFpbkVuY29kaW5nX2RlZmF1bHQuY2xvbmUocGFyYW1ldGVycy5lbmNvZGluZyk7CiAgICBjb25zdCBoYXNWZXJ0ZXhOb3JtYWxzID0gZW5jb2RpbmcuaGFzVmVydGV4Tm9ybWFsczsKICAgIGxldCB2ZXJ0ZXhDb3VudCA9IDA7CiAgICBjb25zdCBxdWFudGl6ZWRWZXJ0ZXhDb3VudCA9IHBhcmFtZXRlcnMudmVydGV4Q291bnRXaXRob3V0U2tpcnRzOwogICAgY29uc3QgcGFyZW50TWluaW11bUhlaWdodCA9IHBhcmFtZXRlcnMubWluaW11bUhlaWdodDsKICAgIGNvbnN0IHBhcmVudE1heGltdW1IZWlnaHQgPSBwYXJhbWV0ZXJzLm1heGltdW1IZWlnaHQ7CiAgICBjb25zdCBwYXJlbnRVQnVmZmVyID0gbmV3IEFycmF5KHF1YW50aXplZFZlcnRleENvdW50KTsKICAgIGNvbnN0IHBhcmVudFZCdWZmZXIgPSBuZXcgQXJyYXkocXVhbnRpemVkVmVydGV4Q291bnQpOwogICAgY29uc3QgcGFyZW50SGVpZ2h0QnVmZmVyID0gbmV3IEFycmF5KHF1YW50aXplZFZlcnRleENvdW50KTsKICAgIGNvbnN0IHBhcmVudE5vcm1hbEJ1ZmZlciA9IGhhc1ZlcnRleE5vcm1hbHMgPyBuZXcgQXJyYXkocXVhbnRpemVkVmVydGV4Q291bnQgKiAyKSA6IHZvaWQgMDsKICAgIGNvbnN0IHRocmVzaG9sZCA9IDIwOwogICAgbGV0IGhlaWdodDsKICAgIGxldCBpLCBuOwogICAgbGV0IHUzLCB2MzsKICAgIGZvciAoaSA9IDAsIG4gPSAwOyBpIDwgcXVhbnRpemVkVmVydGV4Q291bnQ7ICsraSwgbiArPSAyKSB7CiAgICAgIGNvbnN0IHRleENvb3JkcyA9IGVuY29kaW5nLmRlY29kZVRleHR1cmVDb29yZGluYXRlcygKICAgICAgICBwYXJlbnRWZXJ0aWNlcywKICAgICAgICBpLAogICAgICAgIGRlY29kZVRleENvb3Jkc1NjcmF0Y2gKICAgICAgKTsKICAgICAgaGVpZ2h0ID0gZW5jb2RpbmcuZGVjb2RlSGVpZ2h0KHBhcmVudFZlcnRpY2VzLCBpKTsKICAgICAgdTMgPSBNYXRoX2RlZmF1bHQuY2xhbXAodGV4Q29vcmRzLnggKiBtYXhTaG9ydDUgfCAwLCAwLCBtYXhTaG9ydDUpOwogICAgICB2MyA9IE1hdGhfZGVmYXVsdC5jbGFtcCh0ZXhDb29yZHMueSAqIG1heFNob3J0NSB8IDAsIDAsIG1heFNob3J0NSk7CiAgICAgIHBhcmVudEhlaWdodEJ1ZmZlcltpXSA9IE1hdGhfZGVmYXVsdC5jbGFtcCgKICAgICAgICAoaGVpZ2h0IC0gcGFyZW50TWluaW11bUhlaWdodCkgLyAocGFyZW50TWF4aW11bUhlaWdodCAtIHBhcmVudE1pbmltdW1IZWlnaHQpICogbWF4U2hvcnQ1IHwgMCwKICAgICAgICAwLAogICAgICAgIG1heFNob3J0NQogICAgICApOwogICAgICBpZiAodTMgPCB0aHJlc2hvbGQpIHsKICAgICAgICB1MyA9IDA7CiAgICAgIH0KICAgICAgaWYgKHYzIDwgdGhyZXNob2xkKSB7CiAgICAgICAgdjMgPSAwOwogICAgICB9CiAgICAgIGlmIChtYXhTaG9ydDUgLSB1MyA8IHRocmVzaG9sZCkgewogICAgICAgIHUzID0gbWF4U2hvcnQ1OwogICAgICB9CiAgICAgIGlmIChtYXhTaG9ydDUgLSB2MyA8IHRocmVzaG9sZCkgewogICAgICAgIHYzID0gbWF4U2hvcnQ1OwogICAgICB9CiAgICAgIHBhcmVudFVCdWZmZXJbaV0gPSB1MzsKICAgICAgcGFyZW50VkJ1ZmZlcltpXSA9IHYzOwogICAgICBpZiAoaGFzVmVydGV4Tm9ybWFscykgewogICAgICAgIGNvbnN0IGVuY29kZWROb3JtYWwgPSBlbmNvZGluZy5nZXRPY3RFbmNvZGVkTm9ybWFsKAogICAgICAgICAgcGFyZW50VmVydGljZXMsCiAgICAgICAgICBpLAogICAgICAgICAgb2N0RW5jb2RlZE5vcm1hbFNjcmF0Y2gKICAgICAgICApOwogICAgICAgIHBhcmVudE5vcm1hbEJ1ZmZlcltuXSA9IGVuY29kZWROb3JtYWwueDsKICAgICAgICBwYXJlbnROb3JtYWxCdWZmZXJbbiArIDFdID0gZW5jb2RlZE5vcm1hbC55OwogICAgICB9CiAgICAgIGlmICgoaXNFYXN0Q2hpbGQgJiYgdTMgPj0gaGFsZk1heFNob3J0IHx8ICFpc0Vhc3RDaGlsZCAmJiB1MyA8PSBoYWxmTWF4U2hvcnQpICYmIChpc05vcnRoQ2hpbGQgJiYgdjMgPj0gaGFsZk1heFNob3J0IHx8ICFpc05vcnRoQ2hpbGQgJiYgdjMgPD0gaGFsZk1heFNob3J0KSkgewogICAgICAgIHZlcnRleE1hcFtpXSA9IHZlcnRleENvdW50OwogICAgICAgIHVCdWZmZXIucHVzaCh1Myk7CiAgICAgICAgdkJ1ZmZlci5wdXNoKHYzKTsKICAgICAgICBoZWlnaHRCdWZmZXIucHVzaChwYXJlbnRIZWlnaHRCdWZmZXJbaV0pOwogICAgICAgIGlmIChoYXNWZXJ0ZXhOb3JtYWxzKSB7CiAgICAgICAgICBub3JtYWxCdWZmZXIucHVzaChwYXJlbnROb3JtYWxCdWZmZXJbbl0pOwogICAgICAgICAgbm9ybWFsQnVmZmVyLnB1c2gocGFyZW50Tm9ybWFsQnVmZmVyW24gKyAxXSk7CiAgICAgICAgfQogICAgICAgICsrdmVydGV4Q291bnQ7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IHRyaWFuZ2xlVmVydGljZXMgPSBbXTsKICAgIHRyaWFuZ2xlVmVydGljZXMucHVzaChuZXcgVmVydGV4KCkpOwogICAgdHJpYW5nbGVWZXJ0aWNlcy5wdXNoKG5ldyBWZXJ0ZXgoKSk7CiAgICB0cmlhbmdsZVZlcnRpY2VzLnB1c2gobmV3IFZlcnRleCgpKTsKICAgIGNvbnN0IGNsaXBwZWRUcmlhbmdsZVZlcnRpY2VzID0gW107CiAgICBjbGlwcGVkVHJpYW5nbGVWZXJ0aWNlcy5wdXNoKG5ldyBWZXJ0ZXgoKSk7CiAgICBjbGlwcGVkVHJpYW5nbGVWZXJ0aWNlcy5wdXNoKG5ldyBWZXJ0ZXgoKSk7CiAgICBjbGlwcGVkVHJpYW5nbGVWZXJ0aWNlcy5wdXNoKG5ldyBWZXJ0ZXgoKSk7CiAgICBsZXQgY2xpcHBlZEluZGV4OwogICAgbGV0IGNsaXBwZWQyOwogICAgZm9yIChpID0gMDsgaSA8IHBhcmVudEluZGljZXMubGVuZ3RoOyBpICs9IDMpIHsKICAgICAgY29uc3QgaTAgPSBwYXJlbnRJbmRpY2VzW2ldOwogICAgICBjb25zdCBpMSA9IHBhcmVudEluZGljZXNbaSArIDFdOwogICAgICBjb25zdCBpMiA9IHBhcmVudEluZGljZXNbaSArIDJdOwogICAgICBjb25zdCB1MCA9IHBhcmVudFVCdWZmZXJbaTBdOwogICAgICBjb25zdCB1MTIgPSBwYXJlbnRVQnVmZmVyW2kxXTsKICAgICAgY29uc3QgdTIyID0gcGFyZW50VUJ1ZmZlcltpMl07CiAgICAgIHRyaWFuZ2xlVmVydGljZXNbMF0uaW5pdGlhbGl6ZUluZGV4ZWQoCiAgICAgICAgcGFyZW50VUJ1ZmZlciwKICAgICAgICBwYXJlbnRWQnVmZmVyLAogICAgICAgIHBhcmVudEhlaWdodEJ1ZmZlciwKICAgICAgICBwYXJlbnROb3JtYWxCdWZmZXIsCiAgICAgICAgaTAKICAgICAgKTsKICAgICAgdHJpYW5nbGVWZXJ0aWNlc1sxXS5pbml0aWFsaXplSW5kZXhlZCgKICAgICAgICBwYXJlbnRVQnVmZmVyLAogICAgICAgIHBhcmVudFZCdWZmZXIsCiAgICAgICAgcGFyZW50SGVpZ2h0QnVmZmVyLAogICAgICAgIHBhcmVudE5vcm1hbEJ1ZmZlciwKICAgICAgICBpMQogICAgICApOwogICAgICB0cmlhbmdsZVZlcnRpY2VzWzJdLmluaXRpYWxpemVJbmRleGVkKAogICAgICAgIHBhcmVudFVCdWZmZXIsCiAgICAgICAgcGFyZW50VkJ1ZmZlciwKICAgICAgICBwYXJlbnRIZWlnaHRCdWZmZXIsCiAgICAgICAgcGFyZW50Tm9ybWFsQnVmZmVyLAogICAgICAgIGkyCiAgICAgICk7CiAgICAgIGNvbnN0IGNsaXBwZWQgPSBJbnRlcnNlY3Rpb25zMkRfZGVmYXVsdC5jbGlwVHJpYW5nbGVBdEF4aXNBbGlnbmVkVGhyZXNob2xkKAogICAgICAgIGhhbGZNYXhTaG9ydCwKICAgICAgICBpc0Vhc3RDaGlsZCwKICAgICAgICB1MCwKICAgICAgICB1MTIsCiAgICAgICAgdTIyLAogICAgICAgIGNsaXBTY3JhdGNoCiAgICAgICk7CiAgICAgIGNsaXBwZWRJbmRleCA9IDA7CiAgICAgIGlmIChjbGlwcGVkSW5kZXggPj0gY2xpcHBlZC5sZW5ndGgpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBjbGlwcGVkSW5kZXggPSBjbGlwcGVkVHJpYW5nbGVWZXJ0aWNlc1swXS5pbml0aWFsaXplRnJvbUNsaXBSZXN1bHQoCiAgICAgICAgY2xpcHBlZCwKICAgICAgICBjbGlwcGVkSW5kZXgsCiAgICAgICAgdHJpYW5nbGVWZXJ0aWNlcwogICAgICApOwogICAgICBpZiAoY2xpcHBlZEluZGV4ID49IGNsaXBwZWQubGVuZ3RoKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY2xpcHBlZEluZGV4ID0gY2xpcHBlZFRyaWFuZ2xlVmVydGljZXNbMV0uaW5pdGlhbGl6ZUZyb21DbGlwUmVzdWx0KAogICAgICAgIGNsaXBwZWQsCiAgICAgICAgY2xpcHBlZEluZGV4LAogICAgICAgIHRyaWFuZ2xlVmVydGljZXMKICAgICAgKTsKICAgICAgaWYgKGNsaXBwZWRJbmRleCA+PSBjbGlwcGVkLmxlbmd0aCkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNsaXBwZWRJbmRleCA9IGNsaXBwZWRUcmlhbmdsZVZlcnRpY2VzWzJdLmluaXRpYWxpemVGcm9tQ2xpcFJlc3VsdCgKICAgICAgICBjbGlwcGVkLAogICAgICAgIGNsaXBwZWRJbmRleCwKICAgICAgICB0cmlhbmdsZVZlcnRpY2VzCiAgICAgICk7CiAgICAgIGNsaXBwZWQyID0gSW50ZXJzZWN0aW9uczJEX2RlZmF1bHQuY2xpcFRyaWFuZ2xlQXRBeGlzQWxpZ25lZFRocmVzaG9sZCgKICAgICAgICBoYWxmTWF4U2hvcnQsCiAgICAgICAgaXNOb3J0aENoaWxkLAogICAgICAgIGNsaXBwZWRUcmlhbmdsZVZlcnRpY2VzWzBdLmdldFYoKSwKICAgICAgICBjbGlwcGVkVHJpYW5nbGVWZXJ0aWNlc1sxXS5nZXRWKCksCiAgICAgICAgY2xpcHBlZFRyaWFuZ2xlVmVydGljZXNbMl0uZ2V0VigpLAogICAgICAgIGNsaXBTY3JhdGNoMgogICAgICApOwogICAgICBhZGRDbGlwcGVkUG9seWdvbigKICAgICAgICB1QnVmZmVyLAogICAgICAgIHZCdWZmZXIsCiAgICAgICAgaGVpZ2h0QnVmZmVyLAogICAgICAgIG5vcm1hbEJ1ZmZlciwKICAgICAgICBpbmRpY2VzLAogICAgICAgIHZlcnRleE1hcCwKICAgICAgICBjbGlwcGVkMiwKICAgICAgICBjbGlwcGVkVHJpYW5nbGVWZXJ0aWNlcywKICAgICAgICBoYXNWZXJ0ZXhOb3JtYWxzCiAgICAgICk7CiAgICAgIGlmIChjbGlwcGVkSW5kZXggPCBjbGlwcGVkLmxlbmd0aCkgewogICAgICAgIGNsaXBwZWRUcmlhbmdsZVZlcnRpY2VzWzJdLmNsb25lKGNsaXBwZWRUcmlhbmdsZVZlcnRpY2VzWzFdKTsKICAgICAgICBjbGlwcGVkVHJpYW5nbGVWZXJ0aWNlc1syXS5pbml0aWFsaXplRnJvbUNsaXBSZXN1bHQoCiAgICAgICAgICBjbGlwcGVkLAogICAgICAgICAgY2xpcHBlZEluZGV4LAogICAgICAgICAgdHJpYW5nbGVWZXJ0aWNlcwogICAgICAgICk7CiAgICAgICAgY2xpcHBlZDIgPSBJbnRlcnNlY3Rpb25zMkRfZGVmYXVsdC5jbGlwVHJpYW5nbGVBdEF4aXNBbGlnbmVkVGhyZXNob2xkKAogICAgICAgICAgaGFsZk1heFNob3J0LAogICAgICAgICAgaXNOb3J0aENoaWxkLAogICAgICAgICAgY2xpcHBlZFRyaWFuZ2xlVmVydGljZXNbMF0uZ2V0VigpLAogICAgICAgICAgY2xpcHBlZFRyaWFuZ2xlVmVydGljZXNbMV0uZ2V0VigpLAogICAgICAgICAgY2xpcHBlZFRyaWFuZ2xlVmVydGljZXNbMl0uZ2V0VigpLAogICAgICAgICAgY2xpcFNjcmF0Y2gyCiAgICAgICAgKTsKICAgICAgICBhZGRDbGlwcGVkUG9seWdvbigKICAgICAgICAgIHVCdWZmZXIsCiAgICAgICAgICB2QnVmZmVyLAogICAgICAgICAgaGVpZ2h0QnVmZmVyLAogICAgICAgICAgbm9ybWFsQnVmZmVyLAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIHZlcnRleE1hcCwKICAgICAgICAgIGNsaXBwZWQyLAogICAgICAgICAgY2xpcHBlZFRyaWFuZ2xlVmVydGljZXMsCiAgICAgICAgICBoYXNWZXJ0ZXhOb3JtYWxzCiAgICAgICAgKTsKICAgICAgfQogICAgfQogICAgY29uc3QgdU9mZnNldCA9IGlzRWFzdENoaWxkID8gLW1heFNob3J0NSA6IDA7CiAgICBjb25zdCB2T2Zmc2V0ID0gaXNOb3J0aENoaWxkID8gLW1heFNob3J0NSA6IDA7CiAgICBjb25zdCB3ZXN0SW5kaWNlcyA9IFtdOwogICAgY29uc3Qgc291dGhJbmRpY2VzID0gW107CiAgICBjb25zdCBlYXN0SW5kaWNlcyA9IFtdOwogICAgY29uc3Qgbm9ydGhJbmRpY2VzID0gW107CiAgICBsZXQgbWluaW11bUhlaWdodCA9IE51bWJlci5NQVhfVkFMVUU7CiAgICBsZXQgbWF4aW11bUhlaWdodCA9IC1taW5pbXVtSGVpZ2h0OwogICAgY29uc3QgY2FydGVzaWFuVmVydGljZXMgPSB2ZXJ0aWNlc1NjcmF0Y2g7CiAgICBjYXJ0ZXNpYW5WZXJ0aWNlcy5sZW5ndGggPSAwOwogICAgY29uc3QgZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUocGFyYW1ldGVycy5lbGxpcHNvaWQpOwogICAgY29uc3QgcmVjdGFuZ2xlID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2xvbmUocGFyYW1ldGVycy5jaGlsZFJlY3RhbmdsZSk7CiAgICBjb25zdCBub3J0aCA9IHJlY3RhbmdsZS5ub3J0aDsKICAgIGNvbnN0IHNvdXRoID0gcmVjdGFuZ2xlLnNvdXRoOwogICAgbGV0IGVhc3QgPSByZWN0YW5nbGUuZWFzdDsKICAgIGNvbnN0IHdlc3QgPSByZWN0YW5nbGUud2VzdDsKICAgIGlmIChlYXN0IDwgd2VzdCkgewogICAgICBlYXN0ICs9IE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICB9CiAgICBmb3IgKGkgPSAwOyBpIDwgdUJ1ZmZlci5sZW5ndGg7ICsraSkgewogICAgICB1MyA9IE1hdGgucm91bmQodUJ1ZmZlcltpXSk7CiAgICAgIGlmICh1MyA8PSBtaW5VKSB7CiAgICAgICAgd2VzdEluZGljZXMucHVzaChpKTsKICAgICAgICB1MyA9IDA7CiAgICAgIH0gZWxzZSBpZiAodTMgPj0gbWF4VSkgewogICAgICAgIGVhc3RJbmRpY2VzLnB1c2goaSk7CiAgICAgICAgdTMgPSBtYXhTaG9ydDU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdTMgPSB1MyAqIDIgKyB1T2Zmc2V0OwogICAgICB9CiAgICAgIHVCdWZmZXJbaV0gPSB1MzsKICAgICAgdjMgPSBNYXRoLnJvdW5kKHZCdWZmZXJbaV0pOwogICAgICBpZiAodjMgPD0gbWluVikgewogICAgICAgIHNvdXRoSW5kaWNlcy5wdXNoKGkpOwogICAgICAgIHYzID0gMDsKICAgICAgfSBlbHNlIGlmICh2MyA+PSBtYXhWKSB7CiAgICAgICAgbm9ydGhJbmRpY2VzLnB1c2goaSk7CiAgICAgICAgdjMgPSBtYXhTaG9ydDU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdjMgPSB2MyAqIDIgKyB2T2Zmc2V0OwogICAgICB9CiAgICAgIHZCdWZmZXJbaV0gPSB2MzsKICAgICAgaGVpZ2h0ID0gTWF0aF9kZWZhdWx0LmxlcnAoCiAgICAgICAgcGFyZW50TWluaW11bUhlaWdodCwKICAgICAgICBwYXJlbnRNYXhpbXVtSGVpZ2h0LAogICAgICAgIGhlaWdodEJ1ZmZlcltpXSAvIG1heFNob3J0NQogICAgICApOwogICAgICBpZiAoaGVpZ2h0IDwgbWluaW11bUhlaWdodCkgewogICAgICAgIG1pbmltdW1IZWlnaHQgPSBoZWlnaHQ7CiAgICAgIH0KICAgICAgaWYgKGhlaWdodCA+IG1heGltdW1IZWlnaHQpIHsKICAgICAgICBtYXhpbXVtSGVpZ2h0ID0gaGVpZ2h0OwogICAgICB9CiAgICAgIGhlaWdodEJ1ZmZlcltpXSA9IGhlaWdodDsKICAgICAgY2FydG9ncmFwaGljU2NyYXRjaDIubG9uZ2l0dWRlID0gTWF0aF9kZWZhdWx0LmxlcnAod2VzdCwgZWFzdCwgdTMgLyBtYXhTaG9ydDUpOwogICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoMi5sYXRpdHVkZSA9IE1hdGhfZGVmYXVsdC5sZXJwKHNvdXRoLCBub3J0aCwgdjMgLyBtYXhTaG9ydDUpOwogICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoMi5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgIGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihjYXJ0b2dyYXBoaWNTY3JhdGNoMiwgY2FydGVzaWFuM1NjcmF0Y2g5KTsKICAgICAgY2FydGVzaWFuVmVydGljZXMucHVzaChjYXJ0ZXNpYW4zU2NyYXRjaDkueCk7CiAgICAgIGNhcnRlc2lhblZlcnRpY2VzLnB1c2goY2FydGVzaWFuM1NjcmF0Y2g5LnkpOwogICAgICBjYXJ0ZXNpYW5WZXJ0aWNlcy5wdXNoKGNhcnRlc2lhbjNTY3JhdGNoOS56KTsKICAgIH0KICAgIGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tVmVydGljZXMoCiAgICAgIGNhcnRlc2lhblZlcnRpY2VzLAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywKICAgICAgMywKICAgICAgYm91bmRpbmdTcGhlcmVTY3JhdGNoCiAgICApOwogICAgY29uc3Qgb3JpZW50ZWRCb3VuZGluZ0JveCA9IE9yaWVudGVkQm91bmRpbmdCb3hfZGVmYXVsdC5mcm9tUmVjdGFuZ2xlKAogICAgICByZWN0YW5nbGUsCiAgICAgIG1pbmltdW1IZWlnaHQsCiAgICAgIG1heGltdW1IZWlnaHQsCiAgICAgIGVsbGlwc29pZCwKICAgICAgb3JpZW50ZWRCb3VuZGluZ0JveFNjcmF0Y2gKICAgICk7CiAgICBjb25zdCBvY2NsdWRlciA9IG5ldyBFbGxpcHNvaWRhbE9jY2x1ZGVyX2RlZmF1bHQoZWxsaXBzb2lkKTsKICAgIGNvbnN0IGhvcml6b25PY2NsdXNpb25Qb2ludCA9IG9jY2x1ZGVyLmNvbXB1dGVIb3Jpem9uQ3VsbGluZ1BvaW50RnJvbVZlcnRpY2VzUG9zc2libHlVbmRlckVsbGlwc29pZCgKICAgICAgYm91bmRpbmdTcGhlcmUuY2VudGVyLAogICAgICBjYXJ0ZXNpYW5WZXJ0aWNlcywKICAgICAgMywKICAgICAgYm91bmRpbmdTcGhlcmUuY2VudGVyLAogICAgICBtaW5pbXVtSGVpZ2h0LAogICAgICBob3Jpem9uT2NjbHVzaW9uUG9pbnRTY3JhdGNoCiAgICApOwogICAgY29uc3QgaGVpZ2h0UmFuZ2UgPSBtYXhpbXVtSGVpZ2h0IC0gbWluaW11bUhlaWdodDsKICAgIGNvbnN0IHZlcnRpY2VzID0gbmV3IFVpbnQxNkFycmF5KAogICAgICB1QnVmZmVyLmxlbmd0aCArIHZCdWZmZXIubGVuZ3RoICsgaGVpZ2h0QnVmZmVyLmxlbmd0aAogICAgKTsKICAgIGZvciAoaSA9IDA7IGkgPCB1QnVmZmVyLmxlbmd0aDsgKytpKSB7CiAgICAgIHZlcnRpY2VzW2ldID0gdUJ1ZmZlcltpXTsKICAgIH0KICAgIGxldCBzdGFydCA9IHVCdWZmZXIubGVuZ3RoOwogICAgZm9yIChpID0gMDsgaSA8IHZCdWZmZXIubGVuZ3RoOyArK2kpIHsKICAgICAgdmVydGljZXNbc3RhcnQgKyBpXSA9IHZCdWZmZXJbaV07CiAgICB9CiAgICBzdGFydCArPSB2QnVmZmVyLmxlbmd0aDsKICAgIGZvciAoaSA9IDA7IGkgPCBoZWlnaHRCdWZmZXIubGVuZ3RoOyArK2kpIHsKICAgICAgdmVydGljZXNbc3RhcnQgKyBpXSA9IG1heFNob3J0NSAqIChoZWlnaHRCdWZmZXJbaV0gLSBtaW5pbXVtSGVpZ2h0KSAvIGhlaWdodFJhbmdlOwogICAgfQogICAgY29uc3QgaW5kaWNlc1R5cGVkQXJyYXkgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgdUJ1ZmZlci5sZW5ndGgsCiAgICAgIGluZGljZXMKICAgICk7CiAgICBsZXQgZW5jb2RlZE5vcm1hbHM7CiAgICBpZiAoaGFzVmVydGV4Tm9ybWFscykgewogICAgICBjb25zdCBub3JtYWxBcnJheSA9IG5ldyBVaW50OEFycmF5KG5vcm1hbEJ1ZmZlcik7CiAgICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaCgKICAgICAgICB2ZXJ0aWNlcy5idWZmZXIsCiAgICAgICAgaW5kaWNlc1R5cGVkQXJyYXkuYnVmZmVyLAogICAgICAgIG5vcm1hbEFycmF5LmJ1ZmZlcgogICAgICApOwogICAgICBlbmNvZGVkTm9ybWFscyA9IG5vcm1hbEFycmF5LmJ1ZmZlcjsKICAgIH0gZWxzZSB7CiAgICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaCh2ZXJ0aWNlcy5idWZmZXIsIGluZGljZXNUeXBlZEFycmF5LmJ1ZmZlcik7CiAgICB9CiAgICByZXR1cm4gewogICAgICB2ZXJ0aWNlczogdmVydGljZXMuYnVmZmVyLAogICAgICBlbmNvZGVkTm9ybWFscywKICAgICAgaW5kaWNlczogaW5kaWNlc1R5cGVkQXJyYXkuYnVmZmVyLAogICAgICBtaW5pbXVtSGVpZ2h0LAogICAgICBtYXhpbXVtSGVpZ2h0LAogICAgICB3ZXN0SW5kaWNlcywKICAgICAgc291dGhJbmRpY2VzLAogICAgICBlYXN0SW5kaWNlcywKICAgICAgbm9ydGhJbmRpY2VzLAogICAgICBib3VuZGluZ1NwaGVyZSwKICAgICAgb3JpZW50ZWRCb3VuZGluZ0JveCwKICAgICAgaG9yaXpvbk9jY2x1c2lvblBvaW50CiAgICB9OwogIH0KICBmdW5jdGlvbiBWZXJ0ZXgoKSB7CiAgICB0aGlzLnZlcnRleEJ1ZmZlciA9IHZvaWQgMDsKICAgIHRoaXMuaW5kZXggPSB2b2lkIDA7CiAgICB0aGlzLmZpcnN0ID0gdm9pZCAwOwogICAgdGhpcy5zZWNvbmQgPSB2b2lkIDA7CiAgICB0aGlzLnJhdGlvID0gdm9pZCAwOwogIH0KICBmdW5jdGlvbiBsZXJwT2N0RW5jb2RlZE5vcm1hbCh2ZXJ0ZXgsIHJlc3VsdCkgewogICAgKytkZXB0aDsKICAgIGxldCBmaXJzdCA9IGNhcnRlc2lhblNjcmF0Y2gxW2RlcHRoXTsKICAgIGxldCBzZWNvbmQgPSBjYXJ0ZXNpYW5TY3JhdGNoMltkZXB0aF07CiAgICBmaXJzdCA9IEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQub2N0RGVjb2RlKAogICAgICB2ZXJ0ZXguZmlyc3QuZ2V0Tm9ybWFsWCgpLAogICAgICB2ZXJ0ZXguZmlyc3QuZ2V0Tm9ybWFsWSgpLAogICAgICBmaXJzdAogICAgKTsKICAgIHNlY29uZCA9IEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQub2N0RGVjb2RlKAogICAgICB2ZXJ0ZXguc2Vjb25kLmdldE5vcm1hbFgoKSwKICAgICAgdmVydGV4LnNlY29uZC5nZXROb3JtYWxZKCksCiAgICAgIHNlY29uZAogICAgKTsKICAgIGNhcnRlc2lhbjNTY3JhdGNoOSA9IENhcnRlc2lhbjNfZGVmYXVsdC5sZXJwKAogICAgICBmaXJzdCwKICAgICAgc2Vjb25kLAogICAgICB2ZXJ0ZXgucmF0aW8sCiAgICAgIGNhcnRlc2lhbjNTY3JhdGNoOQogICAgKTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoY2FydGVzaWFuM1NjcmF0Y2g5LCBjYXJ0ZXNpYW4zU2NyYXRjaDkpOwogICAgQXR0cmlidXRlQ29tcHJlc3Npb25fZGVmYXVsdC5vY3RFbmNvZGUoY2FydGVzaWFuM1NjcmF0Y2g5LCByZXN1bHQpOwogICAgLS1kZXB0aDsKICAgIHJldHVybiByZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIGFkZENsaXBwZWRQb2x5Z29uKHVCdWZmZXIsIHZCdWZmZXIsIGhlaWdodEJ1ZmZlciwgbm9ybWFsQnVmZmVyLCBpbmRpY2VzLCB2ZXJ0ZXhNYXAsIGNsaXBwZWQsIHRyaWFuZ2xlVmVydGljZXMsIGhhc1ZlcnRleE5vcm1hbHMpIHsKICAgIGlmIChjbGlwcGVkLmxlbmd0aCA9PT0gMCkgewogICAgICByZXR1cm47CiAgICB9CiAgICBsZXQgbnVtVmVydGljZXMgPSAwOwogICAgbGV0IGNsaXBwZWRJbmRleCA9IDA7CiAgICB3aGlsZSAoY2xpcHBlZEluZGV4IDwgY2xpcHBlZC5sZW5ndGgpIHsKICAgICAgY2xpcHBlZEluZGV4ID0gcG9seWdvblZlcnRpY2VzW251bVZlcnRpY2VzKytdLmluaXRpYWxpemVGcm9tQ2xpcFJlc3VsdCgKICAgICAgICBjbGlwcGVkLAogICAgICAgIGNsaXBwZWRJbmRleCwKICAgICAgICB0cmlhbmdsZVZlcnRpY2VzCiAgICAgICk7CiAgICB9CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVZlcnRpY2VzOyArK2kpIHsKICAgICAgY29uc3QgcG9seWdvblZlcnRleCA9IHBvbHlnb25WZXJ0aWNlc1tpXTsKICAgICAgaWYgKCFwb2x5Z29uVmVydGV4LmlzSW5kZXhlZCgpKSB7CiAgICAgICAgY29uc3Qga2V5ID0gcG9seWdvblZlcnRleC5nZXRLZXkoKTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHZlcnRleE1hcFtrZXldKSkgewogICAgICAgICAgcG9seWdvblZlcnRleC5uZXdJbmRleCA9IHZlcnRleE1hcFtrZXldOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zdCBuZXdJbmRleCA9IHVCdWZmZXIubGVuZ3RoOwogICAgICAgICAgdUJ1ZmZlci5wdXNoKHBvbHlnb25WZXJ0ZXguZ2V0VSgpKTsKICAgICAgICAgIHZCdWZmZXIucHVzaChwb2x5Z29uVmVydGV4LmdldFYoKSk7CiAgICAgICAgICBoZWlnaHRCdWZmZXIucHVzaChwb2x5Z29uVmVydGV4LmdldEgoKSk7CiAgICAgICAgICBpZiAoaGFzVmVydGV4Tm9ybWFscykgewogICAgICAgICAgICBub3JtYWxCdWZmZXIucHVzaChwb2x5Z29uVmVydGV4LmdldE5vcm1hbFgoKSk7CiAgICAgICAgICAgIG5vcm1hbEJ1ZmZlci5wdXNoKHBvbHlnb25WZXJ0ZXguZ2V0Tm9ybWFsWSgpKTsKICAgICAgICAgIH0KICAgICAgICAgIHBvbHlnb25WZXJ0ZXgubmV3SW5kZXggPSBuZXdJbmRleDsKICAgICAgICAgIHZlcnRleE1hcFtrZXldID0gbmV3SW5kZXg7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHBvbHlnb25WZXJ0ZXgubmV3SW5kZXggPSB2ZXJ0ZXhNYXBbcG9seWdvblZlcnRleC5pbmRleF07CiAgICAgICAgcG9seWdvblZlcnRleC51QnVmZmVyID0gdUJ1ZmZlcjsKICAgICAgICBwb2x5Z29uVmVydGV4LnZCdWZmZXIgPSB2QnVmZmVyOwogICAgICAgIHBvbHlnb25WZXJ0ZXguaGVpZ2h0QnVmZmVyID0gaGVpZ2h0QnVmZmVyOwogICAgICAgIGlmIChoYXNWZXJ0ZXhOb3JtYWxzKSB7CiAgICAgICAgICBwb2x5Z29uVmVydGV4Lm5vcm1hbEJ1ZmZlciA9IG5vcm1hbEJ1ZmZlcjsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmIChudW1WZXJ0aWNlcyA9PT0gMykgewogICAgICBpbmRpY2VzLnB1c2gocG9seWdvblZlcnRpY2VzWzBdLm5ld0luZGV4KTsKICAgICAgaW5kaWNlcy5wdXNoKHBvbHlnb25WZXJ0aWNlc1sxXS5uZXdJbmRleCk7CiAgICAgIGluZGljZXMucHVzaChwb2x5Z29uVmVydGljZXNbMl0ubmV3SW5kZXgpOwogICAgfSBlbHNlIGlmIChudW1WZXJ0aWNlcyA9PT0gNCkgewogICAgICBpbmRpY2VzLnB1c2gocG9seWdvblZlcnRpY2VzWzBdLm5ld0luZGV4KTsKICAgICAgaW5kaWNlcy5wdXNoKHBvbHlnb25WZXJ0aWNlc1sxXS5uZXdJbmRleCk7CiAgICAgIGluZGljZXMucHVzaChwb2x5Z29uVmVydGljZXNbMl0ubmV3SW5kZXgpOwogICAgICBpbmRpY2VzLnB1c2gocG9seWdvblZlcnRpY2VzWzBdLm5ld0luZGV4KTsKICAgICAgaW5kaWNlcy5wdXNoKHBvbHlnb25WZXJ0aWNlc1syXS5uZXdJbmRleCk7CiAgICAgIGluZGljZXMucHVzaChwb2x5Z29uVmVydGljZXNbM10ubmV3SW5kZXgpOwogICAgfQogIH0KICB2YXIgbWF4U2hvcnQ1LCBoYWxmTWF4U2hvcnQsIGNsaXBTY3JhdGNoLCBjbGlwU2NyYXRjaDIsIHZlcnRpY2VzU2NyYXRjaCwgY2FydG9ncmFwaGljU2NyYXRjaDIsIGNhcnRlc2lhbjNTY3JhdGNoOSwgdVNjcmF0Y2gsIHZTY3JhdGNoLCBoZWlnaHRTY3JhdGNoLCBpbmRpY2VzU2NyYXRjaCwgbm9ybWFsc1NjcmF0Y2gsIGhvcml6b25PY2NsdXNpb25Qb2ludFNjcmF0Y2gsIGJvdW5kaW5nU3BoZXJlU2NyYXRjaCwgb3JpZW50ZWRCb3VuZGluZ0JveFNjcmF0Y2gsIGRlY29kZVRleENvb3Jkc1NjcmF0Y2gsIG9jdEVuY29kZWROb3JtYWxTY3JhdGNoLCBlbmNvZGVkU2NyYXRjaCwgZGVwdGgsIGNhcnRlc2lhblNjcmF0Y2gxLCBjYXJ0ZXNpYW5TY3JhdGNoMiwgcG9seWdvblZlcnRpY2VzLCB1cHNhbXBsZVF1YW50aXplZFRlcnJhaW5NZXNoX2RlZmF1bHQ7CiAgdmFyIGluaXRfdXBzYW1wbGVRdWFudGl6ZWRUZXJyYWluTWVzaCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvdXBzYW1wbGVRdWFudGl6ZWRUZXJyYWluTWVzaC5qcyIoKSB7CiAgICAgIGluaXRfQXR0cmlidXRlQ29tcHJlc3Npb24oKTsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0VsbGlwc29pZGFsT2NjbHVkZXIoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfSW50ZXJzZWN0aW9uczJEKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X09yaWVudGVkQm91bmRpbmdCb3goKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgaW5pdF9UZXJyYWluRW5jb2RpbmcoKTsKICAgICAgaW5pdF9jcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyKCk7CiAgICAgIG1heFNob3J0NSA9IDMyNzY3OwogICAgICBoYWxmTWF4U2hvcnQgPSBtYXhTaG9ydDUgLyAyIHwgMDsKICAgICAgY2xpcFNjcmF0Y2ggPSBbXTsKICAgICAgY2xpcFNjcmF0Y2gyID0gW107CiAgICAgIHZlcnRpY2VzU2NyYXRjaCA9IFtdOwogICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoMiA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBjYXJ0ZXNpYW4zU2NyYXRjaDkgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHVTY3JhdGNoID0gW107CiAgICAgIHZTY3JhdGNoID0gW107CiAgICAgIGhlaWdodFNjcmF0Y2ggPSBbXTsKICAgICAgaW5kaWNlc1NjcmF0Y2ggPSBbXTsKICAgICAgbm9ybWFsc1NjcmF0Y2ggPSBbXTsKICAgICAgaG9yaXpvbk9jY2x1c2lvblBvaW50U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgYm91bmRpbmdTcGhlcmVTY3JhdGNoID0gbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQoKTsKICAgICAgb3JpZW50ZWRCb3VuZGluZ0JveFNjcmF0Y2ggPSBuZXcgT3JpZW50ZWRCb3VuZGluZ0JveF9kZWZhdWx0KCk7CiAgICAgIGRlY29kZVRleENvb3Jkc1NjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIG9jdEVuY29kZWROb3JtYWxTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBWZXJ0ZXgucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IFZlcnRleCgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQudUJ1ZmZlciA9IHRoaXMudUJ1ZmZlcjsKICAgICAgICByZXN1bHQudkJ1ZmZlciA9IHRoaXMudkJ1ZmZlcjsKICAgICAgICByZXN1bHQuaGVpZ2h0QnVmZmVyID0gdGhpcy5oZWlnaHRCdWZmZXI7CiAgICAgICAgcmVzdWx0Lm5vcm1hbEJ1ZmZlciA9IHRoaXMubm9ybWFsQnVmZmVyOwogICAgICAgIHJlc3VsdC5pbmRleCA9IHRoaXMuaW5kZXg7CiAgICAgICAgcmVzdWx0LmZpcnN0ID0gdGhpcy5maXJzdDsKICAgICAgICByZXN1bHQuc2Vjb25kID0gdGhpcy5zZWNvbmQ7CiAgICAgICAgcmVzdWx0LnJhdGlvID0gdGhpcy5yYXRpbzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBWZXJ0ZXgucHJvdG90eXBlLmluaXRpYWxpemVJbmRleGVkID0gZnVuY3Rpb24odUJ1ZmZlciwgdkJ1ZmZlciwgaGVpZ2h0QnVmZmVyLCBub3JtYWxCdWZmZXIsIGluZGV4KSB7CiAgICAgICAgdGhpcy51QnVmZmVyID0gdUJ1ZmZlcjsKICAgICAgICB0aGlzLnZCdWZmZXIgPSB2QnVmZmVyOwogICAgICAgIHRoaXMuaGVpZ2h0QnVmZmVyID0gaGVpZ2h0QnVmZmVyOwogICAgICAgIHRoaXMubm9ybWFsQnVmZmVyID0gbm9ybWFsQnVmZmVyOwogICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDsKICAgICAgICB0aGlzLmZpcnN0ID0gdm9pZCAwOwogICAgICAgIHRoaXMuc2Vjb25kID0gdm9pZCAwOwogICAgICAgIHRoaXMucmF0aW8gPSB2b2lkIDA7CiAgICAgIH07CiAgICAgIFZlcnRleC5wcm90b3R5cGUuaW5pdGlhbGl6ZUZyb21DbGlwUmVzdWx0ID0gZnVuY3Rpb24oY2xpcFJlc3VsdCwgaW5kZXgsIHZlcnRpY2VzKSB7CiAgICAgICAgbGV0IG5leHRJbmRleCA9IGluZGV4ICsgMTsKICAgICAgICBpZiAoY2xpcFJlc3VsdFtpbmRleF0gIT09IC0xKSB7CiAgICAgICAgICB2ZXJ0aWNlc1tjbGlwUmVzdWx0W2luZGV4XV0uY2xvbmUodGhpcyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMudmVydGV4QnVmZmVyID0gdm9pZCAwOwogICAgICAgICAgdGhpcy5pbmRleCA9IHZvaWQgMDsKICAgICAgICAgIHRoaXMuZmlyc3QgPSB2ZXJ0aWNlc1tjbGlwUmVzdWx0W25leHRJbmRleF1dOwogICAgICAgICAgKytuZXh0SW5kZXg7CiAgICAgICAgICB0aGlzLnNlY29uZCA9IHZlcnRpY2VzW2NsaXBSZXN1bHRbbmV4dEluZGV4XV07CiAgICAgICAgICArK25leHRJbmRleDsKICAgICAgICAgIHRoaXMucmF0aW8gPSBjbGlwUmVzdWx0W25leHRJbmRleF07CiAgICAgICAgICArK25leHRJbmRleDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5leHRJbmRleDsKICAgICAgfTsKICAgICAgVmVydGV4LnByb3RvdHlwZS5nZXRLZXkgPSBmdW5jdGlvbigpIHsKICAgICAgICBpZiAodGhpcy5pc0luZGV4ZWQoKSkgewogICAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXg7CiAgICAgICAgfQogICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICBmaXJzdDogdGhpcy5maXJzdC5nZXRLZXkoKSwKICAgICAgICAgIHNlY29uZDogdGhpcy5zZWNvbmQuZ2V0S2V5KCksCiAgICAgICAgICByYXRpbzogdGhpcy5yYXRpbwogICAgICAgIH0pOwogICAgICB9OwogICAgICBWZXJ0ZXgucHJvdG90eXBlLmlzSW5kZXhlZCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBkZWZpbmVkX2RlZmF1bHQodGhpcy5pbmRleCk7CiAgICAgIH07CiAgICAgIFZlcnRleC5wcm90b3R5cGUuZ2V0SCA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQodGhpcy5pbmRleCkpIHsKICAgICAgICAgIHJldHVybiB0aGlzLmhlaWdodEJ1ZmZlclt0aGlzLmluZGV4XTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIE1hdGhfZGVmYXVsdC5sZXJwKHRoaXMuZmlyc3QuZ2V0SCgpLCB0aGlzLnNlY29uZC5nZXRIKCksIHRoaXMucmF0aW8pOwogICAgICB9OwogICAgICBWZXJ0ZXgucHJvdG90eXBlLmdldFUgPSBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHRoaXMuaW5kZXgpKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy51QnVmZmVyW3RoaXMuaW5kZXhdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gTWF0aF9kZWZhdWx0LmxlcnAodGhpcy5maXJzdC5nZXRVKCksIHRoaXMuc2Vjb25kLmdldFUoKSwgdGhpcy5yYXRpbyk7CiAgICAgIH07CiAgICAgIFZlcnRleC5wcm90b3R5cGUuZ2V0ViA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQodGhpcy5pbmRleCkpIHsKICAgICAgICAgIHJldHVybiB0aGlzLnZCdWZmZXJbdGhpcy5pbmRleF07CiAgICAgICAgfQogICAgICAgIHJldHVybiBNYXRoX2RlZmF1bHQubGVycCh0aGlzLmZpcnN0LmdldFYoKSwgdGhpcy5zZWNvbmQuZ2V0VigpLCB0aGlzLnJhdGlvKTsKICAgICAgfTsKICAgICAgZW5jb2RlZFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIGRlcHRoID0gLTE7CiAgICAgIGNhcnRlc2lhblNjcmF0Y2gxID0gW25ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpXTsKICAgICAgY2FydGVzaWFuU2NyYXRjaDIgPSBbbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLCBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCldOwogICAgICBWZXJ0ZXgucHJvdG90eXBlLmdldE5vcm1hbFggPSBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHRoaXMuaW5kZXgpKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxCdWZmZXJbdGhpcy5pbmRleCAqIDJdOwogICAgICAgIH0KICAgICAgICBlbmNvZGVkU2NyYXRjaCA9IGxlcnBPY3RFbmNvZGVkTm9ybWFsKHRoaXMsIGVuY29kZWRTY3JhdGNoKTsKICAgICAgICByZXR1cm4gZW5jb2RlZFNjcmF0Y2gueDsKICAgICAgfTsKICAgICAgVmVydGV4LnByb3RvdHlwZS5nZXROb3JtYWxZID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh0aGlzLmluZGV4KSkgewogICAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsQnVmZmVyW3RoaXMuaW5kZXggKiAyICsgMV07CiAgICAgICAgfQogICAgICAgIGVuY29kZWRTY3JhdGNoID0gbGVycE9jdEVuY29kZWROb3JtYWwodGhpcywgZW5jb2RlZFNjcmF0Y2gpOwogICAgICAgIHJldHVybiBlbmNvZGVkU2NyYXRjaC55OwogICAgICB9OwogICAgICBwb2x5Z29uVmVydGljZXMgPSBbXTsKICAgICAgcG9seWdvblZlcnRpY2VzLnB1c2gobmV3IFZlcnRleCgpKTsKICAgICAgcG9seWdvblZlcnRpY2VzLnB1c2gobmV3IFZlcnRleCgpKTsKICAgICAgcG9seWdvblZlcnRpY2VzLnB1c2gobmV3IFZlcnRleCgpKTsKICAgICAgcG9seWdvblZlcnRpY2VzLnB1c2gobmV3IFZlcnRleCgpKTsKICAgICAgdXBzYW1wbGVRdWFudGl6ZWRUZXJyYWluTWVzaF9kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0KHVwc2FtcGxlUXVhbnRpemVkVGVycmFpbk1lc2gpOwogICAgfQogIH0pOwoKICAvLyBpbXBvcnQoIi4vKiovKi5qcyIpIGluIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVHZW9tZXRyeS5qcwogIHZhciBnbG9iSW1wb3J0X2pzOwogIHZhciBpbml0XyA9IF9fZXNtKHsKICAgICdpbXBvcnQoIi4vKiovKi5qcyIpIGluIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVHZW9tZXRyeS5qcycoKSB7CiAgICAgIGdsb2JJbXBvcnRfanMgPSBfX2dsb2IoewogICAgICAgICIuL2NvbWJpbmVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY29tYmluZUdlb21ldHJ5KCksIGNvbWJpbmVHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlQm94R2VvbWV0cnkuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZUJveEdlb21ldHJ5KCksIGNyZWF0ZUJveEdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVCb3hPdXRsaW5lR2VvbWV0cnkuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZUJveE91dGxpbmVHZW9tZXRyeSgpLCBjcmVhdGVCb3hPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZUNpcmNsZUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVDaXJjbGVHZW9tZXRyeSgpLCBjcmVhdGVDaXJjbGVHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlQ2lyY2xlT3V0bGluZUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVDaXJjbGVPdXRsaW5lR2VvbWV0cnkoKSwgY3JlYXRlQ2lyY2xlT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVDb3BsYW5hclBvbHlnb25HZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnkoKSwgY3JlYXRlQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZUNvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5KCksIGNyZWF0ZUNvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlQ29ycmlkb3JHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlQ29ycmlkb3JHZW9tZXRyeSgpLCBjcmVhdGVDb3JyaWRvckdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVDb3JyaWRvck91dGxpbmVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnkoKSwgY3JlYXRlQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZUN5bGluZGVyR2VvbWV0cnkuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZUN5bGluZGVyR2VvbWV0cnkoKSwgY3JlYXRlQ3lsaW5kZXJHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnkuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZUN5bGluZGVyT3V0bGluZUdlb21ldHJ5KCksIGNyZWF0ZUN5bGluZGVyT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVFbGxpcHNlR2VvbWV0cnkuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZUVsbGlwc2VHZW9tZXRyeSgpLCBjcmVhdGVFbGxpcHNlR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZUVsbGlwc2VPdXRsaW5lR2VvbWV0cnkuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZUVsbGlwc2VPdXRsaW5lR2VvbWV0cnkoKSwgY3JlYXRlRWxsaXBzZU91dGxpbmVHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlRWxsaXBzb2lkR2VvbWV0cnkuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZUVsbGlwc29pZEdlb21ldHJ5KCksIGNyZWF0ZUVsbGlwc29pZEdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnkuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZUVsbGlwc29pZE91dGxpbmVHZW9tZXRyeSgpLCBjcmVhdGVFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZUZydXN0dW1HZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlRnJ1c3R1bUdlb21ldHJ5KCksIGNyZWF0ZUZydXN0dW1HZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlRnJ1c3R1bU91dGxpbmVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlRnJ1c3R1bU91dGxpbmVHZW9tZXRyeSgpLCBjcmVhdGVGcnVzdHVtT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlR2VvbWV0cnkoKSwgY3JlYXRlR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZUdyb3VuZFBvbHlsaW5lR2VvbWV0cnkuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZUdyb3VuZFBvbHlsaW5lR2VvbWV0cnkoKSwgY3JlYXRlR3JvdW5kUG9seWxpbmVHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlUGxhbmVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlUGxhbmVHZW9tZXRyeSgpLCBjcmVhdGVQbGFuZUdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVQbGFuZU91dGxpbmVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlUGxhbmVPdXRsaW5lR2VvbWV0cnkoKSwgY3JlYXRlUGxhbmVPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZVBvbHlnb25HZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlUG9seWdvbkdlb21ldHJ5KCksIGNyZWF0ZVBvbHlnb25HZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlUG9seWdvbk91dGxpbmVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlUG9seWdvbk91dGxpbmVHZW9tZXRyeSgpLCBjcmVhdGVQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVQb2x5bGluZUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVQb2x5bGluZUdlb21ldHJ5KCksIGNyZWF0ZVBvbHlsaW5lR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZVBvbHlsaW5lVm9sdW1lR2VvbWV0cnkuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZVBvbHlsaW5lVm9sdW1lR2VvbWV0cnkoKSwgY3JlYXRlUG9seWxpbmVWb2x1bWVHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZVBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5KCksIGNyZWF0ZVBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVSZWN0YW5nbGVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlUmVjdGFuZ2xlR2VvbWV0cnkoKSwgY3JlYXRlUmVjdGFuZ2xlR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZVJlY3RhbmdsZU91dGxpbmVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5KCksIGNyZWF0ZVJlY3RhbmdsZU91dGxpbmVHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlU2ltcGxlUG9seWxpbmVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlU2ltcGxlUG9seWxpbmVHZW9tZXRyeSgpLCBjcmVhdGVTaW1wbGVQb2x5bGluZUdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVTcGhlcmVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlU3BoZXJlR2VvbWV0cnkoKSwgY3JlYXRlU3BoZXJlR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZVNwaGVyZU91dGxpbmVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlU3BoZXJlT3V0bGluZUdlb21ldHJ5KCksIGNyZWF0ZVNwaGVyZU91dGxpbmVHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlci5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlVGFza1Byb2Nlc3NvcldvcmtlcigpLCBjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyX2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVWZWN0b3JUaWxlQ2xhbXBlZFBvbHlsaW5lcy5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlVmVjdG9yVGlsZUNsYW1wZWRQb2x5bGluZXMoKSwgY3JlYXRlVmVjdG9yVGlsZUNsYW1wZWRQb2x5bGluZXNfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZVZlY3RvclRpbGVHZW9tZXRyaWVzLmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVWZWN0b3JUaWxlR2VvbWV0cmllcygpLCBjcmVhdGVWZWN0b3JUaWxlR2VvbWV0cmllc19leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlVmVjdG9yVGlsZVBvaW50cy5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlVmVjdG9yVGlsZVBvaW50cygpLCBjcmVhdGVWZWN0b3JUaWxlUG9pbnRzX2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVWZWN0b3JUaWxlUG9seWdvbnMuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZVZlY3RvclRpbGVQb2x5Z29ucygpLCBjcmVhdGVWZWN0b3JUaWxlUG9seWdvbnNfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZVZlY3RvclRpbGVQb2x5bGluZXMuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZVZlY3RvclRpbGVQb2x5bGluZXMoKSwgY3JlYXRlVmVjdG9yVGlsZVBvbHlsaW5lc19leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlVmVydGljZXNGcm9tR29vZ2xlRWFydGhFbnRlcnByaXNlQnVmZmVyLmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVWZXJ0aWNlc0Zyb21Hb29nbGVFYXJ0aEVudGVycHJpc2VCdWZmZXIoKSwgY3JlYXRlVmVydGljZXNGcm9tR29vZ2xlRWFydGhFbnRlcnByaXNlQnVmZmVyX2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVWZXJ0aWNlc0Zyb21IZWlnaHRtYXAuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZVZlcnRpY2VzRnJvbUhlaWdodG1hcCgpLCBjcmVhdGVWZXJ0aWNlc0Zyb21IZWlnaHRtYXBfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZVZlcnRpY2VzRnJvbVF1YW50aXplZFRlcnJhaW5NZXNoLmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVWZXJ0aWNlc0Zyb21RdWFudGl6ZWRUZXJyYWluTWVzaCgpLCBjcmVhdGVWZXJ0aWNlc0Zyb21RdWFudGl6ZWRUZXJyYWluTWVzaF9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlV2FsbEdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVXYWxsR2VvbWV0cnkoKSwgY3JlYXRlV2FsbEdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVXYWxsT3V0bGluZUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVXYWxsT3V0bGluZUdlb21ldHJ5KCksIGNyZWF0ZVdhbGxPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2RlY29kZURyYWNvLmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9kZWNvZGVEcmFjbygpLCBkZWNvZGVEcmFjb19leHBvcnRzKSksCiAgICAgICAgIi4vZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlUGFja2V0LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9kZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VQYWNrZXQoKSwgZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlUGFja2V0X2V4cG9ydHMpKSwKICAgICAgICAiLi9kZWNvZGVJM1MuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2RlY29kZUkzUygpLCBkZWNvZGVJM1NfZXhwb3J0cykpLAogICAgICAgICIuL3RyYW5zY29kZUtUWDIuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X3RyYW5zY29kZUtUWDIoKSwgdHJhbnNjb2RlS1RYMl9leHBvcnRzKSksCiAgICAgICAgIi4vdHJhbnNmZXJUeXBlZEFycmF5VGVzdC5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfdHJhbnNmZXJUeXBlZEFycmF5VGVzdCgpLCB0cmFuc2ZlclR5cGVkQXJyYXlUZXN0X2V4cG9ydHMpKSwKICAgICAgICAiLi91cHNhbXBsZVF1YW50aXplZFRlcnJhaW5NZXNoLmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF91cHNhbXBsZVF1YW50aXplZFRlcnJhaW5NZXNoKCksIHVwc2FtcGxlUXVhbnRpemVkVGVycmFpbk1lc2hfZXhwb3J0cykpCiAgICAgIH0pOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZUdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBhc3luYyBmdW5jdGlvbiBnZXRNb2R1bGUobW9kdWxlTmFtZSkgewogICAgbGV0IG1vZHVsZSA9IG1vZHVsZUNhY2hlW21vZHVsZU5hbWVdOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQobW9kdWxlKSkgewogICAgICBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICJvYmplY3QiKSB7CiAgICAgICAgbW9kdWxlQ2FjaGVbbW9kdWxlXSA9IG1vZHVsZSA9IF9fcmVxdWlyZShgV29ya2Vycy8ke21vZHVsZU5hbWV9YCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2xvYkltcG9ydF9qcyhgLi8ke21vZHVsZU5hbWV9LmpzYCk7CiAgICAgICAgbW9kdWxlID0gcmVzdWx0LmRlZmF1bHQ7CiAgICAgICAgbW9kdWxlQ2FjaGVbbW9kdWxlXSA9IG1vZHVsZTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIG1vZHVsZTsKICB9CiAgYXN5bmMgZnVuY3Rpb24gY3JlYXRlR2VvbWV0cnkocGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cykgewogICAgY29uc3Qgc3ViVGFza3MgPSBwYXJhbWV0ZXJzLnN1YlRhc2tzOwogICAgY29uc3QgbGVuZ3RoID0gc3ViVGFza3MubGVuZ3RoOwogICAgY29uc3QgcmVzdWx0c09yUHJvbWlzZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgY29uc3QgdGFzayA9IHN1YlRhc2tzW2ldOwogICAgICBjb25zdCBnZW9tZXRyeSA9IHRhc2suZ2VvbWV0cnk7CiAgICAgIGNvbnN0IG1vZHVsZU5hbWUgPSB0YXNrLm1vZHVsZU5hbWU7CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobW9kdWxlTmFtZSkpIHsKICAgICAgICByZXN1bHRzT3JQcm9taXNlc1tpXSA9IGdldE1vZHVsZShtb2R1bGVOYW1lKS50aGVuKAogICAgICAgICAgKGNyZWF0ZUZ1bmN0aW9uKSA9PiBjcmVhdGVGdW5jdGlvbihnZW9tZXRyeSwgdGFzay5vZmZzZXQpCiAgICAgICAgKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXN1bHRzT3JQcm9taXNlc1tpXSA9IGdlb21ldHJ5OwogICAgICB9CiAgICB9CiAgICByZXR1cm4gUHJvbWlzZS5hbGwocmVzdWx0c09yUHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24ocmVzdWx0cykgewogICAgICByZXR1cm4gUHJpbWl0aXZlUGlwZWxpbmVfZGVmYXVsdC5wYWNrQ3JlYXRlR2VvbWV0cnlSZXN1bHRzKAogICAgICAgIHJlc3VsdHMsCiAgICAgICAgdHJhbnNmZXJhYmxlT2JqZWN0cwogICAgICApOwogICAgfSk7CiAgfQogIHZhciBtb2R1bGVDYWNoZSwgY3JlYXRlR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9QcmltaXRpdmVQaXBlbGluZSgpOwogICAgICBpbml0X2NyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXIoKTsKICAgICAgaW5pdF8oKTsKICAgICAgbW9kdWxlQ2FjaGUgPSB7fTsKICAgICAgY3JlYXRlR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXJfZGVmYXVsdChjcmVhdGVHZW9tZXRyeSk7CiAgICB9CiAgfSk7CgogIC8vIDxzdGRpbj4KICB2YXIgc3RkaW5fZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KHN0ZGluX2V4cG9ydHMsIHsKICAgIGNvbWJpbmVHZW9tZXRyeTogKCkgPT4gY29tYmluZUdlb21ldHJ5MiwKICAgIGNyZWF0ZUJveEdlb21ldHJ5OiAoKSA9PiBjcmVhdGVCb3hHZW9tZXRyeTIsCiAgICBjcmVhdGVCb3hPdXRsaW5lR2VvbWV0cnk6ICgpID0+IGNyZWF0ZUJveE91dGxpbmVHZW9tZXRyeTIsCiAgICBjcmVhdGVDaXJjbGVHZW9tZXRyeTogKCkgPT4gY3JlYXRlQ2lyY2xlR2VvbWV0cnkyLAogICAgY3JlYXRlQ2lyY2xlT3V0bGluZUdlb21ldHJ5OiAoKSA9PiBjcmVhdGVDaXJjbGVPdXRsaW5lR2VvbWV0cnkyLAogICAgY3JlYXRlQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnk6ICgpID0+IGNyZWF0ZUNvcGxhbmFyUG9seWdvbkdlb21ldHJ5MiwKICAgIGNyZWF0ZUNvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeTogKCkgPT4gY3JlYXRlQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5MiwKICAgIGNyZWF0ZUNvcnJpZG9yR2VvbWV0cnk6ICgpID0+IGNyZWF0ZUNvcnJpZG9yR2VvbWV0cnkyLAogICAgY3JlYXRlQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnk6ICgpID0+IGNyZWF0ZUNvcnJpZG9yT3V0bGluZUdlb21ldHJ5MiwKICAgIGNyZWF0ZUN5bGluZGVyR2VvbWV0cnk6ICgpID0+IGNyZWF0ZUN5bGluZGVyR2VvbWV0cnkyLAogICAgY3JlYXRlQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnk6ICgpID0+IGNyZWF0ZUN5bGluZGVyT3V0bGluZUdlb21ldHJ5MiwKICAgIGNyZWF0ZUVsbGlwc2VHZW9tZXRyeTogKCkgPT4gY3JlYXRlRWxsaXBzZUdlb21ldHJ5MiwKICAgIGNyZWF0ZUVsbGlwc2VPdXRsaW5lR2VvbWV0cnk6ICgpID0+IGNyZWF0ZUVsbGlwc2VPdXRsaW5lR2VvbWV0cnkyLAogICAgY3JlYXRlRWxsaXBzb2lkR2VvbWV0cnk6ICgpID0+IGNyZWF0ZUVsbGlwc29pZEdlb21ldHJ5MiwKICAgIGNyZWF0ZUVsbGlwc29pZE91dGxpbmVHZW9tZXRyeTogKCkgPT4gY3JlYXRlRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5MiwKICAgIGNyZWF0ZUZydXN0dW1HZW9tZXRyeTogKCkgPT4gY3JlYXRlRnJ1c3R1bUdlb21ldHJ5MiwKICAgIGNyZWF0ZUZydXN0dW1PdXRsaW5lR2VvbWV0cnk6ICgpID0+IGNyZWF0ZUZydXN0dW1PdXRsaW5lR2VvbWV0cnkyLAogICAgY3JlYXRlR2VvbWV0cnk6ICgpID0+IGNyZWF0ZUdlb21ldHJ5MiwKICAgIGNyZWF0ZUdyb3VuZFBvbHlsaW5lR2VvbWV0cnk6ICgpID0+IGNyZWF0ZUdyb3VuZFBvbHlsaW5lR2VvbWV0cnkyLAogICAgY3JlYXRlUGxhbmVHZW9tZXRyeTogKCkgPT4gY3JlYXRlUGxhbmVHZW9tZXRyeTIsCiAgICBjcmVhdGVQbGFuZU91dGxpbmVHZW9tZXRyeTogKCkgPT4gY3JlYXRlUGxhbmVPdXRsaW5lR2VvbWV0cnkyLAogICAgY3JlYXRlUG9seWdvbkdlb21ldHJ5OiAoKSA9PiBjcmVhdGVQb2x5Z29uR2VvbWV0cnkyLAogICAgY3JlYXRlUG9seWdvbk91dGxpbmVHZW9tZXRyeTogKCkgPT4gY3JlYXRlUG9seWdvbk91dGxpbmVHZW9tZXRyeTIsCiAgICBjcmVhdGVQb2x5bGluZUdlb21ldHJ5OiAoKSA9PiBjcmVhdGVQb2x5bGluZUdlb21ldHJ5MiwKICAgIGNyZWF0ZVBvbHlsaW5lVm9sdW1lR2VvbWV0cnk6ICgpID0+IGNyZWF0ZVBvbHlsaW5lVm9sdW1lR2VvbWV0cnkyLAogICAgY3JlYXRlUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnk6ICgpID0+IGNyZWF0ZVBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5MiwKICAgIGNyZWF0ZVJlY3RhbmdsZUdlb21ldHJ5OiAoKSA9PiBjcmVhdGVSZWN0YW5nbGVHZW9tZXRyeTIsCiAgICBjcmVhdGVSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnk6ICgpID0+IGNyZWF0ZVJlY3RhbmdsZU91dGxpbmVHZW9tZXRyeTIsCiAgICBjcmVhdGVTaW1wbGVQb2x5bGluZUdlb21ldHJ5OiAoKSA9PiBjcmVhdGVTaW1wbGVQb2x5bGluZUdlb21ldHJ5MiwKICAgIGNyZWF0ZVNwaGVyZUdlb21ldHJ5OiAoKSA9PiBjcmVhdGVTcGhlcmVHZW9tZXRyeTIsCiAgICBjcmVhdGVTcGhlcmVPdXRsaW5lR2VvbWV0cnk6ICgpID0+IGNyZWF0ZVNwaGVyZU91dGxpbmVHZW9tZXRyeTIsCiAgICBjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyOiAoKSA9PiBjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyMiwKICAgIGNyZWF0ZVZlY3RvclRpbGVDbGFtcGVkUG9seWxpbmVzOiAoKSA9PiBjcmVhdGVWZWN0b3JUaWxlQ2xhbXBlZFBvbHlsaW5lczIsCiAgICBjcmVhdGVWZWN0b3JUaWxlR2VvbWV0cmllczogKCkgPT4gY3JlYXRlVmVjdG9yVGlsZUdlb21ldHJpZXMyLAogICAgY3JlYXRlVmVjdG9yVGlsZVBvaW50czogKCkgPT4gY3JlYXRlVmVjdG9yVGlsZVBvaW50czIsCiAgICBjcmVhdGVWZWN0b3JUaWxlUG9seWdvbnM6ICgpID0+IGNyZWF0ZVZlY3RvclRpbGVQb2x5Z29uczIsCiAgICBjcmVhdGVWZWN0b3JUaWxlUG9seWxpbmVzOiAoKSA9PiBjcmVhdGVWZWN0b3JUaWxlUG9seWxpbmVzMiwKICAgIGNyZWF0ZVZlcnRpY2VzRnJvbUdvb2dsZUVhcnRoRW50ZXJwcmlzZUJ1ZmZlcjogKCkgPT4gY3JlYXRlVmVydGljZXNGcm9tR29vZ2xlRWFydGhFbnRlcnByaXNlQnVmZmVyMiwKICAgIGNyZWF0ZVZlcnRpY2VzRnJvbUhlaWdodG1hcDogKCkgPT4gY3JlYXRlVmVydGljZXNGcm9tSGVpZ2h0bWFwMiwKICAgIGNyZWF0ZVZlcnRpY2VzRnJvbVF1YW50aXplZFRlcnJhaW5NZXNoOiAoKSA9PiBjcmVhdGVWZXJ0aWNlc0Zyb21RdWFudGl6ZWRUZXJyYWluTWVzaDIsCiAgICBjcmVhdGVXYWxsR2VvbWV0cnk6ICgpID0+IGNyZWF0ZVdhbGxHZW9tZXRyeTIsCiAgICBjcmVhdGVXYWxsT3V0bGluZUdlb21ldHJ5OiAoKSA9PiBjcmVhdGVXYWxsT3V0bGluZUdlb21ldHJ5MiwKICAgIGRlY29kZURyYWNvOiAoKSA9PiBkZWNvZGVEcmFjbzIsCiAgICBkZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VQYWNrZXQ6ICgpID0+IGRlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZVBhY2tldDIsCiAgICBkZWNvZGVJM1M6ICgpID0+IGRlY29kZUkzUzIsCiAgICB0cmFuc2NvZGVLVFgyOiAoKSA9PiB0cmFuc2NvZGVLVFgyMiwKICAgIHRyYW5zZmVyVHlwZWRBcnJheVRlc3Q6ICgpID0+IHRyYW5zZmVyVHlwZWRBcnJheVRlc3QsCiAgICB1cHNhbXBsZVF1YW50aXplZFRlcnJhaW5NZXNoOiAoKSA9PiB1cHNhbXBsZVF1YW50aXplZFRlcnJhaW5NZXNoMgogIH0pOwogIHZhciBjb21iaW5lR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NvbWJpbmVHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVCb3hHZW9tZXRyeTIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlQm94R2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlQm94T3V0bGluZUdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVCb3hPdXRsaW5lR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlQ2lyY2xlR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZUNpcmNsZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZUNpcmNsZU91dGxpbmVHZW9tZXRyeTIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlQ2lyY2xlT3V0bGluZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZUNvcGxhbmFyUG9seWdvbkdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVDb3BsYW5hclBvbHlnb25HZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZUNvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVDb3JyaWRvckdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVDb3JyaWRvckdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZUNvcnJpZG9yT3V0bGluZUdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVDb3JyaWRvck91dGxpbmVHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVDeWxpbmRlckdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVDeWxpbmRlckdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZUN5bGluZGVyT3V0bGluZUdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVDeWxpbmRlck91dGxpbmVHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVFbGxpcHNlR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZUVsbGlwc2VHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVFbGxpcHNlT3V0bGluZUdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVFbGxpcHNlT3V0bGluZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZUVsbGlwc29pZEdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVFbGxpcHNvaWRHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZUVsbGlwc29pZE91dGxpbmVHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVGcnVzdHVtR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZUZydXN0dW1HZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVGcnVzdHVtT3V0bGluZUdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVGcnVzdHVtT3V0bGluZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZUdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVHcm91bmRQb2x5bGluZUdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVHcm91bmRQb2x5bGluZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZVBsYW5lR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZVBsYW5lR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlUGxhbmVPdXRsaW5lR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZVBsYW5lT3V0bGluZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZVBvbHlnb25HZW9tZXRyeTIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlUG9seWdvbkdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZVBvbHlnb25PdXRsaW5lR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZVBvbHlnb25PdXRsaW5lR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlUG9seWxpbmVHZW9tZXRyeTIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlUG9seWxpbmVHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVQb2x5bGluZVZvbHVtZUdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVQb2x5bGluZVZvbHVtZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZVBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVSZWN0YW5nbGVHZW9tZXRyeTIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlUmVjdGFuZ2xlR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlU2ltcGxlUG9seWxpbmVHZW9tZXRyeTIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlU2ltcGxlUG9seWxpbmVHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVTcGhlcmVHZW9tZXRyeTIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlU3BoZXJlR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlU3BoZXJlT3V0bGluZUdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVTcGhlcmVPdXRsaW5lR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlVGFza1Byb2Nlc3NvcldvcmtlcjIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlVGFza1Byb2Nlc3NvcldvcmtlcigpKTsKICB9OwogIHZhciBjcmVhdGVWZWN0b3JUaWxlQ2xhbXBlZFBvbHlsaW5lczIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlVmVjdG9yVGlsZUNsYW1wZWRQb2x5bGluZXMoKSk7CiAgfTsKICB2YXIgY3JlYXRlVmVjdG9yVGlsZUdlb21ldHJpZXMyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZVZlY3RvclRpbGVHZW9tZXRyaWVzKCkpOwogIH07CiAgdmFyIGNyZWF0ZVZlY3RvclRpbGVQb2ludHMyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZVZlY3RvclRpbGVQb2ludHMoKSk7CiAgfTsKICB2YXIgY3JlYXRlVmVjdG9yVGlsZVBvbHlnb25zMiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVWZWN0b3JUaWxlUG9seWdvbnMoKSk7CiAgfTsKICB2YXIgY3JlYXRlVmVjdG9yVGlsZVBvbHlsaW5lczIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlVmVjdG9yVGlsZVBvbHlsaW5lcygpKTsKICB9OwogIHZhciBjcmVhdGVWZXJ0aWNlc0Zyb21Hb29nbGVFYXJ0aEVudGVycHJpc2VCdWZmZXIyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZVZlcnRpY2VzRnJvbUdvb2dsZUVhcnRoRW50ZXJwcmlzZUJ1ZmZlcigpKTsKICB9OwogIHZhciBjcmVhdGVWZXJ0aWNlc0Zyb21IZWlnaHRtYXAyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZVZlcnRpY2VzRnJvbUhlaWdodG1hcCgpKTsKICB9OwogIHZhciBjcmVhdGVWZXJ0aWNlc0Zyb21RdWFudGl6ZWRUZXJyYWluTWVzaDIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlVmVydGljZXNGcm9tUXVhbnRpemVkVGVycmFpbk1lc2goKSk7CiAgfTsKICB2YXIgY3JlYXRlV2FsbEdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVXYWxsR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlV2FsbE91dGxpbmVHZW9tZXRyeTIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlV2FsbE91dGxpbmVHZW9tZXRyeSgpKTsKICB9OwogIHZhciBkZWNvZGVEcmFjbzIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfZGVjb2RlRHJhY28oKSk7CiAgfTsKICB2YXIgZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlUGFja2V0MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9kZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VQYWNrZXQoKSk7CiAgfTsKICB2YXIgZGVjb2RlSTNTMiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9kZWNvZGVJM1MoKSk7CiAgfTsKICB2YXIgdHJhbnNjb2RlS1RYMjIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfdHJhbnNjb2RlS1RYMigpKTsKICB9OwogIHZhciB0cmFuc2ZlclR5cGVkQXJyYXlUZXN0ID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X3RyYW5zZmVyVHlwZWRBcnJheVRlc3QoKSk7CiAgfTsKICB2YXIgdXBzYW1wbGVRdWFudGl6ZWRUZXJyYWluTWVzaDIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfdXBzYW1wbGVRdWFudGl6ZWRUZXJyYWluTWVzaCgpKTsKICB9OwogIHJldHVybiBfX3RvQ29tbW9uSlMoc3RkaW5fZXhwb3J0cyk7Cn0pKCk7Cg==");